(function(){const s=document.createElement("link").relList;if(s&&s.supports&&s.supports("modulepreload"))return;for(const t of document.querySelectorAll('link[rel="modulepreload"]'))v(t);new MutationObserver(t=>{for(const e of t)if(e.type==="childList")for(const c of e.addedNodes)c.tagName==="LINK"&&c.rel==="modulepreload"&&v(c)}).observe(document,{childList:!0,subtree:!0});function d(t){const e={};return t.integrity&&(e.integrity=t.integrity),t.referrerPolicy&&(e.referrerPolicy=t.referrerPolicy),t.crossOrigin==="use-credentials"?e.credentials="include":t.crossOrigin==="anonymous"?e.credentials="omit":e.credentials="same-origin",e}function v(t){if(t.ep)return;t.ep=!0;const e=d(t);fetch(t.href,e)}})();function Ct(a,s){const d=Object.create(null),v=a.split(",");for(let t=0;t<v.length;t++)d[v[t]]=!0;return s?t=>!!d[t.toLowerCase()]:t=>!!d[t]}const ua={},Fs=[],Ja=()=>{},Ln=()=>!1,jn=/^on[^a-z]/,Nd=a=>jn.test(a),xt=a=>a.startsWith("onUpdate:"),Ta=Object.assign,Lt=(a,s)=>{const d=a.indexOf(s);d>-1&&a.splice(d,1)},Vn=Object.prototype.hasOwnProperty,Q=(a,s)=>Vn.call(a,s),R=Array.isArray,Is=a=>$d(a)==="[object Map]",dv=a=>$d(a)==="[object Set]",D=a=>typeof a=="function",Sa=a=>typeof a=="string",jt=a=>typeof a=="symbol",ha=a=>a!==null&&typeof a=="object",tv=a=>ha(a)&&D(a.then)&&D(a.catch),cv=Object.prototype.toString,$d=a=>cv.call(a),Pn=a=>$d(a).slice(8,-1),vv=a=>$d(a)==="[object Object]",Vt=a=>Sa(a)&&a!=="NaN"&&a[0]!=="-"&&""+parseInt(a,10)===a,Td=Ct(",key,ref,ref_for,ref_key,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted"),Ed=a=>{const s=Object.create(null);return d=>s[d]||(s[d]=a(d))},On=/-(\w)/g,Za=Ed(a=>a.replace(On,(s,d)=>d?d.toUpperCase():"")),Nn=/\B([A-Z])/g,Us=Ed(a=>a.replace(Nn,"-$1").toLowerCase()),Md=Ed(a=>a.charAt(0).toUpperCase()+a.slice(1)),Qd=Ed(a=>a?`on${Md(a)}`:""),pd=(a,s)=>!Object.is(a,s),Zd=(a,s)=>{for(let d=0;d<a.length;d++)a[d](s)},xd=(a,s,d)=>{Object.defineProperty(a,s,{configurable:!0,enumerable:!1,value:d})},$n=a=>{const s=parseFloat(a);return isNaN(s)?a:s},En=a=>{const s=Sa(a)?Number(a):NaN;return isNaN(s)?a:s};let dc;const lt=()=>dc||(dc=typeof globalThis<"u"?globalThis:typeof self<"u"?self:typeof window<"u"?window:typeof global<"u"?global:{});function Pt(a){if(R(a)){const s={};for(let d=0;d<a.length;d++){const v=a[d],t=Sa(v)?In(v):Pt(v);if(t)for(const e in t)s[e]=t[e]}return s}else{if(Sa(a))return a;if(ha(a))return a}}const Mn=/;(?![^(]*\))/g,An=/:([^]+)/,Fn=/\/\*[^]*?\*\//g;function In(a){const s={};return a.replace(Fn,"").split(Mn).forEach(d=>{if(d){const v=d.split(An);v.length>1&&(s[v[0].trim()]=v[1].trim())}}),s}function Ad(a){let s="";if(Sa(a))s=a;else if(R(a))for(let d=0;d<a.length;d++){const v=Ad(a[d]);v&&(s+=v+" ")}else if(ha(a))for(const d in a)a[d]&&(s+=d+" ");return s.trim()}const Rn="itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly",Hn=Ct(Rn);function nv(a){return!!a||a===""}const Bn=a=>Sa(a)?a:a==null?"":R(a)||ha(a)&&(a.toString===cv||!D(a.toString))?JSON.stringify(a,ev,2):String(a),ev=(a,s)=>s&&s.__v_isRef?ev(a,s.value):Is(s)?{[`Map(${s.size})`]:[...s.entries()].reduce((d,[v,t])=>(d[`${v} =>`]=t,d),{})}:dv(s)?{[`Set(${s.size})`]:[...s.values()]}:ha(s)&&!R(s)&&!vv(s)?String(s):s;let Ra;class pv{constructor(s=!1){this.detached=s,this._active=!0,this.effects=[],this.cleanups=[],this.parent=Ra,!s&&Ra&&(this.index=(Ra.scopes||(Ra.scopes=[])).push(this)-1)}get active(){return this._active}run(s){if(this._active){const d=Ra;try{return Ra=this,s()}finally{Ra=d}}}on(){Ra=this}off(){Ra=this.parent}stop(s){if(this._active){let d,v;for(d=0,v=this.effects.length;d<v;d++)this.effects[d].stop();for(d=0,v=this.cleanups.length;d<v;d++)this.cleanups[d]();if(this.scopes)for(d=0,v=this.scopes.length;d<v;d++)this.scopes[d].stop(!0);if(!this.detached&&this.parent&&!s){const t=this.parent.scopes.pop();t&&t!==this&&(this.parent.scopes[this.index]=t,t.index=this.index)}this.parent=void 0,this._active=!1}}}function Dn(a){return new pv(a)}function Jn(a,s=Ra){s&&s.active&&s.effects.push(a)}function Wn(){return Ra}const Ot=a=>{const s=new Set(a);return s.w=0,s.n=0,s},lv=a=>(a.w&zs)>0,bv=a=>(a.n&zs)>0,Un=({deps:a})=>{if(a.length)for(let s=0;s<a.length;s++)a[s].w|=zs},Kn=a=>{const{deps:s}=a;if(s.length){let d=0;for(let v=0;v<s.length;v++){const t=s[v];lv(t)&&!bv(t)?t.delete(a):s[d++]=t,t.w&=~zs,t.n&=~zs}s.length=d}},bt=new WeakMap;let dd=0,zs=1;const rt=30;let Ha;const Vs=Symbol(""),it=Symbol("");class Nt{constructor(s,d=null,v){this.fn=s,this.scheduler=d,this.active=!0,this.deps=[],this.parent=void 0,Jn(this,v)}run(){if(!this.active)return this.fn();let s=Ha,d=ks;for(;s;){if(s===this)return;s=s.parent}try{return this.parent=Ha,Ha=this,ks=!0,zs=1<<++dd,dd<=rt?Un(this):tc(this),this.fn()}finally{dd<=rt&&Kn(this),zs=1<<--dd,Ha=this.parent,ks=d,this.parent=void 0,this.deferStop&&this.stop()}}stop(){Ha===this?this.deferStop=!0:this.active&&(tc(this),this.onStop&&this.onStop(),this.active=!1)}}function tc(a){const{deps:s}=a;if(s.length){for(let d=0;d<s.length;d++)s[d].delete(a);s.length=0}}let ks=!0;const rv=[];function Ks(){rv.push(ks),ks=!1}function Xs(){const a=rv.pop();ks=a===void 0?!0:a}function $a(a,s,d){if(ks&&Ha){let v=bt.get(a);v||bt.set(a,v=new Map);let t=v.get(d);t||v.set(d,t=Ot()),iv(t)}}function iv(a,s){let d=!1;dd<=rt?bv(a)||(a.n|=zs,d=!lv(a)):d=!a.has(Ha),d&&(a.add(Ha),Ha.deps.push(a))}function ns(a,s,d,v,t,e){const c=bt.get(a);if(!c)return;let l=[];if(s==="clear")l=[...c.values()];else if(d==="length"&&R(a)){const p=Number(v);c.forEach((r,i)=>{(i==="length"||i>=p)&&l.push(r)})}else switch(d!==void 0&&l.push(c.get(d)),s){case"add":R(a)?Vt(d)&&l.push(c.get("length")):(l.push(c.get(Vs)),Is(a)&&l.push(c.get(it)));break;case"delete":R(a)||(l.push(c.get(Vs)),Is(a)&&l.push(c.get(it)));break;case"set":Is(a)&&l.push(c.get(Vs));break}if(l.length===1)l[0]&&ft(l[0]);else{const p=[];for(const r of l)r&&p.push(...r);ft(Ot(p))}}function ft(a,s){const d=R(a)?a:[...a];for(const v of d)v.computed&&cc(v);for(const v of d)v.computed||cc(v)}function cc(a,s){(a!==Ha||a.allowRecurse)&&(a.scheduler?a.scheduler():a.run())}const Xn=Ct("__proto__,__v_isRef,__isVue"),fv=new Set(Object.getOwnPropertyNames(Symbol).filter(a=>a!=="arguments"&&a!=="caller").map(a=>Symbol[a]).filter(jt)),Yn=$t(),Gn=$t(!1,!0),Qn=$t(!0),vc=Zn();function Zn(){const a={};return["includes","indexOf","lastIndexOf"].forEach(s=>{a[s]=function(...d){const v=Z(this);for(let e=0,c=this.length;e<c;e++)$a(v,"get",e+"");const t=v[s](...d);return t===-1||t===!1?v[s](...d.map(Z)):t}}),["push","pop","shift","unshift","splice"].forEach(s=>{a[s]=function(...d){Ks();const v=Z(this)[s].apply(this,d);return Xs(),v}}),a}function ae(a){const s=Z(this);return $a(s,"has",a),s.hasOwnProperty(a)}function $t(a=!1,s=!1){return function(v,t,e){if(t==="__v_isReactive")return!a;if(t==="__v_isReadonly")return a;if(t==="__v_isShallow")return s;if(t==="__v_raw"&&e===(a?s?we:hv:s?mv:wv).get(v))return v;const c=R(v);if(!a){if(c&&Q(vc,t))return Reflect.get(vc,t,e);if(t==="hasOwnProperty")return ae}const l=Reflect.get(v,t,e);return(jt(t)?fv.has(t):Xn(t))||(a||$a(v,"get",t),s)?l:ja(l)?c&&Vt(t)?l:l.value:ha(l)?a?gv(l):Id(l):l}}const se=ov(),de=ov(!0);function ov(a=!1){return function(d,v,t,e){let c=d[v];if(Bs(c)&&ja(c)&&!ja(t))return!1;if(!a&&(!Ld(t)&&!Bs(t)&&(c=Z(c),t=Z(t)),!R(d)&&ja(c)&&!ja(t)))return c.value=t,!0;const l=R(d)&&Vt(v)?Number(v)<d.length:Q(d,v),p=Reflect.set(d,v,t,e);return d===Z(e)&&(l?pd(t,c)&&ns(d,"set",v,t):ns(d,"add",v,t)),p}}function te(a,s){const d=Q(a,s);a[s];const v=Reflect.deleteProperty(a,s);return v&&d&&ns(a,"delete",s,void 0),v}function ce(a,s){const d=Reflect.has(a,s);return(!jt(s)||!fv.has(s))&&$a(a,"has",s),d}function ve(a){return $a(a,"iterate",R(a)?"length":Vs),Reflect.ownKeys(a)}const uv={get:Yn,set:se,deleteProperty:te,has:ce,ownKeys:ve},ne={get:Qn,set(a,s){return!0},deleteProperty(a,s){return!0}},ee=Ta({},uv,{get:Gn,set:de}),Et=a=>a,Fd=a=>Reflect.getPrototypeOf(a);function wd(a,s,d=!1,v=!1){a=a.__v_raw;const t=Z(a),e=Z(s);d||(s!==e&&$a(t,"get",s),$a(t,"get",e));const{has:c}=Fd(t),l=v?Et:d?It:ld;if(c.call(t,s))return l(a.get(s));if(c.call(t,e))return l(a.get(e));a!==t&&a.get(s)}function md(a,s=!1){const d=this.__v_raw,v=Z(d),t=Z(a);return s||(a!==t&&$a(v,"has",a),$a(v,"has",t)),a===t?d.has(a):d.has(a)||d.has(t)}function hd(a,s=!1){return a=a.__v_raw,!s&&$a(Z(a),"iterate",Vs),Reflect.get(a,"size",a)}function nc(a){a=Z(a);const s=Z(this);return Fd(s).has.call(s,a)||(s.add(a),ns(s,"add",a,a)),this}function ec(a,s){s=Z(s);const d=Z(this),{has:v,get:t}=Fd(d);let e=v.call(d,a);e||(a=Z(a),e=v.call(d,a));const c=t.call(d,a);return d.set(a,s),e?pd(s,c)&&ns(d,"set",a,s):ns(d,"add",a,s),this}function pc(a){const s=Z(this),{has:d,get:v}=Fd(s);let t=d.call(s,a);t||(a=Z(a),t=d.call(s,a)),v&&v.call(s,a);const e=s.delete(a);return t&&ns(s,"delete",a,void 0),e}function lc(){const a=Z(this),s=a.size!==0,d=a.clear();return s&&ns(a,"clear",void 0,void 0),d}function kd(a,s){return function(v,t){const e=this,c=e.__v_raw,l=Z(c),p=s?Et:a?It:ld;return!a&&$a(l,"iterate",Vs),c.forEach((r,i)=>v.call(t,p(r),p(i),e))}}function gd(a,s,d){return function(...v){const t=this.__v_raw,e=Z(t),c=Is(e),l=a==="entries"||a===Symbol.iterator&&c,p=a==="keys"&&c,r=t[a](...v),i=d?Et:s?It:ld;return!s&&$a(e,"iterate",p?it:Vs),{next(){const{value:o,done:w}=r.next();return w?{value:o,done:w}:{value:l?[i(o[0]),i(o[1])]:i(o),done:w}},[Symbol.iterator](){return this}}}}function fs(a){return function(...s){return a==="delete"?!1:this}}function pe(){const a={get(e){return wd(this,e)},get size(){return hd(this)},has:md,add:nc,set:ec,delete:pc,clear:lc,forEach:kd(!1,!1)},s={get(e){return wd(this,e,!1,!0)},get size(){return hd(this)},has:md,add:nc,set:ec,delete:pc,clear:lc,forEach:kd(!1,!0)},d={get(e){return wd(this,e,!0)},get size(){return hd(this,!0)},has(e){return md.call(this,e,!0)},add:fs("add"),set:fs("set"),delete:fs("delete"),clear:fs("clear"),forEach:kd(!0,!1)},v={get(e){return wd(this,e,!0,!0)},get size(){return hd(this,!0)},has(e){return md.call(this,e,!0)},add:fs("add"),set:fs("set"),delete:fs("delete"),clear:fs("clear"),forEach:kd(!0,!0)};return["keys","values","entries",Symbol.iterator].forEach(e=>{a[e]=gd(e,!1,!1),d[e]=gd(e,!0,!1),s[e]=gd(e,!1,!0),v[e]=gd(e,!0,!0)}),[a,d,s,v]}const[le,be,re,ie]=pe();function Mt(a,s){const d=s?a?ie:re:a?be:le;return(v,t,e)=>t==="__v_isReactive"?!a:t==="__v_isReadonly"?a:t==="__v_raw"?v:Reflect.get(Q(d,t)&&t in v?d:v,t,e)}const fe={get:Mt(!1,!1)},oe={get:Mt(!1,!0)},ue={get:Mt(!0,!1)},wv=new WeakMap,mv=new WeakMap,hv=new WeakMap,we=new WeakMap;function me(a){switch(a){case"Object":case"Array":return 1;case"Map":case"Set":case"WeakMap":case"WeakSet":return 2;default:return 0}}function he(a){return a.__v_skip||!Object.isExtensible(a)?0:me(Pn(a))}function Id(a){return Bs(a)?a:At(a,!1,uv,fe,wv)}function kv(a){return At(a,!1,ee,oe,mv)}function gv(a){return At(a,!0,ne,ue,hv)}function At(a,s,d,v,t){if(!ha(a)||a.__v_raw&&!(s&&a.__v_isReactive))return a;const e=t.get(a);if(e)return e;const c=he(a);if(c===0)return a;const l=new Proxy(a,c===2?v:d);return t.set(a,l),l}function Rs(a){return Bs(a)?Rs(a.__v_raw):!!(a&&a.__v_isReactive)}function Bs(a){return!!(a&&a.__v_isReadonly)}function Ld(a){return!!(a&&a.__v_isShallow)}function zv(a){return Rs(a)||Bs(a)}function Z(a){const s=a&&a.__v_raw;return s?Z(s):a}function Ft(a){return xd(a,"__v_skip",!0),a}const ld=a=>ha(a)?Id(a):a,It=a=>ha(a)?gv(a):a;function Tv(a){ks&&Ha&&(a=Z(a),iv(a.dep||(a.dep=Ot())))}function qv(a,s){a=Z(a);const d=a.dep;d&&ft(d)}function ja(a){return!!(a&&a.__v_isRef===!0)}function ba(a){return _v(a,!1)}function ke(a){return _v(a,!0)}function _v(a,s){return ja(a)?a:new ge(a,s)}class ge{constructor(s,d){this.__v_isShallow=d,this.dep=void 0,this.__v_isRef=!0,this._rawValue=d?s:Z(s),this._value=d?s:ld(s)}get value(){return Tv(this),this._value}set value(s){const d=this.__v_isShallow||Ld(s)||Bs(s);s=d?s:Z(s),pd(s,this._rawValue)&&(this._rawValue=s,this._value=d?s:ld(s),qv(this))}}function Ps(a){return ja(a)?a.value:a}const ze={get:(a,s,d)=>Ps(Reflect.get(a,s,d)),set:(a,s,d,v)=>{const t=a[s];return ja(t)&&!ja(d)?(t.value=d,!0):Reflect.set(a,s,d,v)}};function Sv(a){return Rs(a)?a:new Proxy(a,ze)}class Te{constructor(s,d,v,t){this._setter=d,this.dep=void 0,this.__v_isRef=!0,this.__v_isReadonly=!1,this._dirty=!0,this.effect=new Nt(s,()=>{this._dirty||(this._dirty=!0,qv(this))}),this.effect.computed=this,this.effect.active=this._cacheable=!t,this.__v_isReadonly=v}get value(){const s=Z(this);return Tv(s),(s._dirty||!s._cacheable)&&(s._dirty=!1,s._value=s.effect.run()),s._value}set value(s){this._setter(s)}}function qe(a,s,d=!1){let v,t;const e=D(a);return e?(v=a,t=Ja):(v=a.get,t=a.set),new Te(v,t,e||!t,d)}function gs(a,s,d,v){let t;try{t=v?a(...v):a()}catch(e){Rd(e,s,d)}return t}function Fa(a,s,d,v){if(D(a)){const e=gs(a,s,d,v);return e&&tv(e)&&e.catch(c=>{Rd(c,s,d)}),e}const t=[];for(let e=0;e<a.length;e++)t.push(Fa(a[e],s,d,v));return t}function Rd(a,s,d,v=!0){const t=s?s.vnode:null;if(s){let e=s.parent;const c=s.proxy,l=d;for(;e;){const r=e.ec;if(r){for(let i=0;i<r.length;i++)if(r[i](a,c,l)===!1)return}e=e.parent}const p=s.appContext.config.errorHandler;if(p){gs(p,null,10,[a,c,l]);return}}_e(a,d,t,v)}function _e(a,s,d,v=!0){console.error(a)}let bd=!1,ot=!1;const La=[];let Qa=0;const Hs=[];let cs=null,Cs=0;const yv=Promise.resolve();let Rt=null;function Cv(a){const s=Rt||yv;return a?s.then(this?a.bind(this):a):s}function Se(a){let s=Qa+1,d=La.length;for(;s<d;){const v=s+d>>>1;rd(La[v])<a?s=v+1:d=v}return s}function Ht(a){(!La.length||!La.includes(a,bd&&a.allowRecurse?Qa+1:Qa))&&(a.id==null?La.push(a):La.splice(Se(a.id),0,a),xv())}function xv(){!bd&&!ot&&(ot=!0,Rt=yv.then(jv))}function ye(a){const s=La.indexOf(a);s>Qa&&La.splice(s,1)}function Ce(a){R(a)?Hs.push(...a):(!cs||!cs.includes(a,a.allowRecurse?Cs+1:Cs))&&Hs.push(a),xv()}function bc(a,s=bd?Qa+1:0){for(;s<La.length;s++){const d=La[s];d&&d.pre&&(La.splice(s,1),s--,d())}}function Lv(a){if(Hs.length){const s=[...new Set(Hs)];if(Hs.length=0,cs){cs.push(...s);return}for(cs=s,cs.sort((d,v)=>rd(d)-rd(v)),Cs=0;Cs<cs.length;Cs++)cs[Cs]();cs=null,Cs=0}}const rd=a=>a.id==null?1/0:a.id,xe=(a,s)=>{const d=rd(a)-rd(s);if(d===0){if(a.pre&&!s.pre)return-1;if(s.pre&&!a.pre)return 1}return d};function jv(a){ot=!1,bd=!0,La.sort(xe);const s=Ja;try{for(Qa=0;Qa<La.length;Qa++){const d=La[Qa];d&&d.active!==!1&&gs(d,null,14)}}finally{Qa=0,La.length=0,Lv(),bd=!1,Rt=null,(La.length||Hs.length)&&jv()}}function Le(a,s,...d){if(a.isUnmounted)return;const v=a.vnode.props||ua;let t=d;const e=s.startsWith("update:"),c=e&&s.slice(7);if(c&&c in v){const i=`${c==="modelValue"?"model":c}Modifiers`,{number:o,trim:w}=v[i]||ua;w&&(t=d.map(z=>Sa(z)?z.trim():z)),o&&(t=d.map($n))}let l,p=v[l=Qd(s)]||v[l=Qd(Za(s))];!p&&e&&(p=v[l=Qd(Us(s))]),p&&Fa(p,a,6,t);const r=v[l+"Once"];if(r){if(!a.emitted)a.emitted={};else if(a.emitted[l])return;a.emitted[l]=!0,Fa(r,a,6,t)}}function Vv(a,s,d=!1){const v=s.emitsCache,t=v.get(a);if(t!==void 0)return t;const e=a.emits;let c={},l=!1;if(!D(a)){const p=r=>{const i=Vv(r,s,!0);i&&(l=!0,Ta(c,i))};!d&&s.mixins.length&&s.mixins.forEach(p),a.extends&&p(a.extends),a.mixins&&a.mixins.forEach(p)}return!e&&!l?(ha(a)&&v.set(a,null),null):(R(e)?e.forEach(p=>c[p]=null):Ta(c,e),ha(a)&&v.set(a,c),c)}function Hd(a,s){return!a||!Nd(s)?!1:(s=s.slice(2).replace(/Once$/,""),Q(a,s[0].toLowerCase()+s.slice(1))||Q(a,Us(s))||Q(a,s))}let Ma=null,Bd=null;function jd(a){const s=Ma;return Ma=a,Bd=a&&a.type.__scopeId||null,s}function wa(a){Bd=a}function ma(){Bd=null}function S(a,s=Ma,d){if(!s||a._n)return a;const v=(...t)=>{v._d&&Tc(-1);const e=jd(s);let c;try{c=a(...t)}finally{jd(e),v._d&&Tc(1)}return c};return v._n=!0,v._c=!0,v._d=!0,v}function at(a){const{type:s,vnode:d,proxy:v,withProxy:t,props:e,propsOptions:[c],slots:l,attrs:p,emit:r,render:i,renderCache:o,data:w,setupState:z,ctx:L,inheritAttrs:j}=a;let I,O;const E=jd(a);try{if(d.shapeFlag&4){const N=t||v;I=Ga(i.call(N,N,o,e,z,w,L)),O=p}else{const N=s;I=Ga(N.length>1?N(e,{attrs:p,slots:l,emit:r}):N(e,null)),O=s.props?p:je(p)}}catch(N){vd.length=0,Rd(N,a,1),I=k(Wa)}let X=I;if(O&&j!==!1){const N=Object.keys(O),{shapeFlag:ra}=X;N.length&&ra&7&&(c&&N.some(xt)&&(O=Ve(O,c)),X=Ts(X,O))}return d.dirs&&(X=Ts(X),X.dirs=X.dirs?X.dirs.concat(d.dirs):d.dirs),d.transition&&(X.transition=d.transition),I=X,jd(E),I}const je=a=>{let s;for(const d in a)(d==="class"||d==="style"||Nd(d))&&((s||(s={}))[d]=a[d]);return s},Ve=(a,s)=>{const d={};for(const v in a)(!xt(v)||!(v.slice(9)in s))&&(d[v]=a[v]);return d};function Pe(a,s,d){const{props:v,children:t,component:e}=a,{props:c,children:l,patchFlag:p}=s,r=e.emitsOptions;if(s.dirs||s.transition)return!0;if(d&&p>=0){if(p&1024)return!0;if(p&16)return v?rc(v,c,r):!!c;if(p&8){const i=s.dynamicProps;for(let o=0;o<i.length;o++){const w=i[o];if(c[w]!==v[w]&&!Hd(r,w))return!0}}}else return(t||l)&&(!l||!l.$stable)?!0:v===c?!1:v?c?rc(v,c,r):!0:!!c;return!1}function rc(a,s,d){const v=Object.keys(s);if(v.length!==Object.keys(a).length)return!0;for(let t=0;t<v.length;t++){const e=v[t];if(s[e]!==a[e]&&!Hd(d,e))return!0}return!1}function Oe({vnode:a,parent:s},d){for(;s&&s.subTree===a;)(a=s.vnode).el=d,s=s.parent}const Ne=a=>a.__isSuspense;function $e(a,s){s&&s.pendingBranch?R(a)?s.effects.push(...a):s.effects.push(a):Ce(a)}const zd={};function qd(a,s,d){return Pv(a,s,d)}function Pv(a,s,{immediate:d,deep:v,flush:t,onTrack:e,onTrigger:c}=ua){var l;const p=Wn()===((l=ya)==null?void 0:l.scope)?ya:null;let r,i=!1,o=!1;if(ja(a)?(r=()=>a.value,i=Ld(a)):Rs(a)?(r=()=>a,v=!0):R(a)?(o=!0,i=a.some(N=>Rs(N)||Ld(N)),r=()=>a.map(N=>{if(ja(N))return N.value;if(Rs(N))return js(N);if(D(N))return gs(N,p,2)})):D(a)?s?r=()=>gs(a,p,2):r=()=>{if(!(p&&p.isUnmounted))return w&&w(),Fa(a,p,3,[z])}:r=Ja,s&&v){const N=r;r=()=>js(N())}let w,z=N=>{w=E.onStop=()=>{gs(N,p,4)}},L;if(fd)if(z=Ja,s?d&&Fa(s,p,3,[r(),o?[]:void 0,z]):r(),t==="sync"){const N=Vp();L=N.__watcherHandles||(N.__watcherHandles=[])}else return Ja;let j=o?new Array(a.length).fill(zd):zd;const I=()=>{if(E.active)if(s){const N=E.run();(v||i||(o?N.some((ra,ga)=>pd(ra,j[ga])):pd(N,j)))&&(w&&w(),Fa(s,p,3,[N,j===zd?void 0:o&&j[0]===zd?[]:j,z]),j=N)}else E.run()};I.allowRecurse=!!s;let O;t==="sync"?O=I:t==="post"?O=()=>Na(I,p&&p.suspense):(I.pre=!0,p&&(I.id=p.uid),O=()=>Ht(I));const E=new Nt(r,O);s?d?I():j=E.run():t==="post"?Na(E.run.bind(E),p&&p.suspense):E.run();const X=()=>{E.stop(),p&&p.scope&&Lt(p.scope.effects,E)};return L&&L.push(X),X}function Ee(a,s,d){const v=this.proxy,t=Sa(a)?a.includes(".")?Ov(v,a):()=>v[a]:a.bind(v,v);let e;D(s)?e=s:(e=s.handler,d=s);const c=ya;Ds(this);const l=Pv(t,e.bind(v),d);return c?Ds(c):Os(),l}function Ov(a,s){const d=s.split(".");return()=>{let v=a;for(let t=0;t<d.length&&v;t++)v=v[d[t]];return v}}function js(a,s){if(!ha(a)||a.__v_skip||(s=s||new Set,s.has(a)))return a;if(s.add(a),ja(a))js(a.value,s);else if(R(a))for(let d=0;d<a.length;d++)js(a[d],s);else if(dv(a)||Is(a))a.forEach(d=>{js(d,s)});else if(vv(a))for(const d in a)js(a[d],s);return a}function W(a,s){const d=Ma;if(d===null)return a;const v=Kd(d)||d.proxy,t=a.dirs||(a.dirs=[]);for(let e=0;e<s.length;e++){let[c,l,p,r=ua]=s[e];c&&(D(c)&&(c={mounted:c,updated:c}),c.deep&&js(l),t.push({dir:c,instance:v,value:l,oldValue:void 0,arg:p,modifiers:r}))}return a}function qs(a,s,d,v){const t=a.dirs,e=s&&s.dirs;for(let c=0;c<t.length;c++){const l=t[c];e&&(l.oldValue=e[c].value);let p=l.dir[v];p&&(Ks(),Fa(p,d,8,[a.el,l,a,s]),Xs())}}function Me(){const a={isMounted:!1,isLeaving:!1,isUnmounting:!1,leavingVNodes:new Map};return Fv(()=>{a.isMounted=!0}),Iv(()=>{a.isUnmounting=!0}),a}const Aa=[Function,Array],Nv={mode:String,appear:Boolean,persisted:Boolean,onBeforeEnter:Aa,onEnter:Aa,onAfterEnter:Aa,onEnterCancelled:Aa,onBeforeLeave:Aa,onLeave:Aa,onAfterLeave:Aa,onLeaveCancelled:Aa,onBeforeAppear:Aa,onAppear:Aa,onAfterAppear:Aa,onAppearCancelled:Aa},Ae={name:"BaseTransition",props:Nv,setup(a,{slots:s}){const d=qp(),v=Me();let t;return()=>{const e=s.default&&Ev(s.default(),!0);if(!e||!e.length)return;let c=e[0];if(e.length>1){for(const j of e)if(j.type!==Wa){c=j;break}}const l=Z(a),{mode:p}=l;if(v.isLeaving)return st(c);const r=ic(c);if(!r)return st(c);const i=ut(r,l,v,d);wt(r,i);const o=d.subTree,w=o&&ic(o);let z=!1;const{getTransitionKey:L}=r.type;if(L){const j=L();t===void 0?t=j:j!==t&&(t=j,z=!0)}if(w&&w.type!==Wa&&(!xs(r,w)||z)){const j=ut(w,l,v,d);if(wt(w,j),p==="out-in")return v.isLeaving=!0,j.afterLeave=()=>{v.isLeaving=!1,d.update.active!==!1&&d.update()},st(c);p==="in-out"&&r.type!==Wa&&(j.delayLeave=(I,O,E)=>{const X=$v(v,w);X[String(w.key)]=w,I._leaveCb=()=>{O(),I._leaveCb=void 0,delete i.delayedLeave},i.delayedLeave=E})}return c}}},Fe=Ae;function $v(a,s){const{leavingVNodes:d}=a;let v=d.get(s.type);return v||(v=Object.create(null),d.set(s.type,v)),v}function ut(a,s,d,v){const{appear:t,mode:e,persisted:c=!1,onBeforeEnter:l,onEnter:p,onAfterEnter:r,onEnterCancelled:i,onBeforeLeave:o,onLeave:w,onAfterLeave:z,onLeaveCancelled:L,onBeforeAppear:j,onAppear:I,onAfterAppear:O,onAppearCancelled:E}=s,X=String(a.key),N=$v(d,a),ra=(J,oa)=>{J&&Fa(J,v,9,oa)},ga=(J,oa)=>{const na=oa[1];ra(J,oa),R(J)?J.every(_a=>_a.length<=1)&&na():J.length<=1&&na()},Ca={mode:e,persisted:c,beforeEnter(J){let oa=l;if(!d.isMounted)if(t)oa=j||l;else return;J._leaveCb&&J._leaveCb(!0);const na=N[X];na&&xs(a,na)&&na.el._leaveCb&&na.el._leaveCb(),ra(oa,[J])},enter(J){let oa=p,na=r,_a=i;if(!d.isMounted)if(t)oa=I||p,na=O||r,_a=E||i;else return;let $=!1;const ca=J._enterCb=Va=>{$||($=!0,Va?ra(_a,[J]):ra(na,[J]),Ca.delayedLeave&&Ca.delayedLeave(),J._enterCb=void 0)};oa?ga(oa,[J,ca]):ca()},leave(J,oa){const na=String(a.key);if(J._enterCb&&J._enterCb(!0),d.isUnmounting)return oa();ra(o,[J]);let _a=!1;const $=J._leaveCb=ca=>{_a||(_a=!0,oa(),ca?ra(L,[J]):ra(z,[J]),J._leaveCb=void 0,N[na]===a&&delete N[na])};N[na]=a,w?ga(w,[J,$]):$()},clone(J){return ut(J,s,d,v)}};return Ca}function st(a){if(Dd(a))return a=Ts(a),a.children=null,a}function ic(a){return Dd(a)?a.children?a.children[0]:void 0:a}function wt(a,s){a.shapeFlag&6&&a.component?wt(a.component.subTree,s):a.shapeFlag&128?(a.ssContent.transition=s.clone(a.ssContent),a.ssFallback.transition=s.clone(a.ssFallback)):a.transition=s}function Ev(a,s=!1,d){let v=[],t=0;for(let e=0;e<a.length;e++){let c=a[e];const l=d==null?c.key:String(d)+String(c.key!=null?c.key:e);c.type===G?(c.patchFlag&128&&t++,v=v.concat(Ev(c.children,s,l))):(s||c.type!==Wa)&&v.push(l!=null?Ts(c,{key:l}):c)}if(t>1)for(let e=0;e<v.length;e++)v[e].patchFlag=-2;return v}function Mv(a,s){return D(a)?(()=>Ta({name:a.name},s,{setup:a}))():a}const _d=a=>!!a.type.__asyncLoader,Dd=a=>a.type.__isKeepAlive;function Ie(a,s){Av(a,"a",s)}function Re(a,s){Av(a,"da",s)}function Av(a,s,d=ya){const v=a.__wdc||(a.__wdc=()=>{let t=d;for(;t;){if(t.isDeactivated)return;t=t.parent}return a()});if(Jd(s,v,d),d){let t=d.parent;for(;t&&t.parent;)Dd(t.parent.vnode)&&He(v,s,d,t),t=t.parent}}function He(a,s,d,v){const t=Jd(s,a,v,!0);Rv(()=>{Lt(v[s],t)},d)}function Jd(a,s,d=ya,v=!1){if(d){const t=d[a]||(d[a]=[]),e=s.__weh||(s.__weh=(...c)=>{if(d.isUnmounted)return;Ks(),Ds(d);const l=Fa(s,d,a,c);return Os(),Xs(),l});return v?t.unshift(e):t.push(e),e}}const es=a=>(s,d=ya)=>(!fd||a==="sp")&&Jd(a,(...v)=>s(...v),d),Be=es("bm"),Fv=es("m"),De=es("bu"),Je=es("u"),Iv=es("bum"),Rv=es("um"),We=es("sp"),Ue=es("rtg"),Ke=es("rtc");function Xe(a,s=ya){Jd("ec",a,s)}const Hv="components";function qa(a,s){return Ge(Hv,a,!0,s)||a}const Ye=Symbol.for("v-ndc");function Ge(a,s,d=!0,v=!1){const t=Ma||ya;if(t){const e=t.type;if(a===Hv){const l=xp(e,!1);if(l&&(l===s||l===Za(s)||l===Md(Za(s))))return e}const c=fc(t[a]||e[a],s)||fc(t.appContext[a],s);return!c&&v?e:c}}function fc(a,s){return a&&(a[s]||a[Za(s)]||a[Md(Za(s))])}const mt=a=>a?an(a)?Kd(a)||a.proxy:mt(a.parent):null,cd=Ta(Object.create(null),{$:a=>a,$el:a=>a.vnode.el,$data:a=>a.data,$props:a=>a.props,$attrs:a=>a.attrs,$slots:a=>a.slots,$refs:a=>a.refs,$parent:a=>mt(a.parent),$root:a=>mt(a.root),$emit:a=>a.emit,$options:a=>Bt(a),$forceUpdate:a=>a.f||(a.f=()=>Ht(a.update)),$nextTick:a=>a.n||(a.n=Cv.bind(a.proxy)),$watch:a=>Ee.bind(a)}),dt=(a,s)=>a!==ua&&!a.__isScriptSetup&&Q(a,s),Qe={get({_:a},s){const{ctx:d,setupState:v,data:t,props:e,accessCache:c,type:l,appContext:p}=a;let r;if(s[0]!=="$"){const z=c[s];if(z!==void 0)switch(z){case 1:return v[s];case 2:return t[s];case 4:return d[s];case 3:return e[s]}else{if(dt(v,s))return c[s]=1,v[s];if(t!==ua&&Q(t,s))return c[s]=2,t[s];if((r=a.propsOptions[0])&&Q(r,s))return c[s]=3,e[s];if(d!==ua&&Q(d,s))return c[s]=4,d[s];ht&&(c[s]=0)}}const i=cd[s];let o,w;if(i)return s==="$attrs"&&$a(a,"get",s),i(a);if((o=l.__cssModules)&&(o=o[s]))return o;if(d!==ua&&Q(d,s))return c[s]=4,d[s];if(w=p.config.globalProperties,Q(w,s))return w[s]},set({_:a},s,d){const{data:v,setupState:t,ctx:e}=a;return dt(t,s)?(t[s]=d,!0):v!==ua&&Q(v,s)?(v[s]=d,!0):Q(a.props,s)||s[0]==="$"&&s.slice(1)in a?!1:(e[s]=d,!0)},has({_:{data:a,setupState:s,accessCache:d,ctx:v,appContext:t,propsOptions:e}},c){let l;return!!d[c]||a!==ua&&Q(a,c)||dt(s,c)||(l=e[0])&&Q(l,c)||Q(v,c)||Q(cd,c)||Q(t.config.globalProperties,c)},defineProperty(a,s,d){return d.get!=null?a._.accessCache[s]=0:Q(d,"value")&&this.set(a,s,d.value,null),Reflect.defineProperty(a,s,d)}};function oc(a){return R(a)?a.reduce((s,d)=>(s[d]=null,s),{}):a}let ht=!0;function Ze(a){const s=Bt(a),d=a.proxy,v=a.ctx;ht=!1,s.beforeCreate&&uc(s.beforeCreate,a,"bc");const{data:t,computed:e,methods:c,watch:l,provide:p,inject:r,created:i,beforeMount:o,mounted:w,beforeUpdate:z,updated:L,activated:j,deactivated:I,beforeDestroy:O,beforeUnmount:E,destroyed:X,unmounted:N,render:ra,renderTracked:ga,renderTriggered:Ca,errorCaptured:J,serverPrefetch:oa,expose:na,inheritAttrs:_a,components:$,directives:ca,filters:Va}=s;if(r&&ap(r,v,null),c)for(const la in c){const sa=c[la];D(sa)&&(v[la]=sa.bind(d))}if(t){const la=t.call(d,d);ha(la)&&(a.data=Id(la))}if(ht=!0,e)for(const la in e){const sa=e[la],ds=D(sa)?sa.bind(d,d):D(sa.get)?sa.get.bind(d,d):Ja,is=!D(sa)&&D(sa.set)?sa.set.bind(d):Ja,Ka=Ba({get:ds,set:is});Object.defineProperty(v,la,{enumerable:!0,configurable:!0,get:()=>Ka.value,set:Oa=>Ka.value=Oa})}if(l)for(const la in l)Bv(l[la],v,d,la);if(p){const la=D(p)?p.call(d):p;Reflect.ownKeys(la).forEach(sa=>{Sd(sa,la[sa])})}i&&uc(i,a,"c");function ka(la,sa){R(sa)?sa.forEach(ds=>la(ds.bind(d))):sa&&la(sa.bind(d))}if(ka(Be,o),ka(Fv,w),ka(De,z),ka(Je,L),ka(Ie,j),ka(Re,I),ka(Xe,J),ka(Ke,ga),ka(Ue,Ca),ka(Iv,E),ka(Rv,N),ka(We,oa),R(na))if(na.length){const la=a.exposed||(a.exposed={});na.forEach(sa=>{Object.defineProperty(la,sa,{get:()=>d[sa],set:ds=>d[sa]=ds})})}else a.exposed||(a.exposed={});ra&&a.render===Ja&&(a.render=ra),_a!=null&&(a.inheritAttrs=_a),$&&(a.components=$),ca&&(a.directives=ca)}function ap(a,s,d=Ja){R(a)&&(a=kt(a));for(const v in a){const t=a[v];let e;ha(t)?"default"in t?e=vs(t.from||v,t.default,!0):e=vs(t.from||v):e=vs(t),ja(e)?Object.defineProperty(s,v,{enumerable:!0,configurable:!0,get:()=>e.value,set:c=>e.value=c}):s[v]=e}}function uc(a,s,d){Fa(R(a)?a.map(v=>v.bind(s.proxy)):a.bind(s.proxy),s,d)}function Bv(a,s,d,v){const t=v.includes(".")?Ov(d,v):()=>d[v];if(Sa(a)){const e=s[a];D(e)&&qd(t,e)}else if(D(a))qd(t,a.bind(d));else if(ha(a))if(R(a))a.forEach(e=>Bv(e,s,d,v));else{const e=D(a.handler)?a.handler.bind(d):s[a.handler];D(e)&&qd(t,e,a)}}function Bt(a){const s=a.type,{mixins:d,extends:v}=s,{mixins:t,optionsCache:e,config:{optionMergeStrategies:c}}=a.appContext,l=e.get(s);let p;return l?p=l:!t.length&&!d&&!v?p=s:(p={},t.length&&t.forEach(r=>Vd(p,r,c,!0)),Vd(p,s,c)),ha(s)&&e.set(s,p),p}function Vd(a,s,d,v=!1){const{mixins:t,extends:e}=s;e&&Vd(a,e,d,!0),t&&t.forEach(c=>Vd(a,c,d,!0));for(const c in s)if(!(v&&c==="expose")){const l=sp[c]||d&&d[c];a[c]=l?l(a[c],s[c]):s[c]}return a}const sp={data:wc,props:mc,emits:mc,methods:td,computed:td,beforeCreate:Pa,created:Pa,beforeMount:Pa,mounted:Pa,beforeUpdate:Pa,updated:Pa,beforeDestroy:Pa,beforeUnmount:Pa,destroyed:Pa,unmounted:Pa,activated:Pa,deactivated:Pa,errorCaptured:Pa,serverPrefetch:Pa,components:td,directives:td,watch:tp,provide:wc,inject:dp};function wc(a,s){return s?a?function(){return Ta(D(a)?a.call(this,this):a,D(s)?s.call(this,this):s)}:s:a}function dp(a,s){return td(kt(a),kt(s))}function kt(a){if(R(a)){const s={};for(let d=0;d<a.length;d++)s[a[d]]=a[d];return s}return a}function Pa(a,s){return a?[...new Set([].concat(a,s))]:s}function td(a,s){return a?Ta(Object.create(null),a,s):s}function mc(a,s){return a?R(a)&&R(s)?[...new Set([...a,...s])]:Ta(Object.create(null),oc(a),oc(s??{})):s}function tp(a,s){if(!a)return s;if(!s)return a;const d=Ta(Object.create(null),a);for(const v in s)d[v]=Pa(a[v],s[v]);return d}function Dv(){return{app:null,config:{isNativeTag:Ln,performance:!1,globalProperties:{},optionMergeStrategies:{},errorHandler:void 0,warnHandler:void 0,compilerOptions:{}},mixins:[],components:{},directives:{},provides:Object.create(null),optionsCache:new WeakMap,propsCache:new WeakMap,emitsCache:new WeakMap}}let cp=0;function vp(a,s){return function(v,t=null){D(v)||(v=Ta({},v)),t!=null&&!ha(t)&&(t=null);const e=Dv(),c=new Set;let l=!1;const p=e.app={_uid:cp++,_component:v,_props:t,_container:null,_context:e,_instance:null,version:Pp,get config(){return e.config},set config(r){},use(r,...i){return c.has(r)||(r&&D(r.install)?(c.add(r),r.install(p,...i)):D(r)&&(c.add(r),r(p,...i))),p},mixin(r){return e.mixins.includes(r)||e.mixins.push(r),p},component(r,i){return i?(e.components[r]=i,p):e.components[r]},directive(r,i){return i?(e.directives[r]=i,p):e.directives[r]},mount(r,i,o){if(!l){const w=k(v,t);return w.appContext=e,i&&s?s(w,r):a(w,r,o),l=!0,p._container=r,r.__vue_app__=p,Kd(w.component)||w.component.proxy}},unmount(){l&&(a(null,p._container),delete p._container.__vue_app__)},provide(r,i){return e.provides[r]=i,p},runWithContext(r){Pd=p;try{return r()}finally{Pd=null}}};return p}}let Pd=null;function Sd(a,s){if(ya){let d=ya.provides;const v=ya.parent&&ya.parent.provides;v===d&&(d=ya.provides=Object.create(v)),d[a]=s}}function vs(a,s,d=!1){const v=ya||Ma;if(v||Pd){const t=v?v.parent==null?v.vnode.appContext&&v.vnode.appContext.provides:v.parent.provides:Pd._context.provides;if(t&&a in t)return t[a];if(arguments.length>1)return d&&D(s)?s.call(v&&v.proxy):s}}function np(a,s,d,v=!1){const t={},e={};xd(e,Ud,1),a.propsDefaults=Object.create(null),Jv(a,s,t,e);for(const c in a.propsOptions[0])c in t||(t[c]=void 0);d?a.props=v?t:kv(t):a.type.props?a.props=t:a.props=e,a.attrs=e}function ep(a,s,d,v){const{props:t,attrs:e,vnode:{patchFlag:c}}=a,l=Z(t),[p]=a.propsOptions;let r=!1;if((v||c>0)&&!(c&16)){if(c&8){const i=a.vnode.dynamicProps;for(let o=0;o<i.length;o++){let w=i[o];if(Hd(a.emitsOptions,w))continue;const z=s[w];if(p)if(Q(e,w))z!==e[w]&&(e[w]=z,r=!0);else{const L=Za(w);t[L]=gt(p,l,L,z,a,!1)}else z!==e[w]&&(e[w]=z,r=!0)}}}else{Jv(a,s,t,e)&&(r=!0);let i;for(const o in l)(!s||!Q(s,o)&&((i=Us(o))===o||!Q(s,i)))&&(p?d&&(d[o]!==void 0||d[i]!==void 0)&&(t[o]=gt(p,l,o,void 0,a,!0)):delete t[o]);if(e!==l)for(const o in e)(!s||!Q(s,o))&&(delete e[o],r=!0)}r&&ns(a,"set","$attrs")}function Jv(a,s,d,v){const[t,e]=a.propsOptions;let c=!1,l;if(s)for(let p in s){if(Td(p))continue;const r=s[p];let i;t&&Q(t,i=Za(p))?!e||!e.includes(i)?d[i]=r:(l||(l={}))[i]=r:Hd(a.emitsOptions,p)||(!(p in v)||r!==v[p])&&(v[p]=r,c=!0)}if(e){const p=Z(d),r=l||ua;for(let i=0;i<e.length;i++){const o=e[i];d[o]=gt(t,p,o,r[o],a,!Q(r,o))}}return c}function gt(a,s,d,v,t,e){const c=a[d];if(c!=null){const l=Q(c,"default");if(l&&v===void 0){const p=c.default;if(c.type!==Function&&!c.skipFactory&&D(p)){const{propsDefaults:r}=t;d in r?v=r[d]:(Ds(t),v=r[d]=p.call(null,s),Os())}else v=p}c[0]&&(e&&!l?v=!1:c[1]&&(v===""||v===Us(d))&&(v=!0))}return v}function Wv(a,s,d=!1){const v=s.propsCache,t=v.get(a);if(t)return t;const e=a.props,c={},l=[];let p=!1;if(!D(a)){const i=o=>{p=!0;const[w,z]=Wv(o,s,!0);Ta(c,w),z&&l.push(...z)};!d&&s.mixins.length&&s.mixins.forEach(i),a.extends&&i(a.extends),a.mixins&&a.mixins.forEach(i)}if(!e&&!p)return ha(a)&&v.set(a,Fs),Fs;if(R(e))for(let i=0;i<e.length;i++){const o=Za(e[i]);hc(o)&&(c[o]=ua)}else if(e)for(const i in e){const o=Za(i);if(hc(o)){const w=e[i],z=c[o]=R(w)||D(w)?{type:w}:Ta({},w);if(z){const L=zc(Boolean,z.type),j=zc(String,z.type);z[0]=L>-1,z[1]=j<0||L<j,(L>-1||Q(z,"default"))&&l.push(o)}}}const r=[c,l];return ha(a)&&v.set(a,r),r}function hc(a){return a[0]!=="$"}function kc(a){const s=a&&a.toString().match(/^\s*(function|class) (\w+)/);return s?s[2]:a===null?"null":""}function gc(a,s){return kc(a)===kc(s)}function zc(a,s){return R(s)?s.findIndex(d=>gc(d,a)):D(s)&&gc(s,a)?0:-1}const Uv=a=>a[0]==="_"||a==="$stable",Dt=a=>R(a)?a.map(Ga):[Ga(a)],pp=(a,s,d)=>{if(s._n)return s;const v=S((...t)=>Dt(s(...t)),d);return v._c=!1,v},Kv=(a,s,d)=>{const v=a._ctx;for(const t in a){if(Uv(t))continue;const e=a[t];if(D(e))s[t]=pp(t,e,v);else if(e!=null){const c=Dt(e);s[t]=()=>c}}},Xv=(a,s)=>{const d=Dt(s);a.slots.default=()=>d},lp=(a,s)=>{if(a.vnode.shapeFlag&32){const d=s._;d?(a.slots=Z(s),xd(s,"_",d)):Kv(s,a.slots={})}else a.slots={},s&&Xv(a,s);xd(a.slots,Ud,1)},bp=(a,s,d)=>{const{vnode:v,slots:t}=a;let e=!0,c=ua;if(v.shapeFlag&32){const l=s._;l?d&&l===1?e=!1:(Ta(t,s),!d&&l===1&&delete t._):(e=!s.$stable,Kv(s,t)),c=s}else s&&(Xv(a,s),c={default:1});if(e)for(const l in t)!Uv(l)&&!(l in c)&&delete t[l]};function zt(a,s,d,v,t=!1){if(R(a)){a.forEach((w,z)=>zt(w,s&&(R(s)?s[z]:s),d,v,t));return}if(_d(v)&&!t)return;const e=v.shapeFlag&4?Kd(v.component)||v.component.proxy:v.el,c=t?null:e,{i:l,r:p}=a,r=s&&s.r,i=l.refs===ua?l.refs={}:l.refs,o=l.setupState;if(r!=null&&r!==p&&(Sa(r)?(i[r]=null,Q(o,r)&&(o[r]=null)):ja(r)&&(r.value=null)),D(p))gs(p,l,12,[c,i]);else{const w=Sa(p),z=ja(p);if(w||z){const L=()=>{if(a.f){const j=w?Q(o,p)?o[p]:i[p]:p.value;t?R(j)&&Lt(j,e):R(j)?j.includes(e)||j.push(e):w?(i[p]=[e],Q(o,p)&&(o[p]=i[p])):(p.value=[e],a.k&&(i[a.k]=p.value))}else w?(i[p]=c,Q(o,p)&&(o[p]=c)):z&&(p.value=c,a.k&&(i[a.k]=c))};c?(L.id=-1,Na(L,d)):L()}}}const Na=$e;function rp(a){return ip(a)}function ip(a,s){const d=lt();d.__VUE__=!0;const{insert:v,remove:t,patchProp:e,createElement:c,createText:l,createComment:p,setText:r,setElementText:i,parentNode:o,nextSibling:w,setScopeId:z=Ja,insertStaticContent:L}=a,j=(b,f,u,m=null,g=null,T=null,x=!1,_=null,y=!!f.dynamicChildren)=>{if(b===f)return;b&&!xs(b,f)&&(m=h(b),Oa(b,g,T,!0),b=null),f.patchFlag===-2&&(y=!1,f.dynamicChildren=null);const{type:q,ref:A,shapeFlag:P}=f;switch(q){case Wd:I(b,f,u,m);break;case Wa:O(b,f,u,m);break;case yd:b==null&&E(f,u,m,x);break;case G:$(b,f,u,m,g,T,x,_,y);break;default:P&1?ra(b,f,u,m,g,T,x,_,y):P&6?ca(b,f,u,m,g,T,x,_,y):(P&64||P&128)&&q.process(b,f,u,m,g,T,x,_,y,C)}A!=null&&g&&zt(A,b&&b.ref,T,f||b,!f)},I=(b,f,u,m)=>{if(b==null)v(f.el=l(f.children),u,m);else{const g=f.el=b.el;f.children!==b.children&&r(g,f.children)}},O=(b,f,u,m)=>{b==null?v(f.el=p(f.children||""),u,m):f.el=b.el},E=(b,f,u,m)=>{[b.el,b.anchor]=L(b.children,f,u,m,b.el,b.anchor)},X=({el:b,anchor:f},u,m)=>{let g;for(;b&&b!==f;)g=w(b),v(b,u,m),b=g;v(f,u,m)},N=({el:b,anchor:f})=>{let u;for(;b&&b!==f;)u=w(b),t(b),b=u;t(f)},ra=(b,f,u,m,g,T,x,_,y)=>{x=x||f.type==="svg",b==null?ga(f,u,m,g,T,x,_,y):oa(b,f,g,T,x,_,y)},ga=(b,f,u,m,g,T,x,_)=>{let y,q;const{type:A,props:P,shapeFlag:F,transition:H,dirs:Y}=b;if(y=b.el=c(b.type,T,P&&P.is,P),F&8?i(y,b.children):F&16&&J(b.children,y,null,m,g,T&&A!=="foreignObject",x,_),Y&&qs(b,null,m,"created"),Ca(y,b,b.scopeId,x,m),P){for(const ea in P)ea!=="value"&&!Td(ea)&&e(y,ea,null,P[ea],T,b.children,m,g,xa);"value"in P&&e(y,"value",null,P.value),(q=P.onVnodeBeforeMount)&&Ya(q,m,b)}Y&&qs(b,null,m,"beforeMount");const ia=(!g||g&&!g.pendingBranch)&&H&&!H.persisted;ia&&H.beforeEnter(y),v(y,f,u),((q=P&&P.onVnodeMounted)||ia||Y)&&Na(()=>{q&&Ya(q,m,b),ia&&H.enter(y),Y&&qs(b,null,m,"mounted")},g)},Ca=(b,f,u,m,g)=>{if(u&&z(b,u),m)for(let T=0;T<m.length;T++)z(b,m[T]);if(g){let T=g.subTree;if(f===T){const x=g.vnode;Ca(b,x,x.scopeId,x.slotScopeIds,g.parent)}}},J=(b,f,u,m,g,T,x,_,y=0)=>{for(let q=y;q<b.length;q++){const A=b[q]=_?ms(b[q]):Ga(b[q]);j(null,A,f,u,m,g,T,x,_)}},oa=(b,f,u,m,g,T,x)=>{const _=f.el=b.el;let{patchFlag:y,dynamicChildren:q,dirs:A}=f;y|=b.patchFlag&16;const P=b.props||ua,F=f.props||ua;let H;u&&_s(u,!1),(H=F.onVnodeBeforeUpdate)&&Ya(H,u,f,b),A&&qs(f,b,u,"beforeUpdate"),u&&_s(u,!0);const Y=g&&f.type!=="foreignObject";if(q?na(b.dynamicChildren,q,_,u,m,Y,T):x||sa(b,f,_,null,u,m,Y,T,!1),y>0){if(y&16)_a(_,f,P,F,u,m,g);else if(y&2&&P.class!==F.class&&e(_,"class",null,F.class,g),y&4&&e(_,"style",P.style,F.style,g),y&8){const ia=f.dynamicProps;for(let ea=0;ea<ia.length;ea++){const za=ia[ea],Ia=P[za],Es=F[za];(Es!==Ia||za==="value")&&e(_,za,Ia,Es,g,b.children,u,m,xa)}}y&1&&b.children!==f.children&&i(_,f.children)}else!x&&q==null&&_a(_,f,P,F,u,m,g);((H=F.onVnodeUpdated)||A)&&Na(()=>{H&&Ya(H,u,f,b),A&&qs(f,b,u,"updated")},m)},na=(b,f,u,m,g,T,x)=>{for(let _=0;_<f.length;_++){const y=b[_],q=f[_],A=y.el&&(y.type===G||!xs(y,q)||y.shapeFlag&70)?o(y.el):u;j(y,q,A,null,m,g,T,x,!0)}},_a=(b,f,u,m,g,T,x)=>{if(u!==m){if(u!==ua)for(const _ in u)!Td(_)&&!(_ in m)&&e(b,_,u[_],null,x,f.children,g,T,xa);for(const _ in m){if(Td(_))continue;const y=m[_],q=u[_];y!==q&&_!=="value"&&e(b,_,q,y,x,f.children,g,T,xa)}"value"in m&&e(b,"value",u.value,m.value)}},$=(b,f,u,m,g,T,x,_,y)=>{const q=f.el=b?b.el:l(""),A=f.anchor=b?b.anchor:l("");let{patchFlag:P,dynamicChildren:F,slotScopeIds:H}=f;H&&(_=_?_.concat(H):H),b==null?(v(q,u,m),v(A,u,m),J(f.children,u,A,g,T,x,_,y)):P>0&&P&64&&F&&b.dynamicChildren?(na(b.dynamicChildren,F,u,g,T,x,_),(f.key!=null||g&&f===g.subTree)&&Yv(b,f,!0)):sa(b,f,u,A,g,T,x,_,y)},ca=(b,f,u,m,g,T,x,_,y)=>{f.slotScopeIds=_,b==null?f.shapeFlag&512?g.ctx.activate(f,u,m,x,y):Va(f,u,m,g,T,x,y):ss(b,f,y)},Va=(b,f,u,m,g,T,x)=>{const _=b.component=Tp(b,m,g);if(Dd(b)&&(_.ctx.renderer=C),_p(_),_.asyncDep){if(g&&g.registerDep(_,ka),!b.el){const y=_.subTree=k(Wa);O(null,y,f,u)}return}ka(_,b,f,u,g,T,x)},ss=(b,f,u)=>{const m=f.component=b.component;if(Pe(b,f,u))if(m.asyncDep&&!m.asyncResolved){la(m,f,u);return}else m.next=f,ye(m.update),m.update();else f.el=b.el,m.vnode=f},ka=(b,f,u,m,g,T,x)=>{const _=()=>{if(b.isMounted){let{next:A,bu:P,u:F,parent:H,vnode:Y}=b,ia=A,ea;_s(b,!1),A?(A.el=Y.el,la(b,A,x)):A=Y,P&&Zd(P),(ea=A.props&&A.props.onVnodeBeforeUpdate)&&Ya(ea,H,A,Y),_s(b,!0);const za=at(b),Ia=b.subTree;b.subTree=za,j(Ia,za,o(Ia.el),h(Ia),b,g,T),A.el=za.el,ia===null&&Oe(b,za.el),F&&Na(F,g),(ea=A.props&&A.props.onVnodeUpdated)&&Na(()=>Ya(ea,H,A,Y),g)}else{let A;const{el:P,props:F}=f,{bm:H,m:Y,parent:ia}=b,ea=_d(f);if(_s(b,!1),H&&Zd(H),!ea&&(A=F&&F.onVnodeBeforeMount)&&Ya(A,ia,f),_s(b,!0),P&&da){const za=()=>{b.subTree=at(b),da(P,b.subTree,b,g,null)};ea?f.type.__asyncLoader().then(()=>!b.isUnmounted&&za()):za()}else{const za=b.subTree=at(b);j(null,za,u,m,b,g,T),f.el=za.el}if(Y&&Na(Y,g),!ea&&(A=F&&F.onVnodeMounted)){const za=f;Na(()=>Ya(A,ia,za),g)}(f.shapeFlag&256||ia&&_d(ia.vnode)&&ia.vnode.shapeFlag&256)&&b.a&&Na(b.a,g),b.isMounted=!0,f=u=m=null}},y=b.effect=new Nt(_,()=>Ht(q),b.scope),q=b.update=()=>y.run();q.id=b.uid,_s(b,!0),q()},la=(b,f,u)=>{f.component=b;const m=b.vnode.props;b.vnode=f,b.next=null,ep(b,f.props,m,u),bp(b,f.children,u),Ks(),bc(),Xs()},sa=(b,f,u,m,g,T,x,_,y=!1)=>{const q=b&&b.children,A=b?b.shapeFlag:0,P=f.children,{patchFlag:F,shapeFlag:H}=f;if(F>0){if(F&128){is(q,P,u,m,g,T,x,_,y);return}else if(F&256){ds(q,P,u,m,g,T,x,_,y);return}}H&8?(A&16&&xa(q,g,T),P!==q&&i(u,P)):A&16?H&16?is(q,P,u,m,g,T,x,_,y):xa(q,g,T,!0):(A&8&&i(u,""),H&16&&J(P,u,m,g,T,x,_,y))},ds=(b,f,u,m,g,T,x,_,y)=>{b=b||Fs,f=f||Fs;const q=b.length,A=f.length,P=Math.min(q,A);let F;for(F=0;F<P;F++){const H=f[F]=y?ms(f[F]):Ga(f[F]);j(b[F],H,u,null,g,T,x,_,y)}q>A?xa(b,g,T,!0,!1,P):J(f,u,m,g,T,x,_,y,P)},is=(b,f,u,m,g,T,x,_,y)=>{let q=0;const A=f.length;let P=b.length-1,F=A-1;for(;q<=P&&q<=F;){const H=b[q],Y=f[q]=y?ms(f[q]):Ga(f[q]);if(xs(H,Y))j(H,Y,u,null,g,T,x,_,y);else break;q++}for(;q<=P&&q<=F;){const H=b[P],Y=f[F]=y?ms(f[F]):Ga(f[F]);if(xs(H,Y))j(H,Y,u,null,g,T,x,_,y);else break;P--,F--}if(q>P){if(q<=F){const H=F+1,Y=H<A?f[H].el:m;for(;q<=F;)j(null,f[q]=y?ms(f[q]):Ga(f[q]),u,Y,g,T,x,_,y),q++}}else if(q>F)for(;q<=P;)Oa(b[q],g,T,!0),q++;else{const H=q,Y=q,ia=new Map;for(q=Y;q<=F;q++){const Ea=f[q]=y?ms(f[q]):Ga(f[q]);Ea.key!=null&&ia.set(Ea.key,q)}let ea,za=0;const Ia=F-Y+1;let Es=!1,Zt=0;const Qs=new Array(Ia);for(q=0;q<Ia;q++)Qs[q]=0;for(q=H;q<=P;q++){const Ea=b[q];if(za>=Ia){Oa(Ea,g,T,!0);continue}let Xa;if(Ea.key!=null)Xa=ia.get(Ea.key);else for(ea=Y;ea<=F;ea++)if(Qs[ea-Y]===0&&xs(Ea,f[ea])){Xa=ea;break}Xa===void 0?Oa(Ea,g,T,!0):(Qs[Xa-Y]=q+1,Xa>=Zt?Zt=Xa:Es=!0,j(Ea,f[Xa],u,null,g,T,x,_,y),za++)}const ac=Es?fp(Qs):Fs;for(ea=ac.length-1,q=Ia-1;q>=0;q--){const Ea=Y+q,Xa=f[Ea],sc=Ea+1<A?f[Ea+1].el:m;Qs[q]===0?j(null,Xa,u,sc,g,T,x,_,y):Es&&(ea<0||q!==ac[ea]?Ka(Xa,u,sc,2):ea--)}}},Ka=(b,f,u,m,g=null)=>{const{el:T,type:x,transition:_,children:y,shapeFlag:q}=b;if(q&6){Ka(b.component.subTree,f,u,m);return}if(q&128){b.suspense.move(f,u,m);return}if(q&64){x.move(b,f,u,C);return}if(x===G){v(T,f,u);for(let P=0;P<y.length;P++)Ka(y[P],f,u,m);v(b.anchor,f,u);return}if(x===yd){X(b,f,u);return}if(m!==2&&q&1&&_)if(m===0)_.beforeEnter(T),v(T,f,u),Na(()=>_.enter(T),g);else{const{leave:P,delayLeave:F,afterLeave:H}=_,Y=()=>v(T,f,u),ia=()=>{P(T,()=>{Y(),H&&H()})};F?F(T,Y,ia):ia()}else v(T,f,u)},Oa=(b,f,u,m=!1,g=!1)=>{const{type:T,props:x,ref:_,children:y,dynamicChildren:q,shapeFlag:A,patchFlag:P,dirs:F}=b;if(_!=null&&zt(_,null,u,b,!0),A&256){f.ctx.deactivate(b);return}const H=A&1&&F,Y=!_d(b);let ia;if(Y&&(ia=x&&x.onVnodeBeforeUnmount)&&Ya(ia,f,b),A&6)ud(b.component,u,m);else{if(A&128){b.suspense.unmount(u,m);return}H&&qs(b,null,f,"beforeUnmount"),A&64?b.type.remove(b,f,u,g,C,m):q&&(T!==G||P>0&&P&64)?xa(q,f,u,!1,!0):(T===G&&P&384||!g&&A&16)&&xa(y,f,u),m&&Ns(b)}(Y&&(ia=x&&x.onVnodeUnmounted)||H)&&Na(()=>{ia&&Ya(ia,f,b),H&&qs(b,null,f,"unmounted")},u)},Ns=b=>{const{type:f,el:u,anchor:m,transition:g}=b;if(f===G){$s(u,m);return}if(f===yd){N(b);return}const T=()=>{t(u),g&&!g.persisted&&g.afterLeave&&g.afterLeave()};if(b.shapeFlag&1&&g&&!g.persisted){const{leave:x,delayLeave:_}=g,y=()=>x(u,T);_?_(b.el,T,y):y()}else T()},$s=(b,f)=>{let u;for(;b!==f;)u=w(b),t(b),b=u;t(f)},ud=(b,f,u)=>{const{bum:m,scope:g,update:T,subTree:x,um:_}=b;m&&Zd(m),g.stop(),T&&(T.active=!1,Oa(x,b,f,u)),_&&Na(_,f),Na(()=>{b.isUnmounted=!0},f),f&&f.pendingBranch&&!f.isUnmounted&&b.asyncDep&&!b.asyncResolved&&b.suspenseId===f.pendingId&&(f.deps--,f.deps===0&&f.resolve())},xa=(b,f,u,m=!1,g=!1,T=0)=>{for(let x=T;x<b.length;x++)Oa(b[x],f,u,m,g)},h=b=>b.shapeFlag&6?h(b.component.subTree):b.shapeFlag&128?b.suspense.next():w(b.anchor||b.el),V=(b,f,u)=>{b==null?f._vnode&&Oa(f._vnode,null,null,!0):j(f._vnode||null,b,f,null,null,null,u),bc(),Lv(),f._vnode=b},C={p:j,um:Oa,m:Ka,r:Ns,mt:Va,mc:J,pc:sa,pbc:na,n:h,o:a};let M,da;return s&&([M,da]=s(C)),{render:V,hydrate:M,createApp:vp(V,M)}}function _s({effect:a,update:s},d){a.allowRecurse=s.allowRecurse=d}function Yv(a,s,d=!1){const v=a.children,t=s.children;if(R(v)&&R(t))for(let e=0;e<v.length;e++){const c=v[e];let l=t[e];l.shapeFlag&1&&!l.dynamicChildren&&((l.patchFlag<=0||l.patchFlag===32)&&(l=t[e]=ms(t[e]),l.el=c.el),d||Yv(c,l)),l.type===Wd&&(l.el=c.el)}}function fp(a){const s=a.slice(),d=[0];let v,t,e,c,l;const p=a.length;for(v=0;v<p;v++){const r=a[v];if(r!==0){if(t=d[d.length-1],a[t]<r){s[v]=t,d.push(v);continue}for(e=0,c=d.length-1;e<c;)l=e+c>>1,a[d[l]]<r?e=l+1:c=l;r<a[d[e]]&&(e>0&&(s[v]=d[e-1]),d[e]=v)}}for(e=d.length,c=d[e-1];e-- >0;)d[e]=c,c=s[c];return d}const op=a=>a.__isTeleport,G=Symbol.for("v-fgt"),Wd=Symbol.for("v-txt"),Wa=Symbol.for("v-cmt"),yd=Symbol.for("v-stc"),vd=[];let Da=null;function aa(a=!1){vd.push(Da=a?null:[])}function up(){vd.pop(),Da=vd[vd.length-1]||null}let id=1;function Tc(a){id+=a}function Gv(a){return a.dynamicChildren=id>0?Da||Fs:null,up(),id>0&&Da&&Da.push(a),a}function ta(a,s,d,v,t,e){return Gv(n(a,s,d,v,t,e,!0))}function Qv(a,s,d,v,t){return Gv(k(a,s,d,v,t,!0))}function Tt(a){return a?a.__v_isVNode===!0:!1}function xs(a,s){return a.type===s.type&&a.key===s.key}const Ud="__vInternal",Zv=({key:a})=>a??null,Cd=({ref:a,ref_key:s,ref_for:d})=>(typeof a=="number"&&(a=""+a),a!=null?Sa(a)||ja(a)||D(a)?{i:Ma,r:a,k:s,f:!!d}:a:null);function n(a,s=null,d=null,v=0,t=null,e=a===G?0:1,c=!1,l=!1){const p={__v_isVNode:!0,__v_skip:!0,type:a,props:s,key:s&&Zv(s),ref:s&&Cd(s),scopeId:Bd,slotScopeIds:null,children:d,component:null,suspense:null,ssContent:null,ssFallback:null,dirs:null,transition:null,el:null,anchor:null,target:null,targetAnchor:null,staticCount:0,shapeFlag:e,patchFlag:v,dynamicProps:t,dynamicChildren:null,appContext:null,ctx:Ma};return l?(Jt(p,d),e&128&&a.normalize(p)):d&&(p.shapeFlag|=Sa(d)?8:16),id>0&&!c&&Da&&(p.patchFlag>0||e&6)&&p.patchFlag!==32&&Da.push(p),p}const k=wp;function wp(a,s=null,d=null,v=0,t=null,e=!1){if((!a||a===Ye)&&(a=Wa),Tt(a)){const l=Ts(a,s,!0);return d&&Jt(l,d),id>0&&!e&&Da&&(l.shapeFlag&6?Da[Da.indexOf(a)]=l:Da.push(l)),l.patchFlag|=-2,l}if(Lp(a)&&(a=a.__vccOpts),s){s=mp(s);let{class:l,style:p}=s;l&&!Sa(l)&&(s.class=Ad(l)),ha(p)&&(zv(p)&&!R(p)&&(p=Ta({},p)),s.style=Pt(p))}const c=Sa(a)?1:Ne(a)?128:op(a)?64:ha(a)?4:D(a)?2:0;return n(a,s,d,v,t,c,e,!0)}function mp(a){return a?zv(a)||Ud in a?Ta({},a):a:null}function Ts(a,s,d=!1){const{props:v,ref:t,patchFlag:e,children:c}=a,l=s?kp(v||{},s):v;return{__v_isVNode:!0,__v_skip:!0,type:a.type,props:l,key:l&&Zv(l),ref:s&&s.ref?d&&t?R(t)?t.concat(Cd(s)):[t,Cd(s)]:Cd(s):t,scopeId:a.scopeId,slotScopeIds:a.slotScopeIds,children:c,target:a.target,targetAnchor:a.targetAnchor,staticCount:a.staticCount,shapeFlag:a.shapeFlag,patchFlag:s&&a.type!==G?e===-1?16:e|16:e,dynamicProps:a.dynamicProps,dynamicChildren:a.dynamicChildren,appContext:a.appContext,dirs:a.dirs,transition:a.transition,component:a.component,suspense:a.suspense,ssContent:a.ssContent&&Ts(a.ssContent),ssFallback:a.ssFallback&&Ts(a.ssFallback),el:a.el,anchor:a.anchor,ctx:a.ctx,ce:a.ce}}function fa(a=" ",s=0){return k(Wd,null,a,s)}function K(a,s){const d=k(yd,null,a);return d.staticCount=s,d}function hp(a="",s=!1){return s?(aa(),Qv(Wa,null,a)):k(Wa,null,a)}function Ga(a){return a==null||typeof a=="boolean"?k(Wa):R(a)?k(G,null,a.slice()):typeof a=="object"?ms(a):k(Wd,null,String(a))}function ms(a){return a.el===null&&a.patchFlag!==-1||a.memo?a:Ts(a)}function Jt(a,s){let d=0;const{shapeFlag:v}=a;if(s==null)s=null;else if(R(s))d=16;else if(typeof s=="object")if(v&65){const t=s.default;t&&(t._c&&(t._d=!1),Jt(a,t()),t._c&&(t._d=!0));return}else{d=32;const t=s._;!t&&!(Ud in s)?s._ctx=Ma:t===3&&Ma&&(Ma.slots._===1?s._=1:(s._=2,a.patchFlag|=1024))}else D(s)?(s={default:s,_ctx:Ma},d=32):(s=String(s),v&64?(d=16,s=[fa(s)]):d=8);a.children=s,a.shapeFlag|=d}function kp(...a){const s={};for(let d=0;d<a.length;d++){const v=a[d];for(const t in v)if(t==="class")s.class!==v.class&&(s.class=Ad([s.class,v.class]));else if(t==="style")s.style=Pt([s.style,v.style]);else if(Nd(t)){const e=s[t],c=v[t];c&&e!==c&&!(R(e)&&e.includes(c))&&(s[t]=e?[].concat(e,c):c)}else t!==""&&(s[t]=v[t])}return s}function Ya(a,s,d,v=null){Fa(a,s,7,[d,v])}const gp=Dv();let zp=0;function Tp(a,s,d){const v=a.type,t=(s?s.appContext:a.appContext)||gp,e={uid:zp++,vnode:a,type:v,parent:s,appContext:t,root:null,next:null,subTree:null,effect:null,update:null,scope:new pv(!0),render:null,proxy:null,exposed:null,exposeProxy:null,withProxy:null,provides:s?s.provides:Object.create(t.provides),accessCache:null,renderCache:[],components:null,directives:null,propsOptions:Wv(v,t),emitsOptions:Vv(v,t),emit:null,emitted:null,propsDefaults:ua,inheritAttrs:v.inheritAttrs,ctx:ua,data:ua,props:ua,attrs:ua,slots:ua,refs:ua,setupState:ua,setupContext:null,attrsProxy:null,slotsProxy:null,suspense:d,suspenseId:d?d.pendingId:0,asyncDep:null,asyncResolved:!1,isMounted:!1,isUnmounted:!1,isDeactivated:!1,bc:null,c:null,bm:null,m:null,bu:null,u:null,um:null,bum:null,da:null,a:null,rtg:null,rtc:null,ec:null,sp:null};return e.ctx={_:e},e.root=s?s.root:e,e.emit=Le.bind(null,e),a.ce&&a.ce(e),e}let ya=null;const qp=()=>ya||Ma;let Wt,Ms,qc="__VUE_INSTANCE_SETTERS__";(Ms=lt()[qc])||(Ms=lt()[qc]=[]),Ms.push(a=>ya=a),Wt=a=>{Ms.length>1?Ms.forEach(s=>s(a)):Ms[0](a)};const Ds=a=>{Wt(a),a.scope.on()},Os=()=>{ya&&ya.scope.off(),Wt(null)};function an(a){return a.vnode.shapeFlag&4}let fd=!1;function _p(a,s=!1){fd=s;const{props:d,children:v}=a.vnode,t=an(a);np(a,d,t,s),lp(a,v);const e=t?Sp(a,s):void 0;return fd=!1,e}function Sp(a,s){const d=a.type;a.accessCache=Object.create(null),a.proxy=Ft(new Proxy(a.ctx,Qe));const{setup:v}=d;if(v){const t=a.setupContext=v.length>1?Cp(a):null;Ds(a),Ks();const e=gs(v,a,0,[a.props,t]);if(Xs(),Os(),tv(e)){if(e.then(Os,Os),s)return e.then(c=>{_c(a,c,s)}).catch(c=>{Rd(c,a,0)});a.asyncDep=e}else _c(a,e,s)}else sn(a,s)}function _c(a,s,d){D(s)?a.type.__ssrInlineRender?a.ssrRender=s:a.render=s:ha(s)&&(a.setupState=Sv(s)),sn(a,d)}let Sc;function sn(a,s,d){const v=a.type;if(!a.render){if(!s&&Sc&&!v.render){const t=v.template||Bt(a).template;if(t){const{isCustomElement:e,compilerOptions:c}=a.appContext.config,{delimiters:l,compilerOptions:p}=v,r=Ta(Ta({isCustomElement:e,delimiters:l},c),p);v.render=Sc(t,r)}}a.render=v.render||Ja}Ds(a),Ks(),Ze(a),Xs(),Os()}function yp(a){return a.attrsProxy||(a.attrsProxy=new Proxy(a.attrs,{get(s,d){return $a(a,"get","$attrs"),s[d]}}))}function Cp(a){const s=d=>{a.exposed=d||{}};return{get attrs(){return yp(a)},slots:a.slots,emit:a.emit,expose:s}}function Kd(a){if(a.exposed)return a.exposeProxy||(a.exposeProxy=new Proxy(Sv(Ft(a.exposed)),{get(s,d){if(d in s)return s[d];if(d in cd)return cd[d](a)},has(s,d){return d in s||d in cd}}))}function xp(a,s=!0){return D(a)?a.displayName||a.name:a.name||s&&a.__name}function Lp(a){return D(a)&&"__vccOpts"in a}const Ba=(a,s)=>qe(a,s,fd);function Ut(a,s,d){const v=arguments.length;return v===2?ha(s)&&!R(s)?Tt(s)?k(a,null,[s]):k(a,s):k(a,null,s):(v>3?d=Array.prototype.slice.call(arguments,2):v===3&&Tt(d)&&(d=[d]),k(a,s,d))}const jp=Symbol.for("v-scx"),Vp=()=>vs(jp),Pp="3.3.4",Op="http://www.w3.org/2000/svg",Ls=typeof document<"u"?document:null,yc=Ls&&Ls.createElement("template"),Np={insert:(a,s,d)=>{s.insertBefore(a,d||null)},remove:a=>{const s=a.parentNode;s&&s.removeChild(a)},createElement:(a,s,d,v)=>{const t=s?Ls.createElementNS(Op,a):Ls.createElement(a,d?{is:d}:void 0);return a==="select"&&v&&v.multiple!=null&&t.setAttribute("multiple",v.multiple),t},createText:a=>Ls.createTextNode(a),createComment:a=>Ls.createComment(a),setText:(a,s)=>{a.nodeValue=s},setElementText:(a,s)=>{a.textContent=s},parentNode:a=>a.parentNode,nextSibling:a=>a.nextSibling,querySelector:a=>Ls.querySelector(a),setScopeId(a,s){a.setAttribute(s,"")},insertStaticContent(a,s,d,v,t,e){const c=d?d.previousSibling:s.lastChild;if(t&&(t===e||t.nextSibling))for(;s.insertBefore(t.cloneNode(!0),d),!(t===e||!(t=t.nextSibling)););else{yc.innerHTML=v?`<svg>${a}</svg>`:a;const l=yc.content;if(v){const p=l.firstChild;for(;p.firstChild;)l.appendChild(p.firstChild);l.removeChild(p)}s.insertBefore(l,d)}return[c?c.nextSibling:s.firstChild,d?d.previousSibling:s.lastChild]}};function $p(a,s,d){const v=a._vtc;v&&(s=(s?[s,...v]:[...v]).join(" ")),s==null?a.removeAttribute("class"):d?a.setAttribute("class",s):a.className=s}function Ep(a,s,d){const v=a.style,t=Sa(d);if(d&&!t){if(s&&!Sa(s))for(const e in s)d[e]==null&&qt(v,e,"");for(const e in d)qt(v,e,d[e])}else{const e=v.display;t?s!==d&&(v.cssText=d):s&&a.removeAttribute("style"),"_vod"in a&&(v.display=e)}}const Cc=/\s*!important$/;function qt(a,s,d){if(R(d))d.forEach(v=>qt(a,s,v));else if(d==null&&(d=""),s.startsWith("--"))a.setProperty(s,d);else{const v=Mp(a,s);Cc.test(d)?a.setProperty(Us(v),d.replace(Cc,""),"important"):a[v]=d}}const xc=["Webkit","Moz","ms"],tt={};function Mp(a,s){const d=tt[s];if(d)return d;let v=Za(s);if(v!=="filter"&&v in a)return tt[s]=v;v=Md(v);for(let t=0;t<xc.length;t++){const e=xc[t]+v;if(e in a)return tt[s]=e}return s}const Lc="http://www.w3.org/1999/xlink";function Ap(a,s,d,v,t){if(v&&s.startsWith("xlink:"))d==null?a.removeAttributeNS(Lc,s.slice(6,s.length)):a.setAttributeNS(Lc,s,d);else{const e=Hn(s);d==null||e&&!nv(d)?a.removeAttribute(s):a.setAttribute(s,e?"":d)}}function Fp(a,s,d,v,t,e,c){if(s==="innerHTML"||s==="textContent"){v&&c(v,t,e),a[s]=d??"";return}const l=a.tagName;if(s==="value"&&l!=="PROGRESS"&&!l.includes("-")){a._value=d;const r=l==="OPTION"?a.getAttribute("value"):a.value,i=d??"";r!==i&&(a.value=i),d==null&&a.removeAttribute(s);return}let p=!1;if(d===""||d==null){const r=typeof a[s];r==="boolean"?d=nv(d):d==null&&r==="string"?(d="",p=!0):r==="number"&&(d=0,p=!0)}try{a[s]=d}catch{}p&&a.removeAttribute(s)}function Ip(a,s,d,v){a.addEventListener(s,d,v)}function Rp(a,s,d,v){a.removeEventListener(s,d,v)}function Hp(a,s,d,v,t=null){const e=a._vei||(a._vei={}),c=e[s];if(v&&c)c.value=v;else{const[l,p]=Bp(s);if(v){const r=e[s]=Wp(v,t);Ip(a,l,r,p)}else c&&(Rp(a,l,c,p),e[s]=void 0)}}const jc=/(?:Once|Passive|Capture)$/;function Bp(a){let s;if(jc.test(a)){s={};let v;for(;v=a.match(jc);)a=a.slice(0,a.length-v[0].length),s[v[0].toLowerCase()]=!0}return[a[2]===":"?a.slice(3):Us(a.slice(2)),s]}let ct=0;const Dp=Promise.resolve(),Jp=()=>ct||(Dp.then(()=>ct=0),ct=Date.now());function Wp(a,s){const d=v=>{if(!v._vts)v._vts=Date.now();else if(v._vts<=d.attached)return;Fa(Up(v,d.value),s,5,[v])};return d.value=a,d.attached=Jp(),d}function Up(a,s){if(R(s)){const d=a.stopImmediatePropagation;return a.stopImmediatePropagation=()=>{d.call(a),a._stopped=!0},s.map(v=>t=>!t._stopped&&v&&v(t))}else return s}const Vc=/^on[a-z]/,Kp=(a,s,d,v,t=!1,e,c,l,p)=>{s==="class"?$p(a,v,t):s==="style"?Ep(a,d,v):Nd(s)?xt(s)||Hp(a,s,d,v,c):(s[0]==="."?(s=s.slice(1),!0):s[0]==="^"?(s=s.slice(1),!1):Xp(a,s,v,t))?Fp(a,s,v,e,c,l,p):(s==="true-value"?a._trueValue=v:s==="false-value"&&(a._falseValue=v),Ap(a,s,v,t))};function Xp(a,s,d,v){return v?!!(s==="innerHTML"||s==="textContent"||s in a&&Vc.test(s)&&D(d)):s==="spellcheck"||s==="draggable"||s==="translate"||s==="form"||s==="list"&&a.tagName==="INPUT"||s==="type"&&a.tagName==="TEXTAREA"||Vc.test(s)&&Sa(d)?!1:s in a}const os="transition",Zs="animation",B=(a,{slots:s})=>Ut(Fe,Yp(a),s);B.displayName="Transition";const dn={name:String,type:String,css:{type:Boolean,default:!0},duration:[String,Number,Object],enterFromClass:String,enterActiveClass:String,enterToClass:String,appearFromClass:String,appearActiveClass:String,appearToClass:String,leaveFromClass:String,leaveActiveClass:String,leaveToClass:String};B.props=Ta({},Nv,dn);const Ss=(a,s=[])=>{R(a)?a.forEach(d=>d(...s)):a&&a(...s)},Pc=a=>a?R(a)?a.some(s=>s.length>1):a.length>1:!1;function Yp(a){const s={};for(const $ in a)$ in dn||(s[$]=a[$]);if(a.css===!1)return s;const{name:d="v",type:v,duration:t,enterFromClass:e=`${d}-enter-from`,enterActiveClass:c=`${d}-enter-active`,enterToClass:l=`${d}-enter-to`,appearFromClass:p=e,appearActiveClass:r=c,appearToClass:i=l,leaveFromClass:o=`${d}-leave-from`,leaveActiveClass:w=`${d}-leave-active`,leaveToClass:z=`${d}-leave-to`}=a,L=Gp(t),j=L&&L[0],I=L&&L[1],{onBeforeEnter:O,onEnter:E,onEnterCancelled:X,onLeave:N,onLeaveCancelled:ra,onBeforeAppear:ga=O,onAppear:Ca=E,onAppearCancelled:J=X}=s,oa=($,ca,Va)=>{ys($,ca?i:l),ys($,ca?r:c),Va&&Va()},na=($,ca)=>{$._isLeaving=!1,ys($,o),ys($,z),ys($,w),ca&&ca()},_a=$=>(ca,Va)=>{const ss=$?Ca:E,ka=()=>oa(ca,$,Va);Ss(ss,[ca,ka]),Oc(()=>{ys(ca,$?p:e),us(ca,$?i:l),Pc(ss)||Nc(ca,v,j,ka)})};return Ta(s,{onBeforeEnter($){Ss(O,[$]),us($,e),us($,c)},onBeforeAppear($){Ss(ga,[$]),us($,p),us($,r)},onEnter:_a(!1),onAppear:_a(!0),onLeave($,ca){$._isLeaving=!0;const Va=()=>na($,ca);us($,o),al(),us($,w),Oc(()=>{$._isLeaving&&(ys($,o),us($,z),Pc(N)||Nc($,v,I,Va))}),Ss(N,[$,Va])},onEnterCancelled($){oa($,!1),Ss(X,[$])},onAppearCancelled($){oa($,!0),Ss(J,[$])},onLeaveCancelled($){na($),Ss(ra,[$])}})}function Gp(a){if(a==null)return null;if(ha(a))return[vt(a.enter),vt(a.leave)];{const s=vt(a);return[s,s]}}function vt(a){return En(a)}function us(a,s){s.split(/\s+/).forEach(d=>d&&a.classList.add(d)),(a._vtc||(a._vtc=new Set)).add(s)}function ys(a,s){s.split(/\s+/).forEach(v=>v&&a.classList.remove(v));const{_vtc:d}=a;d&&(d.delete(s),d.size||(a._vtc=void 0))}function Oc(a){requestAnimationFrame(()=>{requestAnimationFrame(a)})}let Qp=0;function Nc(a,s,d,v){const t=a._endId=++Qp,e=()=>{t===a._endId&&v()};if(d)return setTimeout(e,d);const{type:c,timeout:l,propCount:p}=Zp(a,s);if(!c)return v();const r=c+"end";let i=0;const o=()=>{a.removeEventListener(r,w),e()},w=z=>{z.target===a&&++i>=p&&o()};setTimeout(()=>{i<p&&o()},l+1),a.addEventListener(r,w)}function Zp(a,s){const d=window.getComputedStyle(a),v=L=>(d[L]||"").split(", "),t=v(`${os}Delay`),e=v(`${os}Duration`),c=$c(t,e),l=v(`${Zs}Delay`),p=v(`${Zs}Duration`),r=$c(l,p);let i=null,o=0,w=0;s===os?c>0&&(i=os,o=c,w=e.length):s===Zs?r>0&&(i=Zs,o=r,w=p.length):(o=Math.max(c,r),i=o>0?c>r?os:Zs:null,w=i?i===os?e.length:p.length:0);const z=i===os&&/\b(transform|all)(,|$)/.test(v(`${os}Property`).toString());return{type:i,timeout:o,propCount:w,hasTransform:z}}function $c(a,s){for(;a.length<s.length;)a=a.concat(a);return Math.max(...s.map((d,v)=>Ec(d)+Ec(a[v])))}function Ec(a){return Number(a.slice(0,-1).replace(",","."))*1e3}function al(){return document.body.offsetHeight}const U={beforeMount(a,{value:s},{transition:d}){a._vod=a.style.display==="none"?"":a.style.display,d&&s?d.beforeEnter(a):ad(a,s)},mounted(a,{value:s},{transition:d}){d&&s&&d.enter(a)},updated(a,{value:s,oldValue:d},{transition:v}){!s!=!d&&(v?s?(v.beforeEnter(a),ad(a,!0),v.enter(a)):v.leave(a,()=>{ad(a,!1)}):ad(a,s))},beforeUnmount(a,{value:s}){ad(a,s)}};function ad(a,s){a.style.display=s?a._vod:"none"}const sl=Ta({patchProp:Kp},Np);let Mc;function dl(){return Mc||(Mc=rp(sl))}const tl=(...a)=>{const s=dl().createApp(...a),{mount:d}=s;return s.mount=v=>{const t=cl(v);if(!t)return;const e=s._component;!D(e)&&!e.render&&!e.template&&(e.template=t.innerHTML),t.innerHTML="";const c=d(t,!1,t instanceof SVGElement);return t instanceof Element&&(t.removeAttribute("v-cloak"),t.setAttribute("data-v-app","")),c},s};function cl(a){return Sa(a)?document.querySelector(a):a}var vl=!1;/*!
 * pinia v2.1.6
 * (c) 2023 Eduardo San Martin Morote
 * @license MIT
 */const nl=Symbol();var Ac;(function(a){a.direct="direct",a.patchObject="patch object",a.patchFunction="patch function"})(Ac||(Ac={}));function el(){const a=Dn(!0),s=a.run(()=>ba({}));let d=[],v=[];const t=Ft({install(e){t._a=e,e.provide(nl,t),e.config.globalProperties.$pinia=t,v.forEach(c=>d.push(c)),v=[]},use(e){return!this._a&&!vl?v.push(e):d.push(e),this},_p:d,_a:null,_e:a,_s:new Map,state:s});return t}/*!
  * vue-router v4.2.4
  * (c) 2023 Eduardo San Martin Morote
  * @license MIT
  */const As=typeof window<"u";function pl(a){return a.__esModule||a[Symbol.toStringTag]==="Module"}const va=Object.assign;function nt(a,s){const d={};for(const v in s){const t=s[v];d[v]=Ua(t)?t.map(a):a(t)}return d}const nd=()=>{},Ua=Array.isArray,ll=/\/$/,bl=a=>a.replace(ll,"");function et(a,s,d="/"){let v,t={},e="",c="";const l=s.indexOf("#");let p=s.indexOf("?");return l<p&&l>=0&&(p=-1),p>-1&&(v=s.slice(0,p),e=s.slice(p+1,l>-1?l:s.length),t=a(e)),l>-1&&(v=v||s.slice(0,l),c=s.slice(l,s.length)),v=ol(v??s,d),{fullPath:v+(e&&"?")+e+c,path:v,query:t,hash:c}}function rl(a,s){const d=s.query?a(s.query):"";return s.path+(d&&"?")+d+(s.hash||"")}function Fc(a,s){return!s||!a.toLowerCase().startsWith(s.toLowerCase())?a:a.slice(s.length)||"/"}function il(a,s,d){const v=s.matched.length-1,t=d.matched.length-1;return v>-1&&v===t&&Js(s.matched[v],d.matched[t])&&tn(s.params,d.params)&&a(s.query)===a(d.query)&&s.hash===d.hash}function Js(a,s){return(a.aliasOf||a)===(s.aliasOf||s)}function tn(a,s){if(Object.keys(a).length!==Object.keys(s).length)return!1;for(const d in a)if(!fl(a[d],s[d]))return!1;return!0}function fl(a,s){return Ua(a)?Ic(a,s):Ua(s)?Ic(s,a):a===s}function Ic(a,s){return Ua(s)?a.length===s.length&&a.every((d,v)=>d===s[v]):a.length===1&&a[0]===s}function ol(a,s){if(a.startsWith("/"))return a;if(!a)return s;const d=s.split("/"),v=a.split("/"),t=v[v.length-1];(t===".."||t===".")&&v.push("");let e=d.length-1,c,l;for(c=0;c<v.length;c++)if(l=v[c],l!==".")if(l==="..")e>1&&e--;else break;return d.slice(0,e).join("/")+"/"+v.slice(c-(c===v.length?1:0)).join("/")}var od;(function(a){a.pop="pop",a.push="push"})(od||(od={}));var ed;(function(a){a.back="back",a.forward="forward",a.unknown=""})(ed||(ed={}));function ul(a){if(!a)if(As){const s=document.querySelector("base");a=s&&s.getAttribute("href")||"/",a=a.replace(/^\w+:\/\/[^\/]+/,"")}else a="/";return a[0]!=="/"&&a[0]!=="#"&&(a="/"+a),bl(a)}const wl=/^[^#]+#/;function ml(a,s){return a.replace(wl,"#")+s}function hl(a,s){const d=document.documentElement.getBoundingClientRect(),v=a.getBoundingClientRect();return{behavior:s.behavior,left:v.left-d.left-(s.left||0),top:v.top-d.top-(s.top||0)}}const Xd=()=>({left:window.pageXOffset,top:window.pageYOffset});function kl(a){let s;if("el"in a){const d=a.el,v=typeof d=="string"&&d.startsWith("#"),t=typeof d=="string"?v?document.getElementById(d.slice(1)):document.querySelector(d):d;if(!t)return;s=hl(t,a)}else s=a;"scrollBehavior"in document.documentElement.style?window.scrollTo(s):window.scrollTo(s.left!=null?s.left:window.pageXOffset,s.top!=null?s.top:window.pageYOffset)}function Rc(a,s){return(history.state?history.state.position-s:-1)+a}const _t=new Map;function gl(a,s){_t.set(a,s)}function zl(a){const s=_t.get(a);return _t.delete(a),s}let Tl=()=>location.protocol+"//"+location.host;function cn(a,s){const{pathname:d,search:v,hash:t}=s,e=a.indexOf("#");if(e>-1){let l=t.includes(a.slice(e))?a.slice(e).length:1,p=t.slice(l);return p[0]!=="/"&&(p="/"+p),Fc(p,"")}return Fc(d,a)+v+t}function ql(a,s,d,v){let t=[],e=[],c=null;const l=({state:w})=>{const z=cn(a,location),L=d.value,j=s.value;let I=0;if(w){if(d.value=z,s.value=w,c&&c===L){c=null;return}I=j?w.position-j.position:0}else v(z);t.forEach(O=>{O(d.value,L,{delta:I,type:od.pop,direction:I?I>0?ed.forward:ed.back:ed.unknown})})};function p(){c=d.value}function r(w){t.push(w);const z=()=>{const L=t.indexOf(w);L>-1&&t.splice(L,1)};return e.push(z),z}function i(){const{history:w}=window;w.state&&w.replaceState(va({},w.state,{scroll:Xd()}),"")}function o(){for(const w of e)w();e=[],window.removeEventListener("popstate",l),window.removeEventListener("beforeunload",i)}return window.addEventListener("popstate",l),window.addEventListener("beforeunload",i,{passive:!0}),{pauseListeners:p,listen:r,destroy:o}}function Hc(a,s,d,v=!1,t=!1){return{back:a,current:s,forward:d,replaced:v,position:window.history.length,scroll:t?Xd():null}}function _l(a){const{history:s,location:d}=window,v={value:cn(a,d)},t={value:s.state};t.value||e(v.value,{back:null,current:v.value,forward:null,position:s.length-1,replaced:!0,scroll:null},!0);function e(p,r,i){const o=a.indexOf("#"),w=o>-1?(d.host&&document.querySelector("base")?a:a.slice(o))+p:Tl()+a+p;try{s[i?"replaceState":"pushState"](r,"",w),t.value=r}catch(z){console.error(z),d[i?"replace":"assign"](w)}}function c(p,r){const i=va({},s.state,Hc(t.value.back,p,t.value.forward,!0),r,{position:t.value.position});e(p,i,!0),v.value=p}function l(p,r){const i=va({},t.value,s.state,{forward:p,scroll:Xd()});e(i.current,i,!0);const o=va({},Hc(v.value,p,null),{position:i.position+1},r);e(p,o,!1),v.value=p}return{location:v,state:t,push:l,replace:c}}function Sl(a){a=ul(a);const s=_l(a),d=ql(a,s.state,s.location,s.replace);function v(e,c=!0){c||d.pauseListeners(),history.go(e)}const t=va({location:"",base:a,go:v,createHref:ml.bind(null,a)},s,d);return Object.defineProperty(t,"location",{enumerable:!0,get:()=>s.location.value}),Object.defineProperty(t,"state",{enumerable:!0,get:()=>s.state.value}),t}function yl(a){return typeof a=="string"||a&&typeof a=="object"}function vn(a){return typeof a=="string"||typeof a=="symbol"}const ws={path:"/",name:void 0,params:{},query:{},hash:"",fullPath:"/",matched:[],meta:{},redirectedFrom:void 0},nn=Symbol("");var Bc;(function(a){a[a.aborted=4]="aborted",a[a.cancelled=8]="cancelled",a[a.duplicated=16]="duplicated"})(Bc||(Bc={}));function Ws(a,s){return va(new Error,{type:a,[nn]:!0},s)}function ts(a,s){return a instanceof Error&&nn in a&&(s==null||!!(a.type&s))}const Dc="[^/]+?",Cl={sensitive:!1,strict:!1,start:!0,end:!0},xl=/[.+*?^${}()[\]/\\]/g;function Ll(a,s){const d=va({},Cl,s),v=[];let t=d.start?"^":"";const e=[];for(const r of a){const i=r.length?[]:[90];d.strict&&!r.length&&(t+="/");for(let o=0;o<r.length;o++){const w=r[o];let z=40+(d.sensitive?.25:0);if(w.type===0)o||(t+="/"),t+=w.value.replace(xl,"\\$&"),z+=40;else if(w.type===1){const{value:L,repeatable:j,optional:I,regexp:O}=w;e.push({name:L,repeatable:j,optional:I});const E=O||Dc;if(E!==Dc){z+=10;try{new RegExp(`(${E})`)}catch(N){throw new Error(`Invalid custom RegExp for param "${L}" (${E}): `+N.message)}}let X=j?`((?:${E})(?:/(?:${E}))*)`:`(${E})`;o||(X=I&&r.length<2?`(?:/${X})`:"/"+X),I&&(X+="?"),t+=X,z+=20,I&&(z+=-8),j&&(z+=-20),E===".*"&&(z+=-50)}i.push(z)}v.push(i)}if(d.strict&&d.end){const r=v.length-1;v[r][v[r].length-1]+=.7000000000000001}d.strict||(t+="/?"),d.end?t+="$":d.strict&&(t+="(?:/|$)");const c=new RegExp(t,d.sensitive?"":"i");function l(r){const i=r.match(c),o={};if(!i)return null;for(let w=1;w<i.length;w++){const z=i[w]||"",L=e[w-1];o[L.name]=z&&L.repeatable?z.split("/"):z}return o}function p(r){let i="",o=!1;for(const w of a){(!o||!i.endsWith("/"))&&(i+="/"),o=!1;for(const z of w)if(z.type===0)i+=z.value;else if(z.type===1){const{value:L,repeatable:j,optional:I}=z,O=L in r?r[L]:"";if(Ua(O)&&!j)throw new Error(`Provided param "${L}" is an array but it is not repeatable (* or + modifiers)`);const E=Ua(O)?O.join("/"):O;if(!E)if(I)w.length<2&&(i.endsWith("/")?i=i.slice(0,-1):o=!0);else throw new Error(`Missing required param "${L}"`);i+=E}}return i||"/"}return{re:c,score:v,keys:e,parse:l,stringify:p}}function jl(a,s){let d=0;for(;d<a.length&&d<s.length;){const v=s[d]-a[d];if(v)return v;d++}return a.length<s.length?a.length===1&&a[0]===40+40?-1:1:a.length>s.length?s.length===1&&s[0]===40+40?1:-1:0}function Vl(a,s){let d=0;const v=a.score,t=s.score;for(;d<v.length&&d<t.length;){const e=jl(v[d],t[d]);if(e)return e;d++}if(Math.abs(t.length-v.length)===1){if(Jc(v))return 1;if(Jc(t))return-1}return t.length-v.length}function Jc(a){const s=a[a.length-1];return a.length>0&&s[s.length-1]<0}const Pl={type:0,value:""},Ol=/[a-zA-Z0-9_]/;function Nl(a){if(!a)return[[]];if(a==="/")return[[Pl]];if(!a.startsWith("/"))throw new Error(`Invalid path "${a}"`);function s(z){throw new Error(`ERR (${d})/"${r}": ${z}`)}let d=0,v=d;const t=[];let e;function c(){e&&t.push(e),e=[]}let l=0,p,r="",i="";function o(){r&&(d===0?e.push({type:0,value:r}):d===1||d===2||d===3?(e.length>1&&(p==="*"||p==="+")&&s(`A repeatable param (${r}) must be alone in its segment. eg: '/:ids+.`),e.push({type:1,value:r,regexp:i,repeatable:p==="*"||p==="+",optional:p==="*"||p==="?"})):s("Invalid state to consume buffer"),r="")}function w(){r+=p}for(;l<a.length;){if(p=a[l++],p==="\\"&&d!==2){v=d,d=4;continue}switch(d){case 0:p==="/"?(r&&o(),c()):p===":"?(o(),d=1):w();break;case 4:w(),d=v;break;case 1:p==="("?d=2:Ol.test(p)?w():(o(),d=0,p!=="*"&&p!=="?"&&p!=="+"&&l--);break;case 2:p===")"?i[i.length-1]=="\\"?i=i.slice(0,-1)+p:d=3:i+=p;break;case 3:o(),d=0,p!=="*"&&p!=="?"&&p!=="+"&&l--,i="";break;default:s("Unknown state");break}}return d===2&&s(`Unfinished custom RegExp for param "${r}"`),o(),c(),t}function $l(a,s,d){const v=Ll(Nl(a.path),d),t=va(v,{record:a,parent:s,children:[],alias:[]});return s&&!t.record.aliasOf==!s.record.aliasOf&&s.children.push(t),t}function El(a,s){const d=[],v=new Map;s=Kc({strict:!1,end:!0,sensitive:!1},s);function t(i){return v.get(i)}function e(i,o,w){const z=!w,L=Ml(i);L.aliasOf=w&&w.record;const j=Kc(s,i),I=[L];if("alias"in i){const X=typeof i.alias=="string"?[i.alias]:i.alias;for(const N of X)I.push(va({},L,{components:w?w.record.components:L.components,path:N,aliasOf:w?w.record:L}))}let O,E;for(const X of I){const{path:N}=X;if(o&&N[0]!=="/"){const ra=o.record.path,ga=ra[ra.length-1]==="/"?"":"/";X.path=o.record.path+(N&&ga+N)}if(O=$l(X,o,j),w?w.alias.push(O):(E=E||O,E!==O&&E.alias.push(O),z&&i.name&&!Uc(O)&&c(i.name)),L.children){const ra=L.children;for(let ga=0;ga<ra.length;ga++)e(ra[ga],O,w&&w.children[ga])}w=w||O,(O.record.components&&Object.keys(O.record.components).length||O.record.name||O.record.redirect)&&p(O)}return E?()=>{c(E)}:nd}function c(i){if(vn(i)){const o=v.get(i);o&&(v.delete(i),d.splice(d.indexOf(o),1),o.children.forEach(c),o.alias.forEach(c))}else{const o=d.indexOf(i);o>-1&&(d.splice(o,1),i.record.name&&v.delete(i.record.name),i.children.forEach(c),i.alias.forEach(c))}}function l(){return d}function p(i){let o=0;for(;o<d.length&&Vl(i,d[o])>=0&&(i.record.path!==d[o].record.path||!en(i,d[o]));)o++;d.splice(o,0,i),i.record.name&&!Uc(i)&&v.set(i.record.name,i)}function r(i,o){let w,z={},L,j;if("name"in i&&i.name){if(w=v.get(i.name),!w)throw Ws(1,{location:i});j=w.record.name,z=va(Wc(o.params,w.keys.filter(E=>!E.optional).map(E=>E.name)),i.params&&Wc(i.params,w.keys.map(E=>E.name))),L=w.stringify(z)}else if("path"in i)L=i.path,w=d.find(E=>E.re.test(L)),w&&(z=w.parse(L),j=w.record.name);else{if(w=o.name?v.get(o.name):d.find(E=>E.re.test(o.path)),!w)throw Ws(1,{location:i,currentLocation:o});j=w.record.name,z=va({},o.params,i.params),L=w.stringify(z)}const I=[];let O=w;for(;O;)I.unshift(O.record),O=O.parent;return{name:j,path:L,params:z,matched:I,meta:Fl(I)}}return a.forEach(i=>e(i)),{addRoute:e,resolve:r,removeRoute:c,getRoutes:l,getRecordMatcher:t}}function Wc(a,s){const d={};for(const v of s)v in a&&(d[v]=a[v]);return d}function Ml(a){return{path:a.path,redirect:a.redirect,name:a.name,meta:a.meta||{},aliasOf:void 0,beforeEnter:a.beforeEnter,props:Al(a),children:a.children||[],instances:{},leaveGuards:new Set,updateGuards:new Set,enterCallbacks:{},components:"components"in a?a.components||null:a.component&&{default:a.component}}}function Al(a){const s={},d=a.props||!1;if("component"in a)s.default=d;else for(const v in a.components)s[v]=typeof d=="object"?d[v]:d;return s}function Uc(a){for(;a;){if(a.record.aliasOf)return!0;a=a.parent}return!1}function Fl(a){return a.reduce((s,d)=>va(s,d.meta),{})}function Kc(a,s){const d={};for(const v in a)d[v]=v in s?s[v]:a[v];return d}function en(a,s){return s.children.some(d=>d===a||en(a,d))}const pn=/#/g,Il=/&/g,Rl=/\//g,Hl=/=/g,Bl=/\?/g,ln=/\+/g,Dl=/%5B/g,Jl=/%5D/g,bn=/%5E/g,Wl=/%60/g,rn=/%7B/g,Ul=/%7C/g,fn=/%7D/g,Kl=/%20/g;function Kt(a){return encodeURI(""+a).replace(Ul,"|").replace(Dl,"[").replace(Jl,"]")}function Xl(a){return Kt(a).replace(rn,"{").replace(fn,"}").replace(bn,"^")}function St(a){return Kt(a).replace(ln,"%2B").replace(Kl,"+").replace(pn,"%23").replace(Il,"%26").replace(Wl,"`").replace(rn,"{").replace(fn,"}").replace(bn,"^")}function Yl(a){return St(a).replace(Hl,"%3D")}function Gl(a){return Kt(a).replace(pn,"%23").replace(Bl,"%3F")}function Ql(a){return a==null?"":Gl(a).replace(Rl,"%2F")}function Od(a){try{return decodeURIComponent(""+a)}catch{}return""+a}function Zl(a){const s={};if(a===""||a==="?")return s;const v=(a[0]==="?"?a.slice(1):a).split("&");for(let t=0;t<v.length;++t){const e=v[t].replace(ln," "),c=e.indexOf("="),l=Od(c<0?e:e.slice(0,c)),p=c<0?null:Od(e.slice(c+1));if(l in s){let r=s[l];Ua(r)||(r=s[l]=[r]),r.push(p)}else s[l]=p}return s}function Xc(a){let s="";for(let d in a){const v=a[d];if(d=Yl(d),v==null){v!==void 0&&(s+=(s.length?"&":"")+d);continue}(Ua(v)?v.map(e=>e&&St(e)):[v&&St(v)]).forEach(e=>{e!==void 0&&(s+=(s.length?"&":"")+d,e!=null&&(s+="="+e))})}return s}function ab(a){const s={};for(const d in a){const v=a[d];v!==void 0&&(s[d]=Ua(v)?v.map(t=>t==null?null:""+t):v==null?v:""+v)}return s}const sb=Symbol(""),Yc=Symbol(""),Xt=Symbol(""),on=Symbol(""),yt=Symbol("");function sd(){let a=[];function s(v){return a.push(v),()=>{const t=a.indexOf(v);t>-1&&a.splice(t,1)}}function d(){a=[]}return{add:s,list:()=>a.slice(),reset:d}}function hs(a,s,d,v,t){const e=v&&(v.enterCallbacks[t]=v.enterCallbacks[t]||[]);return()=>new Promise((c,l)=>{const p=o=>{o===!1?l(Ws(4,{from:d,to:s})):o instanceof Error?l(o):yl(o)?l(Ws(2,{from:s,to:o})):(e&&v.enterCallbacks[t]===e&&typeof o=="function"&&e.push(o),c())},r=a.call(v&&v.instances[t],s,d,p);let i=Promise.resolve(r);a.length<3&&(i=i.then(p)),i.catch(o=>l(o))})}function pt(a,s,d,v){const t=[];for(const e of a)for(const c in e.components){let l=e.components[c];if(!(s!=="beforeRouteEnter"&&!e.instances[c]))if(db(l)){const r=(l.__vccOpts||l)[s];r&&t.push(hs(r,d,v,e,c))}else{let p=l();t.push(()=>p.then(r=>{if(!r)return Promise.reject(new Error(`Couldn't resolve component "${c}" at "${e.path}"`));const i=pl(r)?r.default:r;e.components[c]=i;const w=(i.__vccOpts||i)[s];return w&&hs(w,d,v,e,c)()}))}}return t}function db(a){return typeof a=="object"||"displayName"in a||"props"in a||"__vccOpts"in a}function Gc(a){const s=vs(Xt),d=vs(on),v=Ba(()=>s.resolve(Ps(a.to))),t=Ba(()=>{const{matched:p}=v.value,{length:r}=p,i=p[r-1],o=d.matched;if(!i||!o.length)return-1;const w=o.findIndex(Js.bind(null,i));if(w>-1)return w;const z=Qc(p[r-2]);return r>1&&Qc(i)===z&&o[o.length-1].path!==z?o.findIndex(Js.bind(null,p[r-2])):w}),e=Ba(()=>t.value>-1&&nb(d.params,v.value.params)),c=Ba(()=>t.value>-1&&t.value===d.matched.length-1&&tn(d.params,v.value.params));function l(p={}){return vb(p)?s[Ps(a.replace)?"replace":"push"](Ps(a.to)).catch(nd):Promise.resolve()}return{route:v,href:Ba(()=>v.value.href),isActive:e,isExactActive:c,navigate:l}}const tb=Mv({name:"RouterLink",compatConfig:{MODE:3},props:{to:{type:[String,Object],required:!0},replace:Boolean,activeClass:String,exactActiveClass:String,custom:Boolean,ariaCurrentValue:{type:String,default:"page"}},useLink:Gc,setup(a,{slots:s}){const d=Id(Gc(a)),{options:v}=vs(Xt),t=Ba(()=>({[Zc(a.activeClass,v.linkActiveClass,"router-link-active")]:d.isActive,[Zc(a.exactActiveClass,v.linkExactActiveClass,"router-link-exact-active")]:d.isExactActive}));return()=>{const e=s.default&&s.default(d);return a.custom?e:Ut("a",{"aria-current":d.isExactActive?a.ariaCurrentValue:null,href:d.href,onClick:d.navigate,class:t.value},e)}}}),cb=tb;function vb(a){if(!(a.metaKey||a.altKey||a.ctrlKey||a.shiftKey)&&!a.defaultPrevented&&!(a.button!==void 0&&a.button!==0)){if(a.currentTarget&&a.currentTarget.getAttribute){const s=a.currentTarget.getAttribute("target");if(/\b_blank\b/i.test(s))return}return a.preventDefault&&a.preventDefault(),!0}}function nb(a,s){for(const d in s){const v=s[d],t=a[d];if(typeof v=="string"){if(v!==t)return!1}else if(!Ua(t)||t.length!==v.length||v.some((e,c)=>e!==t[c]))return!1}return!0}function Qc(a){return a?a.aliasOf?a.aliasOf.path:a.path:""}const Zc=(a,s,d)=>a??s??d,eb=Mv({name:"RouterView",inheritAttrs:!1,props:{name:{type:String,default:"default"},route:Object},compatConfig:{MODE:3},setup(a,{attrs:s,slots:d}){const v=vs(yt),t=Ba(()=>a.route||v.value),e=vs(Yc,0),c=Ba(()=>{let r=Ps(e);const{matched:i}=t.value;let o;for(;(o=i[r])&&!o.components;)r++;return r}),l=Ba(()=>t.value.matched[c.value]);Sd(Yc,Ba(()=>c.value+1)),Sd(sb,l),Sd(yt,t);const p=ba();return qd(()=>[p.value,l.value,a.name],([r,i,o],[w,z,L])=>{i&&(i.instances[o]=r,z&&z!==i&&r&&r===w&&(i.leaveGuards.size||(i.leaveGuards=z.leaveGuards),i.updateGuards.size||(i.updateGuards=z.updateGuards))),r&&i&&(!z||!Js(i,z)||!w)&&(i.enterCallbacks[o]||[]).forEach(j=>j(r))},{flush:"post"}),()=>{const r=t.value,i=a.name,o=l.value,w=o&&o.components[i];if(!w)return av(d.default,{Component:w,route:r});const z=o.props[i],L=z?z===!0?r.params:typeof z=="function"?z(r):z:null,I=Ut(w,va({},L,s,{onVnodeUnmounted:O=>{O.component.isUnmounted&&(o.instances[i]=null)},ref:p}));return av(d.default,{Component:I,route:r})||I}}});function av(a,s){if(!a)return null;const d=a(s);return d.length===1?d[0]:d}const un=eb;function pb(a){const s=El(a.routes,a),d=a.parseQuery||Zl,v=a.stringifyQuery||Xc,t=a.history,e=sd(),c=sd(),l=sd(),p=ke(ws);let r=ws;As&&a.scrollBehavior&&"scrollRestoration"in history&&(history.scrollRestoration="manual");const i=nt.bind(null,h=>""+h),o=nt.bind(null,Ql),w=nt.bind(null,Od);function z(h,V){let C,M;return vn(h)?(C=s.getRecordMatcher(h),M=V):M=h,s.addRoute(M,C)}function L(h){const V=s.getRecordMatcher(h);V&&s.removeRoute(V)}function j(){return s.getRoutes().map(h=>h.record)}function I(h){return!!s.getRecordMatcher(h)}function O(h,V){if(V=va({},V||p.value),typeof h=="string"){const u=et(d,h,V.path),m=s.resolve({path:u.path},V),g=t.createHref(u.fullPath);return va(u,m,{params:w(m.params),hash:Od(u.hash),redirectedFrom:void 0,href:g})}let C;if("path"in h)C=va({},h,{path:et(d,h.path,V.path).path});else{const u=va({},h.params);for(const m in u)u[m]==null&&delete u[m];C=va({},h,{params:o(u)}),V.params=o(V.params)}const M=s.resolve(C,V),da=h.hash||"";M.params=i(w(M.params));const b=rl(v,va({},h,{hash:Xl(da),path:M.path})),f=t.createHref(b);return va({fullPath:b,hash:da,query:v===Xc?ab(h.query):h.query||{}},M,{redirectedFrom:void 0,href:f})}function E(h){return typeof h=="string"?et(d,h,p.value.path):va({},h)}function X(h,V){if(r!==h)return Ws(8,{from:V,to:h})}function N(h){return Ca(h)}function ra(h){return N(va(E(h),{replace:!0}))}function ga(h){const V=h.matched[h.matched.length-1];if(V&&V.redirect){const{redirect:C}=V;let M=typeof C=="function"?C(h):C;return typeof M=="string"&&(M=M.includes("?")||M.includes("#")?M=E(M):{path:M},M.params={}),va({query:h.query,hash:h.hash,params:"path"in M?{}:h.params},M)}}function Ca(h,V){const C=r=O(h),M=p.value,da=h.state,b=h.force,f=h.replace===!0,u=ga(C);if(u)return Ca(va(E(u),{state:typeof u=="object"?va({},da,u.state):da,force:b,replace:f}),V||C);const m=C;m.redirectedFrom=V;let g;return!b&&il(v,M,C)&&(g=Ws(16,{to:m,from:M}),Ka(M,M,!0,!1)),(g?Promise.resolve(g):na(m,M)).catch(T=>ts(T)?ts(T,2)?T:is(T):sa(T,m,M)).then(T=>{if(T){if(ts(T,2))return Ca(va({replace:f},E(T.to),{state:typeof T.to=="object"?va({},da,T.to.state):da,force:b}),V||m)}else T=$(m,M,!0,f,da);return _a(m,M,T),T})}function J(h,V){const C=X(h,V);return C?Promise.reject(C):Promise.resolve()}function oa(h){const V=$s.values().next().value;return V&&typeof V.runWithContext=="function"?V.runWithContext(h):h()}function na(h,V){let C;const[M,da,b]=lb(h,V);C=pt(M.reverse(),"beforeRouteLeave",h,V);for(const u of M)u.leaveGuards.forEach(m=>{C.push(hs(m,h,V))});const f=J.bind(null,h,V);return C.push(f),xa(C).then(()=>{C=[];for(const u of e.list())C.push(hs(u,h,V));return C.push(f),xa(C)}).then(()=>{C=pt(da,"beforeRouteUpdate",h,V);for(const u of da)u.updateGuards.forEach(m=>{C.push(hs(m,h,V))});return C.push(f),xa(C)}).then(()=>{C=[];for(const u of b)if(u.beforeEnter)if(Ua(u.beforeEnter))for(const m of u.beforeEnter)C.push(hs(m,h,V));else C.push(hs(u.beforeEnter,h,V));return C.push(f),xa(C)}).then(()=>(h.matched.forEach(u=>u.enterCallbacks={}),C=pt(b,"beforeRouteEnter",h,V),C.push(f),xa(C))).then(()=>{C=[];for(const u of c.list())C.push(hs(u,h,V));return C.push(f),xa(C)}).catch(u=>ts(u,8)?u:Promise.reject(u))}function _a(h,V,C){l.list().forEach(M=>oa(()=>M(h,V,C)))}function $(h,V,C,M,da){const b=X(h,V);if(b)return b;const f=V===ws,u=As?history.state:{};C&&(M||f?t.replace(h.fullPath,va({scroll:f&&u&&u.scroll},da)):t.push(h.fullPath,da)),p.value=h,Ka(h,V,C,f),is()}let ca;function Va(){ca||(ca=t.listen((h,V,C)=>{if(!ud.listening)return;const M=O(h),da=ga(M);if(da){Ca(va(da,{replace:!0}),M).catch(nd);return}r=M;const b=p.value;As&&gl(Rc(b.fullPath,C.delta),Xd()),na(M,b).catch(f=>ts(f,12)?f:ts(f,2)?(Ca(f.to,M).then(u=>{ts(u,20)&&!C.delta&&C.type===od.pop&&t.go(-1,!1)}).catch(nd),Promise.reject()):(C.delta&&t.go(-C.delta,!1),sa(f,M,b))).then(f=>{f=f||$(M,b,!1),f&&(C.delta&&!ts(f,8)?t.go(-C.delta,!1):C.type===od.pop&&ts(f,20)&&t.go(-1,!1)),_a(M,b,f)}).catch(nd)}))}let ss=sd(),ka=sd(),la;function sa(h,V,C){is(h);const M=ka.list();return M.length?M.forEach(da=>da(h,V,C)):console.error(h),Promise.reject(h)}function ds(){return la&&p.value!==ws?Promise.resolve():new Promise((h,V)=>{ss.add([h,V])})}function is(h){return la||(la=!h,Va(),ss.list().forEach(([V,C])=>h?C(h):V()),ss.reset()),h}function Ka(h,V,C,M){const{scrollBehavior:da}=a;if(!As||!da)return Promise.resolve();const b=!C&&zl(Rc(h.fullPath,0))||(M||!C)&&history.state&&history.state.scroll||null;return Cv().then(()=>da(h,V,b)).then(f=>f&&kl(f)).catch(f=>sa(f,h,V))}const Oa=h=>t.go(h);let Ns;const $s=new Set,ud={currentRoute:p,listening:!0,addRoute:z,removeRoute:L,hasRoute:I,getRoutes:j,resolve:O,options:a,push:N,replace:ra,go:Oa,back:()=>Oa(-1),forward:()=>Oa(1),beforeEach:e.add,beforeResolve:c.add,afterEach:l.add,onError:ka.add,isReady:ds,install(h){const V=this;h.component("RouterLink",cb),h.component("RouterView",un),h.config.globalProperties.$router=V,Object.defineProperty(h.config.globalProperties,"$route",{enumerable:!0,get:()=>Ps(p)}),As&&!Ns&&p.value===ws&&(Ns=!0,N(t.location).catch(da=>{}));const C={};for(const da in ws)Object.defineProperty(C,da,{get:()=>p.value[da],enumerable:!0});h.provide(Xt,V),h.provide(on,kv(C)),h.provide(yt,p);const M=h.unmount;$s.add(h),h.unmount=function(){$s.delete(h),$s.size<1&&(r=ws,ca&&ca(),ca=null,p.value=ws,Ns=!1,la=!1),M()}}};function xa(h){return h.reduce((V,C)=>V.then(()=>oa(C)),Promise.resolve())}return ud}function lb(a,s){const d=[],v=[],t=[],e=Math.max(s.matched.length,a.matched.length);for(let c=0;c<e;c++){const l=s.matched[c];l&&(a.matched.find(r=>Js(r,l))?v.push(l):d.push(l));const p=a.matched[c];p&&(s.matched.find(r=>Js(r,p))||t.push(p))}return[d,v,t]}const bb={__name:"App",setup(a){return(s,d)=>(aa(),Qv(Ps(un)))}},wn="/vue-learn-js/assets/title-f6de348c.svg";const pa=(a,s)=>{const d=a.__vccOpts||a;for(const[v,t]of s)d[v]=t;return d},rb={},ps=a=>(wa("data-v-2b31bcf8"),a=a(),ma(),a),ib={class:""},fb=ps(()=>n("div",{class:"svg imgLayout"},[n("img",{src:wn,alt:""})],-1)),ob=ps(()=>n("input",{type:"checkbox",id:"nav_check",hidden:""},null,-1)),ub=ps(()=>n("div",{class:"liPad"},"關於",-1)),wb=ps(()=>n("div",{class:"liPad"},"Web",-1)),mb=ps(()=>n("div",{class:"liPad"},"Html",-1)),hb=ps(()=>n("div",{class:"liPad"},"CSS",-1)),kb=ps(()=>n("div",{class:"liPad"},"JavaScript",-1)),gb=ps(()=>n("div",{class:"liPad"},"Vue",-1)),zb=ps(()=>n("label",{for:"nav_check",class:"hamburger"},[n("div"),n("div"),n("div")],-1));function Tb(a,s){const d=qa("router-link"),v=qa("RouterLink");return aa(),ta("header",null,[n("div",ib,[k(d,{to:"/"},{default:S(()=>[fb]),_:1})]),ob,n("nav",null,[n("ul",null,[n("li",null,[k(d,{to:"/about"},{default:S(()=>[ub]),_:1})]),n("li",null,[k(d,{to:"/http"},{default:S(()=>[wb]),_:1})]),n("li",null,[k(d,{to:"/html"},{default:S(()=>[mb]),_:1})]),n("li",null,[k(d,{to:"/css"},{default:S(()=>[hb]),_:1})]),n("li",null,[k(v,{to:"/js"},{default:S(()=>[kb]),_:1})]),n("li",null,[k(d,{to:"/vue"},{default:S(()=>[gb]),_:1})])])]),zb])}const qb=pa(rb,[["render",Tb],["__scopeId","data-v-2b31bcf8"]]);const ls=a=>(wa("data-v-67acabe5"),a=a(),ma(),a),_b={class:""},Sb=ls(()=>n("div",{class:"svg imgLayout"},[n("img",{src:wn,alt:""})],-1)),yb=ls(()=>n("input",{type:"checkbox",id:"nav_check",hidden:""},null,-1)),Cb=ls(()=>n("div",{class:"liPad"},"關於",-1)),xb=ls(()=>n("div",{class:"liPad"},"Web",-1)),Lb=ls(()=>n("div",{class:"liPad"},"Html",-1)),jb=ls(()=>n("div",{class:"liPad"},"CSS",-1)),Vb=ls(()=>n("div",{class:"liPad"},"JavaScript",-1)),Pb=ls(()=>n("div",{class:"liPad"},"Vue",-1)),Ob=ls(()=>n("label",{for:"nav_check",class:"hamburger"},[n("div"),n("div"),n("div")],-1)),Nb={__name:"NavBarFixed",setup(a){const s=ba(!0);return window.addEventListener("scroll",function(){s.value=window.scrollY}),(d,v)=>{const t=qa("router-link");return aa(),ta("header",{class:Ad({show:s.value>0})},[n("div",_b,[k(t,{to:"/"},{default:S(()=>[Sb]),_:1})]),yb,n("nav",null,[n("ul",null,[n("li",null,[k(t,{to:"/about"},{default:S(()=>[Cb]),_:1})]),n("li",null,[k(t,{to:"/http"},{default:S(()=>[xb]),_:1})]),n("li",null,[k(t,{to:"/html"},{default:S(()=>[Lb]),_:1})]),n("li",null,[k(t,{to:"/css"},{default:S(()=>[jb]),_:1})]),n("li",null,[k(t,{to:"/js"},{default:S(()=>[Vb]),_:1})]),n("li",null,[k(t,{to:"/vue"},{default:S(()=>[Pb]),_:1})])])]),Ob],2)}}},$b=pa(Nb,[["__scopeId","data-v-67acabe5"]]);const Eb=a=>(wa("data-v-0f9d02e6"),a=a(),ma(),a),Mb={class:"showTimeDiv"},Ab=Eb(()=>n("footer",null," Copyright © 2023 Wayne Lu ",-1)),Fb={__name:"Footer",setup(a){const s=ba("");return setInterval(function(){let v=new Date;s.value=`${v.getMonth()+1} / ${v.getDate()} _ ${v.getHours()} : ${v.getMinutes()}`},2e3),(()=>{let v=new Date;s.value=`${v.getMonth()+1} / ${v.getDate()} _  ${v.getHours()} : ${v.getMinutes()}`})(),(v,t)=>(aa(),ta(G,null,[n("div",Mb,[n("div",null,Bn(s.value),1)]),Ab],64))}},Ib=pa(Fb,[["__scopeId","data-v-0f9d02e6"]]),Rb={__name:"Layout",setup(a){return(s,d)=>{const v=qa("RouterView");return aa(),ta(G,null,[k($b),k(qb),k(v),k(Ib)],64)}}},Hb="/vue-learn-js/assets/wss-1b257452.svg";const Bb={},bs=a=>(wa("data-v-873b931f"),a=a(),ma(),a),Db=bs(()=>n("div",{class:"sectionHolder"},null,-1)),Jb=bs(()=>n("div",{class:"sectionHolder"},null,-1)),Wb={class:"disCen title"},Ub={class:"titleCard"},Kb={class:"titleCardLeft"},Xb=bs(()=>n("h1",null,"Wayne's Blog",-1)),Yb=bs(()=>n("h1",null,"前端學習筆記",-1)),Gb=bs(()=>n("h3",null,"記錄一些關於前端學習的筆記",-1)),Qb=bs(()=>n("br",null,null,-1)),Zb={class:"btnContainer"},ar=bs(()=>n("div",{class:"btnL btn-background-slideL"}," 快速開始 ",-1)),sr=bs(()=>n("div",null,[n("a",{href:"https://github.com/wayne23123"},[n("div",{class:"btnR btn-background-slideR"},"View on GitHub")])],-1)),dr={class:"titleCardRight"},tr=bs(()=>n("div",{class:"cardRightImgLayout svg"},[n("img",{src:Hb,alt:""})],-1)),cr=K('<div class="fourCard" data-v-873b931f><div class="fourCardContainer" data-v-873b931f><div class="cardContainer" data-v-873b931f><div class="card" data-v-873b931f><div class="cardLayout" data-v-873b931f><div class="cardTop disCen" data-v-873b931f><span class="cardTopBGC" data-v-873b931f>💡</span></div><h3 class="corTitle disCen" data-v-873b931f>About Me</h3><p class="corText" data-v-873b931f> Hi, I&#39;m Wayne Lu, <br data-v-873b931f> a passionate frontend developer from Taiwan. </p></div></div></div><div class="cardContainer" data-v-873b931f><div class="card" data-v-873b931f><div class="cardLayout" data-v-873b931f><div class="cardTop disCen" data-v-873b931f><span class="cardTopBGC" data-v-873b931f>💻</span></div><h3 class="corTitle disCen" data-v-873b931f>Languages</h3><p class="corText" data-v-873b931f>JavaScript</p></div></div></div><div class="cardContainer" data-v-873b931f><div class="card" data-v-873b931f><div class="cardLayout" data-v-873b931f><div class="cardTop disCen" data-v-873b931f><span class="cardTopBGC" data-v-873b931f>📚</span></div><h3 class="corTitle disCen" data-v-873b931f>Frontend Skills</h3><p class="corText" data-v-873b931f>Vue</p></div></div></div><div class="cardContainer" data-v-873b931f><div class="card" data-v-873b931f><div class="cardLayout" data-v-873b931f><div class="cardTop disCen" data-v-873b931f><span class="cardTopBGC" data-v-873b931f>🛠️</span></div><h3 class="corTitle disCen" data-v-873b931f>Tools</h3><p class="corText" data-v-873b931f>Vite、Webpack</p></div></div></div></div></div>',1);function vr(a,s){const d=qa("router-link");return aa(),ta("section",null,[Db,Jb,n("div",Wb,[n("div",Ub,[n("div",Kb,[Xb,Yb,Gb,Qb,n("div",Zb,[n("div",null,[k(d,{to:"/js"},{default:S(()=>[ar]),_:1})]),sr])]),n("div",dr,[k(d,{to:"/"},{default:S(()=>[tr]),_:1})])])]),cr])}const sv=pa(Bb,[["render",vr],["__scopeId","data-v-873b931f"]]);const Ys=a=>(wa("data-v-c2d660c8"),a=a(),ma(),a),nr=Ys(()=>n("div",{class:"sectionHolderNav"},null,-1)),er={class:"aboutContainer disCen"},pr={class:"aboutLayout"},lr=K('<br data-v-c2d660c8><h3 class="cor36" data-v-c2d660c8># 關於此筆記</h3><p data-v-c2d660c8>Wayne Lu 的學習筆記。</p><br data-v-c2d660c8><hr data-v-c2d660c8><br data-v-c2d660c8><h3 class="cor36" data-v-c2d660c8># 都記錄些什麼?</h3><p data-v-c2d660c8>此筆記主要記錄一些關於前端學習的筆記。</p><br data-v-c2d660c8><hr data-v-c2d660c8><br data-v-c2d660c8><h3 class="cor36" data-v-c2d660c8># 康乃爾筆記法</h3><p data-v-c2d660c8>兩欄筆記法</p><p class="pFou" data-v-c2d660c8>1. 左邊關鍵字</p><p class="pFou" data-v-c2d660c8>2. 右邊筆記</p><p class="pFou" data-v-c2d660c8>3. 下面總結</p><br data-v-c2d660c8><a href="https://zh.wikipedia.org/zh-tw/%E5%BA%B7%E5%A5%88%E5%B0%94%E7%AC%94%E8%AE%B0%E6%B3%95" data-v-c2d660c8>康乃爾筆記法 @wiki</a><br data-v-c2d660c8><p class="comment" data-v-c2d660c8> 大腦中地標 -&gt; 記憶宮殿 -&gt; 透過小紙條or圖 -&gt; 記憶點(畫表情) </p><br data-v-c2d660c8><hr data-v-c2d660c8><br data-v-c2d660c8><h3 class="cor36" data-v-c2d660c8># 費曼學習法</h3><p data-v-c2d660c8>1. 把它教給一個小孩子</p><p data-v-c2d660c8>2. 回顧教學過程(ex腳本,他不懂腳本要再解釋)</p><p data-v-c2d660c8>3. 將語言條理化,簡化</p><p data-v-c2d660c8>4. 把它教給一個大人</p><br data-v-c2d660c8><a href="https://www.youtube.com/watch?v=gcbCXqjicu0" data-v-c2d660c8>費曼學習法：快速掌握新知識 @youtube 好葉</a><br data-v-c2d660c8><a href="https://www.youtube.com/watch?v=iFSVMuBDMws" data-v-c2d660c8>大腦喜歡這樣學 @youtube 超級歪</a><br data-v-c2d660c8><hr data-v-c2d660c8><br data-v-c2d660c8><h3 class="cor36" data-v-c2d660c8># 工作中如何使用 Git</h3><br data-v-c2d660c8><a href="https://juejin.cn/post/7165654391511318559" data-v-c2d660c8> 工作中如何使用 Git @掘金 沐华 </a><br data-v-c2d660c8><hr data-v-c2d660c8><br data-v-c2d660c8><h3 class="cor36" data-v-c2d660c8># 連續跑步一年變化</h3><a href="https://www.bilibili.com/video/BV1Gk4y1V7oy/?spm_id_from=333.999.0.0" data-v-c2d660c8> 連續跑步一年變化 @bilibili 李白尼的猜想 </a><br data-v-c2d660c8><a href="https://www.youtube.com/watch?v=Po91wXp_hYE&amp;t=763s" data-v-c2d660c8>空腹才是最强的良藥 @youtube Fox面</a><br data-v-c2d660c8><a href="https://www.youtube.com/watch?v=s73WwmWVqBg" data-v-c2d660c8>為什麼要睡覺 @youtube 文森說書 </a><br data-v-c2d660c8><a href="https://www.youtube.com/watch?v=3QHjv-vOlDU&amp;t=440s" data-v-c2d660c8>天才和平庸的差距，是如何區分的 @youtubr 心河擺渡</a><br data-v-c2d660c8><a href="https://www.youtube.com/watch?v=w3PIS7a7IKI" data-v-c2d660c8>智能陷阱，如何操控我們的生活? @youtubr 心河擺渡</a><br data-v-c2d660c8><a href="https://www.youtube.com/watch?v=oeybQjreWhU" data-v-c2d660c8>貧窮的本質 @youtube 艾倫的悅讀空間</a><br data-v-c2d660c8><a href="https://www.youtube.com/watch?v=wcBHHyK9ig8" data-v-c2d660c8>一流的人如何保持巔峰 @youtube 文森說書</a><br data-v-c2d660c8><a href="https://www.youtube.com/watch?v=XS_D1n3fD54" data-v-c2d660c8>總有一天你會懂 @youtube 文森說書</a><br data-v-c2d660c8><a href="https://www.youtube.com/watch?v=qrj2DcdGCPs&amp;t=39s" data-v-c2d660c8>真正的快樂處方 @youtube 文森說書</a><br data-v-c2d660c8>',60),br={key:0},rr=Ys(()=>n("hr",null,null,-1)),ir=Ys(()=>n("br",null,null,-1)),fr=Ys(()=>n("p",null,"Http . . . 超文本傳輸協定",-1)),or=[rr,ir,fr],ur=Ys(()=>n("div",{class:"toTopButton"},[n("div",{class:"disCen"},"___"),n("div",{class:"disCen"},"▲")],-1)),wr=[ur],mr=Ys(()=>n("div",{class:"toBotButton"},[n("div",{class:"disCen"},"▼"),n("div",{class:"disCen"},"￣")],-1)),hr=[mr],kr={__name:"AboutPage",setup(a){const s=ba(!1);window.addEventListener("scroll",function(){s.value=window.scrollY>0});function d(){window.scrollTo({top:0,left:0,behavior:"smooth"})}function v(){window.scrollTo({top:999999,left:0,behavior:"smooth"})}const t=ba(!1);function e(){t.value=!0}return(c,l)=>(aa(),ta(G,null,[nr,n("section",null,[n("div",er,[n("div",null,[n("div",pr,[lr,n("div",{onClick:l[0]||(l[0]=p=>e()),style:{color:"#171717"}},"test"),t.value?(aa(),ta("div",br,or)):hp("",!0)])])])]),n("div",null,[W(k(B,{name:"fade",tag:"div"},{default:S(()=>[n("div",{onClick:d,class:"toTop"},wr)]),_:1},512),[[U,s.value]]),W(k(B,{name:"fade",tag:"div"},{default:S(()=>[n("div",{onClick:v,class:"toBot"},hr)]),_:1},512),[[U,s.value]])])],64))}},gr=pa(kr,[["__scopeId","data-v-c2d660c8"]]),zr="/vue-learn-js/assets/render003-702d2c0e.png",Tr="/vue-learn-js/assets/render004-6e9437a2.png";const Yt=a=>(wa("data-v-e64db40c"),a=a(),ma(),a),qr={class:"leftNav"},_r={class:"leftNavContainer"},Sr={class:"leftNavLayout"},yr={class:"Main"},Cr={class:"mainContainer"},xr={class:"mainLayout"},Lr=K('<div id="web001" class="articleCardTitle cor36" data-v-e64db40c> [ Web筆記 ] ≫ 瀏覽器內核,主要組成部分 </div><p data-v-e64db40c>主要分成 2 部分:</p><p class="cor36" data-v-e64db40c>渲染引擎:</p><br data-v-e64db40c><p class="pTwo" data-v-e64db40c> 負責取得網頁內容 ( HTML . XML . 圖片 )，整理訊息 ( 加入 CSS ) ，計算網頁顯示方式，然後輸出至顯示器。 </p><p class="cor36" data-v-e64db40c>JS 引擎:</p><br data-v-e64db40c><p class="pTwo" data-v-e64db40c> 解析和執行網頁中的 JavaScript 代碼，實現網頁的動態效果和交互功能。 </p><br data-v-e64db40c><p data-v-e64db40c>瀏覽器內核可以理解為排版引擎</p><br data-v-e64db40c><h3 class="cor36" data-v-e64db40c>WebKit</h3><p data-v-e64db40c>代表作品是 Safari、舊版 Chrome</p><br data-v-e64db40c><h3 class="cor36" data-v-e64db40c>Blink</h3><p data-v-e64db40c>代表作品是 Chrome、Opera</p><br data-v-e64db40c><h3 class="cor36" data-v-e64db40c>Trident</h3><p data-v-e64db40c>代表作品是IE</p><br data-v-e64db40c><h3 class="cor36" data-v-e64db40c>Gecko</h3><p data-v-e64db40c>代表作品是Firefox</p><br data-v-e64db40c><br data-v-e64db40c><h3 class="articleCardTitle cor36" data-v-e64db40c># 瀏覽器主要組成部分</h3><p data-v-e64db40c>1.使用者介面： 包括位址列、前進/後退/重新整理/書籤等按鈕</p><p data-v-e64db40c>2.瀏覽器引擎： 在使用者介面與呈現引擎之間傳遞指令</p><p data-v-e64db40c>3.渲染引擎： 用於繪製請求的內容</p><p data-v-e64db40c> 4.網路： 用於完成網路調用，例如 HTTP 請求，具有跨平台的介面，可以在不同平台上運作 </p><p data-v-e64db40c>5.JavaScript 解譯器： 用於解析執行 JavaScript 程式碼</p><p data-v-e64db40c> 6.使用者介面後端： 用於繪製基本的視窗元件，例如組合框和視窗，底層使用作業系統的使用者介面 </p><p data-v-e64db40c> 7.資料儲存： 屬於持久層，瀏覽器在硬碟中儲存各種類似 Cookie 的資料，HTML5 定義了 Web Database 技術，這是一種輕量級完整的客戶端儲存技術。 </p><br data-v-e64db40c><br data-v-e64db40c><h1 id="web002" class="articleCardTitle cor36" data-v-e64db40c> [ Web筆記 ] ≫ 瀏覽器輸入網址後按下 enter 會發生什麼 ? </h1><p data-v-e64db40c>首先進行 DNS 域名解析, 再來與服務器三次握手建立 TCP 連結,</p><p data-v-e64db40c>然後發送 http 請求, 然後服務器處理請求</p><p data-v-e64db40c>服務器返回響應結果, 然後四次揮手關閉 TCP 連結</p><p data-v-e64db40c>然後瀏覽器解析 HTML 文本, 最後瀏覽器布局渲染頁面</p><br data-v-e64db40c><p data-v-e64db40c>1.瀏覽器接受 URL 開啟網路請求線程 (進程 &gt; 線程)</p><p data-v-e64db40c> 2.瀏覽器通過 DNS 服務器得到域名的 IP位置, 向 IP 地址 建立連接(TCP3次握手) 後發送http請求 </p><p data-v-e64db40c>3.服務器返回響應結果, 然後四次揮手關閉TCP連結</p><p data-v-e64db40c>4.瀏覽器渲染進程解析 HTML 文本， 構建 DOM 樹</p><p data-v-e64db40c> 5.解析 HTML 時, 如果遇到 內連樣式 或 CSS 文本, 則下載並構建樣式規則, 如果遇到 JS 腳本, 則下載執行腳本 </p><p data-v-e64db40c>6.DOM 樹和 CSSOM 構建完成之後, 渲染線程將 2 者合併成渲染樹</p><p data-v-e64db40c>7.渲染進程開始對渲染樹進行布局, 生成布局樹 (layout tree)</p><p data-v-e64db40c>8.渲染樹對布局樹進行繪製, 生成繪製紀錄</p><br data-v-e64db40c><br data-v-e64db40c><div class="disCen" data-v-e64db40c><img src="'+zr+'" style="max-width:500px;" alt="" data-v-e64db40c></div><div class="disCen" data-v-e64db40c><img src="'+Tr+'" style="max-width:500px;" alt="" data-v-e64db40c></div><br data-v-e64db40c><br data-v-e64db40c><h3 class="articleCardTitle cor36" data-v-e64db40c># CSS 會阻塞 DOM 嗎?</h3><p data-v-e64db40c>CSS 不會阻塞 DOM 解析，會阻塞 DOM 渲染</p><p data-v-e64db40c>CSS 會阻塞 JS 執行，不會阻塞 JS 文件下載</p><br data-v-e64db40c><p data-v-e64db40c>DOM 樹和 CSSOM 樹都加載完 才渲染 render 樹</p><p data-v-e64db40c>CSS 文件會先加載執行完 再執行 JS 文件</p><br data-v-e64db40c><p class="cor36" data-v-e64db40c># 避免 FOUC 白屏</p><p data-v-e64db40c> CSS 檔案放置在 HTML 文檔的 head 標籤中 ,確保在頁面渲染前加載並應用CSS樣式。 </p><p data-v-e64db40c>避免使用 JavaScript 動態加載 CSS 檔案</p><p data-v-e64db40c> 樣式預加載技術，如 preload 或 prefetch，提前加載 CSS 檔案以減少延遲。 </p><br data-v-e64db40c><br data-v-e64db40c><h3 class="articleCardTitle cor36" data-v-e64db40c># JS 會阻塞頁面嗎?</h3><p data-v-e64db40c>JS 會阻塞 DOM 解析，建議將 JS 文件放在 HTML 最下面</p><p data-v-e64db40c> 瀏覽器在解析 HTML 時，如果遇到 ＜script&gt;，會先下載、解析完這些 JavaScript 檔案，再往下繼續解析 HTML 其他內容。 </p><br data-v-e64db40c><p data-v-e64db40c>defer和async的差別?</p><p data-v-e64db40c>async 下載完就直接執行。</p><p data-v-e64db40c>defer 等到瀏覽器解析完 HTML 後執行。</p><br data-v-e64db40c><br data-v-e64db40c><h3 class="articleCardTitle cor36" data-v-e64db40c># 解析 HTML</h3><p data-v-e64db40c> HTML是逐行解析的，瀏覽器的渲染引擎會將HTML文檔解析並轉換為DOM節點。 </p><p data-v-e64db40c>將標記 （Tokens） 解析成物件</p><p data-v-e64db40c>將物件組合成一個DOM樹</p><br data-v-e64db40c><br data-v-e64db40c><h3 class="articleCardTitle cor36" data-v-e64db40c># 解析 CSS</h3><p data-v-e64db40c>瀏覽器會從右到左解析CSS選擇器</p><p data-v-e64db40c>∕span -&gt; ∕div -&gt; html</p><br data-v-e64db40c><br data-v-e64db40c>',87),jr=Yt(()=>n("span",null,"性能問題,假設從左往右會先找到很多a,可能99%沒用,沒必要找",-1)),Vr=K('<br data-v-e64db40c><br data-v-e64db40c><h3 class="articleCardTitle cor36" data-v-e64db40c># JavaScript 解析的流程</h3><p data-v-e64db40c> 1.瀏覽器創建 Document 物件並開始解析 HTML 文件。解析器將解析到的元素和文本節點添加到文件中，此時 document.readyState 屬性為 &quot;loading&quot;。 </p><br data-v-e64db40c><p data-v-e64db40c> 2.HTML 解析器遇到沒有 async 和 defer 屬性的 script 標籤時，將它們添加到文件中並開始執行內部或外部腳本。這些腳本將同步執行，解析器在腳本下載和執行期間會暫停解析。因此，可以使用 document.write() 方法將文本插入到輸入流中。同步腳本通常用於定義函數和註冊事件處理程序，它們可以遍歷和操作腳本之前的文件內容。 </p><br data-v-e64db40c><p data-v-e64db40c> 3.當解析器遇到設置了 async 屬性的 script 標籤時，它會開始下載該腳本並繼續解析文件。這些腳本將在下載完成後盡快執行，但解析器不會等待它們的下載。異步腳本禁止使用 document.write()，它們可以訪問其所在的 script 標籤以及之前的文件元素。 </p><br data-v-e64db40c><p data-v-e64db40c> 4.所有設置了 defer 屬性的腳本將按照它們在文件中出現的順序執行。延遲腳本能夠訪問完整的文件樹，但禁止使用 document.write()。 </p><br data-v-e64db40c><p data-v-e64db40c> 5.當文件上的所有延遲腳本執行完成時，瀏覽器將在 Document 物件上觸發 DOMContentLoaded 事件。這表示文件的 DOM 結構已完全構建，可以進行操作。 </p><br data-v-e64db40c><p data-v-e64db40c> 6.等待其他內容加載完成並且所有異步腳本執行完成後，document.readyState 屬性變為 &quot;complete&quot;，此時 window 物件觸發 load 事件。這表示整個文件和相關資源已經加載完成。 </p><br data-v-e64db40c><br data-v-e64db40c><h3 class="articleCardTitle cor36" data-v-e64db40c># ip地址怎麼找?</h3><p data-v-e64db40c>ip 地址從 DNS 域名服務器裡 存儲的地址本 找出來的</p><br data-v-e64db40c><p data-v-e64db40c>之前 訪問過該網站的話 從本機 緩存數據裡找</p><br data-v-e64db40c><p data-v-e64db40c>如果找不到 就從路由器設置的 電信服務商提供的 DNS 服務器中找</p><br data-v-e64db40c><p data-v-e64db40c>再找不到 就從網站域名提供的 服務商提供的 DNS 服務器找</p><br data-v-e64db40c><br data-v-e64db40c><br data-v-e64db40c><p class="cor36" data-v-e64db40c> TCP 是一種要求資料正確性的傳輸方式， 這表示它需要一些特殊機制， 來確保傳輸的數據不會出錯。 </p><br data-v-e64db40c><a href="https://zh.wikipedia.org/wiki/%E4%BC%A0%E8%BE%93%E6%8E%A7%E5%88%B6%E5%8D%8F%E8%AE%AE" data-v-e64db40c>傳輸控制協定 @wiki</a><br data-v-e64db40c><h3 class="articleCardTitle cor36" data-v-e64db40c> # 三次握手 -&gt; 與 WEB 服務器建立連接 -&gt; 確認雙方都能接收,發送正常 </h3><br data-v-e64db40c><p data-v-e64db40c>第一次握手： 客戶端發送 SYN 數據包,服務端收到</p><br data-v-e64db40c><p data-v-e64db40c>第二次握手： 服務端回復 SYN 和 ACK 數據包,客戶端收到</p><br data-v-e64db40c><p data-v-e64db40c> 第三次握手： 客戶端 檢查接收數據包正確後 發送 ACK 數據包,服務端收到,連接建立成功 </p><br data-v-e64db40c><br data-v-e64db40c><p data-v-e64db40c> 第一次握手：客戶端向伺服器發送一個帶有 SYN 標誌位為1的數據包，同時隨機生成一個初始序列號（Seq = J）作為起始序列號。客戶端表示希望建立連接。 </p><p data-v-e64db40c> 第二次握手：伺服器收到客戶端的請求後，回復一個帶有 SYN 和 ACK 標誌位為1的數據包，確認連接請求，同時生成自己的序列號（Seq = K），同時將客戶端的序列號加1作為確認號（Ack = J + 1）。伺服器表示接受客戶端的連接請求並發送確認信息。 </p><p data-v-e64db40c> 第三次握手：客戶端收到伺服器的確認信息後，檢查確認號是否正確（Ack = K + 1），如果正確，則發送一個帶有 ACK 標誌位為1的數據包，將伺服器的序列號加1作為確認號（Ack = K + 1），表示客戶端接受伺服器的確認信息。伺服器收到客戶端的確認信息後，連接建立成功。 </p><br data-v-e64db40c><br data-v-e64db40c><br data-v-e64db40c><p data-v-e64db40c>序列號（seq，32位元長）:</p><p class="pFou" data-v-e64db40c> 如果含有同步化旗標（SYN），則此為最初的序列號；第一個資料位元的序列碼為本序列號加一。 </p><p class="pFou" data-v-e64db40c> 如果沒有同步化旗標（SYN），則此為第一個資料位元的序列碼。 </p><br data-v-e64db40c><p data-v-e64db40c>確認號（ack，32位元長）:</p><p class="pFou" data-v-e64db40c> 期望收到的資料的開始序列號。也即已經收到的資料的位元組長度加1。 </p><br data-v-e64db40c><p data-v-e64db40c>標誌符（9位元長）:</p><p class="pFou" data-v-e64db40c> SYN: 為1表示這是連接請求或是連接接受請求，用於建立連接和使順序號同步 </p><p class="pFou" data-v-e64db40c>FIN: 為1表示傳送方沒有資料要傳輸了，要求釋放連接。</p><br data-v-e64db40c><br data-v-e64db40c><p class="cor36" data-v-e64db40c>內容傳輸：</p><p data-v-e64db40c>確認封包機制： 接收端接收到包時, 要回傳確認信息給 發送端</p><p data-v-e64db40c>逾時與重送： 如果接收端 一直無返回確認信息，發送端 會重發一次</p><br data-v-e64db40c><br data-v-e64db40c><p class="articleCardTitle cor36" data-v-e64db40c># 4次揮手</p><p data-v-e64db40c> 客戶端發送一個 FIN Seq = M（FIN置位，序號為M） 封包，用來關閉客戶端到伺服器端的資料傳送。 </p><br data-v-e64db40c><p data-v-e64db40c> 伺服器端收到這個 FIN ，它回送一個 ACK ，確認序號 Ack 為收到的序號 M+1。 </p><br data-v-e64db40c><p data-v-e64db40c>伺服器端關閉與客戶端的連接，發送一個 FIN Seq = N 給客戶端。</p><br data-v-e64db40c><p data-v-e64db40c>客戶端回覆 ACK 報文確認，確認序號 Ack 為收到的序號 N+1。</p><br data-v-e64db40c><br data-v-e64db40c><br data-v-e64db40c><p class="cor36" data-v-e64db40c># 為什麼建立是 3 次，關閉是 4 次</p><p data-v-e64db40c>因為服務端在 LISTEN 狀態下, 收到建立連接請求的 SYN 報文後，</p><br data-v-e64db40c><p data-v-e64db40c>把 ACK 和 SYN 放在一個報文裡發送給客戶端。</p><br data-v-e64db40c><p data-v-e64db40c>而關閉連接時, 收到對方的 FIN 報文時</p><br data-v-e64db40c><p data-v-e64db40c>僅表示對方不再發送數據但還是能發送數據</p><br data-v-e64db40c><p data-v-e64db40c>己方是否現在關閉發送數據通道, 需要上層應用來決定</p><br data-v-e64db40c><p data-v-e64db40c>因此己方 ACK 和 FIN 分開發送</p><br data-v-e64db40c><br data-v-e64db40c><h3 class="articleCardTitle cor36" data-v-e64db40c># 什麼是SYN Flood攻擊?</h3><p data-v-e64db40c>SYNflood 利用 TCP 協議缺陷, 發送大量偽造 TCP 請求</p><br data-v-e64db40c><p data-v-e64db40c>請求連接的第一個握手包 (SYN), 服務器回應第二個握手包 (SYN+ACK)</p><br data-v-e64db40c><p data-v-e64db40c>因為偽造IP 對方不會收到包且不會回應第三個握手包</p><br data-v-e64db40c><p data-v-e64db40c> 導致服務器保持大量 SYN_RECE 為半連結, 且會默認 5 次回應第二個握手包, </p><br data-v-e64db40c><p data-v-e64db40c>大量惡意 SYN 佔滿未完成連接列隊,導致正常業務連不進來</p><br data-v-e64db40c><br data-v-e64db40c><h3 class="articleCardTitle cor36" data-v-e64db40c># SYNflood怎麼檢測?</h3><p data-v-e64db40c>在服務器上看到大量半連接狀態時, 特別是源 ip 位置是隨機的</p><br data-v-e64db40c><br data-v-e64db40c><h3 class="articleCardTitle cor36" data-v-e64db40c># SYNflood攻擊怎麼解決?</h3><p data-v-e64db40c>1.縮短超時 SYN Timeout</p><p data-v-e64db40c>2.增加最大半連接數</p><p data-v-e64db40c> 3.SYN cookie 技術(收到 SYN 報文不直接 TCP 分配資源,先打開半套的套接字) </p><br data-v-e64db40c><br data-v-e64db40c><h3 id="web003" class="articleCardTitle cor36" data-v-e64db40c> [ Web筆記 ] ≫ http協議? </h3><div data-v-e64db40c><span data-v-e64db40c><a href="https://www.runoob.com/http/http-tutorial.html" data-v-e64db40c>http協議 @菜鳥教程 </a></span></div><br data-v-e64db40c><p data-v-e64db40c>超文本傳輸協定 . . . (Hypertext Transfer Protocol)</p><br data-v-e64db40c><p data-v-e64db40c>他是基於 TCP 默認 80 端口的一個 應用層協議</p><br data-v-e64db40c><p data-v-e64db40c>用於 從全球資訊網 傳輸資源 到本地瀏覽器 的傳輸協議</p><br data-v-e64db40c><p data-v-e64db40c>主要是用來規定 客戶端 和服務器端 的數據傳輸格式</p><br data-v-e64db40c><p data-v-e64db40c>所以 HTTP 是一個標準和規範</p><br data-v-e64db40c><p data-v-e64db40c>每一個 HTTP 連接包括 請求消息 和響應消息 2 部分</p><br data-v-e64db40c><p data-v-e64db40c>請求報文包括 , 請求行, 請求頭, 空行, 請求體</p><br data-v-e64db40c><p data-v-e64db40c>響應報文包括 , 響應行, 響應頭, 空行, 請求體,</p><br data-v-e64db40c><br data-v-e64db40c><h3 class="articleCardTitle cor36" data-v-e64db40c> # http協議包括請求和響應,你能說一個請求完整內容嗎? </h3><p data-v-e64db40c>第一部分:第一行第一個字是get, 然後是url, http協議版本</p><p data-v-e64db40c>第二部分:content-type:</p><p data-v-e64db40c>第三部分:enter2</p><p data-v-e64db40c>第四部份:body a=1&amp;a=2</p><br data-v-e64db40c><br data-v-e64db40c><h3 class="articleCardTitle cor36" data-v-e64db40c># content-type內容怎麼寫?</h3><p data-v-e64db40c>JSON的話是application斜槓json</p><br data-v-e64db40c><br data-v-e64db40c><h3 class="articleCardTitle cor36" data-v-e64db40c># http和https差別?(443端口)</h3><p data-v-e64db40c>http協議傳輸的數據都是未加密的, 因此用http傳輸隱私的訊息不安全</p><br data-v-e64db40c><p data-v-e64db40c>為了保證這些隱私數據能加密傳輸, 就誕生HTTPS 所以比http協議安全</p><br data-v-e64db40c><p data-v-e64db40c> https由tls加http協議構建的, 可以進行加密傳輸, 身分認證的網路協議 </p><br data-v-e64db40c><p data-v-e64db40c>所以比http協議安全</p><br data-v-e64db40c><p data-v-e64db40c>https有兩個作用</p><br data-v-e64db40c><p data-v-e64db40c>1.可以建立一個訊息安全通道, 用來保證數據傳輸的安全性</p><br data-v-e64db40c><p data-v-e64db40c>2.確認網站的真實性</p><br data-v-e64db40c><p data-v-e64db40c>http和https差別</p><br data-v-e64db40c><p data-v-e64db40c>1.http不用證書,https需要申請ca證書</p><br data-v-e64db40c><p data-v-e64db40c> 2.http下的訊息明文傳輸, 而https由tls加http協議構建的可進行加密傳輸身分認證的網路協議, 可以防止傳輸內容被竊取竄改 </p><br data-v-e64db40c><p data-v-e64db40c> 3.http和https使用不同的連接方式, 所以端口不一樣http(80), https(443) </p><br data-v-e64db40c><br data-v-e64db40c><h1 class="articleCardTitle cor36" data-v-e64db40c># SSL怎麼做?</h1><p data-v-e64db40c>客戶端發送請求連接的請求給伺服器，請求中包含一個 SSL</p><br data-v-e64db40c><p data-v-e64db40c> 版本號以及所支持的加密算法。伺服器收到客戶端的請求後，將自己的 SSL 證書發送給客戶端。 </p><br data-v-e64db40c><p data-v-e64db40c>證書中包含伺服器的公鑰、伺服器的名稱以及證書的頒發機構等信息。</p><br data-v-e64db40c><p data-v-e64db40c> 客戶端收到伺服器的 SSL 證書後，會對證書進行驗證，包括證書的頒發機構是否可信、證書中的伺服器名稱是否和請求的伺服器名稱匹配等。 </p><br data-v-e64db40c><p data-v-e64db40c> 客戶端驗證通過後，生成一個隨機數，使用伺服器的公鑰進行加密，並將加密後的隨機數發送給伺服器。 </p><br data-v-e64db40c><p data-v-e64db40c> 伺服器收到客戶端發送的加密隨機數後，使用自己的私鑰進行解密，得到客戶端的隨機數。 </p><br data-v-e64db40c><p data-v-e64db40c> 伺服器和客戶端分別使用這兩個隨機數來生成對稱加密算法所需的密鑰。 </p><br data-v-e64db40c><p data-v-e64db40c>這個密鑰只有伺服器和客戶端才知道，可以保證數據傳輸的安全性。</p><br data-v-e64db40c><p data-v-e64db40c> 客戶端和伺服器之間的數據傳輸會使用對稱加密算法來加密和解密，以保證傳輸的安全性。 </p><h1 class="articleCardTitle cor36" data-v-e64db40c># GET和POST的區別?</h1><p data-v-e64db40c>1.get請求的參數是放在url裡面的, 而post請求參數放在請求體裡面的</p><p data-v-e64db40c>2.get請求可以被瀏覽器緩存 ,post請求不能被緩存</p><p data-v-e64db40c> 3.get請求因為放在url裡面, 而url長度是受限的, 最大2048字符, post長度沒有限制 </p><p data-v-e64db40c> 4.get放在url裡面, 安全性比較差, post請求參數放在body裡面安全性比較好 </p><p data-v-e64db40c> 5.get請求可以通過瀏覽器直接訪問, 支持刷新後退, post請求不能直接被瀏覽器訪問, 刷新後數據需要重新傳送 </p><br data-v-e64db40c><br data-v-e64db40c><h1 class="articleCardTitle cor36" data-v-e64db40c># POST 和 PUT?</h1><p data-v-e64db40c>1.兩者都可以 用來新增資源， 但 PUT 比較像 覆蓋或替代資源</p><p data-v-e64db40c>2.PUT 會指定要覆蓋掉哪個資源， POST 不用</p><p data-v-e64db40c> 3.假設資料庫不能有重複資料的話，用 POST 新增多個可能會報錯，但 PUT 不會，因為它只是不停的 對某個資源 進行覆蓋而已 </p><br data-v-e64db40c><br data-v-e64db40c><h3 class="articleCardTitle cor36" data-v-e64db40c># 強緩存和弱緩存?</h3><p data-v-e64db40c> 瀏覽器緩存是瀏覽器在本地磁碟對使用者最近請求過的文件進行存儲，當訪問者再次訪問同一頁面時，瀏覽器就可以直接從本地磁碟載入文件。 </p><p data-v-e64db40c>分 強緩存（也稱本地緩存） &amp; 協商緩存（也稱弱緩存）</p><br data-v-e64db40c><br data-v-e64db40c><p class="cor36" data-v-e64db40c>強緩存</p><p data-v-e64db40c>首先在http1.1時,他會在它的上面會有一個 catch crtl 頭</p><br data-v-e64db40c><p data-v-e64db40c>裡面可能加上 max age 假設他是 3600, 也就是在這一個小時內</p><br data-v-e64db40c><p data-v-e64db40c>再去訪問這個東西的時候, 它不會再去發請求, 它會從硬碟上去讀取</p><br data-v-e64db40c><p data-v-e64db40c>因為他已經緩存下來了, 同時它會再給他配置一個 etag</p><br data-v-e64db40c><p data-v-e64db40c>這個 etag 是它的特徵值, 可能它特徵值是 AAA</p><br data-v-e64db40c><p data-v-e64db40c>等到期3600過了之後也就到期了</p><br data-v-e64db40c><br data-v-e64db40c><p class="cor36" data-v-e64db40c>這裡涉及到協商緩存</p><br data-v-e64db40c><p data-v-e64db40c>就是它會去跟他協商, 然後發請求去協商</p><br data-v-e64db40c><p data-v-e64db40c>這時候可能會發一個 if 開頭的響應頭</p><br data-v-e64db40c><p data-v-e64db40c> 把那個特徵值帶上也就是剛剛說道的 AAA, 然後去看他是否需要繼續給它存著, </p><br data-v-e64db40c><p data-v-e64db40c>還是要改變這個文件, 它可能會返回 200 或 304, 如果返回 200</p><br data-v-e64db40c><p data-v-e64db40c>不僅返回 200 還會附帶 body,就是會把新的內容給它, 如果返回 304</p><br data-v-e64db40c><p data-v-e64db40c>304 這個狀態碼代表未修改繼續用, 那就不需要新的返回</p><br data-v-e64db40c><br data-v-e64db40c><h3 class="articleCardTitle cor36" data-v-e64db40c># HTTP狀態碼和其含義</h3><p data-v-e64db40c>1xx（資訊性狀態碼）：表示請求已被接收，正在處理。</p><br data-v-e64db40c><div class="pTwo" data-v-e64db40c> 100 Continue： 繼續，在發送 POST 請求時，已發送了 http header 之後伺服器將返回此訊息，表示確認，之後發送具體參數訊息 </div><br data-v-e64db40c><p data-v-e64db40c>2xx（成功狀態碼）：表示請求已成功被伺服器接收、理解和處理。</p><br data-v-e64db40c><div class="pTwo" data-v-e64db40c>200 OK：請求已成功，伺服器正常返回請求的內容。</div><br data-v-e64db40c><div class="pTwo" data-v-e64db40c> 201 Created：請求已成功並在伺服器上創建了新的資源。 </div><br data-v-e64db40c><div class="pTwo" data-v-e64db40c>202 Accepted：伺服器已接受請求，但尚未處理。</div><br data-v-e64db40c><p data-v-e64db40c> 3xx（重新導向狀態碼）：表示客戶端需要採取進一步操作才能完成請求。 </p><br data-v-e64db40c><div class="pTwo" data-v-e64db40c> 301 Moved Permanently：請求的資源已永久移動到新位置。 </div><br data-v-e64db40c><div class="pTwo" data-v-e64db40c>302 Found：請求的資源已臨時移動到新位置。</div><br data-v-e64db40c><div class="pTwo" data-v-e64db40c> 304 Not Modified：客戶端的快取資源是最新的，可以直接使用。 </div><br data-v-e64db40c><p data-v-e64db40c>4xx（客戶端錯誤狀態碼）：表示客戶端發起的請求有錯誤或無法完成。</p><br data-v-e64db40c><div class="pTwo" data-v-e64db40c> 400 Bad Request：請求語法錯誤，伺服器無法理解。 </div><br data-v-e64db40c><div class="pTwo" data-v-e64db40c>401 Unauthorized：請求需要用戶驗證。</div><br data-v-e64db40c><div class="pTwo" data-v-e64db40c>403 Forbidden：禁止訪問。</div><br data-v-e64db40c><div class="pTwo" data-v-e64db40c>404 Not Found：請求的資源不存在。</div><br data-v-e64db40c><p data-v-e64db40c>5xx（伺服器錯誤狀態碼）：表示伺服器在處理請求時發生了錯誤。</p><br data-v-e64db40c><div class="pTwo" data-v-e64db40c> 500 Internal Server Error：伺服器遇到了一個未知的錯誤。 </div><br data-v-e64db40c><div class="pTwo" data-v-e64db40c> 503 Service Unavailable：伺服器暫時無法處理請求，可能是由於過載或維護。 </div><br data-v-e64db40c><br data-v-e64db40c><h1 id="web004" class="articleCardTitle cor36" data-v-e64db40c> [ Web筆記 ] ≫ 描述Cookies、sessionStorage和localStorage的區別 </h1><p data-v-e64db40c> localStorage是本地存儲 cookie是服務器下發給瀏覽器的一串字串, 用來驗證的 </p><br data-v-e64db40c><p class="cor36" data-v-e64db40c>用的時候有什麼不一樣?</p><p data-v-e64db40c> cookie用來存sectionID local裡面儲存形式是字串,紀錄用戶本地操作或記錄數據 </p><br data-v-e64db40c><p class="cor36" data-v-e64db40c>localStorage sessionStorage區別?</p><p data-v-e64db40c> session是會話,當頁面關閉會清空 localStorage不會過期, 沒有過期時間, 除非用戶手動清除緩存 </p><br data-v-e64db40c><br data-v-e64db40c><br data-v-e64db40c><br data-v-e64db40c><p data-v-e64db40c> cookie是網站為了標識使用者身份而儲存在使用者本地終端（Client Side）上的數據（通常經過加密）。 </p><p data-v-e64db40c> cookie數據始終在同源的HTTP請求中攜帶（即使不需要），在瀏覽器和伺服器之間來回傳遞。 </p><p data-v-e64db40c> sessionStorage和localStorage不會自動將數據發送給伺服器，僅在本地保存。 </p><br data-v-e64db40c><h3 data-v-e64db40c>儲存容量：</h3><p data-v-e64db40c>cookie數據大小不能超過4KB。</p><p data-v-e64db40c> sessionStorage和localStorage雖然也有儲存大小的限制，但比cookie大得多，可以達到5MB或更大。 </p><br data-v-e64db40c><h3 data-v-e64db40c>生命週期： (有效時間)</h3><p data-v-e64db40c>cookie 需要設置有效時間，過期後 cookie 銷毀。</p><p data-v-e64db40c>localStorage 除非主動刪除數據，否則永久存在。</p><p data-v-e64db40c>sessionStorage 頁面關閉後刪除。</p><br data-v-e64db40c><h3 data-v-e64db40c>儲存形式:</h3><p data-v-e64db40c>三者都是字串類型</p><p data-v-e64db40c>複雜對象 可用 json 的 stringify 和 parse</p><br data-v-e64db40c><p data-v-e64db40c>JSON.stringify() 將字串轉成 JSON</p><p data-v-e64db40c>JSON.parse() 將 JSON 轉成字串</p><br data-v-e64db40c><h3 data-v-e64db40c>安全性:</h3><p data-v-e64db40c>cookie 請求時一般會攜帶在 header 中</p><p data-v-e64db40c>localStorage、sessionStorage 請求時不會攜帶</p><br data-v-e64db40c><br data-v-e64db40c><h1 id="web005" class="articleCardTitle cor36" data-v-e64db40c> [ Web筆記 ] ≫ 什麼是同源策略,不同源會怎樣? </h1><p data-v-e64db40c> 瀏覽器給出的一個規定,規定說2個URL他的域名,端口,協議都相同, 就是同源 </p><br data-v-e64db40c><p data-v-e64db40c>不同源的話, 比如運行在一個URL上的腳本, 如果它發出的請求</p><br data-v-e64db40c><p data-v-e64db40c> 請求的目標和它所運行的環境不同源, 就會受到同源策略不准你發這個請求 </p><br data-v-e64db40c><br data-v-e64db40c><h1 class="articleCardTitle" data-v-e64db40c># 跨域是什麼?</h1><p data-v-e64db40c>就是域名,端口, 協議如果不一樣,</p><p data-v-e64db40c> 瀏覽器會進行跨域報錯, 使用別人的服務時可能遇到, 遇到的話要做跨域 </p><br data-v-e64db40c><br data-v-e64db40c><div data-v-e64db40c>|......不跨域會怎樣? 不跨域的話訪問不到,沒有權限</div><div data-v-e64db40c>|.........用什麼方式訪問會提示沒有權限? AJAX會訪問不到</div><div data-v-e64db40c>|............我現在從A域名向B域名發get請求會發出去嗎? 會</div><div data-v-e64db40c>|...............B服務器會得到我的請求嗎? 會</div><div data-v-e64db40c>|..................得到之後會給我返回一個響應嗎? 會</div><div data-v-e64db40c> |.....................我唯獨什麼拿不到? JS拿不到他的 response </div><div data-v-e64db40c> |........................誰弄得為什麼拿不到? 瀏覽器, 為了安全起見 </div><div data-v-e64db40c> |...........................要跨越這個限制怎麼做? 兼容IE用JSONP, 不用就用CROS </div><br data-v-e64db40c><br data-v-e64db40c><h1 id="" class="articleCardTitle" data-v-e64db40c># 解決跨域問題:</h1><h3 class="cor36" data-v-e64db40c>JSONP</h3><p data-v-e64db40c>利用script標籤不受同源策略的影響, 前端先動態創立一個script標籤,</p><br data-v-e64db40c><p data-v-e64db40c>然後給script設置src, 然後src裡面的目標是請求的目標,</p><br data-v-e64db40c><p data-v-e64db40c> 通常和後端約定說一個回調函數的名字, 通常可以設callback function來告訴後端說我前端回調函數寫這個, </p><br data-v-e64db40c><p data-v-e64db40c> 然後後端給你返回一個script, script裡面相當於調用你前端寫的callback function </p><br data-v-e64db40c><p data-v-e64db40c> 然後callback function後端會給你傳一個數據, 你就可以從callback function裡提取這個數據出來 </p><br data-v-e64db40c><br data-v-e64db40c><div data-v-e64db40c>|...JSONP放在請求裡的參數怎麼寫? callback</div><div data-v-e64db40c>|......callback等於什麼? _ 等於參數名</div><div data-v-e64db40c> |.........參數名怎麼構造? _ 通過固定字串加上一個隨機數來確保那個函數名是唯一的 </div><div data-v-e64db40c> |............那我可以監聽它的成功失敗或獲取狀態碼嗎? 不算完全可以, 可以監聽script.onload 可能只會在200時觸發, 其他狀態碼不一定觸發 ,失敗有一個onerrpr 但具體是什麼錯誤是不確定的 </div><br data-v-e64db40c><br data-v-e64db40c><p class="cor36" data-v-e64db40c>如果發POST可能嗎?</p><p data-v-e64db40c>不可能,因為它只能 GET 文件</p><br data-v-e64db40c><br data-v-e64db40c><p class="cor36" data-v-e64db40c>如果我想要獲取狀態碼可能嗎?</p><p data-v-e64db40c> 不可能,如果 404 的話你的回掉函數根本進不來, 前端就沒有感知到 404 </p><br data-v-e64db40c><br data-v-e64db40c><p data-v-e64db40c>優: 兼容性較好, 兼容 IE 用 JSONP, 不用就用 CROS</p><br data-v-e64db40c><br data-v-e64db40c><p class="cor36" data-v-e64db40c>JSONP 的缺點:</p><p class="pTwo" data-v-e64db40c>1. 他只能用 get 請求</p><br data-v-e64db40c><p class="pTwo" data-v-e64db40c> 2-1. 這個 get 無論如何一定會帶上 cookie,這樣的話你就沒辦法限制誰能用 JSONP, 不像 CORS 指定域名使用數據? </p><p class="pSix" data-v-e64db40c>會導致數據被你不希望的源請求到</p><p class="pEig" data-v-e64db40c>解決? _ 做refer較驗</p><br data-v-e64db40c><p class="pTwo" data-v-e64db40c>2-2. A和B可以JSONP,別的網站C也可以JSONP怎麼辦?</p><p class="pSix" data-v-e64db40c> 通過請求頭request字段裡的 refer 來判斷他是C網站來屏蔽 </p><br data-v-e64db40c><p class="pTwo" data-v-e64db40c>2-3. 我能防止別有用心的人調用這個JSONP嗎?</p><p class="pSix" data-v-e64db40c>可以,加一些較驗參數在JS的後面的參數裡面</p><p class="pSix" data-v-e64db40c>1.refer檢查,請求頭 request header 裡面 refer</p><p class="pSix" data-v-e64db40c> 2.把當前域名的cookieID做一個哈希, 哈希後的值放到 JSONP 的後面就可以防止其他網站有效請求 </p><p class="pEig" data-v-e64db40c>(其他網站偽造不了,因為它拿不到cookie)</p><p class="pEig" data-v-e64db40c> (只有你要請求的域名是子域名行,如果完全不相同你自己也拿不到cookie) </p><br data-v-e64db40c><br data-v-e64db40c><h3 class="cor36" data-v-e64db40c>CORS . . . Cross-Origin Resource Sharing</h3><p data-v-e64db40c>2 種請求:</p><p class="cor36" data-v-e64db40c>CORS簡單請求</p><p data-v-e64db40c>請求方法為 GET HEAD POST</p><p data-v-e64db40c>頭部字段 滿足 CORS 安全規範</p><p data-v-e64db40c>請求頭 Content-Type 為</p><p class="pTwo" data-v-e64db40c>text / plain</p><p class="pTwo" data-v-e64db40c>multipart / form-data</p><p class="pTwo" data-v-e64db40c>application / x-www-form-urlencoded</p><br data-v-e64db40c><p class="cor36" data-v-e64db40c>CORS簡單請求?</p><p data-v-e64db40c>簡單請求 , 在後端設置響應頭 Access-Control-Allow-Origin 建立一個白名單</p><br data-v-e64db40c><p data-v-e64db40c>就可以了</p><br data-v-e64db40c><br data-v-e64db40c><p class="cor36" data-v-e64db40c>CORS複雜請求兩次請求都在做什麼?</p><p data-v-e64db40c>第一次它會去 find options請求, 問服務器準不準我發POST請求,</p><p data-v-e64db40c> 如果你返回的 methods裡面有 POST 那就是準, 返回沒有POST就是不准, (需要後端做配合) </p><p data-v-e64db40c>也就是瀏覽器不一定會允許你發 POST 請求,</p><p data-v-e64db40c>你發POST被服務器阻止就發不出去了,</p><p class="comment" data-v-e64db40c> 但簡單請求是一定可以發出去的(它不會問服務器允不允許簡單請求) </p><br data-v-e64db40c><br data-v-e64db40c><p class="cor36" data-v-e64db40c>為什麼 CORS 要分簡單請求和複雜請求?</p><p data-v-e64db40c>POST 比較危險</p><br data-v-e64db40c><br data-v-e64db40c><div data-v-e64db40c>代理怎麼做跨域? 後端配一台 NGINX 服務器</div><br data-v-e64db40c><br data-v-e64db40c><div data-v-e64db40c>|...如果想提取url中的參數,然後把參數變成物件怎麼做?</div><div data-v-e64db40c> |......路徑是/xxx?a=1&amp;b=2,要得到{a:1 , b:2}怎麼做? _ 正則做一個匹配 </div><div data-v-e64db40c>|......url裡面遇到錨點#怎麼處理?</div><div data-v-e64db40c>|.........#號算不算查詢字串的一部分? _ 不算</div><div data-v-e64db40c> |...unicode和utf8區別?(分清子符集和編碼) _ unicode是一個字符集, 它世界所有文字做編碼, utf8是對unicode的計算機編碼 </div><div data-v-e64db40c>|...英文文檔? react beta</div><div data-v-e64db40c>|...如果JS API不知道用法你去哪看? MDN</div><div data-v-e64db40c>|...JS規範文檔英文? ecmascript</div><div data-v-e64db40c>|...規範文檔的英文? specification</div><div data-v-e64db40c>|...grapQL? 前端自己寫自己要的字段,然後後端一次性發過來</div><br data-v-e64db40c><br data-v-e64db40c><h1 class="articleCardTitle cor36" data-v-e64db40c># 網站開發流程?</h1><p data-v-e64db40c> 首先產品經理提出想做的網站是什麼, 前後端討論定一下對應API格式, 訂好規則後前端根據UI給的設計圖把頁面做出來, 測試再根據我們的代碼進行測試, 測試完打包上線 </p><br data-v-e64db40c><br data-v-e64db40c><h1 id="web006" class="articleCardTitle cor36" data-v-e64db40c> [ Web筆記 ] ≫ 腳本攻擊XSS,請求偽造CSRF </h1><h3 class="articleCardTitle" data-v-e64db40c> 跨站腳本攻擊（XSS）Cross-site request forgery </h3><p data-v-e64db40c> 攻擊者在網頁中注入惡意腳本，並將該腳本傳送給其他使用者的瀏覽器執行。 </p><br data-v-e64db40c><br data-v-e64db40c><p data-v-e64db40c>防止XSS攻擊:</p><p data-v-e64db40c>開發者應該適當地驗證和過濾使用者的輸入。</p><br data-v-e64db40c><br data-v-e64db40c><h3 class="articleCardTitle" data-v-e64db40c> 跨站請求偽造（CSRF）Cross-site request forgery </h3><p data-v-e64db40c> 攻擊者誘導使用者到第三方網站, 在第三方網站中, 向被攻擊網站發送跨站請求。 </p><br data-v-e64db40c><p data-v-e64db40c>利用受害者在被攻擊網站已獲取的註冊憑證, 繞過後台用戶驗證,</p><br data-v-e64db40c><p data-v-e64db40c>冒充用戶對被攻擊網站執行操作。</p><br data-v-e64db40c><br data-v-e64db40c><p data-v-e64db40c>防止CSRF攻擊:</p><p data-v-e64db40c> 檢查和驗證請求的來源、實施隨機生成的驗證碼（CSRF令牌）和同源政策等。 </p><br data-v-e64db40c><br data-v-e64db40c><h1 id="web007" class="articleCardTitle cor36" data-v-e64db40c> [ Web筆記 ] ≫ 如何進行網站性能優化 ? </h1><p data-v-e64db40c>加載方面:</p><div class="pTwo" data-v-e64db40c>1. 減少 http 請求 ( Spriter精靈圖 , 文件合併 )</div><div class="pTwo" data-v-e64db40c> 2. 減小文件大小 ( 資源壓縮 , 圖片壓縮 , 代碼壓縮 ) </div><div class="pTwo" data-v-e64db40c>3. CDN ( 第三方庫 , 大文件 , 大圖 )</div><div class="pTwo" data-v-e64db40c>4. SSR 服務端渲染 , 預渲染</div><div class="pTwo" data-v-e64db40c>5. 懶加載</div><div class="pTwo" data-v-e64db40c>6. 分包</div><br data-v-e64db40c><p data-v-e64db40c>性能方面:</p><div class="pTwo" data-v-e64db40c> 減少 DOM 操作 , 有操作量很大的 DOM 可以用 文檔碎片 </div><br data-v-e64db40c><p data-v-e64db40c>CSS 方面:</p><div class="pTwo" data-v-e64db40c>1. 將樣式表放在頁面頂部</div><div class="pTwo" data-v-e64db40c>2. 不使用 CSS 表達式</div><div class="pTwo" data-v-e64db40c>3. 使用 ＜link&gt; 不使用 @import</div><br data-v-e64db40c><p data-v-e64db40c>JS 方面:</p><div class="pTwo" data-v-e64db40c>1. 將 JS 腳本放在頁面底部</div><div class="pTwo" data-v-e64db40c>2. 將 JS 和 CSS 從外部引入</div><div class="pTwo" data-v-e64db40c>3. 壓縮 JS 和 CSS</div><div class="pTwo" data-v-e64db40c>4. 刪除不需要的腳本</div><div class="pTwo" data-v-e64db40c>5. 減少 DOM 訪問</div><br data-v-e64db40c><p data-v-e64db40c>圖片方面:</p><div class="pTwo" data-v-e64db40c>1. 壓縮圖片 tinyJPG</div><div class="pTwo" data-v-e64db40c>2. Spriter精靈圖</div><div class="pTwo" data-v-e64db40c>3. 不要在 HTML 中拉伸圖片</div><br data-v-e64db40c><br data-v-e64db40c><h1 class="articleCardTitle" data-v-e64db40c>有用過那些前端性能優化的方法 ?</h1><p data-v-e64db40c> 1. 減少 http 請求次數 =&gt; Spriter精靈圖 , JS &amp; CSS 代碼壓縮 , 圖片壓縮工具來減小圖片大小 , 網頁 <a href="https://zh.wikipedia.org/wiki/Gzip" class="cor36" data-v-e64db40c>GZIP @WIKI</a> , 引用 CDN 庫 </p><p data-v-e64db40c>2. 用 innerHTML 代替 DOM 操作 , 減少 DOM 操作次數 , 來優化 JS</p><p data-v-e64db40c>3. 當需要設置的樣式很多時用 className 而不是直接操作 style</p><p data-v-e64db40c>4. 圖片預加載 , 將樣式表放在頂部 , 將 script 放在底部</p><p data-v-e64db40c> 5. 避免在主佈局中用 table 標籤 , 因為 table 要等其中內容完全下載之後才會顯示出來 ( 比 div + css 慢 ) </p><br data-v-e64db40c><br data-v-e64db40c><h1 class="articleCardTitle" data-v-e64db40c>前端性能優化最佳實踐 ?</h1><p data-v-e64db40c> PageSpeed：PageSpeed是由Google開發的工具，用於評估網頁的性能。它通過分析網頁的載入速度、渲染性能、資源優化等指標，給出性能優化建議和分數評級。PageSpeed的評分基於一系列規則和最佳實踐，根據網頁的優化程度給出具體的優化建議，幫助開發人員改進網頁的性能。 </p><br data-v-e64db40c><p data-v-e64db40c> YSlow：YSlow是由Yahoo開發的網頁性能評估工具，它也用於評估網頁的性能和優化建議。YSlow根據一系列的規則和性能指標，對網頁的載入速度、緩存設置、JavaScript和CSS優化等進行分析和評估。它提供了類似於PageSpeed的性能分數和建議，幫助開發人員了解和改善網頁的性能表現。 </p><br data-v-e64db40c><br data-v-e64db40c><h1 class="articleCardTitle" data-v-e64db40c>最後甚麼是性能優化</h1><p data-v-e64db40c>1. 頁面加載性能 -&gt; 加載時間 , 用戶體驗</p><p data-v-e64db40c>2. 動畫與操作性能 -&gt; 是否流暢不卡頓</p><div class="pTwo" data-v-e64db40c>用 translate 和 定位 比較不會卡頓</div><div class="pTwo" data-v-e64db40c> translate 是脫離正常文檔流 , 所以移動不會影響上方&amp;下方元素 </div><div class="pTwo" data-v-e64db40c>所以不用重新渲染 DOM</div><p data-v-e64db40c>3. 內存佔用 -&gt; 內存佔用過大導致瀏覽器崩潰</p><div class="pTwo" data-v-e64db40c>直播內存超出瀏覽器上限 , 導致卡頓</div><p data-v-e64db40c>4. 電量消耗 -&gt; 遊戲方面</p><br data-v-e64db40c><p data-v-e64db40c>那些不是性能優化 ?</p><p data-v-e64db40c>1. while 循環快 還是 for 循環快 ?</p><p data-v-e64db40c>2. |0 比 Math.floor 快</p><p data-v-e64db40c>3. 三元運算符 比 if else 快</p><p data-v-e64db40c>這些是執行效率</p><br data-v-e64db40c><br data-v-e64db40c><h1 id="web008" class="articleCardTitle" data-v-e64db40c> [ Web筆記 ] ≫ 如何進行渲染優化 ? </h1><p data-v-e64db40c>1.不使用 iframe</p><p class="pTwo" data-v-e64db40c>iframe 會阻塞主頁面的 onload 事件</p><p class="pTwo" data-v-e64db40c> iframe 和主頁面共享連接池，瀏覽器對相同域的連接有限制，因而影響頁面的併行加載。 </p><br data-v-e64db40c><p data-v-e64db40c> 2.不使用 gif 來實現 loading 效果 ( 降低 CPU 消耗 而提升渲染性能) </p><br data-v-e64db40c><p data-v-e64db40c>3.用 CSS 代替 JS 動畫 ( 避免重新繪排 )</p><br data-v-e64db40c><p data-v-e64db40c> 4.小圖用 base64 位編碼，以減少網路請求。 (不建議大圖 =&gt; 較消耗CPU) </p><br data-v-e64db40c><p data-v-e64db40c> 5.不把 style 和 script 都放在頭部，才不會阻塞頁面。(Renderer進程中JS線程和渲染線程互斥) </p><br data-v-e64db40c><p data-v-e64db40c>6.避免在 href 和 src 中用空值。(link . script . img)</p><p class="pTwo" data-v-e64db40c> 瀏覽器會嘗試解析這些標籤並發起對應的網路請求，即使他為空值也會發起。 </p><br data-v-e64db40c><p data-v-e64db40c>7.用 className 而不是直接操作 style</p><br data-v-e64db40c><p data-v-e64db40c>8.用 innerHTML 代替 DOM 操作次數 來優化 JS。</p><br data-v-e64db40c><p data-v-e64db40c> 9.前端用變數保存 AJAX 請求結果，並操作客戶端變數來減少請求次數。 </p><br data-v-e64db40c><p data-v-e64db40c>10.圖片預加載 , 網頁 Gzip , CDN 庫 , data 緩存 , 圖片服務器</p><br data-v-e64db40c><br data-v-e64db40c><h3 id="web009" class="articleCardTitle cor36" data-v-e64db40c> [ Web筆記 ] ≫ OSI七層模型 </h3><p data-v-e64db40c>1.物理層</p><br data-v-e64db40c><p data-v-e64db40c>利用傳輸介質為數據鏈路層提供物理連接，實現比特流的透明傳輸。</p><br data-v-e64db40c><p data-v-e64db40c>2.數據鏈路層 - 各段鏈路的 通信協議</p><br data-v-e64db40c><p data-v-e64db40c> 在物理層提供的比特流的基礎上，通過差錯控制、流量控制方法，使有差錯的物理線路變為無差錯的數據鏈路。 </p><br data-v-e64db40c><p data-v-e64db40c>3.網絡層 - 基於 IP 地址 進行 路由 轉發</p><br data-v-e64db40c><p data-v-e64db40c>向傳輸層提供最基本的端到端的數據傳輸服務。</p><br data-v-e64db40c><p data-v-e64db40c>4.傳輸層 - 建立 TCP 或 UDP 連接</p><br data-v-e64db40c><p data-v-e64db40c> 向用戶提供可靠的端到端的差錯和流量控制，保證報文的正確傳輸，同時向高層屏蔽下層數據通信的細節，即向用戶透明地傳送報文。 </p><br data-v-e64db40c><p data-v-e64db40c>5.會話層 - 建立 2 APP 之間的 會話</p><br data-v-e64db40c><p data-v-e64db40c>組織和協調兩個會話進程之間的通信，並對數據交換進行管理。</p><br data-v-e64db40c><p data-v-e64db40c>6.表示層 - 對 APP 數據進行 編碼</p><br data-v-e64db40c><p data-v-e64db40c>處理用戶信息的表示問題，如編碼、數據格式轉換和加密解密等。</p><br data-v-e64db40c><p data-v-e64db40c>7.應用層 - 用戶 APP 裡的數據</p><br data-v-e64db40c><p data-v-e64db40c>直接向用戶提供服務，完成用戶希望在網絡上完成的各種工作。</p><br data-v-e64db40c><br data-v-e64db40c><h3 class="articleCardTitle cor36" data-v-e64db40c># 五層網絡協議</h3><p data-v-e64db40c>1.應用層（DNS，HTTP）：域名解析為IP並發送HTTP請求</p><p data-v-e64db40c>2.傳輸層（TCP，UDP）：建立TCP連接（三次握手）</p><p data-v-e64db40c>3.網路層（IP，ARP）：IP尋址</p><p data-v-e64db40c>4.數據鏈路層（PPP）：封裝成幀</p><p data-v-e64db40c> 5.物理層（利用物理介質傳輸比特流）：物理傳輸（通過雙絞線、電磁波等各種介質） </p><br data-v-e64db40c><br data-v-e64db40c><h3 id="" class="articleCardTitle cor36" data-v-e64db40c>[ Web筆記 ] ≫ IPv4 IPv6</h3><p data-v-e64db40c>IPv4 的 二進制數 是 32 位的</p><br data-v-e64db40c><p data-v-e64db40c>192.168.1.1</p><br data-v-e64db40c><p data-v-e64db40c>IPv6 的長度 是 128 位 十六進制</p><br data-v-e64db40c><p data-v-e64db40c>2001:0db8:85a3:0000:0000:8a2e:0370:7334</p><br data-v-e64db40c><p data-v-e64db40c>地址數量:</p><br data-v-e64db40c><p data-v-e64db40c>IPv4 43億地址</p><br data-v-e64db40c><p data-v-e64db40c>IPv6 2^128</p><br data-v-e64db40c><p data-v-e64db40c>IPv6 比 IPv4 更安全</p><br data-v-e64db40c><p data-v-e64db40c>IPv4 安全性取決於 網站 和 應用程序</p><br data-v-e64db40c><p data-v-e64db40c>IPv6 集成了 Internet 協議的 安全標準</p><br data-v-e64db40c><p data-v-e64db40c>IPv4 安全是可選項 IPv6 強制性的</p><br data-v-e64db40c><p data-v-e64db40c>IPv6 性能好</p><br data-v-e64db40c><p data-v-e64db40c>IPv6 路由表更小 , 聚合能力更強</p><br data-v-e64db40c><br data-v-e64db40c><h3 id="web010" class="articleCardTitle cor36" data-v-e64db40c> [ Web筆記 ] ≫ DOMContentLoaded和load的差別? </h3><p data-v-e64db40c>DOMContentLoaded:</p><p data-v-e64db40c>瀏覽器已完全加載 HTML 並構建 DOM 樹，</p><p data-v-e64db40c>但像 ＜img&gt; 和樣式表之類的外部資源 可能尚未加載完成。</p><br data-v-e64db40c><p data-v-e64db40c>load：</p><p data-v-e64db40c>瀏覽器已完全加載 HTML ，還加載完成所有外部資源 。</p><br data-v-e64db40c><p data-v-e64db40c>beforeunload 是在網頁被卸載「之前」觸發</p><p data-v-e64db40c>unload 是在網頁被卸載「之後」觸發</p><br data-v-e64db40c><br data-v-e64db40c><h1 id="web011" class="articleCardTitle cor36" data-v-e64db40c> [ Web筆記 ] ≫ 瀏覽器垃圾回收機制 </h1><p data-v-e64db40c>垃圾回收是一種自動的記憶體管理機制。</p><p data-v-e64db40c>當電腦上的動態記憶體不再需要時，就應該予以釋放。</p><br data-v-e64db40c><p data-v-e64db40c> 自動的意思是瀏覽器可以自動幫助我們回收記憶體垃圾，但並不代表我們不用關心記憶體管理，如果操作不當，JavaScript中仍然會出現記憶 </p><br data-v-e64db40c><br data-v-e64db40c><h3 class="articleCardTitle" data-v-e64db40c>標記清除</h3><p data-v-e64db40c> JavaScript 中有一個全域物件， 在固定的時間間隔內， 垃圾回收器會從這個全域物件開始， </p><br data-v-e64db40c><p data-v-e64db40c>尋找所有從這個全域物件開始引用的物件， 再找這些物件引用的物件</p><br data-v-e64db40c><p data-v-e64db40c> 對這些活躍的物件進行標記， 這是標記階段。 清除階段就是清除那些沒有被標記的物件。 </p><br data-v-e64db40c><br data-v-e64db40c><p data-v-e64db40c>問題: 在整理之後，內存空間是不連續的，即出現了內存碎片。</p><br data-v-e64db40c><br data-v-e64db40c><h3 data-v-e64db40c>標記整理：</h3><p data-v-e64db40c> 標記階段與標記清除法沒什麼區別， 只是標記結束後， 標記整理法會將存活的物件向內存的一邊移動， 最後清理掉邊界內存。 </p><br data-v-e64db40c><br data-v-e64db40c><h3 class="articleCardTitle" data-v-e64db40c>引用記數</h3><p data-v-e64db40c>跟蹤紀錄每個值被引用次數。</p><br data-v-e64db40c><br data-v-e64db40c><h3 class="articleCardTitle" data-v-e64db40c> 在瀏覽器中，不同類型的變量在何時釋放內存？ </h3><p data-v-e64db40c>引用類型: 當它們不再被引用時，由V8自動回收。</p><br data-v-e64db40c><p data-v-e64db40c>基本類型:</p><p data-v-e64db40c>如果處於閉包的情況下，只有在閉包沒有引用時，V8才會回收它們。</p><p data-v-e64db40c>如果不是閉包的情況，則在等待V8進行新生代切換時回收。</p><br data-v-e64db40c><br data-v-e64db40c><h3 class="articleCardTitle" data-v-e64db40c>內存洩漏</h3><p data-v-e64db40c>內存洩漏指任何對象在不再擁有之後它仍然存在</p><br data-v-e64db40c><p data-v-e64db40c>1.閉包使用不當</p><p data-v-e64db40c>2.setTimeout 的第一個参數用字串</p><br data-v-e64db40c><br data-v-e64db40c><p data-v-e64db40c> 循環引用：當兩個或多個物件相互引用，並且沒有被其他物件引用時，它們將無法被垃圾回收。 </p><p data-v-e64db40c> 未釋放資源：使用了需要手動釋放的資源，如檔案處理器、資料庫連線或網路連線，在不再需要時沒有正確釋放這些資源。 </p><p data-v-e64db40c> 定時器和回呼函式： 在使用定時器或回呼函式時，沒有正確清理或取消這些定時器或回呼函式，導致它們仍然保留在內存中。 </p><p data-v-e64db40c> 快取導致： 過度使用快取，將大量物件存儲在快取中，並且沒有適當的清理策略。 </p><br data-v-e64db40c><br data-v-e64db40c><p data-v-e64db40c>解決:</p><p data-v-e64db40c> 解除引用：當不再需要某個物件時，將其引用設置為null，使垃圾回收器能夠回收該物件佔用的內存空間。 </p><p data-v-e64db40c> 關閉資源：對於使用了需要手動釋放的資源，如檔案處理器或資料庫連線，確保在使用完畢後進行正確的關閉和釋放。 </p><p data-v-e64db40c> 取消定時器和回呼函式：在使用定時器或註冊回呼函式時，確保在不再需要時及時取消定時器或移除回呼函式，避免它們繼續佔用內存空間。 </p><p data-v-e64db40c> 合理管理快取：對於使用快取的情況，確保採用適當的清理策略，定期清除不再需要的快取物件，避免過度佔用內存。 </p><p data-v-e64db40c> 注意作用域和生命週期：確保物件的作用域和生命週期符合需求，避免長時間持有物件的引用，及時釋放不再需要的物件。 </p><p data-v-e64db40c>使用內存管理工具和效能分析工具：借助工具進行內存泄漏</p><br data-v-e64db40c><br data-v-e64db40c><h1 id="web012" class="articleCardTitle cor36" data-v-e64db40c> [ Web筆記 ] ≫ 前端需要注意哪些SEO </h1><p data-v-e64db40c>1.合理的title、description、keywords標籤</p><div class="pTwo" data-v-e64db40c>＜title &gt;網頁標題＜/title &gt;</div><div class="pTwo" data-v-e64db40c> ＜meta name=&quot;description&quot; content=&quot;網站內容概述&quot;&gt; </div><div class="pTwo" data-v-e64db40c> ＜meta name=&quot;keywords&quot; content=&quot;SEO,metatag,html&quot;&gt;曾經是SEO優化最重要的根據,但現在不參考keywords來決定SEO排名了 </div><br data-v-e64db40c><p data-v-e64db40c>2.語義化的HTML代碼, 可以讓搜索引擎更容易理解網頁的結構和內容</p><p data-v-e64db40c> 3.重要內容HTML代碼放在最前面： 搜索引擎抓取HTML的順序是從上到下，有些搜索引擎對抓取長度有限制。將重要的內容放在HTML的前面，確保重要內容一定會被抓取。 </p><p data-v-e64db40c>4.重要內容不要用JavaScript輸出： 爬蟲不會執行JavaScript獲得內容</p><p data-v-e64db40c>5.少使用iframe： 搜索引擎通常不會抓取iframe中的內容</p><p data-v-e64db40c> 6.非裝飾性圖片加上 alt 屬性: 當圖片無法加載時會顯示該描述，也可供讀屏器讀取圖片內容。 </p><p data-v-e64db40c>7.提高網站速度： 網站速度是搜索引擎排序的一個重要指標</p><div class="pTwo" data-v-e64db40c>壓縮圖片</div><div class="pTwo" data-v-e64db40c>瀏覽器緩存</div><div class="pTwo" data-v-e64db40c>最小化 CSS 和 JavaScript</div><div class="pTwo" data-v-e64db40c>使用 CDN 庫</div><div class="pTwo" data-v-e64db40c>優化代碼</div><div class="pTwo" data-v-e64db40c>避免重定向</div><div class="pTwo" data-v-e64db40c>壓縮頁面</div><div class="pTwo" data-v-e64db40c>使用快速的主機服務器</div><div class="pTwo" data-v-e64db40c>非同步載入資源</div><div class="pTwo" data-v-e64db40c>使用快取機制</div><br data-v-e64db40c><br data-v-e64db40c><h1 id="web013" class="articleCardTitle cor36" data-v-e64db40c> [ Web筆記 ] ≫ WEB標準 &amp; W3C標準 </h1><p data-v-e64db40c>WEB 標準不是某一個標準，是一系列的集合</p><p data-v-e64db40c>WEB 標準: 結構 . 表現 . 行為</p><p data-v-e64db40c>結構(Structure):</p><p class="pTwo" data-v-e64db40c>指 body 裡面寫的標籤 =&gt; HTML 標籤組成</p><br data-v-e64db40c><p data-v-e64db40c>表現(Presentation)</p><p class="pTwo" data-v-e64db40c>指豐富 HTML 標籤樣式， 由 CSS 樣式組成</p><br data-v-e64db40c><p data-v-e64db40c>行為(Behavior)</p><p class="pTwo" data-v-e64db40c>指頁面和用戶交互，由 JS 組成</p><p class="pTwo" data-v-e64db40c>標準包括: DOM . ECMAScript</p><br data-v-e64db40c><p data-v-e64db40c>W3C對於WEB標準提出了規範化的要求：</p><p data-v-e64db40c>1.標籤字母要小寫。</p><p data-v-e64db40c>2.標籤要閉合。</p><p data-v-e64db40c>3.標籤不允許隨意嵌套。</p><p data-v-e64db40c> 4.儘量用外部連結 CSS樣式表 和 JS 腳本，使結構、表現、行為分離，符合規範。能提高頁面渲染速度，提升使用者體驗。 </p><p class="comment" data-v-e64db40c> 5.儘量減少使用行內樣式表，實現結構與表現的分離。 </p><p class="comment" data-v-e64db40c> 6.標籤的id和class等屬性命名應具有語意，更有利於SEO（搜尋引擎優化），並使代碼易於維護。 </p><br data-v-e64db40c><br data-v-e64db40c><h1 id="web014" class="articleCardTitle cor36" data-v-e64db40c> [ Web筆記 ] ≫ 描述漸進增強和優雅降級之間的不同? </h1><p data-v-e64db40c>漸進增強（Progressive Enhancement）:</p><p data-v-e64db40c> 針對低版本瀏覽器進行構建頁面，保證最基本的功能，然後再針對高級瀏覽器進行效果、互動等改進和追加功能，以達到更好的使用者體驗。 </p><br data-v-e64db40c><p data-v-e64db40c>優雅降級（Graceful Degradation）:</p><p data-v-e64db40c>一開始就構建完整的功能，然後再針對低版本瀏覽器進行兼容。</p><br data-v-e64db40c><br data-v-e64db40c><p data-v-e64db40c> 區別：優雅降級是從複雜的現狀開始，並試圖減少使用者體驗的供給，而漸進增強則是從一個非常基礎的、能夠起作用的版本開始，並不斷擴充，以適應未來環境的需求。降級（功能衰減）意味著往回看；而漸進增強則意味著朝前看，同時保證其根基處於安全地帶。 </p><br data-v-e64db40c><br data-v-e64db40c><h1 id="web015" class="articleCardTitle cor36" data-v-e64db40c> [ Web筆記 ] ≫ 製作網頁用的圖片格式有哪些? </h1><p data-v-e64db40c>Webp . jpeg . gif . svg . Apng</p><br data-v-e64db40c><p data-v-e64db40c>WebP 格式:</p><p data-v-e64db40c>由 Google 開發的一種圖像格式。圖片壓縮體積約只有 JPEG 的 2/3。</p><p data-v-e64db40c>在質量相同情況下， WebP 比 JPEG 小 40%。</p><br data-v-e64db40c><p data-v-e64db40c> Apng: “Animated Portable Network Graphics” 可以實現 png 格式的動態圖片效果。 </p><br data-v-e64db40c><br data-v-e64db40c><h1 id="web016" class="articleCardTitle cor36" data-v-e64db40c> [ Web筆記 ] ≫ 大型網站有大量圖片，加載很慢，有哪些方法能優化這些圖片加載，提升用戶體驗? </h1><p data-v-e64db40c>圖片懶加載:</p><p data-v-e64db40c> 在頁面上的未被看見的區域添加滾動條事件的技術，判斷圖片與瀏覽器頂部的距離和頁面的距離，如果前者小於後者，則優先加載該圖片。 </p><br data-v-e64db40c><p data-v-e64db40c>預加載:</p><p data-v-e64db40c> 如果為幻燈片，可以使用圖片預加載技術，先下載當前展示圖片的前一張和後一張圖片。 </p><br data-v-e64db40c><p data-v-e64db40c> 如果圖片是CSS圖片，可以使用 CSS Sprite、SVG Sprite、Iconfont、Base64等技術 </p><br data-v-e64db40c><p data-v-e64db40c> 如果圖片過大，可以使用特殊編碼的圖片。在加載時，首先加載壓縮程度極高的縮略圖，以提高用戶體驗。 </p><br data-v-e64db40c><p data-v-e64db40c> 如果圖片展示區域小於圖片的實際大小，可以在伺服器端根據業務需求先進行圖片壓縮，使圖片壓縮後的大小與展示一致。 </p><br data-v-e64db40c><br data-v-e64db40c><h1 id="web017" class="articleCardTitle cor36" data-v-e64db40c> [ Web筆記 ] ≫ Web 開發中會話跟蹤的方法有哪些? </h1><p data-v-e64db40c>1.會話</p><p class="pTwo" data-v-e64db40c> 用戶打開瀏覽器，訪問 Web 服務器的資源，會話建立，直到有一方斷開連結，會話結束。 </p><p class="pTwo" data-v-e64db40c>一次會話中可以包含多次請求和響應</p><br data-v-e64db40c><p data-v-e64db40c>2.會話跟蹤</p><p class="pTwo" data-v-e64db40c> 一種維護瀏覽器狀態的方法，服務器需要識別多次請求是否來自於同一瀏覽器，以便於在同一次會話中的多次請求間共享數據。 </p><br data-v-e64db40c><p data-v-e64db40c>一次會話中的多次請求間共享數據 =&gt; 購物車 . 登陸 . 驗證碼</p><br data-v-e64db40c><p data-v-e64db40c> 3.客戶端和伺服器用HTTP協議是無狀態的 =&gt; 伺服器不知道多次請求中，那些來自同一瀏覽器 </p><p class="pTwo" data-v-e64db40c> 每次瀏覽器向伺服器發請求時，伺服器都將該請求視為新的請求 </p><p class="pTwo" data-v-e64db40c>所以需要會話跟蹤</p><p data-v-e64db40c>Cookie 和 Seccion 都是來完成一次會話內多次請求間數據共享</p><p data-v-e64db40c>存取位置: Cookie 數據存在客戶端 ， Session 數據存在伺服器</p><p data-v-e64db40c>安全性: Cookie 不安全 ， Session 安全</p><p data-v-e64db40c>數據大小: Cookie 4KB ， Session 無大小限制</p><p data-v-e64db40c>儲存時間: Cookie 可以長期存取 ， Session 默認 30 min</p><p data-v-e64db40c>伺服器: Cookie 不佔伺服器資源 ， Session 佔用 伺服器資源</p><br data-v-e64db40c><p data-v-e64db40c>1.客戶端會話跟蹤技術 Cookie</p><p data-v-e64db40c>把數據存在客戶端瀏覽器</p><br data-v-e64db40c><p data-v-e64db40c>2.服務端會話跟蹤技術 Session</p><p data-v-e64db40c>把數據存在服務端</p><br data-v-e64db40c><p data-v-e64db40c>3.URL重寫</p><p data-v-e64db40c>URL重寫是一種在URL中嵌入會話ID的方法。</p><br data-v-e64db40c><p data-v-e64db40c>4.隱藏表單字段</p><p data-v-e64db40c> 在HTML表單中，可以添加一個隱藏的字段來存儲會話ID。該字段在每次表單提交時一同發送到服務器，以維護會話狀態。 </p><br data-v-e64db40c><p data-v-e64db40c>5.ip地址</p><p data-v-e64db40c> 伺服器可以記錄使用者的IP地址，並將其與其他會話標識符（如Cookie或會話ID）相關聯。這樣，即使會話標識符發生變化（如Cookie被刪除），伺服器仍然可以根據IP地址來識別使用者並恢復其會話狀態。 </p><br data-v-e64db40c><br data-v-e64db40c><br data-v-e64db40c><br data-v-e64db40c><p data-v-e64db40c> HTTP協議如果是有狀態，每一次後邊請求要攜帶前一次請求所有的數據，會導致後邊數據大，而後邊請求速度慢。 </p><br data-v-e64db40c><br data-v-e64db40c><h1 id="web018" class="articleCardTitle cor36" data-v-e64db40c> [ Web筆記 ] ≫ CDN為什麼利用多個域名來存取網站資源更有效? </h1><p data-v-e64db40c>內容傳遞網路（英語：Content Delivery Network，縮寫：CDN）</p><p data-v-e64db40c> 指一種透過網際網路互相連接的電腦網路系統，利用最靠近每位使用者的伺服器，更快、更可靠地將音樂、圖片、影片、應用程式及其他檔案傳送給使用者，來提供高效能、可擴展性及低成本的網路內容傳遞給使用者。 </p><br data-v-e64db40c><br data-v-e64db40c><p data-v-e64db40c>CDN和緩存:</p><p data-v-e64db40c> 使用多個域名還可以更好地與 內容分發網絡（CDN） 和緩存系統配合使用。 </p><p data-v-e64db40c> CDN可以將網站資源分佈在全球各地的伺服器上，通過使用多個域名，可以更好地與CDN緩存機制配合，提供更快速的內容傳輸和加載。 </p><br data-v-e64db40c><br data-v-e64db40c><br data-v-e64db40c><p data-v-e64db40c>1.突破瀏覽器並發限制：</p><p data-v-e64db40c>瀏覽器對同一域名下的並發請求數量有限制。</p><p data-v-e64db40c> 通過使用CDN，可以將頁面資源分佈在多個CDN伺服器上，使瀏覽器可以同時從多個域名下載資源，從而提高並發性能。 </p><br data-v-e64db40c><p data-v-e64db40c>2.節省Cookie帶寬：</p><p data-v-e64db40c> Cookie是在客戶端和伺服器之間傳輸的小型資料文件，用於存儲會話信息和使用者偏好等。 </p><p data-v-e64db40c> CDN緩存靜態資源時，可以避免將Cookie傳輸到CDN伺服器，從而減少帶寬消耗，提高傳輸效率。 </p><br data-v-e64db40c><p data-v-e64db40c>3.節省主域名的連接數，優化頁面響應速度：</p><p data-v-e64db40c>瀏覽器對同一域名下的並發連接數有限制。</p><p data-v-e64db40c> 使用CDN時，可以將靜態資源（如圖片、CSS和JavaScript文件）分發到CDN伺服器上，從而減輕主域名的負載，提高頁面的響應速度和性能。 </p><br data-v-e64db40c><p data-v-e64db40c>4.防止不必要的安全問題：</p><p data-v-e64db40c> 通過使用CDN，可以將靜態資源從主伺服器分離出來，減少直接與主伺服器進行交互的機會。 </p><p data-v-e64db40c>這有助於防止潛在的攻擊和安全問題，提高網站的安全性。</p><br data-v-e64db40c><br data-v-e64db40c>',815),Pr=Yt(()=>n("div",{class:"toTopButton"},[n("div",{class:"disCen"},"___"),n("div",{class:"disCen"},"▲")],-1)),Or=[Pr],Nr=Yt(()=>n("div",{class:"toBotButton"},[n("div",{class:"disCen"},"▼"),n("div",{class:"disCen"},"￣￣")],-1)),$r=[Nr],Er={__name:"WebPage",setup(a){const s=ba(!1);window.addEventListener("scroll",function(){s.value=window.scrollY>0});function d(){window.scrollTo({top:0,left:0,behavior:"smooth"})}function v(){window.scrollTo({top:999999,left:0,behavior:"smooth"})}function t(e){window.scrollTo({top:document.getElementById(`${e}`).offsetTop,behavior:"smooth"})}return(e,c)=>{const l=qa("spen");return aa(),ta(G,null,[n("section",null,[n("div",qr,[n("div",_r,[n("div",Sr,[n("div",{class:"leftNavText",onClick:c[0]||(c[0]=p=>t("web001"))}," 瀏覽器內核,主要組成部分 "),n("div",{class:"leftNavText",onClick:c[1]||(c[1]=p=>t("web002"))}," 瀏覽器輸入網址後按下enter "),n("div",{class:"leftNavText",onClick:c[2]||(c[2]=p=>t("web003"))},"http協議"),n("div",{class:"leftNavText",onClick:c[3]||(c[3]=p=>t("web004"))}," Cookies.localStorage "),n("div",{class:"leftNavText",onClick:c[4]||(c[4]=p=>t("web005"))}," 什麼是同源策略,不同源會怎樣 "),n("div",{class:"leftNavText",onClick:c[5]||(c[5]=p=>t("web006"))}," 腳本攻擊XSS,請求偽造CSRF "),n("div",{class:"leftNavText",onClick:c[6]||(c[6]=p=>t("web007"))}," 如何進行網站性能優化 "),n("div",{class:"leftNavText",onClick:c[7]||(c[7]=p=>t("web008"))}," 如何進行渲染優化 "),n("div",{class:"leftNavText",onClick:c[8]||(c[8]=p=>t("web009"))},"OSI七層模型"),n("div",{class:"leftNavText",onClick:c[9]||(c[9]=p=>t("web010"))}," DOMContentLoaded和load "),n("div",{class:"leftNavText",onClick:c[10]||(c[10]=p=>t("web011"))}," 瀏覽器垃圾回收機制 "),n("div",{class:"leftNavText",onClick:c[11]||(c[11]=p=>t("web012"))}," 前端需要注意哪些SEO "),n("div",{class:"leftNavText",onClick:c[12]||(c[12]=p=>t("web013"))}," WEB標準&W3C標準 "),n("div",{class:"leftNavText",onClick:c[13]||(c[13]=p=>t("web014"))}," 漸進增強和優雅降級 "),n("div",{class:"leftNavText",onClick:c[14]||(c[14]=p=>t("web015"))}," 製作網頁用的圖片格式 "),n("div",{class:"leftNavText",onClick:c[15]||(c[15]=p=>t("web016"))}," 大型網站有大量圖片 "),n("div",{class:"leftNavText",onClick:c[16]||(c[16]=p=>t("web017"))}," Web開發中會話跟蹤 "),n("div",{class:"leftNavText",onClick:c[17]||(c[17]=p=>t("web018"))}," CDN多個域名存網站資源 ")])])]),n("div",yr,[n("div",Cr,[n("div",xr,[Lr,n("p",null,[k(l,{class:"cor36"},{default:S(()=>[fa("因為: ")]),_:1}),jr]),Vr])])])]),n("div",null,[W(k(B,{name:"fade",tag:"div"},{default:S(()=>[n("div",{onClick:d,class:"toTop"},Or)]),_:1},512),[[U,s.value]]),W(k(B,{name:"fade",tag:"div"},{default:S(()=>[n("div",{onClick:v,class:"toBot"},$r)]),_:1},512),[[U,s.value]])])],64)}}},Mr=pa(Er,[["__scopeId","data-v-e64db40c"]]);const mn=a=>(wa("data-v-b842c602"),a=a(),ma(),a),Ar={class:"leftNav"},Fr={class:"leftNavContainer"},Ir={class:"leftNavLayout"},Rr=K('<div class="Main" data-v-b842c602><div class="mainContainer" data-v-b842c602><h1 id="html001" class="articleCardTitle cor36" data-v-b842c602> [ Html ] ≫ 塊級元素和行內元素的差別? </h1><h3 data-v-b842c602>塊元素有哪些?</h3><p data-v-b842c602> ＜div&gt; . ＜p&gt; . ＜h1&gt; . ＜ul&gt; . ＜table&gt; 獨佔一行, 頁面中垂直排列, 可以設置寬高 和 內外邊距可控 </p><br data-v-b842c602><h3 data-v-b842c602>行內元素有哪些?</h3><p data-v-b842c602> ＜span&gt; . ＜a&gt; . ＜img&gt; . ＜input&gt; 默認同行排列, 寬高由內容決定, 不能設置寬高 </p><br data-v-b842c602><h3 data-v-b842c602>行內塊元素特點?</h3><p data-v-b842c602>display:inline-block 不獨佔一行, 可以設置寬高</p><br data-v-b842c602><p data-v-b842c602>空元素: 指沒有內容或結束標籤的HTML元素。</p><p data-v-b842c602>＜br&gt; . ＜hr&gt; . ＜img&gt; . ＜input&gt; . ＜link&gt; . ＜meta&gt;</p><br data-v-b842c602><br data-v-b842c602><p data-v-b842c602>行內元素如何轉塊元素?</p><p data-v-b842c602>css display inline block</p><br data-v-b842c602><br data-v-b842c602><h2 class="articleCardTitle cor36" data-v-b842c602> 頁面導入樣式,使用@import和link差異? </h2><p data-v-b842c602> link支持早於import, 兼容性link比import好, 先加載的是link標籤, 後加載@import </p><br data-v-b842c602><br data-v-b842c602><h2 class="articleCardTitle" data-v-b842c602>src 和 href 差別?</h2><p data-v-b842c602>相同點:</p><p class="pFou" data-v-b842c602>都可以加載外部文件</p><br data-v-b842c602><br data-v-b842c602><h3 data-v-b842c602>差別:</h3><p class="pFou" data-v-b842c602> herf 用在 link , a ; 而 src 用在 img , style , script </p><br data-v-b842c602><h3 class="pFou" data-v-b842c602> 瀏覽器遇到 href 會並行下載資源, 且不會停止對當前文檔的處理。 </h3><br data-v-b842c602><h3 class="pFou" data-v-b842c602> 瀏覽器遇到 src 會暫停其他資源的下載和處理, 直到該資源加載 或 執行完畢。 </h3><br data-v-b842c602><br data-v-b842c602><h1 class="articleCardTitle cor36" data-v-b842c602> ＜img&gt; 元素的 title 屬性和 alt 屬性有甚麼不同? </h1><p data-v-b842c602> alt 屬性是必需的，它提供了對於圖像的描述。當圖像無法加載時， alt 屬性的值會顯示在圖像的位置，也可供螢幕閱讀器讀取圖像內容。 </p><br data-v-b842c602><p data-v-b842c602> title 屬性提供了對圖像的附加說明。當滑鼠懸停在圖像上時，會顯示 title 屬性的值作為工具提示。 </p><br data-v-b842c602><br data-v-b842c602><h1 id="html002" class="articleCardTitle cor36" data-v-b842c602> [ Html ] ≫ html5有哪些新特性 </h1><p data-v-b842c602>1. 語意化標籤: header footer nav aside article section</p><p data-v-b842c602>2. 影片 和 音源 支持: audio video 標籤</p><p data-v-b842c602> 3. 畫布 canvas 元素允許通過JavaScript動態繪制圖形、動畫和圖像, 失量圖 svg </p><p data-v-b842c602>4. 本地儲存 localStorage , seesionStorage</p><p data-v-b842c602> 5. 語意化表單 ，如＜input type=&quot;email&quot;&gt;、＜input type=&quot;url&quot;&gt;、＜input type=&quot;date&quot;&gt;等，使表單的輸入和驗證更加簡化和語義化。 </p><p data-v-b842c602>6. web worker</p><br data-v-b842c602><br data-v-b842c602><h1 class="articleCardTitle cor36" data-v-b842c602>語義化的理解?</h1><p data-v-b842c602>語意化是根據內容的結構 , 選擇合適的標籤</p><br data-v-b842c602><p data-v-b842c602>用正確的標籤做正確的事</p><br data-v-b842c602><p data-v-b842c602>讓頁面結構更加清晰, 更容易去維護開發</p><br data-v-b842c602><p data-v-b842c602>更容易SEO搜尋引擎優化</p><br data-v-b842c602><br data-v-b842c602><h1 id="html003" class="articleCardTitle cor36" data-v-b842c602> [ Html ] ≫ 那些操作可以提升SEO? </h1><p data-v-b842c602>可以在header裡面的meta這一章節加上description網頁的描述</p><p data-v-b842c602>再來可以加上keyword網頁關鍵字</p><p data-v-b842c602>h1標籤要寫好</p><p data-v-b842c602> 每個頁面的標籤要寫的符合聯結的東西, 比如你跳轉到一個頁面叫A, 你跳轉的鏈結的文字必須符合那個頁面的內容, </p><br data-v-b842c602><br data-v-b842c602><h2 class="articleCardTitle cor36" data-v-b842c602>canvas能幹嘛?</h2><p data-v-b842c602>畫圖的 畫2D為主</p><br data-v-b842c602><br data-v-b842c602><h2 class="articleCardTitle cor36" data-v-b842c602>canvas它畫的是偽圖還是失量圖?</h2><p data-v-b842c602>位圖(有像素操作), SVG才是失量圖</p><br data-v-b842c602><br data-v-b842c602><h2 class="articleCardTitle cor36" data-v-b842c602>canvas支持鼠標事件嗎?</h2><p data-v-b842c602>不支持</p><br data-v-b842c602><br data-v-b842c602><h2 class="articleCardTitle cor36" data-v-b842c602>canvas和svg區別?</h2><p data-v-b842c602>1.一個是位圖一個是失量圖</p><p data-v-b842c602>2.一個是用畫筆一個用標籤,畫筆直接畫,標籤進行累加</p><p data-v-b842c602>3.SVG可以進行類似CSS樣式,canvas只能全靠自己畫不能用css</p><br data-v-b842c602><br data-v-b842c602><h2 class="articleCardTitle cor36" data-v-b842c602>canvas 要用的話怎麼獲取API?</h2><p data-v-b842c602>1.獲取canvas dom元素</p><p data-v-b842c602>2.用dom方法,一開始可以用getContext設2D或3D,</p><p data-v-b842c602>3.設好後可以用繪畫API, fillStyle之類的</p><br data-v-b842c602><br data-v-b842c602><h2 class="articleCardTitle cor36" data-v-b842c602>失量圖是什麼?</h2><p data-v-b842c602> 失量圖是不管放大多少倍, 都沒有鋸齒的一種圖形, 因為它保存的不是色彩值, 而是曲線的座標 </p><br data-v-b842c602><br data-v-b842c602><h2 class="articleCardTitle cor36" data-v-b842c602>位圖是什麼?</h2><p data-v-b842c602>每個像素用RGB來表示</p><br data-v-b842c602><br data-v-b842c602><h2 class="articleCardTitle cor36" data-v-b842c602>svg標籤可以任意嵌套嗎?</h2><p data-v-b842c602>不可以, 一個svg裡面有單獨的p,g,路徑之類的</p><p data-v-b842c602>g可以分組式嵌套</p><br data-v-b842c602><br data-v-b842c602><h2 class="articleCardTitle cor36" data-v-b842c602>svg標籤和DOM標籤的區別?</h2><p data-v-b842c602>svg不可以嵌套,除了g, DOM大部分可以任意嵌套</p><br data-v-b842c602><br data-v-b842c602><h2 class="articleCardTitle cor36" data-v-b842c602> 如果繪畫的量很大,一般用svg還是canvas? </h2><p data-v-b842c602> canvas, svg相當於是一種DOM元素, 操作有性能問題, 小量圖再用svg更方便一點 </p><br data-v-b842c602><br data-v-b842c602><h2 class="articleCardTitle" data-v-b842c602>3. canvas 的常用 api 有哪些</h2><div data-v-b842c602><a class="comment svgs" href="https://developer.mozilla.org/zh-TW/docs/Web/API/Canvas_API" data-v-b842c602>canvas @MDN</a></div><p data-v-b842c602>getContext: 返回一個指定 canvas 的繪畫環境對象</p><p data-v-b842c602>beginPath: 開始繪製</p><p data-v-b842c602>moveTo: 移動畫筆位置</p><p data-v-b842c602>lineTo: 用來繪畫線段</p><p data-v-b842c602>stroke: 用來實施繪製的操作</p><p data-v-b842c602>lineStyle: 設置線段的樣式</p><p data-v-b842c602>closePath: 結束繪製</p><br data-v-b842c602><br data-v-b842c602><h2 class="articleCardTitle cor36" data-v-b842c602>HTML5 和 H5的區別?</h2><p data-v-b842c602>H5是手機端顯示的頁面</p><p data-v-b842c602> HTML5是前端標準化技術的平台, 它提供很多強大功能, 比如再頁面上顯示視屏video標籤, 音屏audio標籤, 網頁中存儲數據 local sessionStorage, 畫2D.3D圖形canvas, 音屏解析, 操作文件, 所有新推出的網頁API都屬於HTML5範圍, 甚至CSS3都屬於HTML5的一部分 </p><br data-v-b842c602><br data-v-b842c602><h1 id="html004" class="articleCardTitle cor36" data-v-b842c602> [ Html ] ≫ Doctype作用?嚴格模式和混雜模式如何區分?他們有何意義? </h1><p data-v-b842c602> ＜!Doctype&gt;（文件類型聲明）位於文檔中最前面，在＜html&gt;標籤之前。它告訴瀏覽器的解析器用哪個HTML版本的規範來解析網頁。 </p><br data-v-b842c602><p data-v-b842c602>標準模式：</p><p data-v-b842c602> 瀏覽器 使用 W3C 的標準 解析渲染 網頁，瀏覽器 以 其 支持的最高標準 呈現頁面。 </p><br data-v-b842c602><p data-v-b842c602>怪異模式：</p><p data-v-b842c602> 瀏覽器 用自己的 怪異模式 解析和渲染 網頁，頁面 以 一種 較 寬鬆的 向後兼容的 方式 顯示。 </p><br data-v-b842c602><br data-v-b842c602><br data-v-b842c602><h1 class="articleCardTitle cor36" data-v-b842c602> [ Html ] ≫ HTML全局属性(global attribute)有哪些? </h1><p data-v-b842c602>1.class：為元素指定一個或多個類名，用於樣式和 JavaScript 操作。</p><p data-v-b842c602>2.id：為元素指定唯一的標識符。</p><p data-v-b842c602>3.style：用於內聯樣式，用於指定元素的樣式規則。</p><p data-v-b842c602>4.title：用於提供關於元素的額外信息。</p><p data-v-b842c602>5.lang：用於指定元素的語言。</p><p data-v-b842c602>6.data-*：用於自定義數據屬性，可以存儲與元素相關的自定義數據。</p><p data-v-b842c602>7.draggable：指定元素是否可拖動。</p><p data-v-b842c602>8.hidden：指定元素是否隱藏。</p><br data-v-b842c602><br data-v-b842c602><h1 class="articleCardTitle" data-v-b842c602> [ Html ] ≫ 如何在頁面上實現一個圓形的可點擊區域 </h1><div data-v-b842c602><a class="comment svgs" href="https://codepen.io/wayne23123/pen/jOQBdZr?editors=1010" data-v-b842c602>作品DEMO: 在頁面上實現一個圓形可點擊區域</a></div><br data-v-b842c602><br data-v-b842c602><h1 class="articleCardTitle" data-v-b842c602>怎樣處理 移動端 1px 被渲染成 2px?</h1><p data-v-b842c602> 2倍屏 =&gt; 移動設備螢幕尺寸沒有變化，但螢幕分辨率卻提高一倍 ( 同大小螢幕像素多一倍 ) </p><br data-v-b842c602><p data-v-b842c602>局部處理:</p><p data-v-b842c602>meta 標籤中的 viewport 屬性， initial-scale 設為 1</p><p data-v-b842c602>rem 照設計稿走 ， 利用 transform: scale(0.5) 縮小</p><br data-v-b842c602><p data-v-b842c602>全局處理:</p><p data-v-b842c602>meta 標籤中的 viewport 屬性， initial-scale 設為 0.5</p><p data-v-b842c602>rem 照設計稿走</p><br data-v-b842c602><br data-v-b842c602><h1 id="" class="articleCardTitle cor36" data-v-b842c602> [ Html ] ≫ div+css 布局 比 table 布局有甚麼優點? </h1><p data-v-b842c602>div+css:</p><p data-v-b842c602> 頁面加載速度更快，結構化清晰。(他一邊加載一邊呈現，至少基本網頁結構可以很快呈現) </p><p data-v-b842c602>div 布局符合 W3C 標準 =&gt; 做到了 結構 表現 行為 分離</p><p data-v-b842c602>有利 SEO</p><br data-v-b842c602><p data-v-b842c602>table:</p><p data-v-b842c602> 如果 table 嵌套層數太多，可能導致頁面一直出不來。(table 布局要等到全部 table 加載完，再呈現頁面) </p><br data-v-b842c602><br data-v-b842c602><h1 id="" class="articleCardTitle" data-v-b842c602> [ Html ] ≫ iframe（內嵌框架）有哪些缺點? </h1><p data-v-b842c602>1.iframe的載入確實會阻塞主頁面的onload事件。</p><p class="pTwo" data-v-b842c602> 當頁面中包含一個或多個iframe元素時，當iframe開始載入和渲染內容時，主頁面的onload事件將被延遲到所有的iframe載入完成後才觸發。 </p><br data-v-b842c602><p data-v-b842c602>2.搜索引擎無法解讀這種頁面，不利 SEO。</p><br data-v-b842c602><p data-v-b842c602> 3.iframe 和主頁面共享連接池，而瀏覽器對相同域的連接有限制，所以會影響頁面的併行加載 </p><br data-v-b842c602><br data-v-b842c602><p data-v-b842c602> 使用 JS 動態給 iframe 添加 src 屬性值可以避免 阻塞主頁面的onload事件 和 和主頁面共享連接池 </p><br data-v-b842c602><p data-v-b842c602>1.在主頁面的 onload 事件觸發後再用 JS 給 iframe 添加 src 屬性</p><p data-v-b842c602> 2.在主頁面加載完成後 用 JS 給 iframe 添加 src 屬性 可以減少對連接池的佔用，提高頁面並行加載能力。 </p><br data-v-b842c602><br data-v-b842c602><h1 id="" class="articleCardTitle" data-v-b842c602> [ Html ] ≫ XHTML（可擴展超文本標記語言）和HTML（超文本標記語言）區別? </h1><p data-v-b842c602>1.XHTML 元素必須正確嵌套</p><p data-v-b842c602>2.XHTML 標籤必須閉合</p><p data-v-b842c602>3.XHTML 元素必須</p><p data-v-b842c602>4.XHTML 標籤名小寫</p><p data-v-b842c602>5.XHTML 必須有根元素 -&gt; ＜html&gt;</p><br data-v-b842c602><p data-v-b842c602>語法要求：</p><p class="pTwo" data-v-b842c602> HTML語法相對寬鬆，不強制要求標籤閉合，標籤名可以使用大寫或小寫。 </p><p class="pTwo" data-v-b842c602> XHTML採用XML語法，要求所有標籤必須閉合，並且標籤名必須使用小寫。 </p><br data-v-b842c602><p data-v-b842c602>兼容性：</p><p class="pTwo" data-v-b842c602> HTML對於各大瀏覽器的兼容性相對較差，特別是對於IE瀏覽器而言。網頁開發者需要具備較高的HTML編寫技巧，否則容易出現兼容性問題。 </p><p class="pTwo" data-v-b842c602> XHTML則能夠有效處理各大瀏覽器的兼容性問題，因為XHTML的語法要求較為嚴謹。如果習慣於鬆散的HTML編寫方式，轉向XHTML可能需要一些適應的時間。XHTML結合了部分XML的強大功能和大部分HTML的簡單特性。 </p><br data-v-b842c602><br data-v-b842c602><h1 id="" class="articleCardTitle cor36" data-v-b842c602> [ Html ] ≫ ＜meta name=&quot;viewport&quot;&gt; </h1><div class="bgcVS" data-v-b842c602><div data-v-b842c602><span class="then" data-v-b842c602></span><span class="number" data-v-b842c602>meta </span><span class="function" data-v-b842c602>name</span><span class="then" data-v-b842c602>=&quot;</span><span class="src" data-v-b842c602>viewport</span><span class="then" data-v-b842c602>&quot;</span><span class="function" data-v-b842c602>content</span><span class="then" data-v-b842c602>=&quot;</span><span class="src" data-v-b842c602>width=device-width,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0,user-scalable=no</span><span class="then" data-v-b842c602>&quot; /&gt;</span></div><br data-v-b842c602><div class="comment" data-v-b842c602> // width 設置viewport寬度，可以是正整數或字符串&#39;device-width&#39; </div><br data-v-b842c602><div class="comment" data-v-b842c602>// device-width 設備寬度</div><br data-v-b842c602><div class="comment" data-v-b842c602> // height 設置viewport高度，一般設置寬度後，高度會自動解析，可以不設置 </div><br data-v-b842c602><div class="comment" data-v-b842c602> // initial-scale 默認縮放比例（初始縮放比例），為一個數字，可以帶小數 </div><br data-v-b842c602><div class="comment" data-v-b842c602> // minimum-scale 允許用戶最小縮放比例，為一個數字，可以帶小數 </div><br data-v-b842c602><div class="comment" data-v-b842c602> // maximum-scale 允許用戶最大縮放比例，為一個數字，可以帶小數 </div><br data-v-b842c602><div class="comment" data-v-b842c602>// user-scalable 是否允許手動縮放</div><br data-v-b842c602><br data-v-b842c602></div><br data-v-b842c602><br data-v-b842c602><h2 class="articleCardTitle" data-v-b842c602>4. web worker 有甚麼作用?應用場景?</h2><div data-v-b842c602><a class="comment svgs" href="https://developer.mozilla.org/zh-TW/docs/Web/API/Web_Workers_API/Using_web_workers" data-v-b842c602>web worker @MDN</a></div><p data-v-b842c602>新開一個子線程, 且子線程的操作不受線程影響</p><p data-v-b842c602>用於大數據處理 或 耗費時間長的操作</p><br data-v-b842c602><br data-v-b842c602><h1 id="" class="articleCardTitle cor36" data-v-b842c602> [ Html ] ≫ html5 的離線儲存 </h1><p data-v-b842c602> 當使用者沒有與網際網路連接時，可以正常訪問網站或應用程式；當使用者與網際網路連接時，則會更新使用者機器上的快取檔案。 </p><br data-v-b842c602><p data-v-b842c602> 工作原理：HTML5的離線儲存是建立在一個名為「.appcache」的快取機制上（並非儲存技術）。透過這個檔案中的解析清單，網站的資源可以被離線儲存。當網路處於離線狀態時，瀏覽器會使用這些已儲存的資源來顯示網頁。 </p><br data-v-b842c602><p data-v-b842c602>使用方法：</p><p class="pTwo" data-v-b842c602> 1.在網頁的標頭中加入「manifest」屬性，例如：＜html manifest=&quot;cache.manifest&quot;&gt;＜/html&gt; </p><p class="pTwo" data-v-b842c602> 2.創建一個「cache.manifest」檔案，並在其中編寫離線儲存的資源清單。 </p><p class="pTwo" data-v-b842c602> 3.在需要實現離線儲存的地方，可以使用「window.applicationCache」對離線儲存進行操作。例如，可以通過檢查「applicationCache.status」來確定快取的狀態，並根據需要更新或讀取快取的資源。 </p><br data-v-b842c602><br data-v-b842c602></div></div>',1),Hr=mn(()=>n("div",{class:"toTopButton"},[n("div",{class:"disCen"},"___"),n("div",{class:"disCen"},"▲")],-1)),Br=[Hr],Dr=mn(()=>n("div",{class:"toBotButton"},[n("div",{class:"disCen"},"▼"),n("div",{class:"disCen"},"￣")],-1)),Jr=[Dr],Wr={__name:"HtmlPage",setup(a){const s=ba(!1);window.addEventListener("scroll",function(){s.value=window.scrollY>0});function d(){window.scrollTo({top:0,left:0,behavior:"smooth"})}function v(){window.scrollTo({top:999999,left:0,behavior:"smooth"})}function t(e){window.scrollTo({top:document.getElementById(`${e}`).offsetTop,behavior:"smooth"})}return(e,c)=>(aa(),ta(G,null,[n("section",null,[n("div",Ar,[n("div",Fr,[n("div",Ir,[n("div",{onClick:c[0]||(c[0]=l=>t("html001")),class:"leftNavText"}," 塊級元素和行內元素的差別 "),n("div",{onClick:c[1]||(c[1]=l=>t("html002")),class:"leftNavText"},"html5新特性"),n("div",{onClick:c[2]||(c[2]=l=>t("html003")),class:"leftNavText"}," 那些操作可以提升SEO "),n("div",{onClick:c[3]||(c[3]=l=>t("html004")),class:"leftNavText"}," Doctype作用,嚴格模式和混雜模式 ")])])]),Rr]),n("div",null,[W(k(B,{name:"fade",tag:"div"},{default:S(()=>[n("div",{onClick:d,class:"toTop"},Br)]),_:1},512),[[U,s.value]]),W(k(B,{name:"fade",tag:"div"},{default:S(()=>[n("div",{onClick:v,class:"toBot"},Jr)]),_:1},512),[[U,s.value]])])],64))}},Ur=pa(Wr,[["__scopeId","data-v-b842c602"]]);const Kr={};function Xr(a,s){const d=qa("RouterLink"),v=qa("RouterView");return aa(),ta(G,null,[n("div",null,[n("ul",null,[n("li",null,[k(d,{to:"/css"},{default:S(()=>[fa("主文章")]),_:1})]),n("li",null,[k(d,{to:"/css/pagetwo"},{default:S(()=>[fa("練習題")]),_:1})])])]),k(v)],64)}const Yr=pa(Kr,[["render",Xr],["__scopeId","data-v-2e772d82"]]),Gr="/vue-learn-js/assets/cssbox001-91b4c462.png";const Yd=a=>(wa("data-v-ebd4f92b"),a=a(),ma(),a),Qr={class:"leftNav"},Zr={class:"leftNavContainer"},a3={class:"leftNavLayout"},s3=Yd(()=>n("br",null,null,-1)),d3={class:"Main"},t3={class:"mainContainer"},c3={class:"mainLayout"},v3=K('<br data-v-ebd4f92b><br data-v-ebd4f92b><p class="cor36" data-v-ebd4f92b>CSS3有哪些新屬性?</p><p data-v-ebd4f92b>flex transform translation animation 陰影 圓角</p><br data-v-ebd4f92b><br data-v-ebd4f92b><div id="cssOne001" class="articleCardTitle cor36" data-v-ebd4f92b> [ CSS ] ≫ CSS有幾個單位px,rem,em,vw分別是怎樣? </div><p data-v-ebd4f92b>px是一個像素 . . . 絕對單位長度</p><br data-v-ebd4f92b><br data-v-ebd4f92b><p class="pFou" data-v-ebd4f92b>像素 是 顯示器上 給我們呈現畫面的 像素</p><br data-v-ebd4f92b><p data-v-ebd4f92b>rem是 相對 根元素 (html) 字體大小進行計算的 . . . 相對單位</p><br data-v-ebd4f92b><p class="pFou" data-v-ebd4f92b>瀏覽器 默認字體大小 16px , 一般 1 rem = 16 px</p><br data-v-ebd4f92b><br data-v-ebd4f92b><p data-v-ebd4f92b>em 相對 當前元素 字體大小 來計算</p><br data-v-ebd4f92b><p class="pFou" data-v-ebd4f92b>有人說 相對於 父元素</p><br data-v-ebd4f92b><p class="pFou" data-v-ebd4f92b>因為 font-size 這屬性 可以被繼承</p><br data-v-ebd4f92b><p class="pFou" data-v-ebd4f92b>所以 父元素 字體大小 會影響 子元素 字體大小</p><br data-v-ebd4f92b><p class="pFou" data-v-ebd4f92b>子元素 如果沒有 自己的 font-size</p><br data-v-ebd4f92b><p class="pFou" data-v-ebd4f92b>那子元素的 font-size 會繼承 父元素</p><br data-v-ebd4f92b><p class="pFou" data-v-ebd4f92b>此時 1 em 就會被認為 相對於 父元素 字體大小計算</p><br data-v-ebd4f92b><br data-v-ebd4f92b><p data-v-ebd4f92b>vw相對於設備視口的寬度</p><br data-v-ebd4f92b><br data-v-ebd4f92b><p class="cor36" data-v-ebd4f92b># 像素是絕對的單位嗎?</p><p data-v-ebd4f92b>像素是由操作系統和硬件決定的</p><br data-v-ebd4f92b><p data-v-ebd4f92b>一般來說硬件的象素是改變不了的</p><br data-v-ebd4f92b><p data-v-ebd4f92b>但是操作系統可以說你這個硬件我 2 個象素做 1 個象素用</p><br data-v-ebd4f92b><br data-v-ebd4f92b><p class="cor36" data-v-ebd4f92b># vw的v</p><p data-v-ebd4f92b>viewport視口, 眼睛所能瀏覽到的區域</p><br data-v-ebd4f92b><p class="cor36" data-v-ebd4f92b># 視口是窗口嗎?</p><p data-v-ebd4f92b>不是,如果窗口裡面有一個內嵌窗口, 這個viewport會變成指內嵌窗口</p><br data-v-ebd4f92b><br data-v-ebd4f92b><div id="cssOne014" class="articleCardTitle cor36" data-v-ebd4f92b> [ CSS ] ≫ link &amp; @import </div><p data-v-ebd4f92b>都是引入外部 CSS 的方式</p><br data-v-ebd4f92b><br data-v-ebd4f92b><p data-v-ebd4f92b>1.</p><p data-v-ebd4f92b>link 是 HTML 提供的標籤</p><br data-v-ebd4f92b><p data-v-ebd4f92b> @import 是 CSS 提供語法 /p&gt; <br data-v-ebd4f92b><br data-v-ebd4f92b></p><p data-v-ebd4f92b>2.加載順</p><p data-v-ebd4f92b>加載頁面時 link 標籤引入 CSS 可同時加載</p><br data-v-ebd4f92b><p data-v-ebd4f92b>@import 只會在頁面加載完畢後 才被加載</p><br data-v-ebd4f92b><br data-v-ebd4f92b><p data-v-ebd4f92b>3.</p><p data-v-ebd4f92b>link 支持使用 JS 控制 DOM 去改變樣式 (插入link標籤)</p><br data-v-ebd4f92b><p data-v-ebd4f92b>@import 不支持</p><br data-v-ebd4f92b><br data-v-ebd4f92b><div id="cssOne002" class="articleCardTitle cor36" data-v-ebd4f92b> [ CSS ] ≫ position 的值和作用? </div><p data-v-ebd4f92b>static . relative . absolute . fixed</p><br data-v-ebd4f92b><p class="cor36" data-v-ebd4f92b>static</p><p class="pTwo" data-v-ebd4f92b> 它是文檔流布局, 有行內元素和塊元素, 塊元素有一行接一行這種, 行內元素就是橫著直到一行待不下就到第二行 </p><br data-v-ebd4f92b><p class="cor36" data-v-ebd4f92b>relative</p><p class="pTwo" data-v-ebd4f92b>元素仍在文檔流, 占用正常文檔流位置</p><p class="pTwo" data-v-ebd4f92b>relative 相對於 自身 進行定位</p><br data-v-ebd4f92b><p class="cor36" data-v-ebd4f92b>absolute</p><p class="pTwo" data-v-ebd4f92b>將元素偏離文檔流, 不占用正常文檔流位置</p><br data-v-ebd4f92b><p class="pTwo" data-v-ebd4f92b> 若沒有指定基準元素的話，預設以 body 元素(整個視窗)為基準 </p><p class="pTwo" data-v-ebd4f92b> absolute 元素的父元素 有 相對 或 絕對 定位 的元素的話 </p><p class="pTwo" data-v-ebd4f92b> absolute 元素相對於父元素 的 padding 左上角進行定位 </p><br data-v-ebd4f92b><p class="cor36" data-v-ebd4f92b>fixed</p><p class="pTwo" data-v-ebd4f92b>將元素偏離文檔流, 不占用正常文檔流位置</p><p class="pTwo" data-v-ebd4f92b>相對於 body 定位</p><br data-v-ebd4f92b><br data-v-ebd4f92b><p class="cor36" data-v-ebd4f92b>sticky</p><p class="pTwo" data-v-ebd4f92b> 和 fixed 很像，差在 sticky 會佔住原本版面的空間，和 sticky 的預設 width 是 100 % (滿版) </p><br data-v-ebd4f92b><p class="pTw" data-v-ebd4f92b> 被 fixed 的區塊會被固定在指定位置，並且覆蓋網頁中內容 </p><p class="pTw" data-v-ebd4f92b> 而 sticky 會讓原本網頁的內容推到下面，不會讓 sticky 擋住原有的文字。 </p><br data-v-ebd4f92b><br data-v-ebd4f92b><div id="cssOne012" class="articleCardTitle cor36" data-v-ebd4f92b> [ CSS ] ≫ display的值? </div><h3 data-v-ebd4f92b>none . 隱藏元素</h3><br data-v-ebd4f92b><br data-v-ebd4f92b><h3 data-v-ebd4f92b>block . 把某元素 轉成 塊元素</h3><br data-v-ebd4f92b><br data-v-ebd4f92b><h3 data-v-ebd4f92b>inline . 把某元素 轉成 內聯元素</h3><br data-v-ebd4f92b><br data-v-ebd4f92b><h3 data-v-ebd4f92b>inline-block . 把某元素 轉成 行內塊元素</h3><br data-v-ebd4f92b><br data-v-ebd4f92b><h3 data-v-ebd4f92b>flex . 彈性盒子</h3><br data-v-ebd4f92b><br data-v-ebd4f92b><h3 data-v-ebd4f92b></h3><br data-v-ebd4f92b><br data-v-ebd4f92b><h3 data-v-ebd4f92b>塊元素</h3><p data-v-ebd4f92b> ＜div&gt; . ＜p&gt; . ＜h1&gt; . ＜ul&gt; . ＜table&gt; 獨佔一行, 頁面中垂直排列, 可以設置寬高 和 內外邊距可控 </p><br data-v-ebd4f92b><h3 data-v-ebd4f92b>行內元素</h3><p data-v-ebd4f92b> ＜span&gt; . ＜a&gt; . ＜img&gt; . ＜input&gt; 默認同行排列, 寬高由內容決定, 不能設置寬高 </p><br data-v-ebd4f92b><h3 data-v-ebd4f92b>行內塊元素</h3><p data-v-ebd4f92b>display:inline-block 不獨佔一行, 可以設置寬高</p><br data-v-ebd4f92b><div id="cssOne003" class="articleCardTitle cor36" data-v-ebd4f92b> [ CSS ] ≫ 盒模型?區別? </div><p data-v-ebd4f92b>分為content-box和border-box</p><p data-v-ebd4f92b>區別在於width指定寬度不同</p><p data-v-ebd4f92b>content-box的寬度是內容的寬度</p><p data-v-ebd4f92b>border-box的寬度是內容寬度加上padding加上border</p><br data-v-ebd4f92b><br data-v-ebd4f92b><div class="disCen" data-v-ebd4f92b><img style="max-width:500px;" src="'+Gr+'" alt="" data-v-ebd4f92b></div><br data-v-ebd4f92b><br data-v-ebd4f92b><p class="cor36" data-v-ebd4f92b>#　一般用哪種?為什麼?</p><p data-v-ebd4f92b>border-box</p><p data-v-ebd4f92b> 因為你改變大小時,那個盒子總大小不會變 ; 子元素會繼承父元素寬度 content-box 寬度比你預想的要寬 用borderbox比較方便不用做額外計算 </p><br data-v-ebd4f92b><br data-v-ebd4f92b><p class="cor36" data-v-ebd4f92b> # *{box-sizing:border-box}偽元素會被影響到嗎?為什麼? </p><p data-v-ebd4f92b>不會, 因為*就選不到偽元素, *:before *:after</p><br data-v-ebd4f92b><br data-v-ebd4f92b><div id="cssOne004" class="articleCardTitle cor36" data-v-ebd4f92b> [ CSS ] ≫ BFC是什麼 </div><p data-v-ebd4f92b>塊級格式化上下文</p><p data-v-ebd4f92b>當前元素把他所有子元素包起來,不受外部影響</p><p data-v-ebd4f92b> 在一個BFC中，塊狀盒子與行盒（行盒由一行中所有的內聯元素所組成）都會垂直地沿著其父元素的邊框排列。 </p><br data-v-ebd4f92b><br data-v-ebd4f92b><p class="cor36" data-v-ebd4f92b># 為什麼要觸發BFC?</p><p data-v-ebd4f92b>阻止margin重叠 . 解决高度塌陷问题 . 消除浮動</p><br data-v-ebd4f92b><br data-v-ebd4f92b><p class="cor36" data-v-ebd4f92b># BFC怎麼觸發?</p><p data-v-ebd4f92b>overflow 的值非 visable . . . 一般用 overflow hidden</p><p data-v-ebd4f92b>display 的值為 inline-block</p><p data-v-ebd4f92b>position 的值為 absolute 或 fixed</p><p data-v-ebd4f92b>float 的值非 none</p><br data-v-ebd4f92b><br data-v-ebd4f92b><p class="cor36" data-v-ebd4f92b># margin外邊距重疊? or 外邊距合併?</p><p data-v-ebd4f92b> 塊級元素的上外邊距和下外邊距有時會合併（或折疊）為一個外邊距，其大小取其中的最大者。 </p><br data-v-ebd4f92b><p data-v-ebd4f92b> 假設一個div元素在上面，另一個div元素在下面，下面外邊距為20px，上面外邊距為30px，他們之間的邊距會取最大值30px。 </p><br data-v-ebd4f92b><br data-v-ebd4f92b><p class="cor36" data-v-ebd4f92b># 高度塌陷問題?</p><p data-v-ebd4f92b> 父元素没有設定大小（或不設定高度），子元素浮動，子元素會跳出父元素的邊界（脫離文檔流）當父元素的高度為auto時，父元素的高度直接為0。 </p><br data-v-ebd4f92b><p class="vor36" data-v-ebd4f92b>解決:</p><p class="pFou" data-v-ebd4f92b>1.父元素設定固定高度。</p><p class="pFou" data-v-ebd4f92b>2.父元素設定overflow:hidden屬性。</p><p class="pFou" data-v-ebd4f92b>3.在父元素末尾添加一個空元素並設定為清除浮動。</p><p class="pFou" data-v-ebd4f92b>4.使用after偽元素來清除浮動。</p><br data-v-ebd4f92b><br data-v-ebd4f92b><p class="cor36" data-v-ebd4f92b># 清除浮動有哪些方式?</p><p data-v-ebd4f92b>1.觸發BFC</p><p data-v-ebd4f92b> 2.後面加一個after偽類, content設為空, display設為block, 然後加一個clear:both, 現在我一般用FLEX沒怎麼用浮動 </p><br data-v-ebd4f92b><br data-v-ebd4f92b><div id="cssOne005" class="articleCardTitle cor36" data-v-ebd4f92b> [ CSS ] ≫ CSS選擇器優先級和權重? </div><span data-v-ebd4f92b><a href="https://ithelp.ithome.com.tw/articles/10243699" data-v-ebd4f92b>資料來源: 選擇器表 @iT邦幫忙 Eudora</a></span><div data-v-ebd4f92b></div><br data-v-ebd4f92b><p data-v-ebd4f92b> !import &gt; 內聯樣式 &gt; id 選擇器 &gt; 類選擇器 &gt; 標籤選擇器 &gt; 通配符選擇器 </p><br data-v-ebd4f92b><p class="cor36" data-v-ebd4f92b>CSS 權重計算:</p><p data-v-ebd4f92b>1.第一等: 內聯樣式 權重 1000</p><br data-v-ebd4f92b><p data-v-ebd4f92b>2.第二等: ID選擇器 權重 100</p><br data-v-ebd4f92b><p data-v-ebd4f92b>3.第三等: 類,屬性,偽類選擇器 權重 10</p><br data-v-ebd4f92b><p data-v-ebd4f92b>4.第四等: 標籤選擇器,偽元素選擇器 權重 1</p><br data-v-ebd4f92b><p data-v-ebd4f92b>5.第五等: 通配符選擇器 權重 0</p><br data-v-ebd4f92b><br data-v-ebd4f92b><p class="cor36" data-v-ebd4f92b># 選擇器在解析在匹配的時候從左邊開始還是右邊開始?</p><p class="cor36" data-v-ebd4f92b> or # 假設我的選擇器是 a b c,目標是找到所有c,那瀏覽器是先去找到所有的c還是先找所有的a? </p><br data-v-ebd4f92b><p data-v-ebd4f92b>瀏覽器會從右到左解析CSS選擇器</p><p data-v-ebd4f92b>∕span -&gt; ∕div -&gt; html</p><br data-v-ebd4f92b><p data-v-ebd4f92b>從c找到a,右往左找</p><br data-v-ebd4f92b><br data-v-ebd4f92b>',211),n3=Yd(()=>n("span",null,"性能問題,假設從左往右會先找到很多a,可能99%沒用,沒必要找",-1)),e3=K('<br data-v-ebd4f92b><br data-v-ebd4f92b><p class="cor36" data-v-ebd4f92b>想選擇一個標籤的下一子層?</p><p data-v-ebd4f92b>標籤 右鍵頭 再加一個標籤</p><br data-v-ebd4f92b><div class="dis spa" data-v-ebd4f92b><div data-v-ebd4f92b>elA &gt; elB</div><div data-v-ebd4f92b>A 的下一子層 的所有 B (不含子子層)</div><div data-v-ebd4f92b>article &gt; h2</div></div><br data-v-ebd4f92b><br data-v-ebd4f92b><p class="cor36" data-v-ebd4f92b> # CSS選擇器,我想選擇一個標籤的下一個標籤用什麼選擇器? </p><p data-v-ebd4f92b>加號選擇器</p><br data-v-ebd4f92b><div class="dis spa" data-v-ebd4f92b><div data-v-ebd4f92b>elA + elB</div><div data-v-ebd4f92b>緊接在 A 後面的 B (同輩)</div><div data-v-ebd4f92b>h1 + p</div></div><br data-v-ebd4f92b><br data-v-ebd4f92b><p class="cor36" data-v-ebd4f92b># 如果要找到所有name,x開頭的標籤,能找到嗎?</p><p data-v-ebd4f92b>屬性選擇器 加 上間號 等於</p><br data-v-ebd4f92b><div class="dis spa" data-v-ebd4f92b><div data-v-ebd4f92b>X[ attr ^= val ]</div><div data-v-ebd4f92b>有___屬性且屬性值&quot;開頭&quot;為___的 X</div><div data-v-ebd4f92b>a[src^=&quot;https&quot;]</div></div><br data-v-ebd4f92b><br data-v-ebd4f92b><p class="cor36" data-v-ebd4f92b> # jQuery選擇器怎麼實現的?IE可以.a或.b但不支持.a .b你怎麼實現查找$(&quot;.a .b&quot;)查找過程? </p><p data-v-ebd4f92b> 先把選擇器做正則解析, 發現它的層級關係, 遍歷所有元素, 看它是否滿足這個關係 </p><br data-v-ebd4f92b><br data-v-ebd4f92b><div id="cssOne006" class="articleCardTitle cor36" data-v-ebd4f92b> [ CSS ] ≫ 水平垂直置中? </div><div data-v-ebd4f92b>(margin 0 auto 前提是 child 要設寬)</div><div data-v-ebd4f92b>(margin auto前提是當前元素是絕對定位)</div><div data-v-ebd4f92b> (translate前提是先做了絕對定位, 距離負元素 let 50% top50% 再translate(-50%, -50%)) </div><br data-v-ebd4f92b><div data-v-ebd4f92b>1.知不知寬高 . 水平or垂直</div><br data-v-ebd4f92b><h3 class="cor36" data-v-ebd4f92b>塊級元素居中布局</h3><p class="cor36" data-v-ebd4f92b>水平居中</p><p class="pFou" data-v-ebd4f92b>知道寬：margin: 0 auto;</p><p class="pFou" data-v-ebd4f92b>不知寬</p><br data-v-ebd4f92b><p class="cor36" data-v-ebd4f92b>垂直居中</p><p class="pFou" data-v-ebd4f92b> position: absolute 設置 left、top、margin-left、margin-to (定高) </p><p class="pFou" data-v-ebd4f92b>position: fixed 設置 margin: auto (定高)</p><p class="pFou" data-v-ebd4f92b>display: table-cell</p><p class="pFou" data-v-ebd4f92b>transform: translate(x, y)</p><p class="pFou" data-v-ebd4f92b>flex (不定高，不定寬) ie11 ↑</p><p class="pFou" data-v-ebd4f92b>grid (不定高，不定寬)，兼容性相對比較差 ie10 ↑</p><br data-v-ebd4f92b><h3 class="cor36" data-v-ebd4f92b>內聯元素居中布局</h3><p class="cor36" data-v-ebd4f92b>水平居中</p><p class="pFou" data-v-ebd4f92b>行內元素父元素下可設置：text-align: center</p><p class="pFou" data-v-ebd4f92b> flex布局設置父元素：display: flex; justify-content: center </p><br data-v-ebd4f92b><p class="cor36" data-v-ebd4f92b>垂直居中</p><p class="pFou" data-v-ebd4f92b>單行文本父元素確認高度：height === line-height</p><br data-v-ebd4f92b><br data-v-ebd4f92b><br data-v-ebd4f92b><br data-v-ebd4f92b><h3 class="cor36" data-v-ebd4f92b>塊級元素居中布局</h3><br data-v-ebd4f92b><p data-v-ebd4f92b>flex 彈性盒子布局 (主軸垂直 , 交叉軸水平)</p><p data-v-ebd4f92b> justify-content: center會使flex容器下的所有flex項目全部水平居中。 </p><p data-v-ebd4f92b>缺點? _ IE8以下不能用</p><br data-v-ebd4f92b><div class="bgcVS" data-v-ebd4f92b><div data-v-ebd4f92b><span class="then" data-v-ebd4f92b>＜</span> <span class="number" data-v-ebd4f92b>div </span><span class="function" data-v-ebd4f92b>class </span> <span class="then" data-v-ebd4f92b>= &quot;</span><span class="word" data-v-ebd4f92b>parent</span><span class="then" data-v-ebd4f92b>&quot;</span> <span class="then" data-v-ebd4f92b>&gt;</span></div><div class="pTwo" data-v-ebd4f92b><span class="then" data-v-ebd4f92b>＜</span> <span class="number" data-v-ebd4f92b>div </span><span class="function" data-v-ebd4f92b>class </span> <span class="then" data-v-ebd4f92b>=&quot;</span><span class="word" data-v-ebd4f92b>child</span> <span class="then" data-v-ebd4f92b>&quot;&gt;＜/ </span><span class="number" data-v-ebd4f92b>div </span> <span class="then" data-v-ebd4f92b>&gt;</span></div><div data-v-ebd4f92b><span class="then" data-v-ebd4f92b>＜ </span> <span class="number" data-v-ebd4f92b>div </span><span class="then" data-v-ebd4f92b>&gt;</span></div><div class="brackets" data-v-ebd4f92b>.parent {</div><div class="brackets pTwo" data-v-ebd4f92b>display: flex;</div><div class="brackets pTwo" data-v-ebd4f92b>justify-content: center;</div><div class="brackets pTwo" data-v-ebd4f92b>align-items: center;</div><div class="brackets" data-v-ebd4f92b>}</div></div><br data-v-ebd4f92b><br data-v-ebd4f92b><p data-v-ebd4f92b>flex 格線佈局布局</p><br data-v-ebd4f92b><div class="bgcVS" data-v-ebd4f92b><div data-v-ebd4f92b><span class="then" data-v-ebd4f92b>＜</span> <span class="number" data-v-ebd4f92b>div </span><span class="function" data-v-ebd4f92b>class </span> <span class="then" data-v-ebd4f92b>= &quot;</span><span class="word" data-v-ebd4f92b>parent</span><span class="then" data-v-ebd4f92b>&quot;</span> <span class="then" data-v-ebd4f92b>&gt;</span></div><div class="pTwo" data-v-ebd4f92b><span class="then" data-v-ebd4f92b>＜</span> <span class="number" data-v-ebd4f92b>div </span><span class="function" data-v-ebd4f92b>class </span> <span class="then" data-v-ebd4f92b>=&quot;</span><span class="word" data-v-ebd4f92b>child</span> <span class="then" data-v-ebd4f92b>&quot;&gt;＜/ </span><span class="number" data-v-ebd4f92b>div </span> <span class="then" data-v-ebd4f92b>&gt;</span></div><div data-v-ebd4f92b><span class="then" data-v-ebd4f92b>＜ </span> <span class="number" data-v-ebd4f92b>div </span><span class="then" data-v-ebd4f92b>&gt;</span></div><div class="brackets" data-v-ebd4f92b>.parent {</div><div class="brackets pTwo" data-v-ebd4f92b>display: grid;</div><div class="brackets" data-v-ebd4f92b>}</div><div class="brackets" data-v-ebd4f92b>.child {</div><div class="brackets pTwo" data-v-ebd4f92b>justify-self: center;</div><div class="brackets pTwo" data-v-ebd4f92b>align-self: center;</div><div class="brackets" data-v-ebd4f92b>}</div></div><br data-v-ebd4f92b><br data-v-ebd4f92b><br data-v-ebd4f92b><p data-v-ebd4f92b>absolute + transform translate ( -50% , -50% )</p><p data-v-ebd4f92b>絕對定位，這個方法不需要子元素固定寬高</p><br data-v-ebd4f92b><p data-v-ebd4f92b> : 可以用transform實現, 給他子絕對父相對定位, 給子top百分之50 left百分之50, 然後transform translate負的百分之50 實現垂直居中, </p><br data-v-ebd4f92b><p class="cor36" data-v-ebd4f92b>你說的絕對定位方法有沒有副作用?</p><p data-v-ebd4f92b>(fix定位會被transform屏蔽掉)</p><p data-v-ebd4f92b> 它的位置的中點會相對於原來的位置有偏移,它以前相對於窗口定位,它現在相對於父元素定位 </p><br data-v-ebd4f92b><div class="bgcVS" data-v-ebd4f92b><div data-v-ebd4f92b><span class="then" data-v-ebd4f92b>＜</span> <span class="number" data-v-ebd4f92b>div </span><span class="function" data-v-ebd4f92b>class </span> <span class="then" data-v-ebd4f92b>= &quot;</span><span class="word" data-v-ebd4f92b>parent</span><span class="then" data-v-ebd4f92b>&quot;</span> <span class="then" data-v-ebd4f92b>&gt;</span></div><div class="pTwo" data-v-ebd4f92b><span class="then" data-v-ebd4f92b>＜</span> <span class="number" data-v-ebd4f92b>div </span><span class="function" data-v-ebd4f92b>class </span> <span class="then" data-v-ebd4f92b>=&quot;</span><span class="word" data-v-ebd4f92b>child</span> <span class="then" data-v-ebd4f92b>&quot;&gt;＜/ </span><span class="number" data-v-ebd4f92b>div </span> <span class="then" data-v-ebd4f92b>&gt;</span></div><div data-v-ebd4f92b><span class="then" data-v-ebd4f92b>＜ </span> <span class="number" data-v-ebd4f92b>div </span><span class="then" data-v-ebd4f92b>&gt;</span></div><div class="brackets" data-v-ebd4f92b>.parent {</div><div class="brackets pTwo" data-v-ebd4f92b>position: relative;</div><div class="brackets" data-v-ebd4f92b>}</div><div class="brackets" data-v-ebd4f92b>.child {</div><div class="brackets pTwo" data-v-ebd4f92b>position: absolute;</div><div class="brackets pTwo" data-v-ebd4f92b>top: 50%;</div><div class="brackets pTwo" data-v-ebd4f92b>left: 50%;</div><div class="brackets pTwo" data-v-ebd4f92b>transform: translate(-50%, -50%);</div><div class="brackets" data-v-ebd4f92b>}</div></div><br data-v-ebd4f92b><br data-v-ebd4f92b><p data-v-ebd4f92b>margin: 0 auto . . . <span class="cor36" data-v-ebd4f92b>(知道子元素寬)</span></p><p data-v-ebd4f92b>只有 <span class="cor36" data-v-ebd4f92b>非絕對定位 </span> 的元素才有效</p><p data-v-ebd4f92b>絕對定位指: absolute . fixed . sticky</p><p class="comment" data-v-ebd4f92b>img/input/button等自帶寬，可不設</p><br data-v-ebd4f92b><p data-v-ebd4f92b>: 如果知道它的寬度的話, 可用margin 0 auto來實現</p><br data-v-ebd4f92b><div class="bgcVS" data-v-ebd4f92b><div data-v-ebd4f92b><span class="then" data-v-ebd4f92b>＜</span> <span class="number" data-v-ebd4f92b>div </span><span class="function" data-v-ebd4f92b>class </span> <span class="then" data-v-ebd4f92b>= &quot;</span><span class="word" data-v-ebd4f92b>parent</span><span class="then" data-v-ebd4f92b>&quot;</span> <span class="then" data-v-ebd4f92b>&gt;</span></div><div class="pTwo" data-v-ebd4f92b><span class="then" data-v-ebd4f92b>＜</span> <span class="number" data-v-ebd4f92b>div </span><span class="function" data-v-ebd4f92b>class </span> <span class="then" data-v-ebd4f92b>=&quot;</span><span class="word" data-v-ebd4f92b>child</span> <span class="then" data-v-ebd4f92b>&quot;&gt;＜/ </span><span class="number" data-v-ebd4f92b>div </span> <span class="then" data-v-ebd4f92b>&gt;</span></div><div data-v-ebd4f92b><span class="then" data-v-ebd4f92b>＜ </span> <span class="number" data-v-ebd4f92b>div </span><span class="then" data-v-ebd4f92b>&gt;</span></div><div class="brackets" data-v-ebd4f92b>.child {</div><div class="comment pTwo" data-v-ebd4f92b>/* 必須設定 box 的寬 */</div><div class="brackets pTwo" data-v-ebd4f92b>width: 100px;</div><div class="brackets pTwo" data-v-ebd4f92b>margin: 0 auto;</div><div class="brackets" data-v-ebd4f92b>}</div></div><br data-v-ebd4f92b><br data-v-ebd4f92b><p class="cor36" data-v-ebd4f92b># 父子高度都不確定但確實有值如何實現垂直居中?</p><br data-v-ebd4f92b><p data-v-ebd4f92b> margin: auto . . . <span class="cor36" data-v-ebd4f92b>(1.需要父元素高 2.子元素寬高 3.父相對子絕對)</span></p><p data-v-ebd4f92b>缺點: 不兼容ie</p><br data-v-ebd4f92b><p data-v-ebd4f92b>: 在子CSS屬性上加上下左右值為0 然後加上margin auto,</p><br data-v-ebd4f92b><div class="bgcVS" data-v-ebd4f92b><div data-v-ebd4f92b><span class="then" data-v-ebd4f92b>＜</span> <span class="number" data-v-ebd4f92b>div </span><span class="function" data-v-ebd4f92b>class </span> <span class="then" data-v-ebd4f92b>= &quot;</span><span class="word" data-v-ebd4f92b>parent</span><span class="then" data-v-ebd4f92b>&quot;</span> <span class="then" data-v-ebd4f92b>&gt;</span></div><div class="pTwo" data-v-ebd4f92b><span class="then" data-v-ebd4f92b>＜</span> <span class="number" data-v-ebd4f92b>div </span><span class="function" data-v-ebd4f92b>class </span> <span class="then" data-v-ebd4f92b>=&quot;</span><span class="word" data-v-ebd4f92b>child</span> <span class="then" data-v-ebd4f92b>&quot;&gt;＜/ </span><span class="number" data-v-ebd4f92b>div </span> <span class="then" data-v-ebd4f92b>&gt;</span></div><div data-v-ebd4f92b><span class="then" data-v-ebd4f92b>＜ </span> <span class="number" data-v-ebd4f92b>div </span><span class="then" data-v-ebd4f92b>&gt;</span></div><div class="brackets" data-v-ebd4f92b>.parent {</div><div class="brackets pTwo" data-v-ebd4f92b>position: relative;</div><div class="brackets pTwo" data-v-ebd4f92b>height: 300px;</div><div class="brackets" data-v-ebd4f92b>}</div><div class="brackets" data-v-ebd4f92b>.child {</div><div class="brackets pTwo" data-v-ebd4f92b>width: 100px;</div><div class="brackets pTwo" data-v-ebd4f92b>height: 100px;</div><div class="brackets pTwo" data-v-ebd4f92b>position: absolute;</div><div class="brackets pTwo" data-v-ebd4f92b>top: 0;</div><div class="brackets pTwo" data-v-ebd4f92b>left: 0;</div><div class="brackets pTwo" data-v-ebd4f92b>right: 0;</div><div class="brackets pTwo" data-v-ebd4f92b>bottom: 0;</div><div class="brackets pTwo" data-v-ebd4f92b>margin: auto;</div><div class="brackets" data-v-ebd4f92b>}</div></div><br data-v-ebd4f92b><br data-v-ebd4f92b><h3 class="cor36" data-v-ebd4f92b>內聯元素水平居中</h3><p data-v-ebd4f92b> text-align: center 可以使行內級元素和行內塊級元素在父元素中水平居中。 </p><p data-v-ebd4f92b> 父元素下的所有行級元素，包含子元素以及孫子元素，都相對於自己的父元素水平居中。 </p><br data-v-ebd4f92b><div class="bgcVS" data-v-ebd4f92b><div data-v-ebd4f92b><span class="then" data-v-ebd4f92b>＜</span> <span class="number" data-v-ebd4f92b>div </span><span class="function" data-v-ebd4f92b>class </span> <span class="then" data-v-ebd4f92b>= &quot;</span><span class="word" data-v-ebd4f92b>parent</span><span class="then" data-v-ebd4f92b>&quot;</span> <span class="then" data-v-ebd4f92b>&gt;</span></div><div class="pTwo" data-v-ebd4f92b><span class="then" data-v-ebd4f92b>＜</span> <span class="number" data-v-ebd4f92b>span </span><span class="function" data-v-ebd4f92b>class </span> <span class="then" data-v-ebd4f92b>=&quot;</span><span class="word" data-v-ebd4f92b>child</span> <span class="then" data-v-ebd4f92b>&quot;&gt;＜/ </span><span class="number" data-v-ebd4f92b>div </span> <span class="then" data-v-ebd4f92b>&gt;</span></div><div data-v-ebd4f92b><span class="then" data-v-ebd4f92b>＜ </span> <span class="number" data-v-ebd4f92b>div </span><span class="then" data-v-ebd4f92b>&gt;</span></div><div class="brackets" data-v-ebd4f92b>.parent {</div><div class="brackets pTwo" data-v-ebd4f92b>width: 300px;</div><div class="brackets pTwo" data-v-ebd4f92b>height: 300px;</div><div class="brackets pTwo" data-v-ebd4f92b>text-align: center;</div><div class="brackets" data-v-ebd4f92b>}</div><div class="brackets" data-v-ebd4f92b>.child {</div><div class="brackets pTwo" data-v-ebd4f92b>width: 100px;</div><div class="brackets pTwo" data-v-ebd4f92b>height: 100px;</div><div class="brackets" data-v-ebd4f92b>}</div></div><br data-v-ebd4f92b><br data-v-ebd4f92b><h3 class="cor36" data-v-ebd4f92b>內聯元素垂直居中</h3><p data-v-ebd4f92b>子元素 line-heignt 設跟父元素一樣高度</p><br data-v-ebd4f92b><div class="bgcVS" data-v-ebd4f92b><div data-v-ebd4f92b><span class="then" data-v-ebd4f92b>＜</span> <span class="number" data-v-ebd4f92b>div </span><span class="function" data-v-ebd4f92b>class </span> <span class="then" data-v-ebd4f92b>= &quot;</span><span class="word" data-v-ebd4f92b>parent</span><span class="then" data-v-ebd4f92b>&quot;</span> <span class="then" data-v-ebd4f92b>&gt;</span></div><div class="pTwo" data-v-ebd4f92b><span class="then" data-v-ebd4f92b>＜</span> <span class="number" data-v-ebd4f92b>span </span><span class="function" data-v-ebd4f92b>class </span> <span class="then" data-v-ebd4f92b>=&quot;</span><span class="word" data-v-ebd4f92b>child</span> <span class="then" data-v-ebd4f92b>&quot;&gt;＜/ </span><span class="number" data-v-ebd4f92b>div </span> <span class="then" data-v-ebd4f92b>&gt;</span></div><div data-v-ebd4f92b><span class="then" data-v-ebd4f92b>＜ </span> <span class="number" data-v-ebd4f92b>div </span><span class="then" data-v-ebd4f92b>&gt;</span></div><div class="brackets" data-v-ebd4f92b>.parent {</div><div class="brackets pTwo" data-v-ebd4f92b>width: 300px;</div><div class="brackets pTwo" data-v-ebd4f92b>height: 300px;</div><div class="brackets" data-v-ebd4f92b>}</div><div class="brackets" data-v-ebd4f92b>.child {</div><div class="brackets pTwo" data-v-ebd4f92b>width: 100px;</div><div class="brackets pTwo" data-v-ebd4f92b>line-heignt:父元素的高度;</div><div class="brackets" data-v-ebd4f92b>}</div></div><br data-v-ebd4f92b><br data-v-ebd4f92b><div id="cssOne007" class="articleCardTitle cor36" data-v-ebd4f92b> [ CSS ] ≫ CSS有哪些常見的布局方法? </div><span data-v-ebd4f92b><a href="https://ithelp.ithome.com.tw/articles/10208741" data-v-ebd4f92b>資料來源: Flex 空間分配 @iT邦幫忙 Lai</a></span><div data-v-ebd4f92b></div><br data-v-ebd4f92b><p data-v-ebd4f92b>FLEX GRID</p><br data-v-ebd4f92b><br data-v-ebd4f92b><p class="cor36" data-v-ebd4f92b>實現一個左中右三欄布局,不能用FLEX,GRID怎麼做?</p><p data-v-ebd4f92b>定位 float table</p><br data-v-ebd4f92b><br data-v-ebd4f92b><p class="cor36" data-v-ebd4f92b>Flex 布局用在什麼情況下比較合適?</p><p data-v-ebd4f92b>用於線性布局, 水平或垂直</p><br data-v-ebd4f92b><br data-v-ebd4f92b><p class="cor36" data-v-ebd4f92b>Grid 布局用在什麼情況下比較合適?</p><p data-v-ebd4f92b>用於線性布局,水平或垂直</p><br data-v-ebd4f92b><br data-v-ebd4f92b><p class="cor36" data-v-ebd4f92b>做一個左中右的布局用FLEX怎麼做?</p><p data-v-ebd4f92b>可以直接給父元素加display:flex 子元素加space:between</p><br data-v-ebd4f92b><br data-v-ebd4f92b><p class="cor36" data-v-ebd4f92b>不夠寬自然會收縮,有哪些元素會收縮?</p><p data-v-ebd4f92b>它會等比例收縮</p><br data-v-ebd4f92b><br data-v-ebd4f92b><p class="cor36" data-v-ebd4f92b>如果我希望它不等比例收縮呢?比如中間不縮左右縮呢?</p><p data-v-ebd4f92b>中間的設 flex-shrink 0</p><p data-v-ebd4f92b>兩邊默認的shrink是 1</p><br data-v-ebd4f92b><br data-v-ebd4f92b><p class="cor36" data-v-ebd4f92b> 如果希望左邊固定寬100px右邊固定寬200px中間自由收縮怎麼做? </p><p data-v-ebd4f92b>左邊寬100右邊寬200</p><br data-v-ebd4f92b><br data-v-ebd4f92b><p class="cor36" data-v-ebd4f92b>寫了寬度之後shrink怎麼寫?</p><p data-v-ebd4f92b>左右0 中間寫1</p><br data-v-ebd4f92b><br data-v-ebd4f92b><p class="cor36" data-v-ebd4f92b>那左中右grow怎麼寫?</p><p data-v-ebd4f92b>左右grow0 中間1</p><br data-v-ebd4f92b><br data-v-ebd4f92b><p class="cor36" data-v-ebd4f92b>grid一般用來做甚麼樣的布局?怎麼用?</p><p data-v-ebd4f92b>網格 屏幕做四個相等的 用行列布局骨架</p><br data-v-ebd4f92b><br data-v-ebd4f92b><div id="cssOne008" class="articleCardTitle cor36" data-v-ebd4f92b> [ CSS ] ≫ CSS動畫有哪些屬性? </div><p data-v-ebd4f92b>transition</p><p data-v-ebd4f92b>@keyframe</p><p data-v-ebd4f92b>animation</p><br data-v-ebd4f92b><br data-v-ebd4f92b><p class="cor36" data-v-ebd4f92b> transition怎麼實現動畫的,例如你怎麼把一個東西從左移到右? </p><p data-v-ebd4f92b>先自訂一個初始的位置, 比如你觸發點擊事件</p><p data-v-ebd4f92b> 點擊讓它移動100px, 用transition優化它中間過度的動畫, 寫 all 0.25秒 </p><br data-v-ebd4f92b><br data-v-ebd4f92b><p class="cor36" data-v-ebd4f92b> 你用transition加了從開始到結束的動畫,這動畫可以是線性也可以非線性也可以緩動的,你能舉幾個例子嗎?線性是用什麼值? </p><p data-v-ebd4f92b>transition-timing-function</p><p data-v-ebd4f92b>預設ease緩入中間快緩出</p><p data-v-ebd4f92b>linear均速</p><p data-v-ebd4f92b>ease-in 緩入</p><p data-v-ebd4f92b>ease-out 緩出</p><br data-v-ebd4f92b><br data-v-ebd4f92b><p class="cor36" data-v-ebd4f92b> 你做旋轉時,它默認從那裡開始旋轉?從哪個基點開始旋轉? </p><p data-v-ebd4f92b>中心點, 可以設定transform-origin 改變 例如 top left 到左上角</p><br data-v-ebd4f92b><br data-v-ebd4f92b><p class="cor36" data-v-ebd4f92b> animation我如果希望它撥放完了再繼續撥無限撥怎麼做? </p><p data-v-ebd4f92b>animation-iteration-count 設定 infinite</p><br data-v-ebd4f92b><br data-v-ebd4f92b><div id="cssOne015" class="articleCardTitle cor36" data-v-ebd4f92b> [ CSS ] ≫ 偽類 偽元素? </div><p class="cor36" data-v-ebd4f92b>:偽類</p><br data-v-ebd4f92b><br data-v-ebd4f92b><p data-v-ebd4f92b>當我們 希望樣式在 某些特定狀態下 才被呈現到 指定的 元素時</p><br data-v-ebd4f92b><br data-v-ebd4f92b><p data-v-ebd4f92b>就是 當某元素狀態改變時 , 我們期待給這元素添加一些特殊效果</p><br data-v-ebd4f92b><br data-v-ebd4f92b><p data-v-ebd4f92b>:hover 懸浮在某元素上時 , 期望該元素要顯示的樣式</p><br data-v-ebd4f92b><br data-v-ebd4f92b><p class="cor36" data-v-ebd4f92b>::偽元素</p><br data-v-ebd4f92b><br data-v-ebd4f92b><p data-v-ebd4f92b>創建一些不在文檔樹中的元素 , 並為其添加樣式</p><br data-v-ebd4f92b><br data-v-ebd4f92b><p data-v-ebd4f92b>要注意 偽元素樣式裡 必須要給 content 屬性</p><br data-v-ebd4f92b><br data-v-ebd4f92b><p data-v-ebd4f92b>::before 在一個元素前增加一些文本 , 並對文本添加樣式</p><br data-v-ebd4f92b><br data-v-ebd4f92b><p class="cor36" data-v-ebd4f92b>小結:</p><p data-v-ebd4f92b>偽類 操作對象 是 文檔樹中 已有的元素</p><br data-v-ebd4f92b><br data-v-ebd4f92b><p data-v-ebd4f92b>偽元素 創建文檔樹 以外的元素 並添加樣式</p><br data-v-ebd4f92b><br data-v-ebd4f92b><div id="cssOne011" class="articleCardTitle cor36" data-v-ebd4f92b> [ CSS ] ≫ 隱藏元素的方法? </div><h3 data-v-ebd4f92b>display: none</h3><p data-v-ebd4f92b>元素在 頁面上消失 , 不佔空間 . . . 重排 重繪</p><br data-v-ebd4f92b><br data-v-ebd4f92b><h3 data-v-ebd4f92b>opacity: 0</h3><p data-v-ebd4f92b>設置元素透明度 0 , 元素不可見 , 佔空間</p><br data-v-ebd4f92b><br data-v-ebd4f92b><h3 data-v-ebd4f92b>visbility: hidden</h3><p data-v-ebd4f92b>讓 元素消失 , 佔位置 . . . 重繪</p><br data-v-ebd4f92b><br data-v-ebd4f92b><h3 data-v-ebd4f92b>position: absolute</h3><br data-v-ebd4f92b><br data-v-ebd4f92b><div id="cssOne010" class="articleCardTitle cor36" data-v-ebd4f92b> [ css ] ≫ 什麼是重排(回流)和重繪?如何避免 </div><h2 data-v-ebd4f92b>重繪不一定重排，重排一定重繪</h2><br data-v-ebd4f92b><br data-v-ebd4f92b><h3 class="cor36" data-v-ebd4f92b># 重排(回流)（reflow）是什麼:</h3><p data-v-ebd4f92b>布局引擎會根據所有的樣式計算出盒模型在頁面上的位置 &amp; 大小</p><br data-v-ebd4f92b><p data-v-ebd4f92b>當瀏覽器偵測到頁面的佈局發生變化時，就需要進行回退並重新渲染。</p><br data-v-ebd4f92b><p class="cor36" data-v-ebd4f92b># 觸發重排(回流)條件：</p><p data-v-ebd4f92b>1.頁面第一次渲染（初始化）</p><p data-v-ebd4f92b>2.DOM樹節點的增刪或移動</p><p data-v-ebd4f92b>3.DOM元素的幾何屬性變化</p><p class="pFou" data-v-ebd4f92b>寬度（width）</p><p class="pFou" data-v-ebd4f92b>高度（height）</p><p class="pFou" data-v-ebd4f92b>內邊距（padding）</p><p class="pFou" data-v-ebd4f92b>邊框（border）等</p><p class="pFou" data-v-ebd4f92b>外邊距（margin）</p><p class="pFou" data-v-ebd4f92b>左偏移（left）</p><p class="pFou" data-v-ebd4f92b>上偏移（top）</p><br data-v-ebd4f92b><p data-v-ebd4f92b>4.瀏覽器窗口大小改變（resize）</p><p data-v-ebd4f92b>獲取元素的某些屬性，如offset系列、scroll系列和client系列屬性。</p><br data-v-ebd4f92b><p class="cor36" data-v-ebd4f92b># 重排(回流)過程</p><p data-v-ebd4f92b> 劉覽器會從根節點＜html&gt;元素 開始進行遞歸，逐個計算所有節點的幾何尺寸和位置，以確定是渲染樹的一部分發生變化還是整個渲染樹需要重新渲染。 </p><br data-v-ebd4f92b><br data-v-ebd4f92b><h3 class="cor36" data-v-ebd4f92b># 重繪（repaint）是什麼:</h3><p data-v-ebd4f92b> 計算好盒模型的 位置 大小 其他屬性後 , 瀏覽器根據每個盒模型的 特性 進行 繪製瀏覽器的渲染機制 </p><br data-v-ebd4f92b><p data-v-ebd4f92b> 當我們改變某個元素的背景色、文字顏色、邊框顏色等屬性時，屏幕的一部分需要重繪，但是元素的幾何尺寸和位置沒有發生改變。重繪過程不涉及布局的計算，只是重新繪製已有的元素。 </p><br data-v-ebd4f92b><p class="cor36" data-v-ebd4f92b># 觸發重繪條件:</p><p data-v-ebd4f92b> 1.重排(回流)必會引起重繪，因為回流的過程中可能會改變元素的樣式屬性，需要重新繪製已有的元素。 </p><p data-v-ebd4f92b>2.背景色、文字顏色、字體等的改變會觸發重繪。</p><p class="pTwo" data-v-ebd4f92b> 注意 字體大小發生變化時，將觸發回流而非僅重繪。(會影響元素的佈局) </p><br data-v-ebd4f92b><p class="cor36" data-v-ebd4f92b># 重繪過程</p><p data-v-ebd4f92b> 沒有導致 DOM 元素的幾何屬性（寬度、高度、位置）發生變化，因此元素的位置信息不需要更新，從而省去了佈局（layout）的過程。 </p><br data-v-ebd4f92b><br data-v-ebd4f92b><h2 class="cor36" data-v-ebd4f92b># 如何避免重排(回流).重繪?</h2><p data-v-ebd4f92b>1.集中改變樣式: ex 用 class 集中改變</p><br data-v-ebd4f92b><p data-v-ebd4f92b>2.用 transform 做變形和位移，可以減少重排(回流)的次數。</p><br data-v-ebd4f92b><p data-v-ebd4f92b> 3.將需要多次修改的 DOM 元素設置為 display:none，操作完成後再顯示。 </p><br data-v-ebd4f92b><p data-v-ebd4f92b>4.避免多次讀取某些屬性</p><br data-v-ebd4f92b><p data-v-ebd4f92b>5.絕對定位將複雜的節點脫離文檔流中，形成新的 Render Layer。</p><br data-v-ebd4f92b><p data-v-ebd4f92b> 6.使用 DocumentFragment 將需要多次修改的 DOM 元素緩存起來，最後一次性添加到真實的 DOM 中進行渲染。 </p><br data-v-ebd4f92b><br data-v-ebd4f92b><div id="cssOne013" class="articleCardTitle cor36" data-v-ebd4f92b> [ CSS ] ≫ CSS 的那些屬性 可以繼承? </div><p data-v-ebd4f92b>css 3 特性 : 繼承 、 層疊 、 優先級</p><br data-v-ebd4f92b><br data-v-ebd4f92b><p class="cor36" data-v-ebd4f92b>子元素 可繼承 父元素 樣式</p><div id="" class="articleCardTitle cor36" data-v-ebd4f92b>[ CSS ] ≫</div><p data-v-ebd4f92b>1. 字體 fonst . . . 顏色 大小</p><br data-v-ebd4f92b><br data-v-ebd4f92b><p data-v-ebd4f92b>2. 文本 line-height</p><br data-v-ebd4f92b><br data-v-ebd4f92b><p data-v-ebd4f92b>3. 元素可見性 visbility: hidden</p><br data-v-ebd4f92b><br data-v-ebd4f92b><p data-v-ebd4f92b>4. 表格布局的屬性 border-spacing</p><br data-v-ebd4f92b><br data-v-ebd4f92b><p data-v-ebd4f92b>5. 列表屬性 list-style</p><br data-v-ebd4f92b><br data-v-ebd4f92b><div id="cssOne013" class="articleCardTitle cor36" data-v-ebd4f92b> [ CSS ] ≫ 預處理器? </div><p class="cor36" data-v-ebd4f92b>SCSS相比於CSS有那些好處?</p><p data-v-ebd4f92b>它可以在寫語法時層層包裹, 可以用變量</p><br data-v-ebd4f92b><br data-v-ebd4f92b><p class="cor36" data-v-ebd4f92b>SASS 、 LESS</p><p data-v-ebd4f92b>變量 、 函數 、 混入</p><br data-v-ebd4f92b><br data-v-ebd4f92b><div id="cssOne009" class="articleCardTitle cor36" data-v-ebd4f92b> [ CSS ] ≫ 畫三角形的方法? </div><div data-v-ebd4f92b><span data-v-ebd4f92b><a href="https://codepen.io/wayne23123/pen/QWJdjVJ?editors=1100" data-v-ebd4f92b>@codePen demo</a></span></div><p data-v-ebd4f92b>1.</p><p data-v-ebd4f92b>用border, 給四個邊距, 然後給三個透明</p><br data-v-ebd4f92b><p data-v-ebd4f92b>2.</p><p data-v-ebd4f92b>用2個div做, 第一個div做正方形, 然後旋轉90度變成菱形,</p><p data-v-ebd4f92b> 另一個div做為父容器把他的上面百分之50顯示, 下面百分之50 overflow:hidden起來 </p><div id="cssOne016" class="articleCardTitle cor36" data-v-ebd4f92b> [ CSS ] ≫ 白屏時間 首屏時間 一樣嗎? 區別? </div><p class="cor36" data-v-ebd4f92b>白屏時間:</p><p data-v-ebd4f92b>指用戶輸入內容 enter 到瀏覽器出現第一個字符</p><br data-v-ebd4f92b><p data-v-ebd4f92b>開始顯示內容的時間</p><br data-v-ebd4f92b><p data-v-ebd4f92b>白屏 = 頁面開始展示時間 - 開始請求時間</p><br data-v-ebd4f92b><p class="cor36" data-v-ebd4f92b>首屏時間:</p><p data-v-ebd4f92b>瀏覽器響應用戶輸入 地址 到 首屏內容 全部渲染 完成的時間</p><br data-v-ebd4f92b><br data-v-ebd4f92b><div id="cssOne017" class="articleCardTitle cor36" data-v-ebd4f92b> [ CSS ] ≫ 圖片懶加載 </div><p data-v-ebd4f92b>在頁面中 有很多圖片時 , 加載圖片需要 一定時間</p><br data-v-ebd4f92b><p data-v-ebd4f92b>可以 優先加載 可視區域的 內容 , 其他 等進入可視區域 再加載</p><br data-v-ebd4f92b><p data-v-ebd4f92b>1.加載</p><p data-v-ebd4f92b>圖片進入可視區域前 先不給 src 賦值</p><br data-v-ebd4f92b><p data-v-ebd4f92b>進入可視區域 再給 src 賦上地址值</p><br data-v-ebd4f92b><p data-v-ebd4f92b>2.判斷是否進入</p><p data-v-ebd4f92b>通過 IntersectionObserver API 實現</p><br data-v-ebd4f92b><p data-v-ebd4f92b>這個 API 可以觀察元素是否可見</p><br data-v-ebd4f92b><p data-v-ebd4f92b>可見指 目標元素 與 視口 是否產生 交叉區</p><div class="bgcVS" data-v-ebd4f92b><div data-v-ebd4f92b><span class="function" data-v-ebd4f92b>const </span><span class="word" data-v-ebd4f92b>observer</span><span class="then" data-v-ebd4f92b>= new </span><span class="word" data-v-ebd4f92b>IntersectionObserver</span><span class="brackets" data-v-ebd4f92b>(</span> <span class="cor36" data-v-ebd4f92b>回調</span><span class="brackets" data-v-ebd4f92b>)</span></div><p data-v-ebd4f92b>裡面回調觸發 2 次 , 目標元素看見 觸發 , 目標看不見 觸發</p><br data-v-ebd4f92b><br data-v-ebd4f92b><div data-v-ebd4f92b><span class="then" data-v-ebd4f92b>＜</span> <span class="number" data-v-ebd4f92b>img </span><span class="word" data-v-ebd4f92b>data-src</span> <span class="then" data-v-ebd4f92b>=</span><span class="src" data-v-ebd4f92b>&quot;test.jpg&quot;</span> <span class="then" data-v-ebd4f92b>&gt;</span></div><br data-v-ebd4f92b><div data-v-ebd4f92b><span class="function" data-v-ebd4f92b>const </span><span class="word" data-v-ebd4f92b>images</span> <span class="then" data-v-ebd4f92b>=</span><span class="word" data-v-ebd4f92b>document</span><span class="variable" data-v-ebd4f92b>.querySelectorAll</span><span class="brackets" data-v-ebd4f92b>(</span> <span class="src" data-v-ebd4f92b>&quot;img&quot;</span><span class="brackets" data-v-ebd4f92b>)</span></div><br data-v-ebd4f92b><div data-v-ebd4f92b><span class="function" data-v-ebd4f92b>const </span><span class="word" data-v-ebd4f92b>callback</span> <span class="then" data-v-ebd4f92b>=</span><span class="word" data-v-ebd4f92b>entries</span><span class="function" data-v-ebd4f92b>=&gt; </span> <span class="brackets" data-v-ebd4f92b>{</span></div><div class="padTwo VSL" data-v-ebd4f92b><span class="word" data-v-ebd4f92b>entries</span><span class="variable" data-v-ebd4f92b>.forEach</span><span class="brackets" data-v-ebd4f92b>(</span> <span class="word" data-v-ebd4f92b>entry</span><span class="function" data-v-ebd4f92b>=&gt; </span> <span class="brackets" data-v-ebd4f92b>{</span><div data-v-ebd4f92b></div><div class="padTwo VSL" data-v-ebd4f92b><span class="then" data-v-ebd4f92b>if</span> <span class="brackets" data-v-ebd4f92b>(</span><span class="word" data-v-ebd4f92b>entry</span><span class="variable" data-v-ebd4f92b>.isIntersecting</span><span class="brackets" data-v-ebd4f92b>){</span><div data-v-ebd4f92b></div><div class="padTwo VSL" data-v-ebd4f92b><span class="function" data-v-ebd4f92b>const </span><span class="word" data-v-ebd4f92b>image</span> <span class="then" data-v-ebd4f92b>=</span><span class="word" data-v-ebd4f92b>entry</span><span class="variable" data-v-ebd4f92b>.target</span><div data-v-ebd4f92b><span class="function" data-v-ebd4f92b>const </span><span class="word" data-v-ebd4f92b>data_src</span><span class="then" data-v-ebd4f92b>=</span> <span class="word" data-v-ebd4f92b>image</span><span class="variable" data-v-ebd4f92b>.getAttribute</span><span class="brackets" data-v-ebd4f92b>(</span><span class="src" data-v-ebd4f92b>&quot;data-src&quot;</span><span class="brackets" data-v-ebd4f92b>)</span></div><div data-v-ebd4f92b><span class="word" data-v-ebd4f92b>image</span><span class="variable" data-v-ebd4f92b>.setAttribute</span><span class="brackets" data-v-ebd4f92b>(</span><span class="src" data-v-ebd4f92b>&quot;src&quot;</span> <span class="then" data-v-ebd4f92b>,</span><span class="word" data-v-ebd4f92b>data_src</span><span class="brackets" data-v-ebd4f92b>)</span></div><div data-v-ebd4f92b><span class="word" data-v-ebd4f92b>observer</span><span class="variable" data-v-ebd4f92b>.unobserve</span><span class="brackets" data-v-ebd4f92b>(</span><span class="word" data-v-ebd4f92b>image</span><span class="brackets" data-v-ebd4f92b>)</span></div><div data-v-ebd4f92b><span class="word" data-v-ebd4f92b>console</span><span class="variable" data-v-ebd4f92b>.log</span><span class="brackets" data-v-ebd4f92b>(</span><span class="src" data-v-ebd4f92b>&quot;觸發&quot;</span><span class="brackets" data-v-ebd4f92b>)</span></div><div data-v-ebd4f92b></div></div><div data-v-ebd4f92b><span class="brackets" data-v-ebd4f92b>}</span></div></div><div data-v-ebd4f92b><span class="brackets" data-v-ebd4f92b>})</span></div></div><div data-v-ebd4f92b><span class="brackets" data-v-ebd4f92b>}</span></div><br data-v-ebd4f92b><div data-v-ebd4f92b><span class="function" data-v-ebd4f92b>const </span><span class="word" data-v-ebd4f92b>observer</span><span class="then" data-v-ebd4f92b>= new </span><span class="word" data-v-ebd4f92b>IntersectionObserver</span><span class="brackets" data-v-ebd4f92b>(</span><span class="word" data-v-ebd4f92b>callback</span> <span class="brackets" data-v-ebd4f92b>)</span></div><br data-v-ebd4f92b><div data-v-ebd4f92b><span class="word" data-v-ebd4f92b>images</span><span class="variable" data-v-ebd4f92b>.forEach</span><span class="brackets" data-v-ebd4f92b>(</span> <span class="word" data-v-ebd4f92b>image</span><span class="function" data-v-ebd4f92b>=&gt; </span> <span class="brackets" data-v-ebd4f92b>{</span></div><div class="padTwo VSL" data-v-ebd4f92b><span class="word" data-v-ebd4f92b>observer</span><span class="variable" data-v-ebd4f92b>.observe</span><span class="brackets" data-v-ebd4f92b>(</span> <span class="word" data-v-ebd4f92b>image</span><span class="brackets" data-v-ebd4f92b>)</span><div data-v-ebd4f92b></div></div><div data-v-ebd4f92b><span class="brackets" data-v-ebd4f92b>})</span></div></div><br data-v-ebd4f92b><h2 class="articleCardTitle cor36" data-v-ebd4f92b> [ CSS ] ≫ 如何讓google瀏覽器支持小字體? </h2><p data-v-ebd4f92b>google 最小字體支持12px,想要更小用 transform: scale(0.5)</p><br data-v-ebd4f92b><br data-v-ebd4f92b><h2 class="articleCardTitle cor36" data-v-ebd4f92b>[ CSS ] ≫ Sass 和 SCSS ?</h2><p data-v-ebd4f92b> 語法書寫方式不同，Sass是以嚴格的縮進式語法規則來書寫，不帶大括號({})和分號(;)，而SCSS的語法書寫和我們的CSS語法書寫方式非常類似 </p><br data-v-ebd4f92b><p data-v-ebd4f92b></p><br data-v-ebd4f92b><p class="cor36" data-v-ebd4f92b></p><p data-v-ebd4f92b></p><br data-v-ebd4f92b><br data-v-ebd4f92b><p class="cor36" data-v-ebd4f92b></p><p data-v-ebd4f92b></p><br data-v-ebd4f92b><br data-v-ebd4f92b><div id="" class="articleCardTitle cor36" data-v-ebd4f92b>[ CSS ] ≫</div><p data-v-ebd4f92b></p><br data-v-ebd4f92b><br data-v-ebd4f92b>',383),p3=Yd(()=>n("div",{class:"toTopButton"},[n("div",{class:"disCen"},"___"),n("div",{class:"disCen"},"▲")],-1)),l3=[p3],b3=Yd(()=>n("div",{class:"toBotButton"},[n("div",{class:"disCen"},"▼"),n("div",{class:"disCen"},"￣")],-1)),r3=[b3],i3={__name:"CssPageOne",setup(a){const s=ba(!1);window.addEventListener("scroll",function(){s.value=window.scrollY>0});function d(){window.scrollTo({top:0,left:0,behavior:"smooth"})}function v(){window.scrollTo({top:999999,left:0,behavior:"smooth"})}function t(e){window.scrollTo({top:document.getElementById(`${e}`).offsetTop,behavior:"smooth"})}return(e,c)=>{const l=qa("spen");return aa(),ta(G,null,[n("section",null,[n("div",Qr,[n("div",Zr,[n("div",a3,[s3,n("div",{onClick:c[0]||(c[0]=p=>t("cssOne001")),class:"leftNavText"}," px,rem,em,vw "),n("div",{onClick:c[1]||(c[1]=p=>t("cssOne014")),class:"leftNavText"}," link&@import "),n("div",{onClick:c[2]||(c[2]=p=>t("cssOne002")),class:"leftNavText"},"position"),n("div",{onClick:c[3]||(c[3]=p=>t("cssOne012")),class:"leftNavText"},"display"),n("div",{onClick:c[4]||(c[4]=p=>t("cssOne003")),class:"leftNavText"},"盒模型"),n("div",{onClick:c[5]||(c[5]=p=>t("cssOne004")),class:"leftNavText"},"BFC"),n("div",{onClick:c[6]||(c[6]=p=>t("cssOne005")),class:"leftNavText"}," 選擇器優先級 "),n("div",{onClick:c[7]||(c[7]=p=>t("cssOne006")),class:"leftNavText"}," 水平垂直置中 "),n("div",{onClick:c[8]||(c[8]=p=>t("cssOne007")),class:"leftNavText"},"布局"),n("div",{onClick:c[9]||(c[9]=p=>t("cssOne008")),class:"leftNavText"},"動畫"),n("div",{onClick:c[10]||(c[10]=p=>t("cssOne015")),class:"leftNavText"}," 偽類&偽元素 "),n("div",{onClick:c[11]||(c[11]=p=>t("cssOne011")),class:"leftNavText"}," 隱藏元素的方法 "),n("div",{onClick:c[12]||(c[12]=p=>t("cssOne010")),class:"leftNavText"},"重繪回流"),n("div",{onClick:c[13]||(c[13]=p=>t("cssOne013")),class:"leftNavText"}," 那些屬性可繼承 "),n("div",{onClick:c[14]||(c[14]=p=>t("cssOne009")),class:"leftNavText"},"三角形"),n("div",{onClick:c[15]||(c[15]=p=>t("cssOne016")),class:"leftNavText"}," 白屏首屏時間 "),n("div",{onClick:c[16]||(c[16]=p=>t("cssOne017")),class:"leftNavText"},"圖片懶加載"),n("div",{onClick:c[17]||(c[17]=p=>t("cssOne0")),class:"leftNavText"})])])]),n("div",d3,[n("div",t3,[n("div",c3,[v3,n("p",null,[k(l,{class:"cor36"},{default:S(()=>[fa("因為: ")]),_:1}),n3]),e3])])])]),n("div",null,[W(k(B,{name:"fade",tag:"div"},{default:S(()=>[n("div",{onClick:d,class:"toTop"},l3)]),_:1},512),[[U,s.value]]),W(k(B,{name:"fade",tag:"div"},{default:S(()=>[n("div",{onClick:v,class:"toBot"},r3)]),_:1},512),[[U,s.value]])])],64)}}},f3=pa(i3,[["__scopeId","data-v-ebd4f92b"]]);const hn=a=>(wa("data-v-fdc401be"),a=a(),ma(),a),o3=K('<section data-v-fdc401be><div class="leftNav" data-v-fdc401be><div class="leftNavContainer" data-v-fdc401be><div class="leftNavLayout" data-v-fdc401be><br data-v-fdc401be><div class="leftNavText" data-v-fdc401be></div><div class="leftNavText" data-v-fdc401be></div><div class="leftNavText" data-v-fdc401be></div><div class="leftNavText" data-v-fdc401be></div></div></div></div><div class="Main" data-v-fdc401be><div class="mainContainer" data-v-fdc401be><div class="mainLayout" data-v-fdc401be><div id="" class="articleCardTitle cor36" data-v-fdc401be>[ CSS ] ≫ 樣式的順序</div><p data-v-fdc401be>有如下代碼，請問HTML代碼中&quot;文本&quot;最終渲染出的顏色分別是？</p><br data-v-fdc401be><div class="bgcVS" data-v-fdc401be><div data-v-fdc401be><span class="then" data-v-fdc401be>＜</span> <span class="number" data-v-fdc401be>div </span><span class="function" data-v-fdc401be>class </span> <span class="then" data-v-fdc401be>=&quot;</span><span class="word" data-v-fdc401be>red</span> <span class="word" data-v-fdc401be>blue</span><span class="word" data-v-fdc401be>&quot;&gt;</span> <span class="word" data-v-fdc401be>文本</span><span class="then" data-v-fdc401be>＜/</span> <span class="number" data-v-fdc401be>div </span><span class="then" data-v-fdc401be>&gt;</span></div><div data-v-fdc401be><span class="then" data-v-fdc401be>＜</span> <span class="number" data-v-fdc401be>div </span><span class="function" data-v-fdc401be>class </span> <span class="then" data-v-fdc401be>=&quot;</span><span class="word" data-v-fdc401be>blue</span> <span class="word" data-v-fdc401be>red</span><span class="word" data-v-fdc401be>&quot;&gt;</span> <span class="word" data-v-fdc401be>文本</span><span class="then" data-v-fdc401be>＜/</span> <span class="number" data-v-fdc401be>div </span><span class="then" data-v-fdc401be>&gt;</span></div><div class="brackets" data-v-fdc401be>.red { color: red; }</div><div class="brackets" data-v-fdc401be>.blue { color: blue; }</div></div><br data-v-fdc401be><br data-v-fdc401be><p data-v-fdc401be>兩個都是藍色。</p><br data-v-fdc401be><p data-v-fdc401be> 為什麼？CSS的層疊規則裡有一條叫做「後來居上原則」，即兩個相同權值的樣式，如存在相同的聲明屬性，則後者獲勝。 本題的CSS樣式裡，.blue 和 .red 權值相同，且都聲明了 color 屬性，但 .blue 在樣式表中位於 .red 後面的位置，所以當HTML中的同一標籤同時引用這兩個類名時，以 .blue 的 color 聲明為準，和HTML中的 className 的先後順序無關。 </p><br data-v-fdc401be><br data-v-fdc401be><p class="cor36" data-v-fdc401be></p><p data-v-fdc401be></p><br data-v-fdc401be><br data-v-fdc401be></div></div></div></section>',1),u3=hn(()=>n("div",{class:"toTopButton"},[n("div",{class:"disCen"},"___"),n("div",{class:"disCen"},"▲")],-1)),w3=[u3],m3=hn(()=>n("div",{class:"toBotButton"},[n("div",{class:"disCen"},"▼"),n("div",{class:"disCen"},"￣")],-1)),h3=[m3],k3={__name:"CssPageTwo",setup(a){const s=ba(!1);window.addEventListener("scroll",function(){s.value=window.scrollY>0});function d(){window.scrollTo({top:0,left:0,behavior:"smooth"})}function v(){window.scrollTo({top:999999,left:0,behavior:"smooth"})}return ba(!0),(t,e)=>(aa(),ta(G,null,[o3,n("div",null,[W(k(B,{name:"fade",tag:"div"},{default:S(()=>[n("div",{onClick:d,class:"toTop"},w3)]),_:1},512),[[U,s.value]]),W(k(B,{name:"fade",tag:"div"},{default:S(()=>[n("div",{onClick:v,class:"toBot"},h3)]),_:1},512),[[U,s.value]])])],64))}},g3=pa(k3,[["__scopeId","data-v-fdc401be"]]);const z3={};function T3(a,s){const d=qa("RouterLink"),v=qa("RouterView");return aa(),ta(G,null,[n("div",null,[n("ul",null,[n("li",null,[k(d,{to:"/js/jsnote"},{default:S(()=>[fa("總結")]),_:1})]),n("li",null,[k(d,{to:"/js/jspractice"},{default:S(()=>[fa("練習題")]),_:1})]),n("li",null,[k(d,{to:"/js"},{default:S(()=>[fa("上課筆記")]),_:1})])])]),k(v)],64)}const q3=pa(z3,[["render",T3],["__scopeId","data-v-ded878a9"]]);const rs=a=>(wa("data-v-f884ef29"),a=a(),ma(),a),_3={class:"leftNav"},S3={class:"leftNavContainer"},y3={class:"leftNavLayout"},C3=rs(()=>n("br",null,null,-1)),x3={class:"Main"},L3={class:"mainContainer"},j3={class:"mainLayout"},V3=K('<div class="articleCardTitle cor36" data-v-f884ef29>[ JS ] ≫ 延遲加載JS方式?</div><p data-v-f884ef29>正常: 解析HTML &gt; 遇到JS &gt; 下載 &gt; 執行 &gt; 繼續解析HTML</p><br data-v-f884ef29><p class="cor36" data-v-f884ef29>defer 属性</p><p data-v-f884ef29>解析HTML &gt; 遇到JS &gt; 下載 &gt; 等到 HTML 解析完 &gt; 再執行JS defer</p><p data-v-f884ef29>順次執行 &gt; a.js &gt; b.js</p><br data-v-f884ef29><p class="cor36" data-v-f884ef29>async 属性</p><p data-v-f884ef29> 解析HTML &gt; 遇到async &gt; 下載並同時解析 HTML &gt; async加載完 HTML暫停 直接執行JS &gt; 再繼續解析 HTML </p><p data-v-f884ef29>和HTML解析同步</p><p data-v-f884ef29>不是順次執行 誰先加載完 誰執行</p><br data-v-f884ef29><br data-v-f884ef29><div id="" class="articleCardTitle cor36" data-v-f884ef29>[ JS ] ≫ ES6 新特性?</div><p data-v-f884ef29>let . const . map . set . 箭頭函數 . 解構復值 . promise</p><br data-v-f884ef29><br data-v-f884ef29><div id="onejs001" class="articleCardTitle cor36" data-v-f884ef29> [ JS ] ≫ JS數據類型? </div><p data-v-f884ef29>幾本類型:</p><p class="pFou" data-v-f884ef29>string number 布林 null undefined symbol bigInt</p><br data-v-f884ef29><p data-v-f884ef29>引用類型:</p><p class="pFou" data-v-f884ef29>object</p><br data-v-f884ef29><br data-v-f884ef29><p class="cor36" data-v-f884ef29># 陣列,函數,日期屬於數據類型嗎?</p><p data-v-f884ef29>不屬於, 他們屬於構造函數</p><br data-v-f884ef29><br data-v-f884ef29><p data-v-f884ef29>函數屬於哪個? _ object</p><p data-v-f884ef29>陣列屬於哪個? _ object</p><p data-v-f884ef29>正則屬於哪個? _ object</p><br data-v-f884ef29><br data-v-f884ef29><p class="cor36" data-v-f884ef29># 為什麼不用大寫STRING?</p><p data-v-f884ef29> 因為小寫string上面有大寫STRING的方法, 大寫STRING是小寫string的封裝類型 在小寫屬性.方法會自動封裝成大寫STRING, 然後用完之後自動銷毀 </p><br data-v-f884ef29><br data-v-f884ef29><p class="cor36" data-v-f884ef29># 值和地址區別?</p><p data-v-f884ef29>string nember 布林都是值, 如果存一個object對象到一個變量是地址</p><br data-v-f884ef29><br data-v-f884ef29><p class="cor36" data-v-f884ef29># 哪我存一個函數到一個變量?</p><p data-v-f884ef29>存到地址</p><br data-v-f884ef29><br data-v-f884ef29><p class="cor36" data-v-f884ef29> # 存一個變量怎麼知道他存在值還是地址,根據他麼什麼的能區分? </p><p data-v-f884ef29>用typeof看一下, typeof object &amp; function 是地址</p><br data-v-f884ef29><br data-v-f884ef29><div id="onejs002" class="articleCardTitle cor36" data-v-f884ef29> [ JS ] ≫ null undefined區別? </div><p data-v-f884ef29>1.undefined是聲明之後的默認值, 但null不是</p><p data-v-f884ef29> 2.undefined一般給基本類型做未賦值, null一般給物件(物件,陣列,函數為空)做未賦值 </p><p data-v-f884ef29>3.undefined不是關鍵字, null是關鍵字, 所以不能聲明一個變量叫null</p><br data-v-f884ef29><br data-v-f884ef29><p class="cor36" data-v-f884ef29># 如果我聲明一個變量它的值?</p><p data-v-f884ef29>undefined</p><br data-v-f884ef29><br data-v-f884ef29><p class="cor36" data-v-f884ef29># NaN類型?</p><p data-v-f884ef29>Number</p><br data-v-f884ef29><p data-v-f884ef29>因為 NaN 表示一個不能表示的數字</p><br data-v-f884ef29><br data-v-f884ef29><p class="cor36" data-v-f884ef29># typeof null?</p><p data-v-f884ef29>object</p><br data-v-f884ef29><br data-v-f884ef29><div id="onejs003" class="articleCardTitle cor36" data-v-f884ef29> [ JS ] ≫ ==和===有什麼不同? </div><p class="cor36" data-v-f884ef29>寬鬆相等 ==</p><p data-v-f884ef29> 當等號兩邊的值為相同類型時比較值是否相同，類型不同時會發生類型的自動轉換，轉換為相同的類型後再做比較。 </p><br data-v-f884ef29><p class="cor36" data-v-f884ef29>嚴格相等 ===</p><p data-v-f884ef29> 當等號兩邊的值為相同類型時，直接比較等號兩邊的值，相同返回 true；若等號兩邊值的類型不同時直接返回 false。 </p><br data-v-f884ef29><br data-v-f884ef29><p class="fz28" data-v-f884ef29>1. 如果 兩個 數據類型相同 , 執行 嚴格比較</p><br data-v-f884ef29><p class="fz28" data-v-f884ef29> 2. 如果 兩個 數據類型 不相同 , 進行 類型轉換後 再比較 </p><div class="fz28 padTwo VSL" data-v-f884ef29><br data-v-f884ef29><div data-v-f884ef29>2-1. 如果 一個是 null 另一個是 undefined 返回 true</div><br data-v-f884ef29><div data-v-f884ef29>2-2. 如果 一個是 number 另一個是 string</div><div class="padTwo VSL" data-v-f884ef29><br data-v-f884ef29><div data-v-f884ef29>將 string 轉成 number 再比較</div></div><br data-v-f884ef29><div data-v-f884ef29>2-3. 如果 一個是 布林</div><div class="padTwo VSL" data-v-f884ef29><br data-v-f884ef29><div data-v-f884ef29>將 布林 轉成 number 再比較</div><div class="padTwo VSL" data-v-f884ef29><br data-v-f884ef29><div data-v-f884ef29>true 轉成 1</div><br data-v-f884ef29><div data-v-f884ef29>false 轉成 0</div></div></div><br data-v-f884ef29><div data-v-f884ef29>2-4. 如果 一個是 物件 另一個是 number || 字串</div><div class="padTwo VSL" data-v-f884ef29><br data-v-f884ef29><div data-v-f884ef29>將 物件 轉成 原始值 再比較</div><div class="padTwo VSL" data-v-f884ef29><br data-v-f884ef29><div data-v-f884ef29>先調用 物件 valueOf()方法 轉成 基本類型</div><br data-v-f884ef29><div data-v-f884ef29> 當 valueOf() 返回 非 基本類型 , 再調用 toString() 方法 </div></div></div><br data-v-f884ef29><div data-v-f884ef29>2-5. NaN 和其他任何類型比較永遠返回 false</div><br data-v-f884ef29><div data-v-f884ef29>2-6. 兩個都為引用類型，則比較它們是否指向同一個物件</div></div><br data-v-f884ef29><p class="fz28 cor36" data-v-f884ef29># 那些值轉換成 false?</p><br data-v-f884ef29><p class="fz28" data-v-f884ef29>1. 空字串 &quot;&quot;</p><br data-v-f884ef29><p class="fz28" data-v-f884ef29>2. 數字 0</p><br data-v-f884ef29><p class="fz28" data-v-f884ef29>3. NaN</p><br data-v-f884ef29><p class="fz28" data-v-f884ef29>4. null 或 undefined</p><br data-v-f884ef29><br data-v-f884ef29><p class="fz28 cor36" data-v-f884ef29># 練習</p><p data-v-f884ef29>1 == &quot;1&quot; . . . // true</p><br data-v-f884ef29><p data-v-f884ef29>1 === &quot;1&quot; . . . // false</p><br data-v-f884ef29><p data-v-f884ef29>NaN == NaN . . . // false</p><br data-v-f884ef29><p data-v-f884ef29>true == 1 . . . // true</p><br data-v-f884ef29><p data-v-f884ef29>true == &#39;2&#39; . . . // false, 先把 true 變 1，再參考規則 3</p><br data-v-f884ef29><p data-v-f884ef29> true == [&#39;1&#39;] . . . // true, 先把 true 變 1， [&#39;1&#39;]拆箱成 &#39;1&#39;, 再參考規則 3 </p><br data-v-f884ef29><p data-v-f884ef29>true == [&#39;2&#39;] . . . // false, 同上</p><br data-v-f884ef29><p data-v-f884ef29> undefined == false . . . // false ，首先 false 變 0，然後參考規則 4 </p><br data-v-f884ef29><p data-v-f884ef29>null == false . . . // false，同上</p><br data-v-f884ef29><p data-v-f884ef29>null == undefined . . . //true</p><br data-v-f884ef29><p data-v-f884ef29>[1,2] == &quot;1,2&quot; . . . //true</p><br data-v-f884ef29><p data-v-f884ef29>123 == &#39;123&#39; . . . // true, &#39;123&#39; 先變 123</p><br data-v-f884ef29><p data-v-f884ef29>&quot;&quot; == 0 . . . // true, &quot;&quot; 先變 0</p><br data-v-f884ef29><p data-v-f884ef29>&quot; &quot; == 0 . . . // true, &quot; &quot; 先變 0</p><br data-v-f884ef29><p data-v-f884ef29>+0 == -0 . . . // true</p><br data-v-f884ef29><p data-v-f884ef29>null == undefined . . . // true</p><br data-v-f884ef29><p data-v-f884ef29>null == &quot;&quot; . . . // false</p><br data-v-f884ef29><p data-v-f884ef29>null == 0 . . . // false</p><br data-v-f884ef29><p data-v-f884ef29>null == false . . . // false</p><br data-v-f884ef29><p data-v-f884ef29>undefined == &quot;&quot; . . . // false</p><br data-v-f884ef29><p data-v-f884ef29>undefined == 0 . . . // false</p><br data-v-f884ef29><p data-v-f884ef29>undefined == false . . . // false</p><br data-v-f884ef29><p data-v-f884ef29>&quot;false&quot; == false . . . // false // false 轉成 0</p><br data-v-f884ef29><p data-v-f884ef29>NaN == false . . . // false</p><br data-v-f884ef29><p data-v-f884ef29>NaN === false . . . // false</p><br data-v-f884ef29><br data-v-f884ef29><div id="onejs004" class="articleCardTitle cor36" data-v-f884ef29> [ JS ] ≫ 0.1+0.2為什麼不等於0.3? </div><p data-v-f884ef29>浮點數運算可能導致精度丟失，因為計算時使用的是二進制表示</p><br data-v-f884ef29><p data-v-f884ef29> 浮點數的精度問題, 0.1在內存裡不一定等於0.1, 0.2在內存裡不一定等於0.2, 結果約等於0.3 </p><br data-v-f884ef29><p data-v-f884ef29>0.1 的二進制 可用 0.1.toString( 2 )</p><br data-v-f884ef29><p data-v-f884ef29>發現是 0. 000 11 0011 0011 0011 0011 0011 ...</p><br data-v-f884ef29><p data-v-f884ef29>number 類型 用 IEEE754 標準 64 位 存儲</p><br data-v-f884ef29><p data-v-f884ef29>小數佔位 52 位</p><br data-v-f884ef29><p data-v-f884ef29>又因為 53 位為 1 , 所以擷取往前進 1 位再保存</p><br data-v-f884ef29><p data-v-f884ef29>發生精度丟失</p><br data-v-f884ef29><p data-v-f884ef29>所以 0.1 再 2 進制後 比 0.1 大</p><br data-v-f884ef29><br data-v-f884ef29><br data-v-f884ef29><p class="cor36" data-v-f884ef29>怎麼對比兩個小數大小是否相等?</p><p data-v-f884ef29> 假如a是一個小數, b是一個小數, a去減b的絕對值, 如果減出來的值小於 0.0001 就說明a和b幾乎相等 </p><br data-v-f884ef29><br data-v-f884ef29><div id="onejs027" class="articleCardTitle cor36" data-v-f884ef29> [ JS ] ≫ 判斷數字是小數? 小數點後幾位? </div><p data-v-f884ef29>數字裡 是否有 小數點</p><br data-v-f884ef29><p data-v-f884ef29>數字 用 .toString 轉成字串</p><br data-v-f884ef29><p data-v-f884ef29>字串 用 indexOf 拿到小數點在字串的 索引位置</p><br data-v-f884ef29><p data-v-f884ef29>沒 小數點 indexOf 返回 -1</p><br data-v-f884ef29><br data-v-f884ef29><p class="coe36" data-v-f884ef29># 小數點後幾位?</p><p data-v-f884ef29>split 方法可以把字串 切成 數組</p><br data-v-f884ef29><p data-v-f884ef29>把 小數點 做為 隔板 , 把字串 通過 split 方法 切割為一個 數組</p><br data-v-f884ef29><p data-v-f884ef29>數組 第 2 個元素 為 小數點後的部分</p><br data-v-f884ef29><p data-v-f884ef29>取 arr[1] , 然後 .length 方法 獲取長度 , 得到小數點後的個數</p><br data-v-f884ef29><br data-v-f884ef29><br data-v-f884ef29><p data-v-f884ef29>x.toString().split(&quot;.&quot;)[1].length</p><br data-v-f884ef29><br data-v-f884ef29><p data-v-f884ef29>1.00 出問題 toString 後只剩 有效位</p><br data-v-f884ef29><br data-v-f884ef29><div id="onejs024" class="articleCardTitle cor36" data-v-f884ef29> [ JS ] ≫ 判斷變量是否為陣列? </div><p data-v-f884ef29>1. Array.isArray(變量) 方法</p><p data-v-f884ef29>只需要傳入變量 , 是數組 , 這方法返回 true</p><br data-v-f884ef29><br data-v-f884ef29><p data-v-f884ef29>2. Object.prototype.toString.call() 方法</p><p data-v-f884ef29>他會 返回 一個 字串數組</p><br data-v-f884ef29><p data-v-f884ef29> 判斷 Object.prototype.toString.call(arr) 是否等於 字串 &quot;[object Array]&quot; </p><br data-v-f884ef29><p data-v-f884ef29> 另外 數組本身 toString 被改寫過 , 不能通過數組的 toString 來判斷 </p><br data-v-f884ef29><p data-v-f884ef29>想判斷數據類型要 用 Object 的原型 來實現</p><br data-v-f884ef29><br data-v-f884ef29><div id="onejs028" class="articleCardTitle cor36" data-v-f884ef29> [ JS ] ≫ 數組去重? </div><p class="cor36" data-v-f884ef29>1.</p><p data-v-f884ef29>利用 set 結構 不允許 有 重複數據</p><br data-v-f884ef29><p data-v-f884ef29>返回 類 數組 物件 , 所以 new Set 後 要 Array.from 方法轉成數組</p><br data-v-f884ef29><p data-v-f884ef29>Array.from( new Set ( arr ) )</p><br data-v-f884ef29><br data-v-f884ef29><p class="cor36" data-v-f884ef29>2.</p><p data-v-f884ef29>indexOf 從前往後遍歷數組 返回元素 第一次出現 的下標</p><br data-v-f884ef29><p data-v-f884ef29>先 定義 一個 新數組</p><br data-v-f884ef29><p data-v-f884ef29>遍歷 原數組 每次通過 indexOf 方法 , 判斷 當前元素 是否在 新數組</p><br data-v-f884ef29><p data-v-f884ef29>值為 -1 代表 不在新數組 , 就 加入到 新數組 ＜... 就是去重後結果</p><br data-v-f884ef29><br data-v-f884ef29><p class="cor36" data-v-f884ef29>3.</p><p data-v-f884ef29>reduce 傳 2參數 1. 方法(A上一次值,B當前值) 2. 初始值</p><p data-v-f884ef29>循環方式: 每次都是上一次結果 pre</p><p data-v-f884ef29> 比如 第 1 次 1 , 把 1 放到 初始值 [ 1 ] , 第 2 次 [ 1, 2 ] , 每次循環都是上一次結果 </p><p data-v-f884ef29> return 判斷有無重複 , 上次結果 包不包含 當前項目 pre.includes(item) </p><p data-v-f884ef29>包含 ...&gt; 不要 , 直接返回當前數組 , 不包含 ...&gt; 加進 pre</p><p data-v-f884ef29>? pre : [ ...pre , item ]</p><br data-v-f884ef29><br data-v-f884ef29><p class="cor36" data-v-f884ef29>4.</p><p data-v-f884ef29>兩層 for 循環比較</p><p data-v-f884ef29>第 1 層循環選定 1 個值</p><p data-v-f884ef29>第 2 層循環 遍歷 其餘元素</p><p data-v-f884ef29>依次和 這個值 比較</p><p data-v-f884ef29>相同 ..&gt; splice 刪除</p><br data-v-f884ef29><br data-v-f884ef29><div class="cor36" data-v-f884ef29># 方法1: new set</div><div data-v-f884ef29>var arr = [ 1,2,3,2,4,1 ];</div><div data-v-f884ef29>console.log( new Set( arr ) );</div><div data-v-f884ef29>發現打印的是物件</div><div data-v-f884ef29>console.log( Array.from( new Set( arr ) ) );</div><div data-v-f884ef29>打印出陣列</div><div data-v-f884ef29>也可以</div><div data-v-f884ef29>console.log( [...new Set( arr ) ] );</div><br data-v-f884ef29><div data-v-f884ef29>封裝:</div><div data-v-f884ef29>function unique( arr ){</div><div class="pTwo" data-v-f884ef29>return [ Array.from( new Set(arr) ) ]</div><div data-v-f884ef29>}</div><div data-v-f884ef29>console.log( unique( arr ) );</div><br data-v-f884ef29><br data-v-f884ef29><div class="cor36" data-v-f884ef29>#</div><div data-v-f884ef29>function unique( arr ){</div><div class="pTwo" data-v-f884ef29>return [...new Set(arr)]</div><div data-v-f884ef29>}</div><div data-v-f884ef29>console.log( unique( arr ) );</div><br data-v-f884ef29><br data-v-f884ef29><div class="cor36" data-v-f884ef29>方法2: indexOf</div><div data-v-f884ef29> indexOf() 方法會回傳給定元素於陣列中第一個被找到之索引，若不存在於陣列中則回傳 -1 </div><br data-v-f884ef29><div data-v-f884ef29>var arr = [ 1,2,3,2,4,1 ];</div><div data-v-f884ef29>function unique( arr ){</div><div class="pTwo" data-v-f884ef29>var result = [];</div><div class="pTwo" data-v-f884ef29>for( var i = 0 ; i ＜ arr.length ; i++ ){</div><div class="pFou" data-v-f884ef29>if( result.indexOf( arr[i] ) == -1 ){</div><div class="pSix" data-v-f884ef29>result.push( arr[i] );</div><div class="pFou" data-v-f884ef29>}</div><div class="pTwo" data-v-f884ef29>}</div><div class="pTwo" data-v-f884ef29>return result;</div><div data-v-f884ef29>}</div><div data-v-f884ef29>console.log( unique( arr ) );</div><br data-v-f884ef29><div data-v-f884ef29>目標, 遍歷陣列, 看有沒有在 result 陣列, 沒有就添加</div><div data-v-f884ef29>去找 indexOf( arr [ i ] )</div><div data-v-f884ef29> 第一次去找 result 肯定是空的 ( 不存在 ) 就回傳 -1 就把他推進 result 裡面 </div><div data-v-f884ef29>不是 -1 就不動作 完成。</div><br data-v-f884ef29><br data-v-f884ef29><div class="cor36" data-v-f884ef29>方法3: reduce</div><div data-v-f884ef29>var arr = [ 1,2,3,2,4,1 ];</div><div data-v-f884ef29>function unique() {</div><div class="pTwo" data-v-f884ef29>var result = arr.reduce( ( pre , item ) =&gt; {</div><div class="pFou" data-v-f884ef29> return pre.includes ( item ) ? pre : [ ...pre , item ] </div><div class="pTwo" data-v-f884ef29>} , [] )</div><div class="pTwo" data-v-f884ef29>console.log ( result )</div><div data-v-f884ef29>}</div><div data-v-f884ef29>unique()</div><br data-v-f884ef29><div data-v-f884ef29>reduce 傳 2參數 1. 方法(A上一次值,B當前值) 2. 初始值</div><div data-v-f884ef29>循環方式: 每次都是上一次結果 pre</div><div data-v-f884ef29> 比如 第 1 次 1 , 把 1 放到 初始值 [ 1 ] , 第 2 次 [ 1, 2 ] , 每次循環都是上一次結果 </div><div data-v-f884ef29> return 判斷有無重複 , 上次結果 包不包含 當前項目 pre.includes(item) </div><div data-v-f884ef29>包含 ...&gt; 不要 , 直接返回當前數組 , 不包含 ...&gt; 加進 pre</div><div data-v-f884ef29>? pre : [ ...pre , item ]</div><br data-v-f884ef29><br data-v-f884ef29><div class="cor36" data-v-f884ef29>方法4: 兩層 for 循環比較</div><div data-v-f884ef29>var arr = [ 1,2,3,2,4,1 ];</div><div data-v-f884ef29>function unique() {</div><div class="pTwo" data-v-f884ef29>for ( let i = 0 ; i ＜ arr.length ; i++ ) {</div><div class="pFou" data-v-f884ef29>for ( let j = i +1 ; j ＜ arr.length ; j++ ) {</div><div class="pSix" data-v-f884ef29>if ( arr [ i ] === arr [ j ] ) {</div><div class="pEig" data-v-f884ef29>arr.splice ( j, 1 )</div><div class="pEig" data-v-f884ef29>j--</div><div class="pSix" data-v-f884ef29>}</div><div class="pFou" data-v-f884ef29>}</div><div class="pTwo" data-v-f884ef29>}</div><div class="pTwo" data-v-f884ef29>return arr</div><div data-v-f884ef29>}</div><br data-v-f884ef29><br data-v-f884ef29><div data-v-f884ef29>第 1 層循環選定 1 個值</div><div data-v-f884ef29>第 2 層循環 遍歷 其餘元素</div><div data-v-f884ef29>依次和 這個值 比較</div><div data-v-f884ef29>相同 ..&gt; splice 刪除</div><br data-v-f884ef29><br data-v-f884ef29><div id="onejs026" class="articleCardTitle cor36" data-v-f884ef29> [ JS ] ≫ 獲得陣列最後一項? </div><p data-v-f884ef29>1. pop()</p><p data-v-f884ef29>刪除陣列最後一個元素 , 並 返回該元素</p><br data-v-f884ef29><p data-v-f884ef29>缺: 會把原陣列 最後一個元素 刪掉</p><br data-v-f884ef29><br data-v-f884ef29><p data-v-f884ef29>2. length</p><p data-v-f884ef29>通過 array.length 得到陣列長度</p><br data-v-f884ef29><p data-v-f884ef29>陣列索引從 0 開始</p><br data-v-f884ef29><p data-v-f884ef29>最後一個元素 的索引 為 length - 1</p><br data-v-f884ef29><p data-v-f884ef29>array 中括號 length - 1 . . . array[length-1]</p><br data-v-f884ef29><br data-v-f884ef29><p data-v-f884ef29>3. slice()</p><p data-v-f884ef29> 通過 指定 起始索引 擷取對應元素 , 返回一個 由 這些元素 組成的 新數組 </p><br data-v-f884ef29><p data-v-f884ef29>當用 負數 做參數 , 會重 陣列 末端開始計數 ,</p><br data-v-f884ef29><p data-v-f884ef29>當 不傳 第 2 個參數時 , 表示一直找到 陣列 末端</p><br data-v-f884ef29><p data-v-f884ef29>arr.slice(-1)</p><br data-v-f884ef29><br data-v-f884ef29><p data-v-f884ef29>4. 陣列 at 方法</p><p data-v-f884ef29>接收 一個 整數 做索引值 , 並返回 索引 對應的 元素</p><br data-v-f884ef29><p data-v-f884ef29>傳 -1 代表 最後一個</p><br data-v-f884ef29><p data-v-f884ef29>arr.at(-1)</p><br data-v-f884ef29><div id="onejs030" class="articleCardTitle cor36" data-v-f884ef29> [ JS ] ≫ 數組清空? </div><p class="cor36" data-v-f884ef29>1.直接賦值 空數組</p><p data-v-f884ef29>let a = [ 1,2,3,4 ]</p><p data-v-f884ef29>a = []</p><br data-v-f884ef29><p class="cor36" data-v-f884ef29> 2. splice 方法 -&gt; 會修改原數組 -&gt; 返回值 是 你刪掉的元素 </p><p data-v-f884ef29>arr.splice(起始位置, 需要刪除元素的個數, 插入的值 )</p><br data-v-f884ef29><p data-v-f884ef29>let arr = [ 1,2,3,4 ]</p><p data-v-f884ef29>function fn( arr ) {</p><p class="pTwo" data-v-f884ef29>arr.splice( 0, arr.length )</p><p data-v-f884ef29>}</p><p data-v-f884ef29>fn( arr )</p><p data-v-f884ef29>console.log ( arr )</p><br data-v-f884ef29><p class="cor36" data-v-f884ef29>3.修改 length</p><p data-v-f884ef29>let arr = [ 1,2,3,4 ]</p><p data-v-f884ef29>arr.length = 0</p><p data-v-f884ef29>console.log ( arr )</p><div id="onejs023" class="articleCardTitle cor36" data-v-f884ef29> [ JS ] ≫ 如何判斷一個物件為空? </div><p data-v-f884ef29>1. JSON.stringify() 方法</p><p data-v-f884ef29>將 json 物件 轉成 json 字串</p><br data-v-f884ef29><p data-v-f884ef29>判斷 序列化後 的物件 是否 等於 字串花括號 &quot;{}&quot;</p><br data-v-f884ef29><br data-v-f884ef29><p data-v-f884ef29>2. Object.keys() 方法</p><p data-v-f884ef29>這方法把 物件中 屬性名 取出來 以數組形式返回</p><br data-v-f884ef29><p data-v-f884ef29>判斷 數組長度 是否為 0 , 為0 &gt; 該物件沒屬性 &gt; 空物件</p><br data-v-f884ef29><br data-v-f884ef29><p data-v-f884ef29>3. for in 遍歷物件</p><p data-v-f884ef29>定義一個函數 , 函數內返回 true</p><br data-v-f884ef29><p data-v-f884ef29>將 for in 循環寫入函數</p><br data-v-f884ef29><p data-v-f884ef29>在循環裡 寫 return false</p><br data-v-f884ef29><p data-v-f884ef29>如果 物件不為空 &gt; 有可遍歷屬性 &gt; 進入循環 &gt; 返回 false</p><br data-v-f884ef29><br data-v-f884ef29><p data-v-f884ef29>4. getOwnPropertyNames</p><br data-v-f884ef29><br data-v-f884ef29><div class="bgcVS" data-v-f884ef29><div data-v-f884ef29><span class="function" data-v-f884ef29>function </span><span class="word" data-v-f884ef29>isEmpty</span> <span class="brackets" data-v-f884ef29>(</span><span class="word" data-v-f884ef29>obj</span> <span class="brackets" data-v-f884ef29>){</span></div><div class="padTwo VSL" data-v-f884ef29><span class="then" data-v-f884ef29>return </span><span class="brackets" data-v-f884ef29>JSON</span><span class="variable" data-v-f884ef29>.stringify</span><span class="brackets" data-v-f884ef29>(</span> <span class="word" data-v-f884ef29>obj</span><span class="brackets" data-v-f884ef29>)</span> <span class="then" data-v-f884ef29>===</span><span class="src" data-v-f884ef29>&quot;{}&quot;</span><div data-v-f884ef29></div></div><div data-v-f884ef29><span class="brackets" data-v-f884ef29>}</span></div><br data-v-f884ef29><br data-v-f884ef29><div data-v-f884ef29><span class="function" data-v-f884ef29>function </span><span class="word" data-v-f884ef29>isEmpty2</span><span class="brackets" data-v-f884ef29>(</span> <span class="word" data-v-f884ef29>obj</span><span class="brackets" data-v-f884ef29>){</span></div><div class="padTwo VSL" data-v-f884ef29><span class="then" data-v-f884ef29>return </span><span class="brackets" data-v-f884ef29>Object</span><span class="word" data-v-f884ef29>.keys</span> <span class="brackets" data-v-f884ef29>(</span><span class="word" data-v-f884ef29>obj</span> <span class="brackets" data-v-f884ef29>)</span><span class="variable" data-v-f884ef29>.length</span><span class="then" data-v-f884ef29>===</span> <span class="number" data-v-f884ef29>0</span><div data-v-f884ef29></div></div><div data-v-f884ef29><span class="brackets" data-v-f884ef29>}</span></div><br data-v-f884ef29><br data-v-f884ef29><div data-v-f884ef29><span class="function" data-v-f884ef29>function </span><span class="word" data-v-f884ef29>isEmpty3</span><span class="brackets" data-v-f884ef29>(</span> <span class="word" data-v-f884ef29>obj</span><span class="brackets" data-v-f884ef29>){</span></div><div class="padTwo VSL" data-v-f884ef29><span class="function" data-v-f884ef29>let </span> <span class="word" data-v-f884ef29>flag</span><span class="then" data-v-f884ef29>=</span> <span class="number" data-v-f884ef29>true</span><div data-v-f884ef29><span class="then" data-v-f884ef29>for </span> <span class="brackets" data-v-f884ef29>(</span><span class="function" data-v-f884ef29>const </span><span class="word" data-v-f884ef29>key</span> <span class="function" data-v-f884ef29>in </span><span class="word" data-v-f884ef29>obj</span> <span class="brackets" data-v-f884ef29>){</span></div><div data-v-f884ef29></div><div class="padTwo VSL" data-v-f884ef29><span class="then" data-v-f884ef29>if</span> <span class="brackets" data-v-f884ef29>(</span><span class="word" data-v-f884ef29>key</span> <span class="brackets" data-v-f884ef29>){</span><div data-v-f884ef29></div><div class="padTwo VSL" data-v-f884ef29><span class="word" data-v-f884ef29>flag</span> <span class="then" data-v-f884ef29>=</span><span class="number" data-v-f884ef29>false</span><div data-v-f884ef29><span class="variable" data-v-f884ef29>break</span></div><div data-v-f884ef29></div></div><div data-v-f884ef29><span class="brackets" data-v-f884ef29>}</span></div></div><div data-v-f884ef29><span class="then" data-v-f884ef29>return </span> <span class="word" data-v-f884ef29>flag</span></div><div data-v-f884ef29><span class="brackets" data-v-f884ef29>}</span></div></div><div data-v-f884ef29><span class="brackets" data-v-f884ef29>}</span></div><br data-v-f884ef29><br data-v-f884ef29><div data-v-f884ef29><span class="function" data-v-f884ef29>function </span><span class="word" data-v-f884ef29>isEmpty4</span><span class="brackets" data-v-f884ef29>(</span> <span class="word" data-v-f884ef29>obj</span><span class="brackets" data-v-f884ef29>){</span></div><div class="padTwo VSL" data-v-f884ef29><span class="then" data-v-f884ef29>return </span><span class="brackets" data-v-f884ef29>Object</span><span class="word" data-v-f884ef29>.getOwnPropertyNames</span><span class="brackets" data-v-f884ef29>(</span> <span class="word" data-v-f884ef29>obj</span><span class="brackets" data-v-f884ef29>)</span><span class="variable" data-v-f884ef29>.length</span><span class="then" data-v-f884ef29>===</span> <span class="number" data-v-f884ef29>0</span><div data-v-f884ef29></div></div><div data-v-f884ef29><span class="brackets" data-v-f884ef29>}</span></div></div><div id="onejs023" class="articleCardTitle cor36" data-v-f884ef29> [ JS ] ≫ 如何判斷一個物件是否有某屬性? </div><p data-v-f884ef29>1. obj.hasOwnProperty(&quot;要找的屬性&quot;)</p><p data-v-f884ef29>返回 布林</p><br data-v-f884ef29><p data-v-f884ef29>只判斷 自身 , 不查找 原型鏈</p><br data-v-f884ef29><br data-v-f884ef29><p data-v-f884ef29>2. obj.屬性 or obj方括號屬性 obj[&quot;屬性&quot;]</p><p data-v-f884ef29>來獲取 物件上 屬性值</p><br data-v-f884ef29><p data-v-f884ef29>如果不存在 , 返回 undefined</p><br data-v-f884ef29><p data-v-f884ef29> ( 物件 和 原型鏈 都沒這屬性 ) ( 不能用在 屬性存在 但值為 undefined 時 ) </p><br data-v-f884ef29><br data-v-f884ef29><p data-v-f884ef29>3. in 運算符</p><p data-v-f884ef29>&quot;屬性&quot; in obj , true 在物件 or 原型鏈有此屬性</p><br data-v-f884ef29><p data-v-f884ef29>( 會找自身 找原型鏈 )</p><br data-v-f884ef29><br data-v-f884ef29><div id="onejs029" class="articleCardTitle cor36" data-v-f884ef29> [ JS ] ≫ 合併 2 物件? </div><p data-v-f884ef29>const a = { name: &quot;wayne&quot;, age: 18 }</p><p data-v-f884ef29>const b = { sex: &quot;male&quot;, hobby: &quot;sleep&quot; }</p><br data-v-f884ef29><p class="cor36" data-v-f884ef29>方法1: Object.assign</p><p data-v-f884ef29>const a = { name: &quot;wayne&quot;, age: 18 }</p><p data-v-f884ef29>const b = { sex: &quot;male&quot;, hobby: &quot;sleep&quot; }</p><p class="comment" data-v-f884ef29> let obj = Object.assign( a, b ); //會改變 a 物件 </p><p data-v-f884ef29> let obj = Object.assign( {}, a, b ); <span class="comment" data-v-f884ef29>//用空物件,可以不改變a,b</span></p><p data-v-f884ef29>console.log( obj );</p><p class="comment" data-v-f884ef29> // { name:&quot;wayne&quot;,age:18,sex:&quot;male&quot;,hobby:&quot;sleep&quot; } </p><br data-v-f884ef29><p class="cor36" data-v-f884ef29>方法2: 解構賦值 + ...擴展運算符</p><p data-v-f884ef29>const a = { name: &quot;wayne&quot;, age: 18 }</p><p data-v-f884ef29>const b = { sex: &quot;male&quot;, hobby: &quot;sleep&quot; }</p><p data-v-f884ef29>let obj = { ...a, ...b }</p><p data-v-f884ef29>console.log( obj );</p><p class="comment" data-v-f884ef29> // { name:&quot;wayne&quot;,age:18,sex:&quot;male&quot;,hobby:&quot;sleep&quot; } </p><br data-v-f884ef29><p class="cor36" data-v-f884ef29>方法3: 遍歷 物件 a 物件 b</p><p data-v-f884ef29>const a = { name: &quot;wayne&quot;, age: 18 }</p><p data-v-f884ef29>const b = { sex: &quot;male&quot;, hobby: &quot;sleep&quot; }</p><p data-v-f884ef29>const obj = {}</p><p data-v-f884ef29>for ( let key in a ) {</p><p class="pTwo" data-v-f884ef29>obj[ key ] = a[ key ]</p><p data-v-f884ef29>}</p><p data-v-f884ef29>for ( let key in b)</p><p class="pTwo" data-v-f884ef29>obj[ key ] = b[ key ]</p><p data-v-f884ef29>}</p><p data-v-f884ef29>coneol.log ( obj )</p><p class="comment" data-v-f884ef29> // { name:&quot;wayne&quot;,age:18,sex:&quot;male&quot;,hobby:&quot;sleep&quot; } </p><div id="onejs005" class="articleCardTitle cor36" data-v-f884ef29> [ JS ] ≫ let var const區別? </div><p data-v-f884ef29>var是ES5 let是ES6</p><p data-v-f884ef29>var是函數作用域 let支持塊級作用域</p><p data-v-f884ef29>var有變量提升 let沒有變量提升</p><p data-v-f884ef29>var可以重複聲明, let不能重複</p><p data-v-f884ef29>let和const的區別在於let可以重新賦值, const不行, 其他幾乎一樣</p><br data-v-f884ef29><br data-v-f884ef29><p class="cor36" data-v-f884ef29>聲明1個var變數之後還能在聲明同名var變數嗎?</p><p data-v-f884ef29>可以 不會報錯</p><br data-v-f884ef29><br data-v-f884ef29><p class="cor36" data-v-f884ef29>聲明1個let變數之後還能在聲明同名let變數嗎?</p><p data-v-f884ef29>不行 會報錯</p><br data-v-f884ef29><br data-v-f884ef29><p class="cor36" data-v-f884ef29>聲明1個const變數之後還能在聲明同名const變數嗎?</p><p data-v-f884ef29>不行 會報錯</p><br data-v-f884ef29><br data-v-f884ef29><div id="onejs006" class="articleCardTitle cor36" data-v-f884ef29> [ JS ] ≫ 展開運算符 </div><p data-v-f884ef29> 展開運算符 是把一個陣列展開成個別值，這個運算符後面必定接著一個陣列。 </p><p data-v-f884ef29>最常見的是用來組合陣列，對應的陣列方法是concat</p><br data-v-f884ef29><p data-v-f884ef29> : 比如const a 等於, 然後一個陣列, 然後a點點點b, 這個b是一個舊陣列, 然後它會把a和b合成形成新陣列, 然後返回給變量 </p><br data-v-f884ef29><div class="bgcVS" data-v-f884ef29><br data-v-f884ef29><div data-v-f884ef29><span class="function" data-v-f884ef29>const </span> <span class="word" data-v-f884ef29>a</span><span class="then" data-v-f884ef29>=</span> <span class="brackets" data-v-f884ef29>[</span><span class="number" data-v-f884ef29>1, 2, 3</span><span class="brackets" data-v-f884ef29>]</span></div><div data-v-f884ef29><span class="function" data-v-f884ef29>const </span> <span class="word" data-v-f884ef29>b</span><span class="then" data-v-f884ef29>=</span> <span class="brackets" data-v-f884ef29>[</span><span class="number" data-v-f884ef29>4, 5, 6 </span><span class="brackets" data-v-f884ef29>]</span></div><br data-v-f884ef29><div class="comment" data-v-f884ef29>用於拼接陣列</div><div data-v-f884ef29><span class="function" data-v-f884ef29>const </span> <span class="word" data-v-f884ef29>c</span><span class="then" data-v-f884ef29>=</span> <span class="brackets" data-v-f884ef29>[</span><span class="word" data-v-f884ef29>...a,...b</span><span class="brackets" data-v-f884ef29>] </span><span class="comment" data-v-f884ef29>// [1,2,3,4,5,6]</span></div><br data-v-f884ef29><div class="comment" data-v-f884ef29>也可以</div><div data-v-f884ef29><span class="function" data-v-f884ef29>const </span> <span class="word" data-v-f884ef29>d</span><span class="then" data-v-f884ef29>=</span> <span class="brackets" data-v-f884ef29>[</span><span class="word" data-v-f884ef29>...a,</span><span class="number" data-v-f884ef29>4, 5, 6</span><span class="brackets" data-v-f884ef29>] </span><span class="comment" data-v-f884ef29>// [1,2,3,4,5,6]</span></div><br data-v-f884ef29><div class="comment" data-v-f884ef29>也可以</div><div data-v-f884ef29><span class="word" data-v-f884ef29>a.push</span> <span class="brackets" data-v-f884ef29>(</span><span class="word" data-v-f884ef29>...b</span> <span class="brackets" data-v-f884ef29>)</span></div><div data-v-f884ef29><span class="word" data-v-f884ef29>console</span><span class="variable" data-v-f884ef29>.log</span><span class="brackets" data-v-f884ef29>(</span> <span class="word" data-v-f884ef29>a</span><span class="brackets" data-v-f884ef29>)</span></div><br data-v-f884ef29><div class="comment" data-v-f884ef29>可以做陣列淺拷貝</div><div data-v-f884ef29><span class="function" data-v-f884ef29>const </span> <span class="word" data-v-f884ef29>e</span><span class="then" data-v-f884ef29>=</span> <span class="brackets" data-v-f884ef29>[</span><span class="word" data-v-f884ef29>...a</span> <span class="brackets" data-v-f884ef29>]</span></div><div data-v-f884ef29><span class="word" data-v-f884ef29>e.push</span> <span class="brackets" data-v-f884ef29>(</span><span class="number" data-v-f884ef29>4</span> <span class="brackets" data-v-f884ef29>)</span><span class="comment" data-v-f884ef29>// 不會影響 a</span></div><br data-v-f884ef29><div class="comment" data-v-f884ef29> 淺拷貝是指複製值時，原本的變數和新的變數會指向同一個址 (reference) </div><div class="comment" data-v-f884ef29> 深拷貝是指在拷貝時不共享相同的址 (reference) </div><br data-v-f884ef29></div><br data-v-f884ef29><br data-v-f884ef29><p data-v-f884ef29>a={...b} 可以嗎?</p><br data-v-f884ef29><div class="bgcVS" data-v-f884ef29><br data-v-f884ef29><div data-v-f884ef29><span class="function" data-v-f884ef29>const </span><span class="word" data-v-f884ef29>obj1</span> <span class="then" data-v-f884ef29>=</span><span class="brackets" data-v-f884ef29>{</span> <span class="word" data-v-f884ef29>a:</span><span class="number" data-v-f884ef29>1,</span> <span class="word" data-v-f884ef29>b:</span><span class="number" data-v-f884ef29>2</span> <span class="brackets" data-v-f884ef29>};</span></div><div data-v-f884ef29><span class="function" data-v-f884ef29>const </span><span class="word" data-v-f884ef29>obj2</span> <span class="then" data-v-f884ef29>=</span><span class="brackets" data-v-f884ef29>{</span> <span class="word" data-v-f884ef29>c:</span><span class="number" data-v-f884ef29>3,</span> <span class="word" data-v-f884ef29>d:</span><span class="number" data-v-f884ef29>4</span> <span class="brackets" data-v-f884ef29>};</span></div><br data-v-f884ef29><span class="comment" data-v-f884ef29>// 可以 拷貝 物件</span><div data-v-f884ef29><span class="function" data-v-f884ef29>const </span><span class="word" data-v-f884ef29>newObj</span> <span class="then" data-v-f884ef29>=</span><span class="brackets" data-v-f884ef29>{</span> <span class="word" data-v-f884ef29>...obj1</span><span class="brackets" data-v-f884ef29>}</span><span class="word" data-v-f884ef29></span></div><br data-v-f884ef29><span class="comment" data-v-f884ef29>// 可以 merged 2 個物件</span><div data-v-f884ef29><span class="function" data-v-f884ef29>const </span><span class="word" data-v-f884ef29>merged</span> <span class="then" data-v-f884ef29>=</span><span class="brackets" data-v-f884ef29>{</span><span class="word" data-v-f884ef29>...obj1,obj2</span><span class="brackets" data-v-f884ef29>};</span></div><div data-v-f884ef29><span class="word" data-v-f884ef29>console.</span><span class="variable" data-v-f884ef29>log</span> <span class="brackets" data-v-f884ef29>(</span><span class="word" data-v-f884ef29>merged</span><span class="brackets" data-v-f884ef29>); </span><span class="comment" data-v-f884ef29>// {a: 1, b: 2, c: 3, d: 4 }</span></div><br data-v-f884ef29></div><br data-v-f884ef29><br data-v-f884ef29><p class="cor36" data-v-f884ef29>這三個點除了把一個東西展開,它在函數參數有什麼用?</p><p data-v-f884ef29>可以不去命名那個函數的參數, 直接用函數參數對象裡面的某一個東西</p><br data-v-f884ef29><p class="cor36" data-v-f884ef29>參數裡面可不可以用三個點?</p><p data-v-f884ef29>可以</p><br data-v-f884ef29><p class="cor36" data-v-f884ef29>在賦值可以用三個點嗎?</p><p data-v-f884ef29>可以</p><br data-v-f884ef29><p class="cor36" data-v-f884ef29> 我有一個陣列長度為10,我想把前面第一個元素命名為a,後面9個元素命名為新的數組叫b怎麼做? </p><p data-v-f884ef29> 方括號a然後點,然後逗號,然後點點點rest,然後方括號,然後等於array1,那就是a,那個a就是array裡的第一個 </p><br data-v-f884ef29><br data-v-f884ef29>',511),P3={class:"bgcVS"},O3=K('<br data-v-f884ef29><div class="comment" data-v-f884ef29>// 用於函數傳參</div><br data-v-f884ef29><div class="comment" data-v-f884ef29>// 實參的用法</div><div data-v-f884ef29><span class="function" data-v-f884ef29>const </span> <span class="word" data-v-f884ef29>a</span><span class="then" data-v-f884ef29>=</span> <span class="brackets" data-v-f884ef29>[</span><span class="number" data-v-f884ef29>1, 2, 3</span><span class="brackets" data-v-f884ef29>]</span></div>',5),N3=rs(()=>n("span",{class:"function"},"function ",-1)),$3=rs(()=>n("span",{class:"word"},"test",-1)),E3=rs(()=>n("span",{class:"brackets"},"(",-1)),M3=rs(()=>n("span",{class:"word"},"p1,p2,p3",-1)),A3=rs(()=>n("span",{class:"brackets"},"){",-1)),F3=K('<div class="pTwo" data-v-f884ef29><span class="word" data-v-f884ef29>console.</span><span class="variable" data-v-f884ef29>log</span> <span class="brackets" data-v-f884ef29>(</span><span class="word" data-v-f884ef29>p1</span> <span class="brackets" data-v-f884ef29>);</span></div><div class="pTwo" data-v-f884ef29><span class="word" data-v-f884ef29>console.</span><span class="variable" data-v-f884ef29>log</span> <span class="brackets" data-v-f884ef29>(</span><span class="word" data-v-f884ef29>p2</span> <span class="brackets" data-v-f884ef29>);</span></div><div class="pTwo" data-v-f884ef29><span class="word" data-v-f884ef29>console.</span><span class="variable" data-v-f884ef29>log</span> <span class="brackets" data-v-f884ef29>(</span><span class="word" data-v-f884ef29>p3</span> <span class="brackets" data-v-f884ef29>);</span></div><div class="brackets" data-v-f884ef29>}</div><div data-v-f884ef29><span class="word" data-v-f884ef29>test</span><span class="brackets" data-v-f884ef29>(</span><span class="word" data-v-f884ef29>...a</span> <span class="brackets" data-v-f884ef29>)</span></div><br data-v-f884ef29><div data-v-f884ef29><span class="function" data-v-f884ef29>function </span><span class="word" data-v-f884ef29>sum</span> <span class="brackets" data-v-f884ef29>(</span><span class="word" data-v-f884ef29>a,b,c</span> <span class="brackets" data-v-f884ef29>){</span></div><div class="pTwo" data-v-f884ef29><span class="then" data-v-f884ef29>return </span> <span class="word" data-v-f884ef29>a+b+c</span></div><span class="brackets" data-v-f884ef29>}</span><div data-v-f884ef29><span class="function" data-v-f884ef29>const </span><span class="word" data-v-f884ef29>sum</span> <span class="then" data-v-f884ef29>=</span><span class="brackets" data-v-f884ef29>(</span> <span class="word" data-v-f884ef29>a,b,c</span><span class="brackets" data-v-f884ef29>)</span> <span class="function" data-v-f884ef29>=&gt;</span><span class="word" data-v-f884ef29>a+b+c</span></div><div data-v-f884ef29><span class="word" data-v-f884ef29>sum</span> <span class="brackets" data-v-f884ef29>(</span><span class="word" data-v-f884ef29>...a</span> <span class="brackets" data-v-f884ef29>) </span><span class="comment" data-v-f884ef29>// 6</span></div><br data-v-f884ef29><div data-v-f884ef29><span class="function" data-v-f884ef29>const </span><span class="word" data-v-f884ef29>sum</span> <span class="then" data-v-f884ef29>=</span><span class="word" data-v-f884ef29>sum</span> <span class="brackets" data-v-f884ef29>(</span><span class="word" data-v-f884ef29>...a</span><span class="brackets" data-v-f884ef29>)</span></div><br data-v-f884ef29><div class="comment" data-v-f884ef29>// 形參的用法</div><div class="comment" data-v-f884ef29>// 形參的用法</div><div data-v-f884ef29><span class="word" data-v-f884ef29>conso.</span><span class="variable" data-v-f884ef29>log</span> <span class="brackets" data-v-f884ef29>(</span><span class="word" data-v-f884ef29>Math.max</span><span class="brackets" data-v-f884ef29>(</span><span class="src" data-v-f884ef29>必須是字符的形式,不能直接接陣列,必須逗號隔開 </span><span class="brackets" data-v-f884ef29>)</span> <span class="brackets" data-v-f884ef29>)</span></div><div data-v-f884ef29><span class="word" data-v-f884ef29>conso.</span><span class="variable" data-v-f884ef29>log</span> <span class="brackets" data-v-f884ef29>(</span><span class="word" data-v-f884ef29>Math.max</span><span class="brackets" data-v-f884ef29>(</span> <span class="number" data-v-f884ef29>1,2,3</span><span class="brackets" data-v-f884ef29>)</span> <span class="brackets" data-v-f884ef29>)</span><span class="comment" data-v-f884ef29>// 裡面要逗號</span></div><div class="comment" data-v-f884ef29>// 陣列沒有 求最大值 的方法</div><div data-v-f884ef29><span class="function" data-v-f884ef29>const </span> <span class="word" data-v-f884ef29>a</span><span class="then" data-v-f884ef29>=</span> <span class="brackets" data-v-f884ef29>[</span><span class="number" data-v-f884ef29>1, 2, 3</span><span class="brackets" data-v-f884ef29>]</span></div><div data-v-f884ef29><span class="function" data-v-f884ef29>const </span> <span class="word" data-v-f884ef29>b</span><span class="then" data-v-f884ef29>=</span> <span class="brackets" data-v-f884ef29>[</span><span class="number" data-v-f884ef29>4, 5, 6</span><span class="brackets" data-v-f884ef29>]</span></div><div data-v-f884ef29><span class="word" data-v-f884ef29>console.</span><span class="variable" data-v-f884ef29>log</span> <span class="brackets" data-v-f884ef29>(</span><span class="word" data-v-f884ef29>...a</span><span class="brackets" data-v-f884ef29>)</span><span class="comment" data-v-f884ef29>// 1 2 3</span><span class="comment" data-v-f884ef29>// 打印沒逗號,一樣能用在.max</span></div><span class="comment" data-v-f884ef29>...a === 1,2,3</span><div data-v-f884ef29><span class="word" data-v-f884ef29>console.</span><span class="variable" data-v-f884ef29>log</span> <span class="word" data-v-f884ef29>Math</span><span class="variable" data-v-f884ef29>.max</span> <span class="brackets" data-v-f884ef29>(</span><span class="word" data-v-f884ef29>...a</span><span class="brackets" data-v-f884ef29>)</span> <span class="comment" data-v-f884ef29>// 3</span></div><div data-v-f884ef29><span class="word" data-v-f884ef29>console.</span><span class="variable" data-v-f884ef29>log</span> <span class="word" data-v-f884ef29>Math</span><span class="variable" data-v-f884ef29>.min</span> <span class="brackets" data-v-f884ef29>(</span><span class="word" data-v-f884ef29>...a</span><span class="brackets" data-v-f884ef29>)</span> <span class="comment" data-v-f884ef29>// 3</span></div><div data-v-f884ef29><span class="word" data-v-f884ef29>console.</span><span class="variable" data-v-f884ef29>log</span> <span class="word" data-v-f884ef29>Math</span><span class="variable" data-v-f884ef29>.max</span> <span class="brackets" data-v-f884ef29>(</span><span class="word" data-v-f884ef29>...a,...b</span><span class="brackets" data-v-f884ef29>)</span> <span class="comment" data-v-f884ef29>// 6</span></div><br data-v-f884ef29><div class="comment" data-v-f884ef29>// 形參 &amp; 實參</div><div data-v-f884ef29><span class="function" data-v-f884ef29>function </span><span class="word" data-v-f884ef29>test</span> <span class="brackets" data-v-f884ef29>(</span><span class="word" data-v-f884ef29>形參1,形參2</span><span class="brackets" data-v-f884ef29>){ </span><span class="comment" data-v-f884ef29>// 函數聲明的小括號裡是 形參 </span></div><div class="comment pTwo" data-v-f884ef29>// 代碼</div><div class="brackets" data-v-f884ef29>}</div><div data-v-f884ef29><span class="word" data-v-f884ef29>test</span> <span class="brackets" data-v-f884ef29>(</span><span class="word" data-v-f884ef29>實參1,實參2</span><span class="brackets" data-v-f884ef29>) </span><span class="comment" data-v-f884ef29>// 函數調用的小括號裡是 實參</span></div><br data-v-f884ef29>',33),I3=K('<div id="" class="articleCardTitle cor36" data-v-f884ef29>[ JS ] ≫ 操作陣列?</div><p data-v-f884ef29>push pop unshift shift reduce find include</p><div id="onejs007" class="articleCardTitle cor36" data-v-f884ef29> [ JS ] ≫ 遍歷數組有幾種方式? </div><p data-v-f884ef29>for . forEach</p><br data-v-f884ef29><p data-v-f884ef29> map: 返回一個新數組 , 數組中的元素為 原始數組元素 調用函數 處理後的值 </p><br data-v-f884ef29><p data-v-f884ef29> filter: 創建一個新數組 , 數組中的元素 是通過檢查指定數組中 符合條件的 所有元素 </p><br data-v-f884ef29><p data-v-f884ef29>every: 每一個元素都滿足條件 返回 true , 否則 返回 false</p><br data-v-f884ef29><p data-v-f884ef29> some: 只要有一個以上的元素滿足條件 就 返回 true , 否則 返回 false , 退出循環 </p><br data-v-f884ef29><p data-v-f884ef29>reduce: 對數組中的 每個元素 執行一個 回掉函數 , 將其結果返回值</p><br data-v-f884ef29><br data-v-f884ef29><p class="cor36" data-v-f884ef29># forEach和map的區別?</p><p data-v-f884ef29> map需要有個返回值把它再返回到陣列, 它會接收到那個值, 修改當前元素 </p><br data-v-f884ef29><br data-v-f884ef29><p class="cor36" data-v-f884ef29># for in,for of,他們用在什麼場景?</p><p data-v-f884ef29>for of 循環獲取到的是一對鍵值對中的值 , 也就是 value</p><br data-v-f884ef29><p data-v-f884ef29>而 for in 獲取的是鍵名 , 也就是 key</p><br data-v-f884ef29><br data-v-f884ef29><p data-v-f884ef29>對數組 for of 返回的是 數組裡面的 元素值</p><br data-v-f884ef29><p data-v-f884ef29>for in 返回 key , 指每個元素的 索引值</p><br data-v-f884ef29><p data-v-f884ef29> for of 只能遍歷其底層帶有 iterator 接口的 數據結構 像 set map string array </p><br data-v-f884ef29><p data-v-f884ef29>物件沒有原生 iterator 接口 , 直接用 for of 會報錯</p><br data-v-f884ef29><p data-v-f884ef29>開發中 遍歷用 for in 更合適</p><br data-v-f884ef29><br data-v-f884ef29><p data-v-f884ef29>for in 返回 數組元素的 索引值 , 而不是 元素</p><br data-v-f884ef29><p data-v-f884ef29>而且 遍歷順序 有可能不是按照 實際數據的 內部順序</p><br data-v-f884ef29><p data-v-f884ef29>所以 通常遍歷數組用 for of</p><br data-v-f884ef29><br data-v-f884ef29><p data-v-f884ef29>總之 for in 適合遍歷 物件</p><p data-v-f884ef29>for of 適合遍歷 數組</p><div class="bgcVS" data-v-f884ef29><div data-v-f884ef29><span class="comment" data-v-f884ef29>// 1. 循環數組</span></div><div data-v-f884ef29><span class="word" data-v-f884ef29>cosnt</span> <span class="word" data-v-f884ef29>arr</span><span class="then" data-v-f884ef29>=</span> <span class="brackets" data-v-f884ef29>[</span><span class="src" data-v-f884ef29>&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;</span><span class="brackets" data-v-f884ef29>]</span></div><div data-v-f884ef29><span class="comment" data-v-f884ef29>// for...in 輸出 數組成員 在數組中 的索引</span></div><div data-v-f884ef29><span class="then" data-v-f884ef29>for </span> <span class="brackets" data-v-f884ef29>(</span><span class="function" data-v-f884ef29>let </span> <span class="word" data-v-f884ef29>n </span><span class="function" data-v-f884ef29>in </span> <span class="word" data-v-f884ef29>arr</span><span class="brackets" data-v-f884ef29>){</span></div><div class="padTwo VSL" data-v-f884ef29><span class="word" data-v-f884ef29>console.log</span><span class="brackets" data-v-f884ef29>(</span> <span class="word" data-v-f884ef29>n </span><span class="brackets" data-v-f884ef29>) </span><span class="comment" data-v-f884ef29>// 0 // 1 // 2 // 3</span><div data-v-f884ef29></div></div><div data-v-f884ef29><span class="brackets" data-v-f884ef29>}</span></div><br data-v-f884ef29><div data-v-f884ef29><span class="comment" data-v-f884ef29>// for...of 輸出 數組的成員</span></div><div data-v-f884ef29><span class="then" data-v-f884ef29>for </span> <span class="brackets" data-v-f884ef29>(</span><span class="function" data-v-f884ef29>let </span> <span class="word" data-v-f884ef29>n </span><span class="function" data-v-f884ef29>of </span> <span class="word" data-v-f884ef29>arr</span><span class="brackets" data-v-f884ef29>){</span></div><div class="padTwo VSL" data-v-f884ef29><span class="word" data-v-f884ef29>console.log</span><span class="brackets" data-v-f884ef29>(</span> <span class="word" data-v-f884ef29>n </span><span class="brackets" data-v-f884ef29>) </span><span class="comment" data-v-f884ef29>// a // b // c // d</span><div data-v-f884ef29></div></div><div data-v-f884ef29><span class="brackets" data-v-f884ef29>}</span></div><br data-v-f884ef29><div data-v-f884ef29><span class="comment" data-v-f884ef29>// 2. 循環物件</span></div><div data-v-f884ef29><span class="function" data-v-f884ef29>const </span><span class="word" data-v-f884ef29>obj</span> <span class="then" data-v-f884ef29>=</span><span class="brackets" data-v-f884ef29>{</span> <span class="word" data-v-f884ef29>n:</span><span class="number" data-v-f884ef29>4,</span> <span class="word" data-v-f884ef29>m:</span><span class="number" data-v-f884ef29>5,</span> <span class="word" data-v-f884ef29>k:</span><span class="number" data-v-f884ef29>6</span> <span class="brackets" data-v-f884ef29>}</span></div><div data-v-f884ef29><span class="comment" data-v-f884ef29>// for...in </span></div><div data-v-f884ef29><span class="then" data-v-f884ef29>for </span> <span class="brackets" data-v-f884ef29>(</span><span class="function" data-v-f884ef29>let </span> <span class="word" data-v-f884ef29>n </span><span class="function" data-v-f884ef29>in </span> <span class="word" data-v-f884ef29>obj</span><span class="brackets" data-v-f884ef29>){</span></div><div class="padTwo VSL" data-v-f884ef29><span class="comment" data-v-f884ef29>// 物件的屬性名</span></div><div class="padTwo VSL" data-v-f884ef29><span class="word" data-v-f884ef29>console.log</span><span class="brackets" data-v-f884ef29>(</span> <span class="word" data-v-f884ef29>n</span><span class="brackets" data-v-f884ef29>) </span><span class="comment" data-v-f884ef29>// n // m // k</span><div data-v-f884ef29></div></div><div class="padTwo VSL" data-v-f884ef29><span class="comment" data-v-f884ef29>// 物件的屬性值</span></div><div class="padTwo VSL" data-v-f884ef29><span class="word" data-v-f884ef29>console.</span><span class="variable" data-v-f884ef29>log</span> <span class="brackets" data-v-f884ef29>(</span><span class="word" data-v-f884ef29>obj</span> <span class="brackets" data-v-f884ef29>[</span><span class="word" data-v-f884ef29>n</span> <span class="brackets" data-v-f884ef29>])</span><span class="comment" data-v-f884ef29>// 4 // 5 // 6</span><div data-v-f884ef29></div></div><div data-v-f884ef29><span class="brackets" data-v-f884ef29>}</span></div><br data-v-f884ef29><div data-v-f884ef29><span class="comment" data-v-f884ef29>// for...of </span></div><div data-v-f884ef29><span class="then" data-v-f884ef29>for </span> <span class="brackets" data-v-f884ef29>(</span><span class="function" data-v-f884ef29>let </span> <span class="word" data-v-f884ef29>n </span><span class="function" data-v-f884ef29>of </span> <span class="word" data-v-f884ef29>obj</span><span class="brackets" data-v-f884ef29>){</span></div><div class="padTwo VSL" data-v-f884ef29><div data-v-f884ef29><span class="comment" data-v-f884ef29>// 報錯 , 不能循環</span></div><div data-v-f884ef29><span class="comment" data-v-f884ef29>// 因為沒有 iterator 接口</span></div></div><div data-v-f884ef29><span class="brackets" data-v-f884ef29>}</span></div><br data-v-f884ef29><div data-v-f884ef29><span class="comment" data-v-f884ef29>// 3. 循環數組物件</span></div><div data-v-f884ef29><span class="function" data-v-f884ef29>const </span><span class="word" data-v-f884ef29>arrObj</span> <span class="then" data-v-f884ef29>=</span><span class="brackets" data-v-f884ef29>[{</span></div><div class="padTwo VSL" data-v-f884ef29><span class="word" data-v-f884ef29>name:</span> <span class="src" data-v-f884ef29>&quot;wayne&quot;,</span><div data-v-f884ef29></div></div><div class="padTwo VSL" data-v-f884ef29><span class="word" data-v-f884ef29>number:</span> <span class="number" data-v-f884ef29>1</span><div data-v-f884ef29></div></div><div data-v-f884ef29><span class="brackets" data-v-f884ef29>}, {</span></div><div class="padTwo VSL" data-v-f884ef29><span class="word" data-v-f884ef29>name:</span> <span class="src" data-v-f884ef29>&quot;jack&quot;,</span><div data-v-f884ef29></div></div><div class="padTwo VSL" data-v-f884ef29><span class="word" data-v-f884ef29>number:</span> <span class="number" data-v-f884ef29>9</span><div data-v-f884ef29></div></div><div data-v-f884ef29><span class="brackets" data-v-f884ef29>}]</span></div><br data-v-f884ef29><div data-v-f884ef29><span class="then" data-v-f884ef29>for </span> <span class="brackets" data-v-f884ef29>(</span><span class="function" data-v-f884ef29>let </span> <span class="word" data-v-f884ef29>nObj </span><span class="function" data-v-f884ef29>of </span><span class="word" data-v-f884ef29>arrObj</span> <span class="brackets" data-v-f884ef29>){</span></div><div class="padTwo VSL" data-v-f884ef29><span class="word" data-v-f884ef29>console.</span><span class="variable" data-v-f884ef29>log</span> <span class="brackets" data-v-f884ef29>(</span><span class="word" data-v-f884ef29>nObj</span> <span class="brackets" data-v-f884ef29>)</span><span class="comment" data-v-f884ef29>//{name:&quot;wayne&quot;,number:1},{name:&quot;jack&quot;,number:9}</span></div><div class="padTwo VSL" data-v-f884ef29><span class="then" data-v-f884ef29>for </span> <span class="brackets" data-v-f884ef29>(</span><span class="function" data-v-f884ef29>let </span> <span class="word" data-v-f884ef29>n </span><span class="function" data-v-f884ef29>in </span> <span class="word" data-v-f884ef29>nObj</span><span class="brackets" data-v-f884ef29>){</span><div data-v-f884ef29><div class="padTwo VSL" data-v-f884ef29><span class="word" data-v-f884ef29>console.</span><span class="variable" data-v-f884ef29>log</span><span class="brackets" data-v-f884ef29>(</span><span class="word" data-v-f884ef29>nObj</span><span class="brackets" data-v-f884ef29>[</span> <span class="word" data-v-f884ef29>n</span><span class="brackets" data-v-f884ef29>]) </span><span class="comment" data-v-f884ef29>// wayne // 1 // jack // 9</span><div data-v-f884ef29></div></div><div data-v-f884ef29><span class="brackets" data-v-f884ef29>}</span></div></div></div><div data-v-f884ef29><span class="brackets" data-v-f884ef29>}</span></div><div data-v-f884ef29><span class="comment" data-v-f884ef29>// for in 循環 物件</span></div><div data-v-f884ef29><span class="comment" data-v-f884ef29>// for of 循環 數組</span></div></div><br data-v-f884ef29><br data-v-f884ef29><p class="cor36" data-v-f884ef29># for循環遍歷跟forEach遍歷,for循環可以中斷嗎?</p><p data-v-f884ef29>for 可以中斷 , forEach 不能中斷</p><br data-v-f884ef29><br data-v-f884ef29><div id="onejs008" class="articleCardTitle cor36" data-v-f884ef29>[ JS ] ≫ 閉包?</div><p class="comment" data-v-f884ef29>什麼是閉包 , 概念 , 用途 , 優 缺點</p><br data-v-f884ef29><p data-v-f884ef29>閉包 就是 有權訪問 另一個 函數作用域的變量 的函數</p><br data-v-f884ef29><p data-v-f884ef29>優點是 私有化數據 在 私有化數據的基礎上 保持數據</p><br data-v-f884ef29><p data-v-f884ef29>私有化數據是 把一些變量 私有化到函數裡面</p><br data-v-f884ef29><p data-v-f884ef29>為了保持數據</p><br data-v-f884ef29><p data-v-f884ef29> 例如 節流防抖 -&gt; 當第一次點擊時 , 我們 let time = 接收他的定時器 </p><br data-v-f884ef29><p data-v-f884ef29> 如果不用閉包暫存他 , 下次點擊 他是重新創建函數 , 也就重創一個定時器 </p><br data-v-f884ef29><p data-v-f884ef29>他們 2 個不是互通的 , 沒有引用做連通</p><br data-v-f884ef29><p data-v-f884ef29>也就是 使用閉包 他不會在 內存中消失</p><br data-v-f884ef29><p data-v-f884ef29>所以我們在下次 調用時 能獲取到 上一次定時器的 時間</p><br data-v-f884ef29><br data-v-f884ef29><p data-v-f884ef29>缺點 可能導致內存洩漏</p><br data-v-f884ef29><br data-v-f884ef29><p data-v-f884ef29># 閉包一定會造成內存洩漏嗎?</p><p data-v-f884ef29>不一定 , 看瀏覽器垃圾回收機制</p><br data-v-f884ef29><p data-v-f884ef29> 閉包造成內存洩漏是瀏覽器問題, 它沒有及時的清裡內存, 所以是閉包容易造成內存洩漏, 因為實現閉包的拉圾回收比普通變量難一點, 歷史上發生的有IE6IE7, 但現在已經沒有了 </p><br data-v-f884ef29><br data-v-f884ef29><p data-v-f884ef29>閉包的目的? 用來封裝一個數據,提供一些API給外部使用</p><br data-v-f884ef29><p data-v-f884ef29>物件的目的? 內部包含一些數據,提供一些方法給外部使用</p><br data-v-f884ef29><p data-v-f884ef29> 閉包和物件的區別?(閉包是在你不想用物件時來代替物件) 物件的拆卸數據可以透過屬性暴露出來, 閉包想要暴露那些數據你得單獨給他寫個函數 </p><br data-v-f884ef29><br data-v-f884ef29><div id="onejs009" class="articleCardTitle cor36" data-v-f884ef29> [ JS ] ≫ JS 的立即執行函數是幹嘛用的?? </div><p data-v-f884ef29>避免汙染全局環境</p><br data-v-f884ef29><p class="cor36" data-v-f884ef29># IIFE立即執行函數它的語法?</p><p data-v-f884ef29>一個匿名函數, 外面包一層括號, 後面再加一個小括號</p><br data-v-f884ef29><p class="cor36" data-v-f884ef29># 為什麼要包一層括號,後面再加一個小括號?</p><p data-v-f884ef29> 把函數看成一個整體, 首先你匿名函數可以以傳參的形式存在, 也可以以一些其他形式存在, 但是你不行就直接寫在一段JS的外部, 這樣他語法就通過不了, 因為它不是一個整體, 你function後面直接跟一個括號, 他不知道是甚麼東西 </p><br data-v-f884ef29><div id="onejs010" class="articleCardTitle cor36" data-v-f884ef29> [ JS ] ≫ this 指向 </div><p data-v-f884ef29>1. 全局對象 的 this 指向</p><p data-v-f884ef29>指向 window</p><br data-v-f884ef29><br data-v-f884ef29><p data-v-f884ef29>2. 全局作用域 or 普通函數中的 this</p><p data-v-f884ef29>指向 window</p><br data-v-f884ef29><br data-v-f884ef29><p data-v-f884ef29>3. this 指向最後調用他的那個對象</p><p data-v-f884ef29>在不是 箭頭函數 情況下</p><br data-v-f884ef29><br data-v-f884ef29><p data-v-f884ef29>4. new 關鍵字改變 this 指向</p><p data-v-f884ef29></p><br data-v-f884ef29><br data-v-f884ef29><p data-v-f884ef29></p><p data-v-f884ef29></p><br data-v-f884ef29><br data-v-f884ef29><p data-v-f884ef29></p><p data-v-f884ef29></p><br data-v-f884ef29><br data-v-f884ef29><p data-v-f884ef29></p><p data-v-f884ef29></p><br data-v-f884ef29><br data-v-f884ef29><p data-v-f884ef29></p><p data-v-f884ef29></p><br data-v-f884ef29><br data-v-f884ef29><p data-v-f884ef29></p><p data-v-f884ef29></p><table data-v-f884ef29><tr data-v-f884ef29><th data-v-f884ef29><div class="pad20" data-v-f884ef29>調用方式</div></th><th data-v-f884ef29><div class="pad20" data-v-f884ef29>示例</div></th><th data-v-f884ef29><div class="pad20" data-v-f884ef29>函數中this指向</div></th></tr><tr data-v-f884ef29><td data-v-f884ef29><div class="pad20" data-v-f884ef29>通過new調用</div></td><td data-v-f884ef29><div class="pad20" data-v-f884ef29>mew method()</div></td><td data-v-f884ef29><div class="pad20" data-v-f884ef29>新物件</div></td></tr><tr data-v-f884ef29><td data-v-f884ef29><div class="pad20" data-v-f884ef29>直接調用</div></td><td data-v-f884ef29><div class="pad20" data-v-f884ef29>method()</div></td><td data-v-f884ef29><div class="pad20" data-v-f884ef29>全局對象window</div></td></tr><tr data-v-f884ef29><td data-v-f884ef29><div class="pad20" data-v-f884ef29>通過物件調用</div></td><td data-v-f884ef29><div class="pad20" data-v-f884ef29>obj.method()</div></td><td data-v-f884ef29><div class="pad20" data-v-f884ef29>前面的物件</div></td></tr><tr data-v-f884ef29><td data-v-f884ef29><div class="pad20" data-v-f884ef29>call.apply.bind</div></td><td data-v-f884ef29><div class="pad20" data-v-f884ef29>method.call(ctx)</div></td><td data-v-f884ef29><div class="pad20" data-v-f884ef29>第一個參數</div></td></tr></table><div id="onejs011" class="articleCardTitle cor36" data-v-f884ef29> [ JS ] ≫ 箭頭函數和普通function有甚麼區別? </div><p data-v-f884ef29>在執行過程中不會初始化 this</p><br data-v-f884ef29><p data-v-f884ef29>不會初始化 aruguments</p><br data-v-f884ef29><p data-v-f884ef29>不能被 new</p><br data-v-f884ef29><p data-v-f884ef29>沒有 prototype</p><br data-v-f884ef29><p data-v-f884ef29>不能當成構造函數執行</p><br data-v-f884ef29><p class="cor36" data-v-f884ef29># 箭頭函數什麼情況可以省略return?</p><p data-v-f884ef29>不加括弧號的時候, 只有一個語句(一句代碼,可以有多個分號)</p><br data-v-f884ef29><p class="cor36" data-v-f884ef29># 箭頭函數的this指向哪裡?</p><p data-v-f884ef29>外部的this or (捕獲其上下文中的this)</p><br data-v-f884ef29><p data-v-f884ef29>箭頭函數不創建 this , 他從自己的作用域鏈的上一層沿用 this</p><div id="onejs012" class="articleCardTitle cor36" data-v-f884ef29> [ JS ] ≫ 原型鏈是什麼? </div><p class="cor36" data-v-f884ef29>物件,原型,物件的構造函數間的關係?</p><br data-v-f884ef29><p data-v-f884ef29>首先任何物件都會有屬於它的隱藏屬性下滑線proto屬性__proto__</p><br data-v-f884ef29><p data-v-f884ef29>這個隱藏屬性就會指向它的構造函數的prototype</p><br data-v-f884ef29><p data-v-f884ef29>這時我們就可以說這個物件的原型就是它的構造函數的prototype</p><br data-v-f884ef29><p data-v-f884ef29>這就是原型</p><br data-v-f884ef29><p data-v-f884ef29> 然後原型鏈就是比如A的原型是B, B的原型是C, 這樣一條像鏈式的就稱為原型鏈 </p><br data-v-f884ef29><br data-v-f884ef29><p data-v-f884ef29> : 定義一個物件A,它的原型的地址對應著object.prototype,object.prototype它的原型又會到了null 這樣一條像鏈式的就稱為原型鏈 </p><br data-v-f884ef29><br data-v-f884ef29><p data-v-f884ef29>A指向一個物件,意味著A存的是什麼東西?(注意JS沒有指向) A它的地址</p><br data-v-f884ef29><br data-v-f884ef29><div id="onejs013" class="articleCardTitle cor36" data-v-f884ef29> [ JS ] ≫ new 做了什麼? </div><br data-v-f884ef29><p data-v-f884ef29>new後面跟一個構造函數</p><br data-v-f884ef29><p data-v-f884ef29>先創造一個臨時物件</p><br data-v-f884ef29><p data-v-f884ef29>將這個 臨時物件 原型 綁定構造函數的 prototype</p><br data-v-f884ef29><p data-v-f884ef29>再把裡面的 this 指定為這個 臨時物件</p><br data-v-f884ef29><p data-v-f884ef29>再執行構造函數</p><br data-v-f884ef29><p data-v-f884ef29>最後return這個臨時物件</p><br data-v-f884ef29><p class="cor36" data-v-f884ef29># 當我 new 構造函數</p><p data-v-f884ef29>1. 創建 新物件 (空的)</p><p data-v-f884ef29>2. 構造函數的 this 指向 新物件</p><p data-v-f884ef29>3. 執行 構造函數 代碼</p><p class="pFou" data-v-f884ef29>this. 指向物件 . . . obj.name=&quot;wayne&quot;</p><p class="pFou" data-v-f884ef29>name屬性 =賦值 &quot;wayne&quot;</p><p data-v-f884ef29>4. 返回 這個 新物件</p><br data-v-f884ef29><br data-v-f884ef29><p class="cor36" data-v-f884ef29> # 如果我再new後面構造函數後面最後一行加一個return一個數組會怎樣? </p><p data-v-f884ef29>它就會代替這個 this</p><br data-v-f884ef29><p class="cor36" data-v-f884ef29> # 如果我再new後面構造函數後面最後一行加一個return一個物件會怎樣? </p><p data-v-f884ef29>它就會代替這個 this</p><br data-v-f884ef29><p class="cor36" data-v-f884ef29># 原型綁定是綁到這個this的哪個屬性上面?</p><p data-v-f884ef29>__proto__</p><br data-v-f884ef29><p data-v-f884ef29>new後面跟一個構造函數,這個函數可以是箭頭函數嗎? _ 不可以</p><br data-v-f884ef29><p class="cor36" data-v-f884ef29># 你new出來的對象原型是什麼?</p><p data-v-f884ef29>new 出來的 物件的 原型 指向 構造函數的 原型</p><br data-v-f884ef29><br data-v-f884ef29><div id="onejs014" class="articleCardTitle cor36" data-v-f884ef29>[ JS ] ≫ 繼承?</div><p class="cor36" data-v-f884ef29>1. 原型鏈繼承</p><p data-v-f884ef29>每個 構造函數 都有一個 原型對象 (prototype),</p><br data-v-f884ef29><p data-v-f884ef29>每個 實例對象 包含一個 指向 原型對象的 指針 (__proto__)</p><br data-v-f884ef29><p data-v-f884ef29>當代碼 讀取實例的 某屬性時 ,</p><br data-v-f884ef29><p data-v-f884ef29>都會先在 實例上 搜尋這個屬性, 沒找到 則搜索原型對象</p><br data-v-f884ef29><p class="cor36" data-v-f884ef29>缺點</p><p data-v-f884ef29> 包含引用類型值的 原型屬性 會被所有實例共享。 ( 當一個實例改變該屬性 , 其他也會改 ) </p><br data-v-f884ef29><p class="cor36" data-v-f884ef29>2. 構造函數繼承</p><p data-v-f884ef29>通過使用 call apply 方法 ,</p><br data-v-f884ef29><p data-v-f884ef29>可以在子類中 執行父類 構造函數 , 從而實現繼承</p><br data-v-f884ef29><p class="cor36" data-v-f884ef29>優點</p><p data-v-f884ef29>原型屬性 不會 被共享</p><p class="cor36" data-v-f884ef29>缺點</p><p data-v-f884ef29>不能繼承 父類 prototype 上的屬性</p><br data-v-f884ef29><p class="cor36" data-v-f884ef29>3. 構造函數繼承 + 構造函數繼承</p><p data-v-f884ef29>child.prototype = new Parent()</p><p class="cor36" data-v-f884ef29>優點</p><p data-v-f884ef29>1. 原型屬性不會被共享</p><p data-v-f884ef29>2. 可以繼承父類的 原型鏈上的 屬性和方法</p><br data-v-f884ef29><p class="cor36" data-v-f884ef29>點</p><p data-v-f884ef29>調用了 2 次 Parent()</p><p data-v-f884ef29>他在 child 的 prototype 上添加了父類的 屬性和方法</p><br data-v-f884ef29><br data-v-f884ef29><div id="onejs015" class="articleCardTitle cor36" data-v-f884ef29> [ JS ] ≫ call apply bind </div><p class="cor36" data-v-f884ef29>call和apply有什麼區別?</p><p data-v-f884ef29>call指定一個this, 傳參數, 直接調用他,</p><br data-v-f884ef29><p data-v-f884ef29>apply指定this, 傳的參數是放在陣列裡面的, 也是直接調用</p><br data-v-f884ef29><br data-v-f884ef29><p class="cor36" data-v-f884ef29>什麼情況下只能用apply不能用call?</p><p data-v-f884ef29>你要傳的數據是陣列的話用apply, 你傳的參數很多也用apply</p><br data-v-f884ef29><br data-v-f884ef29><p class="cor36" data-v-f884ef29># 現在ES6,我能不能強行用call? _ 可以</p><p data-v-f884ef29> sumNumbers.call(null, ...numbers); 直接函數.call,null三個點把那個陣列展開 </p><br data-v-f884ef29><br data-v-f884ef29><p class="cor36" data-v-f884ef29># call和bind有什麼區別?</p><p data-v-f884ef29> bind只綁定this,但它不去立即調用它,而是返回一個綁定這個this的新函數 </p><br data-v-f884ef29><br data-v-f884ef29><div id="onejs016" class="articleCardTitle cor36" data-v-f884ef29> [ JS ] ≫ 防抖是什麼? </div><p data-v-f884ef29> 防斗比如一個input標籤, 然後input標籤要實現一個功能, 再用戶輸入的時候彈出相應的提示, </p><br data-v-f884ef29><br data-v-f884ef29><p data-v-f884ef29>所以監聽它的input事件, 但是input事件是在用戶每次輸入的時候觸發,</p><br data-v-f884ef29><br data-v-f884ef29><p data-v-f884ef29>所以需要設置一個函數的防斗來實現一個功能,</p><br data-v-f884ef29><br data-v-f884ef29><p data-v-f884ef29>就是當用戶輸入之後停頓某個時間沒有再次輸入才會執行這個函數,</p><br data-v-f884ef29><br data-v-f884ef29><p data-v-f884ef29>否則不執行, 重新計時</p><br data-v-f884ef29><br data-v-f884ef29><div class="bgcVS" data-v-f884ef29><div data-v-f884ef29><span class="then" data-v-f884ef29>＜</span> <span class="number" data-v-f884ef29>input </span><span class="word" data-v-f884ef29>type</span> <span class="then" data-v-f884ef29>=</span><span class="src" data-v-f884ef29>&quot;text&quot;</span> <span class="then" data-v-f884ef29>&gt;</span></div><div data-v-f884ef29><span class="function" data-v-f884ef29>let </span><span class="word" data-v-f884ef29>oInput</span> <span class="then" data-v-f884ef29>=</span><span class="word" data-v-f884ef29>document</span><span class="variable" data-v-f884ef29>.querySelector</span><span class="brackets" data-v-f884ef29>(</span> <span class="src" data-v-f884ef29>&quot;input&quot;</span><span class="brackets" data-v-f884ef29>)</span></div><div data-v-f884ef29><span class="function" data-v-f884ef29>let </span> <span class="word" data-v-f884ef29>time</span><span class="then" data-v-f884ef29>=</span> <span class="then" data-v-f884ef29>null</span></div><div data-v-f884ef29><span class="word" data-v-f884ef29>oInput</span><span class="variable" data-v-f884ef29>.oninput</span><span class="then" data-v-f884ef29>=</span><span class="word" data-v-f884ef29>debounce</span><span class="brackets" data-v-f884ef29>(</span><span class="variable" data-v-f884ef29>function</span><span class="brackets" data-v-f884ef29>(){</span></div><div class="padTwo VSL" data-v-f884ef29><span class="word" data-v-f884ef29>console</span><span class="variable" data-v-f884ef29>.log</span><span class="brackets" data-v-f884ef29>(</span><span class="then" data-v-f884ef29>this</span><span class="brackets" data-v-f884ef29>) </span><div data-v-f884ef29></div></div><div data-v-f884ef29><span class="brackets" data-v-f884ef29>},</span><span class="number" data-v-f884ef29>1000</span><span class="brackets" data-v-f884ef29>)</span></div><div data-v-f884ef29><span class="function" data-v-f884ef29>function </span><span class="word" data-v-f884ef29>debounce</span><span class="brackets" data-v-f884ef29>(</span><span class="word" data-v-f884ef29>fn,delay</span><span class="brackets" data-v-f884ef29>){</span></div><div class="padTwo VSL" data-v-f884ef29><div data-v-f884ef29><span class="comment" data-v-f884ef29>//console.log(this)</span></div><span class="function" data-v-f884ef29>let </span><span class="word" data-v-f884ef29>time</span> <span class="then" data-v-f884ef29>=</span><span class="then" data-v-f884ef29>null</span><div data-v-f884ef29></div><span class="then" data-v-f884ef29>return </span><span class="function" data-v-f884ef29>function </span><span class="brackets" data-v-f884ef29>(){</span><div data-v-f884ef29></div><div class="padTwo VSL" data-v-f884ef29><span class="then" data-v-f884ef29>if</span><span class="brackets" data-v-f884ef29>(</span><span class="word" data-v-f884ef29>time</span><span class="then" data-v-f884ef29>!==null</span><span class="brackets" data-v-f884ef29>){</span><div data-v-f884ef29></div><div class="padTwo VSL" data-v-f884ef29><span class="word" data-v-f884ef29>clearTimeout</span><span class="brackets" data-v-f884ef29>(</span><span class="word" data-v-f884ef29>t</span><span class="brackets" data-v-f884ef29>)</span><div data-v-f884ef29></div></div><div data-v-f884ef29><span class="brackets" data-v-f884ef29>}</span></div><div data-v-f884ef29><span class="word" data-v-f884ef29>time</span><span class="then" data-v-f884ef29>=</span><span class="variable" data-v-f884ef29>setTimeout</span><span class="brackets" data-v-f884ef29>(()</span><span class="function" data-v-f884ef29>=&gt; </span><span class="brackets" data-v-f884ef29>{</span><div class="padTwo VSL" data-v-f884ef29><span class="variable" data-v-f884ef29>fn</span><span class="number" data-v-f884ef29>.call</span><span class="brackets" data-v-f884ef29>(</span><span class="then" data-v-f884ef29>this</span><span class="brackets" data-v-f884ef29>)</span><span class="brackets" data-v-f884ef29>()</span></div><div data-v-f884ef29><span class="brackets" data-v-f884ef29>},</span><span class="number" data-v-f884ef29>delay</span><span class="brackets" data-v-f884ef29>)</span></div></div></div><div data-v-f884ef29><span class="brackets" data-v-f884ef29>}</span></div></div><div data-v-f884ef29><span class="brackets" data-v-f884ef29>}</span></div></div><p class="cor36" data-v-f884ef29>節流是什麼?</p><p data-v-f884ef29> 節流類似一個技能的冷卻, 就是當你進行一個操作後, 要等一段時間才能再次進行這個操作, </p><div class="bgcVS" data-v-f884ef29><div data-v-f884ef29><span class="word" data-v-f884ef29>window</span><span class="variable" data-v-f884ef29>.onscroll</span><span class="then" data-v-f884ef29>=</span> <span class="word" data-v-f884ef29>throttle</span><span class="brackets" data-v-f884ef29>(</span><span class="function" data-v-f884ef29>function </span><span class="brackets" data-v-f884ef29>(){</span></div><div class="padTwo VSL" data-v-f884ef29><span class="variable" data-v-f884ef29>alert</span><span class="brackets" data-v-f884ef29>(</span> <span class="src" data-v-f884ef29>&quot;廣告&quot;</span><span class="brackets" data-v-f884ef29>)</span><div data-v-f884ef29></div></div><div data-v-f884ef29><span class="brackets" data-v-f884ef29>},</span> <span class="number" data-v-f884ef29>2000</span><span class="brackets" data-v-f884ef29>)</span></div><div data-v-f884ef29><span class="function" data-v-f884ef29>function </span><span class="word" data-v-f884ef29>throttle</span><span class="brackets" data-v-f884ef29>(</span><span class="word" data-v-f884ef29>fn,delay</span><span class="brackets" data-v-f884ef29>){</span></div><div class="padTwo VSL" data-v-f884ef29><span class="function" data-v-f884ef29>let </span> <span class="word" data-v-f884ef29>time</span><span class="then" data-v-f884ef29>=</span> <span class="number" data-v-f884ef29>true</span><div data-v-f884ef29></div><span class="then" data-v-f884ef29>return </span><span class="function" data-v-f884ef29>function </span><span class="brackets" data-v-f884ef29>(){</span><div data-v-f884ef29></div><div class="padTwo VSL" data-v-f884ef29><span class="then" data-v-f884ef29>if</span> <span class="brackets" data-v-f884ef29>(</span><span class="word" data-v-f884ef29>time</span> <span class="brackets" data-v-f884ef29>){</span><div data-v-f884ef29></div><div class="padTwo VSL" data-v-f884ef29><span class="variable" data-v-f884ef29>setTimeout</span><span class="brackets" data-v-f884ef29>(()</span><span class="function" data-v-f884ef29>=&gt;</span><span class="brackets" data-v-f884ef29>{</span><div data-v-f884ef29></div><div class="padTwo VSL" data-v-f884ef29><span class="word" data-v-f884ef29>fn</span><span class="variable" data-v-f884ef29>.call</span><span class="brackets" data-v-f884ef29>(</span><span class="then" data-v-f884ef29>this</span><span class="brackets" data-v-f884ef29>) </span><span class="comment" data-v-f884ef29>// 綁在 window 有沒有 call 都可以</span><div data-v-f884ef29><span class="word" data-v-f884ef29>time</span><span class="then" data-v-f884ef29>=</span><span class="number" data-v-f884ef29>true</span></div><div data-v-f884ef29></div></div><div data-v-f884ef29><span class="brackets" data-v-f884ef29>},</span><span class="word" data-v-f884ef29>delay</span><span class="brackets" data-v-f884ef29>)</span></div></div><div data-v-f884ef29><span class="brackets" data-v-f884ef29>}</span></div><div data-v-f884ef29><span class="word" data-v-f884ef29>time</span> <span class="then" data-v-f884ef29>=</span><span class="number" data-v-f884ef29>false</span></div></div><div data-v-f884ef29><span class="brackets" data-v-f884ef29>}</span></div></div><div data-v-f884ef29><span class="brackets" data-v-f884ef29>}</span></div></div><br data-v-f884ef29><br data-v-f884ef29><p class="cor36" data-v-f884ef29>proxy做什麼的?</p><p data-v-f884ef29> 用於接管物件內部屬性的讀取或函數的調用方法, 它跟object.definedproperty是一樣的功能, 但是object.definedproperty一次只能處理一個屬性 </p><br data-v-f884ef29><br data-v-f884ef29><div id="onejs017" class="articleCardTitle cor36" data-v-f884ef29> [ JS ] ≫ 什麼是DOM? </div><p data-v-f884ef29>DOM是文檔物件模型</p><br data-v-f884ef29><p data-v-f884ef29>用途是把網頁變成JS中的對象來進行增刪改查操作</p><br data-v-f884ef29><p data-v-f884ef29>平時要操作DOM可以通過document.getElementByID</p><br data-v-f884ef29><p data-v-f884ef29>然後去對他的各種屬性進行修改,</p><br data-v-f884ef29><p class="cor36" data-v-f884ef29>什麼是事件捕獲?什麼是事件冒泡?</p><p data-v-f884ef29> 事件捕獲是從最外層然後向觸發事件子層去一層一層往下傳遞事件, 冒泡是從子層向外層一層一層冒泡這個事件 </p><br data-v-f884ef29><br data-v-f884ef29><p class="cor36" data-v-f884ef29>那一次點擊會同時觸發捕獲和冒泡嗎?</p><p data-v-f884ef29>會,不管什麼事件一定會先捕獲在冒泡</p><br data-v-f884ef29><p data-v-f884ef29>先從document一層一層的到那個元素</p><br data-v-f884ef29><p data-v-f884ef29>然後再從那個元素一層一層到 document</p><br data-v-f884ef29><p data-v-f884ef29>你監聽捕獲只不過是在其中插入一個函數而已</p><br data-v-f884ef29><p data-v-f884ef29>監聽捕獲是在捕獲那邊插入函數</p><br data-v-f884ef29><p data-v-f884ef29>監聽冒泡是在冒泡那邊插入一個函數</p><br data-v-f884ef29><p data-v-f884ef29> 如果你兩個都監聽還是先經過捕獲階段觸發你的函數, 經過冒泡階段在觸發函數 </p><br data-v-f884ef29><br data-v-f884ef29><p class="cor36" data-v-f884ef29># BOM</p><br data-v-f884ef29><p data-v-f884ef29>BOM是瀏覽器對象模型, 用途是用JS來操作瀏覽器來前進後退和地址欄</p><br data-v-f884ef29><br data-v-f884ef29><p class="cor36" data-v-f884ef29># DOM的事件模型是什麼?</p><p data-v-f884ef29>觸發事件時, 先從上往下進行事件捕獲階段</p><br data-v-f884ef29><p data-v-f884ef29>從觸發結點最上面 document 往下到觸發節點</p><br data-v-f884ef29><p data-v-f884ef29>然後監聽事件有沒有發生</p><br data-v-f884ef29><p data-v-f884ef29>要有同類型事件發生的話就執行函數</p><br data-v-f884ef29><p data-v-f884ef29>之後再從這個節點往上進行事件冒泡</p><br data-v-f884ef29><p class="cor36" data-v-f884ef29># 不想某一個元素往上冒泡可以用什麼API?</p><br data-v-f884ef29><p data-v-f884ef29>e.stopPropergation</p><br data-v-f884ef29><br data-v-f884ef29><p class="cor36" data-v-f884ef29> 假設我點擊一個按鈕得到事件e,我把事件e綁定到變數上面,過一秒後打印這個變數,請問打印出什麼? </p><p data-v-f884ef29> 空 , 因為 setTimeout 他是一個 異步事件, 他等同步執行完再執行, 這時他那個變量 e 不存在了 </p><br data-v-f884ef29><br data-v-f884ef29><p class="cor36" data-v-f884ef29>事件委託是什麼?</p><p data-v-f884ef29>假設有父子元素, 監聽子元素事件</p><br data-v-f884ef29><p data-v-f884ef29>假設ul裡面有很多li, 然後要求點擊li觸發一個事件</p><br data-v-f884ef29><p data-v-f884ef29>假如在每個li都綁定事件 會增大代碼量和內存</p><br data-v-f884ef29><p data-v-f884ef29> 可以根據事件冒泡在list item上面觸發的事件會向上冒泡到父元素 ul 上面 </p><br data-v-f884ef29><p data-v-f884ef29>所以可以在 ul 上面監聽</p><br data-v-f884ef29><p class="cor36" data-v-f884ef29>事件委託優點?</p><p data-v-f884ef29>可以減少代碼量, 減少內存, 動態綁定</p><br data-v-f884ef29><p class="cor36" data-v-f884ef29>事件委託缺點?</p><p data-v-f884ef29> 用了之後在開發者工具看他的事件綁定會發現沒有, 會不知道誰在監聽這個元素 </p><br data-v-f884ef29><br data-v-f884ef29><div id="onejs018" class="articleCardTitle cor36" data-v-f884ef29> [ JS ] ≫ 深淺拷貝? </div><p data-v-f884ef29>深淺拷貝區別</p><p data-v-f884ef29>淺拷貝 只會複製 最外面 那一層屬性</p><br data-v-f884ef29><p data-v-f884ef29>簡單物件還可以 , 裡面又有物件時 ...&gt; 多層次嵌套 時 有問題</p><br data-v-f884ef29><p class="cor36" data-v-f884ef29># 淺拷貝</p><p data-v-f884ef29>1 ...展開運算符</p><p data-v-f884ef29>const o = { ...obj }</p><p data-v-f884ef29>console.log ( o )</p><br data-v-f884ef29><p data-v-f884ef29>2.</p><p data-v-f884ef29>const o= {}</p><p data-v-f884ef29> Object.assign( o,obj) <span class="comment" data-v-f884ef29> // (要拷貝的,被拷貝的)// (右 賦值 給 左) </span></p><p data-v-f884ef29>console.log ( o )</p><br data-v-f884ef29><p class="cor36" data-v-f884ef29># 深拷貝</p><p data-v-f884ef29>深拷貝會複製物件的所有屬性和嵌套物件</p><br data-v-f884ef29><p class="cor36" data-v-f884ef29># 3方法</p><p data-v-f884ef29>JSON.stringify()</p><br data-v-f884ef29><p class="pFou" data-v-f884ef29>const o = JSON.parse ( JSON.stringify ( obj ) )</p><br data-v-f884ef29><p data-v-f884ef29>lodash</p><br data-v-f884ef29><p class="pFou" data-v-f884ef29>const o = _.cloneDeep( obj )</p><br data-v-f884ef29><div class="bgcVS" data-v-f884ef29><p data-v-f884ef29>遞歸</p><div data-v-f884ef29><span class="function" data-v-f884ef29>function </span><span class="variable" data-v-f884ef29>deepCopy</span><span class="brackets" data-v-f884ef29>( </span><span class="word" data-v-f884ef29>newObj, oldObj </span><span class="brackets" data-v-f884ef29>){</span></div><div class="padTwo VSL" data-v-f884ef29><span class="comment" data-v-f884ef29>//把舊的值取出來給新的值</span><div data-v-f884ef29></div><span class="comment" data-v-f884ef29>//先遍歷舊的 , 注意 k 是誰</span></div><div class="padTwo VSL" data-v-f884ef29><span class="then" data-v-f884ef29>for </span> <span class="brackets" data-v-f884ef29>(</span><span class="function" data-v-f884ef29>let </span> <span class="word" data-v-f884ef29>k </span><span class="function" data-v-f884ef29>in </span><span class="word" data-v-f884ef29>oldObj </span><span class="brackets" data-v-f884ef29>){</span><div class="padTwo VSL" data-v-f884ef29><div data-v-f884ef29><span class="comment" data-v-f884ef29>// 處理數組問題</span></div><div data-v-f884ef29><span class="comment" data-v-f884ef29>// 通過值來判斷</span></div><div data-v-f884ef29><span class="then" data-v-f884ef29>if</span><span class="brackets" data-v-f884ef29>(</span><span class="word" data-v-f884ef29>oldObj</span><span class="brackets" data-v-f884ef29>[</span> <span class="word" data-v-f884ef29>k </span><span class="brackets" data-v-f884ef29>] </span><span class="word" data-v-f884ef29>intanceof </span><span class="brackets" data-v-f884ef29>Array</span><span class="brackets" data-v-f884ef29>) { </span><span class="comment" data-v-f884ef29>// oldObj [ k ] 屬性值</span></div><div class="padTwo VSL" data-v-f884ef29><div data-v-f884ef29><span class="comment" data-v-f884ef29>// 我要把hobby數組再次遍歷</span></div><div data-v-f884ef29><span class="comment" data-v-f884ef29>// 我要把跑步拿出來放到新物件hobby第1個參數</span></div><div data-v-f884ef29><span class="comment" data-v-f884ef29>// 我要把足球拿出來放到新物件hobby第2個參數</span></div><div data-v-f884ef29><span class="word" data-v-f884ef29>newObj</span><span class="brackets" data-v-f884ef29>[ </span><span class="word" data-v-f884ef29>k </span><span class="brackets" data-v-f884ef29>]</span><span class="then" data-v-f884ef29>=</span><span class="brackets" data-v-f884ef29>[ ]</span><div data-v-f884ef29></div><div data-v-f884ef29><span class="comment" data-v-f884ef29>// newObj[k] 是 hobby</span></div><div data-v-f884ef29><span class="comment" data-v-f884ef29> // 新物件的 hobby 先給他一個空數組</span></div><div data-v-f884ef29><span class="comment" data-v-f884ef29>// 然後我在遍歷舊數組把他放進去</span></div><div data-v-f884ef29><span class="comment" data-v-f884ef29>// deepCopy(newObj[k],[&quot;跑步&quot;,&quot;足球&quot;])</span></div><div data-v-f884ef29><span class="variable" data-v-f884ef29>deepCopy</span><span class="brackets" data-v-f884ef29>(</span><span class="word" data-v-f884ef29>newObj</span><span class="brackets" data-v-f884ef29>[</span><span class="word" data-v-f884ef29>k</span><span class="brackets" data-v-f884ef29>],</span><span class="word" data-v-f884ef29>oldObj</span><span class="brackets" data-v-f884ef29>[</span><span class="word" data-v-f884ef29>k</span><span class="brackets" data-v-f884ef29>])</span></div><div data-v-f884ef29><span class="comment" data-v-f884ef29>//調用自己遍歷數組時</span></div><div data-v-f884ef29><span class="comment" data-v-f884ef29>// K 變成數組的索引號了</span></div></div></div></div><div class="padTwo VSL" data-v-f884ef29><div data-v-f884ef29><span class="brackets" data-v-f884ef29>} </span><span class="then" data-v-f884ef29>else if</span><span class="brackets" data-v-f884ef29>(</span><span class="word" data-v-f884ef29>oldObj</span><span class="brackets" data-v-f884ef29>[</span> <span class="word" data-v-f884ef29>k </span><span class="brackets" data-v-f884ef29>] </span><span class="word" data-v-f884ef29>intanceof </span><span class="brackets" data-v-f884ef29>Object</span><span class="brackets" data-v-f884ef29>) { </span><span class="comment" data-v-f884ef29>// oldObj [ k ] 屬性值</span></div><div class="padTwo VSL" data-v-f884ef29><div data-v-f884ef29><span class="word" data-v-f884ef29>newObj</span><span class="brackets" data-v-f884ef29>[ </span><span class="word" data-v-f884ef29>k </span><span class="brackets" data-v-f884ef29>]</span><span class="then" data-v-f884ef29>=</span><span class="brackets" data-v-f884ef29>{ }</span><div data-v-f884ef29><span class="variable" data-v-f884ef29>deepCopy</span><span class="brackets" data-v-f884ef29>(</span><span class="word" data-v-f884ef29>newObj</span><span class="brackets" data-v-f884ef29>[</span><span class="word" data-v-f884ef29>k</span><span class="brackets" data-v-f884ef29>],</span><span class="word" data-v-f884ef29>oldObj</span><span class="brackets" data-v-f884ef29>[</span><span class="word" data-v-f884ef29>k</span><span class="brackets" data-v-f884ef29>])</span></div></div></div></div><div class="padTwo VSL" data-v-f884ef29><span class="brackets" data-v-f884ef29>}</span><span class="then" data-v-f884ef29>else </span><span class="brackets" data-v-f884ef29>{</span><div data-v-f884ef29><div data-v-f884ef29><div class="padTwo VSL" data-v-f884ef29><span class="comment" data-v-f884ef29>// k 屬性名 oldObj[ k ] 屬性值</span></div><div class="padTwo VSL" data-v-f884ef29><span class="comment" data-v-f884ef29>// newObj[ k ] === o.uname</span><div data-v-f884ef29></div></div><div class="padTwo VSL" data-v-f884ef29><div data-v-f884ef29><span class="word" data-v-f884ef29>newObj</span><span class="brackets" data-v-f884ef29>[ </span><span class="word" data-v-f884ef29>k </span><span class="brackets" data-v-f884ef29>]</span><span class="then" data-v-f884ef29>= </span><span class="word" data-v-f884ef29>oldObj</span><span class="brackets" data-v-f884ef29>[ </span><span class="word" data-v-f884ef29>k </span><span class="brackets" data-v-f884ef29>]</span></div></div><div data-v-f884ef29><span class="brackets" data-v-f884ef29>}</span></div></div></div></div><div data-v-f884ef29><span class="brackets" data-v-f884ef29>}</span></div></div><div data-v-f884ef29><span class="brackets" data-v-f884ef29>}</span></div><br data-v-f884ef29><p data-v-f884ef29># 一定要 先數組 再物件</p><p data-v-f884ef29>因為 數組 屬於物件 他就把 數組當物件</p></div><p class="cor36" data-v-f884ef29> 遞歸怎麼分類呢?你怎麼知道他是基本類型?你怎麼知道它不是一個物件? </p><p data-v-f884ef29>用typeof</p><br data-v-f884ef29><br data-v-f884ef29><p class="cor36" data-v-f884ef29>typeof返回什麼值,你認為它不是物件或者是物件呢?</p><p data-v-f884ef29>判定 typeof 是 object 就說明他肯定不是基本類型</p><br data-v-f884ef29><br data-v-f884ef29><p class="cor36" data-v-f884ef29>如果它不是object有幾種情況?</p><p data-v-f884ef29>string number 布林 null function(返回function)</p><br data-v-f884ef29><br data-v-f884ef29><p class="cor36" data-v-f884ef29>假設你知道哪些是物件,那些不是物件,接下來怎麼區分?</p><p data-v-f884ef29>在物件裡面區分看他是不是函數,再看它是普通函數還是箭頭函數</p><br data-v-f884ef29><br data-v-f884ef29><p class="cor36" data-v-f884ef29>普通函數還是箭頭函數怎麼看?</p><p data-v-f884ef29>看他有沒有prototype,箭頭函數沒有prototype</p><br data-v-f884ef29><br data-v-f884ef29><p class="cor36" data-v-f884ef29> 你知道他們區別後接下來做什麼?如果它是普通函數要怎麼複製它? </p><p data-v-f884ef29>所有參數傳給那個函數,然後返回它的返回值</p><br data-v-f884ef29><p data-v-f884ef29>: 直接用function然後return一個a.call然後地址,然後把參數弄下來</p><br data-v-f884ef29><p class="cor36" data-v-f884ef29>如果是箭頭函數要怎麼複製它?</p><p data-v-f884ef29>普通函數創建function 箭頭函數創建箭頭函數</p><br data-v-f884ef29><br data-v-f884ef29><p class="cor36" data-v-f884ef29>.函數判斷完再來判斷什麼?</p><p data-v-f884ef29>看他是不是陣列</p><br data-v-f884ef29><br data-v-f884ef29><p class="cor36" data-v-f884ef29>陣列判斷完再來判斷什麼?</p><p data-v-f884ef29>看他是不是Date</p><br data-v-f884ef29><p data-v-f884ef29>再來判斷什麼? 正則</p><br data-v-f884ef29><br data-v-f884ef29><p class="cor36" data-v-f884ef29>要著重檢測的類型有哪些?</p><p data-v-f884ef29>物件 日期 函數 字串 正則表達式</p><br data-v-f884ef29><br data-v-f884ef29><p class="cor36" data-v-f884ef29>先檢查她是對象還是陣列呢?</p><p data-v-f884ef29>先檢查陣列</p><br data-v-f884ef29><br data-v-f884ef29><p class="cor36" data-v-f884ef29>對JSON的理解?</p><p data-v-f884ef29>是一門表示通用數據結構的語言</p><br data-v-f884ef29><p data-v-f884ef29>用來代替XML用來做數據交換</p><br data-v-f884ef29><p data-v-f884ef29>JSON可以表示物件 數組 不林 string number</p><br data-v-f884ef29><p data-v-f884ef29>一般在 AJAX 得到的請求就是 JSON</p><br data-v-f884ef29><br data-v-f884ef29><p id="onejs019" class="cor36" data-v-f884ef29>什麼是 RESTful API</p><p data-v-f884ef29>RESTful API (表示性狀態轉移接口) 是一種設計風格</p><br data-v-f884ef29><p data-v-f884ef29>API 設計規範</p><br data-v-f884ef29><p data-v-f884ef29>1. 將一切數據視作資源</p><br data-v-f884ef29><p data-v-f884ef29>2. 利用 HTTP 請求方式 , 描述對資源的操作 ( 增 刪 改 查 )</p><br data-v-f884ef29><p data-v-f884ef29>3. 通過 HTTP 響應狀態碼 , 描述對資源的 操作結果</p><br data-v-f884ef29><p data-v-f884ef29>就是通過 URL 就知道要什麼資源 ,</p><br data-v-f884ef29><p data-v-f884ef29>通過 HTTP method 就知道要做什麼,</p><br data-v-f884ef29><p data-v-f884ef29>通過 HTTP status code 就知道結果如何</p><br data-v-f884ef29><p data-v-f884ef29>比如</p><br data-v-f884ef29><p data-v-f884ef29>GET 代表獲取一個資源</p><br data-v-f884ef29><p data-v-f884ef29>POST 代表添加一個資源</p><br data-v-f884ef29><p data-v-f884ef29>PUT 代表修改一個資源</p><br data-v-f884ef29><p data-v-f884ef29>DELETE 代表刪除一個資源</p><br data-v-f884ef29><p data-v-f884ef29> 用 HTTP Status Code 傳遞 server 的狀態訊息 ,ex 200 表示成功 , 500 表示 server 內部錯誤 </p><br data-v-f884ef29><p class="cor36" data-v-f884ef29>用 Rest 的優勢?</p><p data-v-f884ef29>1. 風格統一 , 不會出現各種命名的代碼</p><br data-v-f884ef29><p data-v-f884ef29>2. 面相資源 , 一目了然 , 有自解釋性</p><br data-v-f884ef29><p data-v-f884ef29>3. 充分利用 HTTP 協議本身語意</p><br data-v-f884ef29><br data-v-f884ef29><p class="cor36" data-v-f884ef29>併發和併行?</p><p data-v-f884ef29> 併發是宏觀概念,表示並行發生, 並行是微觀概念, 表示cpu有多個核心同時執行兩個任務 </p><br data-v-f884ef29><p data-v-f884ef29>並行是微觀概念, 表示cpu有多個核心同時執行兩個任務</p><br data-v-f884ef29><br data-v-f884ef29><p class="cor36" data-v-f884ef29>JS異步編程實現方式?</p><p data-v-f884ef29>回調函數 . promise . async和await</p><br data-v-f884ef29><br data-v-f884ef29><p class="cor36" data-v-f884ef29>AJAX有2種方法,XMLHttpRequest和fetch,他們的優缺點?</p><p data-v-f884ef29>XHR大多數用他的庫axios</p><br data-v-f884ef29><p data-v-f884ef29> Fetch優勢在於瀏覽器原生支持, 方便去用, 他的API也比xhr使用起來簡單 </p><br data-v-f884ef29><br data-v-f884ef29><div id="onejs020" class="articleCardTitle cor36" data-v-f884ef29> [ JS ] ≫ promise 的狀態? </div><p data-v-f884ef29>pending 待定: 初始狀態</p><br data-v-f884ef29><p data-v-f884ef29>fullfilled 兌現: 操作成功</p><br data-v-f884ef29><p data-v-f884ef29>rejected 拒絕: 操作失敗</p><br data-v-f884ef29><br data-v-f884ef29><p data-v-f884ef29>Promise 狀態 一但 兌現 / 拒絕 就 無法再改變</p><br data-v-f884ef29><p class="cor36" data-v-f884ef29>promise解決了什麼問題?</p><p data-v-f884ef29>解決回調地獄</p><br data-v-f884ef29><br data-v-f884ef29><p class="cor36" data-v-f884ef29>promise成功失敗的回調放哪?</p><p data-v-f884ef29>.then</p><br data-v-f884ef29><br data-v-f884ef29><p class="cor36" data-v-f884ef29>catch是幹嘛的?</p><p data-v-f884ef29>捕獲promise的錯誤</p><br data-v-f884ef29><br data-v-f884ef29><p class="cor36" data-v-f884ef29>finally?</p><p data-v-f884ef29>不論成功 (.then) 失敗 (.catch) 都會調用的方法</p><br data-v-f884ef29><br data-v-f884ef29><p class="cor36" data-v-f884ef29>promise的缺點?</p><p data-v-f884ef29>一旦執行promise沒辦法取消, 它裡面的錯誤只能用回調函數來捕獲</p><br data-v-f884ef29><br data-v-f884ef29><p class="cor36" data-v-f884ef29>Promise.all?</p><p data-v-f884ef29> 傳入多個promise而這些promise都是成功的話 Promise.all就執行相對應函數 </p><br data-v-f884ef29><br data-v-f884ef29><p class="cor36" data-v-f884ef29>Promise.race?</p><p data-v-f884ef29>傳入多個promise而只要一個成功或失敗, 就返回那個</p><br data-v-f884ef29><br data-v-f884ef29><p class="cor36" data-v-f884ef29>promise的缺點?</p><p data-v-f884ef29>一旦執行promise沒辦法取消, 它裡面的錯誤只能用回調函數來捕獲</p><p data-v-f884ef29>就整個都失敗</p><br data-v-f884ef29><p data-v-f884ef29>Promise.all如果失敗了一個會不會執行失敗的回調? _ 會</p><br data-v-f884ef29><p class="cor36" data-v-f884ef29>那是第一個失敗時執行還是所有都失敗在執行?</p><p data-v-f884ef29>只要第一個失敗就執行,並以這個失敗的結果來執行下面的回調</p><br data-v-f884ef29><br data-v-f884ef29><p class="cor36" data-v-f884ef29>Promise是一個類還是函數呢?</p><p data-v-f884ef29> 它可以是函數, 你把它做為單獨的函數的話要自己實現原型, 用類的話, 直接把它方法寫到類的定義上就好 </p><br data-v-f884ef29><br data-v-f884ef29><p class="cor36" data-v-f884ef29>這個Promise接收什麼參數呢?</p><p data-v-f884ef29>它是一個回調函數</p><br data-v-f884ef29><br data-v-f884ef29><p class="cor36" data-v-f884ef29>這個回調函數接收什麼參數呢?</p><p data-v-f884ef29>resolve 和 reject</p><br data-v-f884ef29><p data-v-f884ef29> Promise接受到這個參數後,它對這個函數要立即執行嗎?還是異步執行? _ 立即執行 </p><br data-v-f884ef29><p class="cor36" data-v-f884ef29>Promise執行完這個函數後要返回什麼值?</p><p data-v-f884ef29> 物件,這個物件至少有一個than方法, 可能還會有catch跟finaly方法, 在then裡面可以添加更多的回調 </p><br data-v-f884ef29><br data-v-f884ef29><p class="cor36" data-v-f884ef29> 一般promise後面.then,這個.then的參數和返回值是什麼? </p><p data-v-f884ef29> then的參數第一個是成功的回調, 第二個參數是錯誤的回調, 然後返回一個promise </p><br data-v-f884ef29><p data-v-f884ef29>那返回的這個promise是之前的promise嗎? _ 是</p><br data-v-f884ef29><p class="cor36" data-v-f884ef29>Promise.all怎麼自己去模擬?</p><p data-v-f884ef29> 就是發三個請求,三個請求成功了,就調用成功,任何一個失敗了就調用失敗 </p><br data-v-f884ef29><br data-v-f884ef29><p class="cor36" data-v-f884ef29> 不用Promise.all怎麼做? _ (可不可以給2分鐘考慮思路,promise4步) </p><p data-v-f884ef29> 先記promise.all的用法, 他會接收陣列參數, 第一步把所有promise封裝到陣列裡面, 陣列能做遍歷, 裡面寫成功函數和失敗函數, 如果成功成功數目加一or給結果陣列裡面的結果填充, 比如第一個promise成功了, 給結果第一項變成他的data, 第二個..., 怎麼才能繼續, 變了data後看一下是不是三項都是data或成功, 那就可以繼續了, 最終要確定是否成功就是我這次成功之後看一下這個陣列是否是全成功的, 如果不是就什麼都不做, 最後成功的那個請求就負責往下走, 而失敗就直接調用失敗不用數數 </p><br data-v-f884ef29><br data-v-f884ef29><p id="onejs021" class="cor36" data-v-f884ef29>async/await怎麼用?</p><p data-v-f884ef29>比如在AJAX請求之間, 先聲明一個async function</p><br data-v-f884ef29><p data-v-f884ef29>把這個AJAX請求寫在await後面,</p><br data-v-f884ef29><p data-v-f884ef29>因為這個async本身是一個函數包裹了不同的異步請求的任務,</p><br data-v-f884ef29><p data-v-f884ef29>然後它碰到這個await就會執行這個異步函數返回一個promise</p><br data-v-f884ef29><p data-v-f884ef29>但不確定這個promis會返回正確還是錯誤</p><br data-v-f884ef29><p data-v-f884ef29>所以可以用try catch來捕捉這個異常</p><br data-v-f884ef29><br data-v-f884ef29><p class="cor36" data-v-f884ef29> 假如我有f1f2都返回promise如果我想await要等待兩個異步操作結束之後再console.log(z)? </p><p data-v-f884ef29> 可以用promise.all, peomise.all可以將多個promise合成一個新的promise, 當兩個promise都是成功的狀態下, 就是它返回一個結果陣列, 如果是失敗的話它會將, 首先哪個錯的promise的狀態的結果返回出來 </p><br data-v-f884ef29><br data-v-f884ef29><p class="cor36" data-v-f884ef29> 如果我想用await依次執行f1f2呢?就是等f1執行完我再去執行f2? </p><p data-v-f884ef29>.await(f1).await(f2)</p><br data-v-f884ef29><br data-v-f884ef29><p data-v-f884ef29>await永遠異步對不對? _ 對</p><br data-v-f884ef29><br data-v-f884ef29><p data-v-f884ef29>await後面一般接promise對不對? _ 對</p><br data-v-f884ef29><br data-v-f884ef29><p class="cor36" data-v-f884ef29>如果不接promise會怎樣?await 1會怎樣?</p><p data-v-f884ef29>它會默認返回一個promise, 它會把它封裝成promise.resolve 1</p><br data-v-f884ef29><br data-v-f884ef29><p class="cor36" data-v-f884ef29>const a = 1 和 const a = await 1一樣嗎?</p><p data-v-f884ef29>不一樣, 有await會變異步</p><br data-v-f884ef29><br data-v-f884ef29><p class="cor36" data-v-f884ef29>a = await 1相當於a = 1嗎?</p><p data-v-f884ef29>不是</p><br data-v-f884ef29><br data-v-f884ef29><p data-v-f884ef29> (await是語法糖,await所有寫法會變成promise,不是promise也強行變成promise) </p><br data-v-f884ef29><br data-v-f884ef29><p class="cor36" data-v-f884ef29>await我們在之後接上一個異步請求,a = await ajax()?</p><p data-v-f884ef29>那要等到promise結果返回,在執行a = await ajax()</p><br data-v-f884ef29><br data-v-f884ef29><p class="cor36" data-v-f884ef29>怎麼捕獲await中的錯誤?</p><p data-v-f884ef29>用 try , catch</p><br data-v-f884ef29><br data-v-f884ef29><p class="cor36" data-v-f884ef29>node.js什麼是EventLoop?</p><p data-v-f884ef29>Node.js將任務分成幾個大類</p><br data-v-f884ef29><br data-v-f884ef29><p data-v-f884ef29>有timers階段</p><br data-v-f884ef29><br data-v-f884ef29><p data-v-f884ef29>還有IO</p><br data-v-f884ef29><br data-v-f884ef29><p data-v-f884ef29>callbacks階段</p><br data-v-f884ef29><br data-v-f884ef29><p data-v-f884ef29>還有prepare階段</p><br data-v-f884ef29><br data-v-f884ef29><p data-v-f884ef29>還有poll輪詢階段</p><br data-v-f884ef29><br data-v-f884ef29><p data-v-f884ef29>還有check階段</p><br data-v-f884ef29><br data-v-f884ef29><p data-v-f884ef29>還有close callbcak階段</p><br data-v-f884ef29><br data-v-f884ef29><p data-v-f884ef29>一般在三個階段停留時間比較長 timers poll check</p><br data-v-f884ef29><br data-v-f884ef29><br data-v-f884ef29><p data-v-f884ef29>setTimeout哪個階段阿? timers</p><br data-v-f884ef29><br data-v-f884ef29><p data-v-f884ef29> 那promise的then回調在哪個階段執行? 跟nextTick一樣, 現階段結束之前執行 </p><br data-v-f884ef29><br data-v-f884ef29><br data-v-f884ef29><p id="onejs022" class="cor36" data-v-f884ef29>JS的事件循環?</p><p data-v-f884ef29>打開瀏覽器頁面時, 瀏覽器會開闢隊列,</p><br data-v-f884ef29><p data-v-f884ef29>然後隊列分為 微任務隊列 宏任務隊列,</p><br data-v-f884ef29><p data-v-f884ef29>在執行script代碼時, 會把同步代碼之外的異步任務放到對列裡面去,</p><br data-v-f884ef29><p data-v-f884ef29> 在同步的代碼執行完成後, 去查看異步隊列中是否有滿足條件的執行任務, </p><br data-v-f884ef29><p data-v-f884ef29>然後把它取出來防到執行環境站裡面執行,</p><br data-v-f884ef29><p data-v-f884ef29>然後不斷循環這個過程, 這就是事件循環</p><br data-v-f884ef29><br data-v-f884ef29><br data-v-f884ef29><p class="cor36" data-v-f884ef29>微任務和宏任務?</p><p data-v-f884ef29>微任務 宏任務 是nodejs說法,</p><br data-v-f884ef29><br data-v-f884ef29><p data-v-f884ef29>瀏覽器只有 微任務 任務, 所以可以認為宏任務就是任務</p><br data-v-f884ef29><br data-v-f884ef29><p data-v-f884ef29> 任務是最常規的東西, 你引入script標籤 寫一個setTimeout, 它的回調或代碼裡面都是任務, </p><br data-v-f884ef29><br data-v-f884ef29><p data-v-f884ef29> 這個任務裡面你可以不停地去啟用微任務, 例如promise.then執行微任務 </p><br data-v-f884ef29><br data-v-f884ef29><p class="cor36" data-v-f884ef29>那些函數是微任務和那些是宏任務?</p><p data-v-f884ef29> setTimeout宏任務 promise裡面then微任務 async函數裡面await後面的部分微任務 </p><br data-v-f884ef29><br data-v-f884ef29><p data-v-f884ef29>微任務和宏任務執行順序? _ 宏任務先執行</p><br data-v-f884ef29><br data-v-f884ef29><p data-v-f884ef29>一般第一個任務是什麼任務?(宏任務裡可以插入微任務) _ 宏任務</p><br data-v-f884ef29><br data-v-f884ef29><p data-v-f884ef29>在頁面中引入一個script標籤,那這個script是什麼任務? _ 宏任務</p><br data-v-f884ef29><br data-v-f884ef29><p data-v-f884ef29> 我在兩個宏任務之間執行一個微任務,那肯定微任務在兩個中間執行隊嗎? _ 對 </p><br data-v-f884ef29><br data-v-f884ef29><p data-v-f884ef29> 那我在中間這個微任務裡面再次執行一個微任務,它會插在下一個宏任務執行之前執行嗎?(題目問可不可以插宏任務) _ 會 </p><br data-v-f884ef29><br data-v-f884ef29><p data-v-f884ef29> 假設我在兩個宏任務之間已經安排了兩個微任務,然後在第一個微任務執行結束的時候,又插入一個新的微任務,這個新的微任務可以在下一個微任務執行之前執行嗎? </p><p data-v-f884ef29>(題目問可不可以插微任務)</p><br data-v-f884ef29><p data-v-f884ef29> 不行, 微任務要排隊, 微任務只能插在宏任務之前 不能, . . . 兩個微任務之間不能插微任務 </p><br data-v-f884ef29><br data-v-f884ef29><p class="cor36" data-v-f884ef29>假設一個宏任務觸發一個微任務和宏任務,先執行哪個?</p><p data-v-f884ef29>微任務之後的微任務也是會繼續執行微任務, 直到微任務隊列空</p><br data-v-f884ef29><br data-v-f884ef29><p data-v-f884ef29>Promise.then(f1)這個then後面接的f1是異步還是同步? _ 異步</p><br data-v-f884ef29><br data-v-f884ef29><p data-v-f884ef29> 第一行Promise.then(f1)第二console.log(999),f1會在999之後執行對嗎? _ 對 </p><br data-v-f884ef29><br data-v-f884ef29><p data-v-f884ef29> 第一行Promise.then(f1)第二setTimeout(999),f1和999哪個先執行? _ f1 </p><br data-v-f884ef29><br data-v-f884ef29><p data-v-f884ef29> 為什麼then回調可以比setTimeout先執行? _ then屬於微任務, setTimeout屬於宏任務 </p><br data-v-f884ef29><br data-v-f884ef29>',736),R3=rs(()=>n("div",{class:"toTopButton"},[n("div",{class:"disCen"},"___"),n("div",{class:"disCen"},"▲")],-1)),H3=[R3],B3=rs(()=>n("div",{class:"toBotButton"},[n("div",{class:"disCen"},"▼"),n("div",{class:"disCen"},"￣")],-1)),D3=[B3],J3=rs(()=>n("div",{class:"timeDiv"},null,-1)),W3={__name:"JsPageOne",setup(a){const s=ba(!1);window.addEventListener("scroll",function(){s.value=window.scrollY>0});function d(){window.scrollTo({top:0,left:0,behavior:"smooth"})}function v(){window.scrollTo({top:999999,left:0,behavior:"smooth"})}function t(e){window.scrollTo({top:document.getElementById(`${e}`).offsetTop,behavior:"smooth"})}return(e,c)=>{const l=qa("dir");return aa(),ta(G,null,[n("section",null,[n("div",_3,[n("div",S3,[n("div",y3,[C3,n("div",{onClick:c[0]||(c[0]=p=>t("onejs001")),class:"leftNavText"},"JS數據類型"),n("div",{onClick:c[1]||(c[1]=p=>t("onejs002")),class:"leftNavText"}," null undefined "),n("div",{onClick:c[2]||(c[2]=p=>t("onejs003")),class:"leftNavText"},"==&==="),n("div",{onClick:c[3]||(c[3]=p=>t("onejs004")),class:"leftNavText"},"0.1+0.2"),n("div",{onClick:c[4]||(c[4]=p=>t("onejs027")),class:"leftNavText"}," 判斷數字是小數 "),n("div",{onClick:c[5]||(c[5]=p=>t("onejs028")),class:"leftNavText"},"數組去重"),n("div",{onClick:c[6]||(c[6]=p=>t("onejs024")),class:"leftNavText"}," 判斷變量是否為陣列 "),n("div",{onClick:c[7]||(c[7]=p=>t("onejs026")),class:"leftNavText"}," 獲得陣列最後一項 "),n("div",{onClick:c[8]||(c[8]=p=>t("onejs030")),class:"leftNavText"},"數組清空"),n("div",{onClick:c[9]||(c[9]=p=>t("onejs023")),class:"leftNavText"}," 判斷一個物件為空 "),n("div",{onClick:c[10]||(c[10]=p=>t("onejs025")),class:"leftNavText"}," 判斷一個物件是否有某屬性 "),n("div",{onClick:c[11]||(c[11]=p=>t("onejs029")),class:"leftNavText"},"合併 2 物件"),n("div",{onClick:c[12]||(c[12]=p=>t("onejs005")),class:"leftNavText"}," let var const "),n("div",{onClick:c[13]||(c[13]=p=>t("onejs006")),class:"leftNavText"},"展開運算符"),n("div",{onClick:c[14]||(c[14]=p=>t("onejs007")),class:"leftNavText"}," 遍歷數組有幾種方式 "),n("div",{onClick:c[15]||(c[15]=p=>t("onejs008")),class:"leftNavText"},"閉包"),n("div",{onClick:c[16]||(c[16]=p=>t("onejs009")),class:"leftNavText"}," 立即執行函數 "),n("div",{onClick:c[17]||(c[17]=p=>t("onejs010")),class:"leftNavText"},"this指向"),n("div",{onClick:c[18]||(c[18]=p=>t("onejs011")),class:"leftNavText"},"箭頭函數"),n("div",{onClick:c[19]||(c[19]=p=>t("onejs012")),class:"leftNavText"},"原型鏈"),n("div",{onClick:c[20]||(c[20]=p=>t("onejs013")),class:"leftNavText"},"new做了什麼"),n("div",{onClick:c[21]||(c[21]=p=>t("onejs014")),class:"leftNavText"},"繼承"),n("div",{onClick:c[22]||(c[22]=p=>t("onejs015")),class:"leftNavText"}," call apply bind "),n("div",{onClick:c[23]||(c[23]=p=>t("onejs016")),class:"leftNavText"},"防斗節流"),n("div",{onClick:c[24]||(c[24]=p=>t("onejs017")),class:"leftNavText"},"DOM"),n("div",{onClick:c[25]||(c[25]=p=>t("onejs018")),class:"leftNavText"}," 深拷貝淺拷貝 "),n("div",{onClick:c[26]||(c[26]=p=>t("onejs019")),class:"leftNavText"},"RESTful API"),n("div",{onClick:c[27]||(c[27]=p=>t("onejs020")),class:"leftNavText"},"promise狀態"),n("div",{onClick:c[28]||(c[28]=p=>t("onejs021")),class:"leftNavText"},"async/await"),n("div",{onClick:c[29]||(c[29]=p=>t("onejs022")),class:"leftNavText"},"JS事件循環"),n("div",{onClick:c[30]||(c[30]=p=>t("onejs0")),class:"leftNavText"}),n("div",{onClick:c[31]||(c[31]=p=>t("onejs0")),class:"leftNavText"}),n("div",{onClick:c[32]||(c[32]=p=>t("onejs0")),class:"leftNavText"}),n("div",{onClick:c[33]||(c[33]=p=>t("onejs0")),class:"leftNavText"})])])]),n("div",x3,[n("div",L3,[n("div",j3,[V3,n("div",P3,[O3,k(l,null,{default:S(()=>[N3,$3,fa(),E3,M3,A3]),_:1}),F3]),I3])])])]),n("div",null,[W(k(B,{name:"fade",tag:"div"},{default:S(()=>[n("div",{onClick:d,class:"toTop"},H3)]),_:1},512),[[U,s.value]]),W(k(B,{name:"fade",tag:"div"},{default:S(()=>[n("div",{onClick:v,class:"toBot"},D3)]),_:1},512),[[U,s.value]])]),J3],64)}}},U3=pa(W3,[["__scopeId","data-v-f884ef29"]]);const K3={};function X3(a,s){const d=qa("RouterLink"),v=qa("RouterView");return aa(),ta(G,null,[n("div",null,[n("ul",null,[n("li",null,[k(d,{to:"/js/jspractice/"},{default:S(()=>[fa("練習題1")]),_:1})]),n("li",null,[k(d,{to:"/js/jspractice/two"},{default:S(()=>[fa("練習題2")]),_:1})])])]),k(v)],64)}const Y3=pa(K3,[["render",X3],["__scopeId","data-v-8f2555a9"]]);const Gd=a=>(wa("data-v-13f35e28"),a=a(),ma(),a),G3={class:"leftNav"},Q3={class:"leftNavContainer"},Z3={class:"leftNavLayout"},ai=Gd(()=>n("br",null,null,-1)),si=Gd(()=>n("br",null,null,-1)),di=K('<div class="Main" data-v-13f35e28><div class="mainContainer" data-v-13f35e28><div class="mainLayout" data-v-13f35e28><div id="twohand001" class="cardTitle" data-v-13f35e28> 1. JS作用域考题? . . . . . . . . . . . . </div><div data-v-13f35e28>1.JS除了函數外, JS沒有塊級作用域</div><div data-v-13f35e28> 2.作用域鏈: 內部可以訪問外部的變量, 但是外部不能訪問內部的變量 </div><div data-v-13f35e28>3.注意聲明變量是用var還是沒寫 (window.)</div><div data-v-13f35e28>4.注意JS有變量提升(變量懸掛聲明)</div><div data-v-13f35e28>5.優先級: 聲明變量 &gt; 聲明普通函數 &gt; 參數 &gt; 變量提升</div><div data-v-13f35e28>面試時</div><div data-v-13f35e28>1.先看本層作用域有沒有此變量 (注意變量提升)</div><div data-v-13f35e28>2.注意JS除了函數外, JS沒有塊級作用域</div><div data-v-13f35e28>3.普通函數聲明是不看寫函數的時候順序</div><br data-v-13f35e28><div data-v-13f35e28>1.JS除了函數外, JS沒有塊級作用域</div><br data-v-13f35e28><div data-v-13f35e28>function fun(){</div><div data-v-13f35e28>. var a = 10; . . . // 這個 a 屬於函數內部的</div><div data-v-13f35e28>}</div><div data-v-13f35e28>console.log( a ) . . . // a is not defined</div><div data-v-13f35e28>fun();</div><div data-v-13f35e28>console.log( a ) . . . // a is not defined</div><br data-v-13f35e28><div data-v-13f35e28>for( var i = 0; i ＜ 10 ; i++ ){</div><div data-v-13f35e28>}</div><div data-v-13f35e28>console.log( i ); . . . // 10 在for裡面定義沒有作用域</div><br data-v-13f35e28><div data-v-13f35e28>if( true ){</div><div data-v-13f35e28>. var a = 10;</div><div data-v-13f35e28>}</div><div data-v-13f35e28>console.log( a ); . . . // 10 只有函數有作用域</div><br data-v-13f35e28><div data-v-13f35e28> 2.作用域鏈: 內部可以訪問外部的變量, 但是外部不能訪問內部的變量 </div><div data-v-13f35e28>注意: 如果內部有, 優先查找內部, 內部沒有向外層找</div><br data-v-13f35e28><div data-v-13f35e28>function fun(){</div><div data-v-13f35e28>. var a = 10;</div><div data-v-13f35e28>. function foo(){</div><div data-v-13f35e28>. . console.log( a )</div><div data-v-13f35e28>. }</div><div data-v-13f35e28>. foo();</div><div data-v-13f35e28>}</div><div data-v-13f35e28>fun(); . . . 打印10</div><br data-v-13f35e28><div data-v-13f35e28>var b = 29;</div><div data-v-13f35e28>function fun1(){</div><div data-v-13f35e28>. console.log( b );</div><div data-v-13f35e28>}</div><div data-v-13f35e28>fun1(); . . . 打印29, 內可以訪問外,但外不能訪問內</div><br data-v-13f35e28><div data-v-13f35e28>3.注意聲明變量是用var還是沒寫 (window.)</div><div data-v-13f35e28>(function(){</div><div data-v-13f35e28>. var a = b = 10;</div><div data-v-13f35e28>})()</div><div data-v-13f35e28>console.log(a) . . . // a is not defined</div><div data-v-13f35e28> console.log(b) . . . // 10 b=10 沒寫默認window.b=10, 相當於全局var b=10 </div><br data-v-13f35e28><div data-v-13f35e28>4.注意JS有變量提升(變量懸掛聲明)</div><div data-v-13f35e28>function c(){</div><div data-v-13f35e28>. var b = 1</div><div data-v-13f35e28>. function a(){</div><div data-v-13f35e28>. . console.log(b)</div><div data-v-13f35e28>. . var b = 2;</div><div data-v-13f35e28>. . console.log(b)</div><div data-v-13f35e28>. }</div><div data-v-13f35e28>. a()</div><div data-v-13f35e28>. console.log(b)</div><div data-v-13f35e28>}</div><div data-v-13f35e28>c()</div><br data-v-13f35e28><div data-v-13f35e28>先看本層作用域有沒有此變量 (注意變量提升)</div><div data-v-13f35e28>a()裡面有var b提升, 第一個console.log(b) . . . // undefined</div><div data-v-13f35e28>第二個console.log(b) . . . // 2 因為上面有</div><div data-v-13f35e28>第三個console.log(b)本層有是 1</div><br data-v-13f35e28><div class="cor36" data-v-13f35e28>輸出多少?</div><div data-v-13f35e28>var name = &quot;a&quot;;</div><div data-v-13f35e28>(function(){</div><div data-v-13f35e28>. if( typeof name == &quot;undefined&quot; ){</div><div data-v-13f35e28>. . var name = &quot;b&quot;;</div><div data-v-13f35e28>. . console.log(&quot;111&quot;+name);</div><div data-v-13f35e28>. } else {</div><div data-v-13f35e28>. . console.log(&quot;222&quot;+name);</div><div data-v-13f35e28>. }</div><div data-v-13f35e28>})()</div><br data-v-13f35e28><div data-v-13f35e28>先看本層作用域有沒有此變量 (注意變量提升)</div><div data-v-13f35e28>注意JS除了函數外, JS沒有塊級作用域</div><div data-v-13f35e28>var先變量提升到function, 就算if( false )也是提升</div><div data-v-13f35e28>所以 var name, 所以name == undefined, 所以打印 111b</div><div class="cor36" data-v-13f35e28>輸出多少?</div><div data-v-13f35e28>var bar = 1;</div><div data-v-13f35e28>function test(){</div><div data-v-13f35e28>. console.log( bar )</div><div data-v-13f35e28>. var bar = 2;</div><div data-v-13f35e28>. console.log( bar )</div><div data-v-13f35e28>}</div><div data-v-13f35e28>test();</div><br data-v-13f35e28><div data-v-13f35e28>先看本層作用域有沒有此變量 (注意變量提升)</div><div data-v-13f35e28>第一個bar undefined</div><div data-v-13f35e28>第二個bar 2</div><div class="cor36" data-v-13f35e28>輸出多少?</div><div data-v-13f35e28>function fun(){</div><div data-v-13f35e28>. var a = 10;</div><div data-v-13f35e28>. function a(){}</div><div data-v-13f35e28>. console.log( a );</div><div data-v-13f35e28>}</div><div data-v-13f35e28>fun(); . . . // 10</div><br data-v-13f35e28><div data-v-13f35e28>function fun(){</div><div data-v-13f35e28>. var a = 10;</div><div data-v-13f35e28>. var a = function(){}</div><div data-v-13f35e28>. console.log( a );</div><div data-v-13f35e28>}</div><div data-v-13f35e28>fun(); . . . // f(){}</div><br data-v-13f35e28><div data-v-13f35e28>5.優先級: 聲明變量 &gt; 聲明普通函數 &gt; 參數 &gt; 變量提升</div><div data-v-13f35e28>3.普通函數聲明是不看寫函數的時候順序</div><br data-v-13f35e28><div data-v-13f35e28>function fun(){</div><div data-v-13f35e28>. console.log( a ); . . . //f(){}</div><div data-v-13f35e28>. function a(){}</div><div data-v-13f35e28>}</div><div data-v-13f35e28>fun(); . . . 也可以先用在定義</div><br data-v-13f35e28><div data-v-13f35e28>function fun(){</div><div data-v-13f35e28>. console.log( a ); . . . //f(){}</div><div data-v-13f35e28>. var a = 10;</div><div data-v-13f35e28>. function a(){}</div><div data-v-13f35e28>}</div><div data-v-13f35e28>fun(); . . . 也可以先用在定義</div><br data-v-13f35e28><div data-v-13f35e28>function fun( a ){</div><div data-v-13f35e28>. console.log( a );</div><div data-v-13f35e28>. var a = 10;</div><div data-v-13f35e28>}</div><div data-v-13f35e28>fun( 100 ); . . . // 10</div><br data-v-13f35e28><div data-v-13f35e28>function fun( a ){</div><div data-v-13f35e28>. var a = 10;</div><div data-v-13f35e28>. function a(){}</div><div data-v-13f35e28>. console.log( a );</div><div data-v-13f35e28>}</div><div data-v-13f35e28> fun( 100 ); . . . // 10 聲明變量 &gt; 聲明普通函數 &gt; 參數 &gt; 變量提升 </div><br data-v-13f35e28><div data-v-13f35e28>function fun(){</div><div data-v-13f35e28>. a = 10;</div><div data-v-13f35e28>. console.log( a );</div><div data-v-13f35e28>}</div><div data-v-13f35e28> fun(); . . . // 打印 10 , 本層沒有向外找, 他是在外部拿到的,window.a </div><br data-v-13f35e28><div data-v-13f35e28>function fun(){</div><div data-v-13f35e28>. a = 10;</div><div data-v-13f35e28>. var a = 20;</div><div data-v-13f35e28>. console.log( a );</div><div data-v-13f35e28>}</div><div data-v-13f35e28>fun(); . . . // 打印 20 , 本層有</div><br data-v-13f35e28><div data-v-13f35e28>function fun(){</div><div data-v-13f35e28>. var a = 20;</div><div data-v-13f35e28>. a = 10;</div><div data-v-13f35e28>. console.log( a );</div><div data-v-13f35e28>}</div><div data-v-13f35e28>fun(); . . . // 打印 10 , 變量再次賦值</div><br data-v-13f35e28><div data-v-13f35e28>function fun(){</div><div data-v-13f35e28>. a = 10;</div><div data-v-13f35e28>. console.log( a );</div><div data-v-13f35e28>. var a = 20;</div><div data-v-13f35e28>. console.log( a );</div><div data-v-13f35e28>}</div><div data-v-13f35e28>fun(); . . . // 第一個打印 10 , 第二個打印 20</div><br data-v-13f35e28><br data-v-13f35e28><br data-v-13f35e28><div id="twohand002" class="cardTitle" data-v-13f35e28>2. JS物件考题</div><div data-v-13f35e28> 1.物件是通過 new 操作符構建出來, 所以物件之間不相等 (除了引用外) </div><div data-v-13f35e28>2.物件注意: 引用類型 (共同一個地址)</div><div data-v-13f35e28>3.物件的 key 都是字符串類型</div><div data-v-13f35e28>4.物件如何找屬性&amp;方法</div><div data-v-13f35e28> 先在物件本身找 &gt; 構造函數中找 &gt; 物件原型中找 &gt; 構造函數原型中找 &gt; 物件上一層原型查找 </div><br data-v-13f35e28><div data-v-13f35e28>console.log([1,2,3] === [1,2,3]) . . . // false</div><div data-v-13f35e28>new 創建新物件</div><div data-v-13f35e28>任何陣列透過 new 出來</div><br data-v-13f35e28><div data-v-13f35e28>var obj1 = {</div><div data-v-13f35e28>. a:1</div><div data-v-13f35e28>}</div><div data-v-13f35e28>var obj2 = obj1; . . . obj1 給 obj2 注意不是創建</div><div data-v-13f35e28>obj1.a = &quot;aaa&quot;; . . . 兩個都被改</div><div data-v-13f35e28>obj2.a = &quot;bbb&quot;&#39; . . . 兩個都被改</div><br data-v-13f35e28><div class="cor36" data-v-13f35e28>輸出多少?</div><div data-v-13f35e28>var obj1 = {</div><div data-v-13f35e28>. a:&quot;hellow&quot;</div><div data-v-13f35e28>}</div><div data-v-13f35e28>var obj2 = obj1;</div><div data-v-13f35e28>obj2.a= &quot;world&quot;;</div><div data-v-13f35e28>console.log(obj1);</div><div data-v-13f35e28>(function(){</div><div data-v-13f35e28>. console.log( a );</div><div data-v-13f35e28>. var a = 1;</div><div data-v-13f35e28>})();</div><div data-v-13f35e28>第一個打印 {a:world}</div><div data-v-13f35e28>第二個打印 undefined</div><br data-v-13f35e28><div class="cor36" data-v-13f35e28>物件的 key 都是字符串類型</div><div data-v-13f35e28>var a = {}</div><div data-v-13f35e28>var b = {</div><div data-v-13f35e28>. key: &quot;a&quot;</div><div data-v-13f35e28>}</div><div data-v-13f35e28>var c = {</div><div data-v-13f35e28>. key: &quot;c&quot;</div><div data-v-13f35e28>}</div><div data-v-13f35e28>a[b] = &quot;123&quot;;</div><div data-v-13f35e28>a[c] = &quot;456&quot;;</div><div data-v-13f35e28>console.log( a[b] )</div><br data-v-13f35e28><div data-v-13f35e28>這相當於 let m = {}</div><div data-v-13f35e28>m.a = 1;</div><div data-v-13f35e28>m.a = 2;</div><div data-v-13f35e28>往物件裡面加內容,物件的key為字串</div><div data-v-13f35e28>結果為 456</div><div data-v-13f35e28>for(var k in a){</div><div data-v-13f35e28>. console.log( typeof k )</div><div data-v-13f35e28>}</div><br data-v-13f35e28><div data-v-13f35e28>物件如何找屬性&amp;方法</div><div data-v-13f35e28>console.log( [1,2,3].constructor )</div><div data-v-13f35e28>得到array</div><div data-v-13f35e28>物件透過 構造函數 創造的</div><div data-v-13f35e28>new Array</div><br data-v-13f35e28><div data-v-13f35e28>可以想成</div><div data-v-13f35e28>function Fun(){</div><div data-v-13f35e28>}</div><div data-v-13f35e28>let obj = new Fun();</div><div data-v-13f35e28> console.log( obj.constructor ) . . . //得到Fun() 代表 obj.constructor 指向 Fun() </div><br data-v-13f35e28><div data-v-13f35e28>同理</div><br data-v-13f35e28><div data-v-13f35e28>function Array(){</div><div data-v-13f35e28>}</div><div data-v-13f35e28>new Array</div><div data-v-13f35e28> console.log( [1,2,3].constructor ) . . . //得到Array() 代表 [1,2,3].constructor 指向 Array() </div><div data-v-13f35e28>每一個物件透過構造函數構建出來, 給 new 把它變成物件</div><br data-v-13f35e28><div data-v-13f35e28>1.每一個函數都自帶一個 prototype 原型</div><div data-v-13f35e28>. 注意: 物件擁有 __proto__</div><div data-v-13f35e28>2.new Fun 該 Fun 構造函數的原型指向於對象(new Fun)的原型</div><br data-v-13f35e28><div data-v-13f35e28>物件如何找屬性&amp;方法</div><div data-v-13f35e28> 先在物件本身找 &gt; 構造函數中找 &gt; 物件原型中找 &gt; 構造函數原型中找 &gt; 物件上一層原型查找 </div><br data-v-13f35e28><div data-v-13f35e28>function Fun(){</div><div data-v-13f35e28>. this.a = &quot;在 fun 函數中添加的&quot;;</div><div data-v-13f35e28>}</div><div data-v-13f35e28>Fun.prototype.a = &quot;這是 fun 原型添加的&quot;</div><div data-v-13f35e28>let obj = new Fun();</div><div data-v-13f35e28>obj.a = &quot;物件本身&quot;</div><div data-v-13f35e28>obj.__proto__,a = &quot;這是物件原型添加的&quot;;</div><br data-v-13f35e28><div data-v-13f35e28>console.log(obj.a) . . . // 物件本身</div><br data-v-13f35e28><br data-v-13f35e28><div data-v-13f35e28>function Fun(){</div><div data-v-13f35e28>. this.a = &quot;在 fun 函數中添加的&quot;;</div><div data-v-13f35e28>}</div><div data-v-13f35e28>Fun.prototype.a = &quot;這是 fun 原型添加的&quot;</div><div data-v-13f35e28>let obj = new Fun();</div><div data-v-13f35e28>obj.__proto__,a = &quot;這是物件原型添加的&quot;;</div><br data-v-13f35e28><div data-v-13f35e28>console.log(obj.a) . . . // 在 fun 函數中添加的</div><br data-v-13f35e28><br data-v-13f35e28><div data-v-13f35e28>function Fun(){</div><div data-v-13f35e28>}</div><div data-v-13f35e28>Fun.prototype.a = &quot;這是 fun 原型添加的&quot;</div><div data-v-13f35e28>let obj = new Fun();</div><div data-v-13f35e28>obj.__proto__,a = &quot;這是物件原型添加的&quot;;</div><br data-v-13f35e28><div data-v-13f35e28>console.log(obj.a) . . . // 這是物件原型添加的</div><br data-v-13f35e28><br data-v-13f35e28><div data-v-13f35e28>function Fun(){</div><div data-v-13f35e28>}</div><div data-v-13f35e28>Fun.prototype.a = &quot;這是 fun 原型添加的&quot;</div><div data-v-13f35e28>let obj = new Fun();</div><br data-v-13f35e28><div data-v-13f35e28>console.log(obj.a) . . . // 這是 fun 原型添加的</div><br data-v-13f35e28><div data-v-13f35e28>function Fun(){</div><div data-v-13f35e28>}</div><div data-v-13f35e28>let obj = new Fun();</div><br data-v-13f35e28><div data-v-13f35e28>console.log(obj.a) . . . // undefined</div><br data-v-13f35e28><br data-v-13f35e28><div data-v-13f35e28>function Fun(){</div><div data-v-13f35e28>}</div><div data-v-13f35e28>let obj = new Fun();</div><div data-v-13f35e28>Object.prototype.a = &quot;這是Object添加的&quot;</div><br data-v-13f35e28><div data-v-13f35e28>console.log(obj.a) . . . // 這是Object添加的</div><br data-v-13f35e28><br data-v-13f35e28><div data-v-13f35e28>以上原型鏈</div><div data-v-13f35e28> 先在物件本身找 &gt; 構造函數中找 &gt; 物件原型中找 &gt; 構造函數原型中找 &gt; 物件上一層原型查找 </div><br data-v-13f35e28><br data-v-13f35e28><br data-v-13f35e28><div id="twohand003" class="cardTitle" data-v-13f35e28> 3. JS作用域+this指向+原型的考题 </div><div data-v-13f35e28>function fun(){</div><div data-v-13f35e28>. console.log( 111 );</div><div data-v-13f35e28>. return &quot;aaa&quot;</div><div data-v-13f35e28>}</div><br data-v-13f35e28><div data-v-13f35e28>console.log( fun ); . . . // 打印出 函數本體</div><div data-v-13f35e28>console.log( fun() ); . . . // 先打印 111 , 後打印 aaa</div><div data-v-13f35e28> console.log( new fun() ); . . . //fun{} 返回物件, 因為你new了創建新物件 </div><br data-v-13f35e28><div data-v-13f35e28>如果裡面有 this 則指向於 new fun</div><br data-v-13f35e28><div data-v-13f35e28>function fun(){</div><div data-v-13f35e28>. this.xxx = &quot;123&quot;</div><div data-v-13f35e28>. console.log( 111 );</div><div data-v-13f35e28>. return &quot;aaa&quot;</div><div data-v-13f35e28>}</div><br data-v-13f35e28><div data-v-13f35e28>console.log( new fun() ); . . . //fun{xxx: &quot;123&quot;}</div><br data-v-13f35e28><br data-v-13f35e28><div data-v-13f35e28>function fun(){</div><div data-v-13f35e28>. this.xxx = &quot;123&quot;</div><div data-v-13f35e28>. console.log( this );</div><div data-v-13f35e28>. console.log( 111 );</div><div data-v-13f35e28>. return &quot;aaa&quot;</div><div data-v-13f35e28>}</div><br data-v-13f35e28><div data-v-13f35e28>打印出 window</div><div data-v-13f35e28>普通函數的 this 代表 window</div><br data-v-13f35e28><div class="cor36" data-v-13f35e28>輸出多少?</div><div data-v-13f35e28>function Foo(){</div><div data-v-13f35e28>. getName = function(){console.log(1)}</div><div data-v-13f35e28>. return this;</div><div data-v-13f35e28>}</div><div data-v-13f35e28>Foo.getName = function(){console.log(2)}</div><div data-v-13f35e28>Foo.prototype.getName = function(){console.log(3)}</div><div data-v-13f35e28>var getName = function(){console.log(4)}</div><div data-v-13f35e28>function getName(){</div><div data-v-13f35e28>. console.log(5)</div><div data-v-13f35e28>}</div><br data-v-13f35e28><div data-v-13f35e28>Foo.getName(); . . . // 2</div><div data-v-13f35e28>getName(); . . . // 4</div><div data-v-13f35e28>Foo().getName();</div><div data-v-13f35e28>getName();</div><div data-v-13f35e28>new Foo().getName();</div><br data-v-13f35e28><div data-v-13f35e28>1.getName=function...是全局的window.getName=...</div><br data-v-13f35e28><div data-v-13f35e28>2.Foo.getName() 先找函數本身 打印出 2</div><br data-v-13f35e28><div data-v-13f35e28>3.Foo.getName() 的 Foo 沒有加括號代表他沒有執行</div><br data-v-13f35e28><div data-v-13f35e28> 4.getName() 找到變量 var getName =.. 和函數 function getName(){.. </div><div data-v-13f35e28>(因作用域) 普通變量 &gt; 函數 . . . 所以打印出 4</div><br data-v-13f35e28><div data-v-13f35e28>5.Foo().getName();</div><div data-v-13f35e28>Foo() 先執行 做 //getName = function(){console.log(1)}</div><div data-v-13f35e28>然後 return this . . . return 出 window</div><div data-v-13f35e28>所以是 window.getName() . . . 因上上行 所以打印出 1</div><br data-v-13f35e28><div data-v-13f35e28>6.getName(); . . . 因上上上行覆蓋, 所以打印出 1</div><br data-v-13f35e28><div data-v-13f35e28>7.new Foo().getName(); 物件找方法</div><div data-v-13f35e28> 先在物件本身找 &gt; 構造函數中找 &gt; 物件原型中找 &gt; 構造函數原型中找 &gt; 物件上一層原型查找 </div><div data-v-13f35e28>本身沒有</div><div data-v-13f35e28>構造函數 function Foo(){ 本身裡不是 this. getName是 window.</div><div data-v-13f35e28>物件原型中找 __proto__ 沒有</div><div data-v-13f35e28>物件原型和構造函數原型他們是一個原型</div><div data-v-13f35e28>所以看構造函數原型 , 打印出 3</div><div data-v-13f35e28>Foo.prototype.getName = function(){console.log(3)}</div><br data-v-13f35e28><br data-v-13f35e28><div class="cor36" data-v-13f35e28>輸出多少?</div><div data-v-13f35e28>var o = {</div><div data-v-13f35e28>. a:10,</div><div data-v-13f35e28>. b:{</div><div data-v-13f35e28>. . fn:function(){</div><div data-v-13f35e28>. . . console.log( this.a );</div><div data-v-13f35e28>. . . console.log( this );</div><div data-v-13f35e28>. . }</div><div data-v-13f35e28>. }</div><div data-v-13f35e28>}</div><div data-v-13f35e28>o.b.fn()</div><br data-v-13f35e28><div data-v-13f35e28>重點看誰執行 fn, 所以 fn 裡面的 this 指向 b</div><div data-v-13f35e28>console.log( this.a ); . . . 打印 undefined</div><div data-v-13f35e28>console.log( this ); . . . 打印 fn</div><br data-v-13f35e28><div class="cor36" data-v-13f35e28>輸出多少?</div><div data-v-13f35e28>window.name = &quot;ByteDance&quot;;</div><div data-v-13f35e28>function A(){</div><div data-v-13f35e28>. this.name = 123;</div><div data-v-13f35e28>}</div><div data-v-13f35e28>A.prototype.getA = function(){</div><div data-v-13f35e28>. console.log( this );</div><div data-v-13f35e28>. return this.name + 1;</div><div data-v-13f35e28>}</div><div data-v-13f35e28>let a = new A();</div><div data-v-13f35e28>let funcA = a.getA;</div><div data-v-13f35e28>funcA();</div><div data-v-13f35e28>console.log( funcA() )</div><br data-v-13f35e28><div data-v-13f35e28>先注意 let funcA = a.getA 的 a.getA 有沒有括號,差很大</div><div data-v-13f35e28>a.getA 沒括號 裡面代碼不執行 有return則返回函數體</div><div data-v-13f35e28> a.getA 沒執行, 相當於把這個 A.prototype.getA = function(){ 函數賦給了 funcA </div><div data-v-13f35e28> funcA() 執行了 A.prototype.getA = function(){ 裡面的 console.log(this) 打印 window </div><div data-v-13f35e28>console.log( funcA() ) 要打印 return this.name + 1;</div><div data-v-13f35e28>而 this 代表 window, this.name 找到 &quot;ByteDance&quot;</div><div data-v-13f35e28>console.log( funcA() ) 打印出 &quot;ByteDance1&quot;</div><br data-v-13f35e28><div class="cor36" data-v-13f35e28>輸出多少?</div><div data-v-13f35e28>window.name = &quot;ByteDance&quot;;</div><div data-v-13f35e28>function A(){</div><div data-v-13f35e28>. this.name = 123;</div><div data-v-13f35e28>}</div><div data-v-13f35e28>A.prototype.getA = function(){</div><div data-v-13f35e28>. console.log( this );</div><div data-v-13f35e28>. return this.name + 1;</div><div data-v-13f35e28>}</div><div data-v-13f35e28>let a = new A();</div><div data-v-13f35e28>let funcA = a.getA();</div><div data-v-13f35e28>funcA;</div><br data-v-13f35e28><div data-v-13f35e28>let funcA = a.getA() 調用直接執行</div><div data-v-13f35e28>執行 A.prototype.getA = function(){</div><div data-v-13f35e28>裡面的 console.log( this ) this 指 A</div><div data-v-13f35e28>打印出 A{name: 123}</div><div data-v-13f35e28>funcA沒加括號 裡面代碼不執行 有return則返回函數體</div><br data-v-13f35e28><div class="cor36" data-v-13f35e28>輸出多少?</div><div data-v-13f35e28>var length = 10;</div><div data-v-13f35e28>function fn(){</div><div data-v-13f35e28>. return this.length</div><div data-v-13f35e28>}</div><div data-v-13f35e28>var obj = {</div><div data-v-13f35e28>. length: 5,</div><div data-v-13f35e28>. test1: function(){</div><div data-v-13f35e28>. . return fn();</div><div data-v-13f35e28>. }</div><div data-v-13f35e28>}</div><div data-v-13f35e28>obj.test2 = fn;</div><div data-v-13f35e28>console.log( obj.test1() );</div><div data-v-13f35e28>console.log( fn()===obj.test2() );</div><div data-v-13f35e28>console.log( obj.test1() == obj.test2() );</div><br data-v-13f35e28><div data-v-13f35e28>注意 obj.test2 = fn 沒加掛號 相當於 把這個函數賦給了</div><div data-v-13f35e28>沒加掛號 裡面代碼不執行 有return則返回函數體</div><div data-v-13f35e28>相當於 把這個 function fn(){ 函數賦給了 obj.test2</div><div data-v-13f35e28>所以 obj 多了一個 test2: function</div><br data-v-13f35e28><div data-v-13f35e28>console.log( obj.test1() )</div><div data-v-13f35e28>test1 return fn() , fn帶括號要執行</div><div data-v-13f35e28>fn return this.length, 這個this 指向 window</div><div data-v-13f35e28>return 10, return 10+1</div><div data-v-13f35e28>console.log( obj.test1() ) 打印出 11</div><br data-v-13f35e28><div data-v-13f35e28>console.log( fn()===obj.test2() )</div><div data-v-13f35e28>obj.test2() 裡面 return this.length,</div><div data-v-13f35e28>this 指向 obj , this.length 是 5</div><div data-v-13f35e28>而 fn() 的 this 指向 window , window.length 是 10</div><div data-v-13f35e28>console.log( fn()===obj.test2() ) 是 false</div><br data-v-13f35e28><div data-v-13f35e28>console.log( obj.test1() == obj.test2() )</div><div data-v-13f35e28>obj.test2() 上面討論 5</div><div data-v-13f35e28>obj.test1() 上面討論 11</div><br data-v-13f35e28><br data-v-13f35e28><br data-v-13f35e28><div id="twohand004" class="cardTitle" data-v-13f35e28>4. JS判斷變量是不是數組？</div><div data-v-13f35e28>建議 別寫 typeOf</div><br data-v-13f35e28><div class="cor36" data-v-13f35e28>方法1: isArray</div><div data-v-13f35e28>var arr = [1,2,3];</div><div data-v-13f35e28>console.log( Array.isArray( arr ) ); . . . // true</div><div data-v-13f35e28>console.log( Array.isArray( {} ) ); . . . // false</div><div data-v-13f35e28>嚴謹的方法</div><br data-v-13f35e28><div class="cor36" data-v-13f35e28>方法2: instanceof</div><div data-v-13f35e28>console.log( arr instanceof Array ); . . . // true</div><div data-v-13f35e28>console.log( arr instanceof Object ); . . . // true</div><div data-v-13f35e28>console.log( arr instanceof {} ); . . . // true</div><div data-v-13f35e28>arr instanceof {} true 會往原型去找, 他不嚴謹</div><br data-v-13f35e28><div class="cor36" data-v-13f35e28>方法3: 原型 prototype</div><div data-v-13f35e28> console.log( Object.prototype.toString.call(arr) ); . . . [object Array] </div><div data-v-13f35e28> console.log( Object.prototype.toString.call(arr).indexOf(&quot;Array&quot;) ); </div><div data-v-13f35e28>不是 -1 就證明他 是陣列</div><div data-v-13f35e28> console.log( Object.prototype.toString.call(arr).indexOf(&quot;Array&quot;) &gt; -1 ); . . . // true </div><br data-v-13f35e28><div class="cor36" data-v-13f35e28>方法4: isPrototypeOf()</div><div data-v-13f35e28> console.log( Array.prototype.isPrototyprOf(arr) ) . . . // true </div><br data-v-13f35e28><div class="cor36" data-v-13f35e28>方法5: constructor</div><div data-v-13f35e28> console.log( arr.constructor.toString() ) . . . [object Array] </div><div data-v-13f35e28> console.log( arr.constructor.toString().indexOf(&quot;Array&quot;) ) . . . // true </div><br data-v-13f35e28><br data-v-13f35e28><br data-v-13f35e28><div id="twohand005" class="cardTitle" data-v-13f35e28> 5. slice是幹嘛的、splice是否會改變原數組? </div><div data-v-13f35e28>slice 用來擷取</div><div data-v-13f35e28> slice方法用来截取数组的元素，返回一个新的数组。slice方法有两个参数，第一个参数为截取的开始位置，为数组下标；第二个参数为截取的结束位置。但不包含结束位置的元素 </div><br data-v-13f35e28><div data-v-13f35e28>var arr1 = [ &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot; ];</div><br data-v-13f35e28><div data-v-13f35e28>var arr2 = arr1.slice( 1,3 );</div><div data-v-13f35e28> console.log( arr2 , arr1 ); . . . // [ &quot;b&quot;, &quot;c&quot; ] , [ &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot; ] </div><br data-v-13f35e28><div data-v-13f35e28>var arr3 = arr1.slice( -3 );</div><div data-v-13f35e28>console.log( arr3 ); . . . // [ &quot;c&quot;, &quot;d&quot;, &quot;e&quot; ]</div><br data-v-13f35e28><div data-v-13f35e28>var arr4 = arr1.slice( 2 );</div><div data-v-13f35e28>console.log( arr4 ); . . . // [ &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot; ]</div><br data-v-13f35e28><br data-v-13f35e28><br data-v-13f35e28><div data-v-13f35e28>splice 用來 插入 刪除 替換</div><div data-v-13f35e28> splice方法用来向数组添加元素或者删除数组某个元素，然后删除的元素。第一个参数为插入元素或者删除元素的位置，第二个参数为要删除的元素数量。后面的每个参数都会依次添加到数组中（从删除的位置开始）。 </div><br data-v-13f35e28><div data-v-13f35e28>var arr1 = [ &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot; ];</div><br data-v-13f35e28><div data-v-13f35e28>var arr2 = arr1.splice( 1,1 ); . . . // 從 1 開始刪 1 個</div><div data-v-13f35e28>console.log( arr2 ); . . . // [ &quot;b&quot; ]</div><div data-v-13f35e28>console.log( arr1 ); . . . // [ &quot;a&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot; ]</div><br data-v-13f35e28><div data-v-13f35e28>var arr3 = [ &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot; ];</div><div data-v-13f35e28>var arr4 = arr3.splice( 1,1,&quot;你好&quot; );</div><div data-v-13f35e28> console.log( arr4 ); . . . // [ &quot;a&quot;, &quot;你好&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot; ] </div><br data-v-13f35e28><br data-v-13f35e28><div data-v-13f35e28>區別:</div><div data-v-13f35e28> slice 不改變原數組 返回原數組中的部分元素 用來選擇數組中的元素 </div><br data-v-13f35e28><div data-v-13f35e28> splice 改變原數組 返回數組中被刪除的元素组成的新數組 用於在數組中插入或刪除元素 </div><br data-v-13f35e28><br data-v-13f35e28><br data-v-13f35e28><div id="twohand006" class="cardTitle" data-v-13f35e28>6. JS 數組去重的方式?</div><div class="cor36" data-v-13f35e28># 方法1: new set</div><div data-v-13f35e28>var arr = [ 1,2,3,2,4,1 ];</div><div data-v-13f35e28>console.log( new Set( arr ) );</div><div data-v-13f35e28>發現打印的是物件</div><div data-v-13f35e28>console.log( Array.from( new Set( arr ) ) );</div><div data-v-13f35e28>打印出陣列</div><div data-v-13f35e28>也可以</div><div data-v-13f35e28>console.log( [...new Set( arr ) ] );</div><br data-v-13f35e28><div data-v-13f35e28>封裝:</div><div data-v-13f35e28>function unique( arr ){</div><div class="pTwo" data-v-13f35e28>return [ Array.from( new Set(arr) ) ]</div><div data-v-13f35e28>}</div><div data-v-13f35e28>console.log( unique( arr ) );</div><br data-v-13f35e28><br data-v-13f35e28><div class="cor36" data-v-13f35e28>#</div><div data-v-13f35e28>function unique( arr ){</div><div class="pTwo" data-v-13f35e28>return [...new Set(arr)]</div><div data-v-13f35e28>}</div><div data-v-13f35e28>console.log( unique( arr ) );</div><br data-v-13f35e28><br data-v-13f35e28><div class="cor36" data-v-13f35e28>方法2: indexOf</div><div data-v-13f35e28> indexOf() 方法會回傳給定元素於陣列中第一個被找到之索引，若不存在於陣列中則回傳 -1 </div><br data-v-13f35e28><div data-v-13f35e28>var arr = [ 1,2,3,2,4,1 ];</div><div data-v-13f35e28>function unique( arr ){</div><div class="pTwo" data-v-13f35e28>var result = [];</div><div class="pTwo" data-v-13f35e28>for( var i = 0 ; i ＜ arr.length ; i++ ){</div><div class="pFou" data-v-13f35e28>if( result.indexOf( arr[i] ) == -1 ){</div><div class="pSix" data-v-13f35e28>result.push( arr[i] );</div><div class="pFou" data-v-13f35e28>}</div><div class="pTwo" data-v-13f35e28>}</div><div class="pTwo" data-v-13f35e28>return result;</div><div data-v-13f35e28>}</div><div data-v-13f35e28>console.log( unique( arr ) );</div><br data-v-13f35e28><div data-v-13f35e28>目標, 遍歷陣列, 看有沒有在 result 陣列, 沒有就添加</div><div data-v-13f35e28>去找 indexOf( arr [ i ] )</div><div data-v-13f35e28> 第一次去找 result 肯定是空的 ( 不存在 ) 就回傳 -1 就把他推進 result 裡面 </div><div data-v-13f35e28>不是 -1 就不動作 完成。</div><br data-v-13f35e28><br data-v-13f35e28><div class="cor36" data-v-13f35e28>方法3: reduce</div><div data-v-13f35e28>var arr = [ 1,2,3,2,4,1 ];</div><div data-v-13f35e28>function unique() {</div><div class="pTwo" data-v-13f35e28>var result = arr.reduce( ( pre , item ) =&gt; {</div><div class="pFou" data-v-13f35e28> return pre.includes ( item ) ? pre : [ ...pre , item ] </div><div class="pTwo" data-v-13f35e28>} , [] )</div><div class="pTwo" data-v-13f35e28>console.log ( result )</div><div data-v-13f35e28>}</div><div data-v-13f35e28>unique()</div><br data-v-13f35e28><div data-v-13f35e28>reduce 傳 2參數 1. 方法(A上一次值,B當前值) 2. 初始值</div><div data-v-13f35e28>循環方式: 每次都是上一次結果 pre</div><div data-v-13f35e28> 比如 第 1 次 1 , 把 1 放到 初始值 [ 1 ] , 第 2 次 [ 1, 2 ] , 每次循環都是上一次結果 </div><div data-v-13f35e28> return 判斷有無重複 , 上次結果 包不包含 當前項目 pre.includes(item) </div><div data-v-13f35e28>包含 ...&gt; 不要 , 直接返回當前數組 , 不包含 ...&gt; 加進 pre</div><div data-v-13f35e28>? pre : [ ...pre , item ]</div><br data-v-13f35e28><br data-v-13f35e28><div class="cor36" data-v-13f35e28>方法4: 兩層 for 循環比較</div><div data-v-13f35e28>var arr = [ 1,2,3,2,4,1 ];</div><div data-v-13f35e28>function unique() {</div><div class="pTwo" data-v-13f35e28>for ( let i = 0 ; i ＜ arr.length ; i++ ) {</div><div class="pFou" data-v-13f35e28>for ( let j = i +1 ; j ＜ arr.length ; j++ ) {</div><div class="pSix" data-v-13f35e28>if ( arr [ i ] === arr [ j ] ) {</div><div class="pEig" data-v-13f35e28>arr.splice ( j, 1 )</div><div class="pEig" data-v-13f35e28>j--</div><div class="pSix" data-v-13f35e28>}</div><div class="pFou" data-v-13f35e28>}</div><div class="pTwo" data-v-13f35e28>}</div><div class="pTwo" data-v-13f35e28>return arr</div><div data-v-13f35e28>}</div><br data-v-13f35e28><br data-v-13f35e28><div data-v-13f35e28>第 1 層循環選定 1 個值</div><div data-v-13f35e28>第 2 層循環 遍歷 其餘元素</div><div data-v-13f35e28>依次和 這個值 比較</div><div data-v-13f35e28>相同 ..&gt; splice 刪除</div><br data-v-13f35e28><br data-v-13f35e28><div class="cor36" data-v-13f35e28>方法5: sort</div><div data-v-13f35e28>var arr3 = [ 1,2,3,2,4,1 ];</div><div data-v-13f35e28>function unique( arr ){</div><div data-v-13f35e28>. arr = arr.sort();</div><div data-v-13f35e28>. var brr = [];</div><div data-v-13f35e28>. for( var i = 0 ; i ＜ arr.length ; i++ ){</div><div data-v-13f35e28>. . if( arr[i] !== arr[ i-1 ] ){</div><div data-v-13f35e28>. . . brr.push( arr[ i ] );</div><div data-v-13f35e28>. . }</div><div data-v-13f35e28>. }</div><div data-v-13f35e28>. return brr;</div><div data-v-13f35e28>}</div><div data-v-13f35e28>console.log( unique( arr3 ) );</div><br data-v-13f35e28><br data-v-13f35e28><br data-v-13f35e28><div class="cardTitle" id="twohand007" data-v-13f35e28>7. 找出多維數組最大值?</div><div data-v-13f35e28> 大陣列中包含 4 個小陣列, 分別找到每個小陣列中的最大值, 然後串起來成新陣列 </div><div data-v-13f35e28>輸入:[</div><div data-v-13f35e28>. [ 4, 5, 1, 3, ],</div><div data-v-13f35e28>. [ 13, 27, 18, 26, ],</div><div data-v-13f35e28>. [ 32, 35, 37, 39, ],</div><div data-v-13f35e28>. [ 1000, 1001, 857, 1 ],</div><div data-v-13f35e28>]</div><div data-v-13f35e28>輸出: [ 5, 27, 39, 1001 ]</div><br data-v-13f35e28><br data-v-13f35e28><div data-v-13f35e28>function fnArr( arr ){</div><div data-v-13f35e28>. var newArr = [];</div><div data-v-13f35e28>. arr.forEach(( item, index )=&gt;{</div><div data-v-13f35e28>. . newArr.push( Math.max( ...item ) )</div><div data-v-13f35e28>. })</div><div data-v-13f35e28>. return newArr;</div><div data-v-13f35e28>}</div><div data-v-13f35e28>console.log( fnArr([</div><div data-v-13f35e28>. [ 4, 5, 1, 3, ],</div><div data-v-13f35e28>. [ 13, 27, 18, 26, ],</div><div data-v-13f35e28>. [ 32, 35, 37, 39, ],</div><div data-v-13f35e28>. [ 1000, 1001, 857, 1 ],</div><div data-v-13f35e28>]));</div><br data-v-13f35e28><div data-v-13f35e28>首先 遍歷 item 是每一項 [ 4, 5, 1, 3, ]</div><div data-v-13f35e28>取裡面最大值 Math.max(...item)</div><br data-v-13f35e28><br data-v-13f35e28><br data-v-13f35e28><div id="twohand008" class="cardTitle" data-v-13f35e28>8. 給字串新增方法實現功能</div><div data-v-13f35e28> 給字串物件定義一個addPrefix函數, 當傳入一個字串時, 他會返回新的帶有指定前綴的字串, 例如: </div><div data-v-13f35e28>console.log( &quot;world&quot;.addPrefix(&quot;hello&quot;) )</div><div data-v-13f35e28>控制台輸出: &quot;helloworld&quot;</div><br data-v-13f35e28><div data-v-13f35e28>var str = &quot;你好&quot;;</div><div data-v-13f35e28>String.prototype.addTest = function(){</div><div data-v-13f35e28>. return 111;</div><div data-v-13f35e28>}</div><div data-v-13f35e28>console.log( str.addPrefix() ) . . . // 打印 111</div><br data-v-13f35e28><br data-v-13f35e28><div data-v-13f35e28>String.prototype.addTest = function(){</div><div data-v-13f35e28>. return this;</div><div data-v-13f35e28>}</div><div data-v-13f35e28>console.log( str.addPrefix() ) . . . // 打印 你好</div><br data-v-13f35e28><br data-v-13f35e28><div data-v-13f35e28>String.prototype.addTest = function(){</div><div data-v-13f35e28>. return str + this;</div><div data-v-13f35e28>}</div><div data-v-13f35e28> console.log( &quot;world&quot;.addPrefix(&quot;hello&quot;) ) . . . // 打印 worldhello </div><br data-v-13f35e28><br data-v-13f35e28><br data-v-13f35e28><div id="twohand009" class="cardTitle" data-v-13f35e28> 9. 找出字符串出現最多次數的字符以及次數 </div><div data-v-13f35e28>判斷一個字串中出現次數最多的字符, 並統計次數</div><div data-v-13f35e28> charAt() 方法返回一个由给定索引處的單個 UTF-16 碼元構成的新字串。 </div><div data-v-13f35e28>var john = { . . . //forin複習</div><div data-v-13f35e28>. firstName: &#39;John&#39;,</div><div data-v-13f35e28>. lastName: &#39;Doe&#39;</div><div data-v-13f35e28>};</div><div data-v-13f35e28>for (var prop in john) {</div><div data-v-13f35e28>. console.log(prop + &#39;:&#39; + john[prop]);</div><div data-v-13f35e28>}</div><br data-v-13f35e28><div data-v-13f35e28>var str = &quot;aaabbbbbbbbbccccccc&quot;</div><div data-v-13f35e28>var obj = {};</div><div data-v-13f35e28>for( var i = 0 ; i ＜ str.length ; i++ ){</div><div data-v-13f35e28>. var char = str.charAt(i);</div><div data-v-13f35e28>. if( obj[ char ] ){</div><div data-v-13f35e28>. . obj[ char ]++</div><div data-v-13f35e28>. } else {</div><div data-v-13f35e28>. . obj[ char ] = 1;</div><div data-v-13f35e28>. }</div><div data-v-13f35e28>}</div><div data-v-13f35e28>console.log( obj ); . . . 每個字符和次數都統計出來了</div><br data-v-13f35e28><div data-v-13f35e28>目標 弄一個對象 把值放進去 { a:3, b:10, c:15 }</div><div data-v-13f35e28>遍歷字串, 如果 obj 沒有則 obj[ char ] = 1</div><div data-v-13f35e28>如果 obj 有則 value值++</div><br data-v-13f35e28><div data-v-13f35e28>var max = 0;</div><div data-v-13f35e28>for( var key in obj ){</div><div data-v-13f35e28>. if( max ＜ obj[ key ] ){</div><div data-v-13f35e28>. . max = obj[ key ];</div><div data-v-13f35e28>. }</div><div data-v-13f35e28>}</div><div data-v-13f35e28>console.log( max );</div><br data-v-13f35e28><div data-v-13f35e28>目標 到物件的值找最大值 { a:3, b:10, c:15 } 最大值 15</div><div data-v-13f35e28>遍歷物件 for in</div><div data-v-13f35e28>如果 max變數 小於 obj[key]</div><div data-v-13f35e28>key 是物件中每一項 a b c</div><div data-v-13f35e28>obj[key] 是統計值 3 10 15</div><div data-v-13f35e28>如果 max變數 小於 obj[key] 就賦值 就找到最大值 15</div><br data-v-13f35e28><div data-v-13f35e28>for( var key in obj ){</div><div data-v-13f35e28>. if( obj[key] == max ){</div><div data-v-13f35e28>. . console.log( &quot;最多字符是&quot; + key );</div><div data-v-13f35e28>. . console.log( &quot;出現次數&quot; + max );</div><div data-v-13f35e28>. }</div><div data-v-13f35e28>}</div><br data-v-13f35e28><div data-v-13f35e28>目標 找到最大值 15 對應的 key</div><div data-v-13f35e28>如果 obj[key] == max 就找到了</div><br data-v-13f35e28><br data-v-13f35e28><br data-v-13f35e28><div id="twohand010" class="cardTitle" data-v-13f35e28>10. 作用域考题</div><div data-v-13f35e28>function demo(){</div><div data-v-13f35e28>. var n = 2;</div><div data-v-13f35e28>. if( true ){</div><div data-v-13f35e28>. . var n = 1;</div><div data-v-13f35e28>. }</div><div data-v-13f35e28>. console.log( n );</div><div data-v-13f35e28>}</div><div data-v-13f35e28>demo(); . . . // 打印 1</div><br data-v-13f35e28><div data-v-13f35e28>function demo(){</div><div data-v-13f35e28>. let n = 2;</div><div data-v-13f35e28>. if( true ){</div><div data-v-13f35e28>. . let n = 1;</div><div data-v-13f35e28>. }</div><div data-v-13f35e28>. console.log( n );</div><div data-v-13f35e28>}</div><div data-v-13f35e28>demo(); . . . // 打印 2</div><br data-v-13f35e28><br data-v-13f35e28><br data-v-13f35e28><div id="twohand011" class="cardTitle" data-v-13f35e28>11. 將下列物件進行合併</div><p data-v-13f35e28>const a = { name: &quot;wayne&quot;, age: 18 }</p><p data-v-13f35e28>const b = { sex: &quot;male&quot;, hobby: &quot;sleep&quot; }</p><br data-v-13f35e28><p class="cor36" data-v-13f35e28>方法1: Object.assign</p><p data-v-13f35e28>const a = { name: &quot;wayne&quot;, age: 18 }</p><p data-v-13f35e28>const b = { sex: &quot;male&quot;, hobby: &quot;sleep&quot; }</p><p class="comment" data-v-13f35e28> let obj = Object.assign( a, b ); //會改變 a 物件 </p><p data-v-13f35e28> let obj = Object.assign( {}, a, b ); <span class="comment" data-v-13f35e28>//用空物件,可以不改變a,b</span></p><p data-v-13f35e28>console.log( obj );</p><p class="comment" data-v-13f35e28> // { name:&quot;wayne&quot;,age:18,sex:&quot;male&quot;,hobby:&quot;sleep&quot; } </p><br data-v-13f35e28><p class="cor36" data-v-13f35e28>方法2: 解構賦值 + ...擴展運算符</p><p data-v-13f35e28>const a = { name: &quot;wayne&quot;, age: 18 }</p><p data-v-13f35e28>const b = { sex: &quot;male&quot;, hobby: &quot;sleep&quot; }</p><p data-v-13f35e28>let obj = { ...a, ...b }</p><p data-v-13f35e28>console.log( obj );</p><p class="comment" data-v-13f35e28> // { name:&quot;wayne&quot;,age:18,sex:&quot;male&quot;,hobby:&quot;sleep&quot; } </p><br data-v-13f35e28><p class="cor36" data-v-13f35e28>方法3: 遍歷 物件 a 物件 b</p><p data-v-13f35e28>const a = { name: &quot;wayne&quot;, age: 18 }</p><p data-v-13f35e28>const b = { sex: &quot;male&quot;, hobby: &quot;sleep&quot; }</p><p data-v-13f35e28>const obj = {}</p><p data-v-13f35e28>for ( let key in a ) {</p><p class="pTwo" data-v-13f35e28>obj[ key ] = a[ key ]</p><p data-v-13f35e28>}</p><p data-v-13f35e28>for ( let key in b)</p><p class="pTwo" data-v-13f35e28>obj[ key ] = b[ key ]</p><p data-v-13f35e28>}</p><p data-v-13f35e28>coneol.log ( obj )</p><p class="comment" data-v-13f35e28> // { name:&quot;wayne&quot;,age:18,sex:&quot;male&quot;,hobby:&quot;sleep&quot; } </p><br data-v-13f35e28><br data-v-13f35e28><div id="twohand012" class="cardTitle" data-v-13f35e28>12. 清空數組</div><p class="cor36" data-v-13f35e28>1.直接賦值 空數組</p><p data-v-13f35e28>let a = [ 1,2,3,4 ]</p><p data-v-13f35e28>a = []</p><br data-v-13f35e28><p class="cor36" data-v-13f35e28> 2. splice 方法 -&gt; 會修改原數組 -&gt; 返回值 是 你刪掉的元素 </p><p data-v-13f35e28>arr.splice(起始位置, 需要刪除元素的個數, 插入的值 )</p><br data-v-13f35e28><p data-v-13f35e28>let arr = [ 1,2,3,4 ]</p><p data-v-13f35e28>function fn( arr ) {</p><p class="pTwo" data-v-13f35e28>arr.splice( 0, arr.length )</p><p data-v-13f35e28>}</p><p data-v-13f35e28>fn( arr )</p><p data-v-13f35e28>console.log ( arr )</p><br data-v-13f35e28><p class="cor36" data-v-13f35e28>3.修改 length</p><p data-v-13f35e28>let arr = [ 1,2,3,4 ]</p><p data-v-13f35e28>arr.length = 0</p><p data-v-13f35e28>console.log ( arr )</p><p data-v-13f35e28></p><p data-v-13f35e28></p><p data-v-13f35e28></p><br data-v-13f35e28></div></div></div>',1),ti=Gd(()=>n("div",{class:"toTopButton"},[n("div",{class:"disCen"},"___"),n("div",{class:"disCen"},"▲")],-1)),ci=[ti],vi=Gd(()=>n("div",{class:"toBotButton"},[n("div",{class:"disCen"},"▼"),n("div",{class:"disCen"},"￣")],-1)),ni=[vi],ei={__name:"JsPageTwoOne",setup(a){const s=ba(!1);window.addEventListener("scroll",function(){s.value=window.scrollY>0});function d(){window.scrollTo({top:0,left:0,behavior:"smooth"})}function v(){window.scrollTo({top:999999,left:0,behavior:"smooth"})}function t(e){window.scrollTo({top:document.getElementById(`${e}`).offsetTop,behavior:"smooth"})}return(e,c)=>(aa(),ta(G,null,[n("section",null,[n("div",G3,[n("div",Q3,[n("div",Z3,[ai,si,n("div",{onClick:c[0]||(c[0]=l=>t("twohand001")),class:"leftNavText"}," 作用域考题 "),n("div",{onClick:c[1]||(c[1]=l=>t("twohand002")),class:"leftNavText"},"物件考题"),n("div",{onClick:c[2]||(c[2]=l=>t("twohand003")),class:"leftNavText"}," 作用域+this指向+原型 "),n("div",{onClick:c[3]||(c[3]=l=>t("twohand004")),class:"leftNavText"}," 判斷變量是不是數組 "),n("div",{onClick:c[4]||(c[4]=l=>t("twohand005")),class:"leftNavText"}," slice&splice "),n("div",{onClick:c[5]||(c[5]=l=>t("twohand006")),class:"leftNavText"}," 數組去重的方式 "),n("div",{onClick:c[6]||(c[6]=l=>t("twohand007")),class:"leftNavText"}," 找出多維數組最大值 "),n("div",{onClick:c[7]||(c[7]=l=>t("twohand008")),class:"leftNavText"}," 給字串新增方法實現功能 "),n("div",{onClick:c[8]||(c[8]=l=>t("twohand009")),class:"leftNavText"}," 找出字符串出現次數 "),n("div",{onClick:c[9]||(c[9]=l=>t("twohand010")),class:"leftNavText"}," 作用域考题 "),n("div",{onClick:c[10]||(c[10]=l=>t("twohand011")),class:"leftNavText"}," 將下列物件進行合併 "),n("div",{onClick:c[11]||(c[11]=l=>t("twohand012")),class:"leftNavText"})])])]),di]),n("div",null,[W(k(B,{name:"fade",tag:"div"},{default:S(()=>[n("div",{onClick:d,class:"toTop"},ci)]),_:1},512),[[U,s.value]]),W(k(B,{name:"fade",tag:"div"},{default:S(()=>[n("div",{onClick:v,class:"toBot"},ni)]),_:1},512),[[U,s.value]])])],64))}},pi=pa(ei,[["__scopeId","data-v-13f35e28"]]);const kn=a=>(wa("data-v-e95ae228"),a=a(),ma(),a),li=K('<section data-v-e95ae228><div class="leftNav" data-v-e95ae228><div class="leftNavContainer" data-v-e95ae228><div class="leftNavLayout" data-v-e95ae228><br data-v-e95ae228><br data-v-e95ae228><div class="leftNavText" data-v-e95ae228></div><div class="leftNavText" data-v-e95ae228></div><div class="leftNavText" data-v-e95ae228></div><div class="leftNavText" data-v-e95ae228></div></div></div></div><div class="Main" data-v-e95ae228><div class="mainContainer" data-v-e95ae228><div class="mainLayout" data-v-e95ae228><br data-v-e95ae228><br data-v-e95ae228><div class="cardTitle cor36" data-v-e95ae228>9.輸出結果:</div><div data-v-e95ae228>alert (true + 1); . . . // 2</div><div data-v-e95ae228>alert (&quot;name&quot; + true); . . . // nametrue</div><div data-v-e95ae228>alert (undefined + 1); . . . // NaN</div><div data-v-e95ae228>alert (typeof null); . . . // object</div><div data-v-e95ae228>alert (typeof NaN); . . . // number</div><div data-v-e95ae228>alert (typeof undefined); . . . // undefined</div><br data-v-e95ae228><div data-v-e95ae228>1.隱式轉換 true 是 1 false 是 0</div><div data-v-e95ae228>2.字符串和任何相加, 其他都變字符串, 變成連接</div><br data-v-e95ae228><br data-v-e95ae228><br data-v-e95ae228><div class="cor36" data-v-e95ae228>輸出多少?</div><div data-v-e95ae228>for ( var i=0 ; i＜3 ; i++ ) {</div><div data-v-e95ae228>. setTimeout(function(){</div><div data-v-e95ae228>. . console.log(i)</div><div data-v-e95ae228>. },1000*i)</div><div data-v-e95ae228>}</div><div data-v-e95ae228>console.log(222)</div><br data-v-e95ae228><div data-v-e95ae228>setTimeout 進入事件循環, 而for循環是同步的</div><div data-v-e95ae228>第一次 i=0 , 0＜3 , 1000*0 的 setTime 進入事件循環列隊</div><div data-v-e95ae228>第二次 i=1 , 1＜3 , 1000*1 的 setTime 進入事件循環列隊</div><div data-v-e95ae228>第三次 i=2 , 2＜3 , 1000*2 的 setTime 進入事件循環列隊</div><div data-v-e95ae228>等for執行完才執行 事件循環裡的 setTimeout</div><div data-v-e95ae228>i=3 跳出循環</div><div data-v-e95ae228>結果</div><div data-v-e95ae228>222</div><div data-v-e95ae228>3</div><div data-v-e95ae228>隔1秒再打印3</div><div data-v-e95ae228>隔1秒再打印3</div><br data-v-e95ae228><br data-v-e95ae228><br data-v-e95ae228><div class="cor36" data-v-e95ae228>輸出多少?</div><div data-v-e95ae228>setTimeout(function(){</div><div data-v-e95ae228>. console.log(&quot;1&quot;);</div><div data-v-e95ae228>})</div><div data-v-e95ae228>new Promise((resolve)=&gt;{</div><div data-v-e95ae228>. console.log( &quot;1 promise 1&quot;);</div><div data-v-e95ae228>. resolve();</div><div data-v-e95ae228>}).then(()=&gt;{</div><div data-v-e95ae228>. console.log(&quot;微1&quot;)</div><div data-v-e95ae228>}).then(()=&gt;{</div><div data-v-e95ae228>. console.log(&quot;微2&quot;)</div><div data-v-e95ae228>})</div><div data-v-e95ae228>console.log(2);</div><br data-v-e95ae228><div data-v-e95ae228>同步 &gt; 微(事件循環) &gt; 宏 &gt; 微 ...</div><div data-v-e95ae228>console 同步 , promise.them 才是微</div><div data-v-e95ae228>第一個打印: 1 promise 1</div><div data-v-e95ae228>第二個打印: 2</div><div data-v-e95ae228>微任務 .then</div><div data-v-e95ae228>第三個打印: 微1</div><div data-v-e95ae228>第四個打印: 微2</div><div data-v-e95ae228>宏任務 setTimeout</div><div data-v-e95ae228>第五個打印: 1</div><br data-v-e95ae228><br data-v-e95ae228><br data-v-e95ae228><div class="cor36" data-v-e95ae228>輸出多少?</div><div data-v-e95ae228>Promise.resolve(&quot;333&quot;).then(res=&gt;{</div><div data-v-e95ae228>. console.log( res );</div><div data-v-e95ae228>. setTimeout(()=&gt;{</div><div data-v-e95ae228>. . console.log(&quot;Promise setTimeout&quot;)</div><div data-v-e95ae228>. },0)</div><div data-v-e95ae228>})</div><div data-v-e95ae228>setTimeout(()=&gt;{</div><div data-v-e95ae228>. console.log(111);</div><div data-v-e95ae228>. Promise.resolve(&quot;setTimeout Promise&quot;).then(res=&gt;{</div><div data-v-e95ae228>. . console.log( res );</div><div data-v-e95ae228>. })</div><div data-v-e95ae228>},0)</div><div data-v-e95ae228>console.log( 222 );</div><br data-v-e95ae228><div data-v-e95ae228>同步 &gt; 微(事件循環) &gt; 宏 &gt; 微 &gt; 宏 ...</div><div data-v-e95ae228>1.分同步異步 &gt; 先執行同步 &gt; 打印222</div><div data-v-e95ae228>2.先推微再推宏 &gt; 執行棧順序 &gt; 微Promise.then 宏setTimeout</div><div data-v-e95ae228>3.執行微 打印333</div><div data-v-e95ae228> 4.遇到promise推了一個setTimeout &gt; 目前2個宏 &gt; 誰先 &gt; WEBapi先推先出 &gt; 111先 </div><div data-v-e95ae228>5.執行宏 打印111</div><div data-v-e95ae228> 6.這個宏任務推了一個微任務Promise.then.setTimeout &gt; 微任務插隊宏任務 </div><div data-v-e95ae228>7.打印setTimeoutPromise</div><div data-v-e95ae228>8.最後執行宏任務打印Promise setTimeout</div><br data-v-e95ae228><br data-v-e95ae228><br data-v-e95ae228><div class="cor36" data-v-e95ae228>輸出多少?</div><div data-v-e95ae228>(function(){</div><div data-v-e95ae228>. var a = b = 10;</div><div data-v-e95ae228>})()</div><div data-v-e95ae228>console.log(a) . . . // a is not defined</div><div data-v-e95ae228> console.log(b) . . . // 10 b=10 沒寫默認window.b=10, 相當於全局var b=10 </div><br data-v-e95ae228><br data-v-e95ae228><br data-v-e95ae228><div class="cor36" data-v-e95ae228>輸出多少?</div><div data-v-e95ae228>function c(){</div><div data-v-e95ae228>. var b = 1</div><div data-v-e95ae228>. function a(){</div><div data-v-e95ae228>. . console.log(b)</div><div data-v-e95ae228>. . var b = 2;</div><div data-v-e95ae228>. . console.log(b)</div><div data-v-e95ae228>. }</div><div data-v-e95ae228>. a()</div><div data-v-e95ae228>. console.log(b)</div><div data-v-e95ae228>}</div><div data-v-e95ae228>c()</div><br data-v-e95ae228><div data-v-e95ae228>先看本層作用域有沒有此變量 (注意變量提升)</div><div data-v-e95ae228>a()裡面有var b提升, 第一個console.log(b) . . . // undefined</div><div data-v-e95ae228>第二個console.log(b) . . . // 2 因為上面有</div><div data-v-e95ae228>第三個console.log(b)本層有是 1</div><br data-v-e95ae228><br data-v-e95ae228><br data-v-e95ae228><div class="cor36" data-v-e95ae228>輸出多少?</div><div data-v-e95ae228>var name = &quot;a&quot;;</div><div data-v-e95ae228>(function(){</div><div data-v-e95ae228>. if( typeof name == &quot;undefined&quot; ){</div><div data-v-e95ae228>. . var name = &quot;b&quot;;</div><div data-v-e95ae228>. . console.log(&quot;111&quot;+name);</div><div data-v-e95ae228>. } else {</div><div data-v-e95ae228>. . console.log(&quot;222&quot;+name);</div><div data-v-e95ae228>. }</div><div data-v-e95ae228>})()</div><br data-v-e95ae228><div data-v-e95ae228>先看本層作用域有沒有此變量 (注意變量提升)</div><div data-v-e95ae228>注意JS除了函數外, JS沒有塊級作用域</div><div data-v-e95ae228>var先變量提升到function, 就算if( false )也是提升</div><div data-v-e95ae228>所以 var name, 所以name == undefined, 所以打印 111b</div><br data-v-e95ae228><br data-v-e95ae228><br data-v-e95ae228><div class="cor36" data-v-e95ae228>輸出多少?</div><div data-v-e95ae228>var bar = 1;</div><div data-v-e95ae228>function test(){</div><div data-v-e95ae228>. console.log( bar )</div><div data-v-e95ae228>. var bar = 2;</div><div data-v-e95ae228>. console.log( bar )</div><div data-v-e95ae228>}</div><div data-v-e95ae228>test();</div><br data-v-e95ae228><div data-v-e95ae228>先看本層作用域有沒有此變量 (注意變量提升)</div><div data-v-e95ae228>第一個bar undefined</div><div data-v-e95ae228>第二個bar 2</div><br data-v-e95ae228><br data-v-e95ae228><br data-v-e95ae228><div class="cor36" data-v-e95ae228>輸出多少?</div><div data-v-e95ae228>function fun(){</div><div data-v-e95ae228>. a = 10;</div><div data-v-e95ae228>. console.log( a );</div><div data-v-e95ae228>. var a = 20;</div><div data-v-e95ae228>. console.log( a );</div><div data-v-e95ae228>}</div><div data-v-e95ae228>fun(); . . . // 第一個打印 10 , 第二個打印 20</div><br data-v-e95ae228><br data-v-e95ae228><br data-v-e95ae228><div class="cor36" data-v-e95ae228>輸出多少?</div><div data-v-e95ae228>var obj1 = {</div><div data-v-e95ae228>. a:&quot;hellow&quot;</div><div data-v-e95ae228>}</div><div data-v-e95ae228>var obj2 = obj1;</div><div data-v-e95ae228>obj2.a= &quot;world&quot;;</div><div data-v-e95ae228>console.log(obj1);</div><div data-v-e95ae228>(function(){</div><div data-v-e95ae228>. console.log( a );</div><div data-v-e95ae228>. var a = 1;</div><div data-v-e95ae228>})();</div><div data-v-e95ae228>第一個打印 {a:world}</div><div data-v-e95ae228>第二個打印 undefined</div><br data-v-e95ae228><br data-v-e95ae228><br data-v-e95ae228><div class="cor36" data-v-e95ae228>輸出多少?</div><div data-v-e95ae228>var a = {}</div><div data-v-e95ae228>var b = {</div><div data-v-e95ae228>. key: &quot;a&quot;</div><div data-v-e95ae228>}</div><div data-v-e95ae228>var c = {</div><div data-v-e95ae228>. key: &quot;c&quot;</div><div data-v-e95ae228>}</div><div data-v-e95ae228>a[b] = &quot;123&quot;;</div><div data-v-e95ae228>a[c] = &quot;456&quot;;</div><div data-v-e95ae228>console.log( a[b] )</div><br data-v-e95ae228><div data-v-e95ae228>這相當於 let m = {}</div><div data-v-e95ae228>m.a = 1;</div><div data-v-e95ae228>m.a = 2;</div><div data-v-e95ae228>往物件裡面加內容,物件的key為字串</div><div data-v-e95ae228>結果為 456</div><div data-v-e95ae228>for(var k in a){</div><div data-v-e95ae228>. console.log( typeof k )</div><div data-v-e95ae228>}</div><br data-v-e95ae228><br data-v-e95ae228><br data-v-e95ae228><div class="cor36" data-v-e95ae228>輸出多少?</div><div data-v-e95ae228>function Foo(){</div><div data-v-e95ae228>. getName = function(){console.log(1)}</div><div data-v-e95ae228>. return this;</div><div data-v-e95ae228>}</div><div data-v-e95ae228>Foo.getName = function(){console.log(2)}</div><div data-v-e95ae228>Foo.prototype.getName = function(){console.log(3)}</div><div data-v-e95ae228>var getName = function(){console.log(4)}</div><div data-v-e95ae228>function getName(){</div><div data-v-e95ae228>. console.log(5)</div><div data-v-e95ae228>}</div><br data-v-e95ae228><div data-v-e95ae228>Foo.getName(); . . . // 2</div><div data-v-e95ae228>getName(); . . . // 4</div><div data-v-e95ae228>Foo().getName();</div><div data-v-e95ae228>getName();</div><div data-v-e95ae228>new Foo().getName();</div><br data-v-e95ae228><div data-v-e95ae228>1.getName=function...是全局的window.getName=...</div><br data-v-e95ae228><div data-v-e95ae228>2.Foo.getName() 先找函數本身 打印出 2</div><br data-v-e95ae228><div data-v-e95ae228>3.Foo.getName() 的 Foo 沒有加括號代表他沒有執行</div><br data-v-e95ae228><div data-v-e95ae228> 4.getName() 找到變量 var getName =.. 和函數 function getName(){.. </div><div data-v-e95ae228>(因作用域) 普通變量 &gt; 函數 . . . 所以打印出 4</div><br data-v-e95ae228><div data-v-e95ae228>5.Foo().getName();</div><div data-v-e95ae228>Foo() 先執行 做 //getName = function(){console.log(1)}</div><div data-v-e95ae228>然後 return this . . . return 出 window</div><div data-v-e95ae228>所以是 window.getName() . . . 因上上行 所以打印出 1</div><br data-v-e95ae228><div data-v-e95ae228>6.getName(); . . . 因上上上行覆蓋, 所以打印出 1</div><br data-v-e95ae228><div data-v-e95ae228>7.new Foo().getName(); 物件找方法</div><div data-v-e95ae228> 先在物件本身找 &gt; 構造函數中找 &gt; 物件原型中找 &gt; 構造函數原型中找 &gt; 物件上一層原型查找 </div><div data-v-e95ae228>本身沒有</div><div data-v-e95ae228>構造函數 function Foo(){ 本身裡不是 this. getName是 window.</div><div data-v-e95ae228>物件原型中找 __proto__ 沒有</div><div data-v-e95ae228>物件原型和構造函數原型他們是一個原型</div><div data-v-e95ae228>所以看構造函數原型 , 打印出 3</div><div data-v-e95ae228>Foo.prototype.getName = function(){console.log(3)}</div><br data-v-e95ae228><br data-v-e95ae228><br data-v-e95ae228><div class="cor36" data-v-e95ae228>輸出多少?</div><div data-v-e95ae228>var o = {</div><div data-v-e95ae228>. a:10,</div><div data-v-e95ae228>. b:{</div><div data-v-e95ae228>. . fn:function(){</div><div data-v-e95ae228>. . . console.log( this.a );</div><div data-v-e95ae228>. . . console.log( this );</div><div data-v-e95ae228>. . }</div><div data-v-e95ae228>. }</div><div data-v-e95ae228>}</div><div data-v-e95ae228>o.b.fn()</div><br data-v-e95ae228><div data-v-e95ae228>重點看誰執行 fn, 所以 fn 裡面的 this 指向 b</div><div data-v-e95ae228>console.log( this.a ); . . . 打印 undefined</div><div data-v-e95ae228>console.log( this ); . . . 打印 fn</div><br data-v-e95ae228><br data-v-e95ae228><br data-v-e95ae228><div class="cor36" data-v-e95ae228>輸出多少?</div><div data-v-e95ae228>window.name = &quot;ByteDance&quot;;</div><div data-v-e95ae228>function A(){</div><div data-v-e95ae228>. this.name = 123;</div><div data-v-e95ae228>}</div><div data-v-e95ae228>A.prototype.getA = function(){</div><div data-v-e95ae228>. console.log( this );</div><div data-v-e95ae228>. return this.name + 1;</div><div data-v-e95ae228>}</div><div data-v-e95ae228>let a = new A();</div><div data-v-e95ae228>let funcA = a.getA;</div><div data-v-e95ae228>funcA();</div><div data-v-e95ae228>console.log( funcA() )</div><br data-v-e95ae228><div data-v-e95ae228>先注意 let funcA = a.getA 的 a.getA 有沒有括號,差很大</div><div data-v-e95ae228>a.getA 沒括號 裡面代碼不執行 返回函數體</div><div data-v-e95ae228> a.getA 沒執行, 相當於把這個 A.prototype.getA = function(){ 函數賦給了 funcA </div><div data-v-e95ae228> funcA() 執行了 A.prototype.getA = function(){ 裡面的 console.log(this) 打印 window </div><div data-v-e95ae228>console.log( funcA() ) 要打印 return this.name + 1;</div><div data-v-e95ae228>而 this 代表 window, this.name 找到 &quot;ByteDance&quot;</div><div data-v-e95ae228>console.log( funcA() ) 打印出 &quot;ByteDance1&quot;</div><br data-v-e95ae228><br data-v-e95ae228><br data-v-e95ae228><div class="cor36" data-v-e95ae228>輸出多少?</div><div data-v-e95ae228>window.name = &quot;ByteDance&quot;;</div><div data-v-e95ae228>function A(){</div><div data-v-e95ae228>. this.name = 123;</div><div data-v-e95ae228>}</div><div data-v-e95ae228>A.prototype.getA = function(){</div><div data-v-e95ae228>. console.log( this );</div><div data-v-e95ae228>. return this.name + 1;</div><div data-v-e95ae228>}</div><div data-v-e95ae228>let a = new A();</div><div data-v-e95ae228>let funcA = a.getA();</div><div data-v-e95ae228>funcA;</div><br data-v-e95ae228><div data-v-e95ae228>let funcA = a.getA() 調用直接執行</div><div data-v-e95ae228>執行 A.prototype.getA = function(){</div><div data-v-e95ae228>裡面的 console.log( this ) this 指 A</div><div data-v-e95ae228>打印出 A{name: 123}</div><div data-v-e95ae228>funcA沒加括號 裡面代碼不執行 有return則返回函數體</div><br data-v-e95ae228><br data-v-e95ae228><br data-v-e95ae228><div class="cor36" data-v-e95ae228>輸出多少?</div><div data-v-e95ae228>var length = 10;</div><div data-v-e95ae228>function fn(){</div><div data-v-e95ae228>. return this.length</div><div data-v-e95ae228>}</div><div data-v-e95ae228>var obj = {</div><div data-v-e95ae228>. length: 5,</div><div data-v-e95ae228>. test1: function(){</div><div data-v-e95ae228>. . return fn();</div><div data-v-e95ae228>. }</div><div data-v-e95ae228>}</div><div data-v-e95ae228>obj.test2 = fn;</div><div data-v-e95ae228>console.log( obj.test1() );</div><div data-v-e95ae228>console.log( fn()===obj.test2() );</div><div data-v-e95ae228>console.log( obj.test1() == obj.test2() );</div><br data-v-e95ae228><div data-v-e95ae228>注意 obj.test2 = fn 沒加掛號 相當於 把這個函數賦給了</div><div data-v-e95ae228>沒加掛號 裡面代碼不執行 有return則返回函數體</div><div data-v-e95ae228>相當於 把這個 function fn(){ 函數賦給了 obj.test2</div><div data-v-e95ae228>所以 obj 多了一個 test2: function</div><br data-v-e95ae228><div data-v-e95ae228>console.log( obj.test1() )</div><div data-v-e95ae228>test1 return fn() , fn帶括號要執行</div><div data-v-e95ae228>fn return this.length, 這個this 指向 window</div><div data-v-e95ae228>return 10, return 10+1</div><div data-v-e95ae228>console.log( obj.test1() ) 打印出 11</div><br data-v-e95ae228><div data-v-e95ae228>console.log( fn()===obj.test2() )</div><div data-v-e95ae228>obj.test2() 裡面 return this.length,</div><div data-v-e95ae228>this 指向 obj , this.length 是 5</div><div data-v-e95ae228>而 fn() 的 this 指向 window , window.length 是 10</div><div data-v-e95ae228>console.log( fn()===obj.test2() ) 是 false</div><br data-v-e95ae228><div data-v-e95ae228>console.log( obj.test1() == obj.test2() )</div><div data-v-e95ae228>obj.test2() 上面討論 5</div><div data-v-e95ae228>obj.test1() 上面討論 11</div><br data-v-e95ae228><br data-v-e95ae228><br data-v-e95ae228><br data-v-e95ae228><div class="cor36" data-v-e95ae228>如何用 indexOf 數組去重?</div><div data-v-e95ae228> indexOf() 方法會回傳給定元素於陣列中第一個被找到之索引，若不存在於陣列中則回傳 -1 </div><br data-v-e95ae228><div data-v-e95ae228>var arr2 = [ 1,2,3,2,4,1 ];</div><div data-v-e95ae228>function unique( arr ){</div><div data-v-e95ae228>. var brr = [];</div><div data-v-e95ae228>. for( var i = 0 ; i ＜ arr.length ; i++ ){</div><div data-v-e95ae228>. . if( brr.indexOf( arr[i] ) == -1 ){</div><div data-v-e95ae228>. . . brr.push( arr[i] );</div><div data-v-e95ae228>. . }</div><div data-v-e95ae228>. }</div><div data-v-e95ae228>. return brr;</div><div data-v-e95ae228>}</div><div data-v-e95ae228>console.log( unique( arr2 ) );</div><br data-v-e95ae228><div data-v-e95ae228>目標, 遍歷陣列, 看有沒有在 brr 陣列, 沒有就添加</div><div data-v-e95ae228>brr去找indexOf(arr[i])</div><div data-v-e95ae228>第一次去找brr肯定是空的(不存在)就回傳-1就把他推進brr裡面</div><div data-v-e95ae228>不是-1就不動作 完成。</div><br data-v-e95ae228><br data-v-e95ae228><br data-v-e95ae228><br data-v-e95ae228><div class="cor36" data-v-e95ae228>找出多维数组最大值?</div><div data-v-e95ae228> 大陣列中包含 4 個小陣列, 分別找到每個小陣列中的最大值, 然後串起來成新陣列 </div><div data-v-e95ae228>輸入:[</div><div data-v-e95ae228>. [ 4, 5, 1, 3, ],</div><div data-v-e95ae228>. [ 13, 27, 18, 26, ],</div><div data-v-e95ae228>. [ 32, 35, 37, 39, ],</div><div data-v-e95ae228>. [ 1000, 1001, 857, 1 ],</div><div data-v-e95ae228>]</div><div data-v-e95ae228>輸出: [ 5, 27, 39, 1001 ]</div><br data-v-e95ae228><br data-v-e95ae228><div data-v-e95ae228>function fnArr( arr ){</div><div data-v-e95ae228>. var newArr = [];</div><div data-v-e95ae228>. arr.forEach(( item, index )=&gt;{</div><div data-v-e95ae228>. . newArr.push( Math.max( ...item ) )</div><div data-v-e95ae228>. })</div><div data-v-e95ae228>. return newArr;</div><div data-v-e95ae228>}</div><div data-v-e95ae228>console.log( fnArr([</div><div data-v-e95ae228>. [ 4, 5, 1, 3, ],</div><div data-v-e95ae228>. [ 13, 27, 18, 26, ],</div><div data-v-e95ae228>. [ 32, 35, 37, 39, ],</div><div data-v-e95ae228>. [ 1000, 1001, 857, 1 ],</div><div data-v-e95ae228>]));</div><br data-v-e95ae228><div data-v-e95ae228>首先 遍歷 item 是每一項 [ 4, 5, 1, 3, ]</div><div data-v-e95ae228>取裡面最大值 Math.max(...item)</div><br data-v-e95ae228><br data-v-e95ae228><br data-v-e95ae228><div class="cor36" data-v-e95ae228> 給字串物件定義一個addPrefix函數, 當傳入一個字串時, 他會返回新的帶有指定前綴的字串, 例如: </div><div data-v-e95ae228>console.log( &quot;world&quot;.addPrefix(&quot;hello&quot;) )</div><div data-v-e95ae228>控制台輸出: &quot;helloworld&quot;</div><br data-v-e95ae228><div data-v-e95ae228>var str = &quot;你好&quot;;</div><div data-v-e95ae228>String.prototype.addTest = function(){</div><div data-v-e95ae228>. return 111;</div><div data-v-e95ae228>}</div><div data-v-e95ae228>console.log( str.addPrefix() ) . . . // 打印 111</div><br data-v-e95ae228><br data-v-e95ae228><div data-v-e95ae228>String.prototype.addTest = function(){</div><div data-v-e95ae228>. return this;</div><div data-v-e95ae228>}</div><div data-v-e95ae228>console.log( str.addPrefix() ) . . . // 打印 你好</div><br data-v-e95ae228><br data-v-e95ae228><div data-v-e95ae228>String.prototype.addTest = function(){</div><div data-v-e95ae228>. return str + this;</div><div data-v-e95ae228>}</div><div data-v-e95ae228> console.log( &quot;world&quot;.addPrefix(&quot;hello&quot;) ) . . . // 打印 worldhello </div><br data-v-e95ae228><br data-v-e95ae228><br data-v-e95ae228><br data-v-e95ae228><div class="cor36" data-v-e95ae228>判斷一個字串中出現次數最多的字符, 並統計次數</div><div data-v-e95ae228> charAt() 方法返回一个由给定索引处的单个 UTF-16 码元构成的新字符串。 </div><div data-v-e95ae228>var john = { . . . //forin複習</div><div data-v-e95ae228>. firstName: &#39;John&#39;,</div><div data-v-e95ae228>. lastName: &#39;Doe&#39;</div><div data-v-e95ae228>};</div><div data-v-e95ae228>for (var prop in john) {</div><div data-v-e95ae228>. console.log(prop + &#39;:&#39; + john[prop]);</div><div data-v-e95ae228>}</div><br data-v-e95ae228><div data-v-e95ae228>var str = &quot;aaabbbbbbbbbccccccc&quot;</div><div data-v-e95ae228>var obj = {};</div><div data-v-e95ae228>for( var i = 0 ; i ＜ str.length ; i++ ){</div><div data-v-e95ae228>. var char = str.charAt(i);</div><div data-v-e95ae228>. if( obj[ char ] ){</div><div data-v-e95ae228>. . obj[ char ]++</div><div data-v-e95ae228>. } else {</div><div data-v-e95ae228>. . obj[ char ] = 1;</div><div data-v-e95ae228>. }</div><div data-v-e95ae228>}</div><div data-v-e95ae228>console.log( obj ); . . . 每個字符和次數都統計出來了</div><br data-v-e95ae228><div data-v-e95ae228>目標 弄一個對象 把值放進去 { a:3, b:10, c:15 }</div><div data-v-e95ae228>遍歷字串, 如果 obj 沒有則 obj[ char ] = 1</div><div data-v-e95ae228>如果 obj 有則 value值++</div><br data-v-e95ae228><div data-v-e95ae228>var max = 0;</div><div data-v-e95ae228>for( var key in obj ){</div><div data-v-e95ae228>. if( max ＜ obj[ key ] ){</div><div data-v-e95ae228>. . max = obj[ key ];</div><div data-v-e95ae228>. }</div><div data-v-e95ae228>}</div><div data-v-e95ae228>console.log( max );</div><br data-v-e95ae228><div data-v-e95ae228>目標 到物件的值找最大值 { a:3, b:10, c:15 } 最大值 15</div><div data-v-e95ae228>遍歷物件 for in</div><div data-v-e95ae228>如果 max變數 小於 obj[key]</div><div data-v-e95ae228>key 是物件中每一項 a b c</div><div data-v-e95ae228>obj[key] 是統計值 3 10 15</div><div data-v-e95ae228>如果 max變數 小於 obj[key] 就賦值 就找到最大值 15</div><br data-v-e95ae228><div data-v-e95ae228>for( var key in obj ){</div><div data-v-e95ae228>. if( obj[key] == max ){</div><div data-v-e95ae228>. . console.log( &quot;最多字符是&quot; + key );</div><div data-v-e95ae228>. . console.log( &quot;出現次數&quot; + max );</div><div data-v-e95ae228>. }</div><div data-v-e95ae228>}</div><br data-v-e95ae228><div data-v-e95ae228>目標 找到最大值 15 對應的 key</div><div data-v-e95ae228>如果 obj[key] == max 就找到了</div><br data-v-e95ae228><br data-v-e95ae228><br data-v-e95ae228><br data-v-e95ae228><div class="cor36" data-v-e95ae228>輸出多少?</div><div data-v-e95ae228>function demo(){</div><div data-v-e95ae228>. var n = 2;</div><div data-v-e95ae228>. if( true ){</div><div data-v-e95ae228>. . var n = 1;</div><div data-v-e95ae228>. }</div><div data-v-e95ae228>. console.log( n );</div><div data-v-e95ae228>}</div><div data-v-e95ae228>demo(); . . . // 打印 1</div><br data-v-e95ae228><br data-v-e95ae228><br data-v-e95ae228><br data-v-e95ae228><div class="cor36" data-v-e95ae228>輸出多少?</div><div data-v-e95ae228>function demo(){</div><div data-v-e95ae228>. let n = 2;</div><div data-v-e95ae228>. if( true ){</div><div data-v-e95ae228>. . let n = 1;</div><div data-v-e95ae228>. }</div><div data-v-e95ae228>. console.log( n );</div><div data-v-e95ae228>}</div><div data-v-e95ae228>demo(); . . . // 打印 2</div><br data-v-e95ae228><br data-v-e95ae228><br data-v-e95ae228><br data-v-e95ae228><div class="cor36" data-v-e95ae228>合併</div><div data-v-e95ae228>const a = { a:1, b:4 }</div><div data-v-e95ae228>const b = { b:2, c:3 }</div><div data-v-e95ae228>let obj1 = Object.assign( a, b );</div><div data-v-e95ae228>console.log( obj1 ); . . . // { a:1, b:2, c:3 }</div><br data-v-e95ae228><br data-v-e95ae228><br data-v-e95ae228><br data-v-e95ae228><div class="cor36" data-v-e95ae228>合併</div><div data-v-e95ae228>const a = { a:1, b:4 }</div><div data-v-e95ae228>const b = { b:2, c:3 }</div><div data-v-e95ae228>let obj2 = {...a, ...b}</div><div data-v-e95ae228>console.log( obj1 ); . . . // { a:1, b:2, c:3 }</div><br data-v-e95ae228><br data-v-e95ae228></div></div></div></section>',1),bi=kn(()=>n("div",{class:"toTopButton"},[n("div",{class:"disCen"},"___"),n("div",{class:"disCen"},"▲")],-1)),ri=[bi],ii=kn(()=>n("div",{class:"toBotButton"},[n("div",{class:"disCen"},"▼"),n("div",{class:"disCen"},"￣")],-1)),fi=[ii],oi={__name:"JsPageTwoTwo",setup(a){const s=ba(!1);window.addEventListener("scroll",function(){s.value=window.scrollY>0});function d(){window.scrollTo({top:0,left:0,behavior:"smooth"})}function v(){window.scrollTo({top:999999,left:0,behavior:"smooth"})}return(t,e)=>(aa(),ta(G,null,[li,n("div",null,[W(k(B,{name:"fade",tag:"div"},{default:S(()=>[n("div",{onClick:d,class:"toTop"},ri)]),_:1},512),[[U,s.value]]),W(k(B,{name:"fade",tag:"div"},{default:S(()=>[n("div",{onClick:v,class:"toBot"},fi)]),_:1},512),[[U,s.value]])])],64))}},ui=pa(oi,[["__scopeId","data-v-e95ae228"]]);const gn=a=>(wa("data-v-1a9c5591"),a=a(),ma(),a),wi=K('<section data-v-1a9c5591><div class="leftNav" data-v-1a9c5591><div class="leftNavContainer" data-v-1a9c5591><div class="leftNavLayout" data-v-1a9c5591><br data-v-1a9c5591><br data-v-1a9c5591><div class="leftNavText" data-v-1a9c5591>1</div><div class="leftNavText" data-v-1a9c5591>1</div><div class="leftNavText" data-v-1a9c5591>1</div><div class="leftNavText" data-v-1a9c5591></div><div class="leftNavText" data-v-1a9c5591></div><div class="leftNavText" data-v-1a9c5591></div><div class="leftNavText" data-v-1a9c5591></div></div></div></div><div class="Main" data-v-1a9c5591><div class="mainContainer" data-v-1a9c5591><div class="mainLayout" data-v-1a9c5591><div class="articleCardTitle cor36" data-v-1a9c5591>[ ] ≫</div></div></div></div></section>',1),mi=gn(()=>n("div",{class:"toTopButton"},[n("div",{class:"disCen"},"___"),n("div",{class:"disCen"},"▲")],-1)),hi=[mi],ki=gn(()=>n("div",{class:"toBotButton"},[n("div",{class:"disCen"},"▼"),n("div",{class:"disCen"},"￣")],-1)),gi=[ki],zi={__name:"JsPageTwoThree",setup(a){const s=ba(!1);window.addEventListener("scroll",function(){s.value=window.scrollY>0});function d(){window.scrollTo({top:0,left:0,behavior:"smooth"})}function v(){window.scrollTo({top:999999,left:0,behavior:"smooth"})}return(t,e)=>(aa(),ta(G,null,[wi,n("div",null,[W(k(B,{name:"fade",tag:"div"},{default:S(()=>[n("div",{onClick:d,class:"toTop"},hi)]),_:1},512),[[U,s.value]]),W(k(B,{name:"fade",tag:"div"},{default:S(()=>[n("div",{onClick:v,class:"toBot"},gi)]),_:1},512),[[U,s.value]])])],64))}},Ti=pa(zi,[["__scopeId","data-v-1a9c5591"]]);const qi=a=>(wa("data-v-01fe1331"),a=a(),ma(),a),_i={class:"leftNav"},Si={class:"leftNavContainer"},yi={class:"leftNavLayout"},Ci=qi(()=>n("br",null,null,-1)),xi={class:"Main"},Li={class:"mainContainer"},ji={class:"mainLayout"},Vi={__name:"JsPageThree",setup(a){const s=ba(!1);return window.addEventListener("scroll",function(){s.value=window.scrollY>0}),(d,v)=>{const t=qa("RouterLink"),e=qa("router-view");return aa(),ta("section",null,[n("div",_i,[n("div",Si,[n("div",yi,[Ci,n("div",null,[k(t,{to:"/js"},{default:S(()=>[fa("1.作用域")]),_:1})]),n("div",null,[k(t,{to:"/js/function"},{default:S(()=>[fa("2.函數進階")]),_:1})]),n("div",null,[k(t,{to:"/js/destructuringassignment"},{default:S(()=>[fa("3.解構賦值")]),_:1})]),n("div",null,[k(t,{to:"/js/method"},{default:S(()=>[fa("4.數組方法")]),_:1})]),n("div",null,[k(t,{to:"/js/object"},{default:S(()=>[fa("5.創建物件")]),_:1})]),n("div",null,[k(t,{to:"/js/prototype"},{default:S(()=>[fa("6.物件導向")]),_:1})]),n("div",null,[k(t,{to:"/js/tips"},{default:S(()=>[fa("7.技巧")]),_:1})]),n("div",null,[k(t,{to:"/js/dom"},{default:S(()=>[fa("8.事件")]),_:1})]),n("div",null,[k(t,{to:"/js/ajax"},{default:S(()=>[fa("9.AJAX")]),_:1})]),n("div",null,[k(t,{to:"/js/other"},{default:S(()=>[fa("10.其他")]),_:1})]),n("div",null,[k(t,{to:"/js"})]),n("div",null,[k(t,{to:"/js"})]),n("div",null,[k(t,{to:"/js"})]),n("div",null,[k(t,{to:"/js"})]),n("div",null,[k(t,{to:"/js"})])])])]),n("div",xi,[n("div",Li,[n("div",ji,[k(e)])])])])}}},Pi=pa(Vi,[["__scopeId","data-v-01fe1331"]]);const zn=a=>(wa("data-v-dcea7c33"),a=a(),ma(),a),Oi={class:"leftNav"},Ni={class:"leftNavContainer"},$i={class:"leftNavLayout"},Ei=K('<div class="Main" data-v-dcea7c33><div class="mainContainer" data-v-dcea7c33><div class="mainLayout" data-v-dcea7c33><br data-v-dcea7c33><br data-v-dcea7c33><p class="fz28" data-v-dcea7c33>總分總</p><p class="fz28" data-v-dcea7c33>1.要講哪個知識點</p><p class="fz28" data-v-dcea7c33>2.細講</p><p class="fz28" data-v-dcea7c33>3.總結</p><br data-v-dcea7c33><br data-v-dcea7c33><div class="articleCardTitle cor36 fz34" data-v-dcea7c33>1. 作用域</div><p class="fz28" data-v-dcea7c33>作用域 scope 規定了變量能夠被訪問的&quot;範圍&quot; ,</p><br data-v-dcea7c33><br data-v-dcea7c33><p class="fz28" data-v-dcea7c33>離開這個&quot;範圍&quot;變量便不能被訪問。</p><br data-v-dcea7c33><br data-v-dcea7c33><div id="scope001" class="articleCardTitle cor36 fz34" data-v-dcea7c33> 1.1 局部作用域 </div><p class="fz28" data-v-dcea7c33> 在函數內部聲明的變量只能在函數內部被訪問，外部無法直接訪問。 </p><br data-v-dcea7c33><br data-v-dcea7c33><div class="bgcVS fz30" data-v-dcea7c33><br data-v-dcea7c33><br data-v-dcea7c33><div data-v-dcea7c33><span class="function" data-v-dcea7c33>function </span><span class="word" data-v-dcea7c33>getSun</span> <span class="brackets" data-v-dcea7c33>(){</span></div><div class="pTwo" data-v-dcea7c33><span class="function" data-v-dcea7c33>const </span><span class="word" data-v-dcea7c33>num</span> <span class="then" data-v-dcea7c33>=</span><span class="number" data-v-dcea7c33>10</span></div><div class="brackets" data-v-dcea7c33>}</div><div data-v-dcea7c33><span class="word" data-v-dcea7c33>console.</span><span class="variable" data-v-dcea7c33>log</span> <span class="brackets" data-v-dcea7c33>(</span><span class="word" data-v-dcea7c33>num</span> <span class="brackets" data-v-dcea7c33>) </span><span class="comment" data-v-dcea7c33>// 報錯函數外部不能使用局部作用域變量</span></div><br data-v-dcea7c33><br data-v-dcea7c33></div><br data-v-dcea7c33><br data-v-dcea7c33><p class="fz28" data-v-dcea7c33>結論</p><p class="fz28" data-v-dcea7c33>1.函數內部聲明變量, 外部無法訪問</p><p class="fz28" data-v-dcea7c33>2.函數的參數也是函數內部的局部變量</p><p class="fz28" data-v-dcea7c33>3.不同函數內部聲明的變量無法互相訪問</p><p class="fz28" data-v-dcea7c33>4.函數執行完, 函數內部的變量實際被清空了</p><br data-v-dcea7c33><br data-v-dcea7c33><br data-v-dcea7c33><br data-v-dcea7c33><div class="articleCardTitle cor36 fz34" data-v-dcea7c33>1.2 塊作用域</div><p class="fz28" data-v-dcea7c33> 在 JS 中用 {} 包裹為代碼塊, 代碼塊內部聲明變量外部 &quot;有可能&quot; 無法被訪問 </p><br data-v-dcea7c33><br data-v-dcea7c33><div class="bgcVS fz30" data-v-dcea7c33><br data-v-dcea7c33><br data-v-dcea7c33><div data-v-dcea7c33><span class="then" data-v-dcea7c33>for </span> <span class="brackets" data-v-dcea7c33>(</span><span class="function" data-v-dcea7c33>let </span> <span class="word" data-v-dcea7c33>i</span><span class="then" data-v-dcea7c33>=</span> <span class="number" data-v-dcea7c33>1</span><span class="then" data-v-dcea7c33>;</span> <span class="word" data-v-dcea7c33>i</span><span class="word" data-v-dcea7c33>＜=</span> <span class="number" data-v-dcea7c33>3</span><span class="then" data-v-dcea7c33>;</span> <span class="word" data-v-dcea7c33>i</span><span class="then" data-v-dcea7c33>++</span> <span class="brackets" data-v-dcea7c33>){</span></div><div class="pTwo" data-v-dcea7c33><span class="word" data-v-dcea7c33>console.</span><span class="variable" data-v-dcea7c33>log</span> <span class="brackets" data-v-dcea7c33>(</span><span class="word" data-v-dcea7c33>i</span> <span class="brackets" data-v-dcea7c33>)</span><span class="comment" data-v-dcea7c33>//塊作用域 // 依序打印 1 2 3</span></div><div class="brackets" data-v-dcea7c33>}</div><div data-v-dcea7c33><span class="word" data-v-dcea7c33>console.</span><span class="variable" data-v-dcea7c33>log</span> <span class="brackets" data-v-dcea7c33>(</span><span class="word" data-v-dcea7c33>i</span> <span class="brackets" data-v-dcea7c33>)</span><span class="comment" data-v-dcea7c33>// undefined</span></div><br data-v-dcea7c33><br data-v-dcea7c33><div class="comment" data-v-dcea7c33>var 沒塊級作用域</div><br data-v-dcea7c33><br data-v-dcea7c33><div data-v-dcea7c33><span class="then" data-v-dcea7c33>for </span> <span class="brackets" data-v-dcea7c33>(</span><span class="function" data-v-dcea7c33>var </span> <span class="word" data-v-dcea7c33>i</span><span class="then" data-v-dcea7c33>=</span> <span class="number" data-v-dcea7c33>1</span><span class="then" data-v-dcea7c33>;</span> <span class="word" data-v-dcea7c33>i</span><span class="word" data-v-dcea7c33>＜=</span> <span class="number" data-v-dcea7c33>3</span><span class="then" data-v-dcea7c33>;</span> <span class="word" data-v-dcea7c33>i</span><span class="then" data-v-dcea7c33>++</span> <span class="brackets" data-v-dcea7c33>){</span></div><div class="pTwo" data-v-dcea7c33><span class="word" data-v-dcea7c33>console.</span><span class="variable" data-v-dcea7c33>log</span> <span class="brackets" data-v-dcea7c33>(</span><span class="word" data-v-dcea7c33>i</span> <span class="brackets" data-v-dcea7c33>)</span><span class="comment" data-v-dcea7c33>//塊作用域 // 依序打印 1 2 3</span></div><div class="brackets" data-v-dcea7c33>}</div><div data-v-dcea7c33><span class="word" data-v-dcea7c33>console.</span><span class="variable" data-v-dcea7c33>log</span> <span class="brackets" data-v-dcea7c33>(</span><span class="word" data-v-dcea7c33>i</span> <span class="brackets" data-v-dcea7c33>)</span><span class="comment" data-v-dcea7c33>// 4</span></div><br data-v-dcea7c33><br data-v-dcea7c33><div class="comment" data-v-dcea7c33>if() while() 也有塊級作用域</div><br data-v-dcea7c33><br data-v-dcea7c33><div data-v-dcea7c33><span class="then" data-v-dcea7c33>if </span> <span class="brackets" data-v-dcea7c33>(</span><span class="word" data-v-dcea7c33>true</span><span class="brackets" data-v-dcea7c33>){</span></div><div class="pTwo" data-v-dcea7c33><span class="word" data-v-dcea7c33>let </span><span class="variable" data-v-dcea7c33>i</span> <span class="then" data-v-dcea7c33>=</span><span class="number" data-v-dcea7c33>10</span></div><div class="brackets" data-v-dcea7c33>}</div><div data-v-dcea7c33><span class="word" data-v-dcea7c33>console.</span><span class="variable" data-v-dcea7c33>log</span> <span class="brackets" data-v-dcea7c33>(</span><span class="word" data-v-dcea7c33>i</span> <span class="brackets" data-v-dcea7c33>)</span><span class="comment" data-v-dcea7c33>// undefined</span></div></div><br data-v-dcea7c33><br data-v-dcea7c33><p class="fz28" data-v-dcea7c33>結論</p><p class="fz28" data-v-dcea7c33>1.let const 聲明的變量產生塊級作用域, var沒有塊級</p><p class="fz28" data-v-dcea7c33>2.不同代碼塊之間的變量無法互相訪問</p><br data-v-dcea7c33><br data-v-dcea7c33><div id="scope002" class="articleCardTitle cor36 fz34" data-v-dcea7c33> 1.2 全局作用域 </div><p class="fz28" data-v-dcea7c33>script標籤的最外層 就是 全局作用域</p><p class="fz28" data-v-dcea7c33>全局作用域聲明變量, 任何其他作用域都可以被訪問</p><br data-v-dcea7c33><br data-v-dcea7c33><div id="scope003" class="articleCardTitle cor36 fz34" data-v-dcea7c33> 1.3 作用域鏈 </div><p class="fz28" data-v-dcea7c33>就近原則: 誰離我近找誰</p><br data-v-dcea7c33><br data-v-dcea7c33><p class="cor36 fz32" data-v-dcea7c33>作用域鏈 是 變量查找機制</p><br data-v-dcea7c33><br data-v-dcea7c33><p class="fz28" data-v-dcea7c33>函數執行, 優先找當前函數作用域中 找變量</p><p class="fz28" data-v-dcea7c33> 當前作用域找不到 . &gt; . 依次逐級找 父級作用域 直到全局作用域 </p><br data-v-dcea7c33><br data-v-dcea7c33><p class="fz28" data-v-dcea7c33>總結:</p><p class="fz28" data-v-dcea7c33>作用域鏈像鍊子一樣, 按照從小到大查找</p><br data-v-dcea7c33><br data-v-dcea7c33><div id="scope004" class="articleCardTitle cor36 fz34" data-v-dcea7c33> 1.4 垃圾回收機制 ( Garbage Collection ) </div><p class="fz28" data-v-dcea7c33> JS 內存的分配和回收自動完成, 內存在不使用時被垃圾回收機制回收 </p><br data-v-dcea7c33><br data-v-dcea7c33><p class="cor36 fz28" data-v-dcea7c33>內存生命週期</p><p class="fz28" data-v-dcea7c33> 1. 內存分配: 當聲明變量 、 函數 、 物件, 系統自動分配內存 </p><p class="fz28" data-v-dcea7c33>2. 內存使用: 讀寫內存, 使用變量、函數</p><p class="fz28" data-v-dcea7c33>3. 內存回收: 使用完, 垃圾回收器 回收不再使用的內存</p><br data-v-dcea7c33><br data-v-dcea7c33><p class="fz28" data-v-dcea7c33>全局變量不回收 ( 直到頁面關閉 )</p><p class="fz28" data-v-dcea7c33>局部變量的值, 不用了, 自動回收掉</p><br data-v-dcea7c33><br data-v-dcea7c33><p class="fz28 cor36" data-v-dcea7c33># 內存洩漏</p><p class="fz28" data-v-dcea7c33>程序中分配的內存 由於某種原因 未釋放 or 無法釋放</p><br data-v-dcea7c33><br data-v-dcea7c33><p class="fz28" data-v-dcea7c33>堆棧空間分配</p><p class="fz28" data-v-dcea7c33>1.棧 stack</p><p class="fz28" data-v-dcea7c33>基本數據類型, 系統自動分配 自動釋放</p><br data-v-dcea7c33><br data-v-dcea7c33><p class="fz28" data-v-dcea7c33>2.堆 heap</p><p class="fz28" data-v-dcea7c33> 複雜數據類型, 由程序員分配釋放, 若不釋放 則 由垃圾回收機制回收 </p><br data-v-dcea7c33><br data-v-dcea7c33><p class="fz28 cor36" data-v-dcea7c33># 引用計數法</p><p class="fz28" data-v-dcea7c33>看一個對象 是否有 指向它的引用, 沒有就回收對象</p><br data-v-dcea7c33><br data-v-dcea7c33><p class="fz28" data-v-dcea7c33>1. 跟蹤紀錄被引用的次數</p><p class="fz28" data-v-dcea7c33>2. 被引用 1 次就 ++</p><p class="fz28" data-v-dcea7c33>3. 減少 1 個引用就 --</p><p class="fz28" data-v-dcea7c33>4. 引用次數 0 則 釋放內存</p><br data-v-dcea7c33><br data-v-dcea7c33><p class="fz28" data-v-dcea7c33>const arr = [ 1, 2, 3, 4 ]</p><p class="fz28" data-v-dcea7c33> arr -&gt; (stack) 0x1111 --counter++-&gt; (heap) [ 1, 2, 3, 4 ] </p><br data-v-dcea7c33><br data-v-dcea7c33><p class="fz28" data-v-dcea7c33>arr = null</p><p class="fz28" data-v-dcea7c33>arr -&gt; (stack) null 不指向 heap</p><p class="fz28" data-v-dcea7c33>[ 1, 2, 3, 4 ] 的被引用次數變為 0 回收</p><br data-v-dcea7c33><br data-v-dcea7c33><p class="fz28 cor36" data-v-dcea7c33># 引用計數 缺點</p><p class="fz28 cor36" data-v-dcea7c33>嵌套引用 (循環引用)</p><p class="fz28" data-v-dcea7c33> 兩個物件 相互引用 . . . 儘管不再用, 不會回收, 而內存洩漏 </p><br data-v-dcea7c33><br data-v-dcea7c33><p class="fz20" data-v-dcea7c33>現代瀏覽器 不用 引用計數</p><br data-v-dcea7c33><br data-v-dcea7c33><div class="bgcVS fz30" data-v-dcea7c33><br data-v-dcea7c33><br data-v-dcea7c33><div data-v-dcea7c33><span class="function" data-v-dcea7c33>function </span><span class="word" data-v-dcea7c33>fn</span> <span class="brackets" data-v-dcea7c33>(){</span></div><div class="pTwo" data-v-dcea7c33><span class="function" data-v-dcea7c33>let </span> <span class="word" data-v-dcea7c33>obj1</span><span class="then" data-v-dcea7c33>=</span> <span class="brackets" data-v-dcea7c33>{}</span></div><div class="pTwo" data-v-dcea7c33><span class="function" data-v-dcea7c33>let </span> <span class="word" data-v-dcea7c33>obj2</span><span class="then" data-v-dcea7c33>=</span> <span class="brackets" data-v-dcea7c33>{}</span></div><div class="pTwo" data-v-dcea7c33><span class="word" data-v-dcea7c33>obj1.a</span> <span class="then" data-v-dcea7c33>=</span><span class="word" data-v-dcea7c33>obj2</span></div><div class="pTwo" data-v-dcea7c33><span class="word" data-v-dcea7c33>obj2.a</span> <span class="then" data-v-dcea7c33>=</span><span class="word" data-v-dcea7c33>obj1</span></div><div class="brackets" data-v-dcea7c33>}</div><br data-v-dcea7c33><br data-v-dcea7c33></div><br data-v-dcea7c33><br data-v-dcea7c33><p class="fz28 cor36" data-v-dcea7c33># 標記清除法</p><p class="fz28" data-v-dcea7c33> 將 &quot;不再使用的對象&quot; 定義為 &quot;無法到達的對象&quot; -&gt; (我找不到你) </p><br data-v-dcea7c33><br data-v-dcea7c33><p class="fz28" data-v-dcea7c33>1. 從根部 (全局對象) 出發定期掃描內存中對象</p><p class="fz28" data-v-dcea7c33>2. 從根部出發找不到的對象就標記為 不再使用 回收</p><br data-v-dcea7c33><br data-v-dcea7c33><div id="scope005" class="articleCardTitle cor36 fz34" data-v-dcea7c33> 1.5 閉包 ( closure ) </div><p class="fz28" data-v-dcea7c33> 一個函數對周圍狀態的引用綑綁在一起, 內層函數中訪問到其外層函數的作用域 </p><p class="fz28 cor36" data-v-dcea7c33>閉包 = 內層函數 + 外層函數的變量</p><br data-v-dcea7c33><br data-v-dcea7c33><div class="dis" data-v-dcea7c33><div class="bgcVS fz30" data-v-dcea7c33><br data-v-dcea7c33><br data-v-dcea7c33><div data-v-dcea7c33><span class="function" data-v-dcea7c33>function </span><span class="word" data-v-dcea7c33>outer</span><span class="brackets" data-v-dcea7c33>(){</span></div><div class="pTwo" data-v-dcea7c33><span class="function" data-v-dcea7c33>let </span> <span class="word" data-v-dcea7c33>a</span><span class="then" data-v-dcea7c33>=</span> <span class="number" data-v-dcea7c33>10;</span></div><div class="pTwo" data-v-dcea7c33><span class="function" data-v-dcea7c33>function </span><span class="word" data-v-dcea7c33>fn</span> <span class="brackets" data-v-dcea7c33>(){</span></div><div class="pFou" data-v-dcea7c33><span class="word" data-v-dcea7c33>console.</span><span class="variable" data-v-dcea7c33>log</span><span class="brackets" data-v-dcea7c33>(</span> <span class="word" data-v-dcea7c33>a</span><span class="brackets" data-v-dcea7c33>)</span></div><div class="brackets pTwo" data-v-dcea7c33>}</div><div class="pTwo" data-v-dcea7c33><span class="then" data-v-dcea7c33>return </span><span class="word" data-v-dcea7c33>fn</span></div><div class="brackets" data-v-dcea7c33>}</div><br data-v-dcea7c33><div data-v-dcea7c33><span class="word" data-v-dcea7c33>outer</span><span class="brackets" data-v-dcea7c33>()</span> <span class="then" data-v-dcea7c33>===</span><span class="word" data-v-dcea7c33>fn</span><span class="then" data-v-dcea7c33>===</span><span class="function" data-v-dcea7c33>function </span><span class="word" data-v-dcea7c33>fn</span> <span class="brackets" data-v-dcea7c33>(){}</span></div><br data-v-dcea7c33><div data-v-dcea7c33><span class="function" data-v-dcea7c33>const </span><span class="word" data-v-dcea7c33>fun</span> <span class="then" data-v-dcea7c33>=</span><span class="function" data-v-dcea7c33>function </span><span class="word" data-v-dcea7c33>fn</span> <span class="brackets" data-v-dcea7c33>(){}</span></div><br data-v-dcea7c33><div data-v-dcea7c33><span class="function" data-v-dcea7c33>const </span><span class="word" data-v-dcea7c33>fun</span> <span class="then" data-v-dcea7c33>=</span><span class="word" data-v-dcea7c33>outer</span> <span class="brackets" data-v-dcea7c33>()</span></div><div data-v-dcea7c33><span class="word" data-v-dcea7c33>fun</span> <span class="brackets" data-v-dcea7c33>() </span><span class="comment" data-v-dcea7c33>// 調用函數 </span><span class="comment" data-v-dcea7c33>// 10</span></div><div class="comment" data-v-dcea7c33> // 實現外部函數 使用 outer 函數 內部的變量 </div><br data-v-dcea7c33><br data-v-dcea7c33><p data-v-dcea7c33>另外 return 也可以這樣寫</p><div data-v-dcea7c33><span class="function" data-v-dcea7c33>function </span><span class="word" data-v-dcea7c33>fn</span> <span class="brackets" data-v-dcea7c33>(){</span></div><div class="padTwo VSL" data-v-dcea7c33><span class="function" data-v-dcea7c33>let </span> <span class="word" data-v-dcea7c33>a</span><span class="then" data-v-dcea7c33>=</span> <span class="number" data-v-dcea7c33>0</span><div data-v-dcea7c33><span class="then" data-v-dcea7c33>return </span><span class="function" data-v-dcea7c33>function </span><span class="brackets" data-v-dcea7c33>(){</span></div><div data-v-dcea7c33></div><div class="padTwo VSL" data-v-dcea7c33><span class="word" data-v-dcea7c33>a</span> <span class="then" data-v-dcea7c33>++</span><div data-v-dcea7c33><span class="word" data-v-dcea7c33>console</span><span class="variable" data-v-dcea7c33>.log</span><span class="brackets" data-v-dcea7c33>(</span> <span class="word" data-v-dcea7c33>a</span><span class="brackets" data-v-dcea7c33>)</span></div><div data-v-dcea7c33></div></div><div data-v-dcea7c33><span class="brackets" data-v-dcea7c33>}</span></div></div><div data-v-dcea7c33><span class="brackets" data-v-dcea7c33>}</span></div><div data-v-dcea7c33><span class="function" data-v-dcea7c33>let </span> <span class="word" data-v-dcea7c33>f</span><span class="then" data-v-dcea7c33>=</span> <span class="word" data-v-dcea7c33>fn</span><span class="brackets" data-v-dcea7c33>() </span><span class="comment" data-v-dcea7c33>//</span> <span class="word" data-v-dcea7c33>外部</span><span class="word" data-v-dcea7c33>fn</span><span class="word" data-v-dcea7c33>只是一開始創建閉包時</span><span class="then" data-v-dcea7c33>,</span> <span class="word" data-v-dcea7c33>執行一次</span></div><div data-v-dcea7c33><span class="word" data-v-dcea7c33>f</span> <span class="brackets" data-v-dcea7c33>() </span><span class="comment" data-v-dcea7c33>//</span><span class="word" data-v-dcea7c33>後面每次執行</span><span class="then" data-v-dcea7c33>return </span><span class="word" data-v-dcea7c33>後的</span><span class="function" data-v-dcea7c33>function </span></div><div data-v-dcea7c33><span class="word" data-v-dcea7c33>f</span> <span class="brackets" data-v-dcea7c33>() </span><span class="comment" data-v-dcea7c33>//</span><span class="word" data-v-dcea7c33>後面每次執行</span><span class="then" data-v-dcea7c33>return </span><span class="word" data-v-dcea7c33>後的</span><span class="function" data-v-dcea7c33>function </span></div></div><div class="bgcVSMid" data-v-dcea7c33>&gt;</div><div class="bgcVS fz30" data-v-dcea7c33><br data-v-dcea7c33><br data-v-dcea7c33><div data-v-dcea7c33><span class="function" data-v-dcea7c33>function </span><span class="word" data-v-dcea7c33>outer</span><span class="brackets" data-v-dcea7c33>(){</span></div><div class="pTwo" data-v-dcea7c33><span class="function" data-v-dcea7c33>let </span> <span class="word" data-v-dcea7c33>a</span><span class="then" data-v-dcea7c33>=</span> <span class="number" data-v-dcea7c33>10;</span></div><div class="pTwo" data-v-dcea7c33><span class="function" data-v-dcea7c33>return function </span><span class="word" data-v-dcea7c33>fn</span> <span class="brackets" data-v-dcea7c33>(){</span></div><div class="pFou" data-v-dcea7c33><span class="word" data-v-dcea7c33>console.</span><span class="variable" data-v-dcea7c33>log</span><span class="brackets" data-v-dcea7c33>(</span> <span class="word" data-v-dcea7c33>a</span><span class="brackets" data-v-dcea7c33>)</span></div><div class="brackets pTwo" data-v-dcea7c33>}</div><div class="brackets" data-v-dcea7c33>}</div><br data-v-dcea7c33><br data-v-dcea7c33><div data-v-dcea7c33><span class="function" data-v-dcea7c33>const </span><span class="word" data-v-dcea7c33>fun</span> <span class="then" data-v-dcea7c33>=</span><span class="word" data-v-dcea7c33>outer</span> <span class="brackets" data-v-dcea7c33>()</span></div><div data-v-dcea7c33><span class="word" data-v-dcea7c33>fun</span> <span class="brackets" data-v-dcea7c33>() </span><span class="comment" data-v-dcea7c33>// 調用函數 </span><span class="comment" data-v-dcea7c33>// 10</span></div><div class="comment" data-v-dcea7c33> // 實現外部函數 使用 outer 函數 內部的變量 </div><br data-v-dcea7c33><br data-v-dcea7c33></div></div><br data-v-dcea7c33><br data-v-dcea7c33><p class="fz28 cor36" data-v-dcea7c33># 作用</p><p class="fz28" data-v-dcea7c33>封閉數據, 提供操作, 外部也可以訪問函數內部的變量</p><br data-v-dcea7c33><br data-v-dcea7c33><p class="fz28" data-v-dcea7c33># 應用</p><p class="fz28" data-v-dcea7c33>實現數據私有</p><p class="fz28" data-v-dcea7c33>比如 統計函數調用次數</p><br data-v-dcea7c33><br data-v-dcea7c33><div class="bgcVS fz30" data-v-dcea7c33><br data-v-dcea7c33><br data-v-dcea7c33><div data-v-dcea7c33><span class="function" data-v-dcea7c33>function </span><span class="word" data-v-dcea7c33>count</span> <span class="brackets" data-v-dcea7c33>(){</span></div><div class="pTwo" data-v-dcea7c33><span class="function" data-v-dcea7c33>let </span> <span class="word" data-v-dcea7c33>i</span><span class="then" data-v-dcea7c33>=</span> <span class="number" data-v-dcea7c33>0</span></div><div class="pTwo" data-v-dcea7c33><span class="function" data-v-dcea7c33>function </span><span class="word" data-v-dcea7c33>fn</span> <span class="brackets" data-v-dcea7c33>(){</span></div><div class="pFou" data-v-dcea7c33>i++</div><div class="pFou" data-v-dcea7c33><span class="word" data-v-dcea7c33>console.</span><span class="variable" data-v-dcea7c33>log</span> <span class="brackets" data-v-dcea7c33>(</span><span class="word" data-v-dcea7c33>i</span> <span class="brackets" data-v-dcea7c33>)</span></div><div class="brackets pTwo" data-v-dcea7c33>}</div><div class="pTwo" data-v-dcea7c33><span class="then" data-v-dcea7c33>return </span><span class="word" data-v-dcea7c33>fn</span></div><div class="brackets" data-v-dcea7c33>}</div><div data-v-dcea7c33><span class="function" data-v-dcea7c33>const </span><span class="word" data-v-dcea7c33>fun</span> <span class="then" data-v-dcea7c33>=</span><span class="word" data-v-dcea7c33>count</span> <span class="brackets" data-v-dcea7c33>()</span></div><br data-v-dcea7c33><div class="number" data-v-dcea7c33>Q1: 裡面的 i 會被回收嗎?</div><br data-v-dcea7c33><div class="number" data-v-dcea7c33>global &gt; fun &gt; fn() &gt; i++ &gt; let i</div><div class="number" data-v-dcea7c33>i 不會被回收</div><div class="number" data-v-dcea7c33>內存洩漏</div><br data-v-dcea7c33><br data-v-dcea7c33></div><br data-v-dcea7c33><br data-v-dcea7c33><div id="scope006" class="articleCardTitle cor36 fz34" data-v-dcea7c33> 1.6 變量提升 ( Hoisting ) </div><p class="fz28" data-v-dcea7c33>變數提升是指變數在其宣告之前已經可以使用</p><p class="fz28" data-v-dcea7c33>只提升聲明 , 不賦值</p><br data-v-dcea7c33><p class="fz28" data-v-dcea7c33>把所有 var 聲明的變量提升到當前作用域的最前面</p><p class="fz28" data-v-dcea7c33>只提升聲明 , 不賦值</p><br data-v-dcea7c33><br data-v-dcea7c33><p class="fz28 comment" data-v-dcea7c33>var num</p><p class="fz28" data-v-dcea7c33>console.log( num ) . . . // undefined</p><p class="fz28" data-v-dcea7c33>var num = 10</p><p class="fz28" data-v-dcea7c33>console.log( num ) . . . // 10</p><br data-v-dcea7c33><br data-v-dcea7c33><p class="fz28" data-v-dcea7c33>function fn() {</p><p class="fz28 comment pTwo" data-v-dcea7c33>var num</p><p class="fz28 pTwo" data-v-dcea7c33>console.log( num ) . . . // undefined</p><p class="fz28 pTwo" data-v-dcea7c33>var num = 10</p><p class="fz28 pTwo" data-v-dcea7c33>console.log( num ) . . . // 10</p><p class="fz28" data-v-dcea7c33>}</p><br data-v-dcea7c33><br data-v-dcea7c33><p class="fz28" data-v-dcea7c33>用 let 或 const 宣告的變量和常量不會被提升</p><br data-v-dcea7c33><br data-v-dcea7c33><p class="fz28" data-v-dcea7c33>注意:</p><p class="fz28" data-v-dcea7c33>1.變量在未聲明即被訪問時會報錯</p><p class="fz28" data-v-dcea7c33>2.變量在var聲明之前被訪問, 值為 undefined</p><br data-v-dcea7c33><br data-v-dcea7c33></div></div></div>',1),Mi=zn(()=>n("div",{class:"toTopButton"},[n("div",{class:"disCen"},"___"),n("div",{class:"disCen"},"▲")],-1)),Ai=[Mi],Fi=zn(()=>n("div",{class:"toBotButton"},[n("div",{class:"disCen"},"▼"),n("div",{class:"disCen"},"￣")],-1)),Ii=[Fi],Ri={__name:"JsPageThreeOne",setup(a){const s=ba(!1);window.addEventListener("scroll",function(){s.value=window.scrollY>0});function d(){window.scrollTo({top:0,left:0,behavior:"smooth"})}function v(){window.scrollTo({top:999999,left:0,behavior:"smooth"})}function t(e){window.scrollTo({top:document.getElementById(`${e}`).offsetTop,behavior:"smooth"})}return(e,c)=>(aa(),ta(G,null,[n("section",null,[n("div",Oi,[n("div",Ni,[n("div",$i,[n("div",{onClick:c[0]||(c[0]=l=>t("scope001")),class:"leftNavText"},"局部作用域"),n("div",{onClick:c[1]||(c[1]=l=>t("scope002")),class:"leftNavText"},"全局作用域"),n("div",{onClick:c[2]||(c[2]=l=>t("scope003")),class:"leftNavText"},"作用域鏈"),n("div",{onClick:c[3]||(c[3]=l=>t("scope004")),class:"leftNavText"}," JS垃圾回收機制 "),n("div",{onClick:c[4]||(c[4]=l=>t("scope005")),class:"leftNavText"},"閉包"),n("div",{onClick:c[5]||(c[5]=l=>t("scope006")),class:"leftNavText"},"變量提升")])])]),Ei]),n("div",null,[W(k(B,{name:"fade",tag:"div"},{default:S(()=>[n("div",{onClick:d,class:"toTop"},Ai)]),_:1},512),[[U,s.value]]),W(k(B,{name:"fade",tag:"div"},{default:S(()=>[n("div",{onClick:v,class:"toBot"},Ii)]),_:1},512),[[U,s.value]])])],64))}},Hi=pa(Ri,[["__scopeId","data-v-dcea7c33"]]);const as=a=>(wa("data-v-c867c7e8"),a=a(),ma(),a),Bi={class:"leftNav"},Di={class:"leftNavContainer"},Ji={class:"leftNavLayout"},Wi={class:"Main"},Ui={class:"mainContainer"},Ki={class:"mainLayout"},Xi=K('<br data-v-c867c7e8><br data-v-c867c7e8><p class="fz28" data-v-c867c7e8>總分總</p><p class="fz28" data-v-c867c7e8>1.要講哪個知識點</p><p class="fz28" data-v-c867c7e8>2.細講</p><p class="fz28" data-v-c867c7e8>3.總結</p><br data-v-c867c7e8><br data-v-c867c7e8><div id="twofunction001" class="articleCardTitle cor36 fz34" data-v-c867c7e8> 2.1 函數提升 </div><br data-v-c867c7e8><div class="bgcVS fz30" data-v-c867c7e8><div class="comment" data-v-c867c7e8> // 1.會把所有函數聲明提升到當前作用域最前面 </div><div class="comment" data-v-c867c7e8>// 2.只提升函數聲明, 不提升函數調用-&gt;()</div><div data-v-c867c7e8><span class="word" data-v-c867c7e8>fn</span> <span class="brackets" data-v-c867c7e8>()</span><span class="comment" data-v-c867c7e8>// &quot;函數提升&quot;</span></div><div data-v-c867c7e8><span class="function" data-v-c867c7e8>function </span><span class="word" data-v-c867c7e8>fn</span> <span class="brackets" data-v-c867c7e8>(){</span></div><div class="pTwo" data-v-c867c7e8><span class="word" data-v-c867c7e8>console.</span><span class="variable" data-v-c867c7e8>log</span> <span class="brackets" data-v-c867c7e8>(</span><span class="src" data-v-c867c7e8>&quot;函數提升</span> <span class="then" data-v-c867c7e8>&quot;</span><span class="brackets" data-v-c867c7e8>)</span></div><div class="brackets" data-v-c867c7e8>)</div><br data-v-c867c7e8><br data-v-c867c7e8><div data-v-c867c7e8><span class="word" data-v-c867c7e8>fun</span> <span class="brackets" data-v-c867c7e8>() </span><span class="comment" data-v-c867c7e8>// fun is not a function</span></div><div data-v-c867c7e8><span class="function" data-v-c867c7e8>var </span><span class="variable" data-v-c867c7e8>fun </span><span class="then" data-v-c867c7e8>= </span><span class="function" data-v-c867c7e8>function </span><span class="brackets" data-v-c867c7e8>(){ </span><span class="comment" data-v-c867c7e8>// 這叫 賦值</span></div><div class="pTwo" data-v-c867c7e8><span class="word" data-v-c867c7e8>console.</span><span class="variable" data-v-c867c7e8>log</span> <span class="brackets" data-v-c867c7e8>(</span><span class="src" data-v-c867c7e8>&quot;函數表達式&quot;</span><span class="brackets" data-v-c867c7e8>)</span></div><div class="brackets" data-v-c867c7e8>}</div><span class="comment" data-v-c867c7e8>// var 只提升聲明 不賦值</span></div><div id="twofunction002" class="articleCardTitle cor36 fz34" data-v-c867c7e8> 2.2 形參實參 </div><p class="fz28 cor36" data-v-c867c7e8>形式參數</p><p class="fz28" data-v-c867c7e8>接收函數在調用的時候傳入的具體參數值</p><br data-v-c867c7e8><p class="fz28" data-v-c867c7e8>1.出現在函數的定義裡面 , 只能在函數體內使用</p><br data-v-c867c7e8><p class="fz28 cor36" data-v-c867c7e8>實際參數</p><p class="fz28" data-v-c867c7e8>調用的時候傳入的具體值</p><br data-v-c867c7e8><p class="fz28" data-v-c867c7e8>1.出現在主調函數裡面 , 被調不能訪問實參</p><p class="fz28" data-v-c867c7e8> 2.實參是基本類型的值, 將實參值進行拷貝傳給形參, 函數運行完, 釋放形參, 所以實參不會被改變 </p><p class="fz28" data-v-c867c7e8> 2.實參是引用類型的值, 將實參內存地址進行拷貝傳給形參, 實參和形參將會指向同一地址 </p><br data-v-c867c7e8><p class="fz28" data-v-c867c7e8>其他:</p><p class="fz28" data-v-c867c7e8> 1.函數可以不定義形參, 函數體內可以通過 arguments 這個變量來獲取到 我們實際傳遞的參數 </p><p class="fz28" data-v-c867c7e8>2. 函數的參數個數、數據類型不一定要相同</p><br data-v-c867c7e8><br data-v-c867c7e8>',29),Yi={class:"bgcVS"},Gi=K('<div data-v-c867c7e8><span class="function" data-v-c867c7e8>function </span><span class="word" data-v-c867c7e8>fn1</span> <span class="brackets" data-v-c867c7e8>(){</span></div><div class="pTwo" data-v-c867c7e8><span class="function" data-v-c867c7e8>var </span><span class="word" data-v-c867c7e8>param</span> <span class="then" data-v-c867c7e8>=</span><span class="src" data-v-c867c7e8>&quot;hi&quot;;</span></div><div class="pTwo" data-v-c867c7e8><span class="word" data-v-c867c7e8>fn2</span> <span class="brackets" data-v-c867c7e8>(</span><span class="word" data-v-c867c7e8>param</span> <span class="brackets" data-v-c867c7e8>) </span><span class="comment" data-v-c867c7e8>// 對 fn2 來說是 實參</span></div><div class="brackets" data-v-c867c7e8>}</div><br data-v-c867c7e8><div data-v-c867c7e8><span class="function" data-v-c867c7e8>function </span><span class="word" data-v-c867c7e8>fn2</span> <span class="brackets" data-v-c867c7e8>(</span><span class="word" data-v-c867c7e8>arg</span> <span class="brackets" data-v-c867c7e8>){ </span><span class="comment" data-v-c867c7e8>// 形參</span></div><div class="pTwo" data-v-c867c7e8><span class="word" data-v-c867c7e8>console.</span><span class="variable" data-v-c867c7e8>log</span> <span class="brackets" data-v-c867c7e8>(</span><span class="word" data-v-c867c7e8>arg</span> <span class="brackets" data-v-c867c7e8>);</span></div><div class="pTwo" data-v-c867c7e8><span class="word" data-v-c867c7e8>console.</span><span class="variable" data-v-c867c7e8>log</span> <span class="brackets" data-v-c867c7e8>(</span><span class="word" data-v-c867c7e8>param</span> <span class="brackets" data-v-c867c7e8>); </span><span class="comment" data-v-c867c7e8>// param is not defined</span></div><div class="brackets" data-v-c867c7e8>}</div><br data-v-c867c7e8><div class="comment" data-v-c867c7e8> // 實參是基本類型的值, 將實參值進行拷貝傳給形參, 函數運行完, 釋放形參, 所以實參不會被改變 </div><div data-v-c867c7e8><span class="function" data-v-c867c7e8>var </span> <span class="word" data-v-c867c7e8>arg</span><span class="then" data-v-c867c7e8>=</span> <span class="word" data-v-c867c7e8>1;</span></div><div data-v-c867c7e8><span class="function" data-v-c867c7e8>function </span><span class="word" data-v-c867c7e8>fn</span> <span class="brackets" data-v-c867c7e8>(</span><span class="word" data-v-c867c7e8>param</span> <span class="brackets" data-v-c867c7e8>){</span></div><div class="pTwo" data-v-c867c7e8><span class="word" data-v-c867c7e8>console.</span><span class="variable" data-v-c867c7e8>log</span> <span class="brackets" data-v-c867c7e8>(</span><span class="word" data-v-c867c7e8>param</span> <span class="brackets" data-v-c867c7e8>){</span></div><div class="pTwo" data-v-c867c7e8><span class="word" data-v-c867c7e8>param</span> <span class="then" data-v-c867c7e8>=</span><span class="word" data-v-c867c7e8>2;</span></div><div class="brackets" data-v-c867c7e8>}</div><div data-v-c867c7e8><span class="word" data-v-c867c7e8>fn</span> <span class="brackets" data-v-c867c7e8>(</span><span class="word" data-v-c867c7e8>arg</span> <span class="brackets" data-v-c867c7e8>); </span><span class="comment" data-v-c867c7e8>// 1</span></div><div data-v-c867c7e8><span class="word" data-v-c867c7e8>console.</span><span class="variable" data-v-c867c7e8>log</span> <span class="brackets" data-v-c867c7e8>(</span><span class="word" data-v-c867c7e8>arg</span> <span class="brackets" data-v-c867c7e8>); </span><span class="comment" data-v-c867c7e8>// 1 </span><span class="comment" data-v-c867c7e8>// 所以實參不會被改變 </span></div><br data-v-c867c7e8><br data-v-c867c7e8><div class="comment" data-v-c867c7e8> // 實參是引用類型的值, 將實參內存地址進行拷貝傳給形參, 實參和形參將會指向同一地址 </div><div data-v-c867c7e8><span class="function" data-v-c867c7e8>var </span> <span class="word" data-v-c867c7e8>arg2</span><span class="then" data-v-c867c7e8>=</span> <span class="brackets" data-v-c867c7e8>{</span><span class="word" data-v-c867c7e8>name:</span> <span class="src" data-v-c867c7e8>&quot;wayne&quot;</span><span class="brackets" data-v-c867c7e8>};</span></div><div data-v-c867c7e8><span class="function" data-v-c867c7e8>function </span><span class="word" data-v-c867c7e8>fn2</span> <span class="brackets" data-v-c867c7e8>(</span><span class="word" data-v-c867c7e8>param</span> <span class="brackets" data-v-c867c7e8>){</span></div>',23),Qi=as(()=>n("span",{class:"word"},"param.name",-1)),Zi=as(()=>n("span",{class:"then"},"=",-1)),af=as(()=>n("span",{class:"src"},'"會改變值但不改變指向"',-1)),sf=K('<div class="pTwo" data-v-c867c7e8><span class="word" data-v-c867c7e8>param</span> <span class="then" data-v-c867c7e8>=</span><span class="brackets" data-v-c867c7e8>{};</span><span class="comment" data-v-c867c7e8>//改變了形參的指向</span></div><div class="brackets" data-v-c867c7e8>}</div><div data-v-c867c7e8><span class="word" data-v-c867c7e8>fn2</span> <span class="brackets" data-v-c867c7e8>(</span><span class="word" data-v-c867c7e8>arg2</span> <span class="brackets" data-v-c867c7e8>); </span></div><div data-v-c867c7e8><span class="word" data-v-c867c7e8>console.</span><span class="variable" data-v-c867c7e8>log</span> <span class="brackets" data-v-c867c7e8>(</span><span class="word" data-v-c867c7e8>arg2</span> <span class="brackets" data-v-c867c7e8>); </span><span class="comment" data-v-c867c7e8>// { name: &quot;會改變值但不改變指向&quot; } </span></div><span class="comment" data-v-c867c7e8>// 不能改變引用地址, 能改變值 </span><br data-v-c867c7e8><br data-v-c867c7e8><div class="comment" data-v-c867c7e8>// 函數的參數個數、數據類型不一定要相同</div><div data-v-c867c7e8><span class="function" data-v-c867c7e8>function </span><span class="word" data-v-c867c7e8>fn3</span> <span class="brackets" data-v-c867c7e8>(</span><span class="word" data-v-c867c7e8>arg1:string,arg2</span><span class="brackets" data-v-c867c7e8>){</span></div><div class="pTwo" data-v-c867c7e8><span class="comment" data-v-c867c7e8>// 1. arg1 傳入 number 類型 可以</span></div><div class="pTwo" data-v-c867c7e8><span class="comment" data-v-c867c7e8>// 2. arg2 沒傳入 是 undefined </span></div><div class="brackets" data-v-c867c7e8>}</div>',12),df=K('<br data-v-c867c7e8><br data-v-c867c7e8><p class="fz28" data-v-c867c7e8>需求 寫一個求和函數</p><p class="fz28" data-v-c867c7e8>不管傳入多少實參 都要求和</p><p class="fz28" data-v-c867c7e8>getSum( 2, 3)</p><p class="fz28" data-v-c867c7e8>getSum( 1, 2, 3)</p><p class="fz28" data-v-c867c7e8>getSum( 1, 2, 3, 4, 5,)</p><div id="twofunction003" class="articleCardTitle cor36 fz34" data-v-c867c7e8> 2.3 動態參數 arguments </div><div class="bgcVS" data-v-c867c7e8><div data-v-c867c7e8><span class="function" data-v-c867c7e8>function </span><span class="word" data-v-c867c7e8>getSum</span> <span class="brackets" data-v-c867c7e8>(){</span></div><div class="comment pTwo" data-v-c867c7e8> // arguments 動態參數 只存在於 函數裡面 </div><div class="comment pTwo" data-v-c867c7e8> // 1. 是偽數組 -&gt; 有所引號 有.length , 沒有常用的方法 </div><div class="word pTwo" data-v-c867c7e8><span class="word" data-v-c867c7e8>console.</span><span class="variable" data-v-c867c7e8>log</span> <span class="brackets" data-v-c867c7e8>(</span><span class="word" data-v-c867c7e8>arguments</span><span class="brackets" data-v-c867c7e8>) </span><span class="comment" data-v-c867c7e8>// [2,3,4]</span></div><div class="pTwo" data-v-c867c7e8><span class="function" data-v-c867c7e8>let </span> <span class="word" data-v-c867c7e8>sum</span><span class="then" data-v-c867c7e8>=</span> <span class="number" data-v-c867c7e8>0</span></div><div class="pTwo" data-v-c867c7e8><span class="then" data-v-c867c7e8>for </span> <span class="brackets" data-v-c867c7e8>(</span><span class="function" data-v-c867c7e8>let </span> <span class="word" data-v-c867c7e8>i</span><span class="then" data-v-c867c7e8>=</span> <span class="number" data-v-c867c7e8>0</span><span class="then" data-v-c867c7e8>;</span> <span class="word" data-v-c867c7e8>i</span><span class="then" data-v-c867c7e8>＜</span><span class="word" data-v-c867c7e8>arguments</span><span class="variable" data-v-c867c7e8>.length</span><span class="then" data-v-c867c7e8>;</span> <span class="word" data-v-c867c7e8>i</span><span class="then" data-v-c867c7e8>++</span><span class="brackets" data-v-c867c7e8>){</span></div><div class="pFou" data-v-c867c7e8><span class="word" data-v-c867c7e8>sum</span> <span class="then" data-v-c867c7e8>+=</span><span class="word" data-v-c867c7e8>arguments</span><span class="brackets" data-v-c867c7e8>[</span> <span class="word" data-v-c867c7e8>i</span><span class="brackets" data-v-c867c7e8>]</span></div><div class="pTwo brackets" data-v-c867c7e8>}</div><div class="pTwo" data-v-c867c7e8><span class="word" data-v-c867c7e8>console</span><span class="variable" data-v-c867c7e8>.log</span><span class="brackets" data-v-c867c7e8>(</span> <span class="word" data-v-c867c7e8>sum</span><span class="brackets" data-v-c867c7e8>)</span><div data-v-c867c7e8></div></div><div class="brackets" data-v-c867c7e8>}</div><div data-v-c867c7e8><span class="word" data-v-c867c7e8>getSum</span> <span class="brackets" data-v-c867c7e8>(</span><span class="word" data-v-c867c7e8>2,3,4</span> <span class="brackets" data-v-c867c7e8>)</span></div></div><br data-v-c867c7e8><br data-v-c867c7e8><p class="fz28" data-v-c867c7e8>總結</p><p class="fz28" data-v-c867c7e8>1. arguments 是一個偽數組, 只存在函數中</p><p class="fz28" data-v-c867c7e8>2. arguments 作用是 動態獲取函數的 實參</p><p class="fz28" data-v-c867c7e8>3. 可用 for 循環依次得到傳過來的 實參</p><br data-v-c867c7e8><br data-v-c867c7e8><p class="fz28" data-v-c867c7e8>需求 寫一個求和函數</p><p class="fz28" data-v-c867c7e8>不管傳入多少實參 都要求和</p><p class="fz28" data-v-c867c7e8>getSum( 2, 3)</p><p class="fz28" data-v-c867c7e8>getSum( 1, 2, 3)</p><p class="fz28" data-v-c867c7e8>getSum( 1, 2, 3, 4, 5,)</p><p class="fz28" data-v-c867c7e8>改成形參?</p><div id="twofunction004" class="articleCardTitle cor36 fz34" data-v-c867c7e8> 2.4 剩餘參數 </div><p class="fz28" data-v-c867c7e8>剩餘參數允許我們將一個不定數量的參數表示為一個數組</p><div class="bgcVS" data-v-c867c7e8><div data-v-c867c7e8><span class="function" data-v-c867c7e8>function </span><span class="word" data-v-c867c7e8>getSum</span> <span class="brackets" data-v-c867c7e8>(</span><span class="word" data-v-c867c7e8>...arr</span><span class="brackets" data-v-c867c7e8>){</span></div><div class="word pTwo" data-v-c867c7e8><span class="word" data-v-c867c7e8>console.</span><span class="variable" data-v-c867c7e8>log</span> <span class="brackets" data-v-c867c7e8>(</span><span class="word" data-v-c867c7e8>arr</span><span class="brackets" data-v-c867c7e8>) </span><span class="comment" data-v-c867c7e8>// [2,3,4]</span></div><div class="brackets" data-v-c867c7e8>}</div><div data-v-c867c7e8><span class="word" data-v-c867c7e8>getSum</span> <span class="brackets" data-v-c867c7e8>(</span><span class="word" data-v-c867c7e8>2,3,4</span> <span class="brackets" data-v-c867c7e8>)</span></div><br data-v-c867c7e8><div data-v-c867c7e8><span class="function" data-v-c867c7e8>function </span><span class="word" data-v-c867c7e8>getSum</span> <span class="brackets" data-v-c867c7e8>(</span><span class="word" data-v-c867c7e8>a, b, ...arr</span><span class="brackets" data-v-c867c7e8>){</span></div><div class="comment pTwo" data-v-c867c7e8>// 2 給 a , 3 給 b</div><div class="word pTwo" data-v-c867c7e8><span class="word" data-v-c867c7e8>console.</span><span class="variable" data-v-c867c7e8>log</span> <span class="brackets" data-v-c867c7e8>(</span><span class="word" data-v-c867c7e8>arr</span><span class="brackets" data-v-c867c7e8>) </span><span class="comment" data-v-c867c7e8>// [2,3,4] </span><span class="comment" data-v-c867c7e8>// 使用時不用加&quot;...&quot;</span></div><div class="brackets" data-v-c867c7e8>}</div><div data-v-c867c7e8><span class="word" data-v-c867c7e8>getSum</span> <span class="brackets" data-v-c867c7e8>(</span><span class="word" data-v-c867c7e8>2,3,4</span> <span class="brackets" data-v-c867c7e8>)</span></div></div><br data-v-c867c7e8><p class="fz28" data-v-c867c7e8>動態、剩餘參數差別</p><p class="fz28" data-v-c867c7e8> 1. ...是語法符號, 置於最末函數形參之前, 用於獲取多餘的實參 </p><p class="fz28" data-v-c867c7e8>2. 剩餘參數 獲取的數組是 真數組</p><div id="twofunction005" class="articleCardTitle cor36 fz34" data-v-c867c7e8> 2.5 展開運算符 </div><p class="fz28" data-v-c867c7e8>展開運算符</p><p class="fz28" data-v-c867c7e8> 可以把陣列展開, 可以利用求陣列最大值 和 合併陣列 等操作 </p><br data-v-c867c7e8><p class="fz28" data-v-c867c7e8> : 比如const a 等於, 然後一個陣列, 然後a點點點b, 這個b是一個舊陣列, 然後它會把a和b合成形成新陣列, 然後返回給變量 </p><br data-v-c867c7e8><div class="bgcVS" data-v-c867c7e8><br data-v-c867c7e8><div data-v-c867c7e8><span class="function" data-v-c867c7e8>const </span> <span class="word" data-v-c867c7e8>a</span><span class="then" data-v-c867c7e8>=</span> <span class="brackets" data-v-c867c7e8>[</span><span class="number" data-v-c867c7e8>1, 2, 3</span><span class="brackets" data-v-c867c7e8>]</span></div><div data-v-c867c7e8><span class="function" data-v-c867c7e8>const </span> <span class="word" data-v-c867c7e8>b</span><span class="then" data-v-c867c7e8>=</span> <span class="brackets" data-v-c867c7e8>[</span><span class="number" data-v-c867c7e8>4, 5, 6 </span><span class="brackets" data-v-c867c7e8>]</span></div><br data-v-c867c7e8><div class="comment" data-v-c867c7e8>用於拼接陣列</div><div data-v-c867c7e8><span class="function" data-v-c867c7e8>const </span> <span class="word" data-v-c867c7e8>c</span><span class="then" data-v-c867c7e8>=</span> <span class="brackets" data-v-c867c7e8>[</span><span class="word" data-v-c867c7e8>...a,...b</span><span class="brackets" data-v-c867c7e8>] </span><span class="comment" data-v-c867c7e8>// [1,2,3,4,5,6]</span></div><br data-v-c867c7e8><div class="comment" data-v-c867c7e8>也可以</div><div data-v-c867c7e8><span class="function" data-v-c867c7e8>const </span> <span class="word" data-v-c867c7e8>d</span><span class="then" data-v-c867c7e8>=</span> <span class="brackets" data-v-c867c7e8>[</span><span class="word" data-v-c867c7e8>...a,</span><span class="number" data-v-c867c7e8>4, 5, 6</span><span class="brackets" data-v-c867c7e8>] </span><span class="comment" data-v-c867c7e8>// [1,2,3,4,5,6]</span></div><br data-v-c867c7e8><div class="comment" data-v-c867c7e8>也可以</div><div data-v-c867c7e8><span class="word" data-v-c867c7e8>a.push</span> <span class="brackets" data-v-c867c7e8>(</span><span class="word" data-v-c867c7e8>...b</span> <span class="brackets" data-v-c867c7e8>)</span></div><div data-v-c867c7e8><span class="word" data-v-c867c7e8>console</span><span class="variable" data-v-c867c7e8>.log</span><span class="brackets" data-v-c867c7e8>(</span> <span class="word" data-v-c867c7e8>a</span><span class="brackets" data-v-c867c7e8>)</span></div><br data-v-c867c7e8><div class="comment" data-v-c867c7e8>可以做陣列淺拷貝</div><div data-v-c867c7e8><span class="function" data-v-c867c7e8>const </span> <span class="word" data-v-c867c7e8>e</span><span class="then" data-v-c867c7e8>=</span> <span class="brackets" data-v-c867c7e8>[</span><span class="word" data-v-c867c7e8>...a</span> <span class="brackets" data-v-c867c7e8>]</span></div><div data-v-c867c7e8><span class="word" data-v-c867c7e8>e.push</span> <span class="brackets" data-v-c867c7e8>(</span><span class="number" data-v-c867c7e8>4</span> <span class="brackets" data-v-c867c7e8>)</span><span class="comment" data-v-c867c7e8>// 不會影響 a</span></div><br data-v-c867c7e8><div class="comment" data-v-c867c7e8> 淺拷貝是指複製值時，原本的變數和新的變數會指向同一個址 (reference) </div><div class="comment" data-v-c867c7e8> 深拷貝是指在拷貝時不共享相同的址 (reference) </div><br data-v-c867c7e8></div><br data-v-c867c7e8><br data-v-c867c7e8><p class="fz28" data-v-c867c7e8>a={...b} 可以嗎?</p><br data-v-c867c7e8><div class="bgcVS" data-v-c867c7e8><br data-v-c867c7e8><div data-v-c867c7e8><span class="function" data-v-c867c7e8>const </span><span class="word" data-v-c867c7e8>obj1</span> <span class="then" data-v-c867c7e8>=</span><span class="brackets" data-v-c867c7e8>{</span> <span class="word" data-v-c867c7e8>a:</span><span class="number" data-v-c867c7e8>1,</span> <span class="word" data-v-c867c7e8>b:</span><span class="number" data-v-c867c7e8>2</span> <span class="brackets" data-v-c867c7e8>};</span></div><div data-v-c867c7e8><span class="function" data-v-c867c7e8>const </span><span class="word" data-v-c867c7e8>obj2</span> <span class="then" data-v-c867c7e8>=</span><span class="brackets" data-v-c867c7e8>{</span> <span class="word" data-v-c867c7e8>c:</span><span class="number" data-v-c867c7e8>3,</span> <span class="word" data-v-c867c7e8>d:</span><span class="number" data-v-c867c7e8>4</span> <span class="brackets" data-v-c867c7e8>};</span></div><br data-v-c867c7e8><span class="comment" data-v-c867c7e8>// 可以 拷貝 物件</span><div data-v-c867c7e8><span class="function" data-v-c867c7e8>const </span><span class="word" data-v-c867c7e8>newObj</span> <span class="then" data-v-c867c7e8>=</span><span class="brackets" data-v-c867c7e8>{</span> <span class="word" data-v-c867c7e8>...obj1</span><span class="brackets" data-v-c867c7e8>}</span><span class="word" data-v-c867c7e8></span></div><br data-v-c867c7e8><span class="comment" data-v-c867c7e8>// 可以 merged 2 個物件</span><div data-v-c867c7e8><span class="function" data-v-c867c7e8>const </span><span class="word" data-v-c867c7e8>merged</span> <span class="then" data-v-c867c7e8>=</span><span class="brackets" data-v-c867c7e8>{</span><span class="word" data-v-c867c7e8>...obj1,obj2</span><span class="brackets" data-v-c867c7e8>};</span></div><div data-v-c867c7e8><span class="word" data-v-c867c7e8>console.</span><span class="variable" data-v-c867c7e8>log</span> <span class="brackets" data-v-c867c7e8>(</span><span class="word" data-v-c867c7e8>merged</span><span class="brackets" data-v-c867c7e8>); </span><span class="comment" data-v-c867c7e8>// {a: 1, b: 2, c: 3, d: 4 }</span></div><br data-v-c867c7e8></div><br data-v-c867c7e8><br data-v-c867c7e8><p class="cor36 fz28" data-v-c867c7e8> 這三個點除了把一個東西展開,它在函數參數有什麼用? </p><p class="fz28" data-v-c867c7e8> 可以不去命名那個函數的參數, 直接用函數參數對象裡面的某一個東西 </p><br data-v-c867c7e8><p class="cor36 fz28" data-v-c867c7e8>參數裡面可不可以用三個點?</p><p class="fz28" data-v-c867c7e8>可以</p><br data-v-c867c7e8><p class="cor36 fz28" data-v-c867c7e8>在賦值可以用三個點嗎?</p><p class="fz28" data-v-c867c7e8>可以</p><br data-v-c867c7e8><p class="cor36 fz28" data-v-c867c7e8> 我有一個陣列長度為10,我想把前面第一個元素命名為a,後面9個元素命名為新的數組叫b怎麼做? </p><p class="fz28" data-v-c867c7e8> 方括號a然後點,然後逗號,然後點點點rest,然後方括號,然後等於array1,那就是a,那個a就是array裡的第一個 </p><br data-v-c867c7e8><br data-v-c867c7e8>',57),tf={class:"bgcVS"},cf=K('<br data-v-c867c7e8><div class="comment" data-v-c867c7e8>// 用於函數傳參</div><br data-v-c867c7e8><div class="comment" data-v-c867c7e8>// 實參的用法</div><div data-v-c867c7e8><span class="function" data-v-c867c7e8>const </span> <span class="word" data-v-c867c7e8>a</span><span class="then" data-v-c867c7e8>=</span> <span class="brackets" data-v-c867c7e8>[</span><span class="number" data-v-c867c7e8>1, 2, 3</span><span class="brackets" data-v-c867c7e8>]</span></div>',5),vf=as(()=>n("span",{class:"function"},"function ",-1)),nf=as(()=>n("span",{class:"word"},"test",-1)),ef=as(()=>n("span",{class:"brackets"},"(",-1)),pf=as(()=>n("span",{class:"word"},"p1,p2,p3",-1)),lf=as(()=>n("span",{class:"brackets"},"){",-1)),bf=K('<div class="pTwo" data-v-c867c7e8><span class="word" data-v-c867c7e8>console.</span><span class="variable" data-v-c867c7e8>log</span> <span class="brackets" data-v-c867c7e8>(</span><span class="word" data-v-c867c7e8>p1</span> <span class="brackets" data-v-c867c7e8>);</span></div><div class="pTwo" data-v-c867c7e8><span class="word" data-v-c867c7e8>console.</span><span class="variable" data-v-c867c7e8>log</span> <span class="brackets" data-v-c867c7e8>(</span><span class="word" data-v-c867c7e8>p2</span> <span class="brackets" data-v-c867c7e8>);</span></div><div class="pTwo" data-v-c867c7e8><span class="word" data-v-c867c7e8>console.</span><span class="variable" data-v-c867c7e8>log</span> <span class="brackets" data-v-c867c7e8>(</span><span class="word" data-v-c867c7e8>p3</span> <span class="brackets" data-v-c867c7e8>);</span></div><div class="brackets" data-v-c867c7e8>}</div><div data-v-c867c7e8><span class="word" data-v-c867c7e8>test</span><span class="brackets" data-v-c867c7e8>(</span><span class="word" data-v-c867c7e8>...a</span> <span class="brackets" data-v-c867c7e8>)</span></div><br data-v-c867c7e8><div data-v-c867c7e8><span class="function" data-v-c867c7e8>function </span><span class="word" data-v-c867c7e8>sum</span> <span class="brackets" data-v-c867c7e8>(</span><span class="word" data-v-c867c7e8>a,b,c</span> <span class="brackets" data-v-c867c7e8>){</span></div><div class="pTwo" data-v-c867c7e8><span class="then" data-v-c867c7e8>return </span> <span class="word" data-v-c867c7e8>a+b+c</span></div><span class="brackets" data-v-c867c7e8>}</span><div data-v-c867c7e8><span class="function" data-v-c867c7e8>const </span><span class="word" data-v-c867c7e8>sum</span> <span class="then" data-v-c867c7e8>=</span><span class="brackets" data-v-c867c7e8>(</span> <span class="word" data-v-c867c7e8>a,b,c</span><span class="brackets" data-v-c867c7e8>)</span> <span class="function" data-v-c867c7e8>=&gt;</span><span class="word" data-v-c867c7e8>a+b+c</span></div><div data-v-c867c7e8><span class="word" data-v-c867c7e8>sum</span> <span class="brackets" data-v-c867c7e8>(</span><span class="word" data-v-c867c7e8>...a</span> <span class="brackets" data-v-c867c7e8>) </span><span class="comment" data-v-c867c7e8>// 6</span></div><br data-v-c867c7e8><div data-v-c867c7e8><span class="function" data-v-c867c7e8>const </span><span class="word" data-v-c867c7e8>sum</span> <span class="then" data-v-c867c7e8>=</span><span class="word" data-v-c867c7e8>sum</span> <span class="brackets" data-v-c867c7e8>(</span><span class="word" data-v-c867c7e8>...a</span><span class="brackets" data-v-c867c7e8>)</span></div><br data-v-c867c7e8><div class="comment" data-v-c867c7e8>// 形參的用法</div><div data-v-c867c7e8><span class="word" data-v-c867c7e8>conso.</span><span class="variable" data-v-c867c7e8>log</span> <span class="brackets" data-v-c867c7e8>(</span><span class="word" data-v-c867c7e8>Math.max</span><span class="brackets" data-v-c867c7e8>(</span><span class="src" data-v-c867c7e8>必須是字符的形式,不能直接接陣列,必須逗號隔開 </span><span class="brackets" data-v-c867c7e8>)</span> <span class="brackets" data-v-c867c7e8>)</span></div><div data-v-c867c7e8><span class="word" data-v-c867c7e8>conso.</span><span class="variable" data-v-c867c7e8>log</span> <span class="brackets" data-v-c867c7e8>(</span><span class="word" data-v-c867c7e8>Math.max</span><span class="brackets" data-v-c867c7e8>(</span> <span class="number" data-v-c867c7e8>1,2,3</span><span class="brackets" data-v-c867c7e8>)</span> <span class="brackets" data-v-c867c7e8>)</span><span class="comment" data-v-c867c7e8>// 裡面要逗號</span></div><div class="comment" data-v-c867c7e8>// 陣列沒有 求最大值 的方法</div><div data-v-c867c7e8><span class="function" data-v-c867c7e8>const </span> <span class="word" data-v-c867c7e8>a</span><span class="then" data-v-c867c7e8>=</span> <span class="brackets" data-v-c867c7e8>[</span><span class="number" data-v-c867c7e8>1, 2, 3</span><span class="brackets" data-v-c867c7e8>]</span></div><div data-v-c867c7e8><span class="function" data-v-c867c7e8>const </span> <span class="word" data-v-c867c7e8>b</span><span class="then" data-v-c867c7e8>=</span> <span class="brackets" data-v-c867c7e8>[</span><span class="number" data-v-c867c7e8>4, 5, 6</span><span class="brackets" data-v-c867c7e8>]</span></div><div data-v-c867c7e8><span class="word" data-v-c867c7e8>console.</span><span class="variable" data-v-c867c7e8>log</span> <span class="brackets" data-v-c867c7e8>(</span><span class="word" data-v-c867c7e8>...a</span><span class="brackets" data-v-c867c7e8>)</span><span class="comment" data-v-c867c7e8>// 1 2 3</span><span class="comment" data-v-c867c7e8>// 打印沒逗號,一樣能用在.max</span></div><span class="comment" data-v-c867c7e8>...a === 1,2,3</span><div data-v-c867c7e8><span class="word" data-v-c867c7e8>console.</span><span class="variable" data-v-c867c7e8>log</span> <span class="word" data-v-c867c7e8>Math</span><span class="variable" data-v-c867c7e8>.max</span> <span class="brackets" data-v-c867c7e8>(</span><span class="word" data-v-c867c7e8>...a</span><span class="brackets" data-v-c867c7e8>)</span> <span class="comment" data-v-c867c7e8>// 3</span></div><div data-v-c867c7e8><span class="word" data-v-c867c7e8>console.</span><span class="variable" data-v-c867c7e8>log</span> <span class="word" data-v-c867c7e8>Math</span><span class="variable" data-v-c867c7e8>.min</span> <span class="brackets" data-v-c867c7e8>(</span><span class="word" data-v-c867c7e8>...a</span><span class="brackets" data-v-c867c7e8>)</span> <span class="comment" data-v-c867c7e8>// 3</span></div><div data-v-c867c7e8><span class="word" data-v-c867c7e8>console.</span><span class="variable" data-v-c867c7e8>log</span> <span class="word" data-v-c867c7e8>Math</span><span class="variable" data-v-c867c7e8>.max</span> <span class="brackets" data-v-c867c7e8>(</span><span class="word" data-v-c867c7e8>...a,...b</span><span class="brackets" data-v-c867c7e8>)</span> <span class="comment" data-v-c867c7e8>// 6</span></div><br data-v-c867c7e8><div class="comment" data-v-c867c7e8>// 形參 &amp; 實參</div><div data-v-c867c7e8><span class="function" data-v-c867c7e8>function </span><span class="word" data-v-c867c7e8>test</span> <span class="brackets" data-v-c867c7e8>(</span><span class="word" data-v-c867c7e8>形參1,形參2</span><span class="brackets" data-v-c867c7e8>){ </span><span class="comment" data-v-c867c7e8>// 函數聲明的小括號裡是 形參 </span></div><div class="comment pTwo" data-v-c867c7e8>// 代碼</div><div class="brackets" data-v-c867c7e8>}</div><div data-v-c867c7e8><span class="word" data-v-c867c7e8>test</span> <span class="brackets" data-v-c867c7e8>(</span><span class="word" data-v-c867c7e8>實參1,實參2</span><span class="brackets" data-v-c867c7e8>) </span><span class="comment" data-v-c867c7e8>// 函數調用的小括號裡是 實參</span></div>',31),rf=K('<div class="articleCardTitle cor36 fz34" data-v-c867c7e8>匿名函數</div><p class="fz28" data-v-c867c7e8>1.事件</p><p class="fz28" data-v-c867c7e8>2.物件</p><p class="fz28" data-v-c867c7e8>3.函數表達式</p><p class="fz28" data-v-c867c7e8>4.回調函數</p><p class="fz28" data-v-c867c7e8>5.函數返回值</p><p class="fz28" data-v-c867c7e8>6.模仿塊級作用域 IIFE</p><div id="twofunction006" class="articleCardTitle cor36 fz34" data-v-c867c7e8> 2.6 箭頭函數 -&gt; 更適用於本來需要匿名函數的地方 </div><p class="fz28" data-v-c867c7e8>箭頭函數 和 普通function區別</p><p class="fz28" data-v-c867c7e8> 在執行過程中不會初始化this, 也不會初始化aruguments, 它不能被new, 沒有prototype, 它不能當成構造函數執行 </p><br data-v-c867c7e8><br data-v-c867c7e8><p class="fz28" data-v-c867c7e8>另外 1. 箭頭函式可作為物件的方法使用</p><br data-v-c867c7e8><p class="fz28" data-v-c867c7e8> 2. 箭頭函式(arrow function)的 this 不因為使用 call() / apply() / bind() 方法而被修改 </p><div class="dis" data-v-c867c7e8><div class="bgcVS" data-v-c867c7e8><div data-v-c867c7e8><span class="function" data-v-c867c7e8>const </span><span class="word" data-v-c867c7e8>fn</span> <span class="then" data-v-c867c7e8>=</span><span class="function" data-v-c867c7e8>function </span><span class="brackets" data-v-c867c7e8>(){</span></div><div class="pTwo" data-v-c867c7e8><span class="word" data-v-c867c7e8>console.</span><span class="variable" data-v-c867c7e8>log</span><span class="brackets" data-v-c867c7e8>(</span> <span class="number" data-v-c867c7e8>123</span><span class="brackets" data-v-c867c7e8>)</span></div><div class="brackets" data-v-c867c7e8>}</div></div><div class="bgcVSMid" data-v-c867c7e8>&gt;</div><div class="bgcVS" data-v-c867c7e8><div data-v-c867c7e8><span class="function" data-v-c867c7e8>const </span><span class="word" data-v-c867c7e8>fn</span> <span class="then" data-v-c867c7e8>=</span><span class="brackets" data-v-c867c7e8>()</span><span class="function" data-v-c867c7e8>=&gt;</span> <span class="brackets" data-v-c867c7e8>{</span></div><div class="pTwo" data-v-c867c7e8><span class="word" data-v-c867c7e8>console.</span><span class="variable" data-v-c867c7e8>log</span><span class="brackets" data-v-c867c7e8>(</span> <span class="number" data-v-c867c7e8>123</span><span class="brackets" data-v-c867c7e8>)</span></div><div class="brackets" data-v-c867c7e8>}</div><br data-v-c867c7e8><br data-v-c867c7e8><div data-v-c867c7e8><span class="function" data-v-c867c7e8>const </span><span class="word" data-v-c867c7e8>fn</span> <span class="then" data-v-c867c7e8>=</span><span class="brackets" data-v-c867c7e8>(</span> <span class="word" data-v-c867c7e8>x</span><span class="brackets" data-v-c867c7e8>)</span><span class="function" data-v-c867c7e8>=&gt;</span><span class="brackets" data-v-c867c7e8>{ </span><span class="comment" data-v-c867c7e8>// 這裡接形參</span></div><div class="pTwo" data-v-c867c7e8><span class="word" data-v-c867c7e8>console.</span><span class="variable" data-v-c867c7e8>log</span><span class="brackets" data-v-c867c7e8>(</span> <span class="word" data-v-c867c7e8>x</span><span class="brackets" data-v-c867c7e8>)</span></div><div class="brackets" data-v-c867c7e8>}</div><div data-v-c867c7e8><span class="word" data-v-c867c7e8>fn</span> <span class="brackets" data-v-c867c7e8>(</span><span class="number" data-v-c867c7e8>1</span> <span class="brackets" data-v-c867c7e8>)</span><span class="comment" data-v-c867c7e8>// 這裡放實參</span></div><br data-v-c867c7e8><br data-v-c867c7e8><span class="comment" data-v-c867c7e8>// 只有一個形參 可省略小括號</span><div data-v-c867c7e8><span class="function" data-v-c867c7e8>const </span><span class="word" data-v-c867c7e8>fn</span> <span class="then" data-v-c867c7e8>= </span><span class="word" data-v-c867c7e8>x </span><span class="function" data-v-c867c7e8>=&gt;</span><span class="brackets" data-v-c867c7e8>{ </span></div><div class="pTwo" data-v-c867c7e8><span class="word" data-v-c867c7e8>console.</span><span class="variable" data-v-c867c7e8>log</span><span class="brackets" data-v-c867c7e8>(</span> <span class="word" data-v-c867c7e8>x</span><span class="brackets" data-v-c867c7e8>)</span></div><div class="brackets" data-v-c867c7e8>}</div><div data-v-c867c7e8><span class="word" data-v-c867c7e8>fn</span> <span class="brackets" data-v-c867c7e8>(</span><span class="number" data-v-c867c7e8>1</span> <span class="brackets" data-v-c867c7e8>)</span><span class="comment" data-v-c867c7e8>// 這裡放實參</span></div><span class="comment" data-v-c867c7e8>// 沒有形參 或 2 個形參 不可省略小括號</span><br data-v-c867c7e8><br data-v-c867c7e8><div class="comment" data-v-c867c7e8> // 只有一個語句 可省略大括號 並自動做為返回值被返回 </div><div class="comment" data-v-c867c7e8>// ( 只有一行代碼 )</div><div data-v-c867c7e8><span class="function" data-v-c867c7e8>const </span><span class="word" data-v-c867c7e8>fn</span> <span class="then" data-v-c867c7e8>= </span><span class="word" data-v-c867c7e8>x </span><span class="function" data-v-c867c7e8>=&gt; </span><span class="word" data-v-c867c7e8>console.</span><span class="variable" data-v-c867c7e8>log</span><span class="brackets" data-v-c867c7e8>(</span> <span class="word" data-v-c867c7e8>x</span><span class="brackets" data-v-c867c7e8>)</span></div><div data-v-c867c7e8><span class="word" data-v-c867c7e8>fn</span> <span class="brackets" data-v-c867c7e8>(</span><span class="number" data-v-c867c7e8>1</span> <span class="brackets" data-v-c867c7e8>)</span><span class="comment" data-v-c867c7e8>// 要先聲明在調用</span></div><br data-v-c867c7e8><br data-v-c867c7e8><span class="comment" data-v-c867c7e8>// 只有一個形參 可省略小括號</span><div data-v-c867c7e8><span class="function" data-v-c867c7e8>const </span><span class="word" data-v-c867c7e8>fn</span> <span class="then" data-v-c867c7e8>= </span><span class="word" data-v-c867c7e8>x </span><span class="function" data-v-c867c7e8>=&gt;</span><span class="brackets" data-v-c867c7e8>{ </span></div><div class="pTwo" data-v-c867c7e8><span class="then" data-v-c867c7e8>return </span><span class="word" data-v-c867c7e8>x </span><span class="then" data-v-c867c7e8>+ </span><span class="word" data-v-c867c7e8>x </span></div><div class="brackets" data-v-c867c7e8>}</div><div data-v-c867c7e8><span class="word" data-v-c867c7e8>fn</span> <span class="brackets" data-v-c867c7e8>(</span><span class="number" data-v-c867c7e8>1</span> <span class="brackets" data-v-c867c7e8>)</span><span class="comment" data-v-c867c7e8>// 2</span></div><br data-v-c867c7e8><br data-v-c867c7e8><span class="comment" data-v-c867c7e8>// 如果在一行裡面可以省 return &amp; 大括號</span><div data-v-c867c7e8><span class="function" data-v-c867c7e8>const </span><span class="word" data-v-c867c7e8>fn</span> <span class="then" data-v-c867c7e8>= </span><span class="word" data-v-c867c7e8>x </span><span class="function" data-v-c867c7e8>=&gt;</span><span class="word" data-v-c867c7e8>x </span><span class="then" data-v-c867c7e8>+ </span><span class="word" data-v-c867c7e8>x </span></div><div data-v-c867c7e8><span class="word" data-v-c867c7e8>fn</span> <span class="brackets" data-v-c867c7e8>(</span><span class="number" data-v-c867c7e8>1</span> <span class="brackets" data-v-c867c7e8>)</span><span class="comment" data-v-c867c7e8>// 2</span></div><br data-v-c867c7e8><br data-v-c867c7e8><div class="comment" data-v-c867c7e8>// 可以直接返回一個物件</div><div class="comment" data-v-c867c7e8>// 注意! 物件和函數都是 {}</div><div class="comment" data-v-c867c7e8>// 直接 ( { 物件 } )</div><div data-v-c867c7e8><span class="function" data-v-c867c7e8>const </span><span class="word" data-v-c867c7e8>fn</span> <span class="then" data-v-c867c7e8>= </span><span class="brackets" data-v-c867c7e8>(</span> <span class="word" data-v-c867c7e8>uname</span><span class="brackets" data-v-c867c7e8>)</span><span class="function" data-v-c867c7e8>=&gt;</span><span class="brackets" data-v-c867c7e8>( {</span><span class="word" data-v-c867c7e8>name: uname</span><span class="brackets" data-v-c867c7e8>} )</span></div><div data-v-c867c7e8><span class="function" data-v-c867c7e8>const </span><span class="word" data-v-c867c7e8>fn</span> <span class="then" data-v-c867c7e8>= </span><span class="brackets" data-v-c867c7e8>(</span> <span class="word" data-v-c867c7e8>uname</span><span class="brackets" data-v-c867c7e8>)</span><span class="function" data-v-c867c7e8>=&gt;</span><span class="brackets" data-v-c867c7e8>( {</span><span class="word" data-v-c867c7e8>uname: uname</span><span class="brackets" data-v-c867c7e8>} )</span></div><div data-v-c867c7e8><span class="word" data-v-c867c7e8>fn</span> <span class="brackets" data-v-c867c7e8>(</span><span class="src" data-v-c867c7e8>&quot;wayne&quot;</span> <span class="brackets" data-v-c867c7e8>)</span></div><br data-v-c867c7e8><br data-v-c867c7e8></div></div><div class="bgcVS" data-v-c867c7e8><div data-v-c867c7e8><span class="function" data-v-c867c7e8>const </span><span class="word" data-v-c867c7e8>form</span> <span class="then" data-v-c867c7e8>=</span><span class="word" data-v-c867c7e8>document.querySelector</span><span class="brackets" data-v-c867c7e8>(</span> <span class="src" data-v-c867c7e8>&quot;form&quot;</span><span class="brackets" data-v-c867c7e8>)</span></div><div data-v-c867c7e8><span class="word" data-v-c867c7e8>form.addEventListener</span><span class="brackets" data-v-c867c7e8>(</span> <span class="src" data-v-c867c7e8>&quot;click&quot;,</span><span class="function" data-v-c867c7e8>function</span><span class="brackets" data-v-c867c7e8>(e){</span></div><div class="pTwo" data-v-c867c7e8><span class="word" data-v-c867c7e8>e.preventDefault</span><span class="brackets" data-v-c867c7e8>()</span></div><div class="brackets" data-v-c867c7e8>}</div><div data-v-c867c7e8><span class="word" data-v-c867c7e8>form.addEventListener</span><span class="brackets" data-v-c867c7e8>(</span> <span class="src" data-v-c867c7e8>&quot;click&quot;,</span><span class="word" data-v-c867c7e8>ev</span> <span class="function" data-v-c867c7e8>=&gt;</span><span class="word" data-v-c867c7e8>ev.preventDefault</span><span class="brackets" data-v-c867c7e8>())</span></div></div><p class="fz28" data-v-c867c7e8>結論</p><p class="fz28" data-v-c867c7e8>1. 箭頭屬於表達式函數, 不存在函數提升</p><p class="fz28" data-v-c867c7e8>2. 只有一個形參 可省略小括號 ( )</p><p class="fz28" data-v-c867c7e8> 3. 只有一個語句 (一行代碼) 可省略大括號 { } 並自動做為返回值被返回 </p><p class="fz28" data-v-c867c7e8>4. 加括號 ( ) 的函數體 返回 物件字面量 表達式</p><br data-v-c867c7e8><br data-v-c867c7e8><div class="articleCardTitle cor36 fz34" data-v-c867c7e8>箭頭函數參數</div><p class="fz28" data-v-c867c7e8>箭頭函數 沒有 arguments 動態參數</p><p class="fz28" data-v-c867c7e8>有 剩餘參數 ...args</p><div class="bgcVS" data-v-c867c7e8><div class="comment" data-v-c867c7e8>// 利用箭頭函數來求和</div><div data-v-c867c7e8><span class="function" data-v-c867c7e8>const </span><span class="word" data-v-c867c7e8>getSum</span> <span class="then" data-v-c867c7e8>=</span><span class="brackets" data-v-c867c7e8>(</span> <span class="word" data-v-c867c7e8>...arr</span><span class="brackets" data-v-c867c7e8>)</span> <span class="function" data-v-c867c7e8>=&gt;</span><span class="brackets" data-v-c867c7e8>{</span></div><div class="pTwo" data-v-c867c7e8><span class="function" data-v-c867c7e8>let </span> <span class="word" data-v-c867c7e8>sum</span><span class="then" data-v-c867c7e8>=</span> <span class="number" data-v-c867c7e8>0</span></div><div class="pTwo" data-v-c867c7e8><span class="then" data-v-c867c7e8>for </span> <span class="brackets" data-v-c867c7e8>(</span><span class="function" data-v-c867c7e8>let </span> <span class="word" data-v-c867c7e8>i</span><span class="then" data-v-c867c7e8>=</span> <span class="number" data-v-c867c7e8>0</span><span class="then" data-v-c867c7e8>;</span> <span class="word" data-v-c867c7e8>i</span><span class="then" data-v-c867c7e8>＜</span> <span class="word" data-v-c867c7e8>arr.length</span><span class="then" data-v-c867c7e8>;</span> <span class="word" data-v-c867c7e8>i</span><span class="then" data-v-c867c7e8>++</span> <span class="brackets" data-v-c867c7e8>){</span></div><div class="pFou" data-v-c867c7e8><span class="word" data-v-c867c7e8>sum</span> <span class="then" data-v-c867c7e8>+=</span><span class="word" data-v-c867c7e8>arr</span> <span class="brackets" data-v-c867c7e8>[</span><span class="word" data-v-c867c7e8>i</span> <span class="brackets" data-v-c867c7e8>]</span></div><div class="comment" data-v-c867c7e8>// sum = sum + arr [ i ]</div><div class="pTwo brackets" data-v-c867c7e8>}</div><div class="pTwo" data-v-c867c7e8><span class="then" data-v-c867c7e8>return </span> <span class="word" data-v-c867c7e8>sum</span></div><div class="brackets" data-v-c867c7e8>}</div><div data-v-c867c7e8><span class="word" data-v-c867c7e8>getSum</span> <span class="brackets" data-v-c867c7e8>(</span><span class="number" data-v-c867c7e8>2,3</span> <span class="brackets" data-v-c867c7e8>)</span></div></div><div class="articleCardTitle cor36 fz34" data-v-c867c7e8>this 指向</div><table class="fz28" data-v-c867c7e8><tr data-v-c867c7e8><th data-v-c867c7e8><div class="pad20" data-v-c867c7e8>調用方式</div></th><th data-v-c867c7e8><div class="pad20" data-v-c867c7e8>示例</div></th><th data-v-c867c7e8><div class="pad20" data-v-c867c7e8>函數中this指向</div></th></tr><tr data-v-c867c7e8><td data-v-c867c7e8><div class="pad20" data-v-c867c7e8>通過new調用</div></td><td data-v-c867c7e8><div class="pad20" data-v-c867c7e8>mew method()</div></td><td data-v-c867c7e8><div class="pad20" data-v-c867c7e8>新物件</div></td></tr><tr data-v-c867c7e8><td data-v-c867c7e8><div class="pad20" data-v-c867c7e8>直接調用</div></td><td data-v-c867c7e8><div class="pad20" data-v-c867c7e8>method()</div></td><td data-v-c867c7e8><div class="pad20" data-v-c867c7e8>全局對象window</div></td></tr><tr data-v-c867c7e8><td data-v-c867c7e8><div class="pad20" data-v-c867c7e8>通過物件調用</div></td><td data-v-c867c7e8><div class="pad20" data-v-c867c7e8>obj.method()</div></td><td data-v-c867c7e8><div class="pad20" data-v-c867c7e8>前面的物件</div></td></tr><tr data-v-c867c7e8><td data-v-c867c7e8><div class="pad20" data-v-c867c7e8>call.apply.bind</div></td><td data-v-c867c7e8><div class="pad20" data-v-c867c7e8>method.call(ctx)</div></td><td data-v-c867c7e8><div class="pad20" data-v-c867c7e8>第一個參數</div></td></tr></table><div class="articleCardTitle cor36 fz34" data-v-c867c7e8>箭頭函數 this</div><p class="fz28" data-v-c867c7e8>箭頭函數的this指向哪裡?</p><p class="fz28" data-v-c867c7e8>外部的this or (捕獲其上下文中的this)</p><p class="fz28" data-v-c867c7e8> 箭頭函數不創建 this , 他從自己的作用域鏈的上一層沿用 this </p><div class="bgcVS" data-v-c867c7e8><div class="comment" data-v-c867c7e8> // 以前學this指向:誰調用的這個函數,this就指向誰 </div><div data-v-c867c7e8><span class="word" data-v-c867c7e8>console.</span><span class="variable" data-v-c867c7e8>log</span> <span class="brackets" data-v-c867c7e8>(</span><span class="then" data-v-c867c7e8>this</span> <span class="brackets" data-v-c867c7e8>)</span><span class="comment" data-v-c867c7e8>//window</span></div><br data-v-c867c7e8><div data-v-c867c7e8><span class="function" data-v-c867c7e8>function </span><span class="word" data-v-c867c7e8>fn</span> <span class="brackets" data-v-c867c7e8>(){</span></div><div class="pTwo" data-v-c867c7e8><span class="word" data-v-c867c7e8>console.</span><span class="variable" data-v-c867c7e8>log</span> <span class="brackets" data-v-c867c7e8>(</span><span class="then" data-v-c867c7e8>this</span> <span class="brackets" data-v-c867c7e8>)</span><span class="comment" data-v-c867c7e8>//window</span></div><div class="brackets" data-v-c867c7e8>}</div><br data-v-c867c7e8><div data-v-c867c7e8><span class="function" data-v-c867c7e8>const </span><span class="word" data-v-c867c7e8>obj</span> <span class="then" data-v-c867c7e8>=</span><span class="brackets" data-v-c867c7e8>{</span></div><div class="pTwo" data-v-c867c7e8><span class="word" data-v-c867c7e8>uname:</span> <span class="src" data-v-c867c7e8>&quot;wayne&quot;</span></div><div class="pTwo" data-v-c867c7e8><span class="word" data-v-c867c7e8>sayHi:</span><span class="function" data-v-c867c7e8>function </span><span class="brackets" data-v-c867c7e8>(){</span></div><div class="pFou" data-v-c867c7e8><span class="word" data-v-c867c7e8>console.</span><span class="variable" data-v-c867c7e8>log</span> <span class="brackets" data-v-c867c7e8>(</span><span class="then" data-v-c867c7e8>this</span> <span class="brackets" data-v-c867c7e8>)</span><span class="comment" data-v-c867c7e8>// obj</span></div><div class="brackets pTwo" data-v-c867c7e8>}</div><div class="brackets" data-v-c867c7e8>}</div><div data-v-c867c7e8><span class="word" data-v-c867c7e8>obj.sayHi</span><span class="brackets" data-v-c867c7e8>()</span></div><div class="comment" data-v-c867c7e8>// sayHi() 是 obj 調用的</div><div class="comment" data-v-c867c7e8>// this 指向 obj</div><br data-v-c867c7e8><br data-v-c867c7e8><div class="comment" data-v-c867c7e8>// 箭頭 this指向 上一層作用域的 this 指向</div><div data-v-c867c7e8><span class="function" data-v-c867c7e8>const </span> <span class="word" data-v-c867c7e8>fn</span><span class="then" data-v-c867c7e8>=</span> <span class="brackets" data-v-c867c7e8>()</span><span class="function" data-v-c867c7e8>=&gt;</span> <span class="brackets" data-v-c867c7e8>{</span></div><div class="pTwo" data-v-c867c7e8><span class="word" data-v-c867c7e8>console.</span><span class="variable" data-v-c867c7e8>log</span> <span class="brackets" data-v-c867c7e8>(</span><span class="then" data-v-c867c7e8>this</span> <span class="brackets" data-v-c867c7e8>)</span><span class="comment" data-v-c867c7e8>//window</span></div><div class="brackets" data-v-c867c7e8>}</div><span class="word" data-v-c867c7e8>fn</span> <span class="brackets" data-v-c867c7e8>()</span><br data-v-c867c7e8><div data-v-c867c7e8><span class="function" data-v-c867c7e8>const </span><span class="word" data-v-c867c7e8>obj</span> <span class="then" data-v-c867c7e8>=</span><span class="brackets" data-v-c867c7e8>{</span></div><div class="pTwo" data-v-c867c7e8><span class="word" data-v-c867c7e8>uname:</span> <span class="src" data-v-c867c7e8>&quot;wayne&quot;</span></div><div class="pTwo" data-v-c867c7e8><span class="word" data-v-c867c7e8>sayHi:</span><span class="brackets" data-v-c867c7e8>()</span><span class="function" data-v-c867c7e8>=&gt; </span><span class="brackets" data-v-c867c7e8>{</span></div><div class="pFou" data-v-c867c7e8><span class="word" data-v-c867c7e8>console.</span><span class="variable" data-v-c867c7e8>log</span> <span class="brackets" data-v-c867c7e8>(</span><span class="then" data-v-c867c7e8>this</span> <span class="brackets" data-v-c867c7e8>)</span><span class="comment" data-v-c867c7e8>// window</span></div><div class="comment pFou" data-v-c867c7e8>// 1. { 裡面沒有 this }</div><div class="comment pFou" data-v-c867c7e8>// 2. 往上一層 作用域找</div><div class="comment pFou" data-v-c867c7e8> // 3. obj.sayHi() 是 window.obj.sayHi() </div><div class="comment pFou" data-v-c867c7e8>// . 是window來調用的</div><div class="comment pFou" data-v-c867c7e8>// this 指向 window</div><div class="brackets pTwo" data-v-c867c7e8>}</div><div class="brackets" data-v-c867c7e8>}</div><div data-v-c867c7e8><span class="word" data-v-c867c7e8>obj.sayHi</span><span class="brackets" data-v-c867c7e8>()</span></div><br data-v-c867c7e8><br data-v-c867c7e8><div data-v-c867c7e8><span class="function" data-v-c867c7e8>const </span><span class="word" data-v-c867c7e8>obj</span> <span class="then" data-v-c867c7e8>=</span><span class="brackets" data-v-c867c7e8>{</span></div><div class="pTwo" data-v-c867c7e8><span class="word" data-v-c867c7e8>uname:</span> <span class="src" data-v-c867c7e8>&quot;wayne&quot;</span></div><div class="" data-v-c867c7e8><div class="pTwo" data-v-c867c7e8><span class="word" data-v-c867c7e8>sayHi:</span><span class="function" data-v-c867c7e8>function </span><span class="brackets" data-v-c867c7e8>(){</span></div><div class="pFou" data-v-c867c7e8><span class="word" data-v-c867c7e8>console.</span><span class="variable" data-v-c867c7e8>log</span><span class="brackets" data-v-c867c7e8>(</span> <span class="then" data-v-c867c7e8>this</span><span class="brackets" data-v-c867c7e8>)</span><span class="comment" data-v-c867c7e8>// obj</span></div><div class="pFou" data-v-c867c7e8><span class="function" data-v-c867c7e8>let </span> <span class="word" data-v-c867c7e8>i</span><span class="then" data-v-c867c7e8>=</span> <span class="number" data-v-c867c7e8>10</span></div><div class="" data-v-c867c7e8><div class="pFou" data-v-c867c7e8><span class="function" data-v-c867c7e8>const </span><span class="word" data-v-c867c7e8>count</span> <span class="then" data-v-c867c7e8>=</span><span class="brackets" data-v-c867c7e8>()</span><span class="function" data-v-c867c7e8>=&gt;</span><span class="brackets" data-v-c867c7e8>{</span></div><div class="pSix" data-v-c867c7e8><span class="word" data-v-c867c7e8>console.</span><span class="variable" data-v-c867c7e8>log</span><span class="brackets" data-v-c867c7e8>(</span> <span class="then" data-v-c867c7e8>this</span><span class="brackets" data-v-c867c7e8>)</span><span class="comment" data-v-c867c7e8>// obj</span></div><div class="brackets pFou" data-v-c867c7e8>}</div><div class="pFou" data-v-c867c7e8><span class="word" data-v-c867c7e8>count</span><span class="brackets" data-v-c867c7e8>()</span></div></div><div class="brackets pTwo" data-v-c867c7e8>}</div></div><div class="brackets" data-v-c867c7e8>}</div><div data-v-c867c7e8><span class="word" data-v-c867c7e8>obj.sayHi</span><span class="brackets" data-v-c867c7e8>()</span></div><br data-v-c867c7e8><br data-v-c867c7e8><div data-v-c867c7e8><span class="function" data-v-c867c7e8>const </span><span class="word" data-v-c867c7e8>obj</span> <span class="then" data-v-c867c7e8>=</span><span class="brackets" data-v-c867c7e8>{</span></div><div class="pTwo" data-v-c867c7e8><span class="word" data-v-c867c7e8>uname:</span> <span class="src" data-v-c867c7e8>&quot;wayne&quot;</span></div><div class="bor1" data-v-c867c7e8><span class="comment" data-v-c867c7e8>// 這層函數 this 指向他的調用者 obj</span><div class="pTwo" data-v-c867c7e8><span class="word" data-v-c867c7e8>sayHi:</span><span class="function" data-v-c867c7e8>function </span><span class="brackets" data-v-c867c7e8>(){</span></div><div class="pFou" data-v-c867c7e8><span class="word" data-v-c867c7e8>console.</span><span class="variable" data-v-c867c7e8>log</span><span class="brackets" data-v-c867c7e8>(</span> <span class="then" data-v-c867c7e8>this</span><span class="brackets" data-v-c867c7e8>)</span><span class="comment" data-v-c867c7e8>// obj</span></div><div class="pFou" data-v-c867c7e8><span class="function" data-v-c867c7e8>let </span> <span class="word" data-v-c867c7e8>i</span><span class="then" data-v-c867c7e8>=</span> <span class="number" data-v-c867c7e8>10</span></div><div class="bor2" data-v-c867c7e8><span class="comment" data-v-c867c7e8>// 這層沒有 this 往上一層找 ^</span><div class="pTwo" data-v-c867c7e8><span class="function" data-v-c867c7e8>const </span><span class="word" data-v-c867c7e8>count</span> <span class="then" data-v-c867c7e8>=</span><span class="brackets" data-v-c867c7e8>()</span><span class="function" data-v-c867c7e8>=&gt;</span><span class="brackets" data-v-c867c7e8>{</span></div><div class="pFou" data-v-c867c7e8><span class="word" data-v-c867c7e8>console.</span><span class="variable" data-v-c867c7e8>log</span><span class="brackets" data-v-c867c7e8>(</span> <span class="then" data-v-c867c7e8>this</span><span class="brackets" data-v-c867c7e8>)</span><span class="comment" data-v-c867c7e8>// obj</span></div><div class="brackets pTwo" data-v-c867c7e8>}</div><div class="pTwo" data-v-c867c7e8><span class="word" data-v-c867c7e8>count</span><span class="brackets" data-v-c867c7e8>()</span></div></div><div class="brackets pTwo" data-v-c867c7e8>}</div></div><div class="brackets" data-v-c867c7e8>}</div><div data-v-c867c7e8><span class="word" data-v-c867c7e8>obj.sayHi</span><span class="brackets" data-v-c867c7e8>()</span></div><br data-v-c867c7e8><br data-v-c867c7e8><div data-v-c867c7e8><span class="function" data-v-c867c7e8>const </span><span class="word" data-v-c867c7e8>btn</span> <span class="then" data-v-c867c7e8>=</span><span class="word" data-v-c867c7e8>document.querySelector</span><span class="brackets" data-v-c867c7e8>(</span> <span class="src" data-v-c867c7e8>&quot;.btn&quot;</span><span class="brackets" data-v-c867c7e8>)</span></div><span class="comment" data-v-c867c7e8>//普通函數指DOM對象</span><div data-v-c867c7e8><span class="word" data-v-c867c7e8>btn.addEventListener</span><span class="brackets" data-v-c867c7e8>(</span> <span class="src" data-v-c867c7e8>&quot;click&quot;,</span><span class="function" data-v-c867c7e8>function</span><span class="brackets" data-v-c867c7e8>(){</span></div><div class="pTwo" data-v-c867c7e8><span class="word" data-v-c867c7e8>console.</span><span class="variable" data-v-c867c7e8>log</span> <span class="brackets" data-v-c867c7e8>(</span><span class="then" data-v-c867c7e8>this</span> <span class="brackets" data-v-c867c7e8>)</span><span class="comment" data-v-c867c7e8>// btn</span></div><div class="brackets" data-v-c867c7e8>}</div><div data-v-c867c7e8><span class="comment" data-v-c867c7e8>// 箭頭函數 此時 this 指向 window</span></div><div data-v-c867c7e8><span class="word" data-v-c867c7e8>btn.addEventListener</span><span class="brackets" data-v-c867c7e8>(</span> <span class="src" data-v-c867c7e8>&quot;click&quot;,</span><span class="brackets" data-v-c867c7e8>()</span><span class="function" data-v-c867c7e8>=&gt; </span><span class="brackets" data-v-c867c7e8>{</span></div><div class="pTwo" data-v-c867c7e8><span class="word" data-v-c867c7e8>console.</span><span class="variable" data-v-c867c7e8>log</span> <span class="brackets" data-v-c867c7e8>(</span><span class="then" data-v-c867c7e8>this</span> <span class="brackets" data-v-c867c7e8>)</span><span class="comment" data-v-c867c7e8>// window</span></div><div class="brackets" data-v-c867c7e8>})</div></div><p class="fz28" data-v-c867c7e8> 箭頭函式(arrow function)的 this 不因為使用 call() / apply() / bind() 方法而被修改 </p><p class="fz28" data-v-c867c7e8></p><p class="fz28" data-v-c867c7e8></p><p class="fz28" data-v-c867c7e8></p><p class="fz28" data-v-c867c7e8></p><p class="fz28" data-v-c867c7e8></p><p class="fz28" data-v-c867c7e8></p><p class="fz28" data-v-c867c7e8></p><p class="fz28" data-v-c867c7e8></p><p class="fz28" data-v-c867c7e8></p><p class="fz28" data-v-c867c7e8></p><p class="fz28" data-v-c867c7e8></p><p class="fz28" data-v-c867c7e8></p><p class="fz28" data-v-c867c7e8></p><p class="fz28" data-v-c867c7e8></p><p class="fz28" data-v-c867c7e8></p><p class="fz28" data-v-c867c7e8></p><p class="fz28" data-v-c867c7e8></p><p class="fz28" data-v-c867c7e8></p><p class="fz28" data-v-c867c7e8></p><p class="fz28" data-v-c867c7e8></p><p class="fz28" data-v-c867c7e8></p><p class="fz28" data-v-c867c7e8></p><p class="fz28" data-v-c867c7e8></p><p class="fz28" data-v-c867c7e8></p><p class="fz28" data-v-c867c7e8></p><p class="fz28" data-v-c867c7e8></p><p class="fz28" data-v-c867c7e8></p>',63),ff=as(()=>n("div",{class:"toTopButton"},[n("div",{class:"disCen"},"___"),n("div",{class:"disCen"},"▲")],-1)),of=[ff],uf=as(()=>n("div",{class:"toBotButton"},[n("div",{class:"disCen"},"▼"),n("div",{class:"disCen"},"￣")],-1)),wf=[uf],mf={__name:"JsPageThreeTwo",setup(a){const s=ba(!1);window.addEventListener("scroll",function(){s.value=window.scrollY>0});function d(){window.scrollTo({top:0,left:0,behavior:"smooth"})}function v(){window.scrollTo({top:999999,left:0,behavior:"smooth"})}function t(e){window.scrollTo({top:document.getElementById(`${e}`).offsetTop,behavior:"smooth"})}return(e,c)=>{const l=qa("dir");return aa(),ta(G,null,[n("section",null,[n("div",Bi,[n("div",Di,[n("div",Ji,[n("div",{onClick:c[0]||(c[0]=p=>t("twofunction001")),class:"leftNavText"}," 函數提升 "),n("div",{onClick:c[1]||(c[1]=p=>t("twofunction002")),class:"leftNavText"}," 形參實參 "),n("div",{onClick:c[2]||(c[2]=p=>t("twofunction003")),class:"leftNavText"}," 動態參數 "),n("div",{onClick:c[3]||(c[3]=p=>t("twofunction004")),class:"leftNavText"}," 剩餘參數 "),n("div",{onClick:c[4]||(c[4]=p=>t("twofunction005")),class:"leftNavText"}," 展開運算符 "),n("div",{onClick:c[5]||(c[5]=p=>t("twofunction006")),class:"leftNavText"}," 箭頭函數 "),n("div",{onClick:c[6]||(c[6]=p=>t("")),class:"leftNavText"})])])]),n("div",Wi,[n("div",Ui,[n("div",Ki,[Xi,n("div",Yi,[Gi,k(l,{class:"pTwo"},{default:S(()=>[Qi,fa(),Zi,af]),_:1}),sf]),df,n("div",tf,[cf,k(l,null,{default:S(()=>[vf,nf,fa(),ef,pf,lf]),_:1}),bf]),rf])])])]),n("div",null,[W(k(B,{name:"fade",tag:"div"},{default:S(()=>[n("div",{onClick:d,class:"toTop"},of)]),_:1},512),[[U,s.value]]),W(k(B,{name:"fade",tag:"div"},{default:S(()=>[n("div",{onClick:v,class:"toBot"},wf)]),_:1},512),[[U,s.value]])])],64)}}},hf=pa(mf,[["__scopeId","data-v-c867c7e8"]]);const Tn=a=>(wa("data-v-6614937f"),a=a(),ma(),a),kf={class:"leftNav"},gf={class:"leftNavContainer"},zf={class:"leftNavLayout"},Tf=K('<div class="Main" data-v-6614937f><div class="mainContainer" data-v-6614937f><div class="mainLayout" data-v-6614937f><br data-v-6614937f><br data-v-6614937f><p class="fz28" data-v-6614937f>總分總</p><p class="fz28" data-v-6614937f>1.要講哪個知識點</p><p class="fz28" data-v-6614937f>2.細講</p><p class="fz28" data-v-6614937f>3.總結</p><br data-v-6614937f><br data-v-6614937f><div id="threeda001" class="articleCardTitle cor36 fz34" data-v-6614937f> 3.1 數組解構 </div><p class="fz28" data-v-6614937f>解構賦值允許從物件或陣列中提取值並將其賦給變數</p><br data-v-6614937f><p class="fz28" data-v-6614937f> 數組解構是將數組的單元值快速批量賦值給一系列變量的簡潔語法 </p><br data-v-6614937f><p class="fz28" data-v-6614937f>1. 是什麼? _ 語法</p><p class="fz28" data-v-6614937f>2. 做什麼? _ 批量賦值給變量</p><p class="fz28" data-v-6614937f>3. 誰賦值給變量? _ 單元值</p><p class="fz28" data-v-6614937f>4. 單元值? _ 數組原素</p><div class="dis" data-v-6614937f><div class="bgcVS w100" data-v-6614937f><div data-v-6614937f><span class="function" data-v-6614937f>const </span><span class="word" data-v-6614937f>arr</span> <span class="then" data-v-6614937f>=</span><span class="brackets" data-v-6614937f>[</span><span class="number" data-v-6614937f>100,60,80</span><span class="brackets" data-v-6614937f>]</span></div><div data-v-6614937f><span class="function" data-v-6614937f>const </span><span class="word" data-v-6614937f>max</span> <span class="then" data-v-6614937f>=</span><span class="word" data-v-6614937f>arr</span> <span class="brackets" data-v-6614937f>[</span><span class="number" data-v-6614937f>0</span> <span class="brackets" data-v-6614937f>]</span></div><div data-v-6614937f><span class="function" data-v-6614937f>const </span><span class="word" data-v-6614937f>min</span> <span class="then" data-v-6614937f>=</span><span class="word" data-v-6614937f>arr</span> <span class="brackets" data-v-6614937f>[</span><span class="number" data-v-6614937f>1</span> <span class="brackets" data-v-6614937f>]</span></div><div data-v-6614937f><span class="function" data-v-6614937f>const </span><span class="word" data-v-6614937f>avg</span> <span class="then" data-v-6614937f>=</span><span class="word" data-v-6614937f>arr</span> <span class="brackets" data-v-6614937f>[</span><span class="number" data-v-6614937f>3</span> <span class="brackets" data-v-6614937f>]</span></div><div data-v-6614937f><span class="word" data-v-6614937f>console.</span><span class="variable" data-v-6614937f>log</span><span class="brackets" data-v-6614937f>(</span> <span class="word" data-v-6614937f>max</span><span class="brackets" data-v-6614937f>)</span></div><div data-v-6614937f><span class="word" data-v-6614937f>console.</span><span class="variable" data-v-6614937f>log</span><span class="brackets" data-v-6614937f>(</span> <span class="word" data-v-6614937f>min</span><span class="brackets" data-v-6614937f>)</span></div><div data-v-6614937f><span class="word" data-v-6614937f>console.</span><span class="variable" data-v-6614937f>log</span><span class="brackets" data-v-6614937f>(</span> <span class="word" data-v-6614937f>avg</span><span class="brackets" data-v-6614937f>)</span></div></div><div class="bgcVSMid" data-v-6614937f>&gt;</div><div class="bgcVS w100" data-v-6614937f><div data-v-6614937f><span class="function" data-v-6614937f>const </span><span class="brackets" data-v-6614937f>[</span><span class="word" data-v-6614937f>max,min,avg</span><span class="brackets" data-v-6614937f>]</span> <span class="then" data-v-6614937f>=</span><span class="brackets" data-v-6614937f>[</span><span class="number" data-v-6614937f>100,60,80</span><span class="brackets" data-v-6614937f>]</span></div><div data-v-6614937f><span class="word" data-v-6614937f>console.</span><span class="variable" data-v-6614937f>log</span><span class="brackets" data-v-6614937f>(</span> <span class="word" data-v-6614937f>max</span><span class="brackets" data-v-6614937f>)</span></div><div data-v-6614937f><span class="word" data-v-6614937f>console.</span><span class="variable" data-v-6614937f>log</span><span class="brackets" data-v-6614937f>(</span> <span class="word" data-v-6614937f>min</span><span class="brackets" data-v-6614937f>)</span></div><div data-v-6614937f><span class="word" data-v-6614937f>console.</span><span class="variable" data-v-6614937f>log</span><span class="brackets" data-v-6614937f>(</span> <span class="word" data-v-6614937f>avg</span><span class="brackets" data-v-6614937f>)</span></div></div></div><div class="bgcVS" data-v-6614937f><div data-v-6614937f><span class="function" data-v-6614937f>const </span><span class="word" data-v-6614937f>arr</span> <span class="then" data-v-6614937f>=</span><span class="brackets" data-v-6614937f>[</span><span class="number" data-v-6614937f>100,60,80</span><span class="brackets" data-v-6614937f>]</span></div><div data-v-6614937f><span class="function" data-v-6614937f>const </span><span class="brackets" data-v-6614937f>[</span><span class="word" data-v-6614937f>max,min,avg</span><span class="brackets" data-v-6614937f>]</span> <span class="then" data-v-6614937f>=</span><span class="word" data-v-6614937f>arr</span></div><span class="comment" data-v-6614937f>相當於 </span><div data-v-6614937f><span class="function" data-v-6614937f>const </span><span class="word" data-v-6614937f>max</span> <span class="then" data-v-6614937f>=</span><span class="word" data-v-6614937f>arr</span> <span class="brackets" data-v-6614937f>[</span><span class="number" data-v-6614937f>0</span> <span class="brackets" data-v-6614937f>]</span></div><div data-v-6614937f><span class="function" data-v-6614937f>const </span><span class="word" data-v-6614937f>min</span> <span class="then" data-v-6614937f>=</span><span class="word" data-v-6614937f>arr</span> <span class="brackets" data-v-6614937f>[</span><span class="number" data-v-6614937f>1</span> <span class="brackets" data-v-6614937f>]</span></div><div data-v-6614937f><span class="function" data-v-6614937f>const </span><span class="word" data-v-6614937f>avg</span> <span class="then" data-v-6614937f>=</span><span class="word" data-v-6614937f>arr</span> <span class="brackets" data-v-6614937f>[</span><span class="number" data-v-6614937f>3</span> <span class="brackets" data-v-6614937f>]</span></div><br data-v-6614937f><br data-v-6614937f><p data-v-6614937f>應用場景: 一開始有字串 轉成 變量</p><div data-v-6614937f><span class="function" data-v-6614937f>const </span><span class="word" data-v-6614937f>info</span> <span class="then" data-v-6614937f>=</span><span class="src" data-v-6614937f>&quot;wayne,18,123456&quot;</span></div><div data-v-6614937f><span class="comment" data-v-6614937f>//用逗號轉化成數組</span></div><div data-v-6614937f><span class="function" data-v-6614937f>const </span><span class="word" data-v-6614937f>person</span> <span class="then" data-v-6614937f>=</span><span class="word" data-v-6614937f>info</span><span class="variable" data-v-6614937f>.split</span><span class="brackets" data-v-6614937f>(</span> <span class="src" data-v-6614937f>&quot;,&quot;</span><span class="brackets" data-v-6614937f>)</span></div><div data-v-6614937f><span class="comment" data-v-6614937f>//解構賦值轉成變量</span></div><div data-v-6614937f><span class="function" data-v-6614937f>const </span><span class="brackets" data-v-6614937f>[</span><span class="word" data-v-6614937f>name,age,id</span><span class="brackets" data-v-6614937f>]</span> <span class="then" data-v-6614937f>=</span><span class="word" data-v-6614937f>person</span></div><div data-v-6614937f><span class="word" data-v-6614937f>console</span><span class="variable" data-v-6614937f>.log</span><span class="brackets" data-v-6614937f>(</span><span class="word" data-v-6614937f>name,age,id</span><span class="brackets" data-v-6614937f>)</span></div><br data-v-6614937f><br data-v-6614937f><div class="comment" data-v-6614937f>//交換2變量</div><div class="dis" data-v-6614937f><div class="w100" data-v-6614937f><div data-v-6614937f><span class="function" data-v-6614937f>const </span><span class="word" data-v-6614937f>a</span> <span class="then" data-v-6614937f>=</span><span class="number" data-v-6614937f>1</span></div><div data-v-6614937f><span class="function" data-v-6614937f>const </span><span class="word" data-v-6614937f>b</span> <span class="then" data-v-6614937f>=</span><span class="number" data-v-6614937f>2</span><span class="comment" data-v-6614937f>; . . . // 一定要加分號</span></div><div data-v-6614937f><span class="brackets" data-v-6614937f>[</span> <span class="word" data-v-6614937f>b,a</span><span class="brackets" data-v-6614937f>]</span> <span class="then" data-v-6614937f>=</span><span class="brackets" data-v-6614937f>[</span> <span class="word" data-v-6614937f>a,b</span><span class="brackets" data-v-6614937f>] </span></div><div data-v-6614937f><span class="word" data-v-6614937f>console.log</span><span class="brackets" data-v-6614937f>(</span> <span class="word" data-v-6614937f>a,b</span><span class="brackets" data-v-6614937f>)</span></div></div><div class="w100" data-v-6614937f><div class="comment" data-v-6614937f>//以前方法</div><div data-v-6614937f><span class="function" data-v-6614937f>let </span><span class="word" data-v-6614937f>a</span> <span class="then" data-v-6614937f>=</span><span class="number" data-v-6614937f>1</span></div><div data-v-6614937f><span class="function" data-v-6614937f>let </span><span class="word" data-v-6614937f>b</span> <span class="then" data-v-6614937f>=</span><span class="number" data-v-6614937f>2</span></div><div data-v-6614937f><span class="function" data-v-6614937f>let </span><span class="word" data-v-6614937f>temp</span> <span class="then" data-v-6614937f>=</span><span class="word" data-v-6614937f>a</span></div><div data-v-6614937f><span class="word" data-v-6614937f>a</span> <span class="then" data-v-6614937f>=</span><span class="word" data-v-6614937f>b</span></div><div data-v-6614937f><span class="word" data-v-6614937f>b</span> <span class="then" data-v-6614937f>=</span><span class="word" data-v-6614937f>temp</span></div></div></div><br data-v-6614937f><br data-v-6614937f><p data-v-6614937f>當變量多 單元值少的情況</p><div data-v-6614937f><span class="function" data-v-6614937f>const </span><span class="brackets" data-v-6614937f>[</span> <span class="word" data-v-6614937f>a,b,c,d</span><span class="brackets" data-v-6614937f>]</span> <span class="then" data-v-6614937f>=</span><span class="brackets" data-v-6614937f>[</span> <span class="number" data-v-6614937f>1,2,3</span><span class="brackets" data-v-6614937f>]</span></div><div data-v-6614937f><span class="word" data-v-6614937f>console.</span><span class="variable" data-v-6614937f>log</span> <span class="brackets" data-v-6614937f>(</span><span class="word" data-v-6614937f>a</span> <span class="brackets" data-v-6614937f>)</span><span class="comment" data-v-6614937f>// 1</span></div><div data-v-6614937f><span class="word" data-v-6614937f>console.</span><span class="variable" data-v-6614937f>log</span> <span class="brackets" data-v-6614937f>(</span><span class="word" data-v-6614937f>b</span> <span class="brackets" data-v-6614937f>)</span><span class="comment" data-v-6614937f>// 2</span></div><div data-v-6614937f><span class="word" data-v-6614937f>console.</span><span class="variable" data-v-6614937f>log</span> <span class="brackets" data-v-6614937f>(</span><span class="word" data-v-6614937f>c</span> <span class="brackets" data-v-6614937f>)</span><span class="comment" data-v-6614937f>// 3</span></div><div data-v-6614937f><span class="word" data-v-6614937f>console.</span><span class="variable" data-v-6614937f>log</span> <span class="brackets" data-v-6614937f>(</span><span class="word" data-v-6614937f>d</span> <span class="brackets" data-v-6614937f>)</span><span class="comment" data-v-6614937f>// undefined</span></div><br data-v-6614937f><br data-v-6614937f><p data-v-6614937f>當變量多 單元值少的情況</p><div data-v-6614937f><span class="function" data-v-6614937f>const </span><span class="brackets" data-v-6614937f>[</span> <span class="word" data-v-6614937f>a,b</span><span class="brackets" data-v-6614937f>]</span> <span class="then" data-v-6614937f>=</span><span class="brackets" data-v-6614937f>[</span> <span class="number" data-v-6614937f>1,2,3</span><span class="brackets" data-v-6614937f>]</span></div><div data-v-6614937f><span class="word" data-v-6614937f>console.</span><span class="variable" data-v-6614937f>log</span> <span class="brackets" data-v-6614937f>(</span><span class="word" data-v-6614937f>a</span> <span class="brackets" data-v-6614937f>)</span><span class="comment" data-v-6614937f>// 1</span></div><div data-v-6614937f><span class="word" data-v-6614937f>console.</span><span class="variable" data-v-6614937f>log</span> <span class="brackets" data-v-6614937f>(</span><span class="word" data-v-6614937f>b</span> <span class="brackets" data-v-6614937f>)</span><span class="comment" data-v-6614937f>// 2</span></div><br data-v-6614937f><br data-v-6614937f><p data-v-6614937f>用剩餘參數解決 變量少 單元值多的情況</p><div data-v-6614937f><span class="function" data-v-6614937f>const </span><span class="brackets" data-v-6614937f>[</span><span class="word" data-v-6614937f>a,b,...c</span><span class="brackets" data-v-6614937f>]</span> <span class="then" data-v-6614937f>=</span><span class="brackets" data-v-6614937f>[</span><span class="number" data-v-6614937f>1,2,3,4</span><span class="brackets" data-v-6614937f>]</span></div><div data-v-6614937f><span class="word" data-v-6614937f>console.</span><span class="variable" data-v-6614937f>log</span> <span class="brackets" data-v-6614937f>(</span><span class="word" data-v-6614937f>a</span> <span class="brackets" data-v-6614937f>)</span><span class="comment" data-v-6614937f>// 1</span></div><div data-v-6614937f><span class="word" data-v-6614937f>console.</span><span class="variable" data-v-6614937f>log</span> <span class="brackets" data-v-6614937f>(</span><span class="word" data-v-6614937f>b</span> <span class="brackets" data-v-6614937f>)</span><span class="comment" data-v-6614937f>// 2</span></div><div data-v-6614937f><span class="word" data-v-6614937f>console.</span><span class="variable" data-v-6614937f>log</span> <span class="brackets" data-v-6614937f>(</span><span class="word" data-v-6614937f>c</span> <span class="brackets" data-v-6614937f>)</span><span class="comment" data-v-6614937f>// [3,4] //真陣列</span></div><br data-v-6614937f><br data-v-6614937f><p data-v-6614937f>防止有undefined 傳遞單元值的情況, 可以設默認值:</p><div data-v-6614937f><span class="function" data-v-6614937f>const </span><span class="brackets" data-v-6614937f>[</span><span class="word" data-v-6614937f>a</span> <span class="then" data-v-6614937f>=</span><span class="number" data-v-6614937f>0,</span> <span class="word" data-v-6614937f>b</span><span class="then" data-v-6614937f>=</span> <span class="number" data-v-6614937f>0</span><span class="brackets" data-v-6614937f>]</span> <span class="then" data-v-6614937f>=</span><span class="brackets" data-v-6614937f>[</span><span class="number" data-v-6614937f>1,2</span><span class="brackets" data-v-6614937f>]</span></div><div data-v-6614937f><span class="word" data-v-6614937f>console.</span><span class="variable" data-v-6614937f>log</span> <span class="brackets" data-v-6614937f>(</span><span class="word" data-v-6614937f>a</span> <span class="brackets" data-v-6614937f>)</span><span class="comment" data-v-6614937f>// 1</span></div><div data-v-6614937f><span class="word" data-v-6614937f>console.</span><span class="variable" data-v-6614937f>log</span> <span class="brackets" data-v-6614937f>(</span><span class="word" data-v-6614937f>b</span> <span class="brackets" data-v-6614937f>)</span><span class="comment" data-v-6614937f>// 2</span></div><br data-v-6614937f><br data-v-6614937f><p data-v-6614937f>按需導入賦值</p><div data-v-6614937f><span class="function" data-v-6614937f>const </span><span class="brackets" data-v-6614937f>[</span> <span class="word" data-v-6614937f>a,b, ,d</span><span class="brackets" data-v-6614937f>]</span> <span class="then" data-v-6614937f>=</span><span class="brackets" data-v-6614937f>[</span><span class="number" data-v-6614937f>1,2,3,4</span><span class="brackets" data-v-6614937f>]</span></div><div data-v-6614937f><span class="word" data-v-6614937f>console.</span><span class="variable" data-v-6614937f>log</span> <span class="brackets" data-v-6614937f>(</span><span class="word" data-v-6614937f>a</span> <span class="brackets" data-v-6614937f>)</span><span class="comment" data-v-6614937f>// 1</span></div><div data-v-6614937f><span class="word" data-v-6614937f>console.</span><span class="variable" data-v-6614937f>log</span> <span class="brackets" data-v-6614937f>(</span><span class="word" data-v-6614937f>b</span> <span class="brackets" data-v-6614937f>)</span><span class="comment" data-v-6614937f>// 2</span></div><div data-v-6614937f><span class="word" data-v-6614937f>console.</span><span class="variable" data-v-6614937f>log</span> <span class="brackets" data-v-6614937f>(</span><span class="word" data-v-6614937f>d</span> <span class="brackets" data-v-6614937f>)</span><span class="comment" data-v-6614937f>// 4</span></div><br data-v-6614937f><br data-v-6614937f><p data-v-6614937f>多維數組</p><div data-v-6614937f><span class="word" data-v-6614937f>const</span> <span class="word" data-v-6614937f>arr</span><span class="then" data-v-6614937f>=</span> <span class="brackets" data-v-6614937f>[</span><span class="number" data-v-6614937f>1,2,</span> <span class="brackets" data-v-6614937f>[</span><span class="number" data-v-6614937f>3,4</span> <span class="brackets" data-v-6614937f>] ]</span></div><br data-v-6614937f><br data-v-6614937f><p data-v-6614937f>支持多維數組解構</p><div data-v-6614937f><div data-v-6614937f><span class="function" data-v-6614937f>const </span><span class="brackets" data-v-6614937f>[</span> <span class="word" data-v-6614937f>a,b,c</span><span class="brackets" data-v-6614937f>]</span><span class="then" data-v-6614937f>=</span> <span class="brackets" data-v-6614937f>[</span><span class="number" data-v-6614937f>1,2,</span><span class="brackets" data-v-6614937f>[</span> <span class="number" data-v-6614937f>3,4</span><span class="brackets" data-v-6614937f>] ]</span></div><div data-v-6614937f><span class="word" data-v-6614937f>console.</span><span class="variable" data-v-6614937f>log</span><span class="brackets" data-v-6614937f>(</span> <span class="word" data-v-6614937f>c</span><span class="brackets" data-v-6614937f>)</span><span class="comment" data-v-6614937f>// [3,4] </span></div><br data-v-6614937f><div data-v-6614937f><span class="function" data-v-6614937f>const </span><span class="brackets" data-v-6614937f>[</span> <span class="word" data-v-6614937f>a,b</span><span class="brackets" data-v-6614937f>[</span> <span class="word" data-v-6614937f>c,d</span><span class="brackets" data-v-6614937f>] ]</span><span class="then" data-v-6614937f>=</span> <span class="brackets" data-v-6614937f>[</span><span class="number" data-v-6614937f>1,2,</span><span class="brackets" data-v-6614937f>[</span> <span class="number" data-v-6614937f>3,4</span><span class="brackets" data-v-6614937f>] ]</span></div><div data-v-6614937f><span class="word" data-v-6614937f>console.</span><span class="variable" data-v-6614937f>log</span><span class="brackets" data-v-6614937f>(</span> <span class="word" data-v-6614937f>a</span><span class="brackets" data-v-6614937f>)</span><span class="comment" data-v-6614937f>// 1</span></div><div data-v-6614937f><span class="word" data-v-6614937f>console.</span><span class="variable" data-v-6614937f>log</span><span class="brackets" data-v-6614937f>(</span> <span class="word" data-v-6614937f>b</span><span class="brackets" data-v-6614937f>)</span><span class="comment" data-v-6614937f>// 2</span></div><div data-v-6614937f><span class="word" data-v-6614937f>console.</span><span class="variable" data-v-6614937f>log</span><span class="brackets" data-v-6614937f>(</span> <span class="word" data-v-6614937f>c</span><span class="brackets" data-v-6614937f>)</span><span class="comment" data-v-6614937f>// 3</span></div><div data-v-6614937f><span class="word" data-v-6614937f>console.</span><span class="variable" data-v-6614937f>log</span><span class="brackets" data-v-6614937f>(</span> <span class="word" data-v-6614937f>d</span><span class="brackets" data-v-6614937f>)</span><span class="comment" data-v-6614937f>// 4</span></div></div></div><div id="threeda002" class="articleCardTitle cor36 fz34" data-v-6614937f> 3.2 物件解構 </div><p class="fz28" data-v-6614937f> 物件解構是將物件屬性和方法快速批量賦值給一系列變量的簡潔語法 </p><div class="bgcVS" data-v-6614937f><p class="comment" data-v-6614937f>1. 變量名 (左) 和 屬姓名 (右) 要一樣</p><p class="comment" data-v-6614937f>2. 解構的變量名 不要和 外面的 變量名衝突</p><p class="comment" data-v-6614937f>3. 變量名 (左) 可以重新改名</p><br data-v-6614937f><div data-v-6614937f><span class="function" data-v-6614937f>const </span><span class="word" data-v-6614937f>person</span> <span class="then" data-v-6614937f>=</span><span class="brackets" data-v-6614937f>{</span></div><div class="padTwo VSL" data-v-6614937f><span class="word" data-v-6614937f>name:</span> <span class="src" data-v-6614937f>&quot;wayne&quot;</span><span class="then" data-v-6614937f>,</span><div data-v-6614937f><span class="word" data-v-6614937f>age:</span> <span class="number" data-v-6614937f>18,</span></div><div data-v-6614937f><span class="word" data-v-6614937f>city:</span><span class="src" data-v-6614937f>&quot;taipei&quot;</span></div><div data-v-6614937f></div></div><div data-v-6614937f><span class="brackets" data-v-6614937f>};</span></div><br data-v-6614937f><div data-v-6614937f><span class="comment" data-v-6614937f>//const name=person.name</span></div><div data-v-6614937f><span class="comment" data-v-6614937f>//const age=person.age</span></div><div data-v-6614937f><span class="function" data-v-6614937f>const </span><span class="brackets" data-v-6614937f>{</span> <span class="word" data-v-6614937f>name,</span><span class="word" data-v-6614937f>age</span> <span class="word" data-v-6614937f>,city</span><span class="brackets" data-v-6614937f>}</span> <span class="then" data-v-6614937f>=</span><span class="word" data-v-6614937f>person</span></div><div data-v-6614937f><span class="word" data-v-6614937f>console</span><span class="variable" data-v-6614937f>.log</span><span class="brackets" data-v-6614937f>(</span><span class="word" data-v-6614937f>name,age,city</span><span class="brackets" data-v-6614937f>)</span></div><br data-v-6614937f><br data-v-6614937f><p data-v-6614937f>多層物件</p><div data-v-6614937f><span class="function" data-v-6614937f>const </span><span class="word" data-v-6614937f>person</span> <span class="then" data-v-6614937f>=</span><span class="brackets" data-v-6614937f>{</span></div><div class="padTwo VSL" data-v-6614937f><span class="word" data-v-6614937f>name:</span> <span class="src" data-v-6614937f>&quot;wayne&quot;</span><span class="then" data-v-6614937f>,</span><div data-v-6614937f><span class="word" data-v-6614937f>age:</span> <span class="number" data-v-6614937f>18,</span></div><div data-v-6614937f><span class="word" data-v-6614937f>city:</span><span class="src" data-v-6614937f>&quot;taipei&quot;</span></div><div data-v-6614937f></div><div data-v-6614937f><span class="word" data-v-6614937f>social:</span><span class="brackets" data-v-6614937f>{</span></div><div class="padTwo VSL" data-v-6614937f><span class="word" data-v-6614937f>bilibili:</span><span class="src" data-v-6614937f>&quot;123456&quot;</span><div data-v-6614937f><span class="word" data-v-6614937f>youtube:</span><span class="src" data-v-6614937f>&quot;654321&quot;</span></div><div data-v-6614937f></div></div><div data-v-6614937f><span class="brackets" data-v-6614937f>}</span></div></div><div data-v-6614937f><span class="brackets" data-v-6614937f>};</span></div><div data-v-6614937f><span class="function" data-v-6614937f>const </span><span class="brackets" data-v-6614937f>{</span><span class="word" data-v-6614937f>name,social:</span><span class="brackets" data-v-6614937f>{</span><span class="word" data-v-6614937f>bilibili</span> <span class="word" data-v-6614937f>}}</span><span class="then" data-v-6614937f>=</span> <span class="word" data-v-6614937f>person</span></div><div data-v-6614937f><span class="word" data-v-6614937f>console</span><span class="variable" data-v-6614937f>.log</span><span class="brackets" data-v-6614937f>(</span><span class="word" data-v-6614937f>name,bilibili</span><span class="brackets" data-v-6614937f>)</span></div><br data-v-6614937f><p data-v-6614937f>賦值時,加 : 改變新變量的變量名</p><p data-v-6614937f>賦值時,加 = 設定一個預設值,避免物件沒這個值</p><div data-v-6614937f><span class="function" data-v-6614937f>const </span><span class="brackets" data-v-6614937f>{</span><span class="word" data-v-6614937f>name: personName</span><span class="then" data-v-6614937f>=</span> <span class="src" data-v-6614937f>&quot;guest&quot; ,</span><span class="word" data-v-6614937f>age</span> <span class="then" data-v-6614937f>=</span><span class="word" data-v-6614937f>-1</span><span class="word" data-v-6614937f>, social:</span><span class="brackets" data-v-6614937f>{</span><span class="word" data-v-6614937f>bilibili</span> <span class="word" data-v-6614937f>}}</span><span class="then" data-v-6614937f>=</span> <span class="word" data-v-6614937f>person</span></div><div data-v-6614937f><span class="word" data-v-6614937f>console</span><span class="variable" data-v-6614937f>.log</span><span class="brackets" data-v-6614937f>(</span><span class="word" data-v-6614937f>personName,age,bilibili</span><span class="brackets" data-v-6614937f>)</span></div></div><div class="articleCardTitle cor36 fz34" data-v-6614937f>數組物件解構</div><div class="bgcVS" data-v-6614937f><div data-v-6614937f><span class="function" data-v-6614937f>const </span><span class="word" data-v-6614937f>arr</span> <span class="then" data-v-6614937f>=</span><span class="brackets" data-v-6614937f>[ </span></div><div class="brackets pTwo" data-v-6614937f>{</div><div class="pFou" data-v-6614937f><span class="word" data-v-6614937f>uname:</span> <span class="src" data-v-6614937f>&quot;wayne&quot;,</span></div><div class="pFou" data-v-6614937f><span class="word" data-v-6614937f>number:</span> <span class="number" data-v-6614937f>123</span></div><div class="brackets pTwo" data-v-6614937f>}</div><div class="brackets" data-v-6614937f>]</div><br data-v-6614937f><div data-v-6614937f><span class="function" data-v-6614937f>const </span><span class="brackets" data-v-6614937f>[{</span><span class="word" data-v-6614937f>uname,number</span><span class="brackets" data-v-6614937f>}]</span> <span class="then" data-v-6614937f>=</span><span class="word" data-v-6614937f>arr</span></div><div data-v-6614937f><span class="word" data-v-6614937f>console.</span><span class="variable" data-v-6614937f>log</span> <span class="brackets" data-v-6614937f>(</span><span class="word" data-v-6614937f>uname</span> <span class="brackets" data-v-6614937f>)</span></div><div data-v-6614937f><span class="word" data-v-6614937f>console.</span><span class="variable" data-v-6614937f>log</span> <span class="brackets" data-v-6614937f>(</span><span class="word" data-v-6614937f>number</span> <span class="brackets" data-v-6614937f>)</span></div></div><div class="articleCardTitle cor36 fz34" data-v-6614937f>多級物件解構</div><div class="bgcVS" data-v-6614937f><div data-v-6614937f><span class="function" data-v-6614937f>const </span><span class="word" data-v-6614937f>objOuter</span> <span class="then" data-v-6614937f>=</span><span class="brackets" data-v-6614937f>{ </span></div><div class="pTwo" data-v-6614937f><span class="word" data-v-6614937f>name:</span> <span class="src" data-v-6614937f>&quot;wayne&quot;,</span></div><div class="pTwo" data-v-6614937f><span class="word" data-v-6614937f>number:</span> <span class="number" data-v-6614937f>123</span></div><div class="pTwo" data-v-6614937f><span class="word" data-v-6614937f>objInner:</span><span class="brackets" data-v-6614937f>{</span></div><div class="pFou" data-v-6614937f><span class="word" data-v-6614937f>iname:</span> <span class="src" data-v-6614937f>&quot;inn&quot;,</span></div><div class="pFou" data-v-6614937f><span class="word" data-v-6614937f>inumber:</span> <span class="number" data-v-6614937f>321</span></div><div class="brackets pTwo" data-v-6614937f>}</div><div class="brackets" data-v-6614937f>}</div><br data-v-6614937f><div data-v-6614937f><span class="function" data-v-6614937f>const </span><span class="brackets" data-v-6614937f>{ </span><span class="word" data-v-6614937f>name, number, </span><span class="word" data-v-6614937f>objInner: </span><span class="brackets" data-v-6614937f>{ </span><span class="word" data-v-6614937f>iname, inumber </span><span class="brackets" data-v-6614937f>} } </span> <span class="then" data-v-6614937f>=</span><span class="word" data-v-6614937f>objOuter</span></div><div data-v-6614937f><span class="word" data-v-6614937f>console.</span><span class="variable" data-v-6614937f>log</span> <span class="brackets" data-v-6614937f>(</span><span class="word" data-v-6614937f>name</span> <span class="brackets" data-v-6614937f>)</span></div><div data-v-6614937f><span class="word" data-v-6614937f>console.</span><span class="variable" data-v-6614937f>log</span> <span class="brackets" data-v-6614937f>(</span><span class="word" data-v-6614937f>number</span> <span class="brackets" data-v-6614937f>)</span></div><div data-v-6614937f><span class="word" data-v-6614937f>console.</span><span class="variable" data-v-6614937f>log</span> <span class="brackets" data-v-6614937f>(</span><span class="word" data-v-6614937f>iname</span> <span class="brackets" data-v-6614937f>)</span></div><div data-v-6614937f><span class="word" data-v-6614937f>console.</span><span class="variable" data-v-6614937f>log</span> <span class="brackets" data-v-6614937f>(</span><span class="word" data-v-6614937f>inumber</span> <span class="brackets" data-v-6614937f>)</span></div></div><p class="fz28" data-v-6614937f>陣列包起來時</p><div class="bgcVS" data-v-6614937f><div data-v-6614937f><span class="function" data-v-6614937f>const </span><span class="word" data-v-6614937f>porson </span> <span class="then" data-v-6614937f>=</span><span class="brackets" data-v-6614937f>[ </span></div><div class="brackets pTwo VSL" data-v-6614937f>{</div><div class="pFou VSL" data-v-6614937f><span class="word" data-v-6614937f>123name:</span><span class="src" data-v-6614937f>&quot;wayne&quot;,</span></div><div class="pFou VSL" data-v-6614937f><span class="word" data-v-6614937f>number:</span> <span class="number" data-v-6614937f>123</span></div><div class="pFou VSL" data-v-6614937f><span class="word" data-v-6614937f>objInner:</span><span class="brackets" data-v-6614937f>{</span></div><div class="pSix VSL" data-v-6614937f><span class="word" data-v-6614937f>iname:</span><span class="src" data-v-6614937f>&quot;inn&quot;,</span></div><div class="pSix VSL" data-v-6614937f><span class="word" data-v-6614937f>inumber:</span><span class="number" data-v-6614937f>321</span></div><div class="brackets pFou VSL" data-v-6614937f>}</div><div class="brackets pTwo VSL" data-v-6614937f>}</div><div class="brackets" data-v-6614937f>]</div><br data-v-6614937f><div data-v-6614937f><span class="function" data-v-6614937f>const </span><span class="brackets" data-v-6614937f>[ { </span><span class="word" data-v-6614937f>name, number, objInner: </span><span class="brackets" data-v-6614937f>{ </span><span class="word" data-v-6614937f>iname, inumber </span><span class="brackets" data-v-6614937f>} } ]</span> <span class="then" data-v-6614937f>=</span><span class="word" data-v-6614937f>person</span></div></div><div class="dis" data-v-6614937f><div class="bgcVS w100" data-v-6614937f><p data-v-6614937f>JSON格式msg={&quot;code&quot;:200,&quot;data&quot;:[{...}]}</p><br data-v-6614937f><div data-v-6614937f><span class="function" data-v-6614937f>const </span><span class="brackets" data-v-6614937f>{</span> <span class="word" data-v-6614937f>data</span><span class="brackets" data-v-6614937f>}</span> <span class="then" data-v-6614937f>=</span><span class="word" data-v-6614937f>msg</span></div><div data-v-6614937f><span class="word" data-v-6614937f>console.</span><span class="variable" data-v-6614937f>log</span><span class="brackets" data-v-6614937f>(</span> <span class="word" data-v-6614937f>data</span><span class="brackets" data-v-6614937f>)</span></div><br data-v-6614937f><div data-v-6614937f><span class="function" data-v-6614937f>function </span><span class="word" data-v-6614937f>render</span><span class="brackets" data-v-6614937f>(</span> <span class="word" data-v-6614937f>arr</span><span class="brackets" data-v-6614937f>){</span></div><div class="pTwo VSL" data-v-6614937f><span class="word" data-v-6614937f>console.</span><span class="variable" data-v-6614937f>log</span><span class="brackets" data-v-6614937f>(</span> <span class="word" data-v-6614937f>arr</span><span class="brackets" data-v-6614937f>)</span></div><div class="brackets" data-v-6614937f>}</div><div data-v-6614937f><span class="word" data-v-6614937f>render</span><span class="brackets" data-v-6614937f>(</span> <span class="word" data-v-6614937f>data</span><span class="brackets" data-v-6614937f>)</span></div></div><div class="bgcVSMid" data-v-6614937f>&gt;</div><div class="bgcVS w100" data-v-6614937f><br data-v-6614937f><br data-v-6614937f><div data-v-6614937f><span class="function" data-v-6614937f>function </span><span class="word" data-v-6614937f>render</span><span class="brackets" data-v-6614937f>(</span> <span class="word" data-v-6614937f>arr</span><span class="brackets" data-v-6614937f>){</span></div><div class="pTwo VSL" data-v-6614937f><span class="function" data-v-6614937f>const </span><span class="brackets" data-v-6614937f>{</span> <span class="word" data-v-6614937f>data</span><span class="brackets" data-v-6614937f>}</span> <span class="then" data-v-6614937f>=</span><span class="word" data-v-6614937f>arr</span></div><div class="pTwo VSL" data-v-6614937f><span class="word" data-v-6614937f>console.</span><span class="variable" data-v-6614937f>log</span><span class="brackets" data-v-6614937f>(</span> <span class="word" data-v-6614937f>data</span><span class="brackets" data-v-6614937f>)</span></div><div class="brackets" data-v-6614937f>}</div><div data-v-6614937f><span class="word" data-v-6614937f>render</span><span class="brackets" data-v-6614937f>(</span> <span class="word" data-v-6614937f>msg</span><span class="brackets" data-v-6614937f>)</span></div><br data-v-6614937f><div class="disCen comment" data-v-6614937f>更簡潔寫法 V</div><br data-v-6614937f><div data-v-6614937f><span class="function" data-v-6614937f>function </span><span class="word" data-v-6614937f>render</span><span class="brackets" data-v-6614937f>( { </span><span class="word" data-v-6614937f>data </span><span class="brackets" data-v-6614937f>} ) {</span></div><div class="pTwo VSL" data-v-6614937f><span class="word" data-v-6614937f>console.</span><span class="variable" data-v-6614937f>log</span><span class="brackets" data-v-6614937f>(</span> <span class="word" data-v-6614937f>data</span><span class="brackets" data-v-6614937f>)</span></div><div class="brackets" data-v-6614937f>}</div><div data-v-6614937f><span class="word" data-v-6614937f>render</span><span class="brackets" data-v-6614937f>(</span> <span class="word" data-v-6614937f>msg</span><span class="brackets" data-v-6614937f>)</span></div><br data-v-6614937f><div class="comment" data-v-6614937f>data容易命名衝突, 接進來資料改名myData</div><br data-v-6614937f><div data-v-6614937f><span class="function" data-v-6614937f>function </span><span class="word" data-v-6614937f>render</span><span class="brackets" data-v-6614937f>( { </span><span class="word" data-v-6614937f>data: myData </span><span class="brackets" data-v-6614937f>} ) {</span></div><div class="pTwo VSL" data-v-6614937f><span class="word" data-v-6614937f>console.</span><span class="variable" data-v-6614937f>log</span><span class="brackets" data-v-6614937f>(</span> <span class="word" data-v-6614937f>myData</span><span class="brackets" data-v-6614937f>)</span></div><div class="brackets" data-v-6614937f>}</div><div data-v-6614937f><span class="word" data-v-6614937f>render</span><span class="brackets" data-v-6614937f>(</span> <span class="word" data-v-6614937f>msg</span><span class="brackets" data-v-6614937f>)</span></div></div></div></div></div></div>',1),qf=Tn(()=>n("div",{class:"toTopButton"},[n("div",{class:"disCen"},"___"),n("div",{class:"disCen"},"▲")],-1)),_f=[qf],Sf=Tn(()=>n("div",{class:"toBotButton"},[n("div",{class:"disCen"},"▼"),n("div",{class:"disCen"},"￣")],-1)),yf=[Sf],Cf={__name:"JsPageThreeThree",setup(a){const s=ba(!1);window.addEventListener("scroll",function(){s.value=window.scrollY>0});function d(){window.scrollTo({top:0,left:0,behavior:"smooth"})}function v(){window.scrollTo({top:999999,left:0,behavior:"smooth"})}function t(e){window.scrollTo({top:document.getElementById(`${e}`).offsetTop,behavior:"smooth"})}return(e,c)=>(aa(),ta(G,null,[n("section",null,[n("div",kf,[n("div",gf,[n("div",zf,[n("div",{onClick:c[0]||(c[0]=l=>t("threeda001")),class:"leftNavText"},"數組解構"),n("div",{onClick:c[1]||(c[1]=l=>t("threeda002")),class:"leftNavText"},"物件解構"),n("div",{onClick:c[2]||(c[2]=l=>t("")),class:"leftNavText"}),n("div",{onClick:c[3]||(c[3]=l=>t("")),class:"leftNavText"}),n("div",{onClick:c[4]||(c[4]=l=>t("")),class:"leftNavText"}),n("div",{onClick:c[5]||(c[5]=l=>t("")),class:"leftNavText"})])])]),Tf]),n("div",null,[W(k(B,{name:"fade",tag:"div"},{default:S(()=>[n("div",{onClick:d,class:"toTop"},_f)]),_:1},512),[[U,s.value]]),W(k(B,{name:"fade",tag:"div"},{default:S(()=>[n("div",{onClick:v,class:"toBot"},yf)]),_:1},512),[[U,s.value]])])],64))}},xf=pa(Cf,[["__scopeId","data-v-6614937f"]]);const Gs=a=>(wa("data-v-d696a183"),a=a(),ma(),a),Lf={class:"leftNav"},jf={class:"leftNavContainer"},Vf={class:"leftNavLayout"},Pf=Gs(()=>n("div",null,"for in",-1)),Of=Gs(()=>n("div",null,"for of",-1)),Nf=[Pf,Of],$f=Gs(()=>n("div",null,".every()",-1)),Ef=Gs(()=>n("div",null,".some()",-1)),Mf=[$f,Ef],Af={class:"Main"},Ff={class:"mainContainer"},If={class:"mainLayout"},Rf=K('<br data-v-d696a183><br data-v-d696a183><div class="fz28" data-v-d696a183><span class="cor17" data-v-d696a183> . . . . . </span> shift ↖ <span class="cor17" data-v-d696a183> . . . </span> ↗ pop </div><div class="fz28" data-v-d696a183>unshift → ▯▮▮▮▯ ← push</div><br data-v-d696a183><table class="fz28" data-v-d696a183><tr data-v-d696a183><td data-v-d696a183>🐕🐕🐕🐕.map(🐕=&gt;🐶)</td><td class="pad10" data-v-d696a183>&gt;</td><td data-v-d696a183>🐶🐶🐶🐶</td></tr><tr data-v-d696a183><td data-v-d696a183>🐕🐶🐕🐶.filter(🐶)</td><td class="pad10" data-v-d696a183>&gt;</td><td data-v-d696a183>🐶🐶</td></tr><tr data-v-d696a183><td data-v-d696a183>🐕🐶🐕🐕.find(🐶)</td><td class="pad10" data-v-d696a183>&gt;</td><td data-v-d696a183>🐶</td></tr><tr data-v-d696a183><td data-v-d696a183>🐕🐶🐕🥤.at( -1 )</td><td class="pad10" data-v-d696a183>&gt;</td><td data-v-d696a183>🥤</td></tr><tr data-v-d696a183><td data-v-d696a183>🐕🐶🐕🥤.includes(🥤)</td><td class="pad10" data-v-d696a183>&gt;</td><td data-v-d696a183>true</td></tr><tr data-v-d696a183><td data-v-d696a183>🐕🐶🐕🐕.every(🐕)</td><td class="pad10" data-v-d696a183>&gt;</td><td data-v-d696a183>false</td></tr><tr data-v-d696a183><td data-v-d696a183>🐕🐶🐶🐕.some(🐶)</td><td class="pad10" data-v-d696a183>&gt;</td><td data-v-d696a183>true</td></tr><tr data-v-d696a183><td data-v-d696a183>🐕🐕🐕🐕.fill(🐶,1)</td><td class="pad10" data-v-d696a183>&gt;</td><td data-v-d696a183>🐕🐶🐶🐶</td></tr><tr data-v-d696a183><td data-v-d696a183>🐕🐕🐶🐕.findIndex.(el=&gt;el===🐶)</td><td class="pad10" data-v-d696a183>&gt;</td><td data-v-d696a183>2</td></tr></table><br data-v-d696a183><br data-v-d696a183><p class="fz28" data-v-d696a183> 會改原陣列: push.pop.unshift.shift() . sort() .reverse() .splice() </p><br data-v-d696a183><br data-v-d696a183><table class="fz30 methodTable" data-v-d696a183><tr class="cor36" data-v-d696a183><th data-v-d696a183>方法</th><th data-v-d696a183>作用</th><th data-v-d696a183>說明</th></tr><tr data-v-d696a183><td data-v-d696a183>map</td><td data-v-d696a183>迭代數組</td><td data-v-d696a183><span class="cor36" data-v-d696a183>返回</span> 新數組, <span class="cor36" data-v-d696a183>返回</span>的是處理之後的數組元素, 想要使用返回的新數組 </td></tr><tr data-v-d696a183><td class="tdPad" data-v-d696a183>forEach</td><td class="tdPad" data-v-d696a183>遍歷數組</td><td class="tdPad" data-v-d696a183>不返回數組, 常用於查找遍歷數組元素</td></tr><tr data-v-d696a183><td class="tdPad" data-v-d696a183>filter</td><td class="tdPad" data-v-d696a183>過濾數組</td><td class="tdPad" data-v-d696a183><span class="cor36" data-v-d696a183>返回</span>新數組, <span class="cor36" data-v-d696a183>返回</span>的是篩選滿足條件的數組元素 </td></tr><tr data-v-d696a183><td class="tdPad" data-v-d696a183>reduce</td><td class="tdPad" data-v-d696a183>累計器</td><td class="tdPad" data-v-d696a183><span class="cor36" data-v-d696a183>返回</span>累計處理的結果, 常用於求和 </td></tr><tr data-v-d696a183><td class="tdPad" data-v-d696a183>join</td><td class="tdPad" data-v-d696a183></td><td class="tdPad" data-v-d696a183> 數組拼接成字串, <span class="cor36" data-v-d696a183>返回</span> 字串 </td></tr><tr data-v-d696a183><td class="tdPad" data-v-d696a183>find</td><td class="tdPad" data-v-d696a183>查找元素</td><td class="tdPad" data-v-d696a183><span class="cor36" data-v-d696a183>返回</span>符合條件的第一個數組元素值, 沒有則<span class="cor36" data-v-d696a183>返回</span>undefined </td></tr><tr data-v-d696a183><td class="tdPad" data-v-d696a183>every</td><td class="tdPad" data-v-d696a183></td><td class="tdPad" data-v-d696a183> 數組所有元素是否都符合條件, 所有都符合<span class="cor36" data-v-d696a183>返回</span>true, 否<span class="cor36" data-v-d696a183>返回</span>false </td></tr><tr data-v-d696a183><td class="tdPad" data-v-d696a183>some</td><td class="tdPad" data-v-d696a183></td><td class="tdPad" data-v-d696a183> 數組中的元素是否有滿足條件的, 如果有<span class="cor36" data-v-d696a183>返回</span>true, 沒有<span class="cor36" data-v-d696a183>返回</span>false </td></tr><tr data-v-d696a183><td class="tdPad" data-v-d696a183>concat</td><td class="tdPad" data-v-d696a183></td><td class="tdPad" data-v-d696a183> 合併 2 個數組, <span class="cor36" data-v-d696a183>返回</span>生成新數組 </td></tr><tr data-v-d696a183><td class="tdPad" data-v-d696a183>sort</td><td class="tdPad" data-v-d696a183></td><td class="tdPad" data-v-d696a183>對原數組單元值排序</td></tr><tr data-v-d696a183><td class="tdPad" data-v-d696a183>splice</td><td class="tdPad" data-v-d696a183></td><td class="tdPad" data-v-d696a183>刪除或替換原數組單元</td></tr><tr data-v-d696a183><td class="tdPad" data-v-d696a183>reverse</td><td class="tdPad" data-v-d696a183></td><td class="tdPad" data-v-d696a183>反轉數組</td></tr><tr data-v-d696a183><td class="tdPad" data-v-d696a183>findIndex</td><td class="tdPad" data-v-d696a183></td><td class="tdPad" data-v-d696a183>查找元素的索引值</td></tr></table><div id="threemethod001" class="articleCardTitle cor36 fz34" data-v-d696a183> 4. push() . . . 會改變原數組 </div><p class="fz28" data-v-d696a183> push 方法 在 數組末端 添加 一個or多個 元素 , 並返回添加新元素後的數組長度 </p><p class="fz28" data-v-d696a183>注意 會改變原數組</p><br data-v-d696a183><div class="fz28" data-v-d696a183><span class="cor17" data-v-d696a183> . . . . . </span> shift ↖ <span class="cor17" data-v-d696a183> . . . </span> ↗ pop </div><div class="fz28" data-v-d696a183>unshift → ▯▮▮▮▯ ← push</div><div class="bgcVS" data-v-d696a183><div data-v-d696a183><span class="function" data-v-d696a183>let </span> <span class="word" data-v-d696a183>arr</span><span class="then" data-v-d696a183>=</span> <span class="brackets" data-v-d696a183>[</span><span class="src" data-v-d696a183>&quot;hi&quot;</span> <span class="brackets" data-v-d696a183>]</span></div><div data-v-d696a183><span class="comment" data-v-d696a183>//arr[1]=&quot;添加方法1&quot;</span></div><div data-v-d696a183><span class="word" data-v-d696a183>arr</span> <span class="variable" data-v-d696a183>.push</span><span class="brackets" data-v-d696a183>(</span> <span class="src" data-v-d696a183>&quot;大家好&quot;</span><span class="brackets" data-v-d696a183>)</span></div><div data-v-d696a183><span class="function" data-v-d696a183>let </span><span class="word" data-v-d696a183>arrLength</span> <span class="then" data-v-d696a183>=</span><span class="word" data-v-d696a183>arr</span> <span class="variable" data-v-d696a183>.push</span><span class="brackets" data-v-d696a183>(</span> <span class="src" data-v-d696a183>&quot;大家好&quot;</span><span class="brackets" data-v-d696a183>)</span><span class="comment" data-v-d696a183>//打印添加這個東西,返回數組長度//2</span></div><div data-v-d696a183><span class="word" data-v-d696a183>console</span><span class="variable" data-v-d696a183>.log</span><span class="brackets" data-v-d696a183>(</span> <span class="word" data-v-d696a183>arr</span><span class="brackets" data-v-d696a183>)</span><span class="comment" data-v-d696a183>//[&quot;hi&quot;,&quot;大家好&quot;]</span></div><div data-v-d696a183><span class="word" data-v-d696a183>console</span><span class="variable" data-v-d696a183>.log</span><span class="brackets" data-v-d696a183>(</span><span class="word" data-v-d696a183>arrLength</span><span class="brackets" data-v-d696a183>)</span><span class="comment" data-v-d696a183>// 2</span></div><br data-v-d696a183><p data-v-d696a183>也可以同時添加多條</p><div data-v-d696a183><span class="word" data-v-d696a183>arr</span> <span class="variable" data-v-d696a183>.push</span><span class="brackets" data-v-d696a183>(</span><span class="src" data-v-d696a183>&quot;大家好&quot;,123,&quot;hi&quot;</span><span class="brackets" data-v-d696a183>)</span></div></div><div id="threemethod002" class="articleCardTitle cor36 fz34" data-v-d696a183> 4. pop() . . . 會改變原數組 </div><p class="fz28" data-v-d696a183>push 方法 刪除數組的最後一個元素 , 並返回該元素</p><p class="fz28" data-v-d696a183>注意 會改變原數組</p><br data-v-d696a183><div class="fz28" data-v-d696a183><span class="cor17" data-v-d696a183> . . . . . </span> shift ↖ <span class="cor17" data-v-d696a183> . . . </span> ↗ pop </div><div class="fz28" data-v-d696a183>unshift → ▯▮▮▮▯ ← push</div><div class="bgcVS" data-v-d696a183><div data-v-d696a183><span class="function" data-v-d696a183>let </span> <span class="word" data-v-d696a183>arr</span><span class="then" data-v-d696a183>=</span> <span class="brackets" data-v-d696a183>[</span><span class="number" data-v-d696a183>100,200,300,400</span><span class="brackets" data-v-d696a183>]</span></div><div data-v-d696a183><span class="word" data-v-d696a183>arr</span> <span class="variable" data-v-d696a183>.pop</span><span class="brackets" data-v-d696a183>()</span></div><div data-v-d696a183><span class="word" data-v-d696a183>console</span><span class="variable" data-v-d696a183>.log</span><span class="brackets" data-v-d696a183>(</span> <span class="word" data-v-d696a183>arr</span><span class="brackets" data-v-d696a183>)</span><span class="comment" data-v-d696a183>//[100,200,300]</span></div></div><div id="threemethod003" class="articleCardTitle cor36 fz34" data-v-d696a183> 4. shift() . . . 會改變原數組 </div><p class="fz28" data-v-d696a183>shift 方法 刪除數組的第一個元素 , 並返回該元素</p><p class="fz28" data-v-d696a183>注意 會改變原數組</p><br data-v-d696a183><div class="fz28" data-v-d696a183><span class="cor17" data-v-d696a183> . . . . . </span> shift ↖ <span class="cor17" data-v-d696a183> . . . </span> ↗ pop </div><div class="fz28" data-v-d696a183>unshift → ▯▮▮▮▯ ← push</div><div class="bgcVS" data-v-d696a183><div data-v-d696a183><span class="function" data-v-d696a183>let </span> <span class="word" data-v-d696a183>name</span><span class="then" data-v-d696a183>=</span> <span class="brackets" data-v-d696a183>[</span><span class="src" data-v-d696a183>&quot;wayne&quot;,&quot;neo&quot;,&quot;jack&quot;</span><span class="brackets" data-v-d696a183>]</span></div><div data-v-d696a183><span class="function" data-v-d696a183>let </span><span class="word" data-v-d696a183>result</span> <span class="then" data-v-d696a183>=</span><span class="word" data-v-d696a183>name</span><span class="variable" data-v-d696a183>.shift</span><span class="brackets" data-v-d696a183>()</span></div><div data-v-d696a183><span class="word" data-v-d696a183>console</span><span class="variable" data-v-d696a183>.log</span><span class="brackets" data-v-d696a183>(</span> <span class="word" data-v-d696a183>name</span><span class="brackets" data-v-d696a183>)</span><span class="comment" data-v-d696a183>//[&quot;neo&quot;,&quot;jack&quot;]</span></div><div data-v-d696a183><span class="word" data-v-d696a183>console</span><span class="variable" data-v-d696a183>.log</span><span class="brackets" data-v-d696a183>(</span> <span class="word" data-v-d696a183>result</span><span class="brackets" data-v-d696a183>)</span><span class="comment" data-v-d696a183>//wayne</span></div><br data-v-d696a183><div data-v-d696a183><span class="comment" data-v-d696a183>//清空數組元素</span></div><div data-v-d696a183><span class="function" data-v-d696a183>let </span> <span class="word" data-v-d696a183>arr</span><span class="then" data-v-d696a183>=</span> <span class="brackets" data-v-d696a183>[]</span></div><div data-v-d696a183><span class="word" data-v-d696a183>console</span><span class="variable" data-v-d696a183>.log</span><span class="brackets" data-v-d696a183>(</span> <span class="word" data-v-d696a183>arr</span><span class="variable" data-v-d696a183>.shift</span><span class="brackets" data-v-d696a183>())</span><span class="comment" data-v-d696a183>//undefined</span></div><br data-v-d696a183><div data-v-d696a183><span class="function" data-v-d696a183>let </span> <span class="word" data-v-d696a183>arr1</span><span class="then" data-v-d696a183>=</span> <span class="brackets" data-v-d696a183>[</span><span class="number" data-v-d696a183>100,200,300</span><span class="brackets" data-v-d696a183>]</span></div><div data-v-d696a183><span class="function" data-v-d696a183>let </span> <span class="word" data-v-d696a183>item</span></div><div data-v-d696a183><span class="comment" data-v-d696a183>//()裡面取布林值,當0,undefined,Null,NaN,空數值,false為false</span></div><div data-v-d696a183><span class="word" data-v-d696a183>while</span> <span class="brackets" data-v-d696a183>(</span><span class="word" data-v-d696a183>item</span> <span class="then" data-v-d696a183>=</span><span class="word" data-v-d696a183>arr1</span><span class="variable" data-v-d696a183>.shift</span><span class="brackets" data-v-d696a183>()){</span><span class="comment" data-v-d696a183>//我把arr1每次刪除的數據賦值給item</span></div><div class="padTwo VSL" data-v-d696a183><span class="word" data-v-d696a183>console</span><span class="variable" data-v-d696a183>.log</span><span class="brackets" data-v-d696a183>(</span> <span class="word" data-v-d696a183>item</span><span class="brackets" data-v-d696a183>)</span><span class="comment" data-v-d696a183>//100//200//300//[]</span><div data-v-d696a183></div></div><div data-v-d696a183><span class="brackets" data-v-d696a183>}</span></div></div><div id="threemethod004" class="articleCardTitle cor36 fz34" data-v-d696a183> 4. unshift() . . . 會改變原數組 </div><p class="fz28" data-v-d696a183> shift 方法 向 數組的第一個位置 添加元素 , 並返回添加元素後的 數組長度 </p><p class="fz28" data-v-d696a183>注意 會改變原數組</p><br data-v-d696a183><div class="fz28" data-v-d696a183><span class="cor17" data-v-d696a183> . . . . . </span> shift ↖ <span class="cor17" data-v-d696a183> . . . </span> ↗ pop </div><div class="fz28" data-v-d696a183>unshift → ▯▮▮▮▯ ← push</div><div class="bgcVS" data-v-d696a183><div data-v-d696a183><span class="function" data-v-d696a183>let </span> <span class="word" data-v-d696a183>arr</span><span class="then" data-v-d696a183>=</span> <span class="brackets" data-v-d696a183>[</span><span class="number" data-v-d696a183>200</span> <span class="brackets" data-v-d696a183>]</span></div><div data-v-d696a183><span class="word" data-v-d696a183>arr</span><span class="variable" data-v-d696a183>.unshift</span><span class="brackets" data-v-d696a183>(</span> <span class="number" data-v-d696a183>100</span><span class="brackets" data-v-d696a183>)</span></div><div data-v-d696a183><span class="word" data-v-d696a183>console</span><span class="variable" data-v-d696a183>.log</span><span class="brackets" data-v-d696a183>(</span> <span class="word" data-v-d696a183>arr</span><span class="brackets" data-v-d696a183>)</span><span class="comment" data-v-d696a183>//[100,200]</span></div><br data-v-d696a183><p data-v-d696a183>也可以添加多個</p></div><div id="threemethod017" class="articleCardTitle cor36 fz34" data-v-d696a183> for in , for of </div><table data-v-d696a183><tr data-v-d696a183><td data-v-d696a183><div class="pad20" data-v-d696a183>for...in</div></td><td data-v-d696a183><div class="pad20" data-v-d696a183>遍歷得到 key</div></td><td data-v-d696a183><div class="pad20" data-v-d696a183><div data-v-d696a183>可枚舉數據</div><div data-v-d696a183>數組、字串、物件</div></div></td></tr><tr data-v-d696a183><td data-v-d696a183><div class="pad20" data-v-d696a183>for...of</div></td><td data-v-d696a183><div class="pad20" data-v-d696a183>遍歷得到 value</div></td><td data-v-d696a183><div class="pad20" data-v-d696a183><div data-v-d696a183>可迭代數據</div><div data-v-d696a183>數組、字串、Set、Map</div></div></td></tr></table><br data-v-d696a183><p class="fz28" data-v-d696a183> for of 循環獲取到的是一對鍵值對中的值 , 也就是 value </p><br data-v-d696a183><p class="fz28" data-v-d696a183>而 for in 獲取的是鍵名 , 也就是 key</p><br data-v-d696a183><br data-v-d696a183><p class="fz28" data-v-d696a183>對數組 for of 返回的是 數組裡面的 元素值</p><br data-v-d696a183><p class="fz28" data-v-d696a183>for in 返回 key , 指每個元素的 索引值</p><br data-v-d696a183><p class="fz28" data-v-d696a183> for of 只能遍歷其底層帶有 iterator 接口的 數據結構 像 set map string array </p><br data-v-d696a183><p class="fz28" data-v-d696a183>物件沒有原生 iterator 接口 , 直接用 for of 會報錯</p><br data-v-d696a183><p class="fz28" data-v-d696a183>開發中 遍歷用 for in 更合適</p><br data-v-d696a183><br data-v-d696a183><p class="fz28" data-v-d696a183>for in 返回 數組元素的 索引值 , 而不是 元素</p><br data-v-d696a183><p class="fz28" data-v-d696a183>而且 遍歷順序 有可能不是按照 實際數據的 內部順序</p><br data-v-d696a183><p class="fz28" data-v-d696a183>所以 通常遍歷數組用 for of</p><br data-v-d696a183><br data-v-d696a183><p class="fz28" data-v-d696a183>總之 for in 適合遍歷 物件</p><p class="fz28" data-v-d696a183>for of 適合遍歷 數組</p><div class="bgcVS" data-v-d696a183><div data-v-d696a183><span class="comment" data-v-d696a183>// 1. 循環數組</span></div><div data-v-d696a183><span class="word" data-v-d696a183>cosnt</span> <span class="word" data-v-d696a183>arr</span><span class="then" data-v-d696a183>=</span> <span class="brackets" data-v-d696a183>[</span><span class="src" data-v-d696a183>&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;</span><span class="brackets" data-v-d696a183>]</span></div><div data-v-d696a183><span class="comment" data-v-d696a183>// for...in 輸出 數組成員 在數組中 的索引</span></div><div data-v-d696a183><span class="then" data-v-d696a183>for </span> <span class="brackets" data-v-d696a183>(</span><span class="function" data-v-d696a183>let </span> <span class="word" data-v-d696a183>n </span><span class="function" data-v-d696a183>in </span> <span class="word" data-v-d696a183>arr</span><span class="brackets" data-v-d696a183>){</span></div><div class="padTwo VSL" data-v-d696a183><span class="word" data-v-d696a183>console.log</span><span class="brackets" data-v-d696a183>(</span> <span class="word" data-v-d696a183>n </span><span class="brackets" data-v-d696a183>) </span><span class="comment" data-v-d696a183>// 0 // 1 // 2 // 3</span><div data-v-d696a183></div></div><div data-v-d696a183><span class="brackets" data-v-d696a183>}</span></div><br data-v-d696a183><div data-v-d696a183><span class="comment" data-v-d696a183>// for...of 輸出 數組的成員</span></div><div data-v-d696a183><span class="then" data-v-d696a183>for </span> <span class="brackets" data-v-d696a183>(</span><span class="function" data-v-d696a183>let </span> <span class="word" data-v-d696a183>n </span><span class="function" data-v-d696a183>of </span> <span class="word" data-v-d696a183>arr</span><span class="brackets" data-v-d696a183>){</span></div><div class="padTwo VSL" data-v-d696a183><span class="word" data-v-d696a183>console.log</span><span class="brackets" data-v-d696a183>(</span> <span class="word" data-v-d696a183>n </span><span class="brackets" data-v-d696a183>) </span><span class="comment" data-v-d696a183>// a // b // c // d</span><div data-v-d696a183></div></div><div data-v-d696a183><span class="brackets" data-v-d696a183>}</span></div><br data-v-d696a183><div data-v-d696a183><span class="comment" data-v-d696a183>// 2. 循環物件</span></div><div data-v-d696a183><span class="function" data-v-d696a183>const </span><span class="word" data-v-d696a183>obj</span> <span class="then" data-v-d696a183>=</span><span class="brackets" data-v-d696a183>{</span> <span class="word" data-v-d696a183>n:</span><span class="number" data-v-d696a183>4,</span> <span class="word" data-v-d696a183>m:</span><span class="number" data-v-d696a183>5,</span> <span class="word" data-v-d696a183>k:</span><span class="number" data-v-d696a183>6</span> <span class="brackets" data-v-d696a183>}</span></div><div data-v-d696a183><span class="comment" data-v-d696a183>// for...in </span></div><div data-v-d696a183><span class="then" data-v-d696a183>for </span> <span class="brackets" data-v-d696a183>(</span><span class="function" data-v-d696a183>let </span> <span class="word" data-v-d696a183>n </span><span class="function" data-v-d696a183>in </span> <span class="word" data-v-d696a183>obj</span><span class="brackets" data-v-d696a183>){</span></div><div class="padTwo VSL" data-v-d696a183><span class="comment" data-v-d696a183>// 物件的屬性名</span></div><div class="padTwo VSL" data-v-d696a183><span class="word" data-v-d696a183>console.log</span><span class="brackets" data-v-d696a183>(</span> <span class="word" data-v-d696a183>n</span><span class="brackets" data-v-d696a183>) </span><span class="comment" data-v-d696a183>// n // m // k</span><div data-v-d696a183></div></div><div class="padTwo VSL" data-v-d696a183><span class="comment" data-v-d696a183>// 物件的屬性值</span></div><div class="padTwo VSL" data-v-d696a183><span class="word" data-v-d696a183>console.</span><span class="variable" data-v-d696a183>log</span> <span class="brackets" data-v-d696a183>(</span><span class="word" data-v-d696a183>obj</span> <span class="brackets" data-v-d696a183>[</span><span class="word" data-v-d696a183>n</span> <span class="brackets" data-v-d696a183>])</span><span class="comment" data-v-d696a183>// 4 // 5 // 6</span><div data-v-d696a183></div></div><div data-v-d696a183><span class="brackets" data-v-d696a183>}</span></div><br data-v-d696a183><div data-v-d696a183><span class="comment" data-v-d696a183>// for...of </span></div><div data-v-d696a183><span class="then" data-v-d696a183>for </span> <span class="brackets" data-v-d696a183>(</span><span class="function" data-v-d696a183>let </span> <span class="word" data-v-d696a183>n </span><span class="function" data-v-d696a183>of </span> <span class="word" data-v-d696a183>obj</span><span class="brackets" data-v-d696a183>){</span></div><div class="padTwo VSL" data-v-d696a183><div data-v-d696a183><span class="comment" data-v-d696a183>// 報錯 , 不能循環</span></div><div data-v-d696a183><span class="comment" data-v-d696a183>// 因為沒有 iterator 接口</span></div></div><div data-v-d696a183><span class="brackets" data-v-d696a183>}</span></div><br data-v-d696a183><div data-v-d696a183><span class="comment" data-v-d696a183>// 3. 循環數組物件</span></div><div data-v-d696a183><span class="function" data-v-d696a183>const </span><span class="word" data-v-d696a183>arrObj</span> <span class="then" data-v-d696a183>=</span><span class="brackets" data-v-d696a183>[{</span></div><div class="padTwo VSL" data-v-d696a183><span class="word" data-v-d696a183>name:</span> <span class="src" data-v-d696a183>&quot;wayne&quot;,</span><div data-v-d696a183></div></div><div class="padTwo VSL" data-v-d696a183><span class="word" data-v-d696a183>number:</span> <span class="number" data-v-d696a183>1</span><div data-v-d696a183></div></div><div data-v-d696a183><span class="brackets" data-v-d696a183>}, {</span></div><div class="padTwo VSL" data-v-d696a183><span class="word" data-v-d696a183>name:</span> <span class="src" data-v-d696a183>&quot;jack&quot;,</span><div data-v-d696a183></div></div><div class="padTwo VSL" data-v-d696a183><span class="word" data-v-d696a183>number:</span> <span class="number" data-v-d696a183>9</span><div data-v-d696a183></div></div><div data-v-d696a183><span class="brackets" data-v-d696a183>}]</span></div><br data-v-d696a183><div data-v-d696a183><span class="then" data-v-d696a183>for </span> <span class="brackets" data-v-d696a183>(</span><span class="function" data-v-d696a183>let </span> <span class="word" data-v-d696a183>nObj </span><span class="function" data-v-d696a183>of </span><span class="word" data-v-d696a183>arrObj</span> <span class="brackets" data-v-d696a183>){</span></div><div class="padTwo VSL" data-v-d696a183><span class="word" data-v-d696a183>console.</span><span class="variable" data-v-d696a183>log</span> <span class="brackets" data-v-d696a183>(</span><span class="word" data-v-d696a183>nObj</span> <span class="brackets" data-v-d696a183>)</span><span class="comment" data-v-d696a183>//{name:&quot;wayne&quot;,number:1},{name:&quot;jack&quot;,number:9}</span></div><div class="padTwo VSL" data-v-d696a183><span class="then" data-v-d696a183>for </span> <span class="brackets" data-v-d696a183>(</span><span class="function" data-v-d696a183>let </span> <span class="word" data-v-d696a183>n </span><span class="function" data-v-d696a183>in </span> <span class="word" data-v-d696a183>nObj</span><span class="brackets" data-v-d696a183>){</span><div data-v-d696a183><div class="padTwo VSL" data-v-d696a183><span class="word" data-v-d696a183>console.</span><span class="variable" data-v-d696a183>log</span><span class="brackets" data-v-d696a183>(</span><span class="word" data-v-d696a183>nObj</span><span class="brackets" data-v-d696a183>[</span> <span class="word" data-v-d696a183>n</span><span class="brackets" data-v-d696a183>]) </span><span class="comment" data-v-d696a183>// wayne // 1 // jack // 9</span><div data-v-d696a183></div></div><div data-v-d696a183><span class="brackets" data-v-d696a183>}</span></div></div></div><div data-v-d696a183><span class="brackets" data-v-d696a183>}</span></div><div data-v-d696a183><span class="comment" data-v-d696a183>// for in 循環 物件</span></div><div data-v-d696a183><span class="comment" data-v-d696a183>// for of 循環 數組</span></div></div><br data-v-d696a183><br data-v-d696a183><div id="threemethod005" class="articleCardTitle cor36 fz34" data-v-d696a183> 4. map() </div><p class="fz28" data-v-d696a183> map 可以遍歷數組 處理數據 , 並 <span class="spo pad10 cor36" data-v-d696a183> 返回 新數組 </span><span class="cor36" data-v-d696a183>不影響原數組</span></p><br data-v-d696a183><p class="fz28" data-v-d696a183>map([🐮,🥔,🐔,🌽] , cook) =&gt; [🍔,🍟,🍗,🍿]</p>',75),Hf={class:"bgcVS"},Bf=K('<div data-v-d696a183><span class="word" data-v-d696a183>arr</span><span class="variable" data-v-d696a183>.map</span><span class="brackets" data-v-d696a183>(</span><span class="cor36" data-v-d696a183>回調函數 </span><span class="brackets" data-v-d696a183>(</span><span class="word" data-v-d696a183>當前數組元素,當前元素索引號,數組本身</span><span class="brackets" data-v-d696a183>){</span></div><div class="comment pTwo" data-v-d696a183>//函數體</div><div class="brackets" data-v-d696a183>} , thisValue )</div><br data-v-d696a183><p data-v-d696a183>計算結果 一定要返回 , 否則新數組會 undefined</p><br data-v-d696a183><div data-v-d696a183><span class="function" data-v-d696a183>const </span><span class="word" data-v-d696a183>arr</span> <span class="then" data-v-d696a183>=</span><span class="brackets" data-v-d696a183>[</span> <span class="src" data-v-d696a183>&quot;red&quot;</span><span class="then" data-v-d696a183>,</span> <span class="src" data-v-d696a183>&quot;blue&quot;</span><span class="then" data-v-d696a183>,</span> <span class="src" data-v-d696a183>&quot;pink&quot;</span><span class="brackets" data-v-d696a183>]</span></div><div data-v-d696a183><span class="word" data-v-d696a183>arr</span> <span class="variable" data-v-d696a183>.map</span><span class="brackets" data-v-d696a183>(</span><span class="function" data-v-d696a183>function </span><span class="brackets" data-v-d696a183>(</span><span class="word" data-v-d696a183>ele,index</span><span class="brackets" data-v-d696a183>){</span></div><div class="padTwo VSL" data-v-d696a183><span class="word" data-v-d696a183>console</span> <span class="word" data-v-d696a183>.log</span><span class="brackets" data-v-d696a183>(</span> <span class="word" data-v-d696a183>ele</span><span class="brackets" data-v-d696a183>)</span><span class="comment" data-v-d696a183>//red//blue//pink//數組元素</span><span class="word" data-v-d696a183></span><div data-v-d696a183><span class="word" data-v-d696a183>console</span><span class="word" data-v-d696a183>.log</span> <span class="brackets" data-v-d696a183>(</span><span class="word" data-v-d696a183>index</span> <span class="brackets" data-v-d696a183>)</span><span class="comment" data-v-d696a183>//0//1//2//索引號</span></div><div data-v-d696a183><span class="then" data-v-d696a183>return </span> <span class="word" data-v-d696a183>el</span><span class="then" data-v-d696a183>+</span> <span class="src" data-v-d696a183>&quot;顏色&quot;</span></div><div data-v-d696a183></div></div><div data-v-d696a183><span class="brackets" data-v-d696a183>})</span></div><br data-v-d696a183>',11),Df=K('<br data-v-d696a183><div data-v-d696a183><span class="function" data-v-d696a183>const </span><span class="word" data-v-d696a183>newArr</span> <span class="then" data-v-d696a183>=</span><span class="word" data-v-d696a183>arr</span> <span class="variable" data-v-d696a183>.map</span><span class="brackets" data-v-d696a183>(</span><span class="function" data-v-d696a183>function </span><span class="brackets" data-v-d696a183>(</span><span class="word" data-v-d696a183>ele,index</span><span class="brackets" data-v-d696a183>){</span></div><div class="padTwo VSL" data-v-d696a183><span class="word" data-v-d696a183>console</span> <span class="word" data-v-d696a183>.log</span><span class="brackets" data-v-d696a183>(</span> <span class="word" data-v-d696a183>ele</span><span class="brackets" data-v-d696a183>)</span><span class="comment" data-v-d696a183>//red//blue//pink//數組元素</span><span class="word" data-v-d696a183></span><div data-v-d696a183><span class="word" data-v-d696a183>console</span><span class="word" data-v-d696a183>.log</span> <span class="brackets" data-v-d696a183>(</span><span class="word" data-v-d696a183>index</span> <span class="brackets" data-v-d696a183>)</span><span class="comment" data-v-d696a183>//0//1//2//索引號</span></div><div data-v-d696a183><span class="then" data-v-d696a183>return </span> <span class="word" data-v-d696a183>el</span><span class="then" data-v-d696a183>+</span> <span class="src" data-v-d696a183>&quot;顏色&quot;</span></div><div data-v-d696a183></div></div><div data-v-d696a183><span class="brackets" data-v-d696a183>})</span></div><div data-v-d696a183><span class="word" data-v-d696a183>console</span><span class="variable" data-v-d696a183>.log</span><span class="brackets" data-v-d696a183>(</span> <span class="word" data-v-d696a183>newArr</span><span class="brackets" data-v-d696a183>)</span></div>',5),Jf=K('<p class="fz28" data-v-d696a183></p><p class="fz28" data-v-d696a183></p><p class="fz28" data-v-d696a183></p><p class="fz28" data-v-d696a183></p><p class="fz28" data-v-d696a183></p><div id="threemethod006" class="articleCardTitle cor36 fz34" data-v-d696a183> 4. forEach() </div><p class="fz28" data-v-d696a183> forEach() 方法用於調用數組的每個元素, 並將元素傳遞給回調函數 </p><br data-v-d696a183><p class="fz28" data-v-d696a183>適合用來遍歷數組對象</p><div class="bgcVS" data-v-d696a183><div data-v-d696a183><span class="comment" data-v-d696a183>1.裡面幾個參數 2. 返回值返回什麼 3. 使用方法</span></div><br data-v-d696a183><div data-v-d696a183><span class="word" data-v-d696a183>arr</span><span class="variable" data-v-d696a183>.forEach</span><span class="brackets" data-v-d696a183>(</span><span class="cor36" data-v-d696a183>回調函數 </span><span class="brackets" data-v-d696a183>(</span><span class="word" data-v-d696a183>當前數組元素 , 當前元素索引號 , 數組本身</span><span class="brackets" data-v-d696a183>) {</span></div><div class="comment pTwo" data-v-d696a183>//函數體</div><div class="brackets" data-v-d696a183>}, thisValue )</div><br data-v-d696a183><div class="number" data-v-d696a183> 只遍歷 , 不返回值 , 加 return 返回 undefined </div><br data-v-d696a183><br data-v-d696a183><div data-v-d696a183><span class="function" data-v-d696a183>const </span><span class="word" data-v-d696a183>arr</span> <span class="then" data-v-d696a183>=</span><span class="brackets" data-v-d696a183>[</span><span class="src" data-v-d696a183>&quot;wayne&quot;,&quot;neo&quot;,&quot;jack&quot;</span><span class="brackets" data-v-d696a183>]</span></div><div data-v-d696a183><span class="word" data-v-d696a183>arr</span><span class="variable" data-v-d696a183>.forEach</span><span class="brackets" data-v-d696a183>(</span><span class="function" data-v-d696a183>function </span><span class="brackets" data-v-d696a183>(</span><span class="word" data-v-d696a183>item,index</span><span class="brackets" data-v-d696a183>){</span></div><div class="pTwo VSL" data-v-d696a183><span class="word" data-v-d696a183>console.</span><span class="variable" data-v-d696a183>log</span> <span class="brackets" data-v-d696a183>(</span><span class="word" data-v-d696a183>item</span> <span class="brackets" data-v-d696a183>) </span><span class="comment" data-v-d696a183>// wayne neo jack</span></div><div class="pTwo VSL" data-v-d696a183><span class="word" data-v-d696a183>console.</span><span class="variable" data-v-d696a183>log</span> <span class="brackets" data-v-d696a183>(</span><span class="word" data-v-d696a183>index</span> <span class="brackets" data-v-d696a183>) </span><span class="comment" data-v-d696a183>// 0 1 2</span></div><div class="brackets" data-v-d696a183>})</div><br data-v-d696a183><div class="number" data-v-d696a183>和 map 差在 他不返回數組</div><br data-v-d696a183><div data-v-d696a183><span class="function" data-v-d696a183>const </span><span class="word" data-v-d696a183>result</span> <span class="then" data-v-d696a183>=</span><span class="word" data-v-d696a183>arr</span><span class="variable" data-v-d696a183>.forEach</span><span class="brackets" data-v-d696a183>(</span><span class="function" data-v-d696a183>function </span><span class="brackets" data-v-d696a183>(</span><span class="word" data-v-d696a183>item,index</span><span class="brackets" data-v-d696a183>){</span></div><div class="pTwo VSL" data-v-d696a183><span class="word" data-v-d696a183>console.</span><span class="variable" data-v-d696a183>log</span> <span class="brackets" data-v-d696a183>(</span><span class="word" data-v-d696a183>item</span> <span class="brackets" data-v-d696a183>) </span><span class="comment" data-v-d696a183>// wayne neo jack</span></div><div class="pTwo VSL" data-v-d696a183><span class="word" data-v-d696a183>console.</span><span class="variable" data-v-d696a183>log</span> <span class="brackets" data-v-d696a183>(</span><span class="word" data-v-d696a183>index</span> <span class="brackets" data-v-d696a183>) </span><span class="comment" data-v-d696a183>// 0 1 2</span></div><div class="brackets" data-v-d696a183>})</div><div class="" data-v-d696a183><span class="word" data-v-d696a183>console.</span><span class="variable" data-v-d696a183>log</span> <span class="brackets" data-v-d696a183>(</span><span class="word" data-v-d696a183>result</span> <span class="brackets" data-v-d696a183>) </span><span class="comment" data-v-d696a183>// undefined</span></div><br data-v-d696a183><br data-v-d696a183><p data-v-d696a183>練習 假設 3 個 button 添加 點擊 事件</p><div data-v-d696a183><span class="function" data-v-d696a183>const </span><span class="word" data-v-d696a183>buttons</span> <span class="then" data-v-d696a183>=</span><span class="word" data-v-d696a183>document</span><span class="variable" data-v-d696a183>.querySelectorAll</span><span class="brackets" data-v-d696a183>(</span> <span class="src" data-v-d696a183>&quot;.btn&quot;</span><span class="brackets" data-v-d696a183>);</span></div><div data-v-d696a183><span class="word" data-v-d696a183>buttons</span><span class="variable" data-v-d696a183>.forEach</span><span class="brackets" data-v-d696a183>(</span><span class="function" data-v-d696a183>function </span><span class="brackets" data-v-d696a183>(</span> <span class="word" data-v-d696a183>button</span><span class="brackets" data-v-d696a183>){</span></div><div class="padTwo VSL" data-v-d696a183><span class="word" data-v-d696a183>button</span><span class="variable" data-v-d696a183>.addEventListener</span><span class="brackets" data-v-d696a183>(</span> <span class="src" data-v-d696a183>&quot;click&quot;</span><span class="then" data-v-d696a183>,</span><span class="function" data-v-d696a183>function </span><span class="brackets" data-v-d696a183>(){</span><div data-v-d696a183></div><div class="padTwo VSL" data-v-d696a183><span class="comment" data-v-d696a183>//...</span></div><div data-v-d696a183><span class="brackets" data-v-d696a183>})</span></div></div><div data-v-d696a183><span class="brackets" data-v-d696a183>})</span></div><br data-v-d696a183><br data-v-d696a183><p data-v-d696a183>練習 渲染 ul 列表</p><br data-v-d696a183><div data-v-d696a183><span class="function" data-v-d696a183>const </span><span class="word" data-v-d696a183>list</span> <span class="then" data-v-d696a183>=</span><span class="brackets" data-v-d696a183>[{</span></div><div class="padTwo VSL" data-v-d696a183><span class="word" data-v-d696a183>id:</span> <span class="src" data-v-d696a183>&quot;0001&quot;,</span><div data-v-d696a183><span class="word" data-v-d696a183>mame:</span> <span class="src" data-v-d696a183>&quot;wayne&quot;</span></div><div data-v-d696a183><span class="brackets" data-v-d696a183>},{</span></div><span class="word" data-v-d696a183>id:</span> <span class="src" data-v-d696a183>&quot;0002&quot;,</span><div data-v-d696a183><span class="word" data-v-d696a183>mame:</span> <span class="src" data-v-d696a183>&quot;jack&quot;</span></div><div data-v-d696a183><span class="brackets" data-v-d696a183>},{</span></div><span class="word" data-v-d696a183>id:</span> <span class="src" data-v-d696a183>&quot;0003&quot;,</span><div data-v-d696a183><span class="word" data-v-d696a183>mame:</span> <span class="src" data-v-d696a183>&quot;neo&quot;</span></div><div data-v-d696a183></div></div><div data-v-d696a183><span class="brackets" data-v-d696a183>}]</span></div><br data-v-d696a183><div data-v-d696a183><span class="then" data-v-d696a183>＜</span> <span class="number" data-v-d696a183>div </span><span class="function" data-v-d696a183>class </span> <span class="then" data-v-d696a183>=</span><span class="src" data-v-d696a183>&quot;list&quot;</span> <span class="then" data-v-d696a183>&gt;＜/ </span><span class="number" data-v-d696a183>div </span> <span class="then" data-v-d696a183>&gt;</span></div><div data-v-d696a183><span class="function" data-v-d696a183>let </span> <span class="word" data-v-d696a183>str</span><span class="then" data-v-d696a183>=</span> <span class="src" data-v-d696a183>&quot;&quot;</span></div><div data-v-d696a183><span class="word" data-v-d696a183>list</span><span class="variable" data-v-d696a183>.forEach</span><span class="brackets" data-v-d696a183>(</span> <span class="word" data-v-d696a183>item</span><span class="function" data-v-d696a183>=&gt;</span> <span class="brackets" data-v-d696a183>{</span></div><div class="padTwo VSL" data-v-d696a183><span class="word" data-v-d696a183>console</span> <span class="word" data-v-d696a183>.log</span><span class="brackets" data-v-d696a183>(</span> <span class="word" data-v-d696a183>item</span><span class="brackets" data-v-d696a183>)</span><span class="comment" data-v-d696a183>//每一個數組元素-&gt;物件</span><div data-v-d696a183><span class="word" data-v-d696a183>str</span> <span class="then" data-v-d696a183>+=</span><span class="src" data-v-d696a183>` ＜p&gt;</span><span class="then" data-v-d696a183>${</span><span class="word" data-v-d696a183>item.name</span> <span class="then" data-v-d696a183>}</span><span class="src" data-v-d696a183>＜/p&gt;`</span></div><div data-v-d696a183></div></div><div data-v-d696a183><span class="brackets" data-v-d696a183>})</span></div><div data-v-d696a183><span class="word" data-v-d696a183>document</span><span class="variable" data-v-d696a183>.querySelector</span><span class="brackets" data-v-d696a183>(</span> <span class="src" data-v-d696a183>&quot;.list&quot;</span><span class="brackets" data-v-d696a183>)</span><span class="variable" data-v-d696a183>.innerHTML</span><span class="then" data-v-d696a183>=</span> <span class="word" data-v-d696a183>str</span></div><br data-v-d696a183><p data-v-d696a183>改成 解構賦值</p><br data-v-d696a183><div data-v-d696a183><span class="word" data-v-d696a183>list</span><span class="variable" data-v-d696a183>.forEach</span><span class="brackets" data-v-d696a183>(</span> <span class="word" data-v-d696a183>item</span><span class="function" data-v-d696a183>=&gt;</span> <span class="brackets" data-v-d696a183>{</span></div><div class="padTwo VSL" data-v-d696a183><span class="function" data-v-d696a183>const </span><span class="brackets" data-v-d696a183>{</span> <span class="word" data-v-d696a183>name</span><span class="brackets" data-v-d696a183>}</span> <span class="then" data-v-d696a183>=</span><span class="word" data-v-d696a183>item</span><div data-v-d696a183><span class="word" data-v-d696a183>str</span> <span class="then" data-v-d696a183>+=</span><span class="src" data-v-d696a183>` ＜p&gt;</span><span class="then" data-v-d696a183>${</span><span class="word" data-v-d696a183>name</span> <span class="then" data-v-d696a183>}</span><span class="src" data-v-d696a183>＜/p&gt;`</span></div><div data-v-d696a183></div></div><div data-v-d696a183><span class="brackets" data-v-d696a183>})</span></div></div><p class="fz28" data-v-d696a183>1. forEach 主要是遍歷數組</p><p class="fz28" data-v-d696a183>2. 索引號可以不寫</p><div id="threemethod016" class="articleCardTitle cor36 fz34" data-v-d696a183> 4. filter() </div><p class="fz28" data-v-d696a183><span class="cor36" data-v-d696a183>返回</span> 一個符合條件 的 新陣列 <span class="cor17" data-v-d696a183>. . . </span><span class="cor36" data-v-d696a183>不影響 原陣列</span></p><br data-v-d696a183><p class="fz28" data-v-d696a183>🐕🐶🐕🐶.filter(🐶) &gt; 🐶🐶</p><div class="bgcVS" data-v-d696a183><div data-v-d696a183><span class="word" data-v-d696a183>arr</span><span class="variable" data-v-d696a183>.filter</span><span class="brackets" data-v-d696a183>(</span><span class="cor36" data-v-d696a183>回調函數</span><span class="brackets" data-v-d696a183>(</span><span class="word" data-v-d696a183>當前數組的值 , 索引值 , 陣列本身 </span><span class="brackets" data-v-d696a183>)</span> <span class="then" data-v-d696a183>,</span><span class="word" data-v-d696a183>thisValue</span> <span class="word" data-v-d696a183></span><span class="brackets" data-v-d696a183>)</span></div><br data-v-d696a183><p data-v-d696a183>不給 thisValue 則 指向 全局變量</p><br data-v-d696a183><div data-v-d696a183><span class="function" data-v-d696a183>let </span> <span class="word" data-v-d696a183>arr</span><span class="then" data-v-d696a183>=</span> <span class="brackets" data-v-d696a183>[</span><span class="number" data-v-d696a183>1,2,1,6,7,8,1,2</span><span class="brackets" data-v-d696a183>]</span></div><br data-v-d696a183><div data-v-d696a183><span class="function" data-v-d696a183>const </span><span class="variable" data-v-d696a183>filter</span> <span class="then" data-v-d696a183>=</span><span class="word" data-v-d696a183>arr</span><span class="variable" data-v-d696a183>.filter</span><span class="brackets" data-v-d696a183>(</span><span class="function" data-v-d696a183>function </span><span class="brackets" data-v-d696a183>(</span> <span class="word" data-v-d696a183>age</span><span class="brackets" data-v-d696a183>){</span></div><div class="padTwo VSL" data-v-d696a183><span class="then" data-v-d696a183>return </span> <span class="word" data-v-d696a183>age</span><span class="then" data-v-d696a183>&gt;=</span> <span class="number" data-v-d696a183>18;</span><div data-v-d696a183></div></div><div data-v-d696a183><span class="brackets" data-v-d696a183>})</span></div><div data-v-d696a183><span class="word" data-v-d696a183>console</span><span class="variable" data-v-d696a183>.log</span><span class="brackets" data-v-d696a183>(</span><span class="variable" data-v-d696a183>filter</span><span class="brackets" data-v-d696a183>)</span></div><br data-v-d696a183><div data-v-d696a183><span class="comment" data-v-d696a183>//過濾奇數</span></div><div data-v-d696a183><span class="word" data-v-d696a183>arr</span><span class="variable" data-v-d696a183>.filter</span><span class="brackets" data-v-d696a183>(</span><span class="function" data-v-d696a183>function </span><span class="brackets" data-v-d696a183>(</span> <span class="word" data-v-d696a183>item</span><span class="brackets" data-v-d696a183>){</span></div><div class="padTwo VSL" data-v-d696a183><span class="function" data-v-d696a183>let </span><span class="word" data-v-d696a183>result</span> <span class="then" data-v-d696a183>=</span><span class="word" data-v-d696a183>item</span> <span class="then" data-v-d696a183>%</span><span class="number" data-v-d696a183>2</span> <span class="then" data-v-d696a183>!==</span><span class="number" data-v-d696a183>0</span><div data-v-d696a183><span class="then" data-v-d696a183>return </span><span class="word" data-v-d696a183>result</span></div><div data-v-d696a183></div></div><div data-v-d696a183><span class="brackets" data-v-d696a183>})</span></div><br data-v-d696a183><div data-v-d696a183><span class="comment" data-v-d696a183>//數組去重</span></div><div data-v-d696a183><span class="word" data-v-d696a183>arr</span><span class="variable" data-v-d696a183>.filter</span><span class="brackets" data-v-d696a183>(</span><span class="function" data-v-d696a183>function </span><span class="brackets" data-v-d696a183>(</span><span class="word" data-v-d696a183>item,index,self</span><span class="brackets" data-v-d696a183>)</span></div><div class="padTwo VSL" data-v-d696a183><span class="function" data-v-d696a183>let </span><span class="word" data-v-d696a183>newIndex</span> <span class="then" data-v-d696a183>=</span><span class="word" data-v-d696a183>self</span><span class="variable" data-v-d696a183>.indexOf</span><span class="brackets" data-v-d696a183>(</span> <span class="word" data-v-d696a183>current</span><span class="brackets" data-v-d696a183>)</span><div data-v-d696a183><span class="then" data-v-d696a183>return </span><span class="word" data-v-d696a183>newIndex</span><span class="then" data-v-d696a183>===</span> <span class="word" data-v-d696a183>index</span></div><div data-v-d696a183></div></div><div data-v-d696a183><span class="brackets" data-v-d696a183>})</span></div><div class="comment" data-v-d696a183>//item newIndex index =&gt; 取出</div><div class="comment" data-v-d696a183>// 1 0 0 =&gt; 1</div><div class="comment" data-v-d696a183>// 2 1 1 =&gt; 2</div><div class="comment" data-v-d696a183>// 1 0 3 !=&gt; 不輸出</div></div><div id="threemethod007" class="articleCardTitle cor36 fz34" data-v-d696a183> 4. join() </div><p class="fz28" data-v-d696a183>用於把 數組中的 所有元素 轉換一個字串</p><div class="bgcVS" data-v-d696a183><div data-v-d696a183><span class="function" data-v-d696a183>const </span><span class="word" data-v-d696a183>arr</span> <span class="then" data-v-d696a183>=</span><span class="brackets" data-v-d696a183>[</span> <span class="src" data-v-d696a183>&quot;red&quot;</span><span class="then" data-v-d696a183>,</span> <span class="src" data-v-d696a183>&quot;blue&quot;</span><span class="then" data-v-d696a183>,</span> <span class="src" data-v-d696a183>&quot;pink&quot;</span><span class="brackets" data-v-d696a183>]</span></div><div data-v-d696a183><span class="word" data-v-d696a183>console.</span><span class="variable" data-v-d696a183>log</span> <span class="brackets" data-v-d696a183>(</span><span class="word" data-v-d696a183>arr.join</span><span class="brackets" data-v-d696a183>())</span><span class="comment" data-v-d696a183>//小括號為空,則逗號分割</span></div><div data-v-d696a183><span class="word" data-v-d696a183>console.</span><span class="variable" data-v-d696a183>log</span> <span class="brackets" data-v-d696a183>(</span><span class="word" data-v-d696a183>arr.join</span><span class="brackets" data-v-d696a183>(</span> <span class="src" data-v-d696a183>&quot;&quot;</span><span class="brackets" data-v-d696a183>))</span><span class="comment" data-v-d696a183>//redbluepink</span></div></div><div id="threemethod008" class="articleCardTitle cor36 fz34" data-v-d696a183> 4. reduce </div><p class="fz28" data-v-d696a183>reduce 返回累計處理的結果, 常用於求和</p><div class="bgcVS" data-v-d696a183><div data-v-d696a183><span class="commsnt" data-v-d696a183>1.裡面幾個參數 2. 返回值返回什麼 3. 使用方法</span></div><br data-v-d696a183><div data-v-d696a183><span class="word" data-v-d696a183>arr</span><span class="variable" data-v-d696a183>.reduce</span><span class="brackets" data-v-d696a183>(</span><span class="cor36" data-v-d696a183>回調函數 </span><span class="brackets" data-v-d696a183>(</span><span class="word" data-v-d696a183>上一次累加器返回值,執行累加器當前元素值,當前數組索引,數組本身</span><span class="brackets" data-v-d696a183>){},</span><span class="word" data-v-d696a183>初始值</span><span class="brackets" data-v-d696a183>)</span></div><br data-v-d696a183><br data-v-d696a183><div data-v-d696a183><span class="function" data-v-d696a183>const </span><span class="word" data-v-d696a183>arr</span> <span class="then" data-v-d696a183>=</span><span class="brackets" data-v-d696a183>[</span> <span class="number" data-v-d696a183>1,5,8</span><span class="brackets" data-v-d696a183>]</span></div><br data-v-d696a183><div class="comment" data-v-d696a183>//1.沒初始值 , 以數組第 1 個值 來運算</div><div data-v-d696a183><span class="word" data-v-d696a183>arr</span><span class="variable" data-v-d696a183>.reduce</span><span class="brackets" data-v-d696a183>(</span><span class="function" data-v-d696a183>function </span><span class="brackets" data-v-d696a183>(</span><span class="word" data-v-d696a183>prev,current</span><span class="brackets" data-v-d696a183>){</span></div><div class="pTwo" data-v-d696a183><span class="then" data-v-d696a183>return </span> <span class="word" data-v-d696a183>prev</span><span class="then" data-v-d696a183>+</span> <span class="word" data-v-d696a183>current</span></div><div class="brackets" data-v-d696a183>})</div><div data-v-d696a183><span class="word" data-v-d696a183>console.</span><span class="variable" data-v-d696a183>log</span> <span class="brackets" data-v-d696a183>(</span><span class="word" data-v-d696a183>total</span> <span class="brackets" data-v-d696a183>) </span><span class="comment" data-v-d696a183>// 14</span></div><br data-v-d696a183><div class="comment" data-v-d696a183> //2.有初始值 , 第 1 個值 用你傳的初始值 來運算 </div><div data-v-d696a183><span class="word" data-v-d696a183>arr</span><span class="variable" data-v-d696a183>.reduce</span><span class="brackets" data-v-d696a183>(</span><span class="function" data-v-d696a183>function </span><span class="brackets" data-v-d696a183>(</span><span class="word" data-v-d696a183>prev,current</span><span class="brackets" data-v-d696a183>){</span></div><div class="pTwo" data-v-d696a183><span class="then" data-v-d696a183>return </span> <span class="word" data-v-d696a183>prev</span><span class="then" data-v-d696a183>+</span> <span class="word" data-v-d696a183>current</span></div><div data-v-d696a183><span class="brackets" data-v-d696a183>},</span> <span class="number" data-v-d696a183>10</span><span class="brackets" data-v-d696a183>)</span></div><div data-v-d696a183><span class="word" data-v-d696a183>console.</span><span class="variable" data-v-d696a183>log</span> <span class="brackets" data-v-d696a183>(</span><span class="word" data-v-d696a183>total</span> <span class="brackets" data-v-d696a183>) </span><span class="comment" data-v-d696a183>// 24</span></div><br data-v-d696a183><div class="comment" data-v-d696a183>//3.匿名函數</div><div data-v-d696a183><span class="function" data-v-d696a183>const </span><span class="word" data-v-d696a183>total</span> <span class="then" data-v-d696a183>=</span><span class="word" data-v-d696a183>arr</span><span class="variable" data-v-d696a183>.reduce</span><span class="brackets" data-v-d696a183>((</span><span class="word" data-v-d696a183>prev,current</span><span class="brackets" data-v-d696a183>)</span> <span class="function" data-v-d696a183>=&gt;</span><span class="word" data-v-d696a183>prev</span> <span class="then" data-v-d696a183>+</span><span class="word" data-v-d696a183>current,</span> <span class="number" data-v-d696a183>10</span><span class="brackets" data-v-d696a183>)</span></div><div data-v-d696a183><span class="word" data-v-d696a183>console.</span><span class="variable" data-v-d696a183>log</span> <span class="brackets" data-v-d696a183>(</span><span class="word" data-v-d696a183>total</span> <span class="brackets" data-v-d696a183>) </span><span class="comment" data-v-d696a183>// 24</span></div></div><p class="fz28" data-v-d696a183>reduce 執行過程</p><p class="fz28" data-v-d696a183> 1. 如果 沒有 起始值 , 則 上一次值 以 數組的 第一個 數組元素 的值 </p><p class="fz28" data-v-d696a183> 2. 每一次循環 , 把返回值 做為 下一次循環的 上一次值 </p><p class="fz28" data-v-d696a183>3. 如果 有 起始值, 則 起始值 做為 上一次值</p><div class="bgcVS" data-v-d696a183><div data-v-d696a183><span class="function" data-v-d696a183>const </span><span class="word" data-v-d696a183>arr</span> <span class="then" data-v-d696a183>=</span><span class="brackets" data-v-d696a183>[{</span></div><div class="pTwo VSL" data-v-d696a183><span class="word" data-v-d696a183>name:</span> <span class="src" data-v-d696a183>&quot;wayne&quot;</span></div><div class="pTwo VSL" data-v-d696a183><span class="word" data-v-d696a183>number:</span> <span class="number" data-v-d696a183>1000</span></div><div class="brackets" data-v-d696a183>}, {</div><div class="pTwo VSL" data-v-d696a183><span class="word" data-v-d696a183>name:</span> <span class="src" data-v-d696a183>&quot;neo&quot;</span></div><div class="pTwo VSL" data-v-d696a183><span class="word" data-v-d696a183>number:</span> <span class="number" data-v-d696a183>2000</span></div><div class="brackets" data-v-d696a183>}, {</div><div class="pTwo VSL" data-v-d696a183><span class="word" data-v-d696a183>name:</span> <span class="src" data-v-d696a183>&quot;jack&quot;</span></div><div class="pTwo VSL" data-v-d696a183><span class="word" data-v-d696a183>number:</span> <span class="number" data-v-d696a183>3000</span></div><div class="brackets" data-v-d696a183>} ]</div><br data-v-d696a183><div data-v-d696a183><span class="function" data-v-d696a183>const </span><span class="word" data-v-d696a183>total</span> <span class="then" data-v-d696a183>=</span><span class="word" data-v-d696a183>arr</span><span class="variable" data-v-d696a183>.reduce</span><span class="brackets" data-v-d696a183>((</span><span class="word" data-v-d696a183>prev,current</span><span class="brackets" data-v-d696a183>)</span> <span class="function" data-v-d696a183>=&gt;</span><span class="brackets" data-v-d696a183>{</span></div><div class="pTwo" data-v-d696a183><span class="then" data-v-d696a183>return </span> <span class="word" data-v-d696a183>prev</span><span class="then" data-v-d696a183>+</span><span class="word" data-v-d696a183>current.number</span></div><div data-v-d696a183><span class="brackets" data-v-d696a183>},</span> <span class="number" data-v-d696a183>0</span><span class="brackets" data-v-d696a183>) </span><span class="comment" data-v-d696a183>// 不寫出使值則以數組第一個元素{}為初始值</span></div><div data-v-d696a183><span class="word" data-v-d696a183>console.</span><span class="variable" data-v-d696a183>log</span> <span class="brackets" data-v-d696a183>(</span><span class="word" data-v-d696a183>total</span> <span class="brackets" data-v-d696a183>) </span><span class="comment" data-v-d696a183>// 6000</span></div><br data-v-d696a183><p data-v-d696a183>數字 + 30% 怎麼改?</p><br data-v-d696a183><div data-v-d696a183><span class="function" data-v-d696a183>const </span><span class="word" data-v-d696a183>total</span> <span class="then" data-v-d696a183>=</span><span class="word" data-v-d696a183>arr</span><span class="variable" data-v-d696a183>.reduce</span><span class="brackets" data-v-d696a183>((</span><span class="word" data-v-d696a183>prev,current</span><span class="brackets" data-v-d696a183>)</span> <span class="function" data-v-d696a183>=&gt;</span><span class="word" data-v-d696a183>prev</span><span class="then" data-v-d696a183>+</span><span class="word" data-v-d696a183>current.number </span><span class="then" data-v-d696a183>* </span><span class="number" data-v-d696a183>1.3 , 0</span><span class="brackets" data-v-d696a183>) </span></div></div><div id="threemethod009" class="articleCardTitle cor36 fz34" data-v-d696a183> 4. find </div><p class="fz28" data-v-d696a183> 查找陣列裡 , 第一個滿足條件的值 , 並把它 <span class="cor36" data-v-d696a183>返回</span></p><br data-v-d696a183><p class="fz28" data-v-d696a183>🐕🐶🐕🐕.find(🐶) &gt; 🐶</p><div class="bgcVS" data-v-d696a183><div data-v-d696a183><span class="comment" data-v-d696a183>1.裡面幾個參數 2. 返回值返回什麼 3. 使用方法</span></div><br data-v-d696a183><div data-v-d696a183><span class="word" data-v-d696a183>arr</span> <span class="variable" data-v-d696a183>.find</span><span class="brackets" data-v-d696a183>(</span><span class="cor36" data-v-d696a183>回調函數</span><span class="brackets" data-v-d696a183>(</span><span class="word" data-v-d696a183>item,index,arr</span><span class="brackets" data-v-d696a183>)</span> <span class="then" data-v-d696a183>,</span><span class="word" data-v-d696a183>thisArgs</span> <span class="brackets" data-v-d696a183>)</span></div><br data-v-d696a183> # <div data-v-d696a183><span class="function" data-v-d696a183>const </span><span class="word" data-v-d696a183>arr</span> <span class="then" data-v-d696a183>=</span><span class="brackets" data-v-d696a183>[</span><span class="src" data-v-d696a183>&quot;wayne&quot;,&quot;neo&quot;,&quot;jack&quot;</span><span class="brackets" data-v-d696a183>]</span></div><div data-v-d696a183><span class="function" data-v-d696a183>const </span><span class="word" data-v-d696a183>re </span> <span class="then" data-v-d696a183>= </span><span class="word" data-v-d696a183>arr</span><span class="variable" data-v-d696a183>.find</span><span class="brackets" data-v-d696a183>(</span><span class="function" data-v-d696a183>function </span><span class="brackets" data-v-d696a183>(</span><span class="word" data-v-d696a183>item</span><span class="brackets" data-v-d696a183>){</span></div><div class="pTwo" data-v-d696a183><span class="then" data-v-d696a183>return </span> <span class="word" data-v-d696a183>item</span><span class="then" data-v-d696a183>===</span> <span class="src" data-v-d696a183>&quot;wayne&quot;</span></div><div class="brackets" data-v-d696a183>})</div><div data-v-d696a183><span class="word" data-v-d696a183>console.</span><span class="variable" data-v-d696a183>log</span> <span class="brackets" data-v-d696a183>(</span><span class="word" data-v-d696a183>re</span> <span class="brackets" data-v-d696a183>); </span><span class="comment" data-v-d696a183>// wayne</span></div><br data-v-d696a183><br data-v-d696a183><p data-v-d696a183>物件中 , 我只想要 wayne 的物件 怎麼做?</p><br data-v-d696a183><div data-v-d696a183><span class="function" data-v-d696a183>const </span><span class="word" data-v-d696a183>arr</span> <span class="then" data-v-d696a183>= </span><span class="brackets" data-v-d696a183>[ {</span></div><div class="pTwo VSL" data-v-d696a183><span class="word" data-v-d696a183>name:</span> <span class="src" data-v-d696a183>&quot;wayne&quot;</span></div><div class="pTwo VSL" data-v-d696a183><span class="word" data-v-d696a183>number:</span> <span class="number" data-v-d696a183>1000</span></div><div class="brackets" data-v-d696a183>}, {</div><div class="pTwo VSL" data-v-d696a183><span class="word" data-v-d696a183>name:</span> <span class="src" data-v-d696a183>&quot;neo&quot;</span></div><div class="pTwo VSL" data-v-d696a183><span class="word" data-v-d696a183>number:</span> <span class="number" data-v-d696a183>2000</span></div><div class="brackets" data-v-d696a183>}, {</div><div class="pTwo VSL" data-v-d696a183><span class="word" data-v-d696a183>name:</span> <span class="src" data-v-d696a183>&quot;jack&quot;</span></div><div class="pTwo VSL" data-v-d696a183><span class="word" data-v-d696a183>number:</span> <span class="number" data-v-d696a183>3000</span></div><div class="brackets" data-v-d696a183>} ]</div><br data-v-d696a183><br data-v-d696a183><div data-v-d696a183><span class="word" data-v-d696a183>arr.</span> <span class="variable" data-v-d696a183>find</span><span class="brackets" data-v-d696a183>(</span><span class="function" data-v-d696a183>function </span><span class="brackets" data-v-d696a183>(</span> <span class="word" data-v-d696a183>item</span><span class="brackets" data-v-d696a183>){</span></div><div class="pTwo VSL" data-v-d696a183><span class="word" data-v-d696a183>console.</span><span class="variable" data-v-d696a183>log</span><span class="brackets" data-v-d696a183>(</span> <span class="word" data-v-d696a183>item</span><span class="brackets" data-v-d696a183>)</span><span class="comment" data-v-d696a183>//{name:&quot;wayne&quot;,number:1000},{...}</span></div><div class="pTwo VSL" data-v-d696a183><span class="word" data-v-d696a183>console.</span><span class="variable" data-v-d696a183>log</span><span class="brackets" data-v-d696a183>(</span><span class="word" data-v-d696a183>item.name</span><span class="brackets" data-v-d696a183>)</span><span class="comment" data-v-d696a183>//wayne neo jack</span></div><div class="pTwo VSL" data-v-d696a183><span class="word" data-v-d696a183>console.</span><span class="variable" data-v-d696a183>log</span> <span class="brackets" data-v-d696a183>(</span><span class="number" data-v-d696a183>1</span> <span class="brackets" data-v-d696a183>)</span><span class="comment" data-v-d696a183>//打印1次//找到數組中第一個滿足就不再找了</span></div><div class="pTwo VSL" data-v-d696a183><span class="then" data-v-d696a183>return </span><span class="word" data-v-d696a183>item.name</span> <span class="then" data-v-d696a183>===</span><span class="src" data-v-d696a183>&quot;wayne&quot;</span><span class="comment" data-v-d696a183>//返回這條物件 數組元素</span></div><div class="brackets" data-v-d696a183>})</div><br data-v-d696a183><br data-v-d696a183><div data-v-d696a183><span class="function" data-v-d696a183>const </span> <span class="word" data-v-d696a183>mi</span><span class="then" data-v-d696a183>=</span><span class="word" data-v-d696a183>arr.</span> <span class="variable" data-v-d696a183>find</span><span class="brackets" data-v-d696a183>(</span><span class="function" data-v-d696a183>function </span><span class="brackets" data-v-d696a183>(</span> <span class="word" data-v-d696a183>item</span><span class="brackets" data-v-d696a183>){</span></div><div class="pTwo VSL" data-v-d696a183><span class="then" data-v-d696a183>return </span><span class="word" data-v-d696a183>item.name</span> <span class="then" data-v-d696a183>===</span><span class="src" data-v-d696a183>&quot;wayne&quot;</span><span class="comment" data-v-d696a183>//返回這條物件 數組元素</span></div><div class="brackets" data-v-d696a183>})</div><div data-v-d696a183><span class="word" data-v-d696a183>console.</span><span class="variable" data-v-d696a183>log</span> <span class="brackets" data-v-d696a183>(</span><span class="word" data-v-d696a183>mi</span> <span class="brackets" data-v-d696a183>)</span><span class="comment" data-v-d696a183>//{name:&quot;wayne&quot;,number:1000}</span></div><br data-v-d696a183><br data-v-d696a183><div data-v-d696a183><span class="function" data-v-d696a183>const </span> <span class="word" data-v-d696a183>mi</span><span class="then" data-v-d696a183>=</span> <span class="word" data-v-d696a183>arr.</span><span class="variable" data-v-d696a183>find</span><span class="brackets" data-v-d696a183>(</span> <span class="word" data-v-d696a183>item</span><span class="function" data-v-d696a183>=&gt;</span><span class="word" data-v-d696a183>item.name</span> <span class="then" data-v-d696a183>===</span><span class="src" data-v-d696a183>&quot;wayne&quot;</span> <span class="brackets" data-v-d696a183>)</span></div><div data-v-d696a183><span class="word" data-v-d696a183>console.</span><span class="variable" data-v-d696a183>log</span> <span class="brackets" data-v-d696a183>(</span><span class="word" data-v-d696a183>mi</span> <span class="brackets" data-v-d696a183>)</span><span class="comment" data-v-d696a183>//{name:&quot;wayne&quot;,number:1000}</span></div></div><div id="threemethod010" class="articleCardTitle cor36 fz34" data-v-d696a183> 4. slice </div><p class="fz28" data-v-d696a183>用來擷取片段 , 數組 或 字串 擷取一部分</p><br data-v-d696a183><p class="fz28" data-v-d696a183>不會修改原數組</p><br data-v-d696a183><div class="bgcVS" data-v-d696a183><div data-v-d696a183><span class="variable" data-v-d696a183>.slice</span><span class="brackets" data-v-d696a183>(</span><span class="number" data-v-d696a183>2個參數可選</span><span class="brackets" data-v-d696a183>)</span></div><div data-v-d696a183><span class="variable" data-v-d696a183>.slice</span><span class="brackets" data-v-d696a183>(</span><span class="word" data-v-d696a183>擷取時起始位置,終止位置</span><span class="brackets" data-v-d696a183>)</span></div><br data-v-d696a183><br data-v-d696a183><div data-v-d696a183><span class="function" data-v-d696a183>let </span> <span class="word" data-v-d696a183>arr</span><span class="then" data-v-d696a183>=</span> <span class="brackets" data-v-d696a183>[</span><span class="number" data-v-d696a183>1,2,3,4,5</span><span class="brackets" data-v-d696a183>]</span></div><div data-v-d696a183><span class="function" data-v-d696a183>let </span> <span class="word" data-v-d696a183>str</span><span class="then" data-v-d696a183>=</span> <span class="src" data-v-d696a183>&quot;12345&quot;</span></div><br data-v-d696a183><div data-v-d696a183><span class="comment" data-v-d696a183>//沒參數,直接把原數組or原字串整個拷貝成新數組並返回</span></div><div data-v-d696a183><span class="word" data-v-d696a183>console</span><span class="variable" data-v-d696a183>.log</span><span class="brackets" data-v-d696a183>(</span> <span class="word" data-v-d696a183>arr</span><span class="variable" data-v-d696a183>.slice</span><span class="brackets" data-v-d696a183>()) </span><span class="comment" data-v-d696a183>//[1,2,3,4,5]</span></div><br data-v-d696a183><div data-v-d696a183><span class="word" data-v-d696a183>console</span><span class="variable" data-v-d696a183>.log</span><span class="brackets" data-v-d696a183>(</span> <span class="word" data-v-d696a183>arr</span><span class="variable" data-v-d696a183>.slice</span><span class="brackets" data-v-d696a183>(</span> <span class="number" data-v-d696a183>1</span><span class="brackets" data-v-d696a183>))</span><span class="comment" data-v-d696a183>//[2,3,4,5]//1當起始位置,數組末最終</span></div><br data-v-d696a183><div data-v-d696a183><span class="word" data-v-d696a183>console</span><span class="variable" data-v-d696a183>.log</span><span class="brackets" data-v-d696a183>(</span> <span class="word" data-v-d696a183>arr</span><span class="variable" data-v-d696a183>.slice</span><span class="brackets" data-v-d696a183>(</span> <span class="number" data-v-d696a183>-1</span><span class="brackets" data-v-d696a183>))</span><span class="comment" data-v-d696a183>//[5]//從最後一項倒數,-1是5</span></div><br data-v-d696a183><div data-v-d696a183><span class="word" data-v-d696a183>console</span><span class="variable" data-v-d696a183>.log</span><span class="brackets" data-v-d696a183>(</span> <span class="word" data-v-d696a183>arr</span><span class="variable" data-v-d696a183>.slice</span><span class="brackets" data-v-d696a183>(</span> <span class="number" data-v-d696a183>1,2</span><span class="brackets" data-v-d696a183>))</span><span class="comment" data-v-d696a183>//[2]//包括起始位置下標,不包括終止位置下標</span></div><br data-v-d696a183><div data-v-d696a183><span class="word" data-v-d696a183>console</span><span class="variable" data-v-d696a183>.log</span><span class="brackets" data-v-d696a183>(</span> <span class="word" data-v-d696a183>arr</span><span class="variable" data-v-d696a183>.slice</span><span class="brackets" data-v-d696a183>(</span> <span class="number" data-v-d696a183>-5,-1</span><span class="brackets" data-v-d696a183>))</span><span class="comment" data-v-d696a183>//[1,2,3,4]</span><span class="word" data-v-d696a183></span></div><br data-v-d696a183><div data-v-d696a183><span class="word" data-v-d696a183>console</span><span class="variable" data-v-d696a183>.log</span><span class="brackets" data-v-d696a183>(</span> <span class="word" data-v-d696a183>str</span><span class="variable" data-v-d696a183>.slice</span><span class="brackets" data-v-d696a183>(</span> <span class="number" data-v-d696a183>-5,-1</span><span class="brackets" data-v-d696a183>))</span><span class="comment" data-v-d696a183>//1234</span> <span class="word" data-v-d696a183></span></div></div><div id="threemethod011" class="articleCardTitle cor36 fz34" data-v-d696a183> 4. splice </div><p class="fz28" data-v-d696a183> 能刪改數組 , 會返回由 刪除元素 組成的 數組 , 沒刪返回 空數組 </p><p class="fz28" data-v-d696a183>注意 會修改原數組</p><br data-v-d696a183><div class="bgcVS" data-v-d696a183><div data-v-d696a183><span class="variable" data-v-d696a183>.splice</span><span class="brackets" data-v-d696a183>(</span><span class="number" data-v-d696a183>3 個參數可選</span><span class="brackets" data-v-d696a183>)</span></div><div data-v-d696a183><span class="word" data-v-d696a183>arr</span><span class="variable" data-v-d696a183>.splice</span><span class="brackets" data-v-d696a183>(</span><span class="word" data-v-d696a183>起始位置, 需要刪除元素的個數, 插入的值 </span><span class="brackets" data-v-d696a183>)</span></div><br data-v-d696a183><div data-v-d696a183><span class="function" data-v-d696a183>let </span> <span class="word" data-v-d696a183>arr</span><span class="then" data-v-d696a183>=</span> <span class="brackets" data-v-d696a183>[</span><span class="number" data-v-d696a183>1,2,3,4,5,6,7,8</span><span class="brackets" data-v-d696a183>]</span></div><div data-v-d696a183><span class="word" data-v-d696a183>console</span><span class="variable" data-v-d696a183>.log</span><span class="brackets" data-v-d696a183>(</span> <span class="word" data-v-d696a183>arr</span><span class="brackets" data-v-d696a183>())</span><span class="comment" data-v-d696a183>//[1,2,3,4,5,6,7,8]</span></div><div data-v-d696a183><span class="word" data-v-d696a183>console</span><span class="variable" data-v-d696a183>.log</span><span class="brackets" data-v-d696a183>(</span> <span class="word" data-v-d696a183>arr</span><span class="variable" data-v-d696a183>.splice</span><span class="brackets" data-v-d696a183>()) </span><div data-v-d696a183><span class="comment" data-v-d696a183>//[] //返回由刪除元素組成的數組(沒刪返回空數組)</span></div></div><br data-v-d696a183><div data-v-d696a183><span class="word" data-v-d696a183>console</span><span class="variable" data-v-d696a183>.log</span><span class="brackets" data-v-d696a183>(</span> <span class="word" data-v-d696a183>arr</span><span class="variable" data-v-d696a183>.splice</span><span class="brackets" data-v-d696a183>(</span> <span class="word" data-v-d696a183>-2</span><span class="brackets" data-v-d696a183>))</span><span class="comment" data-v-d696a183>//[7,8]</span></div><div data-v-d696a183><span class="word" data-v-d696a183>console</span><span class="variable" data-v-d696a183>.log</span><span class="brackets" data-v-d696a183>(</span> <span class="word" data-v-d696a183>arr</span><span class="variable" data-v-d696a183>.splice</span><span class="brackets" data-v-d696a183>(</span> <span class="number" data-v-d696a183>4</span><span class="brackets" data-v-d696a183>))</span><span class="comment" data-v-d696a183>//[5,6,7,8]</span></div><div data-v-d696a183><span class="word" data-v-d696a183>console</span><span class="variable" data-v-d696a183>.log</span><span class="brackets" data-v-d696a183>(</span> <span class="word" data-v-d696a183>arr</span><span class="brackets" data-v-d696a183>)</span><span class="comment" data-v-d696a183>//[1,2,3,4]</span></div><br data-v-d696a183><br data-v-d696a183><div data-v-d696a183><span class="function" data-v-d696a183>let </span> <span class="word" data-v-d696a183>arr2</span><span class="then" data-v-d696a183>=</span> <span class="brackets" data-v-d696a183>[</span><span class="number" data-v-d696a183>1,2,3,4,5,6,7,8</span><span class="brackets" data-v-d696a183>]</span></div><div data-v-d696a183><span class="comment" data-v-d696a183>//console.log(arr2.splice(0,-2))//第2個不合法的值,不刪除,回傳[]</span></div><div data-v-d696a183><span class="word" data-v-d696a183>console</span><span class="variable" data-v-d696a183>.log</span><span class="brackets" data-v-d696a183>(</span> <span class="word" data-v-d696a183>arr2</span><span class="variable" data-v-d696a183>.splice</span><span class="brackets" data-v-d696a183>(</span> <span class="number" data-v-d696a183>0,6</span><span class="brackets" data-v-d696a183>))</span><span class="comment" data-v-d696a183>//[1,2,3,4,5,6]</span></div><div data-v-d696a183><span class="word" data-v-d696a183>console</span><span class="variable" data-v-d696a183>.log</span><span class="brackets" data-v-d696a183>(</span> <span class="word" data-v-d696a183>arr2</span><span class="brackets" data-v-d696a183>)</span><span class="comment" data-v-d696a183>//[7,8]</span></div><br data-v-d696a183><br data-v-d696a183><div data-v-d696a183><span class="function" data-v-d696a183>let </span> <span class="word" data-v-d696a183>arr3</span><span class="then" data-v-d696a183>=</span> <span class="brackets" data-v-d696a183>[</span><span class="number" data-v-d696a183>1,2,3,4,5,6,7,8</span><span class="brackets" data-v-d696a183>]</span></div><div data-v-d696a183><span class="word" data-v-d696a183>console</span><span class="variable" data-v-d696a183>.log</span><span class="brackets" data-v-d696a183>(</span> <span class="word" data-v-d696a183>arr3</span><span class="variable" data-v-d696a183>.splice</span><span class="brackets" data-v-d696a183>(</span> <span class="number" data-v-d696a183>0,0,</span><span class="src" data-v-d696a183>&quot;a&quot;</span> <span class="then" data-v-d696a183>,</span><span class="src" data-v-d696a183>&quot;b&quot;</span> <span class="brackets" data-v-d696a183>))</span></div><div data-v-d696a183><span class="comment" data-v-d696a183>//[&quot;a&quot;,&quot;b&quot;,1,2,3,4,5,6,7,8]</span></div></div><table class="fz30" data-v-d696a183><tr data-v-d696a183><td data-v-d696a183><div class="pad20" data-v-d696a183></div></td><td data-v-d696a183><div class="pad20" data-v-d696a183>slice</div></td><td data-v-d696a183><div class="pad20" data-v-d696a183>splice</div></td></tr><tr data-v-d696a183><td data-v-d696a183><div class="pad20" data-v-d696a183>原數組</div></td><td data-v-d696a183><div class="pad20" data-v-d696a183>不改變</div></td><td data-v-d696a183><div class="pad20" data-v-d696a183>會改原數組</div></td></tr><tr data-v-d696a183><td data-v-d696a183><div class="pad20" data-v-d696a183>沒傳參數</div></td><td data-v-d696a183><div class="pad20" data-v-d696a183>返回原數組</div></td><td data-v-d696a183><div class="pad20" data-v-d696a183><div class="" data-v-d696a183>返回由刪除元素</div><div class="" data-v-d696a183>組成的數組</div><div class="" data-v-d696a183>沒刪返回空</div></div></td></tr><tr data-v-d696a183><td data-v-d696a183><div class="pad20" data-v-d696a183>參數一個時</div></td><td data-v-d696a183><div class="pad20" data-v-d696a183>一樣</div></td><td data-v-d696a183><div class="pad20" data-v-d696a183>一樣</div></td></tr><tr data-v-d696a183><td data-v-d696a183><div class="pad20" data-v-d696a183></div></td><td data-v-d696a183><div class="pad20" data-v-d696a183></div></td><td data-v-d696a183><div class="pad20" data-v-d696a183></div></td></tr><tr data-v-d696a183><td data-v-d696a183><div class="pad20" data-v-d696a183></div></td><td data-v-d696a183><div class="pad20" data-v-d696a183></div></td><td data-v-d696a183><div class="pad20" data-v-d696a183></div></td></tr></table><div id="threemethod012" class="articleCardTitle cor36 fz34" data-v-d696a183> 4. every &amp; some <span class="spo marL100" data-v-d696a183>回調</span></div><p class="fz28" data-v-d696a183> every 判斷 數組中 每個元素 是否都符合條件, 都符合返回 true, 否返回 false </p><br data-v-d696a183><p class="fz28" data-v-d696a183>🐕🐶🐕🐕.every(🐕) &gt; false</p><br data-v-d696a183><br data-v-d696a183><p class="fz28" data-v-d696a183> some 判斷 數組中 每個元素 是否有一些 滿足 傳入條件 , 有返回 true </p><br data-v-d696a183><p class="fz28" data-v-d696a183>🐕🐶🐶🐕.some(🐶) &gt; true</p><div class="bgcVS" data-v-d696a183><div data-v-d696a183><span class="comment" data-v-d696a183>1.裡面幾個參數 2. 返回值返回什麼 3. 使用方法</span></div><br data-v-d696a183><div data-v-d696a183><span class="word" data-v-d696a183>arr</span><span class="variable" data-v-d696a183>.every</span><span class="brackets" data-v-d696a183>(</span><span class="cor36" data-v-d696a183>回調函數</span><span class="brackets" data-v-d696a183>(</span><span class="word" data-v-d696a183>當前數組元素,元素索引值,arr</span><span class="brackets" data-v-d696a183>))</span></div><br data-v-d696a183><div data-v-d696a183><span class="word" data-v-d696a183>arr</span><span class="variable" data-v-d696a183>.every</span><span class="brackets" data-v-d696a183>(</span><span class="cor36" data-v-d696a183>回調函數</span><span class="brackets" data-v-d696a183>(</span><span class="word" data-v-d696a183>item,index,arr</span><span class="brackets" data-v-d696a183>))</span></div><br data-v-d696a183> # <div data-v-d696a183><span class="function" data-v-d696a183>const </span><span class="word" data-v-d696a183>arr</span> <span class="then" data-v-d696a183>=</span><span class="brackets" data-v-d696a183>[</span><span class="number" data-v-d696a183>10,20,30</span><span class="brackets" data-v-d696a183>]</span></div><div data-v-d696a183><span class="function" data-v-d696a183>const </span><span class="word" data-v-d696a183>flag</span> <span class="then" data-v-d696a183>=</span><span class="word" data-v-d696a183>arr.</span> <span class="variable" data-v-d696a183>every</span><span class="brackets" data-v-d696a183>(</span> <span class="word" data-v-d696a183>item</span><span class="function" data-v-d696a183>=&gt;</span> <span class="word" data-v-d696a183>item</span><span class="then" data-v-d696a183>&gt;=</span> <span class="number" data-v-d696a183>10</span><span class="brackets" data-v-d696a183>)</span></div><div data-v-d696a183><span class="word" data-v-d696a183>console.</span><span class="variable" data-v-d696a183>log</span> <span class="brackets" data-v-d696a183>(</span><span class="word" data-v-d696a183>flag</span> <span class="brackets" data-v-d696a183>) </span><span class="comment" data-v-d696a183>// true</span></div><br data-v-d696a183><br data-v-d696a183><div data-v-d696a183><span class="word" data-v-d696a183>arr</span> <span class="variable" data-v-d696a183>.some</span><span class="brackets" data-v-d696a183>(</span><span class="cor36" data-v-d696a183>回調函數</span><span class="brackets" data-v-d696a183>(</span><span class="word" data-v-d696a183>當前數組元素,元素索引值,arr</span><span class="brackets" data-v-d696a183>))</span></div><br data-v-d696a183><div data-v-d696a183><span class="word" data-v-d696a183>arr</span> <span class="variable" data-v-d696a183>.some</span><span class="brackets" data-v-d696a183>(</span><span class="cor36" data-v-d696a183>回調函數</span><span class="brackets" data-v-d696a183>(</span><span class="word" data-v-d696a183>item,index,arr</span><span class="brackets" data-v-d696a183>))</span></div><br data-v-d696a183> # <div data-v-d696a183><span class="function" data-v-d696a183>const </span><span class="word" data-v-d696a183>flag</span> <span class="then" data-v-d696a183>=</span><span class="word" data-v-d696a183>arr.</span> <span class="variable" data-v-d696a183>some</span><span class="brackets" data-v-d696a183>(</span> <span class="word" data-v-d696a183>item</span><span class="function" data-v-d696a183>=&gt;</span> <span class="word" data-v-d696a183>item</span><span class="then" data-v-d696a183>&gt;=</span> <span class="number" data-v-d696a183>20</span><span class="brackets" data-v-d696a183>)</span></div><div data-v-d696a183><span class="word" data-v-d696a183>console.</span><span class="variable" data-v-d696a183>log</span> <span class="brackets" data-v-d696a183>(</span><span class="word" data-v-d696a183>flag</span> <span class="brackets" data-v-d696a183>) </span><span class="comment" data-v-d696a183>// true</span></div></div><div id="threemethod013" class="articleCardTitle cor36 fz34" data-v-d696a183> 4. concat . . . 不改變 原數組 </div><p class="fz28" data-v-d696a183> concat 方法用於 多個數組合並 , 他將 新數組的成員 , 加到 原數組 成員的 後部 , 然後返回一個 新數組 </p><p class="fz28" data-v-d696a183>原數組不變</p><br data-v-d696a183><div class="bgcVS" data-v-d696a183><div data-v-d696a183><span class="function" data-v-d696a183>let </span> <span class="word" data-v-d696a183>arr1</span><span class="then" data-v-d696a183>=</span> <span class="brackets" data-v-d696a183>[</span><span class="src" data-v-d696a183>&quot;wayne&quot;,&quot;jack&quot;</span><span class="brackets" data-v-d696a183>]</span></div><div data-v-d696a183><span class="function" data-v-d696a183>let </span> <span class="word" data-v-d696a183>arr2</span><span class="then" data-v-d696a183>=</span> <span class="brackets" data-v-d696a183>[</span><span class="src" data-v-d696a183>&quot;hello&quot;,&quot;hi&quot;</span><span class="brackets" data-v-d696a183>]</span> <span class="word" data-v-d696a183></span></div><br data-v-d696a183><div data-v-d696a183><span class="comment" data-v-d696a183>//直接+會變字串</span></div><div data-v-d696a183><span class="word" data-v-d696a183>console</span><span class="variable" data-v-d696a183>.log</span><span class="brackets" data-v-d696a183>(</span> <span class="word" data-v-d696a183>arr1</span><span class="then" data-v-d696a183>+</span> <span class="word" data-v-d696a183>arr2</span><span class="brackets" data-v-d696a183>)</span><span class="comment" data-v-d696a183>//wayne,jackhello,hi</span></div><br data-v-d696a183><div data-v-d696a183><span class="word" data-v-d696a183>console</span><span class="variable" data-v-d696a183>.log</span><span class="brackets" data-v-d696a183>(</span><span class="word" data-v-d696a183>arr1.concat</span><span class="brackets" data-v-d696a183>(</span> <span class="word" data-v-d696a183>arr2</span><span class="brackets" data-v-d696a183>)) </span><span class="comment" data-v-d696a183>//[&quot;wayne&quot;,&quot;jack&quot;,&quot;hello&quot;,&quot;hi&quot;]</span></div><br data-v-d696a183><p data-v-d696a183>也可以多個</p><br data-v-d696a183><div data-v-d696a183><span class="function" data-v-d696a183>let </span> <span class="word" data-v-d696a183>arr3</span><span class="then" data-v-d696a183>=</span> <span class="brackets" data-v-d696a183>[</span><span class="src" data-v-d696a183>&quot;web&quot;,&quot;Python&quot;</span><span class="brackets" data-v-d696a183>]</span></div><div data-v-d696a183><span class="word" data-v-d696a183>console</span><span class="variable" data-v-d696a183>.log</span><span class="brackets" data-v-d696a183>(</span><span class="word" data-v-d696a183>arr1.concat</span><span class="brackets" data-v-d696a183>(</span><span class="word" data-v-d696a183>arr2,arr3</span><span class="brackets" data-v-d696a183>))</span><span class="comment" data-v-d696a183>//[&quot;wayne&quot;,&quot;jack&quot;,&quot;hello&quot;,&quot;hi&quot;,&quot;web&quot;,&quot;Python&quot;]</span></div><div data-v-d696a183><span class="word" data-v-d696a183>console</span><span class="variable" data-v-d696a183>.log</span><span class="brackets" data-v-d696a183>(</span> <span class="word" data-v-d696a183>arr1</span><span class="brackets" data-v-d696a183>)</span><span class="comment" data-v-d696a183>//3個原數組沒變</span></div><br data-v-d696a183><p data-v-d696a183>除了接受數組,也接受其他類型的值作為參數,添加到數組尾部</p><br data-v-d696a183><div data-v-d696a183><span class="function" data-v-d696a183>let </span> <span class="word" data-v-d696a183>arr4</span><span class="then" data-v-d696a183>=</span> <span class="brackets" data-v-d696a183>[</span><span class="number" data-v-d696a183>10</span> <span class="brackets" data-v-d696a183>]</span></div><div data-v-d696a183><span class="word" data-v-d696a183>console</span><span class="variable" data-v-d696a183>.log</span><span class="brackets" data-v-d696a183>(</span> <span class="word" data-v-d696a183>arr4</span><span class="variable" data-v-d696a183>.concat</span><span class="brackets" data-v-d696a183>(</span><span class="number" data-v-d696a183>20,30,40</span><span class="brackets" data-v-d696a183>))</span><span class="comment" data-v-d696a183>//[10,20,30,40]</span></div><br data-v-d696a183><br data-v-d696a183><br data-v-d696a183><div data-v-d696a183><span class="brackets" data-v-d696a183>[</span> <span class="number" data-v-d696a183>1,2,3</span><span class="brackets" data-v-d696a183>]</span><span class="variable" data-v-d696a183>.concat</span><span class="brackets" data-v-d696a183>(</span><span class="number" data-v-d696a183>4,5,6,</span><span class="brackets" data-v-d696a183>[</span> <span class="number" data-v-d696a183>7,8,9</span><span class="brackets" data-v-d696a183>])</span></div><div data-v-d696a183><span class="brackets" data-v-d696a183>[</span><span class="number" data-v-d696a183>1,2,3,4,5,6,7,8,9</span><span class="brackets" data-v-d696a183>]</span></div></div><div id="threemethod014" class="articleCardTitle cor36 fz34" data-v-d696a183> 4. Array.form() </div><p class="fz28" data-v-d696a183>偽數組轉換為真數組</p><div class="bgcVS" data-v-d696a183><div data-v-d696a183><span class="then" data-v-d696a183>＜</span> <span class="word" data-v-d696a183>ul</span><span class="then" data-v-d696a183>&gt;</span></div><div class="pTwo" data-v-d696a183><span class="then" data-v-d696a183>＜</span> <span class="word" data-v-d696a183>li</span><span class="then" data-v-d696a183>&gt;</span></div><div class="pTwo" data-v-d696a183><span class="then" data-v-d696a183>＜</span> <span class="word" data-v-d696a183>li</span><span class="then" data-v-d696a183>&gt;</span></div><div class="pTwo" data-v-d696a183><span class="then" data-v-d696a183>＜</span> <span class="word" data-v-d696a183>li</span><span class="then" data-v-d696a183>&gt;</span></div><div data-v-d696a183><span class="then" data-v-d696a183>＜/</span> <span class="word" data-v-d696a183>ul</span><span class="then" data-v-d696a183>&gt;</span></div><div data-v-d696a183><span class="function" data-v-d696a183>const </span><span class="word" data-v-d696a183>lis</span> <span class="then" data-v-d696a183>=</span><span class="word" data-v-d696a183>document</span><span class="variable" data-v-d696a183>.querySelectorAll</span><span class="brackets" data-v-d696a183>(</span> <span class="src" data-v-d696a183>&quot;ul li&quot;</span><span class="brackets" data-v-d696a183>)</span></div><div data-v-d696a183><span class="word" data-v-d696a183>console.</span><span class="variable" data-v-d696a183>log</span> <span class="brackets" data-v-d696a183>(</span><span class="word" data-v-d696a183>lis</span> <span class="brackets" data-v-d696a183>)</span><span class="comment" data-v-d696a183>// 是 偽數組 Argument 也是</span></div><div data-v-d696a183><span class="word" data-v-d696a183>lis.</span> <span class="variable" data-v-d696a183>pop</span><span class="brackets" data-v-d696a183>() </span><span class="comment" data-v-d696a183>// pop is not a function</span></div><div data-v-d696a183><span class="function" data-v-d696a183>const </span><span class="word" data-v-d696a183>liss</span> <span class="then" data-v-d696a183>=</span><span class="brackets" data-v-d696a183>Array</span><span class="variable" data-v-d696a183>.from</span><span class="brackets" data-v-d696a183>(</span> <span class="word" data-v-d696a183>lis</span><span class="brackets" data-v-d696a183>)</span></div></div><p class="fz28" data-v-d696a183></p><p class="fz28" data-v-d696a183></p><p class="fz28" data-v-d696a183></p><p class="fz28" data-v-d696a183></p><p class="fz28" data-v-d696a183></p><p class="fz28" data-v-d696a183></p><p class="fz28" data-v-d696a183></p><p class="fz28" data-v-d696a183></p><p class="fz28" data-v-d696a183></p><p class="fz28" data-v-d696a183></p><p class="fz28" data-v-d696a183></p><p class="fz28" data-v-d696a183></p><p class="fz28" data-v-d696a183></p><p class="fz28" data-v-d696a183></p><p class="fz28" data-v-d696a183></p><p class="fz28" data-v-d696a183></p><p class="fz28" data-v-d696a183></p><p class="fz28" data-v-d696a183></p><p class="fz28" data-v-d696a183></p><p class="fz28" data-v-d696a183></p><p class="fz28" data-v-d696a183></p><p class="fz28" data-v-d696a183></p><p class="fz28" data-v-d696a183></p><p class="fz28" data-v-d696a183></p><p class="fz28" data-v-d696a183></p><p class="fz28" data-v-d696a183></p><p class="fz28" data-v-d696a183></p><p class="fz28" data-v-d696a183></p><p class="fz28" data-v-d696a183></p><p class="fz28" data-v-d696a183></p><p class="fz28" data-v-d696a183></p><p class="fz28" data-v-d696a183></p><p class="fz28" data-v-d696a183></p><p class="fz28" data-v-d696a183></p><p class="fz28" data-v-d696a183></p><div id="threemethod015" class="articleCardTitle cor36 fz34" data-v-d696a183> 4. 綜合練習 </div><div class="dis" data-v-d696a183><div class="bgcVS w100" data-v-d696a183><p data-v-d696a183>JSON格式msg={&quot;code&quot;:200,&quot;data&quot;:[{...}]}</p><br data-v-d696a183><div data-v-d696a183><span class="function" data-v-d696a183>const </span><span class="brackets" data-v-d696a183>{</span> <span class="word" data-v-d696a183>data</span><span class="brackets" data-v-d696a183>}</span> <span class="then" data-v-d696a183>=</span><span class="word" data-v-d696a183>msg</span></div><div data-v-d696a183><span class="word" data-v-d696a183>console.</span><span class="variable" data-v-d696a183>log</span><span class="brackets" data-v-d696a183>(</span> <span class="word" data-v-d696a183>data</span><span class="brackets" data-v-d696a183>)</span></div><br data-v-d696a183><div data-v-d696a183><span class="function" data-v-d696a183>function </span><span class="word" data-v-d696a183>render</span><span class="brackets" data-v-d696a183>(</span> <span class="word" data-v-d696a183>arr</span><span class="brackets" data-v-d696a183>){</span></div><div class="pTwo VSL" data-v-d696a183><span class="word" data-v-d696a183>console.</span><span class="variable" data-v-d696a183>log</span><span class="brackets" data-v-d696a183>(</span> <span class="word" data-v-d696a183>arr</span><span class="brackets" data-v-d696a183>)</span></div><div class="brackets" data-v-d696a183>}</div><div data-v-d696a183><span class="word" data-v-d696a183>render</span><span class="brackets" data-v-d696a183>(</span> <span class="word" data-v-d696a183>data</span><span class="brackets" data-v-d696a183>)</span></div></div><div class="bgcVSMid" data-v-d696a183>&gt;</div><div class="bgcVS w100" data-v-d696a183><br data-v-d696a183><br data-v-d696a183><div data-v-d696a183><span class="function" data-v-d696a183>function </span><span class="word" data-v-d696a183>render</span><span class="brackets" data-v-d696a183>(</span> <span class="word" data-v-d696a183>arr</span><span class="brackets" data-v-d696a183>){</span></div><div class="pTwo VSL" data-v-d696a183><span class="function" data-v-d696a183>const </span><span class="brackets" data-v-d696a183>{</span> <span class="word" data-v-d696a183>data</span><span class="brackets" data-v-d696a183>}</span> <span class="then" data-v-d696a183>=</span><span class="word" data-v-d696a183>arr</span></div><div class="pTwo VSL" data-v-d696a183><span class="word" data-v-d696a183>console.</span><span class="variable" data-v-d696a183>log</span><span class="brackets" data-v-d696a183>(</span> <span class="word" data-v-d696a183>data</span><span class="brackets" data-v-d696a183>)</span></div><div class="brackets" data-v-d696a183>}</div><div data-v-d696a183><span class="word" data-v-d696a183>render</span><span class="brackets" data-v-d696a183>(</span> <span class="word" data-v-d696a183>msg</span><span class="brackets" data-v-d696a183>)</span></div><br data-v-d696a183><div class="disCen comment" data-v-d696a183>更簡潔寫法 V</div><br data-v-d696a183><div data-v-d696a183><span class="function" data-v-d696a183>function </span><span class="word" data-v-d696a183>render</span><span class="brackets" data-v-d696a183>( { </span><span class="word" data-v-d696a183>data </span><span class="brackets" data-v-d696a183>} ) {</span></div><div class="pTwo VSL" data-v-d696a183><span class="word" data-v-d696a183>console.</span><span class="variable" data-v-d696a183>log</span><span class="brackets" data-v-d696a183>(</span> <span class="word" data-v-d696a183>data</span><span class="brackets" data-v-d696a183>)</span></div><div class="brackets" data-v-d696a183>}</div><div data-v-d696a183><span class="word" data-v-d696a183>render</span><span class="brackets" data-v-d696a183>(</span> <span class="word" data-v-d696a183>msg</span><span class="brackets" data-v-d696a183>)</span></div><br data-v-d696a183><div class="comment" data-v-d696a183>data容易命名衝突, 接進來資料改名myData</div><br data-v-d696a183><div data-v-d696a183><span class="function" data-v-d696a183>function </span><span class="word" data-v-d696a183>render</span><span class="brackets" data-v-d696a183>( { </span><span class="word" data-v-d696a183>data: myData </span><span class="brackets" data-v-d696a183>} ) {</span></div><div class="pTwo VSL" data-v-d696a183><span class="word" data-v-d696a183>console.</span><span class="variable" data-v-d696a183>log</span><span class="brackets" data-v-d696a183>(</span> <span class="word" data-v-d696a183>myData</span><span class="brackets" data-v-d696a183>)</span></div><div class="brackets" data-v-d696a183>}</div><div data-v-d696a183><span class="word" data-v-d696a183>render</span><span class="brackets" data-v-d696a183>(</span> <span class="word" data-v-d696a183>msg</span><span class="brackets" data-v-d696a183>)</span></div></div></div><div class="bgcVS" data-v-d696a183><div data-v-d696a183><span class="function" data-v-d696a183>const </span><span class="word" data-v-d696a183>spec</span> <span class="then" data-v-d696a183>=</span><span class="brackets" data-v-d696a183>{</span> <span class="word" data-v-d696a183>size:</span><span class="src" data-v-d696a183>&quot;40cm*40cm&quot;</span><span class="word" data-v-d696a183>,color:</span><span class="src" data-v-d696a183>&quot;black&quot;</span> <span class="brackets" data-v-d696a183>}</span></div><span class="comment" data-v-d696a183>//1.獲取所有屬性值</span><div data-v-d696a183><span class="brackets" data-v-d696a183>Object</span><span class="variable" data-v-d696a183>.values</span><span class="brackets" data-v-d696a183>(</span> <span class="word" data-v-d696a183>spec</span><span class="brackets" data-v-d696a183>)</span></div><div data-v-d696a183><span class="word" data-v-d696a183>console.</span><span class="variable" data-v-d696a183>log</span> <span class="brackets" data-v-d696a183>(</span><span class="word" data-v-d696a183>Object.values</span><span class="brackets" data-v-d696a183>(</span> <span class="word" data-v-d696a183>spec</span><span class="brackets" data-v-d696a183>))</span><span class="comment" data-v-d696a183>//[&quot;40cm*40cm&quot;,&quot;black&quot;]</span></div><span class="comment" data-v-d696a183>// 2. 轉換為字串 join(&quot;/&quot;)</span><span class="comment" data-v-d696a183>// 2. 轉換為字串</span><div data-v-d696a183><span class="brackets" data-v-d696a183>Object</span><span class="variable" data-v-d696a183>.values</span><span class="brackets" data-v-d696a183>(</span> <span class="word" data-v-d696a183>spec</span><span class="brackets" data-v-d696a183>)</span><span class="variable" data-v-d696a183>.join</span><span class="brackets" data-v-d696a183>(</span> <span class="src" data-v-d696a183>&quot;/&quot;</span><span class="brackets" data-v-d696a183>)</span></div><div data-v-d696a183><span class="word" data-v-d696a183>console.</span><span class="variable" data-v-d696a183>log</span> <span class="brackets" data-v-d696a183>(</span><span class="brackets" data-v-d696a183>Object</span><span class="variable" data-v-d696a183>.values</span><span class="brackets" data-v-d696a183>(</span> <span class="word" data-v-d696a183>spec</span><span class="brackets" data-v-d696a183>)</span><span class="variable" data-v-d696a183>.join</span><span class="brackets" data-v-d696a183>(</span> <span class="src" data-v-d696a183>&quot;/&quot;</span><span class="brackets" data-v-d696a183>)) </span><span class="comment" data-v-d696a183>//40cm*40cm/black</span></div><div data-v-d696a183><span class="word" data-v-d696a183>document.</span><span class="variable" data-v-d696a183>querySelect</span><span class="brackets" data-v-d696a183>(</span><span class="src" data-v-d696a183>&quot;.showDiv&quot;</span><span class="brackets" data-v-d696a183>)</span><span class="variable" data-v-d696a183>.innerHTML</span><span class="then" data-v-d696a183>=</span> <span class="brackets" data-v-d696a183>Object</span><span class="word" data-v-d696a183>.value</span> <span class="brackets" data-v-d696a183>(</span><span class="word" data-v-d696a183>spec</span> <span class="brackets" data-v-d696a183>)</span><span class="variable" data-v-d696a183>.join</span><span class="brackets" data-v-d696a183>(</span> <span class="src" data-v-d696a183>&quot;/&quot;</span><span class="brackets" data-v-d696a183>)</span></div></div><div class="bgcVS" data-v-d696a183><div data-v-d696a183><span class="function" data-v-d696a183>const </span><span class="word" data-v-d696a183>tea</span> <span class="then" data-v-d696a183>=</span><span class="src" data-v-d696a183>&quot;50g的飲料,100g茶葉&quot;</span></div><span class="comment" data-v-d696a183>// 1.把字串轉成數組</span><div data-v-d696a183><span class="word" data-v-d696a183>console.</span><span class="variable" data-v-d696a183>log</span> <span class="brackets" data-v-d696a183>(</span><span class="word" data-v-d696a183>tea.</span><span class="variable" data-v-d696a183>split</span><span class="brackets" data-v-d696a183>(</span> <span class="src" data-v-d696a183>&quot;,&quot;</span><span class="brackets" data-v-d696a183>)) </span><span class="comment" data-v-d696a183>// [ &quot;50g的飲料&quot;, &quot;100g茶葉&quot; ]</span></div><span class="comment" data-v-d696a183>// 2. 有幾條數據 我就生成幾個 ＜span&gt;</span><div data-v-d696a183><span class="word" data-v-d696a183>tea.</span><span class="variable" data-v-d696a183>split</span><span class="brackets" data-v-d696a183>(</span> <span class="src" data-v-d696a183>&quot;,&quot;</span><span class="brackets" data-v-d696a183>)</span><span class="variable" data-v-d696a183>.map</span><span class="brackets" data-v-d696a183>(</span><span class="function" data-v-d696a183>function </span><span class="brackets" data-v-d696a183>(</span> <span class="word" data-v-d696a183>item</span><span class="brackets" data-v-d696a183>){ </span><span class="comment" data-v-d696a183>//item是裡面的每一個值</span></div><div class="pTwo" data-v-d696a183><div class="dis" data-v-d696a183><div data-v-d696a183><span class="then" data-v-d696a183>return </span><span class="src" data-v-d696a183>`＜span&gt;贈品</span><span class="then" data-v-d696a183>${</span> <span class="word" data-v-d696a183>item</span><span class="then" data-v-d696a183>}</span> <span class="src" data-v-d696a183>＜/span&gt;`</span></div><div class="comment" data-v-d696a183><span data-v-d696a183>//贈品50g的飲料</span><br data-v-d696a183><span data-v-d696a183>//贈品100g茶葉</span></div></div></div><span class="brackets" data-v-d696a183>})</span><div data-v-d696a183><span class="function" data-v-d696a183>const </span><span class="word" data-v-d696a183>str</span> <span class="then" data-v-d696a183>=</span><span class="word" data-v-d696a183>tea.</span><span class="variable" data-v-d696a183>split</span><span class="brackets" data-v-d696a183>(</span> <span class="src" data-v-d696a183>&quot;,&quot;</span><span class="brackets" data-v-d696a183>)</span><span class="variable" data-v-d696a183>.map</span><span class="brackets" data-v-d696a183>(</span><span class="function" data-v-d696a183>function </span><span class="brackets" data-v-d696a183>(</span> <span class="word" data-v-d696a183>item</span><span class="brackets" data-v-d696a183>){ </span></div><div class="pTwo" data-v-d696a183><div data-v-d696a183><span class="then" data-v-d696a183>return </span><span class="src" data-v-d696a183>`＜span&gt;贈品</span><span class="then" data-v-d696a183>${</span> <span class="word" data-v-d696a183>item</span><span class="then" data-v-d696a183>}</span> <span class="src" data-v-d696a183>＜/span&gt;`</span></div></div><span class="brackets" data-v-d696a183>})</span><div data-v-d696a183><span class="word" data-v-d696a183>console.</span><span class="variable" data-v-d696a183>log</span> <span class="brackets" data-v-d696a183>(</span><span class="word" data-v-d696a183>arr</span> <span class="brackets" data-v-d696a183>) </span><span class="comment" data-v-d696a183>[&quot;＜span&gt;贈品50g的飲料＜/span&gt;&quot;,&quot;＜span&gt;贈品100g茶葉＜/span&gt;&quot;]</span></div><br data-v-d696a183><div class="comment" data-v-d696a183>數組不能直接往盒子加</div><div class="comment" data-v-d696a183>想要改成字串</div><div data-v-d696a183><span class="function" data-v-d696a183>const </span><span class="word" data-v-d696a183>str</span> <span class="then" data-v-d696a183>=</span><span class="word" data-v-d696a183>tea.</span><span class="variable" data-v-d696a183>split</span><span class="brackets" data-v-d696a183>(</span> <span class="src" data-v-d696a183>&quot;,&quot;</span><span class="brackets" data-v-d696a183>)</span><span class="variable" data-v-d696a183>.map</span><span class="brackets" data-v-d696a183>(</span><span class="function" data-v-d696a183>function </span><span class="brackets" data-v-d696a183>(</span> <span class="word" data-v-d696a183>item</span><span class="brackets" data-v-d696a183>){ </span></div><div class="pTwo" data-v-d696a183><div data-v-d696a183><span class="then" data-v-d696a183>return </span><span class="src" data-v-d696a183>`＜span&gt;贈品</span><span class="then" data-v-d696a183>${</span> <span class="word" data-v-d696a183>item</span><span class="then" data-v-d696a183>}</span> <span class="src" data-v-d696a183>＜/span&gt;`</span></div></div><div data-v-d696a183><span class="brackets" data-v-d696a183>})</span><span class="variable" data-v-d696a183>.join</span><span class="brackets" data-v-d696a183>(</span> <span class="src" data-v-d696a183>&quot;&quot;</span><span class="brackets" data-v-d696a183>)</span></div><div data-v-d696a183><span class="word" data-v-d696a183>console.</span><span class="variable" data-v-d696a183>log</span> <span class="brackets" data-v-d696a183>(</span><span class="word" data-v-d696a183>str</span> <span class="brackets" data-v-d696a183>)</span></div><span class="comment" data-v-d696a183>＜span&gt;贈品50g的飲料＜/span&gt;＜span&gt;贈品100g茶葉＜/span&gt;</span><div data-v-d696a183><span class="word" data-v-d696a183>document.</span><span class="variable" data-v-d696a183>querySelector</span><span class="brackets" data-v-d696a183>(</span> <span class="src" data-v-d696a183>&quot;div&quot;</span><span class="brackets" data-v-d696a183>)</span><span class="variable" data-v-d696a183>.innerHTML</span><span class="then" data-v-d696a183>=</span> <span class="word" data-v-d696a183>str</span></div><br data-v-d696a183><br data-v-d696a183><p data-v-d696a183>轉成箭頭函數</p><br data-v-d696a183><div data-v-d696a183><span class="function" data-v-d696a183>const </span><span class="word" data-v-d696a183>tea</span> <span class="then" data-v-d696a183>=</span><span class="src" data-v-d696a183>&quot;50g的飲料,100g茶葉&quot;</span></div><br data-v-d696a183><div data-v-d696a183><span class="word" data-v-d696a183>tea.</span><span class="variable" data-v-d696a183>split</span><span class="brackets" data-v-d696a183>(</span> <span class="then" data-v-d696a183>&quot;,&quot;</span><span class="brackets" data-v-d696a183>)</span><span class="variable" data-v-d696a183>.map</span><span class="brackets" data-v-d696a183>(</span> <span class="word" data-v-d696a183>item</span><span class="function" data-v-d696a183>=&gt;</span><span class="src" data-v-d696a183>`＜span&gt;贈品</span><span class="then" data-v-d696a183>${</span> <span class="word" data-v-d696a183>item</span><span class="then" data-v-d696a183>}</span><span class="src" data-v-d696a183>＜/span&gt;＜br&gt;`</span><span class="brackets" data-v-d696a183>)</span><span class="variable" data-v-d696a183>.join</span><span class="brackets" data-v-d696a183>(</span> <span class="src" data-v-d696a183>&quot;&quot;</span><span class="brackets" data-v-d696a183>)</span></div><br data-v-d696a183><div data-v-d696a183><span class="word" data-v-d696a183>document.</span><span class="variable" data-v-d696a183>querySelector</span><span class="brackets" data-v-d696a183>(</span> <span class="word" data-v-d696a183>&quot;div&quot;</span><span class="brackets" data-v-d696a183>)</span><span class="variable" data-v-d696a183>.innerHTML</span><span class="then" data-v-d696a183>=</span><span class="word" data-v-d696a183>tea.</span><span class="variable" data-v-d696a183>split</span><span class="brackets" data-v-d696a183>(</span> <span class="then" data-v-d696a183>&quot;,&quot;</span><span class="brackets" data-v-d696a183>)</span><span class="variable" data-v-d696a183>.map</span><span class="brackets" data-v-d696a183>(</span> <span class="word" data-v-d696a183>item</span><span class="function" data-v-d696a183>=&gt;</span><span class="src" data-v-d696a183>`＜span&gt;贈品</span><span class="then" data-v-d696a183>${</span> <span class="word" data-v-d696a183>item</span><span class="then" data-v-d696a183>}</span><span class="src" data-v-d696a183>＜/span&gt;＜br&gt;`</span><span class="brackets" data-v-d696a183>)</span><span class="variable" data-v-d696a183>.join</span><span class="brackets" data-v-d696a183>(</span> <span class="src" data-v-d696a183>&quot;&quot;</span><span class="brackets" data-v-d696a183>)</span></div></div>',102),Wf=Gs(()=>n("div",{class:"toTopButton"},[n("div",{class:"disCen"},"___"),n("div",{class:"disCen"},"▲")],-1)),Uf=[Wf],Kf=Gs(()=>n("div",{class:"toBotButton"},[n("div",{class:"disCen"},"▼"),n("div",{class:"disCen"},"￣")],-1)),Xf=[Kf],Yf={__name:"JsPageThreeFour",setup(a){const s=ba(!1);window.addEventListener("scroll",function(){s.value=window.scrollY>0});function d(){window.scrollTo({top:0,left:0,behavior:"smooth"})}function v(){window.scrollTo({top:999999,left:0,behavior:"smooth"})}function t(e){window.scrollTo({top:document.getElementById(`${e}`).offsetTop,behavior:"smooth"})}return(e,c)=>{const l=qa("P");return aa(),ta(G,null,[n("section",null,[n("div",Lf,[n("div",jf,[n("div",Vf,[n("div",{onClick:c[0]||(c[0]=p=>t("threemethod001")),class:"leftNavText"}," .push() "),n("div",{onClick:c[1]||(c[1]=p=>t("threemethod002")),class:"leftNavText"}," .pop() "),n("div",{onClick:c[2]||(c[2]=p=>t("threemethod003")),class:"leftNavText"}," .shift "),n("div",{onClick:c[3]||(c[3]=p=>t("threemethod004")),class:"leftNavText"}," .unshift "),n("div",{onClick:c[4]||(c[4]=p=>t("threemethod017")),class:"leftNavText"},Nf),n("div",{onClick:c[5]||(c[5]=p=>t("threemethod005")),class:"leftNavText"}," .map() "),n("div",{onClick:c[6]||(c[6]=p=>t("threemethod006")),class:"leftNavText"}," .forEach() "),n("div",{onClick:c[7]||(c[7]=p=>t("threemethod016")),class:"leftNavText"}," .filter() "),n("div",{onClick:c[8]||(c[8]=p=>t("threemethod007")),class:"leftNavText"}," .join() "),n("div",{onClick:c[9]||(c[9]=p=>t("threemethod008")),class:"leftNavText"}," .reduce() "),n("div",{onClick:c[10]||(c[10]=p=>t("threemethod009")),class:"leftNavText"}," .find() "),n("div",{onClick:c[11]||(c[11]=p=>t("threemethod010")),class:"leftNavText"}," .slice() "),n("div",{onClick:c[12]||(c[12]=p=>t("threemethod011")),class:"leftNavText"}," .splice() "),n("div",{onClick:c[13]||(c[13]=p=>t("threemethod012")),class:"leftNavText"},Mf),n("div",{onClick:c[14]||(c[14]=p=>t("threemethod013")),class:"leftNavText"}," .concat(arr) "),n("div",{onClick:c[15]||(c[15]=p=>t("threemethod014")),class:"leftNavText"}," Array.form() "),n("div",{onClick:c[16]||(c[16]=p=>t("threemethod015")),class:"leftNavText"},"練習")])])]),n("div",Af,[n("div",Ff,[n("div",If,[Rf,n("div",Hf,[Bf,k(l,null,{default:S(()=>[fa("map 特點: 有一個數組返回給我們 , 所以 const newArr")]),_:1}),Df]),Jf])])])]),n("div",null,[W(k(B,{name:"fade",tag:"div"},{default:S(()=>[n("div",{onClick:d,class:"toTop"},Uf)]),_:1},512),[[U,s.value]]),W(k(B,{name:"fade",tag:"div"},{default:S(()=>[n("div",{onClick:v,class:"toBot"},Xf)]),_:1},512),[[U,s.value]])])],64)}}},Gf=pa(Yf,[["__scopeId","data-v-d696a183"]]);const qn=a=>(wa("data-v-9c1d69b3"),a=a(),ma(),a),Qf={class:"leftNav"},Zf={class:"leftNavContainer"},a8={class:"leftNavLayout"},s8={class:"Main"},d8={class:"mainContainer"},t8={class:"mainLayout"},c8=K('<br data-v-9c1d69b3><br data-v-9c1d69b3><p class="fz28" data-v-9c1d69b3>總分總</p><p class="fz28" data-v-9c1d69b3>1.要講哪個知識點</p><p class="fz28" data-v-9c1d69b3>2.細講</p><p class="fz28" data-v-9c1d69b3>3.總結</p><br data-v-9c1d69b3><br data-v-9c1d69b3><div id="threeobject001" class="articleCardTitle cor36 fz34" data-v-9c1d69b3> 5.1 創建物件 </div><div class="bgcVS" data-v-9c1d69b3><p data-v-9c1d69b3>1. 利用對象字面量 創建</p><br data-v-9c1d69b3><div data-v-9c1d69b3><span class="function" data-v-9c1d69b3>const </span><span class="word" data-v-9c1d69b3>obj</span> <span class="then" data-v-9c1d69b3>=</span><span class="brackets" data-v-9c1d69b3>{</span></div><div class="pTwo" data-v-9c1d69b3><span class="word" data-v-9c1d69b3>uname:</span> <span class="src" data-v-9c1d69b3>&quot;wayne&quot;</span></div><div class="brackets" data-v-9c1d69b3>}</div><br data-v-9c1d69b3><br data-v-9c1d69b3><p data-v-9c1d69b3>2. 利用 new Object 創建</p><br data-v-9c1d69b3><div data-v-9c1d69b3><span class="function" data-v-9c1d69b3>const </span><span class="word" data-v-9c1d69b3>obj</span><span class="then" data-v-9c1d69b3>= new </span> <span class="word" data-v-9c1d69b3>Object</span><span class="brackets" data-v-9c1d69b3>()</span></div><div data-v-9c1d69b3><span class="word" data-v-9c1d69b3>obj.name</span> <span class="then" data-v-9c1d69b3>=</span><span class="src" data-v-9c1d69b3>&quot;wayne&quot;</span></div><br data-v-9c1d69b3><div data-v-9c1d69b3><span class="function" data-v-9c1d69b3>const </span><span class="word" data-v-9c1d69b3>obj</span><span class="then" data-v-9c1d69b3>= new </span> <span class="word" data-v-9c1d69b3>Object</span><span class="brackets" data-v-9c1d69b3>( {</span> <span class="word" data-v-9c1d69b3>name:</span><span class="src" data-v-9c1d69b3>&quot;wayne&quot;</span> <span class="brackets" data-v-9c1d69b3>} )</span></div></div><div id="threeobject002" class="articleCardTitle cor36 fz34" data-v-9c1d69b3> 5.2 利用 構造函數 創建 </div><p class="fz28" data-v-9c1d69b3>是一種特殊的 函數 , 用來 初始化 物件</p><br data-v-9c1d69b3><p class="fz28" data-v-9c1d69b3>1. 是什麼? _ 函數</p><p class="fz28" data-v-9c1d69b3>2. 做什麼? _ 創建物件</p><br data-v-9c1d69b3><br data-v-9c1d69b3><p class="fz28" data-v-9c1d69b3>約定 (非強制)</p><p class="fz28" data-v-9c1d69b3>1. 第 1 個字母大寫</p><p class="fz28" data-v-9c1d69b3>2. 只能由 new 操作符</p><div class="bgcVS" data-v-9c1d69b3><p data-v-9c1d69b3>創建 構造函數</p><br data-v-9c1d69b3><div data-v-9c1d69b3><span class="function" data-v-9c1d69b3>function </span><span class="word" data-v-9c1d69b3>Person</span> <span class="brackets" data-v-9c1d69b3>(</span><span class="word" data-v-9c1d69b3>uname,number</span><span class="brackets" data-v-9c1d69b3>){</span></div><div class="pTwo VSL" data-v-9c1d69b3><span class="comment" data-v-9c1d69b3>// this.name=uname</span></div><div class="pTwo VSL" data-v-9c1d69b3><span class="then" data-v-9c1d69b3>this</span><span class="word" data-v-9c1d69b3>.uname</span> <span class="then" data-v-9c1d69b3>=</span><span class="word" data-v-9c1d69b3>uname</span></div><div class="pTwo VSL" data-v-9c1d69b3><span class="comment" data-v-9c1d69b3>//物件的屬性 . . . 形參</span></div><div class="pTwo VSL" data-v-9c1d69b3><span class="then" data-v-9c1d69b3>this</span> <span class="word" data-v-9c1d69b3>.number</span><span class="then" data-v-9c1d69b3>=</span> <span class="word" data-v-9c1d69b3>number</span></div><div class="brackets" data-v-9c1d69b3>}</div><div data-v-9c1d69b3><span class="word" data-v-9c1d69b3>console.</span><span class="variable" data-v-9c1d69b3>log</span> <span class="brackets" data-v-9c1d69b3>(</span><span class="then" data-v-9c1d69b3>new </span> <span class="word" data-v-9c1d69b3>Person</span><span class="brackets" data-v-9c1d69b3>(</span><span class="src" data-v-9c1d69b3>&quot;wayne&quot;,</span> <span class="number" data-v-9c1d69b3>123</span><span class="brackets" data-v-9c1d69b3>))</span></div><br data-v-9c1d69b3><div data-v-9c1d69b3><span class="function" data-v-9c1d69b3>const </span><span class="word" data-v-9c1d69b3>p</span><span class="then" data-v-9c1d69b3>= new </span><span class="word" data-v-9c1d69b3>Person</span> <span class="brackets" data-v-9c1d69b3>(</span><span class="src" data-v-9c1d69b3>&quot;wayne&quot;,</span> <span class="number" data-v-9c1d69b3>6</span><span class="brackets" data-v-9c1d69b3>)</span></div></div><p class="fz28" data-v-9c1d69b3>說明</p><p class="fz28" data-v-9c1d69b3>1. 使用 new 調用函數 的行為 叫 實例化</p><p class="fz28" data-v-9c1d69b3> 2. 實例化 構造函數時 沒有參數 可以省略 ( ) <span class="comment" data-v-9c1d69b3>不建議省略</span></p><p class="fz28" data-v-9c1d69b3> 3. 構造函數內部 無需寫 return, 返回值為新創建的物件 </p><p class="fz28 comment" data-v-9c1d69b3>以前 調用函數 要加 return 才返回給我們</p><p class="fz28" data-v-9c1d69b3> 4. 構造函數內部的 return 返回的值無效 , 不要寫 return </p><p class="fz28" data-v-9c1d69b3>5. new Object() new Date() 也是 實例化構造函數</p><div id="threeobject003" class="articleCardTitle cor36 fz34" data-v-9c1d69b3> 5.3 new做了什麼? </div><p class="fz28" data-v-9c1d69b3> : new後面跟一個構造函數,先創造一個臨時對象,將這個臨時對象原型綁定構造函數的prototype,再把裡面的this指定為這個臨時對象,再執行構造函數,最後return這個臨時對象 </p><br data-v-9c1d69b3><p class="fz28 cor36" data-v-9c1d69b3># 當我 new 構造函數</p><p class="fz28" data-v-9c1d69b3>1. 創建 新物件 (空的)</p><p class="fz28" data-v-9c1d69b3>2. 構造函數的 this 指向 新物件</p><p class="fz28" data-v-9c1d69b3>3. 執行 構造函數 代碼</p><p class="fz28 pFou" data-v-9c1d69b3> this. 指向物件 <span class="comment" data-v-9c1d69b3>. . . obj.name=&quot;wayne&quot;</span></p><p class="fz28 pFou" data-v-9c1d69b3>name屬性 =賦值 &quot;wayne&quot;</p><p class="fz28" data-v-9c1d69b3>4. 返回 這個 新物件</p><div id="threeobject004" class="articleCardTitle cor36 fz34" data-v-9c1d69b3> 5.4 實例成員 &amp; 靜態成員 </div><p class="fz28" data-v-9c1d69b3>通過 構造函數創建的 對象 為 實例對象</p><p class="fz28" data-v-9c1d69b3>實例對象中的屬性方法 為 實例成員</p><br data-v-9c1d69b3><p class="fz28" data-v-9c1d69b3>說明</p><p class="fz28" data-v-9c1d69b3>1. 為構造函數傳入參數, 創建結構相同但值不同的對象</p><p class="fz28" data-v-9c1d69b3>2. 構造函數創建的實例對象彼此獨立互不影響</p><div class="bgcVS" data-v-9c1d69b3><div data-v-9c1d69b3><span class="function" data-v-9c1d69b3>function </span><span class="word" data-v-9c1d69b3>Person</span> <span class="brackets" data-v-9c1d69b3>(</span><span class="word" data-v-9c1d69b3>uname,number</span><span class="brackets" data-v-9c1d69b3>){</span></div><div class="pTwo VSL" data-v-9c1d69b3><span class="then" data-v-9c1d69b3>this</span><span class="word" data-v-9c1d69b3>.uname</span> <span class="then" data-v-9c1d69b3>=</span><span class="word" data-v-9c1d69b3>uname</span></div><div class="pTwo VSL" data-v-9c1d69b3><span class="then" data-v-9c1d69b3>this</span> <span class="word" data-v-9c1d69b3>.number</span><span class="then" data-v-9c1d69b3>=</span> <span class="word" data-v-9c1d69b3>number</span></div><div class="brackets" data-v-9c1d69b3>}</div><br data-v-9c1d69b3><div data-v-9c1d69b3><span class="function" data-v-9c1d69b3>const </span><span class="word" data-v-9c1d69b3>p</span><span class="then" data-v-9c1d69b3>= new </span><span class="word" data-v-9c1d69b3>Person</span> <span class="brackets" data-v-9c1d69b3>(</span><span class="src" data-v-9c1d69b3>&quot;wayne&quot;,</span> <span class="number" data-v-9c1d69b3>6</span><span class="brackets" data-v-9c1d69b3>)</span></div><div data-v-9c1d69b3><span class="function" data-v-9c1d69b3>const </span><span class="word" data-v-9c1d69b3>n</span><span class="then" data-v-9c1d69b3>= new </span><span class="word" data-v-9c1d69b3>Person</span> <span class="brackets" data-v-9c1d69b3>(</span><span class="src" data-v-9c1d69b3>&quot;neo&quot;,</span> <span class="number" data-v-9c1d69b3>3</span><span class="brackets" data-v-9c1d69b3>)</span></div><div data-v-9c1d69b3><span class="word" data-v-9c1d69b3>console.</span><span class="variable" data-v-9c1d69b3>log</span> <span class="brackets" data-v-9c1d69b3>(</span><span class="word" data-v-9c1d69b3>p</span><span class="then" data-v-9c1d69b3>=== </span> <span class="word" data-v-9c1d69b3>n</span><span class="brackets" data-v-9c1d69b3>) </span><span class="comment" data-v-9c1d69b3>// false</span></div><br data-v-9c1d69b3><p data-v-9c1d69b3>new p 時, 內存開闢了新空間 存放 p 這個新物件</p><p data-v-9c1d69b3>new n 時, 內存開闢了新空間 存放 n 這個新物件</p><p data-v-9c1d69b3>所以 2 個物件 在不同位置</p><br data-v-9c1d69b3><div data-v-9c1d69b3><span class="word" data-v-9c1d69b3>p.name</span> <span class="then" data-v-9c1d69b3>=</span><span class="src" data-v-9c1d69b3>&quot;jack&quot;</span><span class="comment" data-v-9c1d69b3> // 實例屬性</span></div><br data-v-9c1d69b3><p data-v-9c1d69b3>不影響 n 的 name</p><br data-v-9c1d69b3><div data-v-9c1d69b3><span class="word" data-v-9c1d69b3>p.sayHi</span> <span class="then" data-v-9c1d69b3>=</span><span class="brackets" data-v-9c1d69b3>()</span> <span class="function" data-v-9c1d69b3>=&gt;</span><span class="brackets" data-v-9c1d69b3>{ </span><span class="comment" data-v-9c1d69b3> // 實例方法</span></div><div class="pTwo" data-v-9c1d69b3><span class="word" data-v-9c1d69b3>console.</span><span class="variable" data-v-9c1d69b3>log</span> <span class="brackets" data-v-9c1d69b3>(</span><span class="src" data-v-9c1d69b3>&quot;hi&quot;</span> <span class="brackets" data-v-9c1d69b3>)</span></div><div class="brackets" data-v-9c1d69b3>}</div><br data-v-9c1d69b3><p class="fz28" data-v-9c1d69b3>p 增加 sayHi 方法 不影響 n</p></div><p class="fz28" data-v-9c1d69b3>靜態成員</p><p class="fz28" data-v-9c1d69b3>構造函數的屬性和方法 是 靜態成員</p><p class="fz28" data-v-9c1d69b3>靜態 屬性 &amp; 靜態 方法</p><br data-v-9c1d69b3><p class="fz28" data-v-9c1d69b3>說明</p><p class="fz28" data-v-9c1d69b3>1. 靜態成員 只能 構造函數來訪問</p><p class="fz28" data-v-9c1d69b3>2. 靜態方法 中的 this 指向 構造函數</p><div class="bgcVS" data-v-9c1d69b3><div data-v-9c1d69b3><span class="function" data-v-9c1d69b3>function </span><span class="word" data-v-9c1d69b3>Person</span> <span class="brackets" data-v-9c1d69b3>(</span><span class="word" data-v-9c1d69b3>uname,number</span><span class="brackets" data-v-9c1d69b3>){</span></div><div class="pTwo VSL" data-v-9c1d69b3><span class="then" data-v-9c1d69b3>this</span><span class="word" data-v-9c1d69b3>.uname</span> <span class="then" data-v-9c1d69b3>=</span><span class="word" data-v-9c1d69b3>uname</span></div><div class="pTwo VSL" data-v-9c1d69b3><span class="then" data-v-9c1d69b3>this</span> <span class="word" data-v-9c1d69b3>.number</span><span class="then" data-v-9c1d69b3>=</span> <span class="word" data-v-9c1d69b3>number</span></div><div class="brackets" data-v-9c1d69b3>}</div><br data-v-9c1d69b3><div data-v-9c1d69b3><span class="word" data-v-9c1d69b3>Person.eyes</span> <span class="then" data-v-9c1d69b3>=</span><span class="number" data-v-9c1d69b3>2 </span><span class="comment" data-v-9c1d69b3>// 靜態屬性</span></div><div data-v-9c1d69b3><span class="word" data-v-9c1d69b3>console.</span><span class="variable" data-v-9c1d69b3>log</span> <span class="brackets" data-v-9c1d69b3>(</span><span class="word" data-v-9c1d69b3>Person.eyes</span><span class="brackets" data-v-9c1d69b3>) </span> <span class="comment" data-v-9c1d69b3>// 2</span></div><br data-v-9c1d69b3><p class="fz28" data-v-9c1d69b3>Math.Pi 就是 Math 這個構造函數 加了 Pi 屬性</p><br data-v-9c1d69b3><div data-v-9c1d69b3><span class="word" data-v-9c1d69b3>Person.sayHi</span><span class="then" data-v-9c1d69b3>=</span><span class="function" data-v-9c1d69b3>function </span><span class="brackets" data-v-9c1d69b3>(){ </span><span class="comment" data-v-9c1d69b3>// 這邊不要用箭頭函數,因為沒this</span></div><div class="pTwo" data-v-9c1d69b3><span class="word" data-v-9c1d69b3>console.</span><span class="variable" data-v-9c1d69b3>log</span> <span class="brackets" data-v-9c1d69b3>(</span><span class="then" data-v-9c1d69b3>this</span> <span class="brackets" data-v-9c1d69b3>) </span><span class="comment" data-v-9c1d69b3>// Person // 指向構造函數</span></div><div class="brackets" data-v-9c1d69b3>}</div><div data-v-9c1d69b3><span class="word" data-v-9c1d69b3>Person.sayHi</span><span class="brackets" data-v-9c1d69b3>()</span></div></div><div id="threeobject005" class="articleCardTitle cor36 fz34" data-v-9c1d69b3> 5.5 內置構造函數 </div><p class="fz28 cor36" data-v-9c1d69b3> # 基本數據類型不是物件 為什麼 基本類型可以用方法? </p><p class="fz28 cor36" data-v-9c1d69b3># 為什麼字串可以使用.length?為什麼有方法?</p><p class="fz28" data-v-9c1d69b3> 在JS底層把基本數據類型包裝成了引用數據類型, 轉成物件, 物件有屬性和方法, 就可以使用方法了 </p><div class="bgcVS" data-v-9c1d69b3><div data-v-9c1d69b3><span class="function" data-v-9c1d69b3>const </span><span class="word" data-v-9c1d69b3>str</span> <span class="then" data-v-9c1d69b3>=</span><span class="word" data-v-9c1d69b3>&quot;wayne&quot;</span></div><div data-v-9c1d69b3><span class="word" data-v-9c1d69b3>console.</span><span class="variable" data-v-9c1d69b3>log</span> <span class="brackets" data-v-9c1d69b3>(</span><span class="word" data-v-9c1d69b3>str.length</span><span class="brackets" data-v-9c1d69b3>)</span></div><br data-v-9c1d69b3><div class="comment" data-v-9c1d69b3>// JS底層做包裝</div><div data-v-9c1d69b3><span class="function" data-v-9c1d69b3>const </span><span class="word" data-v-9c1d69b3>str</span> <span class="then" data-v-9c1d69b3>= new </span><span class="word" data-v-9c1d69b3>String</span> <span class="brackets" data-v-9c1d69b3>(</span><span class="src" data-v-9c1d69b3>&quot;wayne&quot;</span> <span class="brackets" data-v-9c1d69b3>)</span></div><div class="comment" data-v-9c1d69b3> // JS底層把簡單數據類型包裝成了引用數據類型 </div></div><p class="fz28 cor36" data-v-9c1d69b3>Object</p><p class="fz28" data-v-9c1d69b3> Object 是內置的 構造函數, 用於創建普通物件 (new Object) </p><br data-v-9c1d69b3><p class="fz28" data-v-9c1d69b3>3 個常用靜態方法</p><p class="fz28" data-v-9c1d69b3>( 靜態方法只有構造函數 Object 可以調用 )</p><br data-v-9c1d69b3><p class="fz28" data-v-9c1d69b3>Object.values 靜態方法獲取物件中所有屬性值</p><p class="fz28" data-v-9c1d69b3>注意: 返回的是一個數組</p><br data-v-9c1d69b3><div class="bgcVS" data-v-9c1d69b3><p data-v-9c1d69b3>想要獲得物件裡面的屬性和值?</p><br data-v-9c1d69b3><p data-v-9c1d69b3>之前</p><div data-v-9c1d69b3><span class="function" data-v-9c1d69b3>const </span> <span class="word" data-v-9c1d69b3>o</span><span class="then" data-v-9c1d69b3>=</span> <span class="brackets" data-v-9c1d69b3>{</span><span class="word" data-v-9c1d69b3>name:&quot;wayne&quot;,number:</span><span class="number" data-v-9c1d69b3>123</span> <span class="brackets" data-v-9c1d69b3>}</span></div><div data-v-9c1d69b3><span class="then" data-v-9c1d69b3>for </span> <span class="brackets" data-v-9c1d69b3>(</span><span class="function" data-v-9c1d69b3>let </span> <span class="word" data-v-9c1d69b3>k </span><span class="function" data-v-9c1d69b3>in </span> <span class="word" data-v-9c1d69b3>o</span><span class="brackets" data-v-9c1d69b3>){</span></div><div class="padTwo VSL" data-v-9c1d69b3><span class="word" data-v-9c1d69b3>console.</span><span class="variable" data-v-9c1d69b3>log</span> <span class="brackets" data-v-9c1d69b3>(</span><span class="word" data-v-9c1d69b3>k</span> <span class="brackets" data-v-9c1d69b3>) </span><span class="comment" data-v-9c1d69b3>// name number // 屬性</span></div><div class="padTwo VSL" data-v-9c1d69b3><span class="word" data-v-9c1d69b3>console.</span><span class="variable" data-v-9c1d69b3>log</span> <span class="brackets" data-v-9c1d69b3>(</span><span class="word" data-v-9c1d69b3>o</span> <span class="brackets" data-v-9c1d69b3>[</span><span class="word" data-v-9c1d69b3>k</span> <span class="brackets" data-v-9c1d69b3>]</span><span class="brackets" data-v-9c1d69b3>) </span><span class="comment" data-v-9c1d69b3>// wayne 123 // 值</span></div><div class="brackets" data-v-9c1d69b3>}</div><br data-v-9c1d69b3><br data-v-9c1d69b3><p data-v-9c1d69b3>用 Object.values</p><div data-v-9c1d69b3><span class="function" data-v-9c1d69b3>const </span> <span class="word" data-v-9c1d69b3>o</span><span class="then" data-v-9c1d69b3>=</span> <span class="brackets" data-v-9c1d69b3>{</span><span class="word" data-v-9c1d69b3>name:</span> <span class="src" data-v-9c1d69b3>&quot;wayne&quot;</span><span class="word" data-v-9c1d69b3>,number:</span><span class="number" data-v-9c1d69b3>123</span> <span class="brackets" data-v-9c1d69b3>}</span></div><div class="comment" data-v-9c1d69b3>// 獲得所有 屬性名</div><div data-v-9c1d69b3><span class="word" data-v-9c1d69b3>console</span><span class="variable" data-v-9c1d69b3>.log</span><span class="brackets" data-v-9c1d69b3>(</span><span class="brackets" data-v-9c1d69b3>Object</span><span class="variable" data-v-9c1d69b3>.keys</span><span class="brackets" data-v-9c1d69b3>(</span> <span class="word" data-v-9c1d69b3>o</span><span class="brackets" data-v-9c1d69b3>))</span><span class="comment" data-v-9c1d69b3>//返回數組[&quot;name&quot;,&quot;number&quot;]</span></div><div class="comment" data-v-9c1d69b3>// 獲得所有 屬性值</div><div data-v-9c1d69b3><span class="word" data-v-9c1d69b3>console</span><span class="variable" data-v-9c1d69b3>.log</span><span class="brackets" data-v-9c1d69b3>(</span><span class="brackets" data-v-9c1d69b3>Object</span><span class="variable" data-v-9c1d69b3>.values</span><span class="brackets" data-v-9c1d69b3>(</span> <span class="word" data-v-9c1d69b3>o</span><span class="brackets" data-v-9c1d69b3>))</span><span class="comment" data-v-9c1d69b3>//返回數組[&quot;wayne&quot;,&quot;123&quot;]</span></div></div><p class="fz28" data-v-9c1d69b3>Object.assign 靜態方法用於物件拷貝</p><div class="bgcVS" data-v-9c1d69b3><div data-v-9c1d69b3><span class="function" data-v-9c1d69b3>const </span> <span class="word" data-v-9c1d69b3>o</span><span class="then" data-v-9c1d69b3>=</span> <span class="brackets" data-v-9c1d69b3>{</span><span class="word" data-v-9c1d69b3>name:&quot;wayne&quot;,number:</span><span class="number" data-v-9c1d69b3>123</span> <span class="brackets" data-v-9c1d69b3>}</span></div><div data-v-9c1d69b3><span class="function" data-v-9c1d69b3>const </span><span class="word" data-v-9c1d69b3>obj</span> <span class="then" data-v-9c1d69b3>=</span><span class="brackets" data-v-9c1d69b3>{}</span></div><div data-v-9c1d69b3><span class="brackets" data-v-9c1d69b3>Object</span><span class="variable" data-v-9c1d69b3>.assign</span><span class="brackets" data-v-9c1d69b3>(</span> <span class="word" data-v-9c1d69b3>obj,o</span><span class="brackets" data-v-9c1d69b3>) </span><span class="comment" data-v-9c1d69b3>// (要拷貝的,被拷貝的)</span><span class="comment" data-v-9c1d69b3>// (右 賦值 給 左)</span></div><div data-v-9c1d69b3><span class="word" data-v-9c1d69b3>console.</span><span class="variable" data-v-9c1d69b3>log</span> <span class="brackets" data-v-9c1d69b3>(</span><span class="word" data-v-9c1d69b3>obj</span><span class="brackets" data-v-9c1d69b3>)</span></div><br data-v-9c1d69b3><p data-v-9c1d69b3>可用來新增屬性</p><br data-v-9c1d69b3><div data-v-9c1d69b3><span class="brackets" data-v-9c1d69b3>Object</span><span class="variable" data-v-9c1d69b3>.assign</span><span class="brackets" data-v-9c1d69b3>(</span> <span class="word" data-v-9c1d69b3>o,</span><span class="brackets" data-v-9c1d69b3>{</span><span class="word" data-v-9c1d69b3>gender:&quot;男&quot;</span><span class="brackets" data-v-9c1d69b3>})</span></div><div data-v-9c1d69b3><span class="word" data-v-9c1d69b3>console.</span><span class="variable" data-v-9c1d69b3>log</span> <span class="brackets" data-v-9c1d69b3>(</span><span class="word" data-v-9c1d69b3>o</span><span class="brackets" data-v-9c1d69b3>)</span></div><br data-v-9c1d69b3><p data-v-9c1d69b3>把一個物件 拷貝到裡面去</p></div>',71),v8=K('<div id="" class="articleCardTitle cor36 fz34" data-v-9c1d69b3>String 方法</div><p class="fz28" data-v-9c1d69b3>1. 實例屬性 length 獲取字串長度</p><br data-v-9c1d69b3><p class="fz28" data-v-9c1d69b3>2. 實例方法 split(&quot;分隔符&quot;) 用來將字串拆分成數組</p><div class="bgcVS" data-v-9c1d69b3><div data-v-9c1d69b3><span class="function" data-v-9c1d69b3>const </span><span class="word" data-v-9c1d69b3>str</span> <span class="then" data-v-9c1d69b3>=</span><span class="src" data-v-9c1d69b3>&quot;wayne,jack&quot;</span></div><div data-v-9c1d69b3><span class="function" data-v-9c1d69b3>const </span><span class="word" data-v-9c1d69b3>arr</span> <span class="then" data-v-9c1d69b3>=</span><span class="word" data-v-9c1d69b3>str.</span><span class="variable" data-v-9c1d69b3>split</span><span class="brackets" data-v-9c1d69b3>(</span> <span class="then" data-v-9c1d69b3>&quot;,&quot;</span><span class="brackets" data-v-9c1d69b3>)</span></div><div data-v-9c1d69b3><span class="word" data-v-9c1d69b3>console.</span><span class="variable" data-v-9c1d69b3>log</span> <span class="brackets" data-v-9c1d69b3>(</span><span class="word" data-v-9c1d69b3>arr</span> <span class="brackets" data-v-9c1d69b3>)</span><span class="comment" data-v-9c1d69b3>//[&quot;wayne&quot;,&quot;jack&quot;]</span></div><div data-v-9c1d69b3><span class="function" data-v-9c1d69b3>const </span><span class="word" data-v-9c1d69b3>str1</span> <span class="then" data-v-9c1d69b3>=</span><span class="src" data-v-9c1d69b3>&quot;2077-1-1&quot;</span></div><div data-v-9c1d69b3><span class="function" data-v-9c1d69b3>const </span><span class="word" data-v-9c1d69b3>arr1</span> <span class="then" data-v-9c1d69b3>=</span><span class="word" data-v-9c1d69b3>str1.</span><span class="variable" data-v-9c1d69b3>split</span><span class="brackets" data-v-9c1d69b3>(</span> <span class="src" data-v-9c1d69b3>&quot;-&quot;</span><span class="brackets" data-v-9c1d69b3>)</span></div><div data-v-9c1d69b3><span class="word" data-v-9c1d69b3>console.</span><span class="variable" data-v-9c1d69b3>log</span> <span class="brackets" data-v-9c1d69b3>(</span><span class="word" data-v-9c1d69b3>arr</span> <span class="brackets" data-v-9c1d69b3>)</span><span class="comment" data-v-9c1d69b3>//[&quot;2077&quot;,&quot;1&quot;,&quot;1&quot;]</span></div></div><p class="fz28" data-v-9c1d69b3> 3. 實例方法 substring (需要擷取的第一個字符的索引[,結束的索引號]) 用於字串擷取 </p><br data-v-9c1d69b3><p class="fz28" data-v-9c1d69b3>3.1 省略 結束索引號 默認取到最後</p><p class="fz28" data-v-9c1d69b3>3.2 結束索引號 不包含 想要擷取的部分</p><div class="bgcVS" data-v-9c1d69b3><div data-v-9c1d69b3><span class="comment" data-v-9c1d69b3>1.裡面幾個參數 2. 返回值返回什麼 3. 使用方法</span></div><br data-v-9c1d69b3><div data-v-9c1d69b3><span class="word" data-v-9c1d69b3>str.</span><span class="variable" data-v-9c1d69b3>substring</span><span class="brackets" data-v-9c1d69b3>(</span><span class="word" data-v-9c1d69b3>要截的第一個字所引</span><span class="brackets" data-v-9c1d69b3>)</span></div><div data-v-9c1d69b3><span class="cor36" data-v-9c1d69b3>返回</span><span class="word" data-v-9c1d69b3>擷取的那部分的新字串</span></div><br data-v-9c1d69b3><div data-v-9c1d69b3><span class="function" data-v-9c1d69b3>const </span><span class="word" data-v-9c1d69b3>str</span> <span class="then" data-v-9c1d69b3>=</span><span class="src" data-v-9c1d69b3>&quot;waynetestneo&quot;</span></div><div data-v-9c1d69b3><span class="word" data-v-9c1d69b3>console.</span><span class="variable" data-v-9c1d69b3>log</span> <span class="brackets" data-v-9c1d69b3>(</span><span class="word" data-v-9c1d69b3>str.</span><span class="variable" data-v-9c1d69b3>substring</span><span class="brackets" data-v-9c1d69b3>(</span> <span class="number" data-v-9c1d69b3>9</span><span class="brackets" data-v-9c1d69b3>)) </span><span class="comment" data-v-9c1d69b3>// neo</span></div><div data-v-9c1d69b3><span class="word" data-v-9c1d69b3>console.</span><span class="variable" data-v-9c1d69b3>log</span> <span class="brackets" data-v-9c1d69b3>(</span><span class="word" data-v-9c1d69b3>str.</span><span class="variable" data-v-9c1d69b3>substring</span><span class="brackets" data-v-9c1d69b3>(</span> <span class="number" data-v-9c1d69b3>5 , 9</span><span class="brackets" data-v-9c1d69b3>)) </span><span class="comment" data-v-9c1d69b3>// test</span></div></div><p class="fz28" data-v-9c1d69b3> 4. 實例方法 startWith (檢測字串[,檢測位置索引號]) 判斷是否以某字符開頭 </p><p class="fz28" data-v-9c1d69b3>返回 true or false</p><div class="bgcVS" data-v-9c1d69b3><div data-v-9c1d69b3><span class="comment" data-v-9c1d69b3>1.裡面幾個參數 2. 返回值返回什麼 3. 使用方法</span></div><br data-v-9c1d69b3><div data-v-9c1d69b3><span class="word" data-v-9c1d69b3>str.</span><span class="variable" data-v-9c1d69b3>starstWith</span><span class="brackets" data-v-9c1d69b3>(</span><span class="word" data-v-9c1d69b3>要搜索的字串</span><span class="brackets" data-v-9c1d69b3>)</span></div><br data-v-9c1d69b3><div data-v-9c1d69b3><span class="word" data-v-9c1d69b3>一定要開頭 </span><span class="comment" data-v-9c1d69b3>＜=&gt; includes 就不用</span></div><p class="fz28" data-v-9c1d69b3>返回 true or false</p><br data-v-9c1d69b3><div data-v-9c1d69b3><span class="function" data-v-9c1d69b3>const </span><span class="word" data-v-9c1d69b3>str</span> <span class="then" data-v-9c1d69b3>=</span><span class="src" data-v-9c1d69b3>&quot;wayne學JS中&quot;</span></div><div data-v-9c1d69b3><span class="word" data-v-9c1d69b3>console.</span><span class="variable" data-v-9c1d69b3>log</span> <span class="brackets" data-v-9c1d69b3>(</span><span class="word" data-v-9c1d69b3>str.</span><span class="variable" data-v-9c1d69b3>startsWith</span><span class="brackets" data-v-9c1d69b3>(</span> <span class="word" data-v-9c1d69b3></span><span class="src" data-v-9c1d69b3>&quot;yne&quot;</span> <span class="brackets" data-v-9c1d69b3>))</span><span class="comment" data-v-9c1d69b3>//true</span></div></div><p class="fz28" data-v-9c1d69b3> 5. 實例方法 includes (搜索的字串[,檢測位置索引號]) 判斷一個字串是否包含在另一個字串中 </p><p class="fz28" data-v-9c1d69b3>返回 true or false</p><div class="bgcVS" data-v-9c1d69b3><div data-v-9c1d69b3><span class="comment" data-v-9c1d69b3>1.裡面幾個參數 2. 返回值返回什麼 3. 使用方法</span></div><br data-v-9c1d69b3><div data-v-9c1d69b3><span class="word" data-v-9c1d69b3>str.</span><span class="variable" data-v-9c1d69b3>includes</span><span class="brackets" data-v-9c1d69b3>(</span><span class="word" data-v-9c1d69b3>要搜索的字串</span><span class="brackets" data-v-9c1d69b3>)</span></div><br data-v-9c1d69b3><div data-v-9c1d69b3><span class="word" data-v-9c1d69b3>裡面有就 true </span><span class="comment" data-v-9c1d69b3>＜=&gt; starstWith 一定要開頭</span></div><p class="fz28" data-v-9c1d69b3>返回 true or false</p><p class="fz28" data-v-9c1d69b3>有區分大小寫 false</p><br data-v-9c1d69b3><div data-v-9c1d69b3><span class="function" data-v-9c1d69b3>const </span><span class="word" data-v-9c1d69b3>str</span> <span class="then" data-v-9c1d69b3>=</span><span class="src" data-v-9c1d69b3>&quot;我是wayne&quot;</span></div><div data-v-9c1d69b3><span class="word" data-v-9c1d69b3>console.</span><span class="variable" data-v-9c1d69b3>log</span> <span class="brackets" data-v-9c1d69b3>(</span><span class="word" data-v-9c1d69b3>str.</span><span class="variable" data-v-9c1d69b3>includes</span><span class="brackets" data-v-9c1d69b3>(</span> <span class="src" data-v-9c1d69b3>&quot;wayne&quot;</span><span class="brackets" data-v-9c1d69b3>) )</span><span class="comment" data-v-9c1d69b3>//true</span></div><div data-v-9c1d69b3><span class="word" data-v-9c1d69b3>console.</span><span class="variable" data-v-9c1d69b3>log</span> <span class="brackets" data-v-9c1d69b3>(</span><span class="word" data-v-9c1d69b3>str.</span><span class="variable" data-v-9c1d69b3>includes</span><span class="brackets" data-v-9c1d69b3>(</span> <span class="src" data-v-9c1d69b3>&quot;wayne&quot; </span><span class="number" data-v-9c1d69b3>, 3 </span><span class="brackets" data-v-9c1d69b3>) )</span><span class="comment" data-v-9c1d69b3>//false</span></div></div><p class="fz28" data-v-9c1d69b3>6. 實例方法 toUpperCase 用於將字母轉成大寫</p><br data-v-9c1d69b3><p class="fz28" data-v-9c1d69b3>7. 實例方法 toLowerCase 用於將字母轉成小寫</p><br data-v-9c1d69b3><p class="fz28" data-v-9c1d69b3>8. 實例方法 indexOf 檢測是否包含某字符</p><br data-v-9c1d69b3><p class="fz28" data-v-9c1d69b3>9. 實例方法 endsWith 檢測是否以某字符結尾</p><br data-v-9c1d69b3><p class="fz28" data-v-9c1d69b3>10. 實例方法 replace 用於替換字串, 支持正則匹配</p><br data-v-9c1d69b3><p class="fz28" data-v-9c1d69b3>11. 實例方法 match 用於查找字串, 支持正則匹配</p><br data-v-9c1d69b3><div class="bgcVS" data-v-9c1d69b3><div data-v-9c1d69b3><span class="function" data-v-9c1d69b3>const </span><span class="word" data-v-9c1d69b3>tea</span> <span class="then" data-v-9c1d69b3>=</span><span class="src" data-v-9c1d69b3>&quot;50g的飲料,100g茶葉&quot;</span></div><span class="comment" data-v-9c1d69b3>// 1.把字串轉成數組</span><div data-v-9c1d69b3><span class="word" data-v-9c1d69b3>console.</span><span class="variable" data-v-9c1d69b3>log</span> <span class="brackets" data-v-9c1d69b3>(</span><span class="word" data-v-9c1d69b3>tea.</span><span class="variable" data-v-9c1d69b3>split</span><span class="brackets" data-v-9c1d69b3>(</span> <span class="src" data-v-9c1d69b3>&quot;,&quot;</span><span class="brackets" data-v-9c1d69b3>)) </span><span class="comment" data-v-9c1d69b3>// [ &quot;50g的飲料&quot;, &quot;100g茶葉&quot; ]</span></div><span class="comment" data-v-9c1d69b3>// 2. 有幾條數據 我就生成幾個 ＜span&gt;</span><div data-v-9c1d69b3><span class="word" data-v-9c1d69b3>tea.</span><span class="variable" data-v-9c1d69b3>split</span><span class="brackets" data-v-9c1d69b3>(</span> <span class="src" data-v-9c1d69b3>&quot;,&quot;</span><span class="brackets" data-v-9c1d69b3>)</span><span class="variable" data-v-9c1d69b3>.map</span><span class="brackets" data-v-9c1d69b3>(</span><span class="function" data-v-9c1d69b3>function </span><span class="brackets" data-v-9c1d69b3>(</span> <span class="word" data-v-9c1d69b3>item</span><span class="brackets" data-v-9c1d69b3>){ </span><span class="comment" data-v-9c1d69b3>//item是裡面的每一個值</span></div><div class="pTwo" data-v-9c1d69b3><div class="dis" data-v-9c1d69b3><div data-v-9c1d69b3><span class="then" data-v-9c1d69b3>return </span><span class="src" data-v-9c1d69b3>`＜span&gt;贈品</span><span class="then" data-v-9c1d69b3>${</span> <span class="word" data-v-9c1d69b3>item</span><span class="then" data-v-9c1d69b3>}</span> <span class="src" data-v-9c1d69b3>＜/span&gt;`</span></div><div class="comment" data-v-9c1d69b3><span data-v-9c1d69b3>//贈品50g的飲料</span><br data-v-9c1d69b3><span data-v-9c1d69b3>//贈品100g茶葉</span></div></div></div><span class="brackets" data-v-9c1d69b3>})</span><div data-v-9c1d69b3><span class="function" data-v-9c1d69b3>const </span><span class="word" data-v-9c1d69b3>str</span> <span class="then" data-v-9c1d69b3>=</span><span class="word" data-v-9c1d69b3>tea.</span><span class="variable" data-v-9c1d69b3>split</span><span class="brackets" data-v-9c1d69b3>(</span> <span class="src" data-v-9c1d69b3>&quot;,&quot;</span><span class="brackets" data-v-9c1d69b3>)</span><span class="variable" data-v-9c1d69b3>.map</span><span class="brackets" data-v-9c1d69b3>(</span><span class="function" data-v-9c1d69b3>function </span><span class="brackets" data-v-9c1d69b3>(</span> <span class="word" data-v-9c1d69b3>item</span><span class="brackets" data-v-9c1d69b3>){ </span></div><div class="pTwo" data-v-9c1d69b3><div data-v-9c1d69b3><span class="then" data-v-9c1d69b3>return </span><span class="src" data-v-9c1d69b3>`＜span&gt;贈品</span><span class="then" data-v-9c1d69b3>${</span> <span class="word" data-v-9c1d69b3>item</span><span class="then" data-v-9c1d69b3>}</span> <span class="src" data-v-9c1d69b3>＜/span&gt;`</span></div></div><span class="brackets" data-v-9c1d69b3>})</span><div data-v-9c1d69b3><span class="word" data-v-9c1d69b3>console.</span><span class="variable" data-v-9c1d69b3>log</span> <span class="brackets" data-v-9c1d69b3>(</span><span class="word" data-v-9c1d69b3>arr</span> <span class="brackets" data-v-9c1d69b3>) </span><span class="comment" data-v-9c1d69b3>[&quot;＜span&gt;贈品50g的飲料＜/span&gt;&quot;,&quot;＜span&gt;贈品100g茶葉＜/span&gt;&quot;]</span></div><br data-v-9c1d69b3><div class="comment" data-v-9c1d69b3>數組不能直接往盒子加</div><div class="comment" data-v-9c1d69b3>想要改成字串</div><div data-v-9c1d69b3><span class="function" data-v-9c1d69b3>const </span><span class="word" data-v-9c1d69b3>str</span> <span class="then" data-v-9c1d69b3>=</span><span class="word" data-v-9c1d69b3>tea.</span><span class="variable" data-v-9c1d69b3>split</span><span class="brackets" data-v-9c1d69b3>(</span> <span class="src" data-v-9c1d69b3>&quot;,&quot;</span><span class="brackets" data-v-9c1d69b3>)</span><span class="variable" data-v-9c1d69b3>.map</span><span class="brackets" data-v-9c1d69b3>(</span><span class="function" data-v-9c1d69b3>function </span><span class="brackets" data-v-9c1d69b3>(</span> <span class="word" data-v-9c1d69b3>item</span><span class="brackets" data-v-9c1d69b3>){ </span></div><div class="pTwo" data-v-9c1d69b3><div data-v-9c1d69b3><span class="then" data-v-9c1d69b3>return </span><span class="src" data-v-9c1d69b3>`＜span&gt;贈品</span><span class="then" data-v-9c1d69b3>${</span> <span class="word" data-v-9c1d69b3>item</span><span class="then" data-v-9c1d69b3>}</span> <span class="src" data-v-9c1d69b3>＜/span&gt;`</span></div></div><div data-v-9c1d69b3><span class="brackets" data-v-9c1d69b3>})</span><span class="variable" data-v-9c1d69b3>.join</span><span class="brackets" data-v-9c1d69b3>(</span> <span class="src" data-v-9c1d69b3>&quot;&quot;</span><span class="brackets" data-v-9c1d69b3>)</span></div><div data-v-9c1d69b3><span class="word" data-v-9c1d69b3>console.</span><span class="variable" data-v-9c1d69b3>log</span> <span class="brackets" data-v-9c1d69b3>(</span><span class="word" data-v-9c1d69b3>str</span> <span class="brackets" data-v-9c1d69b3>)</span></div><span class="comment" data-v-9c1d69b3>＜span&gt;贈品50g的飲料＜/span&gt;＜span&gt;贈品100g茶葉＜/span&gt;</span><div data-v-9c1d69b3><span class="word" data-v-9c1d69b3>document.</span><span class="variable" data-v-9c1d69b3>querySelector</span><span class="brackets" data-v-9c1d69b3>(</span> <span class="src" data-v-9c1d69b3>&quot;div&quot;</span><span class="brackets" data-v-9c1d69b3>)</span><span class="variable" data-v-9c1d69b3>.innerHTML</span><span class="then" data-v-9c1d69b3>=</span> <span class="word" data-v-9c1d69b3>str</span></div><br data-v-9c1d69b3><br data-v-9c1d69b3><p data-v-9c1d69b3>轉成箭頭函數</p><br data-v-9c1d69b3><div data-v-9c1d69b3><span class="function" data-v-9c1d69b3>const </span><span class="word" data-v-9c1d69b3>tea</span> <span class="then" data-v-9c1d69b3>=</span><span class="src" data-v-9c1d69b3>&quot;50g的飲料,100g茶葉&quot;</span></div><br data-v-9c1d69b3><div data-v-9c1d69b3><span class="word" data-v-9c1d69b3>tea.</span><span class="variable" data-v-9c1d69b3>split</span><span class="brackets" data-v-9c1d69b3>(</span> <span class="then" data-v-9c1d69b3>&quot;,&quot;</span><span class="brackets" data-v-9c1d69b3>)</span><span class="variable" data-v-9c1d69b3>.map</span><span class="brackets" data-v-9c1d69b3>(</span> <span class="word" data-v-9c1d69b3>item</span><span class="function" data-v-9c1d69b3>=&gt;</span><span class="src" data-v-9c1d69b3>`＜span&gt;贈品</span><span class="then" data-v-9c1d69b3>${</span> <span class="word" data-v-9c1d69b3>item</span><span class="then" data-v-9c1d69b3>}</span><span class="src" data-v-9c1d69b3>＜/span&gt;＜br&gt;`</span><span class="brackets" data-v-9c1d69b3>)</span><span class="variable" data-v-9c1d69b3>.join</span><span class="brackets" data-v-9c1d69b3>(</span> <span class="src" data-v-9c1d69b3>&quot;&quot;</span><span class="brackets" data-v-9c1d69b3>)</span></div><br data-v-9c1d69b3><div data-v-9c1d69b3><span class="word" data-v-9c1d69b3>document.</span><span class="variable" data-v-9c1d69b3>querySelector</span><span class="brackets" data-v-9c1d69b3>(</span> <span class="word" data-v-9c1d69b3>&quot;div&quot;</span><span class="brackets" data-v-9c1d69b3>)</span><span class="variable" data-v-9c1d69b3>.innerHTML</span><span class="then" data-v-9c1d69b3>=</span><span class="word" data-v-9c1d69b3>tea.</span><span class="variable" data-v-9c1d69b3>split</span><span class="brackets" data-v-9c1d69b3>(</span> <span class="then" data-v-9c1d69b3>&quot;,&quot;</span><span class="brackets" data-v-9c1d69b3>)</span><span class="variable" data-v-9c1d69b3>.map</span><span class="brackets" data-v-9c1d69b3>(</span> <span class="word" data-v-9c1d69b3>item</span><span class="function" data-v-9c1d69b3>=&gt;</span><span class="src" data-v-9c1d69b3>`＜span&gt;贈品</span><span class="then" data-v-9c1d69b3>${</span> <span class="word" data-v-9c1d69b3>item</span><span class="then" data-v-9c1d69b3>}</span><span class="src" data-v-9c1d69b3>＜/span&gt;＜br&gt;`</span><span class="brackets" data-v-9c1d69b3>)</span><span class="variable" data-v-9c1d69b3>.join</span><span class="brackets" data-v-9c1d69b3>(</span> <span class="src" data-v-9c1d69b3>&quot;&quot;</span><span class="brackets" data-v-9c1d69b3>)</span></div></div><p class="fz28 cor36" data-v-9c1d69b3>Number</p><p class="fz28" data-v-9c1d69b3>1. toFixed() 設置保留小數位的長度</p><div class="bgcVS" data-v-9c1d69b3><div data-v-9c1d69b3><span class="function" data-v-9c1d69b3>const </span><span class="word" data-v-9c1d69b3>num</span> <span class="then" data-v-9c1d69b3>=</span><span class="number" data-v-9c1d69b3>10.123</span></div><div data-v-9c1d69b3><span class="word" data-v-9c1d69b3>console.</span><span class="variable" data-v-9c1d69b3>log</span> <span class="brackets" data-v-9c1d69b3>(</span><span class="word" data-v-9c1d69b3>num.toFixed</span><span class="brackets" data-v-9c1d69b3>()) </span><span class="comment" data-v-9c1d69b3>// 10 // 四捨五入到整數位</span></div><div data-v-9c1d69b3><span class="word" data-v-9c1d69b3>console.</span><span class="variable" data-v-9c1d69b3>log</span> <span class="brackets" data-v-9c1d69b3>(</span><span class="word" data-v-9c1d69b3>num.toFixed</span><span class="brackets" data-v-9c1d69b3>(</span> <span class="number" data-v-9c1d69b3>2</span><span class="brackets" data-v-9c1d69b3> )) </span><span class="comment" data-v-9c1d69b3>// 10.12</span></div><div data-v-9c1d69b3><span class="function" data-v-9c1d69b3>const </span><span class="word" data-v-9c1d69b3>integer</span> <span class="then" data-v-9c1d69b3>=</span><span class="number" data-v-9c1d69b3>10</span></div><div data-v-9c1d69b3><span class="word" data-v-9c1d69b3>console.</span><span class="variable" data-v-9c1d69b3>log</span> <span class="brackets" data-v-9c1d69b3>(</span><span class="word" data-v-9c1d69b3>num.toFixed</span><span class="brackets" data-v-9c1d69b3>(</span> <span class="number" data-v-9c1d69b3>2</span><span class="brackets" data-v-9c1d69b3> )) </span><span class="comment" data-v-9c1d69b3>// 10.00</span></div></div><p class="fz28" data-v-9c1d69b3> 2. Math.floor()：無條件捨去，回傳大於所給數字的最小整數 </p><br data-v-9c1d69b3><br data-v-9c1d69b3><p class="fz28" data-v-9c1d69b3></p><p class="fz28" data-v-9c1d69b3></p><p class="fz28" data-v-9c1d69b3></p><p class="fz28" data-v-9c1d69b3></p><p class="fz28" data-v-9c1d69b3></p><p class="fz28" data-v-9c1d69b3></p><p class="fz28" data-v-9c1d69b3></p><p class="fz28" data-v-9c1d69b3></p><p class="fz28" data-v-9c1d69b3></p><p class="fz28" data-v-9c1d69b3></p><p class="fz28" data-v-9c1d69b3></p><p class="fz28" data-v-9c1d69b3></p><p class="fz28" data-v-9c1d69b3></p><p class="fz28" data-v-9c1d69b3></p><p class="fz28" data-v-9c1d69b3></p><p class="fz28" data-v-9c1d69b3></p><p class="fz28" data-v-9c1d69b3></p><p class="fz28" data-v-9c1d69b3></p><p class="fz28" data-v-9c1d69b3></p><p class="fz28" data-v-9c1d69b3></p><p class="fz28" data-v-9c1d69b3></p><p class="fz28" data-v-9c1d69b3></p><p class="fz28" data-v-9c1d69b3></p><p class="fz28" data-v-9c1d69b3></p><p class="fz28" data-v-9c1d69b3></p><p class="fz28" data-v-9c1d69b3></p><p class="fz28" data-v-9c1d69b3></p><p class="fz28" data-v-9c1d69b3></p><p class="fz28" data-v-9c1d69b3></p><p class="fz28" data-v-9c1d69b3></p><p class="fz28" data-v-9c1d69b3></p><p class="fz28" data-v-9c1d69b3></p><p class="fz28" data-v-9c1d69b3></p><p class="fz28" data-v-9c1d69b3></p><p class="fz28" data-v-9c1d69b3></p><p class="fz28" data-v-9c1d69b3></p><p class="fz28" data-v-9c1d69b3></p><p class="fz28" data-v-9c1d69b3></p><p class="fz28" data-v-9c1d69b3></p><p class="fz28" data-v-9c1d69b3></p><p class="fz28" data-v-9c1d69b3></p><p class="fz28" data-v-9c1d69b3></p><p class="fz28" data-v-9c1d69b3></p><p class="fz28" data-v-9c1d69b3></p><p class="fz28" data-v-9c1d69b3></p>',80),n8=qn(()=>n("div",{class:"toTopButton"},[n("div",{class:"disCen"},"___"),n("div",{class:"disCen"},"▲")],-1)),e8=[n8],p8=qn(()=>n("div",{class:"toBotButton"},[n("div",{class:"disCen"},"▼"),n("div",{class:"disCen"},"￣")],-1)),l8=[p8],b8={__name:"JsPageThreeFive",setup(a){const s=ba(!1);window.addEventListener("scroll",function(){s.value=window.scrollY>0});function d(){window.scrollTo({top:0,left:0,behavior:"smooth"})}function v(){window.scrollTo({top:999999,left:0,behavior:"smooth"})}function t(e){window.scrollTo({top:document.getElementById(`${e}`).offsetTop,behavior:"smooth"})}return(e,c)=>{const l=qa("RouterLink");return aa(),ta(G,null,[n("section",null,[n("div",Qf,[n("div",Zf,[n("div",a8,[n("div",{onClick:c[0]||(c[0]=p=>t("threeobject001")),class:"leftNavText"}," 創建物件 "),n("div",{onClick:c[1]||(c[1]=p=>t("threeobject002")),class:"leftNavText"}," 構造函數 "),n("div",{onClick:c[2]||(c[2]=p=>t("threeobject003")),class:"leftNavText"}," new做了什麼 "),n("div",{onClick:c[3]||(c[3]=p=>t("threeobject004")),class:"leftNavText"}," 實例&靜態成員 "),n("div",{onClick:c[4]||(c[4]=p=>t("threeobject005")),class:"leftNavText"}," 內置構造函數 "),n("div",{onClick:c[5]||(c[5]=p=>t("")),class:"leftNavText"})])])]),n("div",s8,[n("div",d8,[n("div",t8,[c8,n("div",null,[k(l,{to:"/js/method",class:"fz34"},{default:S(()=>[fa("Array 方法")]),_:1})]),v8])])])]),n("div",null,[W(k(B,{name:"fade",tag:"div"},{default:S(()=>[n("div",{onClick:d,class:"toTop"},e8)]),_:1},512),[[U,s.value]]),W(k(B,{name:"fade",tag:"div"},{default:S(()=>[n("div",{onClick:v,class:"toBot"},l8)]),_:1},512),[[U,s.value]])])],64)}}},r8=pa(b8,[["__scopeId","data-v-9c1d69b3"]]),i8="/vue-learn-js/assets/object001-1817e630.jpg";const _n=a=>(wa("data-v-68f931b5"),a=a(),ma(),a),f8={class:"leftNav"},o8={class:"leftNavContainer"},u8={class:"leftNavLayout"},w8=K('<div class="Main" data-v-68f931b5><div class="mainContainer" data-v-68f931b5><div class="mainLayout" data-v-68f931b5><br data-v-68f931b5><br data-v-68f931b5><p class="fz28" data-v-68f931b5>總分總</p><p class="fz28" data-v-68f931b5>1.要講哪個知識點</p><p class="fz28" data-v-68f931b5>2.細講</p><p class="fz28" data-v-68f931b5>3.總結</p><br data-v-68f931b5><br data-v-68f931b5><div id="threeprototype001" class="articleCardTitle cor36 fz34" data-v-68f931b5> 6.1 編程思想 </div><p class="fz28" data-v-68f931b5><span class="cor36" data-v-68f931b5> 面相過程 </span><span class="cor17" data-v-68f931b5> . . . </span><span class="cor36" data-v-68f931b5> 函數導向 </span><span class="cor17" data-v-68f931b5> . . . </span><span class="cor36" data-v-68f931b5>functional programming </span></p><p class="fz28" data-v-68f931b5> 分析解決問題所需要的步驟, 然後用函數把這些步驟一步一步實現, 使用時再一個一個的依次調用 </p><br data-v-68f931b5><br data-v-68f931b5><br data-v-68f931b5><p class="fz28" data-v-68f931b5><span class="cor36" data-v-68f931b5> 面相對象 </span><span class="cor17" data-v-68f931b5> . . . </span><span class="cor36" data-v-68f931b5> 物件導向 OOP </span><span class="cor17" data-v-68f931b5> . . . </span><span class="cor36" data-v-68f931b5>Object-oriented programming </span></p><p class="fz28" data-v-68f931b5>每一個物件都是功能中心, 有明確分工</p><p class="fz28" data-v-68f931b5></p><br data-v-68f931b5><br data-v-68f931b5><p class="fz28 cor36" data-v-68f931b5># 3 特性</p><p class="fz28" data-v-68f931b5> 封裝 <span class="cor17" data-v-68f931b5> . . . . . . </span> 我一點開關 就 掃地 </p><p class="fz28" data-v-68f931b5></p><br data-v-68f931b5><p class="fz28" data-v-68f931b5> 繼承 <span class="cor17" data-v-68f931b5> . . . . . . </span> 掃地機 繼承 拖拉機 接口 </p><p class="fz28" data-v-68f931b5></p><br data-v-68f931b5><p class="fz28" data-v-68f931b5> 多態 <span class="cor17" data-v-68f931b5> . . . . . . </span> 多功能 平時掃地 天熱變風扇 </p><p class="fz28" data-v-68f931b5></p><br data-v-68f931b5><p class="fz28" data-v-68f931b5> 重用 <span class="cor17" data-v-68f931b5> . . . . . . </span> 沒用額外動力, 重複用發動機 </p><p class="fz28" data-v-68f931b5> 低耦合 <span class="cor17" data-v-68f931b5> . . . . . . </span> 掃把壞了拿下來換新的 不影響別的 </p><br data-v-68f931b5><br data-v-68f931b5><div class="dis spaAro" data-v-68f931b5><div data-v-68f931b5><p class="fz28 cor36" data-v-68f931b5>函數導向編程</p><p class="fz28 cor36" data-v-68f931b5># 優</p><p class="fz28" data-v-68f931b5>性能比 物件導向高 , 適合跟硬件聯繫很緊密的東西</p><br data-v-68f931b5><p class="fz28 cor36" data-v-68f931b5># 缺</p><p class="fz28" data-v-68f931b5>沒有物件導向易維護 , 易復用 , 易擴展</p></div><div data-v-68f931b5><p class="fz28 cor36" data-v-68f931b5>物件導向編程</p><p class="fz28 cor36" data-v-68f931b5># 優</p><p class="fz28" data-v-68f931b5>易維護 , 易復用 , 易擴展</p><p class="fz28" data-v-68f931b5> 有封裝 , 繼承 , 多態 , 可設計出 低耦合 的系統 , 系統更靈活、易維護 </p><br data-v-68f931b5><p class="fz28 cor36" data-v-68f931b5># 缺</p><p class="fz28" data-v-68f931b5>性能比 物件導向低</p></div></div><br data-v-68f931b5><div id="threeprototype002" class="articleCardTitle cor36 fz34" data-v-68f931b5> 6.2 構造函數 </div><div data-v-68f931b5><span class="cor36 fz28" data-v-68f931b5>封裝 </span><span class="cor17" data-v-68f931b5> . . . . . </span><span class="fz28" data-v-68f931b5>JS 透過 構造函數 實現 封裝</span></div><br data-v-68f931b5><p class="fz28" data-v-68f931b5>構造函數很好用 , 但是 存在 浪費 內存 問題</p><div class="bgcVS" data-v-68f931b5><p data-v-68f931b5>創建 構造函數</p><br data-v-68f931b5><div class="disCen" data-v-68f931b5><img style="width:100%;" src="'+i8+'" data-v-68f931b5></div><br data-v-68f931b5><p class="fz28" data-v-68f931b5>如果我創建 200 個物件</p><p class="fz28" data-v-68f931b5>堆 放了 200 個 function</p><p class="fz28" data-v-68f931b5>浪費 內存</p></div><div class="articleCardTitle cor36 fz34" data-v-68f931b5>6. 原型</div><p class="fz28" data-v-68f931b5>解決構造函數 浪費內存問題</p><br data-v-68f931b5><p class="fz28" data-v-68f931b5> 1. 構造函數 通過原型 分配的函數 是 所有對象 所共享的 </p><br data-v-68f931b5><p class="fz28" data-v-68f931b5> 2. JS 規定 每個 構造函數 都有一個 prototype 屬性, 指向另一個對象, 也稱為原型對象 </p><br data-v-68f931b5><p class="fz28" data-v-68f931b5> 3. 這個對象 可以 掛載函數, 對象 實例化 不會 多次創建原型上函數, 節約內存 </p><br data-v-68f931b5><p class="fz28" data-v-68f931b5> 4. 可以把 不變的方法 直接定義在 prototype 對象上 , 這樣所有對象 的實例 就可以共享這些方法 </p><br data-v-68f931b5><p class="fz28" data-v-68f931b5>5. 構造函數和原型對象中的 this 都指向 實例化的對象</p><div class="bgcVS" data-v-68f931b5><div data-v-68f931b5><span class="function" data-v-68f931b5>function </span><span class="word" data-v-68f931b5>Person</span> <span class="brackets" data-v-68f931b5>(</span><span class="word" data-v-68f931b5>uname,number</span><span class="brackets" data-v-68f931b5>){</span></div><div class="pTwo VSL" data-v-68f931b5><span class="comment" data-v-68f931b5>// this.name=uname</span></div><div class="pTwo VSL" data-v-68f931b5><span class="then" data-v-68f931b5>this</span><span class="word" data-v-68f931b5>.uname</span> <span class="then" data-v-68f931b5>=</span><span class="word" data-v-68f931b5>uname</span></div><div class="pTwo VSL" data-v-68f931b5><span class="comment" data-v-68f931b5>//物件的屬性 . . . 形參</span></div><div class="pTwo VSL" data-v-68f931b5><span class="then" data-v-68f931b5>this</span> <span class="word" data-v-68f931b5>.number</span><span class="then" data-v-68f931b5>=</span> <span class="word" data-v-68f931b5>number</span></div><div class="pTwo VSL" data-v-68f931b5><span class="then" data-v-68f931b5>this.</span> <span class="word" data-v-68f931b5>sayHi</span><span class="then" data-v-68f931b5>=</span><span class="function" data-v-68f931b5>function </span><span class="brackets" data-v-68f931b5>(){</span></div><div class="pFou VSL" data-v-68f931b5><span class="word" data-v-68f931b5>console.</span><span class="variable" data-v-68f931b5>log</span> <span class="brackets" data-v-68f931b5>(</span><span class="src" data-v-68f931b5>&quot;hi&quot;</span> <span class="brackets" data-v-68f931b5>)</span></div><div class="pTwo VSL" data-v-68f931b5><span class="brackets" data-v-68f931b5>}</span></div><div class="brackets" data-v-68f931b5>}</div><div data-v-68f931b5><span class="word" data-v-68f931b5>console.</span><span class="variable" data-v-68f931b5>log</span> <span class="brackets" data-v-68f931b5>(</span><span class="then" data-v-68f931b5>new </span> <span class="word" data-v-68f931b5>Person</span><span class="brackets" data-v-68f931b5>(</span><span class="src" data-v-68f931b5>&quot;wayne&quot;,</span> <span class="number" data-v-68f931b5>123</span><span class="brackets" data-v-68f931b5>))</span></div><br data-v-68f931b5><div data-v-68f931b5><span class="function" data-v-68f931b5>const </span><span class="word" data-v-68f931b5>p</span><span class="then" data-v-68f931b5>= new </span><span class="word" data-v-68f931b5>Person</span> <span class="brackets" data-v-68f931b5>(</span><span class="src" data-v-68f931b5>&quot;wayne&quot;,</span> <span class="number" data-v-68f931b5>6</span><span class="brackets" data-v-68f931b5>)</span></div><div data-v-68f931b5><span class="function" data-v-68f931b5>const </span> <span class="word" data-v-68f931b5>j</span><span class="then" data-v-68f931b5>=</span> <span class="then" data-v-68f931b5>new </span><span class="word" data-v-68f931b5>Person</span> <span class="brackets" data-v-68f931b5>(</span><span class="src" data-v-68f931b5>&quot;jack&quot;,</span> <span class="number" data-v-68f931b5>9</span><span class="brackets" data-v-68f931b5>)</span></div><br data-v-68f931b5><span class="comment" data-v-68f931b5>//dir 打印對象形式</span><div data-v-68f931b5><span class="word" data-v-68f931b5>console.</span><span class="variable" data-v-68f931b5>dir</span> <span class="brackets" data-v-68f931b5>(</span><span class="brackets" data-v-68f931b5>Person</span> <span class="then" data-v-68f931b5>.</span><span class="word" data-v-68f931b5>prototype</span><span class="brackets" data-v-68f931b5>) </span><span class="comment" data-v-68f931b5>//寫法是屬性 返回是物件</span></div><br data-v-68f931b5><br data-v-68f931b5><div data-v-68f931b5><span class="comment" data-v-68f931b5>公共屬性寫到 構造函數</span></div><div data-v-68f931b5><span class="function" data-v-68f931b5>function </span><span class="word" data-v-68f931b5>Person</span> <span class="brackets" data-v-68f931b5>(</span><span class="word" data-v-68f931b5>uname,number</span><span class="brackets" data-v-68f931b5>){</span></div><div class="pTwo VSL" data-v-68f931b5><span class="then" data-v-68f931b5>this</span><span class="word" data-v-68f931b5>.uname</span> <span class="then" data-v-68f931b5>=</span><span class="word" data-v-68f931b5>uname</span></div><div class="pTwo VSL" data-v-68f931b5><span class="then" data-v-68f931b5>this</span> <span class="word" data-v-68f931b5>.number</span><span class="then" data-v-68f931b5>=</span> <span class="word" data-v-68f931b5>number</span></div><div class="brackets" data-v-68f931b5>}</div><br data-v-68f931b5><div data-v-68f931b5><span class="comment" data-v-68f931b5>公共方法寫到 原型object</span></div><div data-v-68f931b5><span class="brackets" data-v-68f931b5>Person</span><span class="word" data-v-68f931b5>.prototype.sayHi</span><span class="then" data-v-68f931b5>=</span><span class="function" data-v-68f931b5>function </span><span class="brackets" data-v-68f931b5>(){</span></div><div class="pTwo" data-v-68f931b5><span class="word" data-v-68f931b5>console.</span><span class="variable" data-v-68f931b5>log</span> <span class="brackets" data-v-68f931b5>(</span><span class="src" data-v-68f931b5>&quot;hi&quot;</span> <span class="brackets" data-v-68f931b5>)</span></div><div data-v-68f931b5><span class="brackets" data-v-68f931b5>}</span></div><br data-v-68f931b5><div data-v-68f931b5><span class="function" data-v-68f931b5>const </span><span class="word" data-v-68f931b5>p</span><span class="then" data-v-68f931b5>= new </span><span class="word" data-v-68f931b5>Person</span> <span class="brackets" data-v-68f931b5>(</span><span class="src" data-v-68f931b5>&quot;wayne&quot;,</span> <span class="number" data-v-68f931b5>6</span><span class="brackets" data-v-68f931b5>)</span></div><div data-v-68f931b5><span class="function" data-v-68f931b5>const </span> <span class="word" data-v-68f931b5>j</span><span class="then" data-v-68f931b5>=</span> <span class="then" data-v-68f931b5>new </span><span class="word" data-v-68f931b5>Person</span> <span class="brackets" data-v-68f931b5>(</span><span class="src" data-v-68f931b5>&quot;jack&quot;,</span> <span class="number" data-v-68f931b5>9</span><span class="brackets" data-v-68f931b5>)</span></div><br data-v-68f931b5><div data-v-68f931b5><span class="word" data-v-68f931b5>p.sayHi</span> <span class="brackets" data-v-68f931b5>()</span></div><br data-v-68f931b5><div data-v-68f931b5><span class="word" data-v-68f931b5>console.</span><span class="variable" data-v-68f931b5>log</span> <span class="brackets" data-v-68f931b5>(</span><span class="word" data-v-68f931b5>p.sayHi</span> <span class="then" data-v-68f931b5>===</span><span class="word" data-v-68f931b5>j.sayHi</span> <span class="brackets" data-v-68f931b5>)</span><span class="comment" data-v-68f931b5>//true</span></div></div><p class="fz28 cor36" data-v-68f931b5># 原型是什麼?</p><p class="fz28" data-v-68f931b5>一個對象, 也稱 原型對象</p><br data-v-68f931b5><p class="fz28 cor36" data-v-68f931b5># 原型做什麼?</p><p class="fz28" data-v-68f931b5>共享方法</p><br data-v-68f931b5><p class="fz28 cor36" data-v-68f931b5># 構造函數 &amp; 原型 this 指向誰?</p><p class="fz28" data-v-68f931b5>實例化的對象</p><div class="bgcVS" data-v-68f931b5><p class="fz28" data-v-68f931b5> 我只要一調用 函數 觸發 this 把這個 this 保存下來 賦值給 let </p><div data-v-68f931b5><span class="function" data-v-68f931b5>let </span> <span class="word" data-v-68f931b5>that</span></div><div data-v-68f931b5><span class="function" data-v-68f931b5>function </span><span class="word" data-v-68f931b5>Person</span> <span class="brackets" data-v-68f931b5>(</span><span class="word" data-v-68f931b5>uname</span><span class="brackets" data-v-68f931b5>){</span></div><div class="pTwo VSL" data-v-68f931b5><span class="word" data-v-68f931b5>console.</span><span class="variable" data-v-68f931b5>log</span> <span class="brackets" data-v-68f931b5>(</span><span class="then" data-v-68f931b5>this</span> <span class="brackets" data-v-68f931b5>)</span><span class="comment" data-v-68f931b5>//Person看不出來this指向誰</span></div><div class="pTwo VSL" data-v-68f931b5><span class="word" data-v-68f931b5>that</span> <span class="then" data-v-68f931b5>=</span><span class="then" data-v-68f931b5>this</span></div><div class="pTwo VSL" data-v-68f931b5><span class="then" data-v-68f931b5>this</span><span class="word" data-v-68f931b5>.uname</span> <span class="then" data-v-68f931b5>=</span><span class="word" data-v-68f931b5>uname</span></div><div class="brackets" data-v-68f931b5>}</div><br data-v-68f931b5><div data-v-68f931b5><span class="comment" data-v-68f931b5>1.實例對象是 p</span></div><div data-v-68f931b5><span class="function" data-v-68f931b5>const </span> <span class="word" data-v-68f931b5>p</span><span class="then" data-v-68f931b5>=</span> <span class="then" data-v-68f931b5>new </span><span class="word" data-v-68f931b5>Person</span> <span class="brackets" data-v-68f931b5>(</span><span class="src" data-v-68f931b5>&quot;wayne&quot;</span> <span class="brackets" data-v-68f931b5>)</span></div><div data-v-68f931b5><span class="word" data-v-68f931b5>console.</span><span class="variable" data-v-68f931b5>log</span> <span class="brackets" data-v-68f931b5>(</span><span class="word" data-v-68f931b5>that</span> <span class="then" data-v-68f931b5>===</span><span class="word" data-v-68f931b5>p</span> <span class="brackets" data-v-68f931b5>)</span></div><div class="comment" data-v-68f931b5>如果相等 那this 就是 p</div><div class="comment" data-v-68f931b5>// true // 構造函數 this 指向 p</div><br data-v-68f931b5><div data-v-68f931b5><span class="function" data-v-68f931b5>let </span> <span class="word" data-v-68f931b5>that2</span></div><span class="comment" data-v-68f931b5>// 原型對象裡面的函數this指向的是實例對象 p</span><div data-v-68f931b5><span class="brackets" data-v-68f931b5>Person</span><span class="word" data-v-68f931b5>.prototype.sayHi</span><span class="then" data-v-68f931b5>=</span><span class="function" data-v-68f931b5>function </span><span class="brackets" data-v-68f931b5>(){</span></div><div class="pTwo VSL" data-v-68f931b5><span class="word" data-v-68f931b5>that2</span> <span class="then" data-v-68f931b5>=</span><span class="then" data-v-68f931b5>this</span></div><div class="pTwo VSL" data-v-68f931b5><span class="word" data-v-68f931b5>console.</span><span class="variable" data-v-68f931b5>log</span> <span class="brackets" data-v-68f931b5>(</span><span class="src" data-v-68f931b5>&quot;hi&quot;</span> <span class="brackets" data-v-68f931b5>)</span></div><div data-v-68f931b5><span class="brackets" data-v-68f931b5>}</span></div><div data-v-68f931b5><span class="word" data-v-68f931b5>p.</span> <span class="variable" data-v-68f931b5>sing</span><span class="brackets" data-v-68f931b5>()</span></div><div class="comment" data-v-68f931b5>this 指向 函數的 調用者 就是 p</div><br data-v-68f931b5><div data-v-68f931b5><span class="word" data-v-68f931b5>console.</span><span class="variable" data-v-68f931b5>log</span> <span class="brackets" data-v-68f931b5>(</span><span class="word" data-v-68f931b5>that</span> <span class="then" data-v-68f931b5>===</span><span class="word" data-v-68f931b5>p</span> <span class="brackets" data-v-68f931b5>)</span><span class="comment" data-v-68f931b5>// true</span></div></div><p class="fz28" data-v-68f931b5>結論</p><p class="fz28" data-v-68f931b5>構造函數 和 原型對象中的 this 都指向 實例化的對象</p><br data-v-68f931b5><br data-v-68f931b5><p class="fz34 cor36" data-v-68f931b5># 給數組擴展方法</p><p class="fz28" data-v-68f931b5>reduce 是累計器</p><p class="fz28" data-v-68f931b5>定義一個 arr.sum() 返回累加結果</p><div class="bgcVS" data-v-68f931b5><div data-v-68f931b5><span class="function" data-v-68f931b5>const </span><span class="word" data-v-68f931b5>arr</span> <span class="then" data-v-68f931b5>=</span><span class="brackets" data-v-68f931b5>[</span> <span class="number" data-v-68f931b5>1,2,3</span><span class="brackets" data-v-68f931b5>]</span></div><div data-v-68f931b5><span class="brackets" data-v-68f931b5>Array</span><span class="word" data-v-68f931b5>.prototype.</span><span class="variable" data-v-68f931b5>max</span> <span class="then" data-v-68f931b5>=</span><span class="function" data-v-68f931b5>function </span><span class="brackets" data-v-68f931b5>(){</span></div><div class="pTwo" data-v-68f931b5><span class="then" data-v-68f931b5>return </span><span class="brackets" data-v-68f931b5>Math</span><span class="word" data-v-68f931b5>.</span><span class="variable" data-v-68f931b5>max</span> <span class="brackets" data-v-68f931b5>(</span><span class="word" data-v-68f931b5>...</span><span class="then" data-v-68f931b5>this</span><span class="brackets" data-v-68f931b5>)</span></div><div class="pTwo" data-v-68f931b5><span class="comment" data-v-68f931b5>// 原型對象裡面的函數this指向的是實例對象 arr</span></div><div data-v-68f931b5><span class="brackets" data-v-68f931b5>}</span></div><div data-v-68f931b5><span class="word" data-v-68f931b5>console.</span><span class="variable" data-v-68f931b5>log</span> <span class="brackets" data-v-68f931b5>(</span><span class="word" data-v-68f931b5>arr.</span> <span class="word" data-v-68f931b5>max</span><span class="brackets" data-v-68f931b5>())</span></div><br data-v-68f931b5><div data-v-68f931b5><span class="brackets" data-v-68f931b5>Array</span><span class="word" data-v-68f931b5>.prototype.</span><span class="variable" data-v-68f931b5>sum</span> <span class="then" data-v-68f931b5>=</span><span class="function" data-v-68f931b5>function </span><span class="brackets" data-v-68f931b5>(){</span></div><div class="pTwo VSL" data-v-68f931b5><span class="then" data-v-68f931b5>return </span> <span class="then" data-v-68f931b5>this</span><span class="variable" data-v-68f931b5>.reduce</span><span class="brackets" data-v-68f931b5>((</span><span class="word" data-v-68f931b5>prev,item</span><span class="brackets" data-v-68f931b5>)</span> <span class="function" data-v-68f931b5>=&gt;</span><span class="word" data-v-68f931b5>prev</span> <span class="then" data-v-68f931b5>+</span><span class="word" data-v-68f931b5>item,</span> <span class="number" data-v-68f931b5>0</span><span class="brackets" data-v-68f931b5>)</span></div><div data-v-68f931b5><span class="brackets" data-v-68f931b5>}</span></div><div data-v-68f931b5><span class="word" data-v-68f931b5>console.</span><span class="variable" data-v-68f931b5>log</span><span class="brackets" data-v-68f931b5>([</span> <span class="word" data-v-68f931b5>1,2,3</span><span class="brackets" data-v-68f931b5>]</span><span class="variable" data-v-68f931b5>.sum</span><span class="brackets" data-v-68f931b5>())</span></div></div><div id="threeprototype003" class="articleCardTitle cor36 fz34" data-v-68f931b5> 6.3 constructor </div><p class="fz28" data-v-68f931b5>在哪裡?</p><p class="fz28" data-v-68f931b5>每個 原型對象 裡面都有 constructor 屬性</p><br data-v-68f931b5><p class="fz28" data-v-68f931b5>做什麼?</p><p class="fz28" data-v-68f931b5>該屬性 指向 該原型對象的 構造函數</p><br data-v-68f931b5><div class="bgcVS" data-v-68f931b5><div data-v-68f931b5><span class="function" data-v-68f931b5>function </span><span class="word" data-v-68f931b5>Person</span> <span class="brackets" data-v-68f931b5>(){</span></div><div data-v-68f931b5><span class="brackets" data-v-68f931b5>}</span></div><div data-v-68f931b5><span class="function" data-v-68f931b5>const </span> <span class="word" data-v-68f931b5>p</span><span class="then" data-v-68f931b5>=</span> <span class="then" data-v-68f931b5>new </span><span class="word" data-v-68f931b5>Person</span> <span class="brackets" data-v-68f931b5>()</span></div><div data-v-68f931b5><span class="word" data-v-68f931b5>console.</span><span class="variable" data-v-68f931b5>log</span> <span class="brackets" data-v-68f931b5>(</span><span class="brackets" data-v-68f931b5>Person</span><span class="word" data-v-68f931b5>.prototype</span><span class="brackets" data-v-68f931b5>)</span></div><div data-v-68f931b5><span class="comment" data-v-68f931b5>// 得到構造函數裡面的原型對象</span></div><div data-v-68f931b5><span class="comment" data-v-68f931b5>// F12 展開這個對象看到 constructor</span></div><div data-v-68f931b5><span class="comment" data-v-68f931b5>// 只要是原型對象 裡面 默認都有 constructor 屬性</span></div><div data-v-68f931b5><span class="comment" data-v-68f931b5>// 做什麼?</span></div><div data-v-68f931b5><span class="comment" data-v-68f931b5>// 發現 指向 Person</span></div><div data-v-68f931b5><span class="comment" data-v-68f931b5>// 指向 構造函數</span></div><br data-v-68f931b5><div data-v-68f931b5><span class="word" data-v-68f931b5>console.</span><span class="variable" data-v-68f931b5>log</span> <span class="brackets" data-v-68f931b5>(</span><span class="word" data-v-68f931b5>Person.prototype.constructor</span><span class="then" data-v-68f931b5>===</span> <span class="word" data-v-68f931b5>Person</span><span class="brackets" data-v-68f931b5>)</span><span class="comment" data-v-68f931b5>//true</span></div><br data-v-68f931b5><div data-v-68f931b5><span class="function" data-v-68f931b5>function </span><span class="word" data-v-68f931b5>Person</span> <span class="brackets" data-v-68f931b5>(){</span></div><div data-v-68f931b5><span class="brackets" data-v-68f931b5>}</span></div><div data-v-68f931b5><span class="comment" data-v-68f931b5>// Person.prototype.say = function(){</span></div><div class="pTwo" data-v-68f931b5><span class="comment" data-v-68f931b5>// console.log(&quot;hi&quot;)</span></div><div data-v-68f931b5><span class="comment" data-v-68f931b5>}</span></div><div data-v-68f931b5><span class="comment" data-v-68f931b5>// Person.prototype.walk = function(){</span></div><div class="pTwo" data-v-68f931b5><span class="comment" data-v-68f931b5>// console.log(&quot;walk&quot;)</span></div><div data-v-68f931b5><span class="comment" data-v-68f931b5>}</span></div><br data-v-68f931b5><div data-v-68f931b5><span class="word" data-v-68f931b5>console.</span><span class="variable" data-v-68f931b5>log</span> <span class="brackets" data-v-68f931b5>(</span><span class="brackets" data-v-68f931b5>Person</span><span class="word" data-v-68f931b5>.prototype</span><span class="brackets" data-v-68f931b5>) </span><span class="comment" data-v-68f931b5>// 有 constructor</span></div><div data-v-68f931b5><span class="brackets" data-v-68f931b5>Person</span><span class="word" data-v-68f931b5>.prototype</span> <span class="then" data-v-68f931b5>=</span><span class="brackets" data-v-68f931b5>{</span></div><div class="padTwo VSL" data-v-68f931b5><div data-v-68f931b5><span class="word" data-v-68f931b5>sing:</span><span class="function" data-v-68f931b5>function </span><span class="brackets" data-v-68f931b5>(){</span></div><div class="padTwo VSL" data-v-68f931b5><span class="word" data-v-68f931b5>console.</span><span class="variable" data-v-68f931b5>log</span><span class="brackets" data-v-68f931b5>(</span> <span class="src" data-v-68f931b5>&quot;hi&quot;</span><span class="brackets" data-v-68f931b5>)</span></div><div data-v-68f931b5><span class="brackets" data-v-68f931b5>},</span></div><div data-v-68f931b5><span class="word" data-v-68f931b5>walk:</span><span class="function" data-v-68f931b5>function </span><span class="brackets" data-v-68f931b5>(){</span></div><div class="padTwo VSL" data-v-68f931b5><div data-v-68f931b5></div><span class="word" data-v-68f931b5>console.</span><span class="variable" data-v-68f931b5>log</span><span class="brackets" data-v-68f931b5>(</span><span class="word" data-v-68f931b5>&quot;walk&quot;</span> <span class="brackets" data-v-68f931b5>)</span></div><div data-v-68f931b5><span class="brackets" data-v-68f931b5>},</span></div></div><div data-v-68f931b5><span class="brackets" data-v-68f931b5>}</span></div><br data-v-68f931b5><div data-v-68f931b5><span class="word" data-v-68f931b5>console.</span><span class="variable" data-v-68f931b5>log</span> <span class="brackets" data-v-68f931b5>(</span><span class="brackets" data-v-68f931b5>Person</span><span class="word" data-v-68f931b5>.prototype</span><span class="brackets" data-v-68f931b5>) </span><span class="comment" data-v-68f931b5>// constructor 不見了</span></div><br data-v-68f931b5><p data-v-68f931b5>我一定要 constructor 指向父親</p><br data-v-68f931b5><div data-v-68f931b5><span class="brackets" data-v-68f931b5>Person</span><span class="word" data-v-68f931b5>.prototype</span> <span class="then" data-v-68f931b5>=</span><span class="brackets" data-v-68f931b5>{</span></div><div class="padTwo VSL" data-v-68f931b5><div data-v-68f931b5><span class="comment" data-v-68f931b5>// 重新指回創造這個原型對象的 </span></div><div data-v-68f931b5><span class="word" data-v-68f931b5>constructor:</span><span class="brackets" data-v-68f931b5>Person,</span></div><div data-v-68f931b5><span class="word" data-v-68f931b5>sing:</span><span class="function" data-v-68f931b5>function </span><span class="brackets" data-v-68f931b5>(){</span></div><div class="padTwo VSL" data-v-68f931b5><span class="word" data-v-68f931b5>console.</span><span class="variable" data-v-68f931b5>log</span><span class="brackets" data-v-68f931b5>(</span> <span class="src" data-v-68f931b5>&quot;hi&quot;</span><span class="brackets" data-v-68f931b5>)</span></div><div data-v-68f931b5><span class="brackets" data-v-68f931b5>},</span></div><div data-v-68f931b5><span class="word" data-v-68f931b5>walk:</span><span class="function" data-v-68f931b5>function </span><span class="brackets" data-v-68f931b5>(){</span></div><div class="padTwo VSL" data-v-68f931b5><div data-v-68f931b5></div><span class="word" data-v-68f931b5>console.</span><span class="variable" data-v-68f931b5>log</span><span class="brackets" data-v-68f931b5>(</span><span class="word" data-v-68f931b5>&quot;walk&quot;</span> <span class="brackets" data-v-68f931b5>)</span></div><div data-v-68f931b5><span class="brackets" data-v-68f931b5>},</span></div></div><div data-v-68f931b5><span class="brackets" data-v-68f931b5>}</span></div><br data-v-68f931b5></div><p class="fz28" data-v-68f931b5>思考</p><br data-v-68f931b5><div class="fz28" data-v-68f931b5><span class="bor pad204" data-v-68f931b5>構造函數</span> → <span class="bor pad204" data-v-68f931b5> 原型 prototype 共享屬性方法 </span></div><br data-v-68f931b5><div class="fz28" data-v-68f931b5><span class="cor17" data-v-68f931b5> . . . </span> ↓</div><br data-v-68f931b5><div class="fz28" data-v-68f931b5><span class="bor pad204" data-v-68f931b5>實例對象 new Person()</span></div><br data-v-68f931b5><br data-v-68f931b5><br data-v-68f931b5><p class="fz28" data-v-68f931b5>為什麼 實例對象 可以訪問 原型的 方法?</p><div id="threeprototype004" class="articleCardTitle cor36 fz34" data-v-68f931b5> 6.4 對象原型 </div><p class="fz28" data-v-68f931b5> 對象都會有一個屬性 __proto__ 指向 構造函數的 prototype 原型對象 </p><br data-v-68f931b5><br data-v-68f931b5><br data-v-68f931b5><div class="fz28" data-v-68f931b5><span class="bor pad204" data-v-68f931b5>構造函數</span> → <span class="bor pad204" data-v-68f931b5> 原型 prototype 共享屬性方法 </span></div><br data-v-68f931b5><div class="fz28" data-v-68f931b5><span class="cor17" data-v-68f931b5> . . . </span> ↓ <span class="cor17" data-v-68f931b5> . . . . . . . . . . . . . . . . </span> ↗ __proto__ </div><br data-v-68f931b5><div class="fz28" data-v-68f931b5><span class="bor pad204" data-v-68f931b5>實例對象 new Person()</span></div><div class="bgcVS" data-v-68f931b5><div data-v-68f931b5><span class="function" data-v-68f931b5>function </span><span class="word" data-v-68f931b5>Person</span><span class="brackets" data-v-68f931b5>(){}</span></div><div data-v-68f931b5><span class="function" data-v-68f931b5>const </span> <span class="word" data-v-68f931b5>p</span><span class="then" data-v-68f931b5>=</span> <span class="then" data-v-68f931b5>new </span><span class="word" data-v-68f931b5>Person</span> <span class="brackets" data-v-68f931b5>()</span></div><div data-v-68f931b5><span class="word" data-v-68f931b5>console.</span><span class="variable" data-v-68f931b5>log</span> <span class="brackets" data-v-68f931b5>(</span><span class="word" data-v-68f931b5>p</span> <span class="brackets" data-v-68f931b5>)</span></div><div class="comment" data-v-68f931b5>// person 物件裡面展開有一個 __proto__</div><br data-v-68f931b5><span class="comment" data-v-68f931b5>//對象原型__proto__指向 該構造函數的原型對象</span><div data-v-68f931b5><span class="word" data-v-68f931b5>console.</span><span class="variable" data-v-68f931b5>log</span> <span class="brackets" data-v-68f931b5>(</span><span class="word" data-v-68f931b5>p.__proto__</span><span class="then" data-v-68f931b5>===</span><span class="word" data-v-68f931b5>p.prototype</span><span class="brackets" data-v-68f931b5>) </span><span class="comment" data-v-68f931b5>// true</span></div><br data-v-68f931b5><div data-v-68f931b5><span class="comment" data-v-68f931b5>// 對象原型裡面有 constructor 指向 構造函數 Person</span></div><div data-v-68f931b5><span class="word" data-v-68f931b5>console.</span><span class="variable" data-v-68f931b5>log</span> <span class="brackets" data-v-68f931b5>(</span><span class="word" data-v-68f931b5>p.__proto__</span><span class="brackets" data-v-68f931b5>)</span></div><div data-v-68f931b5><span class="word" data-v-68f931b5>console.</span><span class="variable" data-v-68f931b5>log</span> <span class="brackets" data-v-68f931b5>(</span><span class="word" data-v-68f931b5>p.__proto__.constructor</span><span class="then" data-v-68f931b5>===</span> <span class="word" data-v-68f931b5>Person</span><span class="brackets" data-v-68f931b5>) </span><span class="comment" data-v-68f931b5>// true</span></div></div><p class="fz28" data-v-68f931b5>注意</p><p class="fz28" data-v-68f931b5>__proto__ 是 js 非標準屬性</p><p class="fz28" data-v-68f931b5>[[Prototype]] 和 __proto__ 意義相同</p><p class="fz28" data-v-68f931b5>用來表明當前實例對象指向哪個原型對象 prototype</p><p class="fz28" data-v-68f931b5> __proto__ 對象原型裡面也有一個 constructor 屬性, 指向創建該實例對象的構造函數 </p><br data-v-68f931b5><br data-v-68f931b5><br data-v-68f931b5><br data-v-68f931b5><br data-v-68f931b5><br data-v-68f931b5><p class="fz40" data-v-68f931b5>對象原型 指向 原型對象</p><br data-v-68f931b5><br data-v-68f931b5><br data-v-68f931b5><br data-v-68f931b5><br data-v-68f931b5><br data-v-68f931b5><div class="fz28" data-v-68f931b5><span class="bor pad204" data-v-68f931b5>. . . 構造函數</span> → ← constructor <span class="bor pad204" data-v-68f931b5> 原型 prototype 共享屬性方法 </span></div><br data-v-68f931b5><div class="fz28" data-v-68f931b5><span class="cor17" data-v-68f931b5> . . . . . . . . . </span> ↓ </div><br data-v-68f931b5><div class="fz28" data-v-68f931b5> constructor ↑ <span class="cor17" data-v-68f931b5> . . . . . . . . . . . </span> ↗ __proto__ 也是 [[Prototype]] </div><br data-v-68f931b5><div class="fz28" data-v-68f931b5><span class="bor pad204" data-v-68f931b5>實例對象 new Person()</span></div><br data-v-68f931b5><br data-v-68f931b5><br data-v-68f931b5><p class="fz28 cor36" data-v-68f931b5># 結論</p><p class="fz28 cor36" data-v-68f931b5>prototype 是什麼?</p><p class="fz28" data-v-68f931b5>原型</p><br data-v-68f931b5><p class="fz28 cor36" data-v-68f931b5>哪裡來?</p><p class="fz28" data-v-68f931b5>構造函數 都自動有</p><br data-v-68f931b5><p class="fz28 cor36" data-v-68f931b5>constructor 在哪裡?</p><p class="fz28" data-v-68f931b5>prototype 原型 和 對象原型 __proto__ 都有</p><br data-v-68f931b5><p class="fz28 cor36" data-v-68f931b5>做什麼?</p><p class="fz28" data-v-68f931b5>指向 創建 實例對象的 構造函數</p><br data-v-68f931b5><p class="fz28" data-v-68f931b5>指向 創建 原型的 構造函數</p><br data-v-68f931b5><br data-v-68f931b5><p class="fz28 cor36" data-v-68f931b5>__proto__在哪裡?</p><p class="fz28" data-v-68f931b5>實例對象裡面</p><br data-v-68f931b5><p class="fz28 cor36" data-v-68f931b5>指向誰?</p><p class="fz28" data-v-68f931b5>對象原型 指向 原型對象</p><br data-v-68f931b5><div id="threeprototype005" class="articleCardTitle cor36 fz34" data-v-68f931b5> 6.5 原型繼承 </div><div class="bgcVS" data-v-68f931b5><div data-v-68f931b5><span class="function" data-v-68f931b5>function </span><span class="word" data-v-68f931b5>Man</span> <span class="brackets" data-v-68f931b5>(){</span></div><div class="padTwo VSL" data-v-68f931b5><span class="then" data-v-68f931b5>this</span> <span class="word" data-v-68f931b5>.eyes</span><span class="then" data-v-68f931b5>=</span> <span class="number" data-v-68f931b5>2</span><div data-v-68f931b5></div></div><div data-v-68f931b5><span class="brackets" data-v-68f931b5>}</span></div><div data-v-68f931b5><span class="function" data-v-68f931b5>function </span><span class="word" data-v-68f931b5>Woman</span> <span class="brackets" data-v-68f931b5>(){</span></div><div class="padTwo VSL" data-v-68f931b5><span class="then" data-v-68f931b5>this</span> <span class="word" data-v-68f931b5>.eyes</span><span class="then" data-v-68f931b5>=</span> <span class="number" data-v-68f931b5>2</span><div data-v-68f931b5></div></div><div data-v-68f931b5><span class="brackets" data-v-68f931b5>}</span></div><div data-v-68f931b5><span class="comment" data-v-68f931b5>// 想要繼承 Person , 公共的部分放到原型上 , 就是原型繼承</span></div><br data-v-68f931b5><br data-v-68f931b5><div data-v-68f931b5><span class="function" data-v-68f931b5>const </span><span class="word" data-v-68f931b5>Person</span> <span class="then" data-v-68f931b5>=</span><span class="brackets" data-v-68f931b5>{</span></div><div class="padTwo VSL" data-v-68f931b5><span class="word" data-v-68f931b5>eyes:</span> <span class="number" data-v-68f931b5>2,</span><div data-v-68f931b5></div></div><div data-v-68f931b5><span class="brackets" data-v-68f931b5>}</span></div><div data-v-68f931b5><span class="function" data-v-68f931b5>function </span><span class="word" data-v-68f931b5>Man</span> <span class="brackets" data-v-68f931b5>(){}</span></div><br data-v-68f931b5><div class="comment" data-v-68f931b5>// Man 通過原型來繼承 Person</div><div data-v-68f931b5><span class="word" data-v-68f931b5>Man.prototype</span><span class="then" data-v-68f931b5>=</span> <span class="brackets" data-v-68f931b5>Person</span></div><br data-v-68f931b5><div data-v-68f931b5><span class="word" data-v-68f931b5>console.</span><span class="variable" data-v-68f931b5>log</span> <span class="brackets" data-v-68f931b5>(</span><span class="word" data-v-68f931b5>Man.prototype</span><span class="brackets" data-v-68f931b5>)</span><span class="comment" data-v-68f931b5>//看有沒有constructor</span></div><div class="comment" data-v-68f931b5>// 沒有 , 因為 Person 是 物件 形式</div><div class="comment" data-v-68f931b5>// 直接進行覆蓋 , 覆蓋完後指不回來了</div><br data-v-68f931b5><br data-v-68f931b5><div class="comment" data-v-68f931b5>// Man 通過原型來繼承 Person</div><div data-v-68f931b5><span class="word" data-v-68f931b5>Man.prototype</span><span class="then" data-v-68f931b5>=</span> <span class="brackets" data-v-68f931b5>Person</span></div><br data-v-68f931b5><div data-v-68f931b5><span class="number" data-v-68f931b5>!指回原來的構造函數! . . . constructor</span></div><br data-v-68f931b5><div data-v-68f931b5><span class="word" data-v-68f931b5>Man.prototype.</span><span class="function" data-v-68f931b5>constructor</span><span class="then" data-v-68f931b5>=</span> <span class="word" data-v-68f931b5>Man</span></div><div data-v-68f931b5><span class="word" data-v-68f931b5>console.</span><span class="variable" data-v-68f931b5>log</span> <span class="brackets" data-v-68f931b5>(</span><span class="word" data-v-68f931b5>Man.prototype</span><span class="brackets" data-v-68f931b5>)</span><span class="comment" data-v-68f931b5>//有constructor</span></div><br data-v-68f931b5><br data-v-68f931b5><br data-v-68f931b5><br data-v-68f931b5><div data-v-68f931b5><span class="function" data-v-68f931b5>function </span><span class="word" data-v-68f931b5>Woman</span> <span class="brackets" data-v-68f931b5>(){}</span></div><div data-v-68f931b5><span class="word" data-v-68f931b5>Woman.prototype</span><span class="then" data-v-68f931b5>=</span> <span class="brackets" data-v-68f931b5>Person</span></div><div data-v-68f931b5><span class="word" data-v-68f931b5>Woman.prototype.</span><span class="function" data-v-68f931b5>constructor</span><span class="then" data-v-68f931b5>=</span> <span class="word" data-v-68f931b5>Woman</span></div><div data-v-68f931b5><span class="function" data-v-68f931b5>const </span> <span class="word" data-v-68f931b5>p</span><span class="then" data-v-68f931b5>=</span> <span class="then" data-v-68f931b5>new </span><span class="word" data-v-68f931b5>Woman</span> <span class="brackets" data-v-68f931b5>()</span></div><div data-v-68f931b5><span class="word" data-v-68f931b5>console.</span><span class="variable" data-v-68f931b5>log</span> <span class="brackets" data-v-68f931b5>(</span><span class="word" data-v-68f931b5>p</span> <span class="brackets" data-v-68f931b5>)</span><span class="comment" data-v-68f931b5>//看到constructor指回Person</span></div><br data-v-68f931b5><br data-v-68f931b5><br data-v-68f931b5><br data-v-68f931b5><p data-v-68f931b5># 我除了繼承 父 的屬性 還想添加方法</p><br data-v-68f931b5><div data-v-68f931b5><span class="word" data-v-68f931b5>Woman.prototype.</span><span class="variable" data-v-68f931b5>baby</span> <span class="then" data-v-68f931b5>=</span><span class="function" data-v-68f931b5>function </span><span class="brackets" data-v-68f931b5>(){</span></div><div class="padTwo VSL" data-v-68f931b5><span class="word" data-v-68f931b5>console.</span><span class="variable" data-v-68f931b5>log</span> <span class="brackets" data-v-68f931b5>(</span><span class="word" data-v-68f931b5>&quot;baby&quot;</span> <span class="brackets" data-v-68f931b5>)</span><div data-v-68f931b5></div></div><div data-v-68f931b5><span class="brackets" data-v-68f931b5>}</span></div><br data-v-68f931b5><div data-v-68f931b5><span class="function" data-v-68f931b5>const </span><span class="word" data-v-68f931b5>red</span> <span class="then" data-v-68f931b5>=</span><span class="then" data-v-68f931b5>new </span><span class="brackets" data-v-68f931b5>Woman</span><span class="brackets" data-v-68f931b5>()</span></div><div data-v-68f931b5><span class="word" data-v-68f931b5>console.</span><span class="variable" data-v-68f931b5>log</span> <span class="brackets" data-v-68f931b5>(</span><span class="word" data-v-68f931b5>red</span> <span class="brackets" data-v-68f931b5>)</span><span class="comment" data-v-68f931b5>//看[[Prototype]]看到有baby方法</span></div><br data-v-68f931b5><div data-v-68f931b5><span class="comment" data-v-68f931b5>// 我想 Man 沒有添加 baby 方法</span></div><div data-v-68f931b5><span class="function" data-v-68f931b5>const </span><span class="word" data-v-68f931b5>wayne</span> <span class="then" data-v-68f931b5>=</span><span class="then" data-v-68f931b5>new </span> <span class="brackets" data-v-68f931b5>Man</span><span class="brackets" data-v-68f931b5>()</span></div><div data-v-68f931b5><span class="word" data-v-68f931b5>console.</span><span class="variable" data-v-68f931b5>log</span> <span class="brackets" data-v-68f931b5>(</span><span class="word" data-v-68f931b5>wayne</span> <span class="brackets" data-v-68f931b5>)</span></div><div data-v-68f931b5><span class="comment" data-v-68f931b5>// 看 [[Prototype]] 也有 baby 方法</span></div><br data-v-68f931b5><p data-v-68f931b5># 為什麼?</p><p data-v-68f931b5>因為他們 2 個的 原型 都是 繼承 Person</p><br data-v-68f931b5><br data-v-68f931b5><div class="dis" data-v-68f931b5><div data-v-68f931b5><br data-v-68f931b5><div data-v-68f931b5><span class="word" data-v-68f931b5>Woman.prototype</span><span class="then" data-v-68f931b5>=</span><span class="brackets" data-v-68f931b5>Person</span></div><br data-v-68f931b5><div data-v-68f931b5><span class="word" data-v-68f931b5>Man.prototype</span><span class="then" data-v-68f931b5>=</span><span class="brackets" data-v-68f931b5>Person</span></div></div><div class="padL20" data-v-68f931b5> 棧 <div data-v-68f931b5>→0x1111→</div><br data-v-68f931b5><div data-v-68f931b5>→0x2222↗</div></div><div class="padL20" data-v-68f931b5> 堆 <div data-v-68f931b5><span class="function" data-v-68f931b5>const </span><span class="word" data-v-68f931b5>Person</span> <span class="then" data-v-68f931b5>=</span><span class="brackets" data-v-68f931b5>{</span></div><div class="padTwo VSL" data-v-68f931b5><span class="word" data-v-68f931b5>eyes:</span> <span class="number" data-v-68f931b5>2,</span><div data-v-68f931b5></div></div><div class="padTwo VSL" data-v-68f931b5><span class="word" data-v-68f931b5>baby:</span><span class="function" data-v-68f931b5>function </span><span class="brackets" data-v-68f931b5>(){}</span><div data-v-68f931b5></div></div><div data-v-68f931b5><span class="brackets" data-v-68f931b5>}</span></div><br data-v-68f931b5><br data-v-68f931b5><br data-v-68f931b5></div></div><p data-v-68f931b5># 我要 Woman &amp; Man 不互相影響 . . . &gt; 給他們不同的對象</p><br data-v-68f931b5><div data-v-68f931b5><span class="function" data-v-68f931b5>const </span><span class="word" data-v-68f931b5>Person1</span> <span class="then" data-v-68f931b5>=</span><span class="brackets" data-v-68f931b5>{</span></div><div class="padTwo VSL" data-v-68f931b5><span class="word" data-v-68f931b5>eyes:</span> <span class="number" data-v-68f931b5>2,</span><div data-v-68f931b5></div></div><div data-v-68f931b5><span class="brackets" data-v-68f931b5>}</span></div><div data-v-68f931b5><span class="function" data-v-68f931b5>const </span><span class="word" data-v-68f931b5>Person2</span> <span class="then" data-v-68f931b5>=</span><span class="brackets" data-v-68f931b5>{</span></div><div class="padTwo VSL" data-v-68f931b5><span class="word" data-v-68f931b5>eyes:</span> <span class="number" data-v-68f931b5>2,</span><div data-v-68f931b5></div></div><div data-v-68f931b5><span class="brackets" data-v-68f931b5>}</span></div><br data-v-68f931b5><div data-v-68f931b5><span class="word" data-v-68f931b5>Woman.prototype</span><span class="then" data-v-68f931b5>=</span><span class="brackets" data-v-68f931b5>Person1</span></div><div data-v-68f931b5><span class="word" data-v-68f931b5>Man.prototype</span><span class="then" data-v-68f931b5>=</span><span class="brackets" data-v-68f931b5>Person2</span></div><br data-v-68f931b5><br data-v-68f931b5><p data-v-68f931b5># 我要 內容一樣 但是 物件 結構不一樣 . . . &gt; 構造函數</p><p data-v-68f931b5># 構造函數 new 出來的對象 結構一樣 , 但是 對象 不一樣</p><br data-v-68f931b5><div class="comment" data-v-68f931b5>//const Person1 = { eyes:2 }</div><div class="comment" data-v-68f931b5>//const Person2 = { eyes:2 }</div><div data-v-68f931b5><span class="function" data-v-68f931b5>function </span><span class="brackets" data-v-68f931b5>Person</span><span class="brackets" data-v-68f931b5>(){</span></div><div class="padTwo VSL" data-v-68f931b5><span class="then" data-v-68f931b5>this.</span> <span class="word" data-v-68f931b5>eyes</span><span class="then" data-v-68f931b5>=</span> <span class="number" data-v-68f931b5>2</span><div data-v-68f931b5></div></div><div data-v-68f931b5><span class="brackets" data-v-68f931b5>}</span></div><div data-v-68f931b5><span class="word" data-v-68f931b5>Woman.prototype</span><span class="then" data-v-68f931b5>=</span> <span class="then" data-v-68f931b5>new </span><span class="brackets" data-v-68f931b5>Person</span><span class="brackets" data-v-68f931b5>()</span></div><div class="comment" data-v-68f931b5>// new Person 新增一個物件</div><div class="comment" data-v-68f931b5>// 這個物件就是 我們寫的 結構 eyes:2</div><div data-v-68f931b5><span class="word" data-v-68f931b5>Man.prototype</span><span class="then" data-v-68f931b5>=</span> <span class="then" data-v-68f931b5>new </span><span class="brackets" data-v-68f931b5>Person</span><span class="brackets" data-v-68f931b5>()</span></div><div class="comment" data-v-68f931b5>// new Person 又 新增一個物件</div><div class="comment" data-v-68f931b5> // 這個物件 結構一樣 內容一樣 這 2 個 物件 不一樣 </div><br data-v-68f931b5><div data-v-68f931b5><span class="word" data-v-68f931b5>Woman.prototype.</span><span class="variable" data-v-68f931b5>baby</span> <span class="then" data-v-68f931b5>=</span><span class="function" data-v-68f931b5>function </span><span class="brackets" data-v-68f931b5>(){</span></div><div class="padTwo VSL" data-v-68f931b5><span class="word" data-v-68f931b5>console.</span><span class="variable" data-v-68f931b5>log</span> <span class="brackets" data-v-68f931b5>(</span><span class="src" data-v-68f931b5>&quot;baby&quot;</span> <span class="brackets" data-v-68f931b5>)</span><div data-v-68f931b5></div></div><div data-v-68f931b5><span class="brackets" data-v-68f931b5>}</span></div><br data-v-68f931b5><p data-v-68f931b5># 以上 原型繼承</p><p data-v-68f931b5> 需求: Man Woman 不要用同一個物件, 但不同物件裡面包含相同屬性和方法 </p><p data-v-68f931b5>用: 構造函數</p><p data-v-68f931b5>new 每次都會創建一個新物件</p><br data-v-68f931b5><br data-v-68f931b5><br data-v-68f931b5><br data-v-68f931b5><p data-v-68f931b5>1. 換成 構造函數</p><p data-v-68f931b5>2. prototype 不再是物件名了, 用 new Person 的方法</p><br data-v-68f931b5><br data-v-68f931b5><br data-v-68f931b5><br data-v-68f931b5><p data-v-68f931b5>父構造函數 (父類) . . . 子構造函數 (子類)</p><p data-v-68f931b5>function Person(){} 父構造函數</p><p data-v-68f931b5>Woman 子構造函數</p><br data-v-68f931b5><p data-v-68f931b5>子類的原型 = new 父類</p><div data-v-68f931b5><span class="word" data-v-68f931b5>Woman.prototype</span><span class="then" data-v-68f931b5>=</span> <span class="then" data-v-68f931b5>new </span><span class="brackets" data-v-68f931b5>Person</span><span class="brackets" data-v-68f931b5>()</span></div><br data-v-68f931b5><br data-v-68f931b5><p data-v-68f931b5>JS 繼承很多方法</p><p data-v-68f931b5>Java 用 class 類</p><p data-v-68f931b5>後面 JS 引入 class</p></div><div id="threeprototype006" class="articleCardTitle cor36 fz34" data-v-68f931b5> 6.6 原型鏈 </div><p class="fz28" data-v-68f931b5>作用域鏈 一層一層 查找 變量在哪個作用域</p><p class="fz28" data-v-68f931b5>原型鏈 查找 原型</p><div class="bgcVS" data-v-68f931b5><div class="fz28" data-v-68f931b5><span class="cor29" data-v-68f931b5>. . . </span><span class="bor pad204" data-v-68f931b5> 構造函數</span> → ← constructor <span class="bor pad204" data-v-68f931b5> 原型 prototype 共享屬性方法 </span></div><div class="fz28" data-v-68f931b5><span class="cor29" data-v-68f931b5> . . . . . . . . . </span> ↓ </div><div class="fz28" data-v-68f931b5> constructor ↑ <span class="cor29" data-v-68f931b5> . . . . . . . . . . . </span> ↗ __proto__ 也是 [[Prototype]] </div><div class="fz28 pad20 disInl bor" data-v-68f931b5><span class="" data-v-68f931b5>實例對象 new Person()</span></div><br data-v-68f931b5><br data-v-68f931b5><br data-v-68f931b5><br data-v-68f931b5><br data-v-68f931b5><br data-v-68f931b5><div class="fz28" data-v-68f931b5><span class="cor29" data-v-68f931b5>. . . </span><span class="bor pad204" data-v-68f931b5> Person</span> → ← constructor <span class="bor pad204" data-v-68f931b5> Person.prototype </span></div><div class="fz28" data-v-68f931b5><span class="cor29" data-v-68f931b5> . . . . . . . . . </span> ↓ </div><div class="fz28" data-v-68f931b5> constructor ↑ <span class="cor29" data-v-68f931b5> . . . . . . . . . . . </span> ↗ __proto__ </div><div class="fz28" data-v-68f931b5><div class="disInl bor pad20" data-v-68f931b5><span data-v-68f931b5>實例對象 new Person()</span><br data-v-68f931b5><span data-v-68f931b5>p</span><br data-v-68f931b5><span data-v-68f931b5>p.__proto__</span></div></div><br data-v-68f931b5><div data-v-68f931b5><span class="word" data-v-68f931b5>console.</span><span class="variable" data-v-68f931b5>log</span> <span class="brackets" data-v-68f931b5>(</span><span class="word" data-v-68f931b5>p.__proto__</span><span class="then" data-v-68f931b5>===</span><span class="word" data-v-68f931b5>Person.prototype</span><span class="brackets" data-v-68f931b5>)</span><span class="comment" data-v-68f931b5>//true</span></div><div data-v-68f931b5><span class="word" data-v-68f931b5>console.</span><span class="variable" data-v-68f931b5>log</span> <span class="brackets" data-v-68f931b5>(</span><span class="word" data-v-68f931b5>Person.prototype</span><span class="brackets" data-v-68f931b5>) </span><span class="comment" data-v-68f931b5>// 發現裡面也有[[Prototype]]</span></div><div data-v-68f931b5><span class="comment" data-v-68f931b5>//原型對象也是對象, 只要是對象 都有 __proto__</span></div><div data-v-68f931b5><span class="comment" data-v-68f931b5>// 他指向誰?</span></div><div data-v-68f931b5><span class="comment" data-v-68f931b5>// 指向 object</span></div><div data-v-68f931b5><span class="word" data-v-68f931b5>console.</span><span class="variable" data-v-68f931b5>log</span> <span class="brackets" data-v-68f931b5>(</span><span class="word" data-v-68f931b5>Person.prototype.__proto__</span><span class="brackets" data-v-68f931b5>)</span></div><div data-v-68f931b5><span class="comment" data-v-68f931b5>// 這個 __proto__ 指向誰?</span></div><div data-v-68f931b5><span class="comment" data-v-68f931b5>// 對象原型 指向 原型對象</span></div><br data-v-68f931b5><div data-v-68f931b5><span class="comment" data-v-68f931b5>// 而 Person.prototype 屬於原型對象</span></div><div data-v-68f931b5><span class="comment" data-v-68f931b5>// 原型對象裡面有一個對象原型</span></div><div data-v-68f931b5><span class="comment" data-v-68f931b5>// 這個 對象原型 指向 原型對象</span></div><br data-v-68f931b5><div data-v-68f931b5><span class="comment" data-v-68f931b5>// 那他 指向 誰的 原型對象?</span></div><br data-v-68f931b5><br data-v-68f931b5><p data-v-68f931b5>構造函數 Object</p><div data-v-68f931b5><span class="function" data-v-68f931b5>function </span><span class="brackets" data-v-68f931b5>Object</span><span class="brackets" data-v-68f931b5>(){}</span></div><p data-v-68f931b5>構造函數 就有 原型對象</p><br data-v-68f931b5><div data-v-68f931b5><span class="word" data-v-68f931b5>console.</span><span class="variable" data-v-68f931b5>log</span> <span class="brackets" data-v-68f931b5>(</span><span class="word" data-v-68f931b5>object</span> <span class="brackets" data-v-68f931b5>)</span><span class="comment" data-v-68f931b5>//是Object(){[native code]}</span></div><div data-v-68f931b5><span class="word" data-v-68f931b5>console.</span><span class="variable" data-v-68f931b5>log</span> <span class="brackets" data-v-68f931b5>(</span><span class="word" data-v-68f931b5>object.prototype</span><span class="brackets" data-v-68f931b5>)</span><span class="comment" data-v-68f931b5>//</span></div><br data-v-68f931b5><p data-v-68f931b5>原型鏈</p><div class="fz28" data-v-68f931b5><span class="cor29" data-v-68f931b5> . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . </span><div class="disInl bor pad20" data-v-68f931b5><span data-v-68f931b5>null</span></div></div><div class="fz28" data-v-68f931b5><span class="cor29" data-v-68f931b5> . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .</span> ↗ __proto__ </div><br data-v-68f931b5><div class="fz28" data-v-68f931b5><span class="cor29" data-v-68f931b5>. . . . . . . . . . . </span><span class="bor pad204" data-v-68f931b5> Object</span> → ← Object.constructor <div class="disInl bor pad20" data-v-68f931b5><span data-v-68f931b5>Object.prototype</span><br data-v-68f931b5><span data-v-68f931b5>Object.prototype.__proto__</span></div></div><br data-v-68f931b5><div class="fz28" data-v-68f931b5><span class="cor29" data-v-68f931b5> . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .</span> ↗ __proto__ </div><br data-v-68f931b5><div class="fz28" data-v-68f931b5><span class="cor29" data-v-68f931b5>. . . </span><span class="bor pad204" data-v-68f931b5> Person</span> → ← constructor <div class="disInl bor pad20" data-v-68f931b5><span data-v-68f931b5> Person.prototype </span><br data-v-68f931b5><span data-v-68f931b5>Person.prototype.__proto__</span></div></div><div class="fz28" data-v-68f931b5><span class="cor29" data-v-68f931b5> . . . . . . . . . </span> ↓ </div><div class="fz28" data-v-68f931b5> constructor ↑ <span class="cor29" data-v-68f931b5> . . . . . . . . . . . </span> ↗ __proto__ </div><div class="fz28" data-v-68f931b5><div class="disInl bor pad20" data-v-68f931b5><span data-v-68f931b5>實例對象 new Person()</span><br data-v-68f931b5><span data-v-68f931b5>p</span><br data-v-68f931b5><span data-v-68f931b5>p.__proto__</span></div></div><br data-v-68f931b5><div data-v-68f931b5><span class="word" data-v-68f931b5>console.</span><span class="variable" data-v-68f931b5>log</span> <span class="brackets" data-v-68f931b5>(</span><span class="word" data-v-68f931b5>Person.prototype.__proto__</span><span class="then" data-v-68f931b5>===</span><span class="brackets" data-v-68f931b5>Object</span><span class="word" data-v-68f931b5>.prototype</span><span class="brackets" data-v-68f931b5>) </span><span class="comment" data-v-68f931b5>// true</span></div><div data-v-68f931b5><span class="word" data-v-68f931b5>console.</span><span class="variable" data-v-68f931b5>log</span> <span class="brackets" data-v-68f931b5>(</span><span class="brackets" data-v-68f931b5>Object</span><span class="word" data-v-68f931b5>.prototype.__proto__</span><span class="brackets" data-v-68f931b5>) </span><span class="comment" data-v-68f931b5>// null</span></div></div><p class="fz28 cor36" data-v-68f931b5>原型鏈</p><p class="fz28" data-v-68f931b5> 基於 原型對象 的 繼承 使得不同 構造函數的 原型對象 關聯在一起, 並且這種關聯的關係是一種 鏈狀的結構 </p><p class="fz28" data-v-68f931b5>1. 只要是 物件 就有 __proto__</p><p class="fz28" data-v-68f931b5> 2. 只要是 原型對象 裡面就有 constructor 指向 創造我的 構造函數 </p><br data-v-68f931b5><br data-v-68f931b5><p class="fz28 cor36" data-v-68f931b5>原型鏈 查找規則</p><p class="fz28" data-v-68f931b5> 1. 當訪問一個物件的屬性&amp;方法 , 先找 物件自身 有沒有 該屬性 </p><p class="fz28" data-v-68f931b5> 2. 沒有 . . &gt; 找 它的 原型 ( __proto__ 指向的 prototype 原型對象 ) </p><p class="fz28" data-v-68f931b5> 3. 沒有 . . &gt; 找 原型對象的原型 ( Object 的原型對象 ) </p><p class="fz28" data-v-68f931b5>4. 依此類推 一直找到 Object 為止 ( null )</p><br data-v-68f931b5><br data-v-68f931b5><p class="fz28" data-v-68f931b5> : 首先任何物件都會有屬於它的隱藏屬性下滑線proto屬性, 這個隱藏屬性就會指向它的構造函數的prototype, 這時我們就可以說這個物件的原型就是它的構造函數的prototype, 這就是原型, 然後原型鏈就是比如A的原型是B, B的原型是C, 這樣一條像鏈式的就稱為原型鏈 </p><br data-v-68f931b5><p class="fz28" data-v-68f931b5> :定義一個物件A,它的原型的地址對應著object.prototype,object.prototype它的原型又會到了null 這樣一條像鏈式的就稱為原型鏈 </p><br data-v-68f931b5><p class="fz28 cor36" data-v-68f931b5>instanceof</p><p class="fz28" data-v-68f931b5> 可用 instanceof 檢測構造函數的 prototype 屬性是否出現在某個實例對象的原型鏈上 </p><p class="fz28" data-v-68f931b5>他 屬不屬於 另外一個 構造函數</p><div class="bgcVS" data-v-68f931b5><div data-v-68f931b5><span class="function" data-v-68f931b5>function </span><span class="word" data-v-68f931b5>Person</span><span class="brackets" data-v-68f931b5>(){}</span></div><div data-v-68f931b5><span class="function" data-v-68f931b5>const </span> <span class="word" data-v-68f931b5>p</span><span class="then" data-v-68f931b5>=</span> <span class="then" data-v-68f931b5>new </span><span class="word" data-v-68f931b5>Person</span> <span class="brackets" data-v-68f931b5>()</span></div><div data-v-68f931b5><span class="word" data-v-68f931b5>console.</span><span class="variable" data-v-68f931b5>log</span> <span class="brackets" data-v-68f931b5>(</span><span class="word" data-v-68f931b5>p</span> <span class="word" data-v-68f931b5>instanceof </span><span class="brackets" data-v-68f931b5>Person</span><span class="brackets" data-v-68f931b5>) </span><span class="comment" data-v-68f931b5>// true</span></div><div data-v-68f931b5><span class="word" data-v-68f931b5>console.</span><span class="variable" data-v-68f931b5>log</span> <span class="brackets" data-v-68f931b5>(</span><span class="word" data-v-68f931b5>p</span> <span class="word" data-v-68f931b5>instanceof </span><span class="brackets" data-v-68f931b5>Object</span><span class="brackets" data-v-68f931b5>) </span><span class="comment" data-v-68f931b5>// true</span></div><div data-v-68f931b5><span class="word" data-v-68f931b5>console.</span><span class="variable" data-v-68f931b5>log</span> <span class="brackets" data-v-68f931b5>(</span><span class="word" data-v-68f931b5>p </span> <span class="word" data-v-68f931b5>instanceof </span><span class="brackets" data-v-68f931b5>Array</span><span class="brackets" data-v-68f931b5>) </span><span class="comment" data-v-68f931b5>// false</span></div><div data-v-68f931b5><span class="word" data-v-68f931b5>console.</span><span class="variable" data-v-68f931b5>log</span> <span class="brackets" data-v-68f931b5>(</span><span class="brackets" data-v-68f931b5>Array </span><span class="word" data-v-68f931b5>instanceof </span><span class="brackets" data-v-68f931b5>Object</span><span class="brackets" data-v-68f931b5>)</span><span class="comment" data-v-68f931b5>//true</span></div><br data-v-68f931b5><p data-v-68f931b5>萬物皆物件</p></div><div id="threeprototype007" class="articleCardTitle cor36 fz34" data-v-68f931b5> 6.7 class </div><div class="bgcVS" data-v-68f931b5><p data-v-68f931b5>過去, 函數有兩種調用方法</p><br data-v-68f931b5><div data-v-68f931b5><span class="function" data-v-68f931b5>function </span><span class="word" data-v-68f931b5>A</span> <span class="brackets" data-v-68f931b5>(){}</span></div><div data-v-68f931b5><span class="word" data-v-68f931b5>A</span> <span class="brackets" data-v-68f931b5>()</span><span class="comment" data-v-68f931b5>//直接調用</span></div><div data-v-68f931b5><span class="then" data-v-68f931b5>new </span> <span class="word" data-v-68f931b5>A</span><span class="brackets" data-v-68f931b5>()</span><span class="comment" data-v-68f931b5>//做為構造函數調用</span></div><br data-v-68f931b5><p data-v-68f931b5>這種做法無法從定義上明確函數用途 , ES6 構造函數</p><br data-v-68f931b5><div data-v-68f931b5><span class="comment" data-v-68f931b5>//舊的寫法</span></div><div data-v-68f931b5><span class="function" data-v-68f931b5>function </span><span class="word" data-v-68f931b5>User</span> <span class="brackets" data-v-68f931b5>(</span><span class="word" data-v-68f931b5>firstName,lastName</span><span class="brackets" data-v-68f931b5>){</span></div><div class="padTwo VSL" data-v-68f931b5><span class="then" data-v-68f931b5>this</span><span class="word" data-v-68f931b5>.firstName</span> <span class="then" data-v-68f931b5>=</span><span class="word" data-v-68f931b5>firstName;</span><div data-v-68f931b5><span class="then" data-v-68f931b5>this</span><span class="word" data-v-68f931b5>.lastName</span> <span class="then" data-v-68f931b5>=</span><span class="word" data-v-68f931b5>lastName;</span></div><div data-v-68f931b5><span class="then" data-v-68f931b5>this</span><span class="word" data-v-68f931b5>.fullName</span> <span class="then" data-v-68f931b5>=</span><span class="src" data-v-68f931b5>`${</span><span class="word" data-v-68f931b5>firstName</span><span class="src" data-v-68f931b5>} ${</span><span class="word" data-v-68f931b5>lastName</span> <span class="src" data-v-68f931b5>}`</span></div><div data-v-68f931b5></div></div><div data-v-68f931b5><span class="brackets" data-v-68f931b5>}</span></div><div data-v-68f931b5><span class="comment" data-v-68f931b5>//靜態方法</span></div><div data-v-68f931b5><span class="word" data-v-68f931b5>User.isUser</span> <span class="then" data-v-68f931b5>=</span><span class="function" data-v-68f931b5>function </span><span class="brackets" data-v-68f931b5>(</span> <span class="word" data-v-68f931b5>u</span><span class="brackets" data-v-68f931b5>){</span></div><div class="padTwo VSL" data-v-68f931b5><span class="then" data-v-68f931b5>return !! </span> <span class="word" data-v-68f931b5>u </span><span class="then" data-v-68f931b5>&amp;&amp; !! </span><span class="word" data-v-68f931b5>u.fullName</span><div data-v-68f931b5></div></div><div data-v-68f931b5><span class="brackets" data-v-68f931b5>}</span></div><div data-v-68f931b5><span class="comment" data-v-68f931b5>//調用靜態方法</span></div><div data-v-68f931b5><span class="word" data-v-68f931b5>User.isUser</span><span class="brackets" data-v-68f931b5>(</span> <span class="word" data-v-68f931b5>xxx</span><span class="brackets" data-v-68f931b5>)</span></div><div data-v-68f931b5><span class="comment" data-v-68f931b5>//原型方法 (也叫 實例方法)</span></div><div data-v-68f931b5><span class="word" data-v-68f931b5>User.prototype.sayHi</span><span class="then" data-v-68f931b5>=</span><span class="function" data-v-68f931b5>function </span><span class="brackets" data-v-68f931b5>(){</span></div><div class="padTwo VSL" data-v-68f931b5><span class="word" data-v-68f931b5>console</span><span class="variable" data-v-68f931b5>.log</span><span class="brackets" data-v-68f931b5>(</span> <span class="src" data-v-68f931b5>`Hi, </span><span class="then" data-v-68f931b5>${</span> <span class="then" data-v-68f931b5>this</span><span class="word" data-v-68f931b5>.fullName</span> <span class="src" data-v-68f931b5>}`</span><span class="word" data-v-68f931b5></span> <span class="brackets" data-v-68f931b5>)</span><div data-v-68f931b5></div></div><div data-v-68f931b5><span class="brackets" data-v-68f931b5>}</span></div><div data-v-68f931b5><span class="comment" data-v-68f931b5>//調用原型方法 (實例方法)</span></div><div data-v-68f931b5><span class="function" data-v-68f931b5>const </span> <span class="word" data-v-68f931b5>u</span><span class="then" data-v-68f931b5>=</span> <span class="then" data-v-68f931b5>new </span><span class="word" data-v-68f931b5>User</span> <span class="brackets" data-v-68f931b5>()</span></div><div data-v-68f931b5><span class="word" data-v-68f931b5>u.sayHi</span> <span class="brackets" data-v-68f931b5>()</span></div><br data-v-68f931b5><br data-v-68f931b5><p data-v-68f931b5>es6 之後建議寫法 class 效果一樣</p><br data-v-68f931b5><div data-v-68f931b5><span class="comment" data-v-68f931b5>//聲明類</span></div><div data-v-68f931b5><span class="function" data-v-68f931b5>class </span><span class="word" data-v-68f931b5>User</span> <span class="brackets" data-v-68f931b5>{</span></div><div class="padTwo VSL" data-v-68f931b5><div data-v-68f931b5><span class="comment" data-v-68f931b5>//constructor表示他的構造器</span></div><span class="function" data-v-68f931b5>constructor</span><span class="brackets" data-v-68f931b5>(</span><span class="word" data-v-68f931b5>firstName,lastName</span><span class="brackets" data-v-68f931b5>){</span><div data-v-68f931b5></div><div class="padTwo VSL" data-v-68f931b5><span class="then" data-v-68f931b5>this</span><span class="word" data-v-68f931b5>.firstName</span><span class="then" data-v-68f931b5>=</span> <span class="word" data-v-68f931b5>firstName;</span><div data-v-68f931b5><span class="then" data-v-68f931b5>this</span><span class="word" data-v-68f931b5>.lastName</span><span class="then" data-v-68f931b5>=</span><span class="word" data-v-68f931b5>lastName;</span></div><div data-v-68f931b5><span class="then" data-v-68f931b5>this</span><span class="word" data-v-68f931b5>.fullName</span><span class="then" data-v-68f931b5>=</span> <span class="src" data-v-68f931b5>`${ </span><span class="word" data-v-68f931b5>firstName </span><span class="src" data-v-68f931b5>} ${</span><span class="word" data-v-68f931b5>lastName </span><span class="src" data-v-68f931b5>}`;</span></div><div data-v-68f931b5></div></div><div data-v-68f931b5><span class="brackets" data-v-68f931b5>}</span></div><div data-v-68f931b5><span class="comment" data-v-68f931b5>//通過關鍵字static表示靜態方法</span></div><div data-v-68f931b5><span class="word" data-v-68f931b5>static</span><span class="word" data-v-68f931b5>isUser</span><span class="brackets" data-v-68f931b5>(</span> <span class="word" data-v-68f931b5>u</span><span class="brackets" data-v-68f931b5>){</span></div><div class="padTwo VSL" data-v-68f931b5><span class="then" data-v-68f931b5>return !!</span><span class="word" data-v-68f931b5>u </span> <span class="then" data-v-68f931b5>&amp;&amp; !!</span><span class="word" data-v-68f931b5>u.fullName</span><div data-v-68f931b5></div></div><div data-v-68f931b5><span class="brackets" data-v-68f931b5>}</span></div><div data-v-68f931b5><span class="word" data-v-68f931b5>sayHi</span><span class="brackets" data-v-68f931b5>(){</span></div><div class="padTwo VSL" data-v-68f931b5><span class="word" data-v-68f931b5>console</span><span class="variable" data-v-68f931b5>.log</span><span class="brackets" data-v-68f931b5>(</span> <span class="src" data-v-68f931b5>`Hi, </span><span class="then" data-v-68f931b5>${</span> <span class="then" data-v-68f931b5>this</span><span class="word" data-v-68f931b5>.fullName</span> <span class="src" data-v-68f931b5>}`</span><span class="word" data-v-68f931b5></span> <span class="brackets" data-v-68f931b5>)</span><div data-v-68f931b5></div></div><div data-v-68f931b5><span class="brackets" data-v-68f931b5>}</span></div></div><div data-v-68f931b5><span class="brackets" data-v-68f931b5>}</span></div><br data-v-68f931b5><div data-v-68f931b5><span class="comment" data-v-68f931b5>//實例化</span></div><div data-v-68f931b5><span class="function" data-v-68f931b5>let </span><span class="word" data-v-68f931b5>wayne</span> <span class="then" data-v-68f931b5>= new </span><span class="word" data-v-68f931b5>User</span> <span class="brackets" data-v-68f931b5>(</span><span class="src" data-v-68f931b5>&quot;wayne&quot;</span> <span class="src" data-v-68f931b5>,</span><span class="src" data-v-68f931b5>&quot;lu&quot;</span> <span class="brackets" data-v-68f931b5>)</span></div><div data-v-68f931b5><span class="word" data-v-68f931b5>wayne</span><span class="variable" data-v-68f931b5>.sayHi</span><span class="brackets" data-v-68f931b5>();</span></div><br data-v-68f931b5><br data-v-68f931b5><p data-v-68f931b5>範例2 繼承</p><p data-v-68f931b5>子類 一旦繼承 父類 , 他就默認有 父類 的 屬性 和 方法</p><p data-v-68f931b5>同時也能有 自己的屬性 和 方法</p><br data-v-68f931b5><p data-v-68f931b5># 以前</p><div data-v-68f931b5><span class="function" data-v-68f931b5>function </span><span class="word" data-v-68f931b5>Animal</span> <span class="brackets" data-v-68f931b5>(</span><span class="word" data-v-68f931b5>type,name</span><span class="brackets" data-v-68f931b5>){</span></div><div class="padTwo VSL" data-v-68f931b5><span class="then" data-v-68f931b5>this</span> <span class="word" data-v-68f931b5>.type</span><span class="then" data-v-68f931b5>=</span> <span class="word" data-v-68f931b5>type;</span><div data-v-68f931b5><span class="then" data-v-68f931b5>this</span> <span class="word" data-v-68f931b5>.name</span><span class="then" data-v-68f931b5>=</span> <span class="word" data-v-68f931b5>name;</span></div><div data-v-68f931b5></div></div><div data-v-68f931b5><span class="brackets" data-v-68f931b5>}</span></div><br data-v-68f931b5><div data-v-68f931b5><span class="word" data-v-68f931b5>Animal.prototype.intro</span><span class="then" data-v-68f931b5>=</span><span class="function" data-v-68f931b5>function </span><span class="brackets" data-v-68f931b5>(){</span></div><div class="padTwo VSL" data-v-68f931b5><span class="word" data-v-68f931b5>console</span><span class="variable" data-v-68f931b5>.log</span><span class="brackets" data-v-68f931b5>(</span> <span class="src" data-v-68f931b5>`I am ${</span><span class="then" data-v-68f931b5>this</span> <span class="word" data-v-68f931b5>.type</span><span class="src" data-v-68f931b5>},name: ${</span><span class="then" data-v-68f931b5>this</span> <span class="word" data-v-68f931b5>.name</span><span class="src" data-v-68f931b5>)`</span> <span class="brackets" data-v-68f931b5>)</span><div data-v-68f931b5></div></div><div data-v-68f931b5><span class="brackets" data-v-68f931b5>}</span></div><br data-v-68f931b5><div data-v-68f931b5><span class="function" data-v-68f931b5>function </span><span class="word" data-v-68f931b5>Human</span> <span class="brackets" data-v-68f931b5>(</span><span class="word" data-v-68f931b5>name</span> <span class="brackets" data-v-68f931b5>){</span></div><div class="padTwo VSL" data-v-68f931b5><span class="word" data-v-68f931b5>Animal</span><span class="variable" data-v-68f931b5>.call</span><span class="brackets" data-v-68f931b5>(</span> <span class="then" data-v-68f931b5>this</span><span class="then" data-v-68f931b5>,</span> <span class="word" data-v-68f931b5>&quot;人&quot;,</span><span class="word" data-v-68f931b5>name</span> <span class="brackets" data-v-68f931b5>);</span><div data-v-68f931b5></div></div><div data-v-68f931b5><span class="brackets" data-v-68f931b5>}</span></div><br data-v-68f931b5><div data-v-68f931b5><span class="comment" data-v-68f931b5>//設置繼承關係</span></div><div data-v-68f931b5><span class="word" data-v-68f931b5>Human.prototype</span><span class="then" data-v-68f931b5>=</span> <span class="brackets" data-v-68f931b5>Object</span><span class="word" data-v-68f931b5>.create</span> <span class="brackets" data-v-68f931b5>(</span><span class="word" data-v-68f931b5>Animal.prototype</span><span class="brackets" data-v-68f931b5>);</span></div><br data-v-68f931b5><p data-v-68f931b5># 現在 class</p><div data-v-68f931b5><span class="comment" data-v-68f931b5>//新的方式 //繼承 子構造函數 &amp; 父構造函數</span></div><div data-v-68f931b5><span class="function" data-v-68f931b5>class </span><span class="word" data-v-68f931b5>Animal</span> <span class="brackets" data-v-68f931b5>{ </span><span class="comment" data-v-68f931b5>//父類</span></div><div class="padTwo VSL" data-v-68f931b5><span class="function" data-v-68f931b5>constructor</span><span class="brackets" data-v-68f931b5>(</span><span class="word" data-v-68f931b5>type,name</span><span class="brackets" data-v-68f931b5>){</span><div data-v-68f931b5></div><div class="padTwo VSL" data-v-68f931b5><span class="then" data-v-68f931b5>this</span> <span class="word" data-v-68f931b5>.type</span><span class="then" data-v-68f931b5>=</span> <span class="word" data-v-68f931b5>type;</span><div data-v-68f931b5><span class="then" data-v-68f931b5>this</span><span class="word" data-v-68f931b5>.name</span> <span class="then" data-v-68f931b5>=</span><span class="word" data-v-68f931b5>name;</span></div><div data-v-68f931b5></div></div><div data-v-68f931b5><span class="brackets" data-v-68f931b5>}</span></div><br data-v-68f931b5><div data-v-68f931b5><span class="word" data-v-68f931b5>intro</span><span class="brackets" data-v-68f931b5>(){</span></div><div class="padTwo VSL" data-v-68f931b5><span class="word" data-v-68f931b5>console</span><span class="variable" data-v-68f931b5>.log</span><span class="brackets" data-v-68f931b5>(</span><span class="src" data-v-68f931b5>`I am ${</span><span class="then" data-v-68f931b5>this</span> <span class="word" data-v-68f931b5>.type</span><span class="src" data-v-68f931b5>},name: ${</span><span class="then" data-v-68f931b5>this</span> <span class="word" data-v-68f931b5>.name</span><span class="src" data-v-68f931b5>)`</span> <span class="brackets" data-v-68f931b5>)</span><div data-v-68f931b5></div></div><div data-v-68f931b5><span class="brackets" data-v-68f931b5>}</span></div></div><div data-v-68f931b5><span class="brackets" data-v-68f931b5>}</span></div><br data-v-68f931b5><div data-v-68f931b5><span class="function" data-v-68f931b5>class </span><span class="word" data-v-68f931b5>Human </span><span class="function" data-v-68f931b5>extends </span><span class="word" data-v-68f931b5>Animal</span> <span class="brackets" data-v-68f931b5>{ </span><span class="comment" data-v-68f931b5>//extends 子類 去繼承 父類</span></div><div class="padTwo VSL" data-v-68f931b5><span class="function" data-v-68f931b5>constructor</span><span class="brackets" data-v-68f931b5>(</span><span class="word" data-v-68f931b5>type, name, sex </span><span class="brackets" data-v-68f931b5>) { </span><span class="comment" data-v-68f931b5>//父類有的參數 , 這裡一定要有</span><div data-v-68f931b5></div><div class="padTwo VSL" data-v-68f931b5><span class="function" data-v-68f931b5>super </span><span class="brackets" data-v-68f931b5>(</span><span class="word" data-v-68f931b5>type,name</span><span class="brackets" data-v-68f931b5>);</span><div data-v-68f931b5></div><br data-v-68f931b5><div data-v-68f931b5><span class="then" data-v-68f931b5>this</span> <span class="word" data-v-68f931b5>.sex</span><span class="then" data-v-68f931b5>=</span> <span class="word" data-v-68f931b5>sex</span></div></div><div data-v-68f931b5><span class="brackets" data-v-68f931b5>}</span></div><br data-v-68f931b5><div data-v-68f931b5><span class="word" data-v-68f931b5>sayHi</span><span class="brackets" data-v-68f931b5>(){</span></div><div class="padTwo VSL" data-v-68f931b5><span class="word" data-v-68f931b5>console</span><span class="variable" data-v-68f931b5>.log</span><span class="brackets" data-v-68f931b5>(</span> <span class="src" data-v-68f931b5>`我是</span><span class="then" data-v-68f931b5>${</span><span class="word" data-v-68f931b5>this.name</span><span class="then" data-v-68f931b5>}</span><span class="src" data-v-68f931b5>,類型:</span> <span class="then" data-v-68f931b5>${</span><span class="word" data-v-68f931b5>this.type</span><span class="then" data-v-68f931b5>}</span><span class="src" data-v-68f931b5>,性別:</span> <span class="then" data-v-68f931b5>${</span><span class="word" data-v-68f931b5>this.sex</span><span class="then" data-v-68f931b5>}</span> <span class="src" data-v-68f931b5>`</span><span class="brackets" data-v-68f931b5>)</span><div data-v-68f931b5></div></div><div data-v-68f931b5><span class="brackets" data-v-68f931b5>}</span></div></div><div data-v-68f931b5><span class="brackets" data-v-68f931b5>}</span></div><br data-v-68f931b5><div data-v-68f931b5><span class="comment" data-v-68f931b5>//實例化</span></div><div data-v-68f931b5><span class="function" data-v-68f931b5>const </span><span class="word" data-v-68f931b5>wayne</span> <span class="then" data-v-68f931b5>= new </span><span class="word" data-v-68f931b5>Human</span> <span class="brackets" data-v-68f931b5>(</span><span class="src" data-v-68f931b5>&quot;wayne&quot;,&quot;人&quot;,&quot;男&quot;</span><span class="brackets" data-v-68f931b5>);</span></div><div data-v-68f931b5><span class="comment" data-v-68f931b5>//可以調用父類的intro()方法</span></div><div data-v-68f931b5><span class="word" data-v-68f931b5>wayne</span><span class="variable" data-v-68f931b5>.intro</span><span class="brackets" data-v-68f931b5>(); </span><span class="comment" data-v-68f931b5>// I am 人,name: wayne</span></div><div data-v-68f931b5><span class="comment" data-v-68f931b5>//可以調用自己的sayHi()方法</span></div><div data-v-68f931b5><span class="word" data-v-68f931b5>wayne</span><span class="variable" data-v-68f931b5>.sayHi</span><span class="brackets" data-v-68f931b5>(); </span><span class="comment" data-v-68f931b5>// 我是wayne,類型: 人,性別: 男 </span></div><br data-v-68f931b5><br data-v-68f931b5><br data-v-68f931b5><p class="cor36" data-v-68f931b5># instanceof 可以判斷繼承關係</p><p data-v-68f931b5>只要在同一條原型鏈上面 , 返回 true</p><br data-v-68f931b5><div data-v-68f931b5><span class="word" data-v-68f931b5>console</span><span class="variable" data-v-68f931b5>.log</span><span class="brackets" data-v-68f931b5>(</span> <span class="word" data-v-68f931b5>wayne</span><span class="variable" data-v-68f931b5>instanceof</span><span class="word" data-v-68f931b5>Human</span> <span class="brackets" data-v-68f931b5>);</span></div></div><div id="threeprototype008" class="articleCardTitle cor36 fz34" data-v-68f931b5> 6.8 繼承總結 </div><p class="fz28" data-v-68f931b5>原型鏈繼承</p><p class="fz28" data-v-68f931b5>構造函數繼承</p><p class="fz28" data-v-68f931b5>組合繼承</p><p class="fz28" data-v-68f931b5>寄生組合繼承</p><br data-v-68f931b5><br data-v-68f931b5><div class="bgcVS" data-v-68f931b5><p class="cor36" data-v-68f931b5>原型鏈</p><div data-v-68f931b5><span class="function" data-v-68f931b5>function </span><span class="word" data-v-68f931b5>Person</span> <span class="brackets" data-v-68f931b5>(</span><span class="word" data-v-68f931b5>name</span> <span class="brackets" data-v-68f931b5>){</span></div><div class="padTwo VSL" data-v-68f931b5><span class="then" data-v-68f931b5>this</span> <span class="word" data-v-68f931b5>.name</span><span class="then" data-v-68f931b5>=</span> <span class="word" data-v-68f931b5>name</span><div data-v-68f931b5></div></div><div data-v-68f931b5><span class="brackets" data-v-68f931b5>}</span></div><br data-v-68f931b5><div data-v-68f931b5><span class="word" data-v-68f931b5>Person</span><span class="variable" data-v-68f931b5>.prototype.sayHi</span><span class="then" data-v-68f931b5>=</span><span class="function" data-v-68f931b5>function </span><span class="brackets" data-v-68f931b5>(){</span></div><div class="padTwo VSL" data-v-68f931b5><span class="word" data-v-68f931b5>console</span><span class="variable" data-v-68f931b5>.log</span><span class="brackets" data-v-68f931b5>(</span> <span class="word" data-v-68f931b5>&quot;Hi,</span><span class="word" data-v-68f931b5>my</span> <span class="word" data-v-68f931b5>name</span><span class="word" data-v-68f931b5>is &quot;</span> <span class="then" data-v-68f931b5>+</span><span class="then" data-v-68f931b5>this</span> <span class="word" data-v-68f931b5>.name</span><span class="brackets" data-v-68f931b5>)</span><div data-v-68f931b5></div></div><div data-v-68f931b5><span class="brackets" data-v-68f931b5>}</span></div><br data-v-68f931b5><div data-v-68f931b5><span class="function" data-v-68f931b5>let </span><span class="word" data-v-68f931b5>person1</span><span class="then" data-v-68f931b5>= new </span> <span class="word" data-v-68f931b5>Person</span><span class="brackets" data-v-68f931b5>(</span> <span class="src" data-v-68f931b5>&quot;wayne&quot;</span><span class="brackets" data-v-68f931b5>)</span></div><div data-v-68f931b5><span class="function" data-v-68f931b5>let </span><span class="word" data-v-68f931b5>person2</span><span class="then" data-v-68f931b5>= new </span> <span class="word" data-v-68f931b5>Person</span><span class="brackets" data-v-68f931b5>(</span> <span class="src" data-v-68f931b5>&quot;jack&quot;</span><span class="brackets" data-v-68f931b5>)</span></div><br data-v-68f931b5><div data-v-68f931b5><span class="word" data-v-68f931b5>person1</span><span class="word" data-v-68f931b5>.sayHi</span> <span class="brackets" data-v-68f931b5>()</span><span class="comment" data-v-68f931b5>//&quot;Hi,my name is wayne&quot;</span></div><div data-v-68f931b5><span class="word" data-v-68f931b5>person2</span><span class="word" data-v-68f931b5>.sayHi</span> <span class="brackets" data-v-68f931b5>()</span><span class="comment" data-v-68f931b5>//&quot;Hi,my name is jack&quot;</span></div><p data-v-68f931b5>有一個構造函數 Person</p><p data-v-68f931b5>這 構造函數上 有 prototype 屬性</p><p data-v-68f931b5>屬性上 添加 sayHi 方法</p><p data-v-68f931b5>通過 Person() 這個構造函數 new 出來 兩個 實例</p><p data-v-68f931b5>在 構造函數 Person() 內部 沒定義 方法</p><p data-v-68f931b5>但 可以調用 person1 的 satHi 方法</p><p data-v-68f931b5>這就是原型鏈作用</p><p data-v-68f931b5>當我們 通過 new 創建 person1 物件時</p><p data-v-68f931b5>persno1 物件本身 沒 sayHi() 方法</p><p data-v-68f931b5>當調用他的 sayHi() 方法時</p><p data-v-68f931b5>他會先在 物件本身 找</p><p data-v-68f931b5> 沒有的話 會在 person1 的 構造函數 Person() 的 prototype 上尋找 sayHi() 方法 </p><p data-v-68f931b5>小結:</p><p data-v-68f931b5>構造函數的 prototype 屬性的作用</p><p data-v-68f931b5>是當 實例對象 調用某個 方法or屬性時</p><p data-v-68f931b5>如果在 實例對象本身上 找不到</p><p data-v-68f931b5>就會去 他的 構造函數的 prototype 身上找</p><p data-v-68f931b5>總結:</p><p data-v-68f931b5>每個構造函數都有一個原型對象 prototype</p><p data-v-68f931b5>每個實例對象 包含一個 指向 原型對象的指針 __proto__</p><p data-v-68f931b5>每當代碼讀取 實例的 某屬性時</p><p data-v-68f931b5>會先在 實例上搜索這個屬性</p><p data-v-68f931b5>沒找到則 搜索 原型對象</p><br data-v-68f931b5><br data-v-68f931b5><p class="cor36" data-v-68f931b5>原型鏈繼承</p><div data-v-68f931b5><span class="comment" data-v-68f931b5>//定義父類</span></div><div data-v-68f931b5><span class="function" data-v-68f931b5>function </span><span class="word" data-v-68f931b5>Parent</span> <span class="brackets" data-v-68f931b5>(){</span></div><div class="padTwo VSL" data-v-68f931b5><span class="then" data-v-68f931b5>this</span> <span class="word" data-v-68f931b5>.name</span><span class="then" data-v-68f931b5>=</span> <span class="src" data-v-68f931b5>&quot;parent&quot;</span><div data-v-68f931b5></div></div><div data-v-68f931b5><span class="brackets" data-v-68f931b5>}</span></div><br data-v-68f931b5><div data-v-68f931b5><span class="comment" data-v-68f931b5>//在父類的原型上定義方法</span></div><div data-v-68f931b5><span class="word" data-v-68f931b5>Parent</span><span class="variable" data-v-68f931b5>.prototype.getName</span><span class="then" data-v-68f931b5>=</span><span class="function" data-v-68f931b5>function </span><span class="brackets" data-v-68f931b5>(){</span></div><div class="padTwo VSL" data-v-68f931b5><span class="then" data-v-68f931b5>return </span> <span class="then" data-v-68f931b5>this</span><span class="word" data-v-68f931b5>.name</span><div data-v-68f931b5></div></div><div data-v-68f931b5><span class="brackets" data-v-68f931b5>}</span></div><br data-v-68f931b5><div data-v-68f931b5><span class="comment" data-v-68f931b5>//定義子類</span></div><div data-v-68f931b5><span class="function" data-v-68f931b5>function </span><span class="word" data-v-68f931b5>Cild</span> <span class="brackets" data-v-68f931b5>(){</span></div><div class="padTwo VSL" data-v-68f931b5><span class="then" data-v-68f931b5>this</span> <span class="word" data-v-68f931b5>.name</span><span class="then" data-v-68f931b5>=</span> <span class="src" data-v-68f931b5>&quot;child&quot;</span><div data-v-68f931b5></div></div><div data-v-68f931b5><span class="brackets" data-v-68f931b5>}</span></div><br data-v-68f931b5><div data-v-68f931b5><span class="comment" data-v-68f931b5>//關鍵-&gt;子類繼承父類,實現原型鏈繼承</span></div><div data-v-68f931b5><span class="word" data-v-68f931b5>Child</span><span class="variable" data-v-68f931b5>.prototype</span><span class="then" data-v-68f931b5>= new </span> <span class="word" data-v-68f931b5>Parent</span><span class="brackets" data-v-68f931b5>()</span></div><br data-v-68f931b5><div data-v-68f931b5><span class="comment" data-v-68f931b5>//實例化子類</span></div><div data-v-68f931b5><span class="function" data-v-68f931b5>let </span><span class="word" data-v-68f931b5>child</span> <span class="then" data-v-68f931b5>= new </span><span class="word" data-v-68f931b5>Child</span> <span class="brackets" data-v-68f931b5>()</span></div><br data-v-68f931b5><div data-v-68f931b5><span class="comment" data-v-68f931b5>//測試</span></div><div data-v-68f931b5><span class="word" data-v-68f931b5>console</span><span class="variable" data-v-68f931b5>.log</span><span class="brackets" data-v-68f931b5>(</span> <span class="word" data-v-68f931b5>child1</span><span class="variable" data-v-68f931b5>.getName</span><span class="brackets" data-v-68f931b5>())</span></div><p data-v-68f931b5>child1 是透過 Child 構造函數 實例化 對象</p><p data-v-68f931b5>當調用 child1 getName() 方法</p><p data-v-68f931b5></p><p data-v-68f931b5></p><p data-v-68f931b5></p><p data-v-68f931b5></p><p data-v-68f931b5></p><p data-v-68f931b5></p><p data-v-68f931b5></p><p data-v-68f931b5></p><p data-v-68f931b5></p><p data-v-68f931b5></p><p data-v-68f931b5></p><p data-v-68f931b5></p><p data-v-68f931b5></p><p data-v-68f931b5></p><p data-v-68f931b5></p><p data-v-68f931b5></p><p data-v-68f931b5></p><p data-v-68f931b5></p><p data-v-68f931b5></p><p data-v-68f931b5></p><p data-v-68f931b5></p><p data-v-68f931b5></p><p data-v-68f931b5></p><p data-v-68f931b5></p><p data-v-68f931b5></p><p data-v-68f931b5></p><p data-v-68f931b5></p><p data-v-68f931b5></p><p data-v-68f931b5></p><p data-v-68f931b5></p></div><p class="fz28" data-v-68f931b5></p><p class="fz28" data-v-68f931b5></p><p class="fz28" data-v-68f931b5></p><p class="fz28" data-v-68f931b5></p><p class="fz28" data-v-68f931b5></p><p class="fz28" data-v-68f931b5></p><p class="fz28" data-v-68f931b5></p><p class="fz28" data-v-68f931b5></p><p class="fz28" data-v-68f931b5></p><p class="fz28" data-v-68f931b5></p><p class="fz28" data-v-68f931b5></p><p class="fz28" data-v-68f931b5></p><p class="fz28" data-v-68f931b5></p><p class="fz28" data-v-68f931b5></p><p class="fz28" data-v-68f931b5></p><p class="fz28" data-v-68f931b5></p><p class="fz28" data-v-68f931b5></p><p class="fz28" data-v-68f931b5></p><p class="fz28" data-v-68f931b5></p><p class="fz28" data-v-68f931b5></p><p class="fz28" data-v-68f931b5></p><p class="fz28" data-v-68f931b5></p><p class="fz28" data-v-68f931b5></p><p class="fz28" data-v-68f931b5></p><p class="fz28" data-v-68f931b5></p><p class="fz28" data-v-68f931b5></p><p class="fz28" data-v-68f931b5></p><p class="fz28" data-v-68f931b5></p><p class="fz28" data-v-68f931b5></p><p class="fz28" data-v-68f931b5></p><p class="fz28" data-v-68f931b5></p><p class="fz28" data-v-68f931b5></p><p class="fz28" data-v-68f931b5></p><p class="fz28" data-v-68f931b5></p><p class="fz28" data-v-68f931b5></p><p class="fz28" data-v-68f931b5></p><p class="fz28" data-v-68f931b5></p><p class="fz28" data-v-68f931b5></p><p class="fz28" data-v-68f931b5></p><p class="fz28" data-v-68f931b5></p><p class="fz28" data-v-68f931b5></p><p class="fz28" data-v-68f931b5></p><p class="fz28" data-v-68f931b5></p><p class="fz28" data-v-68f931b5></p><p class="fz28" data-v-68f931b5></p><p class="fz28" data-v-68f931b5></p><p class="fz28" data-v-68f931b5></p><p class="fz28" data-v-68f931b5></p><p class="fz28" data-v-68f931b5></p><p class="fz28" data-v-68f931b5></p><p class="fz28" data-v-68f931b5></p><p class="fz28" data-v-68f931b5></p><p class="fz28" data-v-68f931b5></p><p class="fz28" data-v-68f931b5></p><p class="fz28" data-v-68f931b5></p><p class="fz28" data-v-68f931b5></p><p class="fz28" data-v-68f931b5></p><p class="fz28" data-v-68f931b5></p><p class="fz28" data-v-68f931b5></p><p class="fz28" data-v-68f931b5></p><p class="fz28" data-v-68f931b5></p><p class="fz28" data-v-68f931b5></p><p class="fz28" data-v-68f931b5></p><p class="fz28" data-v-68f931b5></p><p class="fz28" data-v-68f931b5></p><p class="fz28" data-v-68f931b5></p><p class="fz28" data-v-68f931b5></p><p class="fz28" data-v-68f931b5></p><p class="fz28" data-v-68f931b5></p><p class="fz28" data-v-68f931b5></p><p class="fz28" data-v-68f931b5></p><p class="fz28" data-v-68f931b5></p><p class="fz28" data-v-68f931b5></p><p class="fz28" data-v-68f931b5></p><p class="fz28" data-v-68f931b5></p><p class="fz28" data-v-68f931b5></p><p class="fz28" data-v-68f931b5></p><p class="fz28" data-v-68f931b5></p><p class="fz28" data-v-68f931b5></p><p class="fz28" data-v-68f931b5></p><p class="fz28" data-v-68f931b5></p><p class="fz28" data-v-68f931b5></p></div></div></div>',1),m8=_n(()=>n("div",{class:"toTopButton"},[n("div",{class:"disCen"},"___"),n("div",{class:"disCen"},"▲")],-1)),h8=[m8],k8=_n(()=>n("div",{class:"toBotButton"},[n("div",{class:"disCen"},"▼"),n("div",{class:"disCen"},"￣")],-1)),g8=[k8],z8={__name:"JsPageThreeSix",setup(a){const s=ba(!1);window.addEventListener("scroll",function(){s.value=window.scrollY>0});function d(){window.scrollTo({top:0,left:0,behavior:"smooth"})}function v(){window.scrollTo({top:999999,left:0,behavior:"smooth"})}function t(e){window.scrollTo({top:document.getElementById(`${e}`).offsetTop,behavior:"smooth"})}return(e,c)=>(aa(),ta(G,null,[n("section",null,[n("div",f8,[n("div",o8,[n("div",u8,[n("div",{onClick:c[0]||(c[0]=l=>t("threeprototype001")),class:"leftNavText"}," 物件導向 "),n("div",{onClick:c[1]||(c[1]=l=>t("threeprototype002")),class:"leftNavText"}," 構造函數 "),n("div",{onClick:c[2]||(c[2]=l=>t("threeprototype003")),class:"leftNavText"}," constructor "),n("div",{onClick:c[3]||(c[3]=l=>t("threeprototype004")),class:"leftNavText"}," 對象原型 "),n("div",{onClick:c[4]||(c[4]=l=>t("threeprototype005")),class:"leftNavText"}," 原型繼承 "),n("div",{onClick:c[5]||(c[5]=l=>t("threeprototype006")),class:"leftNavText"}," 原型鏈 "),n("div",{onClick:c[6]||(c[6]=l=>t("threeprototype007")),class:"leftNavText"}," class "),n("div",{onClick:c[7]||(c[7]=l=>t("threeprototype008")),class:"leftNavText"}," 繼承總結 ")])])]),w8]),n("div",null,[W(k(B,{name:"fade",tag:"div"},{default:S(()=>[n("div",{onClick:d,class:"toTop"},h8)]),_:1},512),[[U,s.value]]),W(k(B,{name:"fade",tag:"div"},{default:S(()=>[n("div",{onClick:v,class:"toBot"},g8)]),_:1},512),[[U,s.value]])])],64))}},T8=pa(z8,[["__scopeId","data-v-68f931b5"]]),q8="/vue-learn-js/assets/jstip001-1390af12.jpg";const Sn=a=>(wa("data-v-7ad4cadc"),a=a(),ma(),a),_8={class:"leftNav"},S8={class:"leftNavContainer"},y8={class:"leftNavLayout"},C8={class:"Main"},x8={class:"mainContainer"},L8={class:"mainLayout"},j8=K('<br data-v-7ad4cadc><br data-v-7ad4cadc><p class="fz28" data-v-7ad4cadc>總分總</p><p class="fz28" data-v-7ad4cadc>1.要講哪個知識點</p><p class="fz28" data-v-7ad4cadc>2.細講</p><p class="fz28" data-v-7ad4cadc>3.總結</p><br data-v-7ad4cadc><br data-v-7ad4cadc><div id="threetips001" class="articleCardTitle cor36 fz34" data-v-7ad4cadc> 7.1 淺拷貝 </div><p class="fz28" data-v-7ad4cadc> 深拷貝會複製物件的所有屬性和嵌套物件，而淺拷貝只會複製一層屬性 </p><br data-v-7ad4cadc><p class="fz28" data-v-7ad4cadc>只針對引用數據類型</p><div class="bgcVS" data-v-7ad4cadc><div data-v-7ad4cadc><span class="function" data-v-7ad4cadc>const </span><span class="word" data-v-7ad4cadc>obj</span> <span class="then" data-v-7ad4cadc>=</span><span class="brackets" data-v-7ad4cadc>{</span> <span class="word" data-v-7ad4cadc>number:</span><span class="number" data-v-7ad4cadc>1</span> <span class="brackets" data-v-7ad4cadc>}</span></div><div data-v-7ad4cadc><span class="function" data-v-7ad4cadc>const </span> <span class="word" data-v-7ad4cadc>o</span><span class="then" data-v-7ad4cadc>=</span> <span class="word" data-v-7ad4cadc>obj</span></div><div data-v-7ad4cadc><span class="word" data-v-7ad4cadc>console.</span><span class="variable" data-v-7ad4cadc>log</span> <span class="brackets" data-v-7ad4cadc>(</span><span class="word" data-v-7ad4cadc>o</span> <span class="brackets" data-v-7ad4cadc>)</span></div><div data-v-7ad4cadc><span class="word" data-v-7ad4cadc>o.number</span> <span class="then" data-v-7ad4cadc>=</span><span class="number" data-v-7ad4cadc>20</span></div><div data-v-7ad4cadc><span class="word" data-v-7ad4cadc>console.</span><span class="variable" data-v-7ad4cadc>log</span> <span class="brackets" data-v-7ad4cadc>(</span><span class="word" data-v-7ad4cadc>o</span> <span class="brackets" data-v-7ad4cadc>)</span><span class="comment" data-v-7ad4cadc>//{number:20} . . . 堆 &amp; 棧</span></div><div data-v-7ad4cadc><span class="word" data-v-7ad4cadc>console.</span><span class="variable" data-v-7ad4cadc>log</span> <span class="brackets" data-v-7ad4cadc>(</span><span class="word" data-v-7ad4cadc>obj</span> <span class="brackets" data-v-7ad4cadc>)</span><span class="comment" data-v-7ad4cadc>//{number:20} . . . 堆 &amp; 棧</span></div><div class="dis" data-v-7ad4cadc><div class="pad20" data-v-7ad4cadc><br data-v-7ad4cadc><div data-v-7ad4cadc>obj</div><div data-v-7ad4cadc>o</div><br data-v-7ad4cadc></div><div class="pad20" data-v-7ad4cadc> 棧 <div data-v-7ad4cadc>→ 0x1111 →</div><div data-v-7ad4cadc>→ 0x2222 ↗</div><div data-v-7ad4cadc>把地址</div><div data-v-7ad4cadc>賦值給他</div></div><div class="pad20" data-v-7ad4cadc> 堆 <div data-v-7ad4cadc>{ number:1 }</div><br data-v-7ad4cadc><div data-v-7ad4cadc>址</div></div></div><br data-v-7ad4cadc><br data-v-7ad4cadc><p data-v-7ad4cadc>淺拷貝: 拷貝的是 地址</p><br data-v-7ad4cadc><p data-v-7ad4cadc>法一</p><div data-v-7ad4cadc><span class="function" data-v-7ad4cadc>const </span><span class="word" data-v-7ad4cadc>obj</span> <span class="then" data-v-7ad4cadc>=</span><span class="brackets" data-v-7ad4cadc>{</span></div><div class="padTwo VSL" data-v-7ad4cadc><span class="word" data-v-7ad4cadc>uname:</span> <span class="src" data-v-7ad4cadc>&quot;wayne&quot;</span></div><div class="padTwo VSL" data-v-7ad4cadc><span class="word" data-v-7ad4cadc>number:</span> <span class="number" data-v-7ad4cadc>1</span><div data-v-7ad4cadc></div></div><div class="brackets" data-v-7ad4cadc>}</div><div data-v-7ad4cadc><span class="function" data-v-7ad4cadc>const </span> <span class="word" data-v-7ad4cadc>o</span><span class="then" data-v-7ad4cadc>=</span> <span class="brackets" data-v-7ad4cadc>{</span><span class="word" data-v-7ad4cadc>...obj</span> <span class="brackets" data-v-7ad4cadc>}</span></div><div data-v-7ad4cadc><span class="word" data-v-7ad4cadc>console.</span><span class="variable" data-v-7ad4cadc>log</span> <span class="brackets" data-v-7ad4cadc>(</span><span class="word" data-v-7ad4cadc>o</span> <span class="brackets" data-v-7ad4cadc>)</span></div><br data-v-7ad4cadc><p data-v-7ad4cadc>法二</p><div data-v-7ad4cadc><span class="function" data-v-7ad4cadc>const </span> <span class="word" data-v-7ad4cadc>o</span><span class="then" data-v-7ad4cadc>=</span> <span class="brackets" data-v-7ad4cadc>{}</span></div><div data-v-7ad4cadc><span class="brackets" data-v-7ad4cadc>Object</span><span class="word" data-v-7ad4cadc>.assign</span><span class="brackets" data-v-7ad4cadc>(</span> <span class="word" data-v-7ad4cadc>o,obj</span><span class="brackets" data-v-7ad4cadc>)</span><span class="comment" data-v-7ad4cadc> // (要拷貝的,被拷貝的)// (右 賦值 給 左)</span></div><div data-v-7ad4cadc><span class="word" data-v-7ad4cadc>console.</span><span class="variable" data-v-7ad4cadc>log</span> <span class="brackets" data-v-7ad4cadc>(</span><span class="word" data-v-7ad4cadc>o</span> <span class="brackets" data-v-7ad4cadc>)</span></div><br data-v-7ad4cadc><br data-v-7ad4cadc><p data-v-7ad4cadc>淺拷貝只拷貝最外面那一層 (uname number)</p><p data-v-7ad4cadc>簡單物件還可以 , 裡面又有物件時 , 有問題</p><p data-v-7ad4cadc>. . &gt; 多層次嵌套 有問題</p><div data-v-7ad4cadc><span class="function" data-v-7ad4cadc>const </span><span class="word" data-v-7ad4cadc>obj</span> <span class="then" data-v-7ad4cadc>=</span><span class="brackets" data-v-7ad4cadc>{</span></div><div class="padTwo VSL" data-v-7ad4cadc><span class="word" data-v-7ad4cadc>uname:</span> <span class="src" data-v-7ad4cadc>&quot;wayne&quot;</span></div><div class="padTwo VSL" data-v-7ad4cadc><span class="word" data-v-7ad4cadc>number:</span> <span class="number" data-v-7ad4cadc>1</span><div data-v-7ad4cadc></div></div><div class="padTwo VSL" data-v-7ad4cadc><span class="word" data-v-7ad4cadc>inner:</span> <span class="brackets" data-v-7ad4cadc>{</span><div data-v-7ad4cadc><div class="padTwo VSL" data-v-7ad4cadc><span class="word" data-v-7ad4cadc>cantcopy:</span><span class="src" data-v-7ad4cadc>&quot;裡面的潛拷貝不到&quot;</span></div></div><div data-v-7ad4cadc><span class="brackets" data-v-7ad4cadc>}</span></div></div><div class="brackets" data-v-7ad4cadc>}</div><br data-v-7ad4cadc><br data-v-7ad4cadc><div class="dis" data-v-7ad4cadc><div class="pad20" data-v-7ad4cadc><br data-v-7ad4cadc><div data-v-7ad4cadc>obj.name</div><div data-v-7ad4cadc>o.name</div><br data-v-7ad4cadc><div data-v-7ad4cadc>obj.inner</div><div data-v-7ad4cadc>o.inner</div></div><div class="pad20" data-v-7ad4cadc> 棧 <div data-v-7ad4cadc>wayne</div><div data-v-7ad4cadc>wayne</div><div data-v-7ad4cadc>obj直接把wayne複製給o</div><div data-v-7ad4cadc>→ 0x1111 →</div><div data-v-7ad4cadc>→ 0x1111 ↗</div><div data-v-7ad4cadc>拷貝了地址</div></div><div class="pad20" data-v-7ad4cadc> 堆 <br data-v-7ad4cadc><br data-v-7ad4cadc><br data-v-7ad4cadc><br data-v-7ad4cadc><div data-v-7ad4cadc>{ cantcopy:&quot;裡面的潛拷貝不到&quot; }</div></div></div></div><p class="fz28" data-v-7ad4cadc>解決 多層次嵌套 問題</p><div id="threetips002" class="articleCardTitle cor36 fz34" data-v-7ad4cadc> 7.2 深拷貝 </div><p class="fz28" data-v-7ad4cadc> 深拷貝會複製物件的所有屬性和嵌套物件，而淺拷貝只會複製一層屬性 </p><br data-v-7ad4cadc><p class="fz28" data-v-7ad4cadc>深拷貝 拷貝的是 物件 不是地址</p><p class="fz28 cor36" data-v-7ad4cadc># 3 方法</p><p class="fz28" data-v-7ad4cadc>1. 通過 遞歸 實現 深拷貝</p><p class="fz28" data-v-7ad4cadc>2. lodash / cloneDeep</p><p class="fz28" data-v-7ad4cadc>3. 通過 JSON.stringify() 實現</p><br data-v-7ad4cadc><br data-v-7ad4cadc><p class="fz28" data-v-7ad4cadc>什麼是遞歸函數（recursion）?</p><p class="fz28" data-v-7ad4cadc>一個函數在內部 調用自己 就是遞歸函數</p><p class="fz28" data-v-7ad4cadc> 遞歸容易 &quot;棧溢出&quot; 錯誤 , 所以必須加 退出條件 return </p>',27),V8={class:"bgcVS"},P8=K('<div data-v-7ad4cadc><span class="function" data-v-7ad4cadc>function </span><span class="word" data-v-7ad4cadc>fn</span> <span class="brackets" data-v-7ad4cadc>(){</span></div><div class="padTwo VSL" data-v-7ad4cadc><span class="word" data-v-7ad4cadc>fn</span> <span class="brackets" data-v-7ad4cadc>()</span><div data-v-7ad4cadc></div></div><div data-v-7ad4cadc><span class="brackets" data-v-7ad4cadc>}</span></div><div data-v-7ad4cadc><span class="word" data-v-7ad4cadc>fn</span> <span class="brackets" data-v-7ad4cadc>()</span></div><br data-v-7ad4cadc><div data-v-7ad4cadc><span class="function" data-v-7ad4cadc>let </span> <span class="word" data-v-7ad4cadc>i</span><span class="then" data-v-7ad4cadc>=</span> <span class="number" data-v-7ad4cadc>1</span></div><div data-v-7ad4cadc><span class="function" data-v-7ad4cadc>function </span><span class="word" data-v-7ad4cadc>fn</span> <span class="brackets" data-v-7ad4cadc>(){</span></div><div class="padTwo VSL" data-v-7ad4cadc><span class="word" data-v-7ad4cadc>console.</span><span class="variable" data-v-7ad4cadc>log</span> <span class="brackets" data-v-7ad4cadc>(</span><span class="src" data-v-7ad4cadc>`這是第</span> <span class="then" data-v-7ad4cadc>${</span><span class="word" data-v-7ad4cadc>i</span> <span class="then" data-v-7ad4cadc>}</span><span class="src" data-v-7ad4cadc>次`</span> <span class="brackets" data-v-7ad4cadc>)</span><div data-v-7ad4cadc><span class="then" data-v-7ad4cadc>if</span> <span class="brackets" data-v-7ad4cadc>(</span><span class="word" data-v-7ad4cadc>i</span> <span class="then" data-v-7ad4cadc>&gt;=</span><span class="number" data-v-7ad4cadc>6</span> <span class="brackets" data-v-7ad4cadc>){</span><div class="padTwo VSL" data-v-7ad4cadc><span class="then" data-v-7ad4cadc>return </span></div><div data-v-7ad4cadc><span class="brackets" data-v-7ad4cadc>}</span></div><div data-v-7ad4cadc><span class="word" data-v-7ad4cadc>i</span> <span class="then" data-v-7ad4cadc>++</span></div></div></div><div class="padTwo VSL" data-v-7ad4cadc><span class="word" data-v-7ad4cadc>fn</span> <span class="brackets" data-v-7ad4cadc>()</span><div data-v-7ad4cadc></div></div><div data-v-7ad4cadc><span class="brackets" data-v-7ad4cadc>}</span></div><div data-v-7ad4cadc><span class="word" data-v-7ad4cadc>fn</span> <span class="brackets" data-v-7ad4cadc>()</span></div><br data-v-7ad4cadc><br data-v-7ad4cadc><p data-v-7ad4cadc>利用 遞歸函數 實現 setTimeout 模擬 setInterval</p><p data-v-7ad4cadc>1. 每隔 1 秒輸出當前時間</p>',15),O8=K('<div data-v-7ad4cadc><span class="variable" data-v-7ad4cadc>setTimeout</span><span class="brackets" data-v-7ad4cadc>( </span><span class="function" data-v-7ad4cadc>函數, </span><span class="number" data-v-7ad4cadc>時間 </span> <span class="brackets" data-v-7ad4cadc>)</span></div><br data-v-7ad4cadc><br data-v-7ad4cadc><div data-v-7ad4cadc><span class="function" data-v-7ad4cadc>function </span><span class="word" data-v-7ad4cadc>getTime</span><span class="brackets" data-v-7ad4cadc>(){</span></div><div class="padTwo VSL" data-v-7ad4cadc><span class="word" data-v-7ad4cadc>document.</span><span class="variable" data-v-7ad4cadc>querySelector</span><span class="brackets" data-v-7ad4cadc>(</span><span class="src" data-v-7ad4cadc>&quot;showTimeDiv&quot;</span><span class="brackets" data-v-7ad4cadc>)</span><span class="variable" data-v-7ad4cadc>.innerHTML</span><span class="then" data-v-7ad4cadc>=</span> <span class="then" data-v-7ad4cadc>new </span><span class="brackets" data-v-7ad4cadc>Date()</span><span class="variable" data-v-7ad4cadc>.toLocaleString</span><span class="brackets" data-v-7ad4cadc>()</span><div data-v-7ad4cadc></div></div><div data-v-7ad4cadc><span class="brackets" data-v-7ad4cadc>}</span></div><br data-v-7ad4cadc><br data-v-7ad4cadc><div data-v-7ad4cadc><span class="function" data-v-7ad4cadc>function </span><span class="word" data-v-7ad4cadc>getTime</span><span class="brackets" data-v-7ad4cadc>(){</span></div><div class="padTwo VSL" data-v-7ad4cadc><span class="word" data-v-7ad4cadc>document.</span><span class="variable" data-v-7ad4cadc>querySelector</span><span class="brackets" data-v-7ad4cadc>(</span><span class="src" data-v-7ad4cadc>&quot;.showTimeDiv&quot;</span><span class="brackets" data-v-7ad4cadc>)</span><span class="variable" data-v-7ad4cadc>.innerHTML</span><span class="then" data-v-7ad4cadc>=</span> <span class="then" data-v-7ad4cadc>new </span><span class="brackets" data-v-7ad4cadc>Date()</span><span class="variable" data-v-7ad4cadc>.toLocaleString</span><span class="brackets" data-v-7ad4cadc>()</span><div data-v-7ad4cadc></div><div data-v-7ad4cadc><span class="variable" data-v-7ad4cadc>setTimeout</span><span class="brackets" data-v-7ad4cadc>(</span><span class="variable" data-v-7ad4cadc>getTime,</span><span class="number" data-v-7ad4cadc>1000</span> <span class="brackets" data-v-7ad4cadc>)</span></div></div><div data-v-7ad4cadc><span class="brackets" data-v-7ad4cadc>}</span></div><br data-v-7ad4cadc><br data-v-7ad4cadc><br data-v-7ad4cadc><p data-v-7ad4cadc>for in . for of</p><br data-v-7ad4cadc><div data-v-7ad4cadc><span class="comment" data-v-7ad4cadc>// 1. 循環數組</span></div><div data-v-7ad4cadc><span class="word" data-v-7ad4cadc>cosnt</span> <span class="word" data-v-7ad4cadc>arr</span><span class="then" data-v-7ad4cadc>=</span> <span class="brackets" data-v-7ad4cadc>[</span><span class="src" data-v-7ad4cadc>&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;</span><span class="brackets" data-v-7ad4cadc>]</span></div><div data-v-7ad4cadc><span class="comment" data-v-7ad4cadc>// for...in 輸出 數組成員 在數組中 的索引</span></div><div data-v-7ad4cadc><span class="then" data-v-7ad4cadc>for </span> <span class="brackets" data-v-7ad4cadc>(</span><span class="function" data-v-7ad4cadc>let </span> <span class="word" data-v-7ad4cadc>n </span><span class="function" data-v-7ad4cadc>in </span> <span class="word" data-v-7ad4cadc>arr</span><span class="brackets" data-v-7ad4cadc>){</span></div><div class="padTwo VSL" data-v-7ad4cadc><span class="word" data-v-7ad4cadc>console.log</span><span class="brackets" data-v-7ad4cadc>(</span> <span class="word" data-v-7ad4cadc>n </span><span class="brackets" data-v-7ad4cadc>) </span><span class="comment" data-v-7ad4cadc>// 0 // 1 // 2 // 3</span><div data-v-7ad4cadc></div></div><div data-v-7ad4cadc><span class="brackets" data-v-7ad4cadc>}</span></div><br data-v-7ad4cadc><div data-v-7ad4cadc><span class="comment" data-v-7ad4cadc>// for...of 輸出 數組的成員</span></div><div data-v-7ad4cadc><span class="then" data-v-7ad4cadc>for </span> <span class="brackets" data-v-7ad4cadc>(</span><span class="function" data-v-7ad4cadc>let </span> <span class="word" data-v-7ad4cadc>n </span><span class="function" data-v-7ad4cadc>of </span> <span class="word" data-v-7ad4cadc>arr</span><span class="brackets" data-v-7ad4cadc>){</span></div><div class="padTwo VSL" data-v-7ad4cadc><span class="word" data-v-7ad4cadc>console.log</span><span class="brackets" data-v-7ad4cadc>(</span> <span class="word" data-v-7ad4cadc>n </span><span class="brackets" data-v-7ad4cadc>) </span><span class="comment" data-v-7ad4cadc>// a // b // c // d</span><div data-v-7ad4cadc></div></div><div data-v-7ad4cadc><span class="brackets" data-v-7ad4cadc>}</span></div><br data-v-7ad4cadc><div data-v-7ad4cadc><span class="comment" data-v-7ad4cadc>// 2. 循環物件</span></div><div data-v-7ad4cadc><span class="function" data-v-7ad4cadc>const </span><span class="word" data-v-7ad4cadc>obj</span> <span class="then" data-v-7ad4cadc>=</span><span class="brackets" data-v-7ad4cadc>{</span> <span class="word" data-v-7ad4cadc>n:</span><span class="number" data-v-7ad4cadc>4,</span> <span class="word" data-v-7ad4cadc>m:</span><span class="number" data-v-7ad4cadc>5,</span> <span class="word" data-v-7ad4cadc>k:</span><span class="number" data-v-7ad4cadc>6</span> <span class="brackets" data-v-7ad4cadc>}</span></div><div data-v-7ad4cadc><span class="comment" data-v-7ad4cadc>// for...in </span></div><div data-v-7ad4cadc><span class="then" data-v-7ad4cadc>for </span> <span class="brackets" data-v-7ad4cadc>(</span><span class="function" data-v-7ad4cadc>let </span> <span class="word" data-v-7ad4cadc>n </span><span class="function" data-v-7ad4cadc>in </span> <span class="word" data-v-7ad4cadc>obj</span><span class="brackets" data-v-7ad4cadc>){</span></div><div class="padTwo VSL" data-v-7ad4cadc><span class="comment" data-v-7ad4cadc>// 物件的屬性名</span></div><div class="padTwo VSL" data-v-7ad4cadc><span class="word" data-v-7ad4cadc>console.log</span><span class="brackets" data-v-7ad4cadc>(</span> <span class="word" data-v-7ad4cadc>n</span><span class="brackets" data-v-7ad4cadc>) </span><span class="comment" data-v-7ad4cadc>// n // m // k</span><div data-v-7ad4cadc></div></div><div class="padTwo VSL" data-v-7ad4cadc><span class="comment" data-v-7ad4cadc>// 物件的屬性值</span></div><div class="padTwo VSL" data-v-7ad4cadc><span class="word" data-v-7ad4cadc>console.</span><span class="variable" data-v-7ad4cadc>log</span> <span class="brackets" data-v-7ad4cadc>(</span><span class="word" data-v-7ad4cadc>obj</span> <span class="brackets" data-v-7ad4cadc>[</span><span class="word" data-v-7ad4cadc>n</span> <span class="brackets" data-v-7ad4cadc>])</span><span class="comment" data-v-7ad4cadc>// 4 // 5 // 6</span><div data-v-7ad4cadc></div></div><div data-v-7ad4cadc><span class="brackets" data-v-7ad4cadc>}</span></div><br data-v-7ad4cadc><div data-v-7ad4cadc><span class="comment" data-v-7ad4cadc>// for...of </span></div><div data-v-7ad4cadc><span class="then" data-v-7ad4cadc>for </span> <span class="brackets" data-v-7ad4cadc>(</span><span class="function" data-v-7ad4cadc>let </span> <span class="word" data-v-7ad4cadc>n </span><span class="function" data-v-7ad4cadc>of </span> <span class="word" data-v-7ad4cadc>obj</span><span class="brackets" data-v-7ad4cadc>){</span></div><div class="padTwo VSL" data-v-7ad4cadc><div data-v-7ad4cadc><span class="comment" data-v-7ad4cadc>// 報錯 , 不能循環</span></div><div data-v-7ad4cadc><span class="comment" data-v-7ad4cadc>// 因為沒有 iterator 接口</span></div></div><div data-v-7ad4cadc><span class="brackets" data-v-7ad4cadc>}</span></div><br data-v-7ad4cadc><div data-v-7ad4cadc><span class="comment" data-v-7ad4cadc>// 3. 循環數組物件</span></div><div data-v-7ad4cadc><span class="function" data-v-7ad4cadc>const </span><span class="word" data-v-7ad4cadc>arrObj</span> <span class="then" data-v-7ad4cadc>=</span><span class="brackets" data-v-7ad4cadc>[{</span></div><div class="padTwo VSL" data-v-7ad4cadc><span class="word" data-v-7ad4cadc>name:</span> <span class="src" data-v-7ad4cadc>&quot;wayne&quot;,</span><div data-v-7ad4cadc></div></div><div class="padTwo VSL" data-v-7ad4cadc><span class="word" data-v-7ad4cadc>number:</span> <span class="number" data-v-7ad4cadc>1</span><div data-v-7ad4cadc></div></div><div data-v-7ad4cadc><span class="brackets" data-v-7ad4cadc>}, {</span></div><div class="padTwo VSL" data-v-7ad4cadc><span class="word" data-v-7ad4cadc>name:</span> <span class="src" data-v-7ad4cadc>&quot;jack&quot;,</span><div data-v-7ad4cadc></div></div><div class="padTwo VSL" data-v-7ad4cadc><span class="word" data-v-7ad4cadc>number:</span> <span class="number" data-v-7ad4cadc>9</span><div data-v-7ad4cadc></div></div><div data-v-7ad4cadc><span class="brackets" data-v-7ad4cadc>}]</span></div><br data-v-7ad4cadc><div data-v-7ad4cadc><span class="then" data-v-7ad4cadc>for </span> <span class="brackets" data-v-7ad4cadc>(</span><span class="function" data-v-7ad4cadc>let </span> <span class="word" data-v-7ad4cadc>nObj </span><span class="function" data-v-7ad4cadc>of </span><span class="word" data-v-7ad4cadc>arrObj</span> <span class="brackets" data-v-7ad4cadc>){</span></div><div class="padTwo VSL" data-v-7ad4cadc><span class="word" data-v-7ad4cadc>console.</span><span class="variable" data-v-7ad4cadc>log</span> <span class="brackets" data-v-7ad4cadc>(</span><span class="word" data-v-7ad4cadc>nObj</span> <span class="brackets" data-v-7ad4cadc>)</span><span class="comment" data-v-7ad4cadc>//{name:&quot;wayne&quot;,number:1},{name:&quot;jack&quot;,number:9}</span></div><div class="padTwo VSL" data-v-7ad4cadc><span class="then" data-v-7ad4cadc>for </span> <span class="brackets" data-v-7ad4cadc>(</span><span class="function" data-v-7ad4cadc>let </span> <span class="word" data-v-7ad4cadc>n </span><span class="function" data-v-7ad4cadc>in </span> <span class="word" data-v-7ad4cadc>nObj</span><span class="brackets" data-v-7ad4cadc>){</span><div data-v-7ad4cadc><div class="padTwo VSL" data-v-7ad4cadc><span class="word" data-v-7ad4cadc>console.</span><span class="variable" data-v-7ad4cadc>log</span><span class="brackets" data-v-7ad4cadc>(</span><span class="word" data-v-7ad4cadc>nObj</span><span class="brackets" data-v-7ad4cadc>[</span> <span class="word" data-v-7ad4cadc>n</span><span class="brackets" data-v-7ad4cadc>]) </span><span class="comment" data-v-7ad4cadc>// wayne // 1 // jack // 9</span><div data-v-7ad4cadc></div></div><div data-v-7ad4cadc><span class="brackets" data-v-7ad4cadc>}</span></div></div></div><div data-v-7ad4cadc><span class="brackets" data-v-7ad4cadc>}</span></div><div data-v-7ad4cadc><span class="comment" data-v-7ad4cadc>// for in 循環 物件</span></div><div data-v-7ad4cadc><span class="comment" data-v-7ad4cadc>// for of 循環 數組</span></div><br data-v-7ad4cadc><br data-v-7ad4cadc><p data-v-7ad4cadc>利用 遞歸 函數 實現 深拷貝</p><br data-v-7ad4cadc><div data-v-7ad4cadc><span class="function" data-v-7ad4cadc>const </span><span class="word" data-v-7ad4cadc>obj</span> <span class="then" data-v-7ad4cadc>=</span><span class="brackets" data-v-7ad4cadc>{</span></div><div class="padTwo VSL" data-v-7ad4cadc><span class="word" data-v-7ad4cadc>uname:</span> <span class="src" data-v-7ad4cadc>&quot;wayne&quot;</span></div><div class="padTwo VSL" data-v-7ad4cadc><span class="word" data-v-7ad4cadc>number:</span> <span class="number" data-v-7ad4cadc>1</span><div data-v-7ad4cadc></div></div><div class="brackets" data-v-7ad4cadc>}</div><span class="comment" data-v-7ad4cadc>// 我想把 obj 物件 拷貝給 o</span><div data-v-7ad4cadc><span class="function" data-v-7ad4cadc>const </span> <span class="word" data-v-7ad4cadc>o</span><span class="then" data-v-7ad4cadc>=</span> <span class="brackets" data-v-7ad4cadc>{}</span></div><div data-v-7ad4cadc><span class="comment" data-v-7ad4cadc>思想:</span></div><div data-v-7ad4cadc><span class="comment" data-v-7ad4cadc>拿到物件 利用 遍歷 把屬性(值) 取過來 做 賦值</span></div><div data-v-7ad4cadc><span class="comment" data-v-7ad4cadc>把 obj 的 wayne 賦值給 o 的 uname 完成一次賦值</span></div><div data-v-7ad4cadc><span class="comment" data-v-7ad4cadc>再利用 循環 把 obj 的 1 傳給 o 的 number</span></div><br data-v-7ad4cadc><div data-v-7ad4cadc><span class="number" data-v-7ad4cadc>如果是簡單類型直接放行</span></div><br data-v-7ad4cadc><div class="por" data-v-7ad4cadc><div data-v-7ad4cadc><span class="function" data-v-7ad4cadc>function </span><span class="variable" data-v-7ad4cadc>deepCopy</span><span class="brackets" data-v-7ad4cadc>( </span><span class="word" data-v-7ad4cadc>newObj, oldObj </span><span class="brackets" data-v-7ad4cadc>){</span></div><div class="padTwo VSL" data-v-7ad4cadc><span class="comment" data-v-7ad4cadc>//把舊的值取出來給新的值</span><div data-v-7ad4cadc></div><span class="comment" data-v-7ad4cadc>//先遍歷舊的 , 注意 k 是誰</span></div><div class="padTwo VSL" data-v-7ad4cadc><span class="then" data-v-7ad4cadc>for </span> <span class="brackets" data-v-7ad4cadc>(</span><span class="function" data-v-7ad4cadc>let </span> <span class="word" data-v-7ad4cadc>k </span><span class="function" data-v-7ad4cadc>in </span><span class="word" data-v-7ad4cadc>oldObj </span><span class="brackets" data-v-7ad4cadc>){</span><div data-v-7ad4cadc><div class="padTwo VSL" data-v-7ad4cadc><span class="comment" data-v-7ad4cadc>// k 屬性名 oldObj[ k ] 屬性值</span></div><div class="padTwo VSL" data-v-7ad4cadc><span class="comment" data-v-7ad4cadc>// newObj[ k ] === o.uname</span><div data-v-7ad4cadc></div></div><div class="padTwo VSL" data-v-7ad4cadc><div data-v-7ad4cadc><span class="word" data-v-7ad4cadc>newObj</span><span class="brackets" data-v-7ad4cadc>[ </span><span class="word" data-v-7ad4cadc>k </span><span class="brackets" data-v-7ad4cadc>]</span><span class="then" data-v-7ad4cadc>= </span><span class="word" data-v-7ad4cadc>oldObj</span><span class="brackets" data-v-7ad4cadc>[ </span><span class="word" data-v-7ad4cadc>k </span><span class="brackets" data-v-7ad4cadc>]</span></div></div><div data-v-7ad4cadc><span class="brackets" data-v-7ad4cadc>}</span></div></div></div><div data-v-7ad4cadc><span class="brackets" data-v-7ad4cadc>}</span></div><div data-v-7ad4cadc><span class="variable" data-v-7ad4cadc>deepCopy</span><span class="brackets" data-v-7ad4cadc>(</span> <span class="word" data-v-7ad4cadc>o,obj</span><span class="brackets" data-v-7ad4cadc>)</span><span class="comment" data-v-7ad4cadc>//函數調用,o是新物件,obj是舊物件</span></div><div data-v-7ad4cadc><span class="word" data-v-7ad4cadc>console.</span><span class="variable" data-v-7ad4cadc>log</span><span class="brackets" data-v-7ad4cadc>(</span> <span class="word" data-v-7ad4cadc>o</span><span class="brackets" data-v-7ad4cadc>)</span></div><div data-v-7ad4cadc><span class="word" data-v-7ad4cadc>o.number</span> <span class="then" data-v-7ad4cadc>=</span><span class="word" data-v-7ad4cadc>99</span></div><div data-v-7ad4cadc><span class="word" data-v-7ad4cadc>console.</span><span class="variable" data-v-7ad4cadc>log</span><span class="brackets" data-v-7ad4cadc>(</span> <span class="word" data-v-7ad4cadc>obj</span><span class="brackets" data-v-7ad4cadc>)</span></div><div class="objectDivPoa" data-v-7ad4cadc><div data-v-7ad4cadc><span class="comment" data-v-7ad4cadc>// 2. 循環物件</span></div><div data-v-7ad4cadc><span class="function" data-v-7ad4cadc>const </span><span class="word" data-v-7ad4cadc>obj</span> <span class="then" data-v-7ad4cadc>=</span></div><div data-v-7ad4cadc><span class="brackets" data-v-7ad4cadc>{</span> <span class="word" data-v-7ad4cadc>n:</span><span class="number" data-v-7ad4cadc>4,</span> <span class="word" data-v-7ad4cadc>m:</span><span class="number" data-v-7ad4cadc>5,</span> <span class="word" data-v-7ad4cadc>k:</span><span class="number" data-v-7ad4cadc>6</span> <span class="brackets" data-v-7ad4cadc>}</span></div><div data-v-7ad4cadc><span class="then" data-v-7ad4cadc>for </span><span class="brackets" data-v-7ad4cadc>(</span><span class="function" data-v-7ad4cadc>let </span><span class="word" data-v-7ad4cadc>n </span><span class="function" data-v-7ad4cadc>in </span><span class="word" data-v-7ad4cadc>obj</span><span class="brackets" data-v-7ad4cadc>){</span></div><div class="padTwo VSL" data-v-7ad4cadc><span class="comment" data-v-7ad4cadc>// 物件的屬性名</span></div><div class="padTwo VSL" data-v-7ad4cadc><span class="word" data-v-7ad4cadc>console.log</span><span class="brackets" data-v-7ad4cadc>(</span> <span class="word" data-v-7ad4cadc>n</span><span class="brackets" data-v-7ad4cadc>) </span><div data-v-7ad4cadc></div><span class="comment" data-v-7ad4cadc>// n // m // k</span></div><div class="padTwo VSL" data-v-7ad4cadc><span class="comment" data-v-7ad4cadc>// 物件的屬性值</span></div><div class="padTwo VSL" data-v-7ad4cadc><span class="word" data-v-7ad4cadc>console.</span><span class="variable" data-v-7ad4cadc>log</span><span class="brackets" data-v-7ad4cadc>(</span><span class="word" data-v-7ad4cadc>obj</span><span class="brackets" data-v-7ad4cadc>[</span><span class="word" data-v-7ad4cadc>n</span><span class="brackets" data-v-7ad4cadc>])</span><div data-v-7ad4cadc></div><span class="comment" data-v-7ad4cadc>// 4 // 5 // 6</span></div><div data-v-7ad4cadc><span class="brackets" data-v-7ad4cadc>}</span></div></div><br data-v-7ad4cadc><p data-v-7ad4cadc>Q: oldObj [ k ] 是誰?</p><p data-v-7ad4cadc>舊物件 屬性值</p><br data-v-7ad4cadc><p data-v-7ad4cadc>Q: newObj [ k ] 是誰?</p><p data-v-7ad4cadc>新物件 屬性名</p><br data-v-7ad4cadc><p data-v-7ad4cadc>------------以上做潛拷貝------------</p><div data-v-7ad4cadc><span class="function" data-v-7ad4cadc>const </span><span class="word" data-v-7ad4cadc>obj</span> <span class="then" data-v-7ad4cadc>=</span><span class="brackets" data-v-7ad4cadc>{</span></div><div class="padTwo VSL" data-v-7ad4cadc><span class="word" data-v-7ad4cadc>uname:</span><span class="src" data-v-7ad4cadc>&quot;wayne&quot;</span></div><div class="padTwo VSL" data-v-7ad4cadc><span class="word" data-v-7ad4cadc>number:</span> <span class="number" data-v-7ad4cadc>1</span><div data-v-7ad4cadc></div></div><div class="padTwo VSL" data-v-7ad4cadc><span class="word" data-v-7ad4cadc>hobby:</span><span class="brackets" data-v-7ad4cadc>[</span><span class="src" data-v-7ad4cadc>&quot;跑步&quot;,&quot;足球&quot;</span><span class="brackets" data-v-7ad4cadc>]</span><div data-v-7ad4cadc></div></div><div class="brackets" data-v-7ad4cadc>}</div><br data-v-7ad4cadc><div data-v-7ad4cadc><span class="number" data-v-7ad4cadc>遇到數組 跑步拿出來 放 hobby[0] 足球拿租來 放 hobby[1]</span></div><br data-v-7ad4cadc><div data-v-7ad4cadc><span class="function" data-v-7ad4cadc>function </span><span class="variable" data-v-7ad4cadc>deepCopy</span><span class="brackets" data-v-7ad4cadc>( </span><span class="word" data-v-7ad4cadc>newObj, oldObj </span><span class="brackets" data-v-7ad4cadc>){</span></div><div class="padTwo VSL" data-v-7ad4cadc><span class="comment" data-v-7ad4cadc>//把舊的值取出來給新的值</span><div data-v-7ad4cadc></div><span class="comment" data-v-7ad4cadc>//先遍歷舊的 , 注意 k 是誰</span></div><div class="padTwo VSL" data-v-7ad4cadc><span class="then" data-v-7ad4cadc>for </span> <span class="brackets" data-v-7ad4cadc>(</span><span class="function" data-v-7ad4cadc>let </span> <span class="word" data-v-7ad4cadc>k </span><span class="function" data-v-7ad4cadc>in </span><span class="word" data-v-7ad4cadc>oldObj </span><span class="brackets" data-v-7ad4cadc>){</span><div class="padTwo VSL" data-v-7ad4cadc><div data-v-7ad4cadc><span class="number" data-v-7ad4cadc>//</span><span class="comment" data-v-7ad4cadc> 處理數組問題</span></div><div data-v-7ad4cadc><span class="number" data-v-7ad4cadc>// </span><span class="comment" data-v-7ad4cadc>通過值來判斷</span></div><div data-v-7ad4cadc><span class="then" data-v-7ad4cadc>if</span><span class="brackets" data-v-7ad4cadc>(</span><span class="word" data-v-7ad4cadc>oldObj</span><span class="brackets" data-v-7ad4cadc>[</span> <span class="word" data-v-7ad4cadc>k </span><span class="brackets" data-v-7ad4cadc>] </span><span class="word" data-v-7ad4cadc>intanceof </span><span class="brackets" data-v-7ad4cadc>Array</span><span class="brackets" data-v-7ad4cadc>) { </span><span class="comment" data-v-7ad4cadc>// oldObj [ k ] 屬性值</span></div><div class="padTwo VSL" data-v-7ad4cadc><div data-v-7ad4cadc><span class="number" data-v-7ad4cadc>// </span><span class="comment" data-v-7ad4cadc>我要把hobby數組再次遍歷</span></div><div data-v-7ad4cadc><span class="number" data-v-7ad4cadc>// </span><span class="comment" data-v-7ad4cadc>我要把跑步拿出來放到新物件hobby第1個參數</span></div><div data-v-7ad4cadc><span class="number" data-v-7ad4cadc>// </span><span class="comment" data-v-7ad4cadc>我要把足球拿出來放到新物件hobby第2個參數</span></div><div data-v-7ad4cadc><span class="word" data-v-7ad4cadc>newObj</span><span class="brackets" data-v-7ad4cadc>[ </span><span class="word" data-v-7ad4cadc>k </span><span class="brackets" data-v-7ad4cadc>]</span><span class="then" data-v-7ad4cadc>=</span><span class="brackets" data-v-7ad4cadc>[ ]</span><div data-v-7ad4cadc></div><div data-v-7ad4cadc><span class="number" data-v-7ad4cadc>// </span><span class="comment" data-v-7ad4cadc> newObj[k] 是 hobby</span></div><div data-v-7ad4cadc><span class="number" data-v-7ad4cadc>// </span><span class="comment" data-v-7ad4cadc> 新物件的 hobby 先給他一個空數組</span></div><div data-v-7ad4cadc><span class="number" data-v-7ad4cadc>// </span><span class="comment" data-v-7ad4cadc>然後我在遍歷舊數組把他放進去</span></div><br data-v-7ad4cadc><div data-v-7ad4cadc><span class="number" data-v-7ad4cadc>// </span><span class="comment" data-v-7ad4cadc>deepCopy(newObj[k],[&quot;跑步&quot;,&quot;足球&quot;])</span></div><div class="por" data-v-7ad4cadc><div data-v-7ad4cadc><span class="variable" data-v-7ad4cadc>deepCopy</span><span class="brackets" data-v-7ad4cadc>(</span><span class="word" data-v-7ad4cadc>newObj</span><span class="brackets" data-v-7ad4cadc>[</span><span class="word" data-v-7ad4cadc>k</span><span class="brackets" data-v-7ad4cadc>],</span><span class="word" data-v-7ad4cadc>oldObj</span><span class="brackets" data-v-7ad4cadc>[</span><span class="word" data-v-7ad4cadc>k</span><span class="brackets" data-v-7ad4cadc>])</span></div><div data-v-7ad4cadc><span class="comment" data-v-7ad4cadc>//調用自己遍歷數組時</span></div><div data-v-7ad4cadc><span class="number" data-v-7ad4cadc>// K 變成數組的索引號了</span></div><div class="objectDivPoa" data-v-7ad4cadc><div data-v-7ad4cadc><span class="comment" data-v-7ad4cadc>// 1. 循環數組</span></div><div data-v-7ad4cadc><span class="word" data-v-7ad4cadc>cosnt</span><span class="word" data-v-7ad4cadc>arr</span><span class="then" data-v-7ad4cadc>=</span></div><div data-v-7ad4cadc><span class="brackets" data-v-7ad4cadc>[</span><span class="src" data-v-7ad4cadc>&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;</span><span class="brackets" data-v-7ad4cadc>]</span></div><div data-v-7ad4cadc><span class="comment" data-v-7ad4cadc>//for...in輸出</span></div><div data-v-7ad4cadc><span class="comment" data-v-7ad4cadc>數組成員在</span></div><div data-v-7ad4cadc><span class="comment" data-v-7ad4cadc>數組中的索引</span></div><div data-v-7ad4cadc><span class="then" data-v-7ad4cadc>for </span><span class="brackets" data-v-7ad4cadc>(</span><span class="function" data-v-7ad4cadc>let </span><span class="word" data-v-7ad4cadc>n </span><span class="function" data-v-7ad4cadc>in </span><span class="word" data-v-7ad4cadc>arr</span><span class="brackets" data-v-7ad4cadc>){</span></div><div class="" data-v-7ad4cadc><span class="word" data-v-7ad4cadc>console.log</span><span class="brackets" data-v-7ad4cadc>(</span><span class="word" data-v-7ad4cadc>n </span><span class="brackets" data-v-7ad4cadc>) </span></div><div data-v-7ad4cadc><span class="comment" data-v-7ad4cadc>// 0 // 1 // 2 // 3</span><div data-v-7ad4cadc></div></div><div data-v-7ad4cadc><span class="brackets" data-v-7ad4cadc>}</span></div></div></div></div></div></div><div class="padTwo VSL" data-v-7ad4cadc><span class="brackets" data-v-7ad4cadc>}</span><span class="then" data-v-7ad4cadc>else </span><span class="brackets" data-v-7ad4cadc>{</span><div data-v-7ad4cadc><div data-v-7ad4cadc><div class="padTwo VSL" data-v-7ad4cadc><span class="comment" data-v-7ad4cadc>// k 屬性名 oldObj[ k ] 屬性值</span></div><div class="padTwo VSL" data-v-7ad4cadc><span class="comment" data-v-7ad4cadc>// newObj[ k ] === o.uname</span><div data-v-7ad4cadc></div></div><div class="padTwo VSL" data-v-7ad4cadc><div data-v-7ad4cadc><span class="word" data-v-7ad4cadc>newObj</span><span class="brackets" data-v-7ad4cadc>[ </span><span class="word" data-v-7ad4cadc>k </span><span class="brackets" data-v-7ad4cadc>]</span><span class="then" data-v-7ad4cadc>= </span><span class="word" data-v-7ad4cadc>oldObj</span><span class="brackets" data-v-7ad4cadc>[ </span><span class="word" data-v-7ad4cadc>k </span><span class="brackets" data-v-7ad4cadc>]</span></div></div><div data-v-7ad4cadc><span class="brackets" data-v-7ad4cadc>}</span></div></div></div></div><div data-v-7ad4cadc><span class="brackets" data-v-7ad4cadc>}</span></div></div><div data-v-7ad4cadc><span class="brackets" data-v-7ad4cadc>}</span></div><div data-v-7ad4cadc><span class="variable" data-v-7ad4cadc>deepCopy</span><span class="brackets" data-v-7ad4cadc>(</span> <span class="word" data-v-7ad4cadc>o,obj</span><span class="brackets" data-v-7ad4cadc>)</span><span class="comment" data-v-7ad4cadc>//函數調用,o是新物件,obj是舊物件</span></div><div data-v-7ad4cadc><span class="word" data-v-7ad4cadc>console.</span><span class="variable" data-v-7ad4cadc>log</span><span class="brackets" data-v-7ad4cadc>(</span> <span class="word" data-v-7ad4cadc>o</span><span class="brackets" data-v-7ad4cadc>)</span></div><div data-v-7ad4cadc><span class="word" data-v-7ad4cadc>o.number</span> <span class="then" data-v-7ad4cadc>=</span><span class="word" data-v-7ad4cadc>99</span></div><div data-v-7ad4cadc><span class="word" data-v-7ad4cadc>console.</span><span class="variable" data-v-7ad4cadc>log</span><span class="brackets" data-v-7ad4cadc>(</span> <span class="word" data-v-7ad4cadc>obj</span><span class="brackets" data-v-7ad4cadc>)</span></div><br data-v-7ad4cadc><div data-v-7ad4cadc><span class="number" data-v-7ad4cadc>處理遇到物件</span></div><br data-v-7ad4cadc><div data-v-7ad4cadc><span class="function" data-v-7ad4cadc>const </span><span class="word" data-v-7ad4cadc>obj</span> <span class="then" data-v-7ad4cadc>=</span><span class="brackets" data-v-7ad4cadc>{</span></div><div class="padTwo VSL" data-v-7ad4cadc><span class="word" data-v-7ad4cadc>uname:</span><span class="src" data-v-7ad4cadc>&quot;wayne&quot;</span></div><div class="padTwo VSL" data-v-7ad4cadc><span class="word" data-v-7ad4cadc>number:</span> <span class="number" data-v-7ad4cadc>1</span><div data-v-7ad4cadc></div></div><div class="padTwo VSL" data-v-7ad4cadc><span class="word" data-v-7ad4cadc>hobby:</span><span class="brackets" data-v-7ad4cadc>[</span><span class="src" data-v-7ad4cadc>&quot;跑步&quot;,&quot;足球&quot;</span><span class="brackets" data-v-7ad4cadc>]</span><div data-v-7ad4cadc></div></div><div class="padTwo VSL" data-v-7ad4cadc><span class="word" data-v-7ad4cadc>family:</span><span class="brackets" data-v-7ad4cadc>{</span><div data-v-7ad4cadc><div class="padTwo VSL" data-v-7ad4cadc><span class="word" data-v-7ad4cadc>baby:</span><span class="src" data-v-7ad4cadc>&quot;小neo&quot;</span><div data-v-7ad4cadc></div></div><div data-v-7ad4cadc><span class="brackets" data-v-7ad4cadc>}</span></div></div></div><div class="brackets" data-v-7ad4cadc>}</div><br data-v-7ad4cadc><div data-v-7ad4cadc><span class="function" data-v-7ad4cadc>function </span><span class="variable" data-v-7ad4cadc>deepCopy</span><span class="brackets" data-v-7ad4cadc>( </span><span class="word" data-v-7ad4cadc>newObj, oldObj </span><span class="brackets" data-v-7ad4cadc>){</span></div><div class="padTwo VSL" data-v-7ad4cadc><span class="comment" data-v-7ad4cadc>//把舊的值取出來給新的值</span><div data-v-7ad4cadc></div><span class="comment" data-v-7ad4cadc>//先遍歷舊的 , 注意 k 是誰</span></div><div class="padTwo VSL" data-v-7ad4cadc><span class="then" data-v-7ad4cadc>for </span> <span class="brackets" data-v-7ad4cadc>(</span><span class="function" data-v-7ad4cadc>let </span> <span class="word" data-v-7ad4cadc>k </span><span class="function" data-v-7ad4cadc>in </span><span class="word" data-v-7ad4cadc>oldObj </span><span class="brackets" data-v-7ad4cadc>){</span><div class="padTwo VSL" data-v-7ad4cadc><div data-v-7ad4cadc><span class="comment" data-v-7ad4cadc>// 處理數組問題</span></div><div data-v-7ad4cadc><span class="comment" data-v-7ad4cadc>// 通過值來判斷</span></div><div data-v-7ad4cadc><span class="then" data-v-7ad4cadc>if</span><span class="brackets" data-v-7ad4cadc>(</span><span class="word" data-v-7ad4cadc>oldObj</span><span class="brackets" data-v-7ad4cadc>[</span> <span class="word" data-v-7ad4cadc>k </span><span class="brackets" data-v-7ad4cadc>] </span><span class="word" data-v-7ad4cadc>intanceof </span><span class="brackets" data-v-7ad4cadc>Array</span><span class="brackets" data-v-7ad4cadc>) { </span><span class="comment" data-v-7ad4cadc>// oldObj [ k ] 屬性值</span></div><div class="padTwo VSL" data-v-7ad4cadc><div data-v-7ad4cadc><span class="comment" data-v-7ad4cadc>// 我要把hobby數組再次遍歷</span></div><div data-v-7ad4cadc><span class="comment" data-v-7ad4cadc>// 我要把跑步拿出來放到新物件hobby第1個參數</span></div><div data-v-7ad4cadc><span class="comment" data-v-7ad4cadc>// 我要把足球拿出來放到新物件hobby第2個參數</span></div><div data-v-7ad4cadc><span class="word" data-v-7ad4cadc>newObj</span><span class="brackets" data-v-7ad4cadc>[ </span><span class="word" data-v-7ad4cadc>k </span><span class="brackets" data-v-7ad4cadc>]</span><span class="then" data-v-7ad4cadc>=</span><span class="brackets" data-v-7ad4cadc>[ ]</span><div data-v-7ad4cadc></div><div data-v-7ad4cadc><span class="comment" data-v-7ad4cadc>// newObj[k] 是 hobby</span></div><div data-v-7ad4cadc><span class="comment" data-v-7ad4cadc> // 新物件的 hobby 先給他一個空數組</span></div><div data-v-7ad4cadc><span class="comment" data-v-7ad4cadc>// 然後我在遍歷舊數組把他放進去</span></div><div data-v-7ad4cadc><span class="comment" data-v-7ad4cadc>// deepCopy(newObj[k],[&quot;跑步&quot;,&quot;足球&quot;])</span></div><div data-v-7ad4cadc><span class="variable" data-v-7ad4cadc>deepCopy</span><span class="brackets" data-v-7ad4cadc>(</span><span class="word" data-v-7ad4cadc>newObj</span><span class="brackets" data-v-7ad4cadc>[</span><span class="word" data-v-7ad4cadc>k</span><span class="brackets" data-v-7ad4cadc>],</span><span class="word" data-v-7ad4cadc>oldObj</span><span class="brackets" data-v-7ad4cadc>[</span><span class="word" data-v-7ad4cadc>k</span><span class="brackets" data-v-7ad4cadc>])</span></div><div data-v-7ad4cadc><span class="comment" data-v-7ad4cadc>//調用自己遍歷數組時</span></div><div data-v-7ad4cadc><span class="comment" data-v-7ad4cadc>// K 變成數組的索引號了</span></div></div></div></div><div class="padTwo VSL" data-v-7ad4cadc><div data-v-7ad4cadc><span class="brackets" data-v-7ad4cadc>} </span><span class="then" data-v-7ad4cadc>else if</span><span class="brackets" data-v-7ad4cadc>(</span><span class="word" data-v-7ad4cadc>oldObj</span><span class="brackets" data-v-7ad4cadc>[</span> <span class="word" data-v-7ad4cadc>k </span><span class="brackets" data-v-7ad4cadc>] </span><span class="word" data-v-7ad4cadc>intanceof </span><span class="brackets" data-v-7ad4cadc>Object</span><span class="brackets" data-v-7ad4cadc>) { </span><span class="comment" data-v-7ad4cadc>// oldObj [ k ] 屬性值</span></div><div class="padTwo VSL" data-v-7ad4cadc><br data-v-7ad4cadc><div data-v-7ad4cadc><span class="word" data-v-7ad4cadc>newObj</span><span class="brackets" data-v-7ad4cadc>[ </span><span class="word" data-v-7ad4cadc>k </span><span class="brackets" data-v-7ad4cadc>]</span><span class="then" data-v-7ad4cadc>=</span><span class="brackets" data-v-7ad4cadc>{ }</span><span class="cor36 padTwo" data-v-7ad4cadc> ← . . . . . ↑ . . . 改這兩個 </span><div data-v-7ad4cadc></div><br data-v-7ad4cadc><div data-v-7ad4cadc><span class="variable" data-v-7ad4cadc>deepCopy</span><span class="brackets" data-v-7ad4cadc>(</span><span class="word" data-v-7ad4cadc>newObj</span><span class="brackets" data-v-7ad4cadc>[</span><span class="word" data-v-7ad4cadc>k</span><span class="brackets" data-v-7ad4cadc>],</span><span class="word" data-v-7ad4cadc>oldObj</span><span class="brackets" data-v-7ad4cadc>[</span><span class="word" data-v-7ad4cadc>k</span><span class="brackets" data-v-7ad4cadc>])</span></div></div></div></div><div class="padTwo VSL" data-v-7ad4cadc><span class="brackets" data-v-7ad4cadc>}</span><span class="then" data-v-7ad4cadc>else </span><span class="brackets" data-v-7ad4cadc>{</span><div data-v-7ad4cadc><div data-v-7ad4cadc><div class="padTwo VSL" data-v-7ad4cadc><span class="comment" data-v-7ad4cadc>// k 屬性名 oldObj[ k ] 屬性值</span></div><div class="padTwo VSL" data-v-7ad4cadc><span class="comment" data-v-7ad4cadc>// newObj[ k ] === o.uname</span><div data-v-7ad4cadc></div></div><div class="padTwo VSL" data-v-7ad4cadc><div data-v-7ad4cadc><span class="word" data-v-7ad4cadc>newObj</span><span class="brackets" data-v-7ad4cadc>[ </span><span class="word" data-v-7ad4cadc>k </span><span class="brackets" data-v-7ad4cadc>]</span><span class="then" data-v-7ad4cadc>= </span><span class="word" data-v-7ad4cadc>oldObj</span><span class="brackets" data-v-7ad4cadc>[ </span><span class="word" data-v-7ad4cadc>k </span><span class="brackets" data-v-7ad4cadc>]</span></div></div><div data-v-7ad4cadc><span class="brackets" data-v-7ad4cadc>}</span></div></div></div></div><div data-v-7ad4cadc><span class="brackets" data-v-7ad4cadc>}</span></div></div><div data-v-7ad4cadc><span class="brackets" data-v-7ad4cadc>}</span></div><br data-v-7ad4cadc><p data-v-7ad4cadc># 一定要 先數組 再物件</p><p data-v-7ad4cadc>因為 數組 屬於物件 他就把 數組當物件</p><br data-v-7ad4cadc><div data-v-7ad4cadc><span class="word" data-v-7ad4cadc>console.</span><span class="variable" data-v-7ad4cadc>log</span><span class="brackets" data-v-7ad4cadc>([</span><span class="number" data-v-7ad4cadc>1, 2, 3</span><span class="brackets" data-v-7ad4cadc>]</span><span class="word" data-v-7ad4cadc>instanceof</span><span class="brackets" data-v-7ad4cadc>Object</span><span class="brackets" data-v-7ad4cadc>) </span><span class="comment" data-v-7ad4cadc>// true</span></div><div class="comment" data-v-7ad4cadc>// 陣列 被當成 物件</div></div>',76),N8=K('<p class="fz28 cor36" data-v-7ad4cadc># 你怎麼實現 深拷貝?</p><p class="fz28" data-v-7ad4cadc>深拷貝 是做到 拷貝出來的 新物件 不會影響 舊物件</p><p class="fz28" data-v-7ad4cadc>想實現 深拷貝 函數遞歸</p><p class="fz28" data-v-7ad4cadc>當我在 普通拷貝 直接賦值就好了</p><p class="fz28" data-v-7ad4cadc>當我遇到 陣列 我再次調用 這個函數</p><p class="fz28" data-v-7ad4cadc>當我遇到物件 我再次調用遞歸</p><p class="fz28" data-v-7ad4cadc>先 陣列 後 物件</p><div id="threetips003" class="articleCardTitle cor36 fz34" data-v-7ad4cadc> 7.3 lodash </div><p class="fz28" data-v-7ad4cadc> 庫 . 把一些常用的 方法 封裝好 . 只需要把庫引用進來 . 調用一個函數就可以用了 </p><a href="https://www.lodashjs.com/docs/lodash.cloneDeep#_clonedeepvalue" class="fz28" data-v-7ad4cadc>@ lodash深拷貝</a><div class="bgcVS" data-v-7ad4cadc><div data-v-7ad4cadc><span class="then" data-v-7ad4cadc>＜</span> <span class="number" data-v-7ad4cadc>script </span><span class="src" data-v-7ad4cadc>src</span> <span class="then" data-v-7ad4cadc>=</span><span class="src" data-v-7ad4cadc>&quot;lodash.js&quot;</span><span class="then" data-v-7ad4cadc>&gt;＜/ </span><span class="number" data-v-7ad4cadc>script</span> <span class="then" data-v-7ad4cadc>&gt;</span></div><div data-v-7ad4cadc><span class="function" data-v-7ad4cadc>const </span><span class="word" data-v-7ad4cadc>obj</span> <span class="then" data-v-7ad4cadc>=</span><span class="brackets" data-v-7ad4cadc>{</span></div><div class="padTwo VSL" data-v-7ad4cadc><span class="word" data-v-7ad4cadc>uname:</span><span class="src" data-v-7ad4cadc>&quot;wayne&quot;</span></div><div class="padTwo VSL" data-v-7ad4cadc><span class="word" data-v-7ad4cadc>number:</span> <span class="number" data-v-7ad4cadc>1</span><div data-v-7ad4cadc></div></div><div class="padTwo VSL" data-v-7ad4cadc><span class="word" data-v-7ad4cadc>hobby:</span><span class="brackets" data-v-7ad4cadc>[</span><span class="src" data-v-7ad4cadc>&quot;跑步&quot;,&quot;足球&quot;</span><span class="brackets" data-v-7ad4cadc>]</span><div data-v-7ad4cadc></div></div><div class="padTwo VSL" data-v-7ad4cadc><span class="word" data-v-7ad4cadc>family:</span><span class="brackets" data-v-7ad4cadc>{</span><div data-v-7ad4cadc><div class="padTwo VSL" data-v-7ad4cadc><span class="word" data-v-7ad4cadc>baby:</span><span class="src" data-v-7ad4cadc>&quot;小neo&quot;</span><div data-v-7ad4cadc></div></div><div data-v-7ad4cadc><span class="brackets" data-v-7ad4cadc>}</span></div></div></div><div data-v-7ad4cadc><span class="brackets" data-v-7ad4cadc>}</span></div><div data-v-7ad4cadc><span class="function" data-v-7ad4cadc>const </span><span class="brackets" data-v-7ad4cadc>o </span> <span class="then" data-v-7ad4cadc>= </span><span class="word" data-v-7ad4cadc>_.</span><span class="variable" data-v-7ad4cadc>cloneDeep</span><span class="brackets" data-v-7ad4cadc>( obj )</span></div><div data-v-7ad4cadc><span class="comment" data-v-7ad4cadc>// _.cloneDeep 有返回值 , 我 const o 接過來</span></div></div><div id="threetips004" class="articleCardTitle cor36 fz34" data-v-7ad4cadc> 7.4 JSON 實現 深拷貝 </div><div class="bgcVS" data-v-7ad4cadc><div data-v-7ad4cadc><span class="function" data-v-7ad4cadc>const </span><span class="word" data-v-7ad4cadc>obj</span> <span class="then" data-v-7ad4cadc>=</span><span class="brackets" data-v-7ad4cadc>{</span></div><div class="padTwo VSL" data-v-7ad4cadc><span class="word" data-v-7ad4cadc>uname:</span><span class="src" data-v-7ad4cadc>&quot;wayne&quot;</span></div><div class="padTwo VSL" data-v-7ad4cadc><span class="word" data-v-7ad4cadc>number:</span> <span class="number" data-v-7ad4cadc>1</span><div data-v-7ad4cadc></div></div><div class="padTwo VSL" data-v-7ad4cadc><span class="word" data-v-7ad4cadc>hobby:</span><span class="brackets" data-v-7ad4cadc>[</span><span class="src" data-v-7ad4cadc>&quot;跑步&quot;,&quot;足球&quot;</span><span class="brackets" data-v-7ad4cadc>]</span><div data-v-7ad4cadc></div></div><div class="padTwo VSL" data-v-7ad4cadc><span class="word" data-v-7ad4cadc>family:</span><span class="brackets" data-v-7ad4cadc>{</span><div data-v-7ad4cadc><div class="padTwo VSL" data-v-7ad4cadc><span class="word" data-v-7ad4cadc>baby:</span><span class="src" data-v-7ad4cadc>&quot;小neo&quot;</span><div data-v-7ad4cadc></div></div><div data-v-7ad4cadc><span class="brackets" data-v-7ad4cadc>}</span></div></div></div><div data-v-7ad4cadc><span class="brackets" data-v-7ad4cadc>}</span></div><div data-v-7ad4cadc><span class="function" data-v-7ad4cadc>const </span><span class="brackets" data-v-7ad4cadc>o </span> <span class="then" data-v-7ad4cadc>= </span><span class="word" data-v-7ad4cadc>_.</span><span class="variable" data-v-7ad4cadc>cloneDeep</span><span class="brackets" data-v-7ad4cadc>( obj )</span></div><div data-v-7ad4cadc><span class="comment" data-v-7ad4cadc>// _.cloneDeep 有返回值 , 我 const o 接過來</span></div><div data-v-7ad4cadc><span class="comment" data-v-7ad4cadc>//把物件轉成JSON字串</span></div><div data-v-7ad4cadc><span class="brackets" data-v-7ad4cadc>JSON</span><span class="variable" data-v-7ad4cadc>.stringify</span><span class="brackets" data-v-7ad4cadc>(</span> <span class="word" data-v-7ad4cadc>obj</span><span class="brackets" data-v-7ad4cadc>)</span><span class="comment" data-v-7ad4cadc>// 得到字串</span></div><div data-v-7ad4cadc><span class="word" data-v-7ad4cadc>console.</span><span class="variable" data-v-7ad4cadc>log</span> <span class="brackets" data-v-7ad4cadc>(</span><span class="brackets" data-v-7ad4cadc>JSON</span><span class="variable" data-v-7ad4cadc>.stringify</span><span class="brackets" data-v-7ad4cadc>(</span> <span class="word" data-v-7ad4cadc>obj</span><span class="brackets" data-v-7ad4cadc>))</span></div><div data-v-7ad4cadc><span class="brackets" data-v-7ad4cadc>JSON</span><span class="variable" data-v-7ad4cadc>.parse</span><span class="brackets" data-v-7ad4cadc>(</span><span class="brackets" data-v-7ad4cadc>JSON</span><span class="variable" data-v-7ad4cadc>.stringify</span><span class="brackets" data-v-7ad4cadc>(</span> <span class="word" data-v-7ad4cadc>obj</span><span class="brackets" data-v-7ad4cadc>))</span></div><div data-v-7ad4cadc><span class="function" data-v-7ad4cadc>const </span> <span class="word" data-v-7ad4cadc>o</span><span class="then" data-v-7ad4cadc>=</span> <span class="brackets" data-v-7ad4cadc>JSON</span><span class="variable" data-v-7ad4cadc>.parse</span><span class="brackets" data-v-7ad4cadc>(</span><span class="brackets" data-v-7ad4cadc>JSON</span><span class="variable" data-v-7ad4cadc>.stringify</span><span class="brackets" data-v-7ad4cadc>(</span> <span class="word" data-v-7ad4cadc>obj</span><span class="brackets" data-v-7ad4cadc>))</span></div></div><div id="threetips005" class="articleCardTitle cor36 fz34" data-v-7ad4cadc> 7.5 異常處理 </div><div id="" class="articleCardTitle cor36 fz34" data-v-7ad4cadc>throw 拋異常</div><div class="bgcVS" data-v-7ad4cadc><p data-v-7ad4cadc>JavaScript 中的驚嘆號（&quot;!&quot;）操作符</p><br data-v-7ad4cadc><p data-v-7ad4cadc>1. 邏輯 NOT 運算符：</p><br data-v-7ad4cadc><p data-v-7ad4cadc> 驚嘆號（&quot;!&quot;）在 JavaScript 中被用作邏輯 NOT 運算符。它會將其後的表達式的真值反轉，即如果表達式是真，則 NOT 運算後為假；如果表達式是假，則 NOT 運算後為真。 </p><br data-v-7ad4cadc><div data-v-7ad4cadc><span class="function" data-v-7ad4cadc>let </span><span class="word" data-v-7ad4cadc>isTrue</span> <span class="then" data-v-7ad4cadc>=</span><span class="number" data-v-7ad4cadc>true</span></div><div data-v-7ad4cadc><span class="function" data-v-7ad4cadc>let </span><span class="word" data-v-7ad4cadc>isFalse</span> <span class="then" data-v-7ad4cadc>=</span><span class="number" data-v-7ad4cadc>!isTrue</span><span class="comment" data-v-7ad4cadc>//isFalse將會是false</span></div><br data-v-7ad4cadc><p data-v-7ad4cadc>1.1</p><br data-v-7ad4cadc><p data-v-7ad4cadc> 如果您的變數 x 沒有被定義，那麼在使用 ! 來取得布林相反值時，會得到 true，因為 undefined 被轉換為布林值時為 false，而取其相反值則是 true。 </p><br data-v-7ad4cadc><div data-v-7ad4cadc><span class="function" data-v-7ad4cadc>var </span> <span class="word" data-v-7ad4cadc>y</span><span class="comment" data-v-7ad4cadc>//y是undefined</span></div><div data-v-7ad4cadc><span class="function" data-v-7ad4cadc>var </span><span class="word" data-v-7ad4cadc>oppositeValue</span><span class="then" data-v-7ad4cadc>=</span> <span class="number" data-v-7ad4cadc>!y</span><span class="comment" data-v-7ad4cadc>//oppositeValue將是true</span></div><br data-v-7ad4cadc><p data-v-7ad4cadc>2. 轉換為布林值：</p><br data-v-7ad4cadc><p data-v-7ad4cadc> 在一些情況下，驚嘆號也可以將值轉換為布林值。將任何值進行這樣的轉換後，非空字串將轉換為 true，數字 0 轉換為 false，以及其他值按通常的 JavaScript 轉換規則進行轉換。 </p><br data-v-7ad4cadc><div data-v-7ad4cadc><span class="function" data-v-7ad4cadc>let </span><span class="word" data-v-7ad4cadc>value</span> <span class="then" data-v-7ad4cadc>=</span><span class="src" data-v-7ad4cadc>&quot;Hello&quot;</span></div><div data-v-7ad4cadc><span class="function" data-v-7ad4cadc>let </span><span class="word" data-v-7ad4cadc>convertedValue</span><span class="then" data-v-7ad4cadc>=</span> <span class="number" data-v-7ad4cadc>!!value</span><span class="comment" data-v-7ad4cadc>//convertedValue將會是true，因為非空字串轉換為true</span></div><br data-v-7ad4cadc><br data-v-7ad4cadc><br data-v-7ad4cadc><div data-v-7ad4cadc><span class="function" data-v-7ad4cadc>function </span><span class="word" data-v-7ad4cadc>fn</span> <span class="brackets" data-v-7ad4cadc>(</span><span class="word" data-v-7ad4cadc>x,y</span> <span class="brackets" data-v-7ad4cadc>){</span></div><div class="padTwo VSL" data-v-7ad4cadc><div data-v-7ad4cadc><span class="comment" data-v-7ad4cadc>//如果變數x沒有被定義,那麼在使用!來取得布林相反值時,得到true,因為undefined被轉換為布林值時為false,而取其相反值則是true。</span></div><span class="then" data-v-7ad4cadc>if</span> <span class="brackets" data-v-7ad4cadc>(</span><span class="number" data-v-7ad4cadc>!x</span> <span class="then" data-v-7ad4cadc>|| </span><span class="number" data-v-7ad4cadc>!y</span> <span class="brackets" data-v-7ad4cadc>){</span><div data-v-7ad4cadc><div class="padTwo VSL" data-v-7ad4cadc><div data-v-7ad4cadc><span class="comment" data-v-7ad4cadc>//當undefined時,為true</span></div><span class="function" data-v-7ad4cadc>throw </span><span class="brackets" data-v-7ad4cadc>(</span><span class="src" data-v-7ad4cadc>&quot;沒有參數傳遞進來&quot;</span><span class="brackets" data-v-7ad4cadc>)</span><div data-v-7ad4cadc><span class="comment" data-v-7ad4cadc>//發現不return值了,一扔錯誤,直接中斷</span></div><span class="function" data-v-7ad4cadc>throw </span><span class="then" data-v-7ad4cadc>new </span><span class="word" data-v-7ad4cadc>Error </span><span class="brackets" data-v-7ad4cadc>(</span><span class="src" data-v-7ad4cadc>&quot;沒有參數傳遞進來&quot;</span><span class="brackets" data-v-7ad4cadc>)</span><div data-v-7ad4cadc><span class="comment" data-v-7ad4cadc>//一般用這個,效果一樣,且會標註第幾行</span></div><div data-v-7ad4cadc></div></div><div data-v-7ad4cadc><span class="brackets" data-v-7ad4cadc>}</span></div></div></div><div class="padTwo VSL" data-v-7ad4cadc><span class="then" data-v-7ad4cadc>return </span> <span class="word" data-v-7ad4cadc>x</span><span class="then" data-v-7ad4cadc>+</span> <span class="word" data-v-7ad4cadc>y</span><div data-v-7ad4cadc><span class="comment" data-v-7ad4cadc>// 我沒有傳值 x+y 是 undefined + undefined = NaN</span></div><div data-v-7ad4cadc></div></div><div data-v-7ad4cadc><span class="brackets" data-v-7ad4cadc>}</span></div></div><p class="fz28" data-v-7ad4cadc>總結</p><p class="fz28" data-v-7ad4cadc>1. throw 後面跟異常訊息,程式也會中止執行</p><p class="fz28" data-v-7ad4cadc>2. Error 對象配合 throw 可設置詳細錯誤訊息</p><div id="" class="articleCardTitle cor36 fz34" data-v-7ad4cadc>try catch</div><div class="bgcVS" data-v-7ad4cadc><div data-v-7ad4cadc><span class="then" data-v-7ad4cadc>＜</span> <span class="number" data-v-7ad4cadc>p</span><span class="then" data-v-7ad4cadc>&gt;</span> <span class="word" data-v-7ad4cadc>test</span><span class="then" data-v-7ad4cadc>＜/</span> <span class="number" data-v-7ad4cadc>p</span><span class="then" data-v-7ad4cadc>&gt;</span></div><br data-v-7ad4cadc><div data-v-7ad4cadc><span class="function" data-v-7ad4cadc>function </span><span class="word" data-v-7ad4cadc>fn</span> <span class="brackets" data-v-7ad4cadc>(){</span></div><div class="padTwo VSL" data-v-7ad4cadc><span class="variable" data-v-7ad4cadc>try</span> <span class="brackets" data-v-7ad4cadc>{</span><div data-v-7ad4cadc><div class="padTwo VSL" data-v-7ad4cadc><span class="comment" data-v-7ad4cadc>//try寫可能發送錯誤的代碼</span></div><div class="padTwo VSL" data-v-7ad4cadc><div data-v-7ad4cadc><span class="function" data-v-7ad4cadc>const </span><span class="word" data-v-7ad4cadc>p</span> <span class="then" data-v-7ad4cadc>=</span><span class="word" data-v-7ad4cadc>document</span><span class="variable" data-v-7ad4cadc>.querySelector</span><span class="brackets" data-v-7ad4cadc>(</span><span class="src" data-v-7ad4cadc>&quot;.p&quot;</span><span class="brackets" data-v-7ad4cadc>) </span><span class="comment" data-v-7ad4cadc>//往錯誤的catch(){}走</span></div><div data-v-7ad4cadc><span class="comment" data-v-7ad4cadc>//const p = document.querySelector(&quot;p&quot;) // 正確往下走</span></div><div data-v-7ad4cadc><span class="word" data-v-7ad4cadc>p.style.color</span><span class="then" data-v-7ad4cadc>=</span> <span class="src" data-v-7ad4cadc>&quot;red&quot;</span></div><div data-v-7ad4cadc></div></div></div><div data-v-7ad4cadc><span class="brackets" data-v-7ad4cadc>}</span><span class="variable" data-v-7ad4cadc>catch</span><span class="brackets" data-v-7ad4cadc>(</span> <span class="word" data-v-7ad4cadc>err</span><span class="brackets" data-v-7ad4cadc>){ </span><span class="comment" data-v-7ad4cadc>// 注意catch後面() , ()裡面是形參 寫什麼都行</span><div data-v-7ad4cadc><div class="padTwo VSL" data-v-7ad4cadc><div data-v-7ad4cadc><span class="comment" data-v-7ad4cadc>// 這邊拋錯後 依然會繼續執行</span></div><div data-v-7ad4cadc><span class="comment" data-v-7ad4cadc>// 攔截錯誤,提示瀏覽器提供的錯誤訊息,但不中斷程式執行</span></div><div data-v-7ad4cadc><span class="word" data-v-7ad4cadc>console.</span><span class="variable" data-v-7ad4cadc>log</span><span class="brackets" data-v-7ad4cadc>(</span><span class="word" data-v-7ad4cadc>err</span><span class="word" data-v-7ad4cadc>.message</span><span class="brackets" data-v-7ad4cadc>)</span></div><span class="comment" data-v-7ad4cadc>//err是我的形參可以自訂,message是固定的屬性</span><div data-v-7ad4cadc><span class="function" data-v-7ad4cadc>throw </span><span class="then" data-v-7ad4cadc>new </span><span class="brackets" data-v-7ad4cadc>Error</span><span class="brackets" data-v-7ad4cadc>(</span><span class="src" data-v-7ad4cadc>&quot;選擇器選取錯誤&quot;</span><span class="brackets" data-v-7ad4cadc>)</span></div><div data-v-7ad4cadc><span class="comment" data-v-7ad4cadc>//需要加return中斷程式</span></div><div data-v-7ad4cadc><span class="comment" data-v-7ad4cadc>// return </span></div><div data-v-7ad4cadc></div></div><div data-v-7ad4cadc><span class="brackets" data-v-7ad4cadc>}</span></div><div data-v-7ad4cadc><span class="function" data-v-7ad4cadc>finally</span><span class="brackets" data-v-7ad4cadc>{</span></div><div class="padTwo VSL" data-v-7ad4cadc><span class="comment" data-v-7ad4cadc>//不管程式對不對,一定會執行的代碼</span><div data-v-7ad4cadc><span class="word" data-v-7ad4cadc>console.</span><span class="variable" data-v-7ad4cadc>log</span><span class="brackets" data-v-7ad4cadc>(</span><span class="src" data-v-7ad4cadc>&quot;比如可用在獲取資料的轉圈&quot;</span><span class="brackets" data-v-7ad4cadc>)</span></div><div data-v-7ad4cadc></div></div><div data-v-7ad4cadc><span class="brackets" data-v-7ad4cadc>}</span></div><div data-v-7ad4cadc><span class="word" data-v-7ad4cadc>console.</span><span class="variable" data-v-7ad4cadc>log</span><span class="brackets" data-v-7ad4cadc>(</span><span class="number" data-v-7ad4cadc>11</span><span class="brackets" data-v-7ad4cadc>)</span></div></div></div></div><div data-v-7ad4cadc><span class="brackets" data-v-7ad4cadc>}</span></div><div data-v-7ad4cadc><span class="word" data-v-7ad4cadc>fn</span> <span class="brackets" data-v-7ad4cadc>()</span></div></div><p class="fz28" data-v-7ad4cadc>小結</p><p class="fz28" data-v-7ad4cadc>1. try...catch用於捕獲錯誤訊息</p><p class="fz28" data-v-7ad4cadc>2. 將預估可能發生錯誤的代碼寫在 try</p><p class="fz28" data-v-7ad4cadc>3. 如果 try 錯誤 執行 catch 並獲取錯誤訊息</p><p class="fz28" data-v-7ad4cadc>4. finally 不管怎樣 都執行</p><div id="" class="articleCardTitle cor36 fz34" data-v-7ad4cadc>debugger</div><p class="fz28" data-v-7ad4cadc>代碼特別長 一打斷點 就自動跳過來了</p><p class="fz28" data-v-7ad4cadc>目的</p><p class="fz28" data-v-7ad4cadc>在運行時 可直接跳到這邊 不用再開sorce...</p><div class="bgcVS" data-v-7ad4cadc><div data-v-7ad4cadc><span class="function" data-v-7ad4cadc>function </span><span class="variable" data-v-7ad4cadc>deepCopy</span><span class="brackets" data-v-7ad4cadc>( </span><span class="word" data-v-7ad4cadc>newObj, oldObj </span><span class="brackets" data-v-7ad4cadc>){</span></div><div class="padTwo VSL" data-v-7ad4cadc><span class="number" data-v-7ad4cadc>debugger</span></div><div class="padTwo VSL" data-v-7ad4cadc><span class="then" data-v-7ad4cadc>for </span> <span class="brackets" data-v-7ad4cadc>(</span><span class="function" data-v-7ad4cadc>let </span> <span class="word" data-v-7ad4cadc>k </span><span class="function" data-v-7ad4cadc>in </span><span class="word" data-v-7ad4cadc>oldObj </span><span class="brackets" data-v-7ad4cadc>){</span><div data-v-7ad4cadc><div class="padTwo VSL" data-v-7ad4cadc><div data-v-7ad4cadc><span class="word" data-v-7ad4cadc>newObj</span><span class="brackets" data-v-7ad4cadc>[ </span><span class="word" data-v-7ad4cadc>k </span><span class="brackets" data-v-7ad4cadc>]</span><span class="then" data-v-7ad4cadc>= </span><span class="word" data-v-7ad4cadc>oldObj</span><span class="brackets" data-v-7ad4cadc>[ </span><span class="word" data-v-7ad4cadc>k </span><span class="brackets" data-v-7ad4cadc>]</span></div></div><div data-v-7ad4cadc><span class="brackets" data-v-7ad4cadc>}</span></div></div></div><div data-v-7ad4cadc><span class="brackets" data-v-7ad4cadc>}</span></div></div><div id="threetips006" class="articleCardTitle cor36 fz34" data-v-7ad4cadc> 7.6 this 指向 </div><br data-v-7ad4cadc><p class="fz28" data-v-7ad4cadc>方法 中 this 指向 調用方法 的 對象</p><br data-v-7ad4cadc><p class="fz28" data-v-7ad4cadc>全局環境下 指向 全局對象</p><br data-v-7ad4cadc><p class="fz28" data-v-7ad4cadc>全局 函數中的 this 指向 全局對象</p><br data-v-7ad4cadc><p class="fz28" data-v-7ad4cadc>內部函數 的 this 指向 全局對象</p><br data-v-7ad4cadc><p class="fz28" data-v-7ad4cadc>事件中的 this 指向 觸發事件 的 DOM 對象</p><br data-v-7ad4cadc><p class="fz28" data-v-7ad4cadc>構造函數中 的 this 指向 new 創建的對象</p><br data-v-7ad4cadc><p class="fz28" data-v-7ad4cadc> 箭頭函數中 的 this 指向 定義 函數 上下文的 this (在哪裡定義指向誰) </p><br data-v-7ad4cadc><br data-v-7ad4cadc><table class="fz30" data-v-7ad4cadc><tr data-v-7ad4cadc><th data-v-7ad4cadc><div class="pad20" data-v-7ad4cadc>調用方式</div></th><th data-v-7ad4cadc><div class="pad20" data-v-7ad4cadc>示例</div></th><th data-v-7ad4cadc><div class="pad20" data-v-7ad4cadc>函數中this指向</div></th></tr><tr data-v-7ad4cadc><td data-v-7ad4cadc><div class="pad20" data-v-7ad4cadc>通過new調用</div></td><td data-v-7ad4cadc><div class="pad20" data-v-7ad4cadc>mew method()</div></td><td data-v-7ad4cadc><div class="pad20" data-v-7ad4cadc>新物件</div></td></tr><tr data-v-7ad4cadc><td data-v-7ad4cadc><div class="pad20" data-v-7ad4cadc>直接調用</div></td><td data-v-7ad4cadc><div class="pad20" data-v-7ad4cadc>method()</div></td><td data-v-7ad4cadc><div class="pad20" data-v-7ad4cadc>全局對象window</div></td></tr><tr data-v-7ad4cadc><td data-v-7ad4cadc><div class="pad20" data-v-7ad4cadc>通過物件調用</div></td><td data-v-7ad4cadc><div class="pad20" data-v-7ad4cadc>obj.method()</div></td><td data-v-7ad4cadc><div class="pad20" data-v-7ad4cadc>前面的物件</div></td></tr><tr data-v-7ad4cadc><td data-v-7ad4cadc><div class="pad20" data-v-7ad4cadc>call.apply.bind</div></td><td data-v-7ad4cadc><div class="pad20" data-v-7ad4cadc>method.call(ctx)</div></td><td data-v-7ad4cadc><div class="pad20" data-v-7ad4cadc>第一個參數</div></td></tr></table><br data-v-7ad4cadc><br data-v-7ad4cadc><p class="fz28" data-v-7ad4cadc>1. 普通函數 this</p><p class="fz40" data-v-7ad4cadc>誰調用 this的值 指向誰</p><div class="bgcVS" data-v-7ad4cadc><div data-v-7ad4cadc><span class="word" data-v-7ad4cadc>console.</span><span class="variable" data-v-7ad4cadc>log</span> <span class="brackets" data-v-7ad4cadc>(</span><span class="then" data-v-7ad4cadc>this</span> <span class="brackets" data-v-7ad4cadc>)</span><span class="comment" data-v-7ad4cadc>//window</span></div><br data-v-7ad4cadc><div data-v-7ad4cadc><span class="function" data-v-7ad4cadc>function </span><span class="word" data-v-7ad4cadc>fn</span> <span class="brackets" data-v-7ad4cadc>(){</span></div><div class="padTwo VSL" data-v-7ad4cadc><span class="word" data-v-7ad4cadc>console.</span><span class="variable" data-v-7ad4cadc>log</span> <span class="brackets" data-v-7ad4cadc>(</span><span class="then" data-v-7ad4cadc>this</span> <span class="brackets" data-v-7ad4cadc>)</span><span class="comment" data-v-7ad4cadc>//window</span><div data-v-7ad4cadc></div></div><div data-v-7ad4cadc><span class="brackets" data-v-7ad4cadc>}</span></div><div data-v-7ad4cadc><span class="comment" data-v-7ad4cadc>//是 window.fn() // window 調用的指向 window</span></div><br data-v-7ad4cadc><div data-v-7ad4cadc><span class="variable" data-v-7ad4cadc>setTimeout</span><span class="brackets" data-v-7ad4cadc>(</span><span class="function" data-v-7ad4cadc>function </span><span class="brackets" data-v-7ad4cadc>(){</span></div><div class="padTwo VSL" data-v-7ad4cadc><span class="word" data-v-7ad4cadc>console.</span><span class="variable" data-v-7ad4cadc>log</span> <span class="brackets" data-v-7ad4cadc>(</span><span class="then" data-v-7ad4cadc>this</span> <span class="brackets" data-v-7ad4cadc>)</span><span class="comment" data-v-7ad4cadc>//window</span><div data-v-7ad4cadc></div></div><div data-v-7ad4cadc><span class="brackets" data-v-7ad4cadc>},</span> <span class="number" data-v-7ad4cadc>1000</span><span class="brackets" data-v-7ad4cadc>)</span></div><div data-v-7ad4cadc><span class="word" data-v-7ad4cadc>window</span><span class="variable" data-v-7ad4cadc>.setTimeout</span><span class="brackets" data-v-7ad4cadc>(</span><span class="function" data-v-7ad4cadc>function </span><span class="brackets" data-v-7ad4cadc>(){})</span></div><br data-v-7ad4cadc><br data-v-7ad4cadc><div data-v-7ad4cadc><span class="src" data-v-7ad4cadc>&quot;use strict&quot;</span><span class="comment" data-v-7ad4cadc>//語法要嚴格按照正常語法來寫</span></div><div data-v-7ad4cadc><span class="comment" data-v-7ad4cadc>//所有變量要先聲明在賦值</span></div><div data-v-7ad4cadc><span class="comment" data-v-7ad4cadc>//函數不允許聲明多個一樣的</span></div><br data-v-7ad4cadc><br data-v-7ad4cadc><div data-v-7ad4cadc><span class="src" data-v-7ad4cadc>&quot;use strict&quot;</span></div><div data-v-7ad4cadc><span class="function" data-v-7ad4cadc>function </span><span class="word" data-v-7ad4cadc>fn</span> <span class="brackets" data-v-7ad4cadc>(){</span></div><div class="padTwo VSL" data-v-7ad4cadc><span class="word" data-v-7ad4cadc>console.</span><span class="variable" data-v-7ad4cadc>log</span> <span class="brackets" data-v-7ad4cadc>(</span><span class="then" data-v-7ad4cadc>this</span> <span class="brackets" data-v-7ad4cadc>)</span><span class="comment" data-v-7ad4cadc>//undefined</span><div data-v-7ad4cadc></div></div><div data-v-7ad4cadc><span class="brackets" data-v-7ad4cadc>}</span></div><br data-v-7ad4cadc><br data-v-7ad4cadc><div data-v-7ad4cadc><span class="then" data-v-7ad4cadc>＜</span> <span class="number" data-v-7ad4cadc>button</span><span class="then" data-v-7ad4cadc>&gt;</span> <span class="word" data-v-7ad4cadc>點擊</span><span class="then" data-v-7ad4cadc>＜/</span> <span class="number" data-v-7ad4cadc>button</span><span class="then" data-v-7ad4cadc>&gt;</span></div><div data-v-7ad4cadc><span class="word" data-v-7ad4cadc>document</span><span class="variable" data-v-7ad4cadc>.querySelector</span><span class="brackets" data-v-7ad4cadc>(</span> <span class="src" data-v-7ad4cadc>&quot;button&quot;</span><span class="brackets" data-v-7ad4cadc>)</span><span class="variable" data-v-7ad4cadc>.addEventListener</span><span class="brackets" data-v-7ad4cadc>(</span> <span class="src" data-v-7ad4cadc>&quot;click&quot;,</span><span class="function" data-v-7ad4cadc>function </span><span class="brackets" data-v-7ad4cadc>(){</span></div><div class="pTwo VSL" data-v-7ad4cadc><span class="word" data-v-7ad4cadc>console.</span><span class="variable" data-v-7ad4cadc>log</span> <span class="brackets" data-v-7ad4cadc>(</span><span class="then" data-v-7ad4cadc>this</span> <span class="brackets" data-v-7ad4cadc>)</span><span class="comment" data-v-7ad4cadc>//button , button 調用了我這個函數</span></div><div data-v-7ad4cadc><span class="brackets" data-v-7ad4cadc>})</span></div><br data-v-7ad4cadc><p data-v-7ad4cadc>onclick dom 事件中的 this 指向 dom 對象</p><div data-v-7ad4cadc><span class="function" data-v-7ad4cadc>const </span><span class="word" data-v-7ad4cadc>btn</span> <span class="then" data-v-7ad4cadc>=</span><span class="word" data-v-7ad4cadc>document</span><span class="variable" data-v-7ad4cadc>.querySelector</span><span class="brackets" data-v-7ad4cadc>(</span> <span class="src" data-v-7ad4cadc>&quot;button&quot;</span><span class="brackets" data-v-7ad4cadc>)</span></div><div data-v-7ad4cadc><span class="word" data-v-7ad4cadc>btn</span> <span class="word" data-v-7ad4cadc>.onclick</span><span class="then" data-v-7ad4cadc>=</span><span class="function" data-v-7ad4cadc>function </span><span class="brackets" data-v-7ad4cadc>(){</span></div><div class="padTwo VSL" data-v-7ad4cadc><span class="word" data-v-7ad4cadc>console</span><span class="variable" data-v-7ad4cadc>.log</span><span class="brackets" data-v-7ad4cadc>(</span> <span class="then" data-v-7ad4cadc>this</span><span class="brackets" data-v-7ad4cadc>)</span><div data-v-7ad4cadc></div></div><div data-v-7ad4cadc><span class="brackets" data-v-7ad4cadc>}</span></div><br data-v-7ad4cadc><br data-v-7ad4cadc><div data-v-7ad4cadc><span class="function" data-v-7ad4cadc>const </span><span class="word" data-v-7ad4cadc>obj</span> <span class="then" data-v-7ad4cadc>=</span><span class="brackets" data-v-7ad4cadc>{</span></div><div class="padTwo VSL" data-v-7ad4cadc><span class="word" data-v-7ad4cadc>sayHi:</span><span class="function" data-v-7ad4cadc>function </span><span class="brackets" data-v-7ad4cadc>(){</span><div data-v-7ad4cadc><div class="pTwo VSL" data-v-7ad4cadc><span class="word" data-v-7ad4cadc>console.</span><span class="variable" data-v-7ad4cadc>log</span><span class="brackets" data-v-7ad4cadc>(</span><span class="then" data-v-7ad4cadc>this</span><span class="brackets" data-v-7ad4cadc>)</span><span class="comment" data-v-7ad4cadc>//指向obj</span></div></div><div data-v-7ad4cadc><span class="brackets" data-v-7ad4cadc>}</span></div></div><div data-v-7ad4cadc><span class="brackets" data-v-7ad4cadc>}</span></div><div data-v-7ad4cadc><span class="word" data-v-7ad4cadc>obj.sayHi</span><span class="brackets" data-v-7ad4cadc>()</span></div></div><p class="fz28" data-v-7ad4cadc>2. 箭頭函數 this</p><p class="fz40" data-v-7ad4cadc>箭頭函數 this 根據上下文 , 去上一級作用域找 this</p><br data-v-7ad4cadc><p class="fz28" data-v-7ad4cadc> 1.箭頭函數 默認 綁定 外層 this 的值, 所以在 箭頭函數中 this 的值和 外層的 this 是一樣的 </p><p class="fz28" data-v-7ad4cadc>2.箭頭函數的的 this 引用的就是最近作用域中的 this</p><p class="fz28" data-v-7ad4cadc> 3.向外層作用域中 , 一層一層查找 this , 直到有 this 的定義 </p><div class="bgcVS" data-v-7ad4cadc><div data-v-7ad4cadc><span class="function" data-v-7ad4cadc>const </span><span class="word" data-v-7ad4cadc>user</span> <span class="then" data-v-7ad4cadc>=</span><span class="brackets" data-v-7ad4cadc>{</span></div><div class="padTwo VSL" data-v-7ad4cadc><div class="bor pad20 disInl" data-v-7ad4cadc><span class="word" data-v-7ad4cadc>name:</span> <span class="src" data-v-7ad4cadc>&quot;wayne&quot;</span><div data-v-7ad4cadc><span class="comment" data-v-7ad4cadc>//箭頭函數中的this為</span></div><div data-v-7ad4cadc><span class="comment" data-v-7ad4cadc>//函數聲明環境中的this一致</span></div><div data-v-7ad4cadc><span class="word" data-v-7ad4cadc>sayHi:</span><span class="brackets" data-v-7ad4cadc>()</span><span class="function" data-v-7ad4cadc>=&gt;</span><span class="brackets" data-v-7ad4cadc>{</span></div><div data-v-7ad4cadc><div class="padTwo VSL" data-v-7ad4cadc><span class="word" data-v-7ad4cadc>console.</span><span class="variable" data-v-7ad4cadc>log</span><span class="brackets" data-v-7ad4cadc>(</span><span class="then" data-v-7ad4cadc>this</span><span class="brackets" data-v-7ad4cadc>)</span><span class="comment" data-v-7ad4cadc>//箭頭函數裡面沒有this</span><div data-v-7ad4cadc><span class="comment" data-v-7ad4cadc>//他綁定最近一級的this(這個物件裡面的this)</span></div><div data-v-7ad4cadc><span class="comment" data-v-7ad4cadc>//物件的this是誰?</span></div><div data-v-7ad4cadc><span class="comment" data-v-7ad4cadc>//函數有this</span></div><div data-v-7ad4cadc><span class="comment" data-v-7ad4cadc>//而物件的this是外層 //window</span></div><div data-v-7ad4cadc></div></div><div data-v-7ad4cadc><span class="brackets" data-v-7ad4cadc>},</span></div></div></div></div><div data-v-7ad4cadc><span class="brackets" data-v-7ad4cadc>}</span></div><br data-v-7ad4cadc><br data-v-7ad4cadc><div data-v-7ad4cadc><span class="function" data-v-7ad4cadc>const </span><span class="word" data-v-7ad4cadc>btn</span> <span class="then" data-v-7ad4cadc>=</span><span class="word" data-v-7ad4cadc>document.querySelector</span><span class="brackets" data-v-7ad4cadc>(</span> <span class="src" data-v-7ad4cadc>&quot;.btn&quot;</span><span class="brackets" data-v-7ad4cadc>)</span></div><span class="comment" data-v-7ad4cadc>//普通函數指DOM對象</span><div data-v-7ad4cadc><span class="word" data-v-7ad4cadc>btn.addEventListener</span><span class="brackets" data-v-7ad4cadc>(</span> <span class="src" data-v-7ad4cadc>&quot;click&quot;,</span><span class="function" data-v-7ad4cadc>function</span><span class="brackets" data-v-7ad4cadc>(){</span></div><div class="pTwo" data-v-7ad4cadc><span class="word" data-v-7ad4cadc>console.</span><span class="variable" data-v-7ad4cadc>log</span> <span class="brackets" data-v-7ad4cadc>(</span><span class="then" data-v-7ad4cadc>this</span> <span class="brackets" data-v-7ad4cadc>)</span><span class="comment" data-v-7ad4cadc>// btn</span></div><div class="brackets" data-v-7ad4cadc>}</div><div data-v-7ad4cadc><span class="comment" data-v-7ad4cadc>// 箭頭函數 此時 this 指向 window</span></div><div data-v-7ad4cadc><span class="word" data-v-7ad4cadc>btn.addEventListener</span><span class="brackets" data-v-7ad4cadc>(</span> <span class="src" data-v-7ad4cadc>&quot;click&quot;,</span><span class="brackets" data-v-7ad4cadc>()</span><span class="function" data-v-7ad4cadc>=&gt; </span><span class="brackets" data-v-7ad4cadc>{</span></div><div class="pTwo" data-v-7ad4cadc><span class="word" data-v-7ad4cadc>console.</span><span class="variable" data-v-7ad4cadc>log</span> <span class="brackets" data-v-7ad4cadc>(</span><span class="then" data-v-7ad4cadc>this</span> <span class="brackets" data-v-7ad4cadc>)</span><span class="comment" data-v-7ad4cadc>// window</span></div><div class="brackets" data-v-7ad4cadc>})</div><br data-v-7ad4cadc><br data-v-7ad4cadc><p data-v-7ad4cadc>原型對象時</p><br data-v-7ad4cadc><div data-v-7ad4cadc><span class="function" data-v-7ad4cadc>function </span><span class="brackets" data-v-7ad4cadc>(){}</span></div><div data-v-7ad4cadc><span class="word" data-v-7ad4cadc>Person.prototype.sayHi</span><span class="then" data-v-7ad4cadc>=</span> <span class="brackets" data-v-7ad4cadc>()</span><span class="function" data-v-7ad4cadc>=&gt;</span> <span class="brackets" data-v-7ad4cadc>{</span></div><div class="padTwo VSL" data-v-7ad4cadc><span class="word" data-v-7ad4cadc>console.</span><span class="variable" data-v-7ad4cadc>log</span> <span class="brackets" data-v-7ad4cadc>(</span><span class="src" data-v-7ad4cadc>&quot;hi&quot;</span> <span class="brackets" data-v-7ad4cadc>)</span><div data-v-7ad4cadc><span class="word" data-v-7ad4cadc>console.</span><span class="variable" data-v-7ad4cadc>log</span><span class="brackets" data-v-7ad4cadc>(</span> <span class="then" data-v-7ad4cadc>this</span><span class="brackets" data-v-7ad4cadc>)</span><span class="comment" data-v-7ad4cadc>//window</span></div><div data-v-7ad4cadc></div></div><div data-v-7ad4cadc><span class="brackets" data-v-7ad4cadc>}</span></div><div data-v-7ad4cadc><span class="comment" data-v-7ad4cadc>//構造函數&amp;原型對象裡的this都指向實例</span></div><div data-v-7ad4cadc><span class="function" data-v-7ad4cadc>const </span> <span class="word" data-v-7ad4cadc>p1</span><span class="then" data-v-7ad4cadc>=</span> <span class="then" data-v-7ad4cadc>new </span><span class="brackets" data-v-7ad4cadc>Person()</span><span class="comment" data-v-7ad4cadc>//this不指向p1了</span></div></div><p class="fz28" data-v-7ad4cadc>總結</p><p class="fz28" data-v-7ad4cadc>1. 函數內不存在 this , 沿用上一級的</p><p class="fz28" data-v-7ad4cadc>2. 不適用 . . &gt; 構造函數 . 原型函數 . dom 事件函數</p><p class="fz28" data-v-7ad4cadc>3. 適用 . . &gt; 需要用上層 this 的地方</p><div id="threetips007" class="articleCardTitle cor36 fz34" data-v-7ad4cadc> 7.7 改變 this --- call() </div><p class="fz28" data-v-7ad4cadc>call 是一個方法 , 是函數的方法</p><br data-v-7ad4cadc><p class="fz28" data-v-7ad4cadc> 使用 call 方法 <span class="spo cor36" data-v-7ad4cadc> 調用函數 </span> , 同時 指定 被調用 函數中的 <span class="spo cor36" data-v-7ad4cadc> this 的值 </span></p><div class="bgcVS" data-v-7ad4cadc><div data-v-7ad4cadc><span class="function" data-v-7ad4cadc>const </span><span class="word" data-v-7ad4cadc>obj</span> <span class="then" data-v-7ad4cadc>=</span><span class="brackets" data-v-7ad4cadc>{</span> <span class="word" data-v-7ad4cadc>name:</span><span class="src" data-v-7ad4cadc>&quot;wayne&quot;</span> <span class="brackets" data-v-7ad4cadc>}</span></div><div data-v-7ad4cadc><span class="function" data-v-7ad4cadc>function </span><span class="word" data-v-7ad4cadc>fn</span> <span class="brackets" data-v-7ad4cadc>(){</span></div><div class="padTwo VSL" data-v-7ad4cadc><span class="word" data-v-7ad4cadc>console.</span><span class="variable" data-v-7ad4cadc>log</span> <span class="brackets" data-v-7ad4cadc>(</span><span class="then" data-v-7ad4cadc>this</span> <span class="brackets" data-v-7ad4cadc>)</span><span class="comment" data-v-7ad4cadc>//window</span><div data-v-7ad4cadc></div></div><div data-v-7ad4cadc><span class="brackets" data-v-7ad4cadc>}</span></div><div data-v-7ad4cadc><span class="comment" data-v-7ad4cadc>//1.調用函數</span></div><div data-v-7ad4cadc><span class="comment" data-v-7ad4cadc>//2.改變this指向</span></div><div data-v-7ad4cadc><span class="word" data-v-7ad4cadc>fn</span> <span class="brackets" data-v-7ad4cadc>()</span></div><div data-v-7ad4cadc><span class="word" data-v-7ad4cadc>fn</span> <span class="variable" data-v-7ad4cadc>.call</span><span class="brackets" data-v-7ad4cadc>()</span><span class="comment" data-v-7ad4cadc>//只調用</span></div><div data-v-7ad4cadc><span class="word" data-v-7ad4cadc>fn</span> <span class="variable" data-v-7ad4cadc>.call</span><span class="brackets" data-v-7ad4cadc>(</span> <span class="word" data-v-7ad4cadc>obj</span><span class="brackets" data-v-7ad4cadc>)</span><span class="comment" data-v-7ad4cadc>//打印了obj//代表改變了this指向</span></div><div data-v-7ad4cadc><span class="comment" data-v-7ad4cadc>// 3. 返回值: 本身在調用函數, 所以返回值就是函數的返回值</span></div><br data-v-7ad4cadc><div data-v-7ad4cadc><span class="function" data-v-7ad4cadc>function </span><span class="word" data-v-7ad4cadc>fn</span><span class="brackets" data-v-7ad4cadc>(</span> <span class="word" data-v-7ad4cadc>x,y</span><span class="brackets" data-v-7ad4cadc>){</span></div><div class="padTwo VSL" data-v-7ad4cadc><span class="word" data-v-7ad4cadc>console.</span><span class="variable" data-v-7ad4cadc>log</span> <span class="brackets" data-v-7ad4cadc>(</span><span class="then" data-v-7ad4cadc>this</span> <span class="brackets" data-v-7ad4cadc>)</span><span class="comment" data-v-7ad4cadc>//window</span><div data-v-7ad4cadc><span class="word" data-v-7ad4cadc>console.</span><span class="variable" data-v-7ad4cadc>log</span><span class="brackets" data-v-7ad4cadc>(</span> <span class="word" data-v-7ad4cadc>x</span><span class="then" data-v-7ad4cadc>+</span> <span class="word" data-v-7ad4cadc>y</span><span class="brackets" data-v-7ad4cadc>)</span> <span class="comment" data-v-7ad4cadc>//3</span></div><div data-v-7ad4cadc></div></div><div data-v-7ad4cadc><span class="brackets" data-v-7ad4cadc>}</span></div><div data-v-7ad4cadc><span class="word" data-v-7ad4cadc>fn</span> <span class="variable" data-v-7ad4cadc>.call</span><span class="brackets" data-v-7ad4cadc>(</span> <span class="word" data-v-7ad4cadc>obj,</span><span class="number" data-v-7ad4cadc>1,2</span> <span class="brackets" data-v-7ad4cadc>)</span></div></div><div id="threetips008" class="articleCardTitle cor36 fz34" data-v-7ad4cadc> 7.8 改變 this --- apply() </div><p class="fz28" data-v-7ad4cadc> 使用 apply 方法 <span class="spo cor36" data-v-7ad4cadc> 調用函數 </span> , 同時 指定 被調用 函數中的 <span class="spo cor36" data-v-7ad4cadc> this 的值 </span></p><div class="bgcVS" data-v-7ad4cadc><div data-v-7ad4cadc><span class="function" data-v-7ad4cadc>const </span><span class="word" data-v-7ad4cadc>obj</span> <span class="then" data-v-7ad4cadc>=</span><span class="brackets" data-v-7ad4cadc>{</span> <span class="word" data-v-7ad4cadc>name:</span><span class="src" data-v-7ad4cadc>&quot;wayne&quot;</span> <span class="brackets" data-v-7ad4cadc>}</span></div><div data-v-7ad4cadc><span class="function" data-v-7ad4cadc>function </span><span class="word" data-v-7ad4cadc>fn</span> <span class="brackets" data-v-7ad4cadc>(){</span></div><div class="padTwo VSL" data-v-7ad4cadc><span class="word" data-v-7ad4cadc>console.</span><span class="variable" data-v-7ad4cadc>log</span> <span class="brackets" data-v-7ad4cadc>(</span><span class="then" data-v-7ad4cadc>this</span> <span class="brackets" data-v-7ad4cadc>)</span><span class="comment" data-v-7ad4cadc>//window</span><div data-v-7ad4cadc></div></div><div data-v-7ad4cadc><span class="brackets" data-v-7ad4cadc>}</span></div><div data-v-7ad4cadc><span class="comment" data-v-7ad4cadc>//1.調用函數</span></div><div data-v-7ad4cadc><span class="comment" data-v-7ad4cadc>//2.改變this指向</span></div><div data-v-7ad4cadc><span class="word" data-v-7ad4cadc>fn</span> <span class="variable" data-v-7ad4cadc>.apply</span><span class="brackets" data-v-7ad4cadc>(</span> <span class="word" data-v-7ad4cadc>obj</span><span class="brackets" data-v-7ad4cadc>)</span></div><br data-v-7ad4cadc><div data-v-7ad4cadc><span class="function" data-v-7ad4cadc>function </span><span class="word" data-v-7ad4cadc>fn</span> <span class="brackets" data-v-7ad4cadc>(</span><span class="word" data-v-7ad4cadc>x,y</span> <span class="brackets" data-v-7ad4cadc>){</span></div><div class="padTwo VSL" data-v-7ad4cadc><span class="word" data-v-7ad4cadc>console.</span><span class="variable" data-v-7ad4cadc>log</span> <span class="brackets" data-v-7ad4cadc>(</span><span class="then" data-v-7ad4cadc>this</span> <span class="brackets" data-v-7ad4cadc>)</span><span class="comment" data-v-7ad4cadc>//window</span><div data-v-7ad4cadc><span class="word" data-v-7ad4cadc>console.</span><span class="variable" data-v-7ad4cadc>log</span><span class="brackets" data-v-7ad4cadc>(</span> <span class="word" data-v-7ad4cadc>x+y</span><span class="brackets" data-v-7ad4cadc>)</span></div><div data-v-7ad4cadc></div></div><div data-v-7ad4cadc><span class="brackets" data-v-7ad4cadc>}</span></div><div data-v-7ad4cadc><span class="word" data-v-7ad4cadc>fn</span> <span class="word" data-v-7ad4cadc>.</span><span class="variable" data-v-7ad4cadc>apply</span><span class="brackets" data-v-7ad4cadc>(</span> <span class="word" data-v-7ad4cadc>obj, </span><span class="brackets" data-v-7ad4cadc>[</span> <span class="number" data-v-7ad4cadc>1, 2 </span><span class="brackets" data-v-7ad4cadc>])</span></div><div data-v-7ad4cadc><span class="comment" data-v-7ad4cadc>// 3. 返回值: 本身在調用函數, 所以返回值就是函數的返回值</span></div><div data-v-7ad4cadc><span class="comment" data-v-7ad4cadc>//使用場景:用Math.max()求數組最大值</span></div><br data-v-7ad4cadc><div data-v-7ad4cadc><span class="function" data-v-7ad4cadc>const </span><span class="variable" data-v-7ad4cadc>max</span> <span class="then" data-v-7ad4cadc>=</span><span class="word" data-v-7ad4cadc>Math</span><span class="variable" data-v-7ad4cadc>.max</span><span class="brackets" data-v-7ad4cadc>(</span> <span class="number" data-v-7ad4cadc>1,2,3</span><span class="brackets" data-v-7ad4cadc>)</span></div><div data-v-7ad4cadc><span class="word" data-v-7ad4cadc>console.</span><span class="variable" data-v-7ad4cadc>log</span> <span class="brackets" data-v-7ad4cadc>(</span><span class="variable" data-v-7ad4cadc>max</span> <span class="brackets" data-v-7ad4cadc>)</span></div><br data-v-7ad4cadc><div data-v-7ad4cadc><span class="function" data-v-7ad4cadc>const </span><span class="variable" data-v-7ad4cadc>max</span> <span class="then" data-v-7ad4cadc>=</span><span class="word" data-v-7ad4cadc>Math</span><span class="variable" data-v-7ad4cadc>.max.apply</span><span class="brackets" data-v-7ad4cadc>(</span> <span class="word" data-v-7ad4cadc>Math,</span><span class="brackets" data-v-7ad4cadc>[</span> <span class="number" data-v-7ad4cadc>1,2,3</span><span class="brackets" data-v-7ad4cadc>])</span></div><div data-v-7ad4cadc><span class="word" data-v-7ad4cadc>console.</span><span class="variable" data-v-7ad4cadc>log</span> <span class="brackets" data-v-7ad4cadc>(</span><span class="variable" data-v-7ad4cadc>max</span> <span class="brackets" data-v-7ad4cadc>)</span></div><br data-v-7ad4cadc><div data-v-7ad4cadc><span class="function" data-v-7ad4cadc>const </span><span class="word" data-v-7ad4cadc>arr</span> <span class="then" data-v-7ad4cadc>=</span><span class="brackets" data-v-7ad4cadc>[</span><span class="number" data-v-7ad4cadc>100,44,77</span><span class="brackets" data-v-7ad4cadc>]</span></div><div data-v-7ad4cadc><span class="function" data-v-7ad4cadc>const </span><span class="variable" data-v-7ad4cadc>max</span> <span class="then" data-v-7ad4cadc>=</span><span class="word" data-v-7ad4cadc>Math</span><span class="variable" data-v-7ad4cadc>.max.apply</span><span class="brackets" data-v-7ad4cadc>(</span><span class="word" data-v-7ad4cadc>Math,arr</span> <span class="brackets" data-v-7ad4cadc>)</span></div><div data-v-7ad4cadc><span class="function" data-v-7ad4cadc>const </span><span class="variable" data-v-7ad4cadc>min</span> <span class="then" data-v-7ad4cadc>=</span><span class="word" data-v-7ad4cadc>Math</span><span class="variable" data-v-7ad4cadc>.max.apply</span><span class="brackets" data-v-7ad4cadc>(</span><span class="word" data-v-7ad4cadc>Math,arr</span> <span class="brackets" data-v-7ad4cadc>)</span></div><div data-v-7ad4cadc><span class="function" data-v-7ad4cadc>const </span><span class="variable" data-v-7ad4cadc>min</span> <span class="then" data-v-7ad4cadc>=</span><span class="word" data-v-7ad4cadc>Math</span><span class="variable" data-v-7ad4cadc>.max.apply</span><span class="brackets" data-v-7ad4cadc>(</span><span class="word" data-v-7ad4cadc>null,arr</span> <span class="brackets" data-v-7ad4cadc>)</span><span class="comment" data-v-7ad4cadc>//this指向用null不改變也可以</span></div><div data-v-7ad4cadc><span class="word" data-v-7ad4cadc>console.</span><span class="variable" data-v-7ad4cadc>log</span> <span class="brackets" data-v-7ad4cadc>(</span><span class="variable" data-v-7ad4cadc>max</span> <span class="brackets" data-v-7ad4cadc>)</span></div><br data-v-7ad4cadc><br data-v-7ad4cadc><p data-v-7ad4cadc>求數組最大值</p><p data-v-7ad4cadc>1.for循環</p><p data-v-7ad4cadc>2.apply(要綁定的this,[數組])</p><p data-v-7ad4cadc>3.console.log(Math.max(...arr))</p></div><p class="fz28" data-v-7ad4cadc>call &amp; apply</p><p class="fz28" data-v-7ad4cadc>都能調用函數 , 改變 this 指向</p><p class="fz28" data-v-7ad4cadc>差在 參數不一樣 , apply 傳遞的 必須是 數組</p><div id="threetips009" class="articleCardTitle cor36 fz34" data-v-7ad4cadc> 7.9 改變 this --- bind() </div><div class="bgcVS" data-v-7ad4cadc><div data-v-7ad4cadc><span class="function" data-v-7ad4cadc>const </span><span class="word" data-v-7ad4cadc>obj</span> <span class="then" data-v-7ad4cadc>=</span><span class="brackets" data-v-7ad4cadc>{</span> <span class="word" data-v-7ad4cadc>name:</span><span class="src" data-v-7ad4cadc>&quot;wayne&quot;</span> <span class="brackets" data-v-7ad4cadc>}</span></div><div data-v-7ad4cadc><span class="function" data-v-7ad4cadc>function </span><span class="word" data-v-7ad4cadc>fn</span> <span class="brackets" data-v-7ad4cadc>(){</span></div><div class="padTwo VSL" data-v-7ad4cadc><span class="word" data-v-7ad4cadc>console.</span><span class="variable" data-v-7ad4cadc>log</span> <span class="brackets" data-v-7ad4cadc>(</span><span class="then" data-v-7ad4cadc>this</span> <span class="brackets" data-v-7ad4cadc>)</span><div data-v-7ad4cadc></div></div><div data-v-7ad4cadc><span class="brackets" data-v-7ad4cadc>}</span></div><div data-v-7ad4cadc><span class="comment" data-v-7ad4cadc>//1.bind不調用函數</span></div><div data-v-7ad4cadc><span class="comment" data-v-7ad4cadc>//2.能改變this指向</span></div><div data-v-7ad4cadc><span class="word" data-v-7ad4cadc>fn</span><span class="variable" data-v-7ad4cadc>.bind</span><span class="brackets" data-v-7ad4cadc>(</span> <span class="word" data-v-7ad4cadc>obj</span><span class="brackets" data-v-7ad4cadc>)</span></div><div data-v-7ad4cadc><span class="comment" data-v-7ad4cadc>//3.返回值:返回 已改變this後 的函數</span></div><div data-v-7ad4cadc><span class="function" data-v-7ad4cadc>const </span><span class="word" data-v-7ad4cadc>fun</span> <span class="then" data-v-7ad4cadc>=</span><span class="word" data-v-7ad4cadc>fn</span><span class="variable" data-v-7ad4cadc>.bind</span><span class="brackets" data-v-7ad4cadc>(</span> <span class="word" data-v-7ad4cadc>obj</span><span class="brackets" data-v-7ad4cadc>)</span></div><div data-v-7ad4cadc><span class="word" data-v-7ad4cadc>console.</span><span class="variable" data-v-7ad4cadc>log</span><span class="brackets" data-v-7ad4cadc>(</span><span class="word" data-v-7ad4cadc>fun</span><span class="brackets" data-v-7ad4cadc>)</span></div><div data-v-7ad4cadc><span class="word" data-v-7ad4cadc>fun</span><span class="brackets" data-v-7ad4cadc>()</span></div><br data-v-7ad4cadc><br data-v-7ad4cadc><p data-v-7ad4cadc>場景: 改變定時器內的 this 指向</p><br data-v-7ad4cadc><p data-v-7ad4cadc>需求: 有一個按鈕 , 點擊後禁用 , 2 秒後開啟</p><br data-v-7ad4cadc><div data-v-7ad4cadc><span class="then" data-v-7ad4cadc>＜</span> <span class="number" data-v-7ad4cadc>button</span><span class="then" data-v-7ad4cadc>&gt;</span> <span class="word" data-v-7ad4cadc>發送信息</span><span class="then" data-v-7ad4cadc>＜/</span> <span class="number" data-v-7ad4cadc>button</span><span class="then" data-v-7ad4cadc>&gt;</span></div><div data-v-7ad4cadc><span class="function" data-v-7ad4cadc>const </span><span class="word" data-v-7ad4cadc>btn</span> <span class="then" data-v-7ad4cadc>=</span><span class="word" data-v-7ad4cadc>document</span><span class="variable" data-v-7ad4cadc>.querySelector</span><span class="brackets" data-v-7ad4cadc>(</span> <span class="src" data-v-7ad4cadc>&quot;button&quot;</span><span class="brackets" data-v-7ad4cadc>)</span></div><div data-v-7ad4cadc><span class="word" data-v-7ad4cadc>btn</span><span class="variable" data-v-7ad4cadc>.addEventListener</span><span class="brackets" data-v-7ad4cadc>(</span> <span class="src" data-v-7ad4cadc>&quot;click&quot;</span><span class="then" data-v-7ad4cadc>,</span><span class="function" data-v-7ad4cadc>function </span><span class="brackets" data-v-7ad4cadc>() { </span><span class="comment" data-v-7ad4cadc> //回調</span></div><div class="padTwo VSL" data-v-7ad4cadc><span class="then" data-v-7ad4cadc>this</span><span class="variable" data-v-7ad4cadc>.disabled</span><span class="then" data-v-7ad4cadc>=</span> <span class="number" data-v-7ad4cadc>true</span><span class="comment" data-v-7ad4cadc>//這樣btn改名btn111也可以</span><div data-v-7ad4cadc></div></div><div class="padTwo VSL" data-v-7ad4cadc><span class="variable" data-v-7ad4cadc>setTimeout</span><span class="brackets" data-v-7ad4cadc>(</span><span class="function" data-v-7ad4cadc>function </span><span class="brackets" data-v-7ad4cadc>(){</span><div data-v-7ad4cadc><div class="padTwo VSL" data-v-7ad4cadc><span class="then" data-v-7ad4cadc>this</span><span class="variable" data-v-7ad4cadc>.disabled</span><span class="then" data-v-7ad4cadc>=</span> <span class="number" data-v-7ad4cadc>false</span><div data-v-7ad4cadc></div></div></div><div data-v-7ad4cadc><span class="brackets" data-v-7ad4cadc>},</span><span class="number" data-v-7ad4cadc>2000</span> <span class="brackets" data-v-7ad4cadc>)</span></div></div><div data-v-7ad4cadc><span class="brackets" data-v-7ad4cadc>})</span></div><br data-v-7ad4cadc><p data-v-7ad4cadc>出問題, setTimeout 裡面的 this 指向 window</p><br data-v-7ad4cadc><div data-v-7ad4cadc><span class="then" data-v-7ad4cadc>＜</span> <span class="number" data-v-7ad4cadc>button</span><span class="then" data-v-7ad4cadc>&gt;</span> <span class="word" data-v-7ad4cadc>發送信息</span><span class="then" data-v-7ad4cadc>＜/</span> <span class="number" data-v-7ad4cadc>button</span><span class="then" data-v-7ad4cadc>&gt;</span></div><div data-v-7ad4cadc><span class="function" data-v-7ad4cadc>const </span><span class="word" data-v-7ad4cadc>btn</span> <span class="then" data-v-7ad4cadc>=</span><span class="word" data-v-7ad4cadc>document</span><span class="variable" data-v-7ad4cadc>.querySelector</span><span class="brackets" data-v-7ad4cadc>(</span> <span class="src" data-v-7ad4cadc>&quot;button&quot;</span><span class="brackets" data-v-7ad4cadc>)</span></div><div data-v-7ad4cadc><span class="word" data-v-7ad4cadc>btn</span><span class="variable" data-v-7ad4cadc>.addEventListener</span><span class="brackets" data-v-7ad4cadc>(</span> <span class="src" data-v-7ad4cadc>&quot;click&quot;</span><span class="then" data-v-7ad4cadc>,</span><span class="function" data-v-7ad4cadc>function </span><span class="brackets" data-v-7ad4cadc>() { </span><span class="comment" data-v-7ad4cadc> //回調</span></div><div class="padTwo VSL" data-v-7ad4cadc><span class="then" data-v-7ad4cadc>this</span><span class="variable" data-v-7ad4cadc>.disabled</span><span class="then" data-v-7ad4cadc>=</span> <span class="number" data-v-7ad4cadc>true</span><span class="comment" data-v-7ad4cadc>//這樣btn改名btn111也可以</span><div data-v-7ad4cadc></div></div><div class="padTwo VSL" data-v-7ad4cadc><span class="variable" data-v-7ad4cadc>setTimeout</span><span class="brackets" data-v-7ad4cadc>(</span><span class="function" data-v-7ad4cadc>function </span><span class="brackets" data-v-7ad4cadc>(){</span><div data-v-7ad4cadc><div class="padTwo VSL" data-v-7ad4cadc><span class="then" data-v-7ad4cadc>btn</span><span class="variable" data-v-7ad4cadc>.disabled</span><span class="then" data-v-7ad4cadc>=</span> <span class="number" data-v-7ad4cadc>false</span><div data-v-7ad4cadc></div></div></div><div data-v-7ad4cadc><span class="brackets" data-v-7ad4cadc>},</span><span class="number" data-v-7ad4cadc>2000</span> <span class="brackets" data-v-7ad4cadc>)</span></div></div><div data-v-7ad4cadc><span class="brackets" data-v-7ad4cadc>})</span></div><br data-v-7ad4cadc><br data-v-7ad4cadc><div data-v-7ad4cadc><span class="then" data-v-7ad4cadc>＜</span> <span class="number" data-v-7ad4cadc>button</span><span class="then" data-v-7ad4cadc>&gt;</span> <span class="word" data-v-7ad4cadc>發送信息</span><span class="then" data-v-7ad4cadc>＜/</span> <span class="number" data-v-7ad4cadc>button</span><span class="then" data-v-7ad4cadc>&gt;</span></div><div data-v-7ad4cadc><span class="function" data-v-7ad4cadc>const </span><span class="word" data-v-7ad4cadc>btn</span> <span class="then" data-v-7ad4cadc>=</span><span class="word" data-v-7ad4cadc>document</span><span class="variable" data-v-7ad4cadc>.querySelector</span><span class="brackets" data-v-7ad4cadc>(</span> <span class="src" data-v-7ad4cadc>&quot;button&quot;</span><span class="brackets" data-v-7ad4cadc>)</span></div><div data-v-7ad4cadc><span class="word" data-v-7ad4cadc>btn</span><span class="variable" data-v-7ad4cadc>.addEventListener</span><span class="brackets" data-v-7ad4cadc>(</span> <span class="src" data-v-7ad4cadc>&quot;click&quot;</span><span class="then" data-v-7ad4cadc>,</span><span class="function" data-v-7ad4cadc>function </span><span class="brackets" data-v-7ad4cadc>() { </span><span class="comment" data-v-7ad4cadc> //回調</span></div><div class="padTwo VSL" data-v-7ad4cadc><span class="then" data-v-7ad4cadc>this</span><span class="variable" data-v-7ad4cadc>.disabled</span><span class="then" data-v-7ad4cadc>=</span> <span class="number" data-v-7ad4cadc>true</span><span class="comment" data-v-7ad4cadc>//這樣btn改名btn111也可以</span><div data-v-7ad4cadc></div></div><div class="padTwo VSL" data-v-7ad4cadc><span class="variable" data-v-7ad4cadc>setTimeout</span><span class="brackets" data-v-7ad4cadc>(</span><span class="function" data-v-7ad4cadc>function </span><span class="brackets" data-v-7ad4cadc>(){</span><div data-v-7ad4cadc><div class="padTwo VSL" data-v-7ad4cadc><div data-v-7ad4cadc><span class="comment" data-v-7ad4cadc>//在這個普通函數裡面,我們要this由原來的window改為btn</span></div><span class="then" data-v-7ad4cadc>this</span><span class="variable" data-v-7ad4cadc>.disabled</span><span class="then" data-v-7ad4cadc>=</span> <span class="number" data-v-7ad4cadc>false</span><div data-v-7ad4cadc></div></div></div><div data-v-7ad4cadc><span class="brackets" data-v-7ad4cadc>}</span><span class="variable" data-v-7ad4cadc>.bind</span><span class="brackets" data-v-7ad4cadc>( btn ), </span><span class="number" data-v-7ad4cadc>2000</span> <span class="brackets" data-v-7ad4cadc>)</span></div></div><div data-v-7ad4cadc><span class="brackets" data-v-7ad4cadc>})</span></div><br data-v-7ad4cadc><hr data-v-7ad4cadc><div data-v-7ad4cadc><img style="width:100%;" src="'+q8+'" data-v-7ad4cadc></div><hr data-v-7ad4cadc><br data-v-7ad4cadc><div data-v-7ad4cadc><span class="then" data-v-7ad4cadc>＜</span> <span class="number" data-v-7ad4cadc>button</span><span class="then" data-v-7ad4cadc>&gt;</span> <span class="word" data-v-7ad4cadc>發送信息</span><span class="then" data-v-7ad4cadc>＜/</span> <span class="number" data-v-7ad4cadc>button</span><span class="then" data-v-7ad4cadc>&gt;</span></div><div data-v-7ad4cadc><span class="function" data-v-7ad4cadc>const </span><span class="word" data-v-7ad4cadc>btn</span> <span class="then" data-v-7ad4cadc>=</span><span class="word" data-v-7ad4cadc>document</span><span class="variable" data-v-7ad4cadc>.querySelector</span><span class="brackets" data-v-7ad4cadc>(</span> <span class="src" data-v-7ad4cadc>&quot;button&quot;</span><span class="brackets" data-v-7ad4cadc>)</span></div><div data-v-7ad4cadc><span class="word" data-v-7ad4cadc>btn</span><span class="variable" data-v-7ad4cadc>.addEventListener</span><span class="brackets" data-v-7ad4cadc>(</span> <span class="src" data-v-7ad4cadc>&quot;click&quot;</span><span class="then" data-v-7ad4cadc>,</span><span class="function" data-v-7ad4cadc>function </span><span class="brackets" data-v-7ad4cadc>() { </span><span class="comment" data-v-7ad4cadc> //回調</span></div><div class="padTwo VSL" data-v-7ad4cadc><span class="then" data-v-7ad4cadc>this</span><span class="variable" data-v-7ad4cadc>.disabled</span><span class="then" data-v-7ad4cadc>=</span> <span class="number" data-v-7ad4cadc>true</span><span class="comment" data-v-7ad4cadc>//這樣btn改名btn111也可以</span><div data-v-7ad4cadc></div></div><div class="padTwo VSL" data-v-7ad4cadc><span class="variable" data-v-7ad4cadc>setTimeout</span><span class="brackets" data-v-7ad4cadc>(</span><span class="function" data-v-7ad4cadc>function </span><span class="brackets" data-v-7ad4cadc>(){</span><div data-v-7ad4cadc><div class="padTwo VSL" data-v-7ad4cadc><div data-v-7ad4cadc><span class="comment" data-v-7ad4cadc>//在這個普通函數裡面,我們要this由原來的window改為btn</span></div><span class="then" data-v-7ad4cadc>this</span><span class="variable" data-v-7ad4cadc>.disabled</span><span class="then" data-v-7ad4cadc>=</span> <span class="number" data-v-7ad4cadc>false</span><div data-v-7ad4cadc></div></div></div><div data-v-7ad4cadc><span class="brackets" data-v-7ad4cadc>}</span><span class="variable" data-v-7ad4cadc>.bind</span><span class="brackets" data-v-7ad4cadc>(</span> <span class="then" data-v-7ad4cadc>this</span><span class="brackets" data-v-7ad4cadc>),</span><span class="number" data-v-7ad4cadc>2000</span> <span class="brackets" data-v-7ad4cadc>)</span></div></div><div data-v-7ad4cadc><span class="brackets" data-v-7ad4cadc>})</span></div><br data-v-7ad4cadc></div><p class="fz28" data-v-7ad4cadc>call &amp; apply &amp; bind</p><p class="fz28" data-v-7ad4cadc>相同:</p><p class="fz28" data-v-7ad4cadc>都可以改變函數內部的 this 指向</p><br data-v-7ad4cadc><p class="fz28" data-v-7ad4cadc>區別:</p><p class="fz28" data-v-7ad4cadc> call &amp; apply 會 調用函數 , 並改變函數內部 this 指向 </p><br data-v-7ad4cadc><p class="fz28" data-v-7ad4cadc> call &amp; apply 傳遞的參數不一樣 , call (aru1 , aru2) apply ([數組]) </p><br data-v-7ad4cadc><p class="fz28" data-v-7ad4cadc>bind 不會調用 , 會改變 this 指向</p><br data-v-7ad4cadc><p class="fz28" data-v-7ad4cadc>場景:</p><p class="fz28" data-v-7ad4cadc>call 調用 並 傳遞 參數</p><br data-v-7ad4cadc><p class="fz28" data-v-7ad4cadc>apply 並用 並 傳遞 數組</p><br data-v-7ad4cadc><p class="fz28" data-v-7ad4cadc> bind 不調用 , 但想改 this 指向 ex 改定時器內部 this 指向 </p><br data-v-7ad4cadc><br data-v-7ad4cadc><br data-v-7ad4cadc><div id="threetips010" class="articleCardTitle cor36 fz34" data-v-7ad4cadc> 7.10 防抖 debounce </div><p class="fz28" data-v-7ad4cadc>單位時間內 , 頻繁觸發事件 , 只執行最後一次</p><br data-v-7ad4cadc><p class="fz28" data-v-7ad4cadc>放技能 , 只要被打斷要重施放</p><br data-v-7ad4cadc><p class="fz28" data-v-7ad4cadc>場景</p><p class="fz28" data-v-7ad4cadc> 搜尋框輸入 , 只需要用戶 最後一次輸入完 , 在發送請求 </p><div class="bgcVS" data-v-7ad4cadc><div data-v-7ad4cadc><span class="then" data-v-7ad4cadc>＜</span> <span class="number" data-v-7ad4cadc>input </span><span class="word" data-v-7ad4cadc>type</span> <span class="then" data-v-7ad4cadc>=</span><span class="src" data-v-7ad4cadc>&quot;text&quot;</span> <span class="then" data-v-7ad4cadc>&gt;</span></div><div data-v-7ad4cadc><span class="function" data-v-7ad4cadc>let </span><span class="word" data-v-7ad4cadc>oInput</span> <span class="then" data-v-7ad4cadc>=</span><span class="word" data-v-7ad4cadc>document</span><span class="variable" data-v-7ad4cadc>.querySelector</span><span class="brackets" data-v-7ad4cadc>(</span> <span class="src" data-v-7ad4cadc>&quot;input&quot;</span><span class="brackets" data-v-7ad4cadc>)</span></div><div data-v-7ad4cadc><span class="function" data-v-7ad4cadc>let </span> <span class="word" data-v-7ad4cadc>time</span><span class="then" data-v-7ad4cadc>=</span> <span class="then" data-v-7ad4cadc>null</span></div><div data-v-7ad4cadc><span class="word" data-v-7ad4cadc>oInput</span><span class="variable" data-v-7ad4cadc>.oninput</span><span class="then" data-v-7ad4cadc>=</span><span class="function" data-v-7ad4cadc>function </span><span class="brackets" data-v-7ad4cadc>(){</span></div><div class="padTwo VSL" data-v-7ad4cadc><span class="word" data-v-7ad4cadc>console</span><span class="variable" data-v-7ad4cadc>.log</span><span class="brackets" data-v-7ad4cadc>(</span> <span class="then" data-v-7ad4cadc>this</span><span class="word" data-v-7ad4cadc>.value</span> <span class="brackets" data-v-7ad4cadc>)</span><div data-v-7ad4cadc></div></div><div data-v-7ad4cadc><span class="brackets" data-v-7ad4cadc>}</span></div><br data-v-7ad4cadc><div data-v-7ad4cadc><span class="word" data-v-7ad4cadc>oInput</span><span class="variable" data-v-7ad4cadc>.oninput</span><span class="then" data-v-7ad4cadc>=</span><span class="function" data-v-7ad4cadc>function </span><span class="brackets" data-v-7ad4cadc>(){</span></div><div class="padTwo VSL" data-v-7ad4cadc><span class="then" data-v-7ad4cadc>if</span> <span class="brackets" data-v-7ad4cadc>(</span><span class="word" data-v-7ad4cadc>time</span> <span class="then" data-v-7ad4cadc>!==null</span><span class="brackets" data-v-7ad4cadc>){</span><div data-v-7ad4cadc></div><div class="padTwo VSL" data-v-7ad4cadc><span class="word" data-v-7ad4cadc>clearTimeout</span><span class="brackets" data-v-7ad4cadc>(</span> <span class="word" data-v-7ad4cadc>t</span><span class="brackets" data-v-7ad4cadc>)</span><div data-v-7ad4cadc></div></div><div data-v-7ad4cadc><span class="brackets" data-v-7ad4cadc>}</span></div><div data-v-7ad4cadc><span class="word" data-v-7ad4cadc>time</span> <span class="then" data-v-7ad4cadc>=</span><span class="variable" data-v-7ad4cadc>setTimeout</span><span class="brackets" data-v-7ad4cadc>(()</span><span class="function" data-v-7ad4cadc>=&gt; </span><span class="brackets" data-v-7ad4cadc>{</span><div class="padTwo VSL" data-v-7ad4cadc><span class="word" data-v-7ad4cadc>console</span><span class="variable" data-v-7ad4cadc>.log</span><span class="brackets" data-v-7ad4cadc>(</span><span class="then" data-v-7ad4cadc>this</span><span class="word" data-v-7ad4cadc>.value</span><span class="brackets" data-v-7ad4cadc>)</span></div><div data-v-7ad4cadc><span class="brackets" data-v-7ad4cadc>},</span><span class="number" data-v-7ad4cadc>1000</span><span class="brackets" data-v-7ad4cadc>)</span></div></div></div><div data-v-7ad4cadc><span class="brackets" data-v-7ad4cadc>}</span></div><br data-v-7ad4cadc><p data-v-7ad4cadc>用閉包優化結構</p><div class="dis" data-v-7ad4cadc><div class="w100" data-v-7ad4cadc><div data-v-7ad4cadc><span class="word" data-v-7ad4cadc>oInput</span><span class="variable" data-v-7ad4cadc>.oninput</span><span class="then" data-v-7ad4cadc>=</span><span class="word" data-v-7ad4cadc>debounce</span><span class="brackets" data-v-7ad4cadc>()</span></div><div data-v-7ad4cadc><span class="function" data-v-7ad4cadc>function </span><span class="word" data-v-7ad4cadc>debounce</span><span class="brackets" data-v-7ad4cadc>(){</span></div><div class="padTwo VSL" data-v-7ad4cadc><span class="function" data-v-7ad4cadc>let </span><span class="word" data-v-7ad4cadc>time</span> <span class="then" data-v-7ad4cadc>=</span><span class="then" data-v-7ad4cadc>null</span><div data-v-7ad4cadc></div><span class="then" data-v-7ad4cadc>return </span><span class="function" data-v-7ad4cadc>function </span><span class="brackets" data-v-7ad4cadc>(){</span><div data-v-7ad4cadc></div><div class="padTwo VSL" data-v-7ad4cadc><span class="then" data-v-7ad4cadc>if</span><span class="brackets" data-v-7ad4cadc>(</span><span class="word" data-v-7ad4cadc>time</span><span class="then" data-v-7ad4cadc>!==null</span><span class="brackets" data-v-7ad4cadc>){</span><div data-v-7ad4cadc></div><div class="padTwo VSL" data-v-7ad4cadc><span class="word" data-v-7ad4cadc>clearTimeout</span><span class="brackets" data-v-7ad4cadc>(</span><span class="word" data-v-7ad4cadc>t</span><span class="brackets" data-v-7ad4cadc>)</span><div data-v-7ad4cadc></div></div><div data-v-7ad4cadc><span class="brackets" data-v-7ad4cadc>}</span></div><div data-v-7ad4cadc><span class="word" data-v-7ad4cadc>time</span><span class="then" data-v-7ad4cadc>=</span><span class="variable" data-v-7ad4cadc>setTimeout</span><span class="brackets" data-v-7ad4cadc>(()</span><span class="function" data-v-7ad4cadc>=&gt; </span><span class="brackets" data-v-7ad4cadc>{</span><div class="padTwo VSL" data-v-7ad4cadc><span class="word" data-v-7ad4cadc>console</span><span class="variable" data-v-7ad4cadc>.log</span><span class="brackets" data-v-7ad4cadc>(</span><span class="then" data-v-7ad4cadc>this</span><span class="word" data-v-7ad4cadc>.value</span><span class="brackets" data-v-7ad4cadc>)</span></div><div data-v-7ad4cadc><span class="brackets" data-v-7ad4cadc>},</span><span class="number" data-v-7ad4cadc>1000</span><span class="brackets" data-v-7ad4cadc>)</span></div></div></div><div data-v-7ad4cadc><span class="brackets" data-v-7ad4cadc>}</span></div></div><div data-v-7ad4cadc><span class="brackets" data-v-7ad4cadc>}</span></div></div><div class="w100" data-v-7ad4cadc><div data-v-7ad4cadc><span class="word" data-v-7ad4cadc>oInput</span><span class="variable" data-v-7ad4cadc>.oninput</span><span class="then" data-v-7ad4cadc>=</span><span class="word" data-v-7ad4cadc>debounce</span><span class="brackets" data-v-7ad4cadc>(</span><span class="variable" data-v-7ad4cadc>function</span><span class="brackets" data-v-7ad4cadc>(){</span></div><div class="padTwo VSL" data-v-7ad4cadc><span class="word" data-v-7ad4cadc>console</span><span class="variable" data-v-7ad4cadc>.log</span><span class="brackets" data-v-7ad4cadc>(</span><span class="then" data-v-7ad4cadc>this</span><span class="word" data-v-7ad4cadc>.value</span><span class="brackets" data-v-7ad4cadc>)</span><div data-v-7ad4cadc></div></div><div data-v-7ad4cadc><span class="brackets" data-v-7ad4cadc>},</span><span class="number" data-v-7ad4cadc>1000</span><span class="brackets" data-v-7ad4cadc>)</span></div><div data-v-7ad4cadc><span class="function" data-v-7ad4cadc>function </span><span class="word" data-v-7ad4cadc>debounce</span><span class="brackets" data-v-7ad4cadc>(</span><span class="word" data-v-7ad4cadc>fn,delay</span><span class="brackets" data-v-7ad4cadc>){</span></div><div class="padTwo VSL" data-v-7ad4cadc><span class="function" data-v-7ad4cadc>let </span><span class="word" data-v-7ad4cadc>time</span> <span class="then" data-v-7ad4cadc>=</span><span class="then" data-v-7ad4cadc>null</span><div data-v-7ad4cadc></div><span class="then" data-v-7ad4cadc>return </span><span class="function" data-v-7ad4cadc>function </span><span class="brackets" data-v-7ad4cadc>(){</span><div data-v-7ad4cadc></div><div class="padTwo VSL" data-v-7ad4cadc><span class="then" data-v-7ad4cadc>if</span><span class="brackets" data-v-7ad4cadc>(</span><span class="word" data-v-7ad4cadc>time</span><span class="then" data-v-7ad4cadc>!==null</span><span class="brackets" data-v-7ad4cadc>){</span><div data-v-7ad4cadc></div><div class="padTwo VSL" data-v-7ad4cadc><span class="word" data-v-7ad4cadc>clearTimeout</span><span class="brackets" data-v-7ad4cadc>(</span><span class="word" data-v-7ad4cadc>t</span><span class="brackets" data-v-7ad4cadc>)</span><div data-v-7ad4cadc></div></div><div data-v-7ad4cadc><span class="brackets" data-v-7ad4cadc>}</span></div><div data-v-7ad4cadc><span class="word" data-v-7ad4cadc>time</span><span class="then" data-v-7ad4cadc>=</span><span class="variable" data-v-7ad4cadc>setTimeout</span><span class="brackets" data-v-7ad4cadc>(()</span><span class="function" data-v-7ad4cadc>=&gt; </span><span class="brackets" data-v-7ad4cadc>{</span><div class="padTwo VSL" data-v-7ad4cadc><span class="variable" data-v-7ad4cadc>fn</span><span class="brackets" data-v-7ad4cadc>()</span></div><div data-v-7ad4cadc><span class="brackets" data-v-7ad4cadc>},</span><span class="number" data-v-7ad4cadc>delay</span><span class="brackets" data-v-7ad4cadc>)</span></div></div></div><div data-v-7ad4cadc><span class="brackets" data-v-7ad4cadc>}</span></div></div><div data-v-7ad4cadc><span class="brackets" data-v-7ad4cadc>}</span></div><p data-v-7ad4cadc>測試發現輸出 undefined</p></div></div><div class="dis" data-v-7ad4cadc><div class="w100" data-v-7ad4cadc><div data-v-7ad4cadc><span class="word" data-v-7ad4cadc>oInput</span><span class="variable" data-v-7ad4cadc>.oninput</span><span class="then" data-v-7ad4cadc>=</span><span class="word" data-v-7ad4cadc>debounce</span><span class="brackets" data-v-7ad4cadc>(</span><span class="variable" data-v-7ad4cadc>function</span><span class="brackets" data-v-7ad4cadc>(){</span></div><div class="padTwo VSL" data-v-7ad4cadc><span class="word" data-v-7ad4cadc>console</span><span class="variable" data-v-7ad4cadc>.log</span><span class="brackets" data-v-7ad4cadc>(</span><span class="then" data-v-7ad4cadc>this</span><span class="brackets" data-v-7ad4cadc>) </span><span class="comment" data-v-7ad4cadc>//發現this指向window</span><div data-v-7ad4cadc></div></div><div data-v-7ad4cadc><span class="brackets" data-v-7ad4cadc>},</span><span class="number" data-v-7ad4cadc>1000</span><span class="brackets" data-v-7ad4cadc>)</span></div><div data-v-7ad4cadc><span class="function" data-v-7ad4cadc>function </span><span class="word" data-v-7ad4cadc>debounce</span><span class="brackets" data-v-7ad4cadc>(</span><span class="word" data-v-7ad4cadc>fn,delay</span><span class="brackets" data-v-7ad4cadc>){</span></div><div class="padTwo VSL" data-v-7ad4cadc><div data-v-7ad4cadc><span class="comment" data-v-7ad4cadc>//console.log(this)</span></div><span class="function" data-v-7ad4cadc>let </span><span class="word" data-v-7ad4cadc>time</span> <span class="then" data-v-7ad4cadc>=</span><span class="then" data-v-7ad4cadc>null</span><div data-v-7ad4cadc></div><span class="then" data-v-7ad4cadc>return </span><span class="function" data-v-7ad4cadc>function </span><span class="brackets" data-v-7ad4cadc>(){</span><div data-v-7ad4cadc></div><div class="padTwo VSL" data-v-7ad4cadc><span class="then" data-v-7ad4cadc>if</span><span class="brackets" data-v-7ad4cadc>(</span><span class="word" data-v-7ad4cadc>time</span><span class="then" data-v-7ad4cadc>!==null</span><span class="brackets" data-v-7ad4cadc>){</span><div data-v-7ad4cadc></div><div class="padTwo VSL" data-v-7ad4cadc><span class="word" data-v-7ad4cadc>clearTimeout</span><span class="brackets" data-v-7ad4cadc>(</span><span class="word" data-v-7ad4cadc>t</span><span class="brackets" data-v-7ad4cadc>)</span><div data-v-7ad4cadc></div></div><div data-v-7ad4cadc><span class="brackets" data-v-7ad4cadc>}</span></div><div data-v-7ad4cadc><span class="word" data-v-7ad4cadc>time</span><span class="then" data-v-7ad4cadc>=</span><span class="variable" data-v-7ad4cadc>setTimeout</span><span class="brackets" data-v-7ad4cadc>(()</span><span class="function" data-v-7ad4cadc>=&gt; </span><span class="brackets" data-v-7ad4cadc>{</span><div class="padTwo VSL" data-v-7ad4cadc><div data-v-7ad4cadc><span class="comment" data-v-7ad4cadc>//console.log(this) //這邊才指向input對象</span></div><span class="variable" data-v-7ad4cadc>fn</span><span class="brackets" data-v-7ad4cadc>()</span></div><div data-v-7ad4cadc><span class="brackets" data-v-7ad4cadc>},</span><span class="number" data-v-7ad4cadc>delay</span><span class="brackets" data-v-7ad4cadc>)</span></div></div></div><div data-v-7ad4cadc><span class="brackets" data-v-7ad4cadc>}</span></div></div><div data-v-7ad4cadc><span class="brackets" data-v-7ad4cadc>}</span></div><p data-v-7ad4cadc>雖然這裡執行debounce這個函數</p><p data-v-7ad4cadc>但返回的是內部這個函數(return..)</p><p data-v-7ad4cadc>相當於onInput=右邊</p><p data-v-7ad4cadc>這裡掛者的是內部返回的這個函數</p><p data-v-7ad4cadc>所以內部這個函數的this指向</p><p data-v-7ad4cadc>才是這個input對象</p></div><div class="w100" data-v-7ad4cadc><br data-v-7ad4cadc><br data-v-7ad4cadc><br data-v-7ad4cadc><div data-v-7ad4cadc><span class="word" data-v-7ad4cadc>oInput</span><span class="variable" data-v-7ad4cadc>.oninput</span><span class="then" data-v-7ad4cadc>=</span><span class="word" data-v-7ad4cadc>debounce</span><span class="brackets" data-v-7ad4cadc>(</span><span class="variable" data-v-7ad4cadc>function</span><span class="brackets" data-v-7ad4cadc>(){</span></div><div class="padTwo VSL" data-v-7ad4cadc><span class="word" data-v-7ad4cadc>console</span><span class="variable" data-v-7ad4cadc>.log</span><span class="brackets" data-v-7ad4cadc>(</span><span class="then" data-v-7ad4cadc>this</span><span class="brackets" data-v-7ad4cadc>) </span><div data-v-7ad4cadc></div></div><div data-v-7ad4cadc><span class="brackets" data-v-7ad4cadc>},</span><span class="number" data-v-7ad4cadc>1000</span><span class="brackets" data-v-7ad4cadc>)</span></div><div data-v-7ad4cadc><span class="function" data-v-7ad4cadc>function </span><span class="word" data-v-7ad4cadc>debounce</span><span class="brackets" data-v-7ad4cadc>(</span><span class="word" data-v-7ad4cadc>fn,delay</span><span class="brackets" data-v-7ad4cadc>){</span></div><div class="padTwo VSL" data-v-7ad4cadc><div data-v-7ad4cadc><span class="comment" data-v-7ad4cadc>//console.log(this)</span></div><span class="function" data-v-7ad4cadc>let </span><span class="word" data-v-7ad4cadc>time</span> <span class="then" data-v-7ad4cadc>=</span><span class="then" data-v-7ad4cadc>null</span><div data-v-7ad4cadc></div><span class="then" data-v-7ad4cadc>return </span><span class="function" data-v-7ad4cadc>function </span><span class="brackets" data-v-7ad4cadc>(){</span><div data-v-7ad4cadc></div><div class="padTwo VSL" data-v-7ad4cadc><span class="then" data-v-7ad4cadc>if</span><span class="brackets" data-v-7ad4cadc>(</span><span class="word" data-v-7ad4cadc>time</span><span class="then" data-v-7ad4cadc>!==null</span><span class="brackets" data-v-7ad4cadc>){</span><div data-v-7ad4cadc></div><div class="padTwo VSL" data-v-7ad4cadc><span class="word" data-v-7ad4cadc>clearTimeout</span><span class="brackets" data-v-7ad4cadc>(</span><span class="word" data-v-7ad4cadc>t</span><span class="brackets" data-v-7ad4cadc>)</span><div data-v-7ad4cadc></div></div><div data-v-7ad4cadc><span class="brackets" data-v-7ad4cadc>}</span></div><div data-v-7ad4cadc><span class="word" data-v-7ad4cadc>time</span><span class="then" data-v-7ad4cadc>=</span><span class="variable" data-v-7ad4cadc>setTimeout</span><span class="brackets" data-v-7ad4cadc>(()</span><span class="function" data-v-7ad4cadc>=&gt; </span><span class="brackets" data-v-7ad4cadc>{</span><div class="padTwo VSL" data-v-7ad4cadc><span class="variable" data-v-7ad4cadc>fn</span><span class="number" data-v-7ad4cadc>.call</span><span class="brackets" data-v-7ad4cadc>(</span><span class="then" data-v-7ad4cadc>this</span><span class="brackets" data-v-7ad4cadc>)</span><span class="brackets" data-v-7ad4cadc>()</span></div><div data-v-7ad4cadc><span class="brackets" data-v-7ad4cadc>},</span><span class="number" data-v-7ad4cadc>delay</span><span class="brackets" data-v-7ad4cadc>)</span></div></div></div><div data-v-7ad4cadc><span class="brackets" data-v-7ad4cadc>}</span></div></div><div data-v-7ad4cadc><span class="brackets" data-v-7ad4cadc>}</span></div></div></div></div><div id="threetips011" class="articleCardTitle cor36 fz34" data-v-7ad4cadc> 7.11 節流 throttle </div><p class="fz28" data-v-7ad4cadc>單位時間內 , 頻繁觸發事件 , 執行一次</p><br data-v-7ad4cadc><p class="fz28" data-v-7ad4cadc>技能施放完 等待的 cd 時間</p><br data-v-7ad4cadc><p class="fz28" data-v-7ad4cadc>場景</p><p class="fz28" data-v-7ad4cadc>滾動條</p><div class="bgcVS" data-v-7ad4cadc><div data-v-7ad4cadc><span class="word" data-v-7ad4cadc>window</span><span class="word" data-v-7ad4cadc>.onscroll</span> <span class="then" data-v-7ad4cadc>=</span><span class="function" data-v-7ad4cadc>function </span><span class="brackets" data-v-7ad4cadc>(){</span></div><div class="padTwo VSL" data-v-7ad4cadc><span class="variable" data-v-7ad4cadc>alert</span><span class="brackets" data-v-7ad4cadc>(</span> <span class="src" data-v-7ad4cadc>&quot;廣告&quot;</span><span class="brackets" data-v-7ad4cadc>)</span><div data-v-7ad4cadc></div></div><div data-v-7ad4cadc><span class="brackets" data-v-7ad4cadc>}</span></div><br data-v-7ad4cadc><br data-v-7ad4cadc><br data-v-7ad4cadc><div data-v-7ad4cadc><span class="word" data-v-7ad4cadc>window</span><span class="variable" data-v-7ad4cadc>.onscroll</span><span class="then" data-v-7ad4cadc>=</span> <span class="word" data-v-7ad4cadc>throttle</span><span class="brackets" data-v-7ad4cadc>(</span><span class="function" data-v-7ad4cadc>function </span><span class="brackets" data-v-7ad4cadc>(){</span></div><div class="padTwo VSL" data-v-7ad4cadc><span class="variable" data-v-7ad4cadc>alert</span><span class="brackets" data-v-7ad4cadc>(</span> <span class="src" data-v-7ad4cadc>&quot;廣告&quot;</span><span class="brackets" data-v-7ad4cadc>)</span><div data-v-7ad4cadc></div></div><div data-v-7ad4cadc><span class="brackets" data-v-7ad4cadc>},</span> <span class="number" data-v-7ad4cadc>2000</span><span class="brackets" data-v-7ad4cadc>)</span></div><div data-v-7ad4cadc><span class="function" data-v-7ad4cadc>function </span><span class="word" data-v-7ad4cadc>throttle</span><span class="brackets" data-v-7ad4cadc>(</span><span class="word" data-v-7ad4cadc>fn,delay</span><span class="brackets" data-v-7ad4cadc>){</span></div><div class="padTwo VSL" data-v-7ad4cadc><span class="function" data-v-7ad4cadc>let </span> <span class="word" data-v-7ad4cadc>time</span><span class="then" data-v-7ad4cadc>=</span> <span class="number" data-v-7ad4cadc>true</span><div data-v-7ad4cadc></div><span class="then" data-v-7ad4cadc>return </span><span class="function" data-v-7ad4cadc>function </span><span class="brackets" data-v-7ad4cadc>(){</span><div data-v-7ad4cadc></div><div class="padTwo VSL" data-v-7ad4cadc><span class="then" data-v-7ad4cadc>if</span> <span class="brackets" data-v-7ad4cadc>(</span><span class="word" data-v-7ad4cadc>time</span> <span class="brackets" data-v-7ad4cadc>){</span><div data-v-7ad4cadc></div><div class="padTwo VSL" data-v-7ad4cadc><span class="variable" data-v-7ad4cadc>setTimeout</span><span class="brackets" data-v-7ad4cadc>(()</span><span class="function" data-v-7ad4cadc>=&gt;</span><span class="brackets" data-v-7ad4cadc>{</span><div data-v-7ad4cadc></div><div class="padTwo VSL" data-v-7ad4cadc><span class="word" data-v-7ad4cadc>fn</span><span class="variable" data-v-7ad4cadc>.call</span><span class="brackets" data-v-7ad4cadc>(</span><span class="then" data-v-7ad4cadc>this</span><span class="brackets" data-v-7ad4cadc>) </span><span class="comment" data-v-7ad4cadc>// 綁在 window 有沒有 call 都可以</span><div data-v-7ad4cadc><span class="word" data-v-7ad4cadc>time</span><span class="then" data-v-7ad4cadc>=</span><span class="number" data-v-7ad4cadc>true</span></div><div data-v-7ad4cadc></div></div><div data-v-7ad4cadc><span class="brackets" data-v-7ad4cadc>},</span><span class="word" data-v-7ad4cadc>delay</span><span class="brackets" data-v-7ad4cadc>)</span></div></div><div data-v-7ad4cadc><span class="brackets" data-v-7ad4cadc>}</span></div><div data-v-7ad4cadc><span class="word" data-v-7ad4cadc>time</span> <span class="then" data-v-7ad4cadc>=</span><span class="number" data-v-7ad4cadc>false</span></div></div><div data-v-7ad4cadc><span class="brackets" data-v-7ad4cadc>}</span></div></div><div data-v-7ad4cadc><span class="brackets" data-v-7ad4cadc>}</span></div></div><p class="fz28" data-v-7ad4cadc></p><p class="fz28" data-v-7ad4cadc></p><p class="fz28" data-v-7ad4cadc></p><p class="fz28" data-v-7ad4cadc></p><p class="fz28" data-v-7ad4cadc></p>',119),$8=Sn(()=>n("div",{class:"toTopButton"},[n("div",{class:"disCen"},"___"),n("div",{class:"disCen"},"▲")],-1)),E8=[$8],M8=Sn(()=>n("div",{class:"toBotButton"},[n("div",{class:"disCen"},"▼"),n("div",{class:"disCen"},"￣")],-1)),A8=[M8],F8={__name:"JsPageThreeSeven",setup(a){const s=ba(!1);window.addEventListener("scroll",function(){s.value=window.scrollY>0});function d(){window.scrollTo({top:0,left:0,behavior:"smooth"})}function v(){window.scrollTo({top:999999,left:0,behavior:"smooth"})}function t(e){window.scrollTo({top:document.getElementById(`${e}`).offsetTop,behavior:"smooth"})}return(e,c)=>{const l=qa("P");return aa(),ta(G,null,[n("section",null,[n("div",_8,[n("div",S8,[n("div",y8,[n("div",{onClick:c[0]||(c[0]=p=>t("threetips001")),class:"leftNavText"},"淺拷貝"),n("div",{onClick:c[1]||(c[1]=p=>t("threetips002")),class:"leftNavText"},"深拷貝"),n("div",{onClick:c[2]||(c[2]=p=>t("threetips003")),class:"leftNavText"},"lodash"),n("div",{onClick:c[3]||(c[3]=p=>t("threetips004")),class:"leftNavText"},"JSON"),n("div",{onClick:c[4]||(c[4]=p=>t("threetips005")),class:"leftNavText"}," 異常處理 "),n("div",{onClick:c[5]||(c[5]=p=>t("threetips006")),class:"leftNavText"},"this"),n("div",{onClick:c[6]||(c[6]=p=>t("threetips007")),class:"leftNavText"},"call"),n("div",{onClick:c[7]||(c[7]=p=>t("threetips008")),class:"leftNavText"},"apply"),n("div",{onClick:c[8]||(c[8]=p=>t("threetips009")),class:"leftNavText"},"bind"),n("div",{onClick:c[9]||(c[9]=p=>t("threetips010")),class:"leftNavText"},"防抖"),n("div",{onClick:c[10]||(c[10]=p=>t("threetips011")),class:"leftNavText"},"節流")])])]),n("div",C8,[n("div",x8,[n("div",L8,[j8,n("div",V8,[P8,k(l,null,{default:S(()=>[fa("2. 輸出當前時間可用 new Date().toLocaleString()")]),_:1}),O8]),N8])])])]),n("div",null,[W(k(B,{name:"fade",tag:"div"},{default:S(()=>[n("div",{onClick:d,class:"toTop"},E8)]),_:1},512),[[U,s.value]]),W(k(B,{name:"fade",tag:"div"},{default:S(()=>[n("div",{onClick:v,class:"toBot"},A8)]),_:1},512),[[U,s.value]])])],64)}}},I8=pa(F8,[["__scopeId","data-v-7ad4cadc"]]);const yn=a=>(wa("data-v-83ce8c80"),a=a(),ma(),a),R8={class:"leftNav"},H8={class:"leftNavContainer"},B8={class:"leftNavLayout"},D8=K('<div class="Main" data-v-83ce8c80><div class="mainContainer" data-v-83ce8c80><div class="mainLayout" data-v-83ce8c80><br data-v-83ce8c80><br data-v-83ce8c80><p class="fz28" data-v-83ce8c80>總分總</p><p class="fz28" data-v-83ce8c80>1.要講哪個知識點</p><p class="fz28" data-v-83ce8c80>2.細講</p><p class="fz28" data-v-83ce8c80>3.總結</p><br data-v-83ce8c80><br data-v-83ce8c80><div id="threedom001" class="articleCardTitle cor36 fz34" data-v-83ce8c80> 8.1 事件流 </div><p class="fz28" data-v-83ce8c80>事件流</p><p class="fz28" data-v-83ce8c80>指事件完整執行過程中的流動路徑</p><br data-v-83ce8c80><br data-v-83ce8c80><div class="fz30" data-v-83ce8c80> 1 <span class="cor17" data-v-83ce8c80>. . . </span><span class="cor36 pad10 bor" data-v-83ce8c80> Document </span><span class="cor17" data-v-83ce8c80> . . . </span> 7 </div><div class="fz30" data-v-83ce8c80><span class="cor17" data-v-83ce8c80>. . . </span> ↘ <span class="cor17" data-v-83ce8c80>. . . . . . </span> | <span class="cor17" data-v-83ce8c80>. . . . . . . . . . </span> ↖ <span class="cor17" data-v-83ce8c80>. . </span> 冒泡階段 由下往上 . 事件是在冒泡階段觸發 </div><div class="fz30" data-v-83ce8c80><span class="cor17" data-v-83ce8c80>. . . . . </span>2 <span class="cor17" data-v-83ce8c80>. . </span><span class="cor36 pad10 bor" data-v-83ce8c80> Element html </span><span class="cor17" data-v-83ce8c80> . . . </span> 6 </div><div class="fz30" data-v-83ce8c80><span class="cor17" data-v-83ce8c80>. . . . . . . </span> ↘ <span class="cor17" data-v-83ce8c80>. . . . . . </span> | <span class="cor17" data-v-83ce8c80>. . . . . . . . . . </span> ↖ </div><div class="fz30" data-v-83ce8c80> 捕獲階段 <span class="cor17" data-v-83ce8c80>. . </span> 3 <span class="cor17" data-v-83ce8c80>. . </span><span class="cor36 pad10 bor" data-v-83ce8c80> Element body </span><span class="cor17" data-v-83ce8c80> . . . </span> 5 </div><div class="fz30" data-v-83ce8c80> 由上往下 <span class="cor17" data-v-83ce8c80> . . . . </span> ↘ <span class="cor17" data-v-83ce8c80>. . . . . . . . </span> | <span class="cor17" data-v-83ce8c80>. . . . . . . . . . </span> ↖ </div><div class="fz30" data-v-83ce8c80><span class="cor17" data-v-83ce8c80>. . . . . . . . . . . . . . </span> ↘ <span class="cor17" data-v-83ce8c80>. . . . </span><span class="cor36 pad10 bor" data-v-83ce8c80> Element div </span><span class="cor17" data-v-83ce8c80> . . . </span> 4 </div><div class="fz30" data-v-83ce8c80><span class="cor17" data-v-83ce8c80>. . . . . . . . . . . . . . . .</span> ↘ → → → → → → ↗ </div><p class="fz28" data-v-83ce8c80>說明</p><p class="fz28" data-v-83ce8c80> 假設頁面裡有 div , 當觸發事件時 , 經歷 &quot;捕獲階段&quot; &amp; &quot;冒泡階段&quot; </p><p class="fz28" data-v-83ce8c80>捕獲 -&gt; 父到子</p><p class="fz28" data-v-83ce8c80>冒泡 -&gt; 子到父</p><br data-v-83ce8c80><p class="fz28" data-v-83ce8c80>實際開發 冒泡為主</p><br data-v-83ce8c80><br data-v-83ce8c80><p class="fz34 cor36" data-v-83ce8c80>事件捕獲</p><p class="fz28" data-v-83ce8c80> 從 DOM 的 根元素 開始去執行 對應的 事件 ( 從裡到外 ) </p><a class="fz28" href="https://codepen.io/wayne23123/pen/gOZbBRw" data-v-83ce8c80>DEMO @codepen</a><p class="fz34 cor36" data-v-83ce8c80>事件冒泡</p><p class="fz28" data-v-83ce8c80> 當一個元素被觸發 , 同樣的事件將會在該元素的所有祖先元素中 依次被觸發。 </p><p class="fz28" data-v-83ce8c80>這過程為冒泡。</p><br data-v-83ce8c80><p class="fz28" data-v-83ce8c80> 當一元素觸發事件後 , 會 依次 向上調用 所有 父級元素的 同名事件 </p><a class="fz28" href="https://codepen.io/wayne23123/pen/gOZbBRw" data-v-83ce8c80>DEMO @codepen</a><br data-v-83ce8c80><p class="fz34 cor36" data-v-83ce8c80>阻止冒泡</p><p class="fz28" data-v-83ce8c80>默認有冒泡模式存在 , 容易導致 事件影像到 父元素</p><br data-v-83ce8c80><p class="fz28" data-v-83ce8c80>需求:</p><p class="fz28" data-v-83ce8c80>想把事件限制在當前元素 , 需要 阻止 事件 冒泡</p><br data-v-83ce8c80><p class="fz28" data-v-83ce8c80>前提:</p><p class="fz28" data-v-83ce8c80>阻止事件冒泡 需要拿到 事件對象</p><br data-v-83ce8c80><div class="spo fz30" data-v-83ce8c80><span class="number" data-v-83ce8c80>事件對象</span><span class="variable" data-v-83ce8c80>.stopPropagation</span><span class="brackets" data-v-83ce8c80>()</span></div><a class="fz28" href="https://codepen.io/wayne23123/pen/RwENeBG" data-v-83ce8c80>DEMO @codepen</a><br data-v-83ce8c80><br data-v-83ce8c80><p class="fz28" data-v-83ce8c80>阻止默認行為:</p><p class="fz28" data-v-83ce8c80>阻止表單提交</p><p class="fz28" data-v-83ce8c80>阻止連接跳轉</p><div class="bgcVS" data-v-83ce8c80><div data-v-83ce8c80><span class="function" data-v-83ce8c80>const </span><span class="word" data-v-83ce8c80>form</span> <span class="then" data-v-83ce8c80>=</span><span class="word" data-v-83ce8c80>document</span><span class="variable" data-v-83ce8c80>.querySelector</span><span class="brackets" data-v-83ce8c80>(</span> <span class="src" data-v-83ce8c80>&quot;form&quot;</span><span class="brackets" data-v-83ce8c80>)</span></div><div data-v-83ce8c80><span class="word" data-v-83ce8c80>form</span><span class="variable" data-v-83ce8c80>.addEventListener</span><span class="brackets" data-v-83ce8c80>(</span> <span class="src" data-v-83ce8c80>&quot;submit&quot;</span><span class="then" data-v-83ce8c80>,</span><span class="function" data-v-83ce8c80>function </span><span class="brackets" data-v-83ce8c80>(</span> <span class="word" data-v-83ce8c80>e</span><span class="brackets" data-v-83ce8c80>){</span></div><div class="padTwo VSL" data-v-83ce8c80><span class="comment" data-v-83ce8c80>//阻止默認提交行為</span><div data-v-83ce8c80><span class="word" data-v-83ce8c80>e.preventDefault</span><span class="brackets" data-v-83ce8c80>()</span></div><div data-v-83ce8c80></div></div><div data-v-83ce8c80><span class="brackets" data-v-83ce8c80>})</span></div><br data-v-83ce8c80><div data-v-83ce8c80><span class="function" data-v-83ce8c80>const </span> <span class="word" data-v-83ce8c80>a</span><span class="then" data-v-83ce8c80>=</span> <span class="word" data-v-83ce8c80>document</span><span class="variable" data-v-83ce8c80>.querySelector</span><span class="brackets" data-v-83ce8c80>(</span> <span class="src" data-v-83ce8c80>&quot;a&quot;</span><span class="brackets" data-v-83ce8c80>)</span></div><div data-v-83ce8c80><span class="word" data-v-83ce8c80>a</span><span class="variable" data-v-83ce8c80>.addEventListener</span><span class="brackets" data-v-83ce8c80>(</span> <span class="src" data-v-83ce8c80>&quot;click&quot;</span><span class="then" data-v-83ce8c80>,</span><span class="function" data-v-83ce8c80>function </span><span class="brackets" data-v-83ce8c80>(</span> <span class="word" data-v-83ce8c80>e</span><span class="brackets" data-v-83ce8c80>){</span></div><div class="padTwo VSL" data-v-83ce8c80><span class="comment" data-v-83ce8c80>//阻止默認提交行為</span><div data-v-83ce8c80><span class="word" data-v-83ce8c80>e.preventDefault</span><span class="brackets" data-v-83ce8c80>()</span></div><div data-v-83ce8c80></div></div><div data-v-83ce8c80><span class="brackets" data-v-83ce8c80>})</span></div><br data-v-83ce8c80></div><p class="fz34 cor36" data-v-83ce8c80>解綁事件</p><div class="bgcVS" data-v-83ce8c80><div data-v-83ce8c80><span class="then" data-v-83ce8c80>＜</span> <span class="number" data-v-83ce8c80>button</span><span class="then" data-v-83ce8c80>&gt;</span> <span class="word" data-v-83ce8c80>test</span><span class="then" data-v-83ce8c80>＜/</span> <span class="number" data-v-83ce8c80>button</span><span class="then" data-v-83ce8c80>&gt;</span></div><div data-v-83ce8c80><span class="function" data-v-83ce8c80>const </span><span class="word" data-v-83ce8c80>btn</span> <span class="then" data-v-83ce8c80>=</span><span class="word" data-v-83ce8c80>documnet</span><span class="variable" data-v-83ce8c80>.querySelector</span><span class="brackets" data-v-83ce8c80>(</span> <span class="src" data-v-83ce8c80>&quot;button&quot;</span><span class="brackets" data-v-83ce8c80>)</span></div><div data-v-83ce8c80><span class="word" data-v-83ce8c80>btn</span><span class="variable" data-v-83ce8c80>.onclick</span><span class="then" data-v-83ce8c80>=</span> <span class="then" data-v-83ce8c80>null</span></div><div class="padTwo VSL" data-v-83ce8c80><span class="word" data-v-83ce8c80>alert</span> <span class="brackets" data-v-83ce8c80>(</span><span class="src" data-v-83ce8c80>&quot;點擊了&quot;</span> <span class="brackets" data-v-83ce8c80>)</span><div data-v-83ce8c80></div></div><div data-v-83ce8c80><span class="brackets" data-v-83ce8c80>}</span></div><div data-v-83ce8c80><span class="comment" data-v-83ce8c80>//L0事件移除解綁</span></div><div data-v-83ce8c80><span class="word" data-v-83ce8c80>btn</span><span class="variable" data-v-83ce8c80>.onclick</span><span class="then" data-v-83ce8c80>=</span> <span class="then" data-v-83ce8c80>null</span></div><br data-v-83ce8c80><br data-v-83ce8c80><p data-v-83ce8c80>addEventListener 解綁方式</p><div data-v-83ce8c80><span class="comment" data-v-83ce8c80>//L2事件移除解綁</span></div><div data-v-83ce8c80><span class="function" data-v-83ce8c80>function </span><span class="word" data-v-83ce8c80>fn</span> <span class="brackets" data-v-83ce8c80>(){</span></div><div class="padTwo VSL" data-v-83ce8c80><span class="word" data-v-83ce8c80>alert</span> <span class="brackets" data-v-83ce8c80>(</span><span class="src" data-v-83ce8c80>&quot;點擊了&quot;</span> <span class="brackets" data-v-83ce8c80>)</span><div data-v-83ce8c80></div></div><div data-v-83ce8c80><span class="brackets" data-v-83ce8c80>}</span></div><div data-v-83ce8c80><span class="word" data-v-83ce8c80>btn</span><span class="variable" data-v-83ce8c80>.addEventListener</span><span class="brackets" data-v-83ce8c80>(</span> <span class="src" data-v-83ce8c80>&quot;click&quot;</span><span class="then" data-v-83ce8c80>,</span> <span class="word" data-v-83ce8c80>fn</span><span class="brackets" data-v-83ce8c80>) </span><span class="comment" data-v-83ce8c80>//這些回調函數不用(),setTimeout也是</span></div><div data-v-83ce8c80><span class="word" data-v-83ce8c80>btn</span><span class="variable" data-v-83ce8c80>.removeEventListener</span><span class="brackets" data-v-83ce8c80>(</span> <span class="src" data-v-83ce8c80>&quot;click&quot;</span><span class="then" data-v-83ce8c80>,</span> <span class="word" data-v-83ce8c80>fn</span><span class="brackets" data-v-83ce8c80>) </span></div><br data-v-83ce8c80><p data-v-83ce8c80>匿名函數 無法解綁</p></div><p class="fz28" data-v-83ce8c80>鼠標經過</p><p class="fz28" data-v-83ce8c80>mouseover &amp; mouseout 有冒泡效果</p><p class="fz28" data-v-83ce8c80>mouseenter &amp; mouseleave 沒冒泡 (推薦)</p><div id="threedom002" class="articleCardTitle cor36 fz34" data-v-83ce8c80> 8.2 事件委託 </div><p class="fz28" data-v-83ce8c80>利用 事件流的 特徵 解決一些開發需求</p><br data-v-83ce8c80><p class="fz28" data-v-83ce8c80>原理:</p><p class="fz28" data-v-83ce8c80> 給 父元素 註冊事件 , 當觸發子元素時 , 會冒泡到 父元素 , 觸發父元素的事件 </p><br data-v-83ce8c80><p class="fz28" data-v-83ce8c80>優點:</p><p class="fz28" data-v-83ce8c80>減少 註冊次數 , 提高程序性能</p><div class="bgcVS" data-v-83ce8c80><p data-v-83ce8c80>以前</p><div data-v-83ce8c80><span class="then" data-v-83ce8c80>＜</span> <span class="number" data-v-83ce8c80>ul</span><span class="then" data-v-83ce8c80>&gt;</span></div><div class="padTwo VSL" data-v-83ce8c80><span class="then" data-v-83ce8c80>＜</span> <span class="number" data-v-83ce8c80>li</span><span class="then" data-v-83ce8c80>&gt;</span> <span class="word" data-v-83ce8c80>第1個孩子</span><span class="then" data-v-83ce8c80>＜/</span> <span class="number" data-v-83ce8c80>li</span><span class="then" data-v-83ce8c80>&gt;</span><div data-v-83ce8c80></div></div><div class="padTwo VSL" data-v-83ce8c80><span class="then" data-v-83ce8c80>＜</span> <span class="number" data-v-83ce8c80>li</span><span class="then" data-v-83ce8c80>&gt;</span> <span class="word" data-v-83ce8c80>第2個孩子</span><span class="then" data-v-83ce8c80>＜/</span> <span class="number" data-v-83ce8c80>li</span><span class="then" data-v-83ce8c80>&gt;</span><div data-v-83ce8c80></div></div><div class="padTwo VSL" data-v-83ce8c80><span class="then" data-v-83ce8c80>＜</span> <span class="number" data-v-83ce8c80>li</span><span class="then" data-v-83ce8c80>&gt;</span> <span class="word" data-v-83ce8c80>第3個孩子</span><span class="then" data-v-83ce8c80>＜/</span> <span class="number" data-v-83ce8c80>li</span><span class="then" data-v-83ce8c80>&gt;</span><div data-v-83ce8c80></div></div><div data-v-83ce8c80><span class="then" data-v-83ce8c80>＜/</span> <span class="number" data-v-83ce8c80>ul</span><span class="then" data-v-83ce8c80>&gt;</span></div><div data-v-83ce8c80><span class="function" data-v-83ce8c80>const </span><span class="word" data-v-83ce8c80>lis</span> <span class="then" data-v-83ce8c80>=</span><span class="word" data-v-83ce8c80>document</span><span class="variable" data-v-83ce8c80>.querySelectorAll</span><span class="brackets" data-v-83ce8c80>(</span> <span class="src" data-v-83ce8c80>&quot;ul li&quot;</span><span class="brackets" data-v-83ce8c80>)</span></div><div data-v-83ce8c80><span class="then" data-v-83ce8c80>for </span> <span class="brackets" data-v-83ce8c80>(</span><span class="function" data-v-83ce8c80>let </span> <span class="word" data-v-83ce8c80>i</span><span class="then" data-v-83ce8c80>=</span> <span class="number" data-v-83ce8c80>0</span><span class="then" data-v-83ce8c80>;</span> <span class="word" data-v-83ce8c80>i</span><span class="then" data-v-83ce8c80>＜</span> <span class="word" data-v-83ce8c80>lis</span><span class="variable" data-v-83ce8c80>.length</span> <span class="then" data-v-83ce8c80>;</span><span class="word" data-v-83ce8c80>i</span> <span class="then" data-v-83ce8c80>++</span><span class="brackets" data-v-83ce8c80>){</span></div><div class="padTwo VSL" data-v-83ce8c80><span class="word" data-v-83ce8c80>lis</span> <span class="brackets" data-v-83ce8c80>[</span><span class="word" data-v-83ce8c80>i</span> <span class="brackets" data-v-83ce8c80>]</span><span class="word" data-v-83ce8c80>.addEventListner</span><span class="brackets" data-v-83ce8c80>(</span> <span class="src" data-v-83ce8c80>&quot;click&quot;</span><span class="then" data-v-83ce8c80>,</span><span class="function" data-v-83ce8c80>function </span><span class="brackets" data-v-83ce8c80>(){</span><div class="padTwo VSL" data-v-83ce8c80><span class="variable" data-v-83ce8c80>alert</span><span class="brackets" data-v-83ce8c80>(</span><span class="src" data-v-83ce8c80>&quot;點擊了&quot;</span><span class="brackets" data-v-83ce8c80>)</span><div data-v-83ce8c80></div></div><div data-v-83ce8c80></div><div data-v-83ce8c80><span class="brackets" data-v-83ce8c80>})</span></div></div><div data-v-83ce8c80><span class="brackets" data-v-83ce8c80>}</span></div><br data-v-83ce8c80><br data-v-83ce8c80><p data-v-83ce8c80>事件委託</p><div data-v-83ce8c80><span class="then" data-v-83ce8c80>＜</span> <span class="number" data-v-83ce8c80>ul</span><span class="then" data-v-83ce8c80>&gt;</span></div><div class="padTwo VSL" data-v-83ce8c80><span class="then" data-v-83ce8c80>＜</span> <span class="number" data-v-83ce8c80>li</span><span class="then" data-v-83ce8c80>&gt;</span> <span class="word" data-v-83ce8c80>第1個孩子</span><span class="then" data-v-83ce8c80>＜/</span> <span class="number" data-v-83ce8c80>li</span><span class="then" data-v-83ce8c80>&gt;</span><div data-v-83ce8c80></div></div><div class="padTwo VSL" data-v-83ce8c80><span class="then" data-v-83ce8c80>＜</span> <span class="number" data-v-83ce8c80>li</span><span class="then" data-v-83ce8c80>&gt;</span> <span class="word" data-v-83ce8c80>第2個孩子</span><span class="then" data-v-83ce8c80>＜/</span> <span class="number" data-v-83ce8c80>li</span><span class="then" data-v-83ce8c80>&gt;</span><div data-v-83ce8c80></div></div><div class="padTwo VSL" data-v-83ce8c80><span class="then" data-v-83ce8c80>＜</span> <span class="number" data-v-83ce8c80>li</span><span class="then" data-v-83ce8c80>&gt;</span> <span class="word" data-v-83ce8c80>第3個孩子</span><span class="then" data-v-83ce8c80>＜/</span> <span class="number" data-v-83ce8c80>li</span><span class="then" data-v-83ce8c80>&gt;</span><div data-v-83ce8c80></div></div><div class="padTwo VSL" data-v-83ce8c80><span class="then" data-v-83ce8c80>＜</span> <span class="number" data-v-83ce8c80>p</span><span class="then" data-v-83ce8c80>&gt;</span> <span class="word" data-v-83ce8c80>我不要變色</span><span class="then" data-v-83ce8c80>＜/</span> <span class="number" data-v-83ce8c80>P</span><span class="then" data-v-83ce8c80>&gt;</span><div data-v-83ce8c80></div></div><div data-v-83ce8c80><span class="then" data-v-83ce8c80>＜/</span> <span class="number" data-v-83ce8c80>ul</span><span class="then" data-v-83ce8c80>&gt;</span></div><div data-v-83ce8c80><span class="function" data-v-83ce8c80>const </span> <span class="word" data-v-83ce8c80>ul</span><span class="then" data-v-83ce8c80>=</span> <span class="word" data-v-83ce8c80>document</span><span class="variable" data-v-83ce8c80>.querySelector</span><span class="brackets" data-v-83ce8c80>(</span> <span class="src" data-v-83ce8c80>&quot;ul&quot;</span><span class="brackets" data-v-83ce8c80>)</span></div><div data-v-83ce8c80><span class="word" data-v-83ce8c80>ul</span><span class="variable" data-v-83ce8c80>.addEventListener</span><span class="brackets" data-v-83ce8c80>(</span> <span class="src" data-v-83ce8c80>&quot;click&quot;</span><span class="then" data-v-83ce8c80>,</span><span class="function" data-v-83ce8c80>function </span><span class="brackets" data-v-83ce8c80>(</span><span class="word" data-v-83ce8c80>e</span><span class="brackets" data-v-83ce8c80>){</span></div><div class="padTwo VSL" data-v-83ce8c80><span class="word" data-v-83ce8c80>alert</span> <span class="brackets" data-v-83ce8c80>(</span><span class="src" data-v-83ce8c80>&quot;點擊了&quot;</span> <span class="brackets" data-v-83ce8c80>)</span><div data-v-83ce8c80><span class="then" data-v-83ce8c80>this</span><span class="word" data-v-83ce8c80>.style.color</span><span class="then" data-v-83ce8c80>=</span> <span class="src" data-v-83ce8c80>&quot;red&quot;</span><span class="comment" data-v-83ce8c80>//發現red給父ul,全變色了</span></div><div data-v-83ce8c80><span class="comment" data-v-83ce8c80>//要知道你點了哪個元素</span></div><div data-v-83ce8c80><span class="word" data-v-83ce8c80>console</span><span class="word" data-v-83ce8c80>.log</span> <span class="brackets" data-v-83ce8c80>(</span><span class="word" data-v-83ce8c80>e</span> <span class="brackets" data-v-83ce8c80>) </span><span class="comment" data-v-83ce8c80>// 找 e.target 發現 li</span></div><div data-v-83ce8c80><span class="comment" data-v-83ce8c80>//console.log(e.target)//就是我們點擊的那個對象</span></div><div data-v-83ce8c80><span class="word" data-v-83ce8c80>e.target.style.color</span><span class="then" data-v-83ce8c80>=</span> <span class="src" data-v-83ce8c80>&quot;red&quot;</span></div><div data-v-83ce8c80><span class="comment" data-v-83ce8c80>//處理p不變色</span></div><div data-v-83ce8c80><span class="then" data-v-83ce8c80>if</span> <span class="brackets" data-v-83ce8c80>(</span><span class="word" data-v-83ce8c80>e.target.tagName</span><span class="then" data-v-83ce8c80>===</span> <span class="src" data-v-83ce8c80>&quot;LI&quot;</span><span class="brackets" data-v-83ce8c80>){</span></div><div data-v-83ce8c80></div><div class="padTwo VSL" data-v-83ce8c80><span class="word" data-v-83ce8c80>e.target.style.color</span><span class="then" data-v-83ce8c80>=</span> <span class="src" data-v-83ce8c80>&quot;red&quot;</span><div data-v-83ce8c80></div></div><div data-v-83ce8c80><span class="brackets" data-v-83ce8c80>}</span></div></div><div data-v-83ce8c80><span class="brackets" data-v-83ce8c80>})</span></div></div><p class="fz28" data-v-83ce8c80>事件委託好處?</p><p class="fz28" data-v-83ce8c80>減少註冊次數 , 提高程序性能</p><br data-v-83ce8c80><p class="fz28" data-v-83ce8c80>委託誰?</p><p class="fz28" data-v-83ce8c80>父元素</p><br data-v-83ce8c80><p class="fz28" data-v-83ce8c80>如何找真正觸發元素?</p><p class="fz28" data-v-83ce8c80>事件對象.target.tagName</p><div id="threedom002" class="articleCardTitle cor36 fz34" data-v-83ce8c80> 8.3 其他事件 </div><p class="fz28" data-v-83ce8c80>事件名: load</p><p class="fz28" data-v-83ce8c80>監聽頁面所有資源加載完畢</p><div class="bgcVS" data-v-83ce8c80><div data-v-83ce8c80><span class="comment" data-v-83ce8c80>//等待頁面所有資源加載完畢,就回去執行回調函數</span></div><div data-v-83ce8c80><span class="word" data-v-83ce8c80>window</span><span class="variable" data-v-83ce8c80>.addEventListener</span><span class="brackets" data-v-83ce8c80>(</span> <span class="src" data-v-83ce8c80>&quot;load&quot;</span><span class="then" data-v-83ce8c80>,</span><span class="function" data-v-83ce8c80>function </span><span class="brackets" data-v-83ce8c80>(){</span></div><div class="padTwo VSL" data-v-83ce8c80><span class="comment" data-v-83ce8c80>//執行操作</span><div data-v-83ce8c80></div></div><div data-v-83ce8c80><span class="brackets" data-v-83ce8c80>})</span></div><br data-v-83ce8c80><p data-v-83ce8c80>也可以針對某資源綁定 load 事件 ex圖片加載完再執行</p><div data-v-83ce8c80><span class="word" data-v-83ce8c80>img</span><span class="variable" data-v-83ce8c80>.addEventListener</span><span class="brackets" data-v-83ce8c80>(</span> <span class="src" data-v-83ce8c80>&quot;load&quot;</span><span class="then" data-v-83ce8c80>,</span><span class="function" data-v-83ce8c80>function </span><span class="brackets" data-v-83ce8c80>(){}</span></div></div><p class="fz28" data-v-83ce8c80>事件名: DOMContentLoaded</p><p class="fz28" data-v-83ce8c80> 當初使的 HTML 文檔加載解析完後 , DOMContentLoaded 事件觸發 </p><br data-v-83ce8c80><p class="fz28" data-v-83ce8c80>不用等 圖片.. ( 比 load 快 )</p><div class="bgcVS" data-v-83ce8c80><div data-v-83ce8c80><span class="word" data-v-83ce8c80>document</span><span class="variable" data-v-83ce8c80>.addEventListener</span><span class="brackets" data-v-83ce8c80>(</span><span class="src" data-v-83ce8c80>&quot;DOMContentLoaded&quot;</span><span class="then" data-v-83ce8c80>,</span><span class="function" data-v-83ce8c80>function </span><span class="brackets" data-v-83ce8c80>(){</span></div><div class="padTwo VSL" data-v-83ce8c80><span class="comment" data-v-83ce8c80>//執行操作</span><div data-v-83ce8c80></div></div><div data-v-83ce8c80><span class="brackets" data-v-83ce8c80>})</span></div></div><p class="fz28" data-v-83ce8c80>事件名: scroll</p><p class="fz28" data-v-83ce8c80>監聽整個頁面滾動</p><br data-v-83ce8c80><a class="fz28" href="https://juejin.cn/post/7056751654854459406" data-v-83ce8c80> @掘金</a><a class="fz28" href="https://stackoverflow.com/questions/21064101/understanding-offsetwidth-clientwidth-scrollwidth-and-height-respectively" data-v-83ce8c80> @stack overflow</a><a class="fz28" href="https://www.runoob.com/jsref/prop-element-scrollwidth.html" data-v-83ce8c80> @菜鳥教程</a><div class="bgcVS" data-v-83ce8c80><div data-v-83ce8c80><span class="word" data-v-83ce8c80>window</span><span class="variable" data-v-83ce8c80>.addEventListener</span><span class="brackets" data-v-83ce8c80>(</span> <span class="src" data-v-83ce8c80>&quot;scroll&quot;</span><span class="then" data-v-83ce8c80>,</span><span class="function" data-v-83ce8c80>function </span><span class="brackets" data-v-83ce8c80>(){</span></div><div class="padTwo VSL" data-v-83ce8c80><span class="word" data-v-83ce8c80>console</span><span class="variable" data-v-83ce8c80>.log</span><span class="brackets" data-v-83ce8c80>(</span> <span class="src" data-v-83ce8c80>&quot;滾動&quot;</span><span class="brackets" data-v-83ce8c80>)</span><div data-v-83ce8c80><span class="function" data-v-83ce8c80>const </span><span class="word" data-v-83ce8c80>n</span> <span class="then" data-v-83ce8c80>=</span><span class="word" data-v-83ce8c80>document</span><span class="variable" data-v-83ce8c80>.documentElement.scrollTop</span></div><div data-v-83ce8c80><span class="then" data-v-83ce8c80>if</span> <span class="brackets" data-v-83ce8c80>(</span><span class="word" data-v-83ce8c80>n</span> <span class="then" data-v-83ce8c80>&gt;=</span><span class="number" data-v-83ce8c80>100</span> <span class="brackets" data-v-83ce8c80>){</span></div><div data-v-83ce8c80></div><div class="padTwo VSL" data-v-83ce8c80><span class="word" data-v-83ce8c80>console</span><span class="variable" data-v-83ce8c80>.log</span><span class="brackets" data-v-83ce8c80>(</span><span class="src" data-v-83ce8c80>&quot;距離頂部100px&quot;</span><span class="brackets" data-v-83ce8c80>)</span><div data-v-83ce8c80></div></div><div data-v-83ce8c80><span class="brackets" data-v-83ce8c80>}</span></div></div><div data-v-83ce8c80><span class="brackets" data-v-83ce8c80>})</span></div><br data-v-83ce8c80><p data-v-83ce8c80>也可以給元素添加</p></div><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80>事件名:</p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><p class="fz28" data-v-83ce8c80></p><br data-v-83ce8c80><br data-v-83ce8c80></div></div></div>',1),J8=yn(()=>n("div",{class:"toTopButton"},[n("div",{class:"disCen"},"___"),n("div",{class:"disCen"},"▲")],-1)),W8=[J8],U8=yn(()=>n("div",{class:"toBotButton"},[n("div",{class:"disCen"},"▼"),n("div",{class:"disCen"},"￣")],-1)),K8=[U8],X8={__name:"JsPageThreeEight",setup(a){const s=ba(!1);window.addEventListener("scroll",function(){s.value=window.scrollY>0});function d(){window.scrollTo({top:0,left:0,behavior:"smooth"})}function v(){window.scrollTo({top:999999,left:0,behavior:"smooth"})}function t(e){window.scrollTo({top:document.getElementById(`${e}`).offsetTop,behavior:"smooth"})}return(e,c)=>(aa(),ta(G,null,[n("section",null,[n("div",R8,[n("div",H8,[n("div",B8,[n("div",{onClick:c[0]||(c[0]=l=>t("threedom001")),class:"leftNavText"},"事件流"),n("div",{onClick:c[1]||(c[1]=l=>t("threedom002")),class:"leftNavText"},"事件委託")])])]),D8]),n("div",null,[W(k(B,{name:"fade",tag:"div"},{default:S(()=>[n("div",{onClick:d,class:"toTop"},W8)]),_:1},512),[[U,s.value]]),W(k(B,{name:"fade",tag:"div"},{default:S(()=>[n("div",{onClick:v,class:"toBot"},K8)]),_:1},512),[[U,s.value]])])],64))}},Y8=pa(X8,[["__scopeId","data-v-83ce8c80"]]),G8="/vue-learn-js/assets/jsmission002-997d86a5.jpg";const Cn=a=>(wa("data-v-b30413f6"),a=a(),ma(),a),Q8={class:"leftNav"},Z8={class:"leftNavContainer"},ao={class:"leftNavLayout"},so=K('<div class="Main" data-v-b30413f6><div class="mainContainer" data-v-b30413f6><div class="mainLayout" data-v-b30413f6><br data-v-b30413f6><br data-v-b30413f6><p class="fz28" data-v-b30413f6>總分總</p><p class="fz28" data-v-b30413f6>1.要講哪個知識點</p><p class="fz28" data-v-b30413f6>2.細講</p><p class="fz28" data-v-b30413f6>3.總結</p><br data-v-b30413f6><br data-v-b30413f6><div id="threeajax001" class="articleCardTitle cor36 fz34" data-v-b30413f6> 9.1 AJAX </div><p class="fz28" data-v-b30413f6> AJAX 是 &quot;Asynchronous JavaScript and XML&quot;（非同步 JavaScript 和 XML）的縮寫 </p><br data-v-b30413f6><p class="fz28" data-v-b30413f6>是 使用 XMLHttpRequest 對象 與 服務器 通信</p><br data-v-b30413f6><br data-v-b30413f6><p class="fz28" data-v-b30413f6>AJAX 是 瀏覽器 與 服務器 進行 數據通信 的技術</p><p class="fz28" data-v-b30413f6> 可以在 不刷新頁面 情況下 與 服務器通信 , 交換數據 , 更新頁面 </p><div id="threeajax002" class="articleCardTitle cor36 fz34" data-v-b30413f6> 9.2 xhr , axios , fetch 基本介紹 </div><div class="bgcVS" data-v-b30413f6><div data-v-b30413f6><span class="comment" data-v-b30413f6>//原生AJAX get</span></div><div data-v-b30413f6><span class="function" data-v-b30413f6>const </span><span class="word" data-v-b30413f6>xhr</span> <span class="then" data-v-b30413f6>=</span><span class="then" data-v-b30413f6>new </span><span class="brackets" data-v-b30413f6>XMLHttpRequest</span><span class="brackets" data-v-b30413f6>()</span></div><div data-v-b30413f6><span class="word" data-v-b30413f6>xhr</span> <span class="variable" data-v-b30413f6>.open</span><span class="brackets" data-v-b30413f6>(</span> <span class="src" data-v-b30413f6>&quot;GET&quot;</span><span class="then" data-v-b30413f6>,</span> <span class="src" data-v-b30413f6>&quot;這裡放url&quot;</span><span class="brackets" data-v-b30413f6>) </span><span class="comment" data-v-b30413f6>//url後可接請求參數?name=wayne&amp;age=18</span></div><div data-v-b30413f6><span class="word" data-v-b30413f6>xhr</span> <span class="variable" data-v-b30413f6>.send</span><span class="brackets" data-v-b30413f6>()</span></div><div data-v-b30413f6><span class="word" data-v-b30413f6>xhr</span><span class="variable" data-v-b30413f6>.onreadystatechange</span><span class="then" data-v-b30413f6>=</span><span class="function" data-v-b30413f6>function </span><span class="brackets" data-v-b30413f6>(){</span></div><div class="padTwo VSL" data-v-b30413f6><span class="then" data-v-b30413f6>if</span> <span class="brackets" data-v-b30413f6>(</span><span class="word" data-v-b30413f6>xhr</span><span class="word" data-v-b30413f6>.readyState</span><span class="then" data-v-b30413f6>===</span><span class="word" data-v-b30413f6>XMLHttpRequest.DONE</span><span class="then" data-v-b30413f6>&amp;&amp;</span> <span class="word" data-v-b30413f6>xhr.status</span><span class="then" data-v-b30413f6>===</span> <span class="number" data-v-b30413f6>200</span><span class="brackets" data-v-b30413f6>){</span><div data-v-b30413f6></div><div class="padTwo VSL" data-v-b30413f6><span class="word" data-v-b30413f6>console</span><span class="variable" data-v-b30413f6>.log</span><span class="brackets" data-v-b30413f6>(</span><span class="word" data-v-b30413f6>xhr.responseText</span><span class="brackets" data-v-b30413f6>)</span><div data-v-b30413f6><span class="word" data-v-b30413f6>console</span><span class="variable" data-v-b30413f6>.log</span><span class="brackets" data-v-b30413f6>(</span><span class="brackets" data-v-b30413f6>JSON</span><span class="variable" data-v-b30413f6>.parse</span><span class="brackets" data-v-b30413f6>(</span><span class="word" data-v-b30413f6>xhr.responseText</span><span class="brackets" data-v-b30413f6>))</span></div><div data-v-b30413f6></div></div><div data-v-b30413f6><span class="brackets" data-v-b30413f6>}</span></div></div><div data-v-b30413f6><span class="brackets" data-v-b30413f6>}</span></div><br data-v-b30413f6><div data-v-b30413f6><span class="comment" data-v-b30413f6>//原生AJAX post</span></div><div data-v-b30413f6><span class="function" data-v-b30413f6>const </span><span class="word" data-v-b30413f6>xhr</span> <span class="then" data-v-b30413f6>=</span><span class="then" data-v-b30413f6>new </span><span class="brackets" data-v-b30413f6>XMLHttpRequest</span><span class="brackets" data-v-b30413f6>()</span></div><div data-v-b30413f6><span class="word" data-v-b30413f6>xhr</span> <span class="variable" data-v-b30413f6>.open</span><span class="brackets" data-v-b30413f6>(</span> <span class="src" data-v-b30413f6>&quot;POST&quot;</span><span class="then" data-v-b30413f6>,</span> <span class="src" data-v-b30413f6>&quot;這裡放url&quot;</span><span class="brackets" data-v-b30413f6>) </span></div><div data-v-b30413f6><span class="word" data-v-b30413f6>xhr</span><span class="word" data-v-b30413f6>.setRequestHeader</span><span class="brackets" data-v-b30413f6>(</span><span class="src" data-v-b30413f6>&quot;Content-Type&quot;</span><span class="then" data-v-b30413f6>,</span><span class="src" data-v-b30413f6>&quot;application/x-www-form-urlencoded&quot;</span><span class="brackets" data-v-b30413f6>)</span></div><div data-v-b30413f6><span class="word" data-v-b30413f6>xhr</span> <span class="variable" data-v-b30413f6>.send</span><span class="brackets" data-v-b30413f6>(</span><span class="src" data-v-b30413f6>&quot;name=wayne&amp;age=18&quot;</span><span class="brackets" data-v-b30413f6>)</span></div><div data-v-b30413f6><span class="word" data-v-b30413f6>xhr</span><span class="variable" data-v-b30413f6>.onreadystatechange</span><span class="then" data-v-b30413f6>=</span><span class="function" data-v-b30413f6>function </span><span class="brackets" data-v-b30413f6>(){</span></div><div class="padTwo VSL" data-v-b30413f6><span class="then" data-v-b30413f6>if</span> <span class="brackets" data-v-b30413f6>(</span><span class="word" data-v-b30413f6>xhr</span><span class="word" data-v-b30413f6>.readyState</span><span class="then" data-v-b30413f6>===</span><span class="word" data-v-b30413f6>XMLHttpRequest.DONE</span><span class="then" data-v-b30413f6>&amp;&amp;</span> <span class="word" data-v-b30413f6>xhr.status</span><span class="then" data-v-b30413f6>===</span> <span class="number" data-v-b30413f6>200</span><span class="brackets" data-v-b30413f6>){</span><div data-v-b30413f6></div><div class="padTwo VSL" data-v-b30413f6><span class="word" data-v-b30413f6>console</span><span class="variable" data-v-b30413f6>.log</span><span class="brackets" data-v-b30413f6>(</span><span class="word" data-v-b30413f6>xhr.responseText</span><span class="brackets" data-v-b30413f6>)</span><div data-v-b30413f6><span class="word" data-v-b30413f6>console</span><span class="variable" data-v-b30413f6>.log</span><span class="brackets" data-v-b30413f6>(</span><span class="brackets" data-v-b30413f6>JSON</span><span class="variable" data-v-b30413f6>.parse</span><span class="brackets" data-v-b30413f6>(</span><span class="word" data-v-b30413f6>xhr.responseText</span><span class="brackets" data-v-b30413f6>))</span></div><div data-v-b30413f6></div></div><div data-v-b30413f6><span class="brackets" data-v-b30413f6>}</span></div></div><div data-v-b30413f6><span class="brackets" data-v-b30413f6>}</span></div><br data-v-b30413f6><br data-v-b30413f6><div data-v-b30413f6><span class="comment" data-v-b30413f6>//axios get</span></div><div data-v-b30413f6><span class="then" data-v-b30413f6>＜</span> <span class="number" data-v-b30413f6>script </span><span class="function" data-v-b30413f6>src</span> <span class="then" data-v-b30413f6>=</span><span class="src" data-v-b30413f6>&quot;axios.min.js&quot;</span><span class="then" data-v-b30413f6>&gt;＜/ </span><span class="number" data-v-b30413f6>script </span> <span class="then" data-v-b30413f6>&gt;</span></div><br data-v-b30413f6><div data-v-b30413f6><span class="variable" data-v-b30413f6>axios</span><span class="variable" data-v-b30413f6>.get</span><span class="brackets" data-v-b30413f6>(</span><span class="src" data-v-b30413f6>&quot;這裡放url&quot;</span><span class="brackets" data-v-b30413f6>)</span></div><br data-v-b30413f6><div data-v-b30413f6><span class="comment" data-v-b30413f6>//async + axios</span></div><div data-v-b30413f6><span class="function" data-v-b30413f6>async </span><span class="brackets" data-v-b30413f6>() </span><span class="function" data-v-b30413f6>=&gt; </span> <span class="brackets" data-v-b30413f6>{</span></div><div class="padTwo VSL" data-v-b30413f6><span class="function" data-v-b30413f6>const </span><span class="word" data-v-b30413f6>res</span> <span class="then" data-v-b30413f6>=</span><span class="then" data-v-b30413f6>await </span><span class="variable" data-v-b30413f6>axios</span><span class="variable" data-v-b30413f6>.get</span><span class="brackets" data-v-b30413f6>(</span><span class="src" data-v-b30413f6>&quot;這裡放url可帶請求參數?name=wayne&amp;age=18&quot;</span><span class="brackets" data-v-b30413f6>)</span><div data-v-b30413f6><span class="word" data-v-b30413f6>console</span><span class="variable" data-v-b30413f6>.log</span><span class="brackets" data-v-b30413f6>(</span><span class="word" data-v-b30413f6>res.data</span><span class="brackets" data-v-b30413f6>)</span></div><div data-v-b30413f6></div></div><div data-v-b30413f6><span class="brackets" data-v-b30413f6>}</span></div><br data-v-b30413f6><div data-v-b30413f6><span class="comment" data-v-b30413f6>//請求參數可以寫在params</span></div><div data-v-b30413f6><span class="function" data-v-b30413f6>async </span><span class="brackets" data-v-b30413f6>() </span><span class="function" data-v-b30413f6>=&gt; </span> <span class="brackets" data-v-b30413f6>{</span></div><div class="padTwo VSL" data-v-b30413f6><span class="function" data-v-b30413f6>const </span><span class="word" data-v-b30413f6>res</span> <span class="then" data-v-b30413f6>=</span><span class="then" data-v-b30413f6>await </span><span class="variable" data-v-b30413f6>axios</span><span class="variable" data-v-b30413f6>.get</span><span class="brackets" data-v-b30413f6>(</span><span class="src" data-v-b30413f6>&quot;這裡放url&quot;</span> <span class="then" data-v-b30413f6>,</span><span class="brackets" data-v-b30413f6>{</span><div data-v-b30413f6></div><div class="padTwo VSL" data-v-b30413f6><span class="word" data-v-b30413f6>params:</span><span class="brackets" data-v-b30413f6>{</span><div data-v-b30413f6></div><div class="padTwo VSL" data-v-b30413f6><span class="word" data-v-b30413f6>name:</span><span class="src" data-v-b30413f6>&quot;wayne&quot;</span> <span class="then" data-v-b30413f6>,</span><div data-v-b30413f6><span class="word" data-v-b30413f6>age:</span><span class="number" data-v-b30413f6>18</span></div><div data-v-b30413f6></div></div><div data-v-b30413f6><span class="brackets" data-v-b30413f6>}</span></div></div><div data-v-b30413f6><span class="brackets" data-v-b30413f6>})</span></div><div data-v-b30413f6><span class="word" data-v-b30413f6>console</span><span class="variable" data-v-b30413f6>.log</span><span class="brackets" data-v-b30413f6>(</span><span class="word" data-v-b30413f6>res.data</span><span class="brackets" data-v-b30413f6>)</span></div></div><div data-v-b30413f6><span class="brackets" data-v-b30413f6>}</span></div><br data-v-b30413f6><div data-v-b30413f6><span class="comment" data-v-b30413f6>//axios post</span></div><div data-v-b30413f6><span class="function" data-v-b30413f6>async </span><span class="brackets" data-v-b30413f6>() </span><span class="function" data-v-b30413f6>=&gt; </span> <span class="brackets" data-v-b30413f6>{</span></div><div class="padTwo VSL" data-v-b30413f6><span class="function" data-v-b30413f6>const </span><span class="word" data-v-b30413f6>res</span> <span class="then" data-v-b30413f6>=</span><span class="then" data-v-b30413f6>await </span><span class="variable" data-v-b30413f6>axios</span><span class="variable" data-v-b30413f6>.post</span><span class="brackets" data-v-b30413f6>(</span><span class="src" data-v-b30413f6>&quot;這裡放url&quot;</span> <span class="then" data-v-b30413f6>,</span><span class="brackets" data-v-b30413f6>{</span><div data-v-b30413f6></div><div class="padTwo VSL" data-v-b30413f6><span class="word" data-v-b30413f6>name:</span><span class="src" data-v-b30413f6>&quot;wayne&quot;</span> <span class="then" data-v-b30413f6>,</span><div data-v-b30413f6><span class="word" data-v-b30413f6>age:</span><span class="number" data-v-b30413f6>18</span></div></div><div data-v-b30413f6><span class="brackets" data-v-b30413f6>})</span></div><div data-v-b30413f6><span class="word" data-v-b30413f6>console</span><span class="variable" data-v-b30413f6>.log</span><span class="brackets" data-v-b30413f6>(</span><span class="word" data-v-b30413f6>res.data</span><span class="brackets" data-v-b30413f6>)</span></div></div><div data-v-b30413f6><span class="brackets" data-v-b30413f6>}</span></div><br data-v-b30413f6><div data-v-b30413f6><span class="comment" data-v-b30413f6>//axios 請求攔截器</span></div><div data-v-b30413f6><span class="function" data-v-b30413f6>async </span><span class="brackets" data-v-b30413f6>() </span><span class="function" data-v-b30413f6>=&gt; </span> <span class="brackets" data-v-b30413f6>{</span></div><div class="padTwo VSL" data-v-b30413f6><div data-v-b30413f6><span class="comment" data-v-b30413f6>//只要發送請求 都會經過請求攔截器 處理</span></div><div data-v-b30413f6><span class="variable" data-v-b30413f6>axios.interceptors.request.use</span><span class="brackets" data-v-b30413f6>(</span><span class="word" data-v-b30413f6>config</span><span class="function" data-v-b30413f6>=&gt; </span><span class="brackets" data-v-b30413f6>{</span></div><div class="padTwo VSL" data-v-b30413f6><span class="word" data-v-b30413f6>console</span><span class="variable" data-v-b30413f6>.log</span><span class="brackets" data-v-b30413f6>(</span><span class="src" data-v-b30413f6>&quot;發送了請求&quot;</span><span class="brackets" data-v-b30413f6>)</span><div data-v-b30413f6><span class="then" data-v-b30413f6>return </span><span class="word" data-v-b30413f6>config</span></div><div data-v-b30413f6></div></div><div data-v-b30413f6><span class="brackets" data-v-b30413f6>})</span></div><br data-v-b30413f6><div data-v-b30413f6><span class="comment" data-v-b30413f6>//響應攔截器</span></div><div data-v-b30413f6><span class="variable" data-v-b30413f6>axios.interceptors.response,use</span><span class="brackets" data-v-b30413f6>(</span> <span class="word" data-v-b30413f6>res</span><span class="function" data-v-b30413f6>=&gt; </span><span class="brackets" data-v-b30413f6>{</span></div><div class="padTwo VSL" data-v-b30413f6><span class="then" data-v-b30413f6>return </span> <span class="word" data-v-b30413f6>res</span><div data-v-b30413f6></div></div><div data-v-b30413f6><span class="brackets" data-v-b30413f6>})</span></div><span class="function" data-v-b30413f6>const </span><span class="word" data-v-b30413f6>res</span> <span class="then" data-v-b30413f6>=</span><span class="then" data-v-b30413f6>await </span><span class="variable" data-v-b30413f6>axios</span><span class="variable" data-v-b30413f6>.get</span><span class="brackets" data-v-b30413f6>(</span><span class="src" data-v-b30413f6>&quot;這裡放url可帶請求參數?name=wayne&amp;age=18&quot;</span><span class="brackets" data-v-b30413f6>)</span><div data-v-b30413f6><span class="word" data-v-b30413f6>console</span><span class="variable" data-v-b30413f6>.log</span><span class="brackets" data-v-b30413f6>(</span><span class="word" data-v-b30413f6>res.data</span><span class="brackets" data-v-b30413f6>)</span></div><div data-v-b30413f6></div></div><div data-v-b30413f6><span class="brackets" data-v-b30413f6>}</span></div><br data-v-b30413f6><div data-v-b30413f6><span class="comment" data-v-b30413f6>//fetch 返回一個 promise</span></div><div data-v-b30413f6><span class="variable" data-v-b30413f6>fetch</span><span class="brackets" data-v-b30413f6>(</span><span class="src" data-v-b30413f6>&quot;這裡放url可帶請求參數?name=wayne&amp;age=18&quot;</span><span class="brackets" data-v-b30413f6>)</span></div><div class="padTwo VSL" data-v-b30413f6><span class="variable" data-v-b30413f6>.then</span><span class="brackets" data-v-b30413f6>(</span> <span class="word" data-v-b30413f6>res</span><span class="function" data-v-b30413f6>=&gt; </span> <span class="brackets" data-v-b30413f6>{</span><div data-v-b30413f6></div><div class="padTwo VSL" data-v-b30413f6><span class="then" data-v-b30413f6>if</span> <span class="brackets" data-v-b30413f6>(</span><span class="word" data-v-b30413f6>res</span> <span class="variable" data-v-b30413f6>.ok</span><span class="brackets" data-v-b30413f6>){</span><div data-v-b30413f6></div><div class="padTwo VSL" data-v-b30413f6><span class="then" data-v-b30413f6>return </span><span class="word" data-v-b30413f6>res</span><span class="variable" data-v-b30413f6>.json</span><span class="brackets" data-v-b30413f6>()</span></div><div data-v-b30413f6><span class="brackets" data-v-b30413f6>}</span></div></div><div data-v-b30413f6><span class="brackets" data-v-b30413f6>})</span></div><div data-v-b30413f6><span class="variable" data-v-b30413f6>.then</span><span class="brackets" data-v-b30413f6>(</span> <span class="word" data-v-b30413f6>data</span><span class="function" data-v-b30413f6>=&gt; </span><span class="brackets" data-v-b30413f6>{</span></div><div class="padTwo VSL" data-v-b30413f6><span class="word" data-v-b30413f6>console</span><span class="variable" data-v-b30413f6>.log</span><span class="brackets" data-v-b30413f6>(</span> <span class="word" data-v-b30413f6>data</span><span class="brackets" data-v-b30413f6>)</span><div data-v-b30413f6></div></div><div data-v-b30413f6><span class="brackets" data-v-b30413f6>})</span></div><br data-v-b30413f6></div><div data-v-b30413f6><span class="comment" data-v-b30413f6>//fetch 做 post</span></div><div data-v-b30413f6><span class="variable" data-v-b30413f6>fetch</span><span class="brackets" data-v-b30413f6>(</span><span class="src" data-v-b30413f6>&quot;這裡放url&quot;</span><span class="brackets" data-v-b30413f6>, {</span></div><div class="padTwo VSL" data-v-b30413f6><div data-v-b30413f6><span class="word" data-v-b30413f6>method:</span><span class="src" data-v-b30413f6>&quot;POST&quot;</span> <span class="then" data-v-b30413f6>,</span></div><div data-v-b30413f6><span class="word" data-v-b30413f6>headers: </span><span class="brackets" data-v-b30413f6>{</span></div><div class="padTwo VSL" data-v-b30413f6><span class="src" data-v-b30413f6>&quot;Content-Type&quot;</span><span class="then" data-v-b30413f6>: </span><span class="src" data-v-b30413f6>&quot;application/json&quot;</span><div data-v-b30413f6></div></div><div data-v-b30413f6><span class="brackets" data-v-b30413f6>},</span></div><div data-v-b30413f6><span class="word" data-v-b30413f6>body:</span><span class="brackets" data-v-b30413f6>JSON</span><span class="variable" data-v-b30413f6>.stringify</span><span class="brackets" data-v-b30413f6>({</span></div><div class="padTwo VSL" data-v-b30413f6><span class="word" data-v-b30413f6>name:</span><span class="src" data-v-b30413f6>&quot;wayne&quot;</span> <span class="then" data-v-b30413f6>,</span><div data-v-b30413f6><span class="word" data-v-b30413f6>age:</span><span class="number" data-v-b30413f6>18</span></div><div data-v-b30413f6></div></div><div data-v-b30413f6><span class="brackets" data-v-b30413f6>})</span></div></div><div data-v-b30413f6><span class="brackets" data-v-b30413f6>})</span></div><br data-v-b30413f6><div class="padTwo VSL" data-v-b30413f6><span class="variable" data-v-b30413f6>.then</span><span class="brackets" data-v-b30413f6>(</span> <span class="word" data-v-b30413f6>res</span><span class="function" data-v-b30413f6>=&gt; </span><span class="brackets" data-v-b30413f6>{</span><div data-v-b30413f6></div><div class="padTwo VSL" data-v-b30413f6><span class="then" data-v-b30413f6>if</span> <span class="brackets" data-v-b30413f6>(</span><span class="word" data-v-b30413f6>res</span><span class="variable" data-v-b30413f6>.ok</span><span class="brackets" data-v-b30413f6>){</span><div data-v-b30413f6></div><div class="padTwo VSL" data-v-b30413f6><span class="then" data-v-b30413f6>return </span><span class="word" data-v-b30413f6>res</span><span class="variable" data-v-b30413f6>.json</span><span class="brackets" data-v-b30413f6>()</span></div><div data-v-b30413f6><span class="brackets" data-v-b30413f6>}</span></div></div><div data-v-b30413f6><span class="brackets" data-v-b30413f6>})</span></div><div data-v-b30413f6><span class="variable" data-v-b30413f6>.then</span><span class="brackets" data-v-b30413f6>(</span> <span class="word" data-v-b30413f6>data</span><span class="function" data-v-b30413f6>=&gt; </span><span class="brackets" data-v-b30413f6>{</span></div><div class="padTwo VSL" data-v-b30413f6><span class="word" data-v-b30413f6>console</span><span class="variable" data-v-b30413f6>.log</span><span class="brackets" data-v-b30413f6>(</span> <span class="word" data-v-b30413f6>data</span><span class="brackets" data-v-b30413f6>)</span><div data-v-b30413f6></div></div><div data-v-b30413f6><span class="brackets" data-v-b30413f6>})</span></div></div></div><div id="threeajax003" class="articleCardTitle cor36 fz34" data-v-b30413f6> 9.3 axios </div><a class="fz28" href="https://www.axios-http.cn/" data-v-b30413f6>@ axios</a><div class="bgcVS" data-v-b30413f6><div data-v-b30413f6><span class="then" data-v-b30413f6>＜</span> <span class="number" data-v-b30413f6>script</span><span class="word" data-v-b30413f6></span> <span class="word" data-v-b30413f6>src</span><span class="then" data-v-b30413f6>=</span><span class="src" data-v-b30413f6>&quot;https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js&quot;</span><span class="then" data-v-b30413f6>&gt;＜/ </span><span class="number" data-v-b30413f6>script</span> <span class="then" data-v-b30413f6>&gt;</span></div><div data-v-b30413f6><span class="variable" data-v-b30413f6>axios</span><span class="brackets" data-v-b30413f6>({</span></div><div class="padTwo VSL" data-v-b30413f6><span class="word" data-v-b30413f6>url:</span><span class="src" data-v-b30413f6>&quot;https://randomuser.me/api/&quot;</span><div data-v-b30413f6></div></div><div data-v-b30413f6><span class="brackets" data-v-b30413f6>})</span><span class="variable" data-v-b30413f6>.then</span><span class="brackets" data-v-b30413f6>( ( </span><span class="word" data-v-b30413f6>result </span> <span class="brackets" data-v-b30413f6>)</span><span class="function" data-v-b30413f6>=&gt;</span> <span class="brackets" data-v-b30413f6>{</span></div><div class="padTwo VSL" data-v-b30413f6><span class="word" data-v-b30413f6>console.</span><span class="variable" data-v-b30413f6>log</span> <span class="brackets" data-v-b30413f6>(</span><span class="word" data-v-b30413f6>result</span> <span class="brackets" data-v-b30413f6>)</span><div data-v-b30413f6></div></div><div data-v-b30413f6><span class="brackets" data-v-b30413f6>})</span></div></div><p class="fz28" data-v-b30413f6>什麼是 URL</p><p class="fz28" data-v-b30413f6>統一資源定位符 , 簡稱 網址 , 用於訪問 網路上 資源</p><br data-v-b30413f6><div data-v-b30413f6><span class="number fz30" data-v-b30413f6>http://</span><span class="variable fz30" data-v-b30413f6>randomuser.me</span><span class="src fz30" data-v-b30413f6>/api/</span></div><div data-v-b30413f6><span class="number fz30" data-v-b30413f6>協議</span><span class="cor17" data-v-b30413f6>......</span><span class="variable fz30" data-v-b30413f6>域名</span><span class="cor17" data-v-b30413f6>..................</span><span class="src fz30" data-v-b30413f6>資源路徑</span></div><br data-v-b30413f6><br data-v-b30413f6><p class="fz28" data-v-b30413f6>http 協議</p><p class="fz28" data-v-b30413f6> 超文本傳輸協議 , 規定瀏覽器和服務器之間傳輸數據的格式 </p><br data-v-b30413f6><br data-v-b30413f6><p class="fz28" data-v-b30413f6>域名</p><p class="fz28" data-v-b30413f6>標記服務器在互聯網中方位</p><br data-v-b30413f6><br data-v-b30413f6><p class="fz28" data-v-b30413f6>URL 查詢參數</p><p class="fz28" data-v-b30413f6> 瀏覽器 提供給 服務器的 額外訊息 , 讓 服務器 返回 瀏覽器 想要的 數據 </p><p class="fz28" data-v-b30413f6> http//test.com/test/test<span class="number" data-v-b30413f6>?參數名1=值1&amp;參數名2=值2</span></p><div class="bgcVS" data-v-b30413f6><p data-v-b30413f6>axios 查詢參數</p><p data-v-b30413f6>axios 會把參數名和值 , 拼接到 url?參數名=值</p><div data-v-b30413f6><span class="variable" data-v-b30413f6>axios</span><span class="brackets" data-v-b30413f6>({</span></div><div class="padTwo VSL" data-v-b30413f6><span class="word" data-v-b30413f6>url:</span><span class="src" data-v-b30413f6>&quot;https://randomuser.me/api/&quot;</span><div data-v-b30413f6></div></div><div class="padTwo VSL" data-v-b30413f6><span class="word" data-v-b30413f6>params:</span> <span class="brackets" data-v-b30413f6>{</span><div data-v-b30413f6><div class="padTwo VSL" data-v-b30413f6><span class="word" data-v-b30413f6>參數名:值</span><div data-v-b30413f6></div></div><div data-v-b30413f6><span class="brackets" data-v-b30413f6>}</span></div></div></div><div data-v-b30413f6><span class="brackets" data-v-b30413f6>})</span><span class="variable" data-v-b30413f6>.then</span><span class="brackets" data-v-b30413f6>( ( </span><span class="word" data-v-b30413f6>result </span> <span class="brackets" data-v-b30413f6>)</span><span class="function" data-v-b30413f6>=&gt;</span> <span class="brackets" data-v-b30413f6>{</span></div><div class="padTwo VSL" data-v-b30413f6><span class="word" data-v-b30413f6>console.</span><span class="variable" data-v-b30413f6>log</span> <span class="brackets" data-v-b30413f6>(</span><span class="word" data-v-b30413f6>result</span> <span class="brackets" data-v-b30413f6>)</span><div data-v-b30413f6></div></div><div data-v-b30413f6><span class="brackets" data-v-b30413f6>})</span></div></div><p class="fz28" data-v-b30413f6>請求方法: 對服務器資源 , 要執行的操作</p><p class="fz28" data-v-b30413f6>GET _ 獲取數據</p><p class="fz28" data-v-b30413f6>POST _ 提交數據</p><p class="fz28" data-v-b30413f6>PUT _ 修改數據 ( 全部 )</p><p class="fz28" data-v-b30413f6>DELETE _ 刪除數據</p><p class="fz28" data-v-b30413f6>PATCH _ 修改數據 ( 部分 )</p><div class="bgcVS" data-v-b30413f6><p data-v-b30413f6>axios 請求數據 + 查詢參數</p><p data-v-b30413f6>axios 會把參數名和值 , 拼接到 url?參數名=值</p><div data-v-b30413f6><span class="variable" data-v-b30413f6>axios</span><span class="brackets" data-v-b30413f6>({</span></div><div class="padTwo VSL" data-v-b30413f6><span class="word" data-v-b30413f6>url:</span><span class="src" data-v-b30413f6>&quot;https://randomuser.me/api/&quot;</span><div data-v-b30413f6></div></div><div class="padTwo VSL" data-v-b30413f6><div data-v-b30413f6><span class="word" data-v-b30413f6>method:</span><span class="src" data-v-b30413f6>&quot;請求方法&quot;</span></div><span class="word" data-v-b30413f6>params:</span> <span class="brackets" data-v-b30413f6>{</span><div data-v-b30413f6><div class="padTwo VSL" data-v-b30413f6><span class="word" data-v-b30413f6>參數名:值</span><div data-v-b30413f6></div></div><div data-v-b30413f6><span class="brackets" data-v-b30413f6>}</span></div></div></div><div data-v-b30413f6><span class="brackets" data-v-b30413f6>})</span><span class="variable" data-v-b30413f6>.then</span><span class="brackets" data-v-b30413f6>( ( </span><span class="word" data-v-b30413f6>result </span> <span class="brackets" data-v-b30413f6>)</span><span class="function" data-v-b30413f6>=&gt;</span> <span class="brackets" data-v-b30413f6>{</span></div><div class="padTwo VSL" data-v-b30413f6><span class="word" data-v-b30413f6>console.</span><span class="variable" data-v-b30413f6>log</span> <span class="brackets" data-v-b30413f6>(</span><span class="word" data-v-b30413f6>result</span> <span class="brackets" data-v-b30413f6>)</span><div data-v-b30413f6></div></div><div data-v-b30413f6><span class="brackets" data-v-b30413f6>})</span></div><br data-v-b30413f6><p data-v-b30413f6>axios 提交數據到服務器</p><br data-v-b30413f6><div data-v-b30413f6><span class="then" data-v-b30413f6>＜</span> <span class="number" data-v-b30413f6>button </span><span class="function" data-v-b30413f6>class </span> <span class="then" data-v-b30413f6>=</span><span class="src" data-v-b30413f6>&quot;btn&quot;</span> <span class="then" data-v-b30413f6>&gt;</span><span class="word" data-v-b30413f6>註冊</span> <span class="then" data-v-b30413f6>＜/</span><span class="number" data-v-b30413f6>button</span> <span class="then" data-v-b30413f6>&gt;</span></div><div data-v-b30413f6><span class="word" data-v-b30413f6>document</span><span class="variable" data-v-b30413f6>.querySelector</span><span class="brackets" data-v-b30413f6>(</span> <span class="src" data-v-b30413f6>&quot;.btn&quot;</span><span class="brackets" data-v-b30413f6>)</span><span class="word" data-v-b30413f6>.addEventListener</span><span class="brackets" data-v-b30413f6>(</span> <span class="src" data-v-b30413f6>&quot;click&quot;</span><span class="then" data-v-b30413f6>,</span> <span class="brackets" data-v-b30413f6>()</span><span class="function" data-v-b30413f6>=&gt;</span> <span class="brackets" data-v-b30413f6>{</span></div><div class="padTwo VSL" data-v-b30413f6><span class="variable" data-v-b30413f6>axios</span><span class="brackets" data-v-b30413f6>({</span><div data-v-b30413f6><div class="padTwo VSL" data-v-b30413f6><span class="word" data-v-b30413f6>url:</span> <span class="src" data-v-b30413f6>&quot;&quot;,</span><div data-v-b30413f6><span class="word" data-v-b30413f6>method:</span><span class="src" data-v-b30413f6>&quot;post&quot;, </span><span class="comment" data-v-b30413f6>// 提交數據</span></div><div data-v-b30413f6><span class="word" data-v-b30413f6>data:</span><span class="brackets" data-v-b30413f6>{</span></div><div class="padTwo VSL" data-v-b30413f6><div data-v-b30413f6><div data-v-b30413f6><span class="word" data-v-b30413f6>username:</span><span class="src" data-v-b30413f6>&quot;&quot;,</span></div><div data-v-b30413f6><span class="word" data-v-b30413f6>password:</span><span class="src" data-v-b30413f6>&quot;&quot;</span></div></div></div><div data-v-b30413f6><span class="brackets" data-v-b30413f6>}</span></div></div></div></div><div class="padTwo VSL" data-v-b30413f6><span class="brackets" data-v-b30413f6>})</span><span class="variable" data-v-b30413f6>.then</span><span class="brackets" data-v-b30413f6>((</span> <span class="word" data-v-b30413f6>result</span><span class="brackets" data-v-b30413f6>)</span> <span class="function" data-v-b30413f6>=&gt;</span><span class="brackets" data-v-b30413f6>{</span><div data-v-b30413f6><div class="padTwo VSL" data-v-b30413f6><span class="word" data-v-b30413f6>console.</span><span class="variable" data-v-b30413f6>log</span><span class="brackets" data-v-b30413f6>(</span><span class="word" data-v-b30413f6>result</span><span class="brackets" data-v-b30413f6>)</span><div data-v-b30413f6></div></div><div data-v-b30413f6><span class="brackets" data-v-b30413f6>})</span></div></div></div><div data-v-b30413f6><span class="brackets" data-v-b30413f6>})</span></div><br data-v-b30413f6><p data-v-b30413f6>axios 錯誤處理</p><p data-v-b30413f6> 在 then 方法後面 , 調用 catch 方法 , 傳入 回掉函數 並定義 形參 </p><br data-v-b30413f6><p data-v-b30413f6></p><br data-v-b30413f6><div data-v-b30413f6><span class="then" data-v-b30413f6>＜</span> <span class="number" data-v-b30413f6>button </span><span class="function" data-v-b30413f6>class </span> <span class="then" data-v-b30413f6>=</span><span class="src" data-v-b30413f6>&quot;btn&quot;</span> <span class="then" data-v-b30413f6>&gt;</span><span class="word" data-v-b30413f6>註冊</span> <span class="then" data-v-b30413f6>＜/</span><span class="number" data-v-b30413f6>button</span> <span class="then" data-v-b30413f6>&gt;</span></div><div data-v-b30413f6><span class="word" data-v-b30413f6>document</span><span class="variable" data-v-b30413f6>.querySelector</span><span class="brackets" data-v-b30413f6>(</span> <span class="src" data-v-b30413f6>&quot;.btn&quot;</span><span class="brackets" data-v-b30413f6>)</span><span class="word" data-v-b30413f6>.addEventListener</span><span class="brackets" data-v-b30413f6>(</span> <span class="src" data-v-b30413f6>&quot;click&quot;</span><span class="then" data-v-b30413f6>,</span> <span class="brackets" data-v-b30413f6>()</span><span class="function" data-v-b30413f6>=&gt;</span> <span class="brackets" data-v-b30413f6>{</span></div><div class="padTwo VSL" data-v-b30413f6><span class="variable" data-v-b30413f6>axios</span><span class="brackets" data-v-b30413f6>({</span><div data-v-b30413f6><div class="padTwo VSL" data-v-b30413f6><span class="word" data-v-b30413f6>url:</span> <span class="src" data-v-b30413f6>&quot;&quot;,</span><div data-v-b30413f6><span class="word" data-v-b30413f6>method:</span><span class="src" data-v-b30413f6>&quot;post&quot;,</span><span class="comment" data-v-b30413f6>// 提交數據</span></div><div data-v-b30413f6><span class="word" data-v-b30413f6>data:</span><span class="brackets" data-v-b30413f6>{</span></div><div class="padTwo VSL" data-v-b30413f6><div data-v-b30413f6><div data-v-b30413f6><span class="word" data-v-b30413f6>username:</span><span class="src" data-v-b30413f6>&quot;&quot;,</span></div><div data-v-b30413f6><span class="word" data-v-b30413f6>password:</span><span class="src" data-v-b30413f6>&quot;&quot;</span></div></div></div><div data-v-b30413f6><span class="brackets" data-v-b30413f6>}</span></div></div></div></div><div class="padTwo VSL" data-v-b30413f6><span class="brackets" data-v-b30413f6>})</span><span class="variable" data-v-b30413f6>.then</span><span class="brackets" data-v-b30413f6>((</span> <span class="word" data-v-b30413f6>result</span><span class="brackets" data-v-b30413f6>)</span> <span class="function" data-v-b30413f6>=&gt;</span><span class="brackets" data-v-b30413f6>{</span><div data-v-b30413f6><div class="padTwo VSL" data-v-b30413f6><span class="word" data-v-b30413f6>console.</span><span class="variable" data-v-b30413f6>log</span><span class="brackets" data-v-b30413f6>(</span><span class="word" data-v-b30413f6>result</span><span class="brackets" data-v-b30413f6>)</span><div data-v-b30413f6></div></div><div data-v-b30413f6><span class="brackets" data-v-b30413f6>})</span><span class="variable" data-v-b30413f6>.catch</span><span class="brackets" data-v-b30413f6>( ( </span><span class="variable" data-v-b30413f6>error </span><span class="brackets" data-v-b30413f6>)</span><span class="function" data-v-b30413f6>=&gt;</span><span class="brackets" data-v-b30413f6>{</span></div><div class="padTwo VSL" data-v-b30413f6><span class="comment" data-v-b30413f6>//處理報錯訊息</span><div data-v-b30413f6><span class="word" data-v-b30413f6>console</span><span class="word" data-v-b30413f6>.log</span><span class="brackets" data-v-b30413f6>(</span><span class="variable" data-v-b30413f6>error</span><span class="brackets" data-v-b30413f6>)</span></div><div data-v-b30413f6></div></div><div data-v-b30413f6><span class="brackets" data-v-b30413f6>})</span></div></div></div><div data-v-b30413f6><span class="brackets" data-v-b30413f6>})</span></div><br data-v-b30413f6></div><p class="fz28" data-v-b30413f6>HTTP 協議 請求報文</p><p class="fz28" data-v-b30413f6> 請求報文: 瀏覽器 按照 HTTP 協議要求的格式 , 發給 服務器 的內容 </p><br data-v-b30413f6><p class="fz28" data-v-b30413f6>1 | POST http://test.com/URL網址... HTTP/1.1</p><p class="fz28" data-v-b30413f6>2 | ...</p><p class="fz28" data-v-b30413f6>3 | ...</p><p class="fz28" data-v-b30413f6>4 | ...</p><p class="fz28" data-v-b30413f6>5 | ...</p><p class="fz28" data-v-b30413f6>6 | ...</p><p class="fz28" data-v-b30413f6>7 | Content-Type : application/json</p><p class="fz28" data-v-b30413f6>8 | ...</p><p class="fz28" data-v-b30413f6>9 | ...</p><p class="fz28" data-v-b30413f6>10| ...</p><p class="fz28" data-v-b30413f6>11| ...</p><p class="fz28" data-v-b30413f6>12|</p><p class="fz28" data-v-b30413f6>13| { &quot;username&quot;:&quot;admin&quot;,&quot;password&quot;:&quot;123465&quot; }</p><br data-v-b30413f6><br data-v-b30413f6><p class="fz28" data-v-b30413f6>請求報文 4 部分</p><p class="fz28" data-v-b30413f6>1. 請求行: 請求方法 , URL , 協議</p><p class="fz28" data-v-b30413f6> 2. 請求頭: 以鍵值對的格式攜帶的附加訊息 ex Content-Type </p><p class="fz28" data-v-b30413f6>3. 空行: 分割請求頭 , 空行之後是發送給服務器的資源</p><p class="fz28" data-v-b30413f6>4. 請求體: 發送的資源</p><br data-v-b30413f6><br data-v-b30413f6><p class="fz28" data-v-b30413f6>HTTP 協議 響應報文</p><p class="fz28" data-v-b30413f6> 響應報文: 服務器 按照 HTP 協議要求的格式 , 返回給 瀏覽器 的內容 </p><br data-v-b30413f6><br data-v-b30413f6><p class="fz28" data-v-b30413f6>響應報文 4 部分</p><p class="fz28" data-v-b30413f6>1. 響應行: 協議 , HTTP 響應狀態碼 , 狀態訊息</p><p class="fz28" data-v-b30413f6> 2. 響應頭: 以鍵值對的格式攜帶的附加訊息 ex Content-Type </p><p class="fz28" data-v-b30413f6>3. 空行: 分割響應頭 , 空行之後是服務器返回的資源</p><p class="fz28" data-v-b30413f6>4. 請求體: 返回的資源</p><br data-v-b30413f6><br data-v-b30413f6><p class="fz28" data-v-b30413f6>1 | HTTP/1.1 400 Bad Request</p><p class="fz28" data-v-b30413f6>2 | ...</p><p class="fz28" data-v-b30413f6>3 | ...</p><p class="fz28" data-v-b30413f6>4 | Content-Type: application/json</p><p class="fz28" data-v-b30413f6>5 | ...</p><p class="fz28" data-v-b30413f6>6 | ...</p><p class="fz28" data-v-b30413f6>7 | ...</p><p class="fz28" data-v-b30413f6>8 | ...</p><p class="fz28" data-v-b30413f6>9 | ...</p><p class="fz28" data-v-b30413f6>10| ...</p><p class="fz28" data-v-b30413f6>11| ...</p><p class="fz28" data-v-b30413f6>12| ...</p><p class="fz28" data-v-b30413f6>13| ...</p><p class="fz28" data-v-b30413f6>14| ...</p><p class="fz28" data-v-b30413f6>15|</p><p class="fz28" data-v-b30413f6>16| {&quot;code&quot;:123456,&quot;message&quot;:&quot;test&quot;}</p><br data-v-b30413f6><br data-v-b30413f6><p class="fz28" data-v-b30413f6>HTTP 響應狀態碼</p><p class="fz28" data-v-b30413f6>1XX ... 訊息</p><p class="fz28" data-v-b30413f6>2XX ... 成功</p><p class="fz28" data-v-b30413f6>3XX ... 重定向</p><p class="fz28" data-v-b30413f6>4XX ... 客戶端錯誤</p><p class="fz28" data-v-b30413f6>5XX ... 服務端錯誤</p><br data-v-b30413f6><br data-v-b30413f6><p class="fz28" data-v-b30413f6>404 服務器找不到資源</p><br data-v-b30413f6><br data-v-b30413f6><p class="fz28" data-v-b30413f6>接口文檔</p><p class="fz28" data-v-b30413f6> 接口: 使用 AJAX 和 服務器通訊時 , 使用的 URL , 請求方法 , 參數 </p><br data-v-b30413f6><br data-v-b30413f6><p class="fz28" data-v-b30413f6>XMLHttpRequest</p><p class="fz28" data-v-b30413f6>1. 創建 XMLHttpRequest 對象</p><p class="fz28" data-v-b30413f6>2. 配 請求方法 &amp; url</p><p class="fz28" data-v-b30413f6>3. 監聽 loadend 接收響應結果</p><p class="fz28" data-v-b30413f6>4. 發請求</p><div class="bgcVS" data-v-b30413f6><div data-v-b30413f6><span class="function" data-v-b30413f6>const </span><span class="word" data-v-b30413f6>xhr</span> <span class="then" data-v-b30413f6>=</span><span class="then" data-v-b30413f6>new </span><span class="word" data-v-b30413f6>XMLHttpRequest</span><span class="brackets" data-v-b30413f6>()</span></div><div data-v-b30413f6><span class="word" data-v-b30413f6>xhr</span> <span class="variable" data-v-b30413f6>.open</span><span class="brackets" data-v-b30413f6>(</span><span class="src" data-v-b30413f6>&quot;請求方法&quot;,&quot;請求url網址&quot;</span><span class="brackets" data-v-b30413f6>)</span></div><div data-v-b30413f6><span class="word" data-v-b30413f6>xhr</span><span class="variable" data-v-b30413f6>.addEventListener</span><span class="brackets" data-v-b30413f6>(</span><span class="src" data-v-b30413f6>&quot;loadend&quot;</span> <span class="then" data-v-b30413f6>,</span><span class="brackets" data-v-b30413f6>()</span> <span class="function" data-v-b30413f6>=&gt;</span><span class="brackets" data-v-b30413f6>{</span></div><div class="padTwo VSL" data-v-b30413f6><span class="word" data-v-b30413f6>console.</span><span class="variable" data-v-b30413f6>log</span> <span class="brackets" data-v-b30413f6>(</span><span class="word" data-v-b30413f6>xhr.response</span><span class="brackets" data-v-b30413f6>)</span><span class="comment" data-v-b30413f6>//響應結果</span><div data-v-b30413f6><span class="function" data-v-b30413f6>const </span><span class="word" data-v-b30413f6>data</span> <span class="then" data-v-b30413f6>=</span><span class="brackets" data-v-b30413f6>JSON</span><span class="variable" data-v-b30413f6>.parse</span><span class="brackets" data-v-b30413f6>(</span><span class="word" data-v-b30413f6>xhr.response</span><span class="brackets" data-v-b30413f6>)</span></div><div data-v-b30413f6><span class="word" data-v-b30413f6>console.</span><span class="variable" data-v-b30413f6>log</span><span class="brackets" data-v-b30413f6>(</span> <span class="word" data-v-b30413f6>data</span><span class="brackets" data-v-b30413f6>)</span></div><div data-v-b30413f6></div></div><div data-v-b30413f6><span class="brackets" data-v-b30413f6>})</span></div><div data-v-b30413f6><span class="word" data-v-b30413f6>xhr</span> <span class="variable" data-v-b30413f6>.send</span><span class="brackets" data-v-b30413f6>()</span></div></div><div id="threeajax004" class="articleCardTitle cor36 fz34" data-v-b30413f6> 9.4 Promise 3 狀態 pending . . . fullfilled . . . rejected </div><p class="fz28" data-v-b30413f6>pending 待定: 初始狀態</p><p class="fz28" data-v-b30413f6>fullfilled 兌現: 操作成功</p><p class="fz28" data-v-b30413f6>rejected 拒絕: 操作失敗</p><br data-v-b30413f6><br data-v-b30413f6><p class="fz28" data-v-b30413f6>Promise 狀態 一但 兌現 / 拒絕 就 無法再改變</p><br data-v-b30413f6><div class="bgcVS" data-v-b30413f6><div data-v-b30413f6><span class="comment" data-v-b30413f6>//1.創建Promise對象(pending-待定狀態)</span></div><div data-v-b30413f6><span class="function" data-v-b30413f6>const </span> <span class="word" data-v-b30413f6>p</span><span class="then" data-v-b30413f6>=</span> <span class="then" data-v-b30413f6>new </span><span class="brackets" data-v-b30413f6>Promise</span><span class="brackets" data-v-b30413f6>((</span><span class="word" data-v-b30413f6>resolve,reject</span><span class="brackets" data-v-b30413f6>)</span> <span class="function" data-v-b30413f6>=&gt;</span><span class="brackets" data-v-b30413f6>{</span></div><div class="padTwo VSL" data-v-b30413f6><span class="word" data-v-b30413f6>console.</span><span class="variable" data-v-b30413f6>log</span> <span class="brackets" data-v-b30413f6>(</span><span class="src" data-v-b30413f6>&quot;Promise對象創建時,這裡的代碼都會執行了&quot;</span><span class="brackets" data-v-b30413f6>)</span><div data-v-b30413f6></div><div data-v-b30413f6><span class="comment" data-v-b30413f6>//2.執行異步代碼</span></div><div data-v-b30413f6><span class="variable" data-v-b30413f6>setTimeout</span><span class="brackets" data-v-b30413f6>(()</span><span class="function" data-v-b30413f6>=&gt;</span> <span class="brackets" data-v-b30413f6>{</span></div><div class="padTwo VSL" data-v-b30413f6><span class="comment" data-v-b30413f6>//resolve(調用時fullfilled狀態) . . &gt; then()</span><div data-v-b30413f6><span class="variable" data-v-b30413f6>resolve</span><span class="brackets" data-v-b30413f6>(</span><span class="src" data-v-b30413f6>&quot;模擬AJAX-成功結果&quot;</span><span class="brackets" data-v-b30413f6>)</span></div><div data-v-b30413f6><span class="comment" data-v-b30413f6>//reject(調用時rejected狀態) . . &gt; catch()</span></div><div data-v-b30413f6><span class="variable" data-v-b30413f6>reject</span><span class="brackets" data-v-b30413f6>(</span><span class="then" data-v-b30413f6>new </span><span class="word" data-v-b30413f6>Error</span><span class="brackets" data-v-b30413f6>(</span><span class="src" data-v-b30413f6>&quot;模擬AJAX請求-失敗結果&quot;</span><span class="brackets" data-v-b30413f6>))</span></div><div data-v-b30413f6></div></div><div data-v-b30413f6><span class="brackets" data-v-b30413f6>},</span><span class="number" data-v-b30413f6>2000</span> <span class="brackets" data-v-b30413f6>)</span></div></div><div data-v-b30413f6><span class="brackets" data-v-b30413f6>})</span></div><div data-v-b30413f6><span class="comment" data-v-b30413f6>//3.獲取結果</span></div><div data-v-b30413f6><span class="word" data-v-b30413f6>p</span><span class="variable" data-v-b30413f6>.then</span><span class="brackets" data-v-b30413f6>(</span> <span class="word" data-v-b30413f6>result</span><span class="function" data-v-b30413f6>=&gt;</span> <span class="brackets" data-v-b30413f6>{</span></div><div class="padTwo VSL" data-v-b30413f6><span class="word" data-v-b30413f6>console.</span><span class="variable" data-v-b30413f6>log</span> <span class="brackets" data-v-b30413f6>(</span><span class="word" data-v-b30413f6>result</span> <span class="brackets" data-v-b30413f6>)</span><div data-v-b30413f6></div></div><div data-v-b30413f6><span class="brackets" data-v-b30413f6>})</span><span class="variable" data-v-b30413f6>.catch</span><span class="brackets" data-v-b30413f6>(</span><span class="variable" data-v-b30413f6>error</span><span class="function" data-v-b30413f6>=&gt;</span> <span class="brackets" data-v-b30413f6>{</span></div><div class="padTwo VSL" data-v-b30413f6><span class="word" data-v-b30413f6>console.</span><span class="variable" data-v-b30413f6>log</span> <span class="brackets" data-v-b30413f6>(</span><span class="variable" data-v-b30413f6>error</span><span class="brackets" data-v-b30413f6>)</span><div data-v-b30413f6></div></div><div data-v-b30413f6><span class="brackets" data-v-b30413f6>})</span></div></div><p class="fz28" data-v-b30413f6>xhr + Promise</p><div class="bgcVS" data-v-b30413f6><div data-v-b30413f6><span class="then" data-v-b30413f6>＜</span> <span class="number" data-v-b30413f6>div </span><span class="function" data-v-b30413f6>class </span> <span class="then" data-v-b30413f6>=</span><span class="src" data-v-b30413f6>&quot;showData&quot;</span><span class="then" data-v-b30413f6>&gt;＜/ </span> <span class="number" data-v-b30413f6>div </span><span class="then" data-v-b30413f6>&gt;</span></div><div data-v-b30413f6><span class="comment" data-v-b30413f6>//1.創建Promise對象</span></div><div data-v-b30413f6><span class="function" data-v-b30413f6>const </span> <span class="word" data-v-b30413f6>p</span><span class="then" data-v-b30413f6>=</span> <span class="then" data-v-b30413f6>new </span><span class="brackets" data-v-b30413f6>Promise</span><span class="brackets" data-v-b30413f6>((</span><span class="variable" data-v-b30413f6>resolve,reject</span><span class="brackets" data-v-b30413f6>)</span> <span class="function" data-v-b30413f6>=&gt;</span><span class="brackets" data-v-b30413f6>{</span></div><div class="padTwo VSL" data-v-b30413f6><span class="comment" data-v-b30413f6>//2.執行xhr異步獲取資料</span><div data-v-b30413f6><span class="function" data-v-b30413f6>const </span><span class="word" data-v-b30413f6>xhr</span> <span class="then" data-v-b30413f6>=</span><span class="then" data-v-b30413f6>new </span><span class="word" data-v-b30413f6>XMLHttpRequest</span><span class="brackets" data-v-b30413f6>()</span></div><div data-v-b30413f6><span class="word" data-v-b30413f6>xhr</span><span class="variable" data-v-b30413f6>.open</span><span class="brackets" data-v-b30413f6>(</span><span class="src" data-v-b30413f6>&quot;GET&quot;,&quot;放URL&quot;</span><span class="brackets" data-v-b30413f6>)</span></div><div data-v-b30413f6><span class="word" data-v-b30413f6>xhr</span><span class="variable" data-v-b30413f6>.addEventListener</span><span class="brackets" data-v-b30413f6>(</span><span class="src" data-v-b30413f6>&quot;loadend&quot;</span> <span class="then" data-v-b30413f6>,</span><span class="brackets" data-v-b30413f6>()</span><span class="function" data-v-b30413f6>=&gt;</span> <span class="brackets" data-v-b30413f6>{</span></div><div data-v-b30413f6></div><div class="padTwo VSL" data-v-b30413f6><span class="comment" data-v-b30413f6>//xhr判斷響應碼,2xx成功</span><div data-v-b30413f6><span class="then" data-v-b30413f6>if</span> <span class="brackets" data-v-b30413f6>(</span><span class="word" data-v-b30413f6>xhr.status</span><span class="then" data-v-b30413f6>&gt;=</span> <span class="number" data-v-b30413f6>200</span><span class="word" data-v-b30413f6>&amp;&amp;</span><span class="word" data-v-b30413f6>xhr.status</span><span class="then" data-v-b30413f6>＜</span> <span class="number" data-v-b30413f6>300</span><span class="brackets" data-v-b30413f6>){</span></div><div data-v-b30413f6></div><div class="padTwo VSL" data-v-b30413f6><span class="variable" data-v-b30413f6>resolve</span><span class="brackets" data-v-b30413f6>(</span><span class="brackets" data-v-b30413f6>JSON</span><span class="variable" data-v-b30413f6>.parse</span><span class="brackets" data-v-b30413f6>(</span><span class="word" data-v-b30413f6>xhr.response</span><span class="brackets" data-v-b30413f6>))</span><div data-v-b30413f6></div></div><div data-v-b30413f6><span class="brackets" data-v-b30413f6>}</span><span class="then" data-v-b30413f6>else </span><span class="brackets" data-v-b30413f6>{</span></div><div class="padTwo VSL" data-v-b30413f6><span class="variable" data-v-b30413f6>reject</span><span class="brackets" data-v-b30413f6>(</span><span class="then" data-v-b30413f6>new </span><span class="word" data-v-b30413f6>Error</span><span class="brackets" data-v-b30413f6>(</span><span class="word" data-v-b30413f6>xhr.response</span><span class="brackets" data-v-b30413f6>))</span><div data-v-b30413f6></div></div><div data-v-b30413f6><span class="brackets" data-v-b30413f6>}</span></div></div><div data-v-b30413f6><span class="brackets" data-v-b30413f6>})</span></div><div data-v-b30413f6><span class="word" data-v-b30413f6>xhr</span><span class="variable" data-v-b30413f6>.send</span><span class="brackets" data-v-b30413f6>()</span></div></div><div data-v-b30413f6><span class="brackets" data-v-b30413f6>})</span></div><div data-v-b30413f6><span class="comment" data-v-b30413f6>//3.成功執行then,失敗執行catch</span></div><div data-v-b30413f6><span class="word" data-v-b30413f6>p</span> <span class="variable" data-v-b30413f6>.then</span><span class="brackets" data-v-b30413f6>(</span> <span class="word" data-v-b30413f6>result</span><span class="function" data-v-b30413f6>=&gt;</span> <span class="brackets" data-v-b30413f6>{</span></div><div class="padTwo VSL" data-v-b30413f6><span class="word" data-v-b30413f6>console</span><span class="variable" data-v-b30413f6>.log</span><span class="brackets" data-v-b30413f6>(</span> <span class="word" data-v-b30413f6>result</span><span class="brackets" data-v-b30413f6>)</span><div data-v-b30413f6><span class="word" data-v-b30413f6>document</span><span class="variable" data-v-b30413f6>.querySelector</span><span class="brackets" data-v-b30413f6>(</span><span class="src" data-v-b30413f6>&quot;.showData&quot;</span><span class="brackets" data-v-b30413f6>)</span><span class="variable" data-v-b30413f6>.innerHTML</span><span class="then" data-v-b30413f6>=</span> <span class="word" data-v-b30413f6>result</span></div><div data-v-b30413f6></div></div><div data-v-b30413f6><span class="brackets" data-v-b30413f6>})</span><span class="variable" data-v-b30413f6>.catch</span><span class="brackets" data-v-b30413f6>(</span><span class="variable" data-v-b30413f6>error</span><span class="function" data-v-b30413f6>=&gt;</span> <span class="brackets" data-v-b30413f6>{</span></div><div class="padTwo VSL" data-v-b30413f6><span class="word" data-v-b30413f6>console</span><span class="variable" data-v-b30413f6>.log</span><span class="brackets" data-v-b30413f6>(</span><span class="variable" data-v-b30413f6>error</span><span class="brackets" data-v-b30413f6>)</span><div data-v-b30413f6></div></div><div data-v-b30413f6><span class="brackets" data-v-b30413f6>})</span></div></div><p class="fz28" data-v-b30413f6>模仿 axios 封裝 xhr + Promise</p><div class="bgcVS" data-v-b30413f6><div data-v-b30413f6><span class="then" data-v-b30413f6>＜</span> <span class="number" data-v-b30413f6>div </span><span class="function" data-v-b30413f6>class </span> <span class="then" data-v-b30413f6>=</span><span class="src" data-v-b30413f6>&quot;showData&quot;</span><span class="then" data-v-b30413f6>&gt;＜/ </span> <span class="number" data-v-b30413f6>div </span><span class="then" data-v-b30413f6>&gt;</span></div><div data-v-b30413f6><span class="function" data-v-b30413f6>function </span><span class="word" data-v-b30413f6>myAxios</span> <span class="brackets" data-v-b30413f6>(</span><span class="word" data-v-b30413f6>config</span> <span class="brackets" data-v-b30413f6>){</span></div><div class="padTwo VSL" data-v-b30413f6><span class="then" data-v-b30413f6>return </span> <span class="then" data-v-b30413f6>new </span><span class="brackets" data-v-b30413f6>Promise</span><span class="brackets" data-v-b30413f6>((</span><span class="variable" data-v-b30413f6>resolve,reject</span><span class="brackets" data-v-b30413f6>)</span> <span class="function" data-v-b30413f6>=&gt;</span><span class="brackets" data-v-b30413f6>{</span><div data-v-b30413f6></div><div class="padTwo VSL" data-v-b30413f6><span class="comment" data-v-b30413f6>//2.發起xhr,默認請求方法GET</span><div data-v-b30413f6><span class="function" data-v-b30413f6>const </span><span class="word" data-v-b30413f6>xhr</span> <span class="then" data-v-b30413f6>=</span><span class="then" data-v-b30413f6>new </span><span class="word" data-v-b30413f6>XMLHttpRequest</span><span class="brackets" data-v-b30413f6>()</span></div><div data-v-b30413f6><span class="word" data-v-b30413f6>xhr</span><span class="variable" data-v-b30413f6>.open</span><span class="brackets" data-v-b30413f6>(</span><span class="word" data-v-b30413f6>config.method </span><span class="then" data-v-b30413f6>||</span> <span class="src" data-v-b30413f6>&quot;GET&quot;</span><span class="then" data-v-b30413f6>,</span><span class="word" data-v-b30413f6>config.url</span><span class="brackets" data-v-b30413f6>)</span></div><div data-v-b30413f6><span class="word" data-v-b30413f6>xhr</span><span class="variable" data-v-b30413f6>.addEventListener</span><span class="brackets" data-v-b30413f6>(</span><span class="src" data-v-b30413f6>&quot;loadend&quot;</span> <span class="then" data-v-b30413f6>,</span><span class="brackets" data-v-b30413f6>()</span><span class="function" data-v-b30413f6>=&gt;</span><span class="brackets" data-v-b30413f6>{</span></div><div data-v-b30413f6></div><div class="padTwo VSL" data-v-b30413f6><span class="comment" data-v-b30413f6>//xhr判斷響應碼,2xx成功</span><div data-v-b30413f6><span class="then" data-v-b30413f6>if</span> <span class="brackets" data-v-b30413f6>(</span><span class="word" data-v-b30413f6>xhr.status</span><span class="then" data-v-b30413f6>&gt;=</span> <span class="number" data-v-b30413f6>200</span><span class="then" data-v-b30413f6>&amp;&amp; </span><span class="word" data-v-b30413f6>xhr.status</span><span class="then" data-v-b30413f6>＜</span> <span class="number" data-v-b30413f6>300</span><span class="brackets" data-v-b30413f6>){</span></div><div data-v-b30413f6></div><div class="padTwo VSL" data-v-b30413f6><span class="variable" data-v-b30413f6>resolve</span><span class="brackets" data-v-b30413f6>(</span><span class="brackets" data-v-b30413f6>JSON</span><span class="variable" data-v-b30413f6>.parse</span><span class="brackets" data-v-b30413f6>(</span><span class="word" data-v-b30413f6>xhr.response</span><span class="brackets" data-v-b30413f6>))</span><div data-v-b30413f6></div></div><div data-v-b30413f6><span class="brackets" data-v-b30413f6>}</span><span class="then" data-v-b30413f6>else </span><span class="brackets" data-v-b30413f6>{</span></div><div class="padTwo VSL" data-v-b30413f6><span class="variable" data-v-b30413f6>reject</span><span class="brackets" data-v-b30413f6>(</span><span class="then" data-v-b30413f6>new </span><span class="word" data-v-b30413f6>Error</span><span class="brackets" data-v-b30413f6>(</span><span class="word" data-v-b30413f6>xhr.response</span><span class="brackets" data-v-b30413f6>))</span><div data-v-b30413f6></div></div><div data-v-b30413f6><span class="brackets" data-v-b30413f6>}</span></div></div><div data-v-b30413f6><span class="brackets" data-v-b30413f6>})</span></div><div data-v-b30413f6><span class="word" data-v-b30413f6>xhr</span><span class="variable" data-v-b30413f6>.send</span><span class="brackets" data-v-b30413f6>()</span></div></div><div data-v-b30413f6><span class="brackets" data-v-b30413f6>})</span></div></div><div data-v-b30413f6><span class="brackets" data-v-b30413f6>}</span></div><div data-v-b30413f6><span class="comment" data-v-b30413f6>//3.成功執行then,失敗執行catch</span></div><div data-v-b30413f6><span class="word" data-v-b30413f6>myAxios</span> <span class="brackets" data-v-b30413f6>({</span></div><div class="padTwo VSL" data-v-b30413f6><span class="word" data-v-b30413f6>url:</span> <span class="src" data-v-b30413f6>&quot;放網址&quot;</span><div data-v-b30413f6></div></div><div data-v-b30413f6><span class="brackets" data-v-b30413f6>})</span><span class="variable" data-v-b30413f6>.then</span><span class="brackets" data-v-b30413f6>(</span> <span class="word" data-v-b30413f6>result</span><span class="function" data-v-b30413f6>=&gt;</span> <span class="brackets" data-v-b30413f6>{</span></div><div class="padTwo VSL" data-v-b30413f6><span class="word" data-v-b30413f6>console</span><span class="variable" data-v-b30413f6>.log</span><span class="brackets" data-v-b30413f6>(</span> <span class="word" data-v-b30413f6>result</span><span class="brackets" data-v-b30413f6>)</span><div data-v-b30413f6><span class="word" data-v-b30413f6>document</span><span class="variable" data-v-b30413f6>.querySelector</span><span class="brackets" data-v-b30413f6>(</span><span class="src" data-v-b30413f6>&quot;.showData&quot;</span><span class="brackets" data-v-b30413f6>)</span><span class="variable" data-v-b30413f6>.innerHTML</span><span class="then" data-v-b30413f6>=</span> <span class="word" data-v-b30413f6>result</span></div><div data-v-b30413f6></div></div><div data-v-b30413f6><span class="brackets" data-v-b30413f6>})</span><span class="variable" data-v-b30413f6>.catch</span><span class="brackets" data-v-b30413f6>(</span><span class="variable" data-v-b30413f6>error</span><span class="function" data-v-b30413f6>=&gt;</span> <span class="brackets" data-v-b30413f6>{</span></div><div class="padTwo VSL" data-v-b30413f6><span class="word" data-v-b30413f6>console</span><span class="variable" data-v-b30413f6>.log</span><span class="brackets" data-v-b30413f6>(</span><span class="variable" data-v-b30413f6>error</span><span class="brackets" data-v-b30413f6>)</span><div data-v-b30413f6><span class="word" data-v-b30413f6>document</span><span class="variable" data-v-b30413f6>.querySelector</span><span class="brackets" data-v-b30413f6>(</span><span class="src" data-v-b30413f6>&quot;.showData&quot;</span><span class="brackets" data-v-b30413f6>)</span><span class="variable" data-v-b30413f6>.innerHTML</span><span class="then" data-v-b30413f6>=</span><span class="word" data-v-b30413f6>error.message</span></div><div data-v-b30413f6></div></div><div data-v-b30413f6><span class="brackets" data-v-b30413f6>})</span></div></div><p class="fz28" data-v-b30413f6>同步</p><p class="fz28" data-v-b30413f6>逐行執行 , 原地等待結果後 , 才繼續向下執行</p><br data-v-b30413f6><p class="fz28" data-v-b30413f6>異步</p><p class="fz28" data-v-b30413f6> 調用後耗時 , 不阻塞代碼執行 , 將來完成後觸發 回調函數 </p><br data-v-b30413f6><p class="fz28" data-v-b30413f6>JS哪些是異步?</p><p class="fz28" data-v-b30413f6>setTimeout / setInterval</p><p class="fz28" data-v-b30413f6>事件</p><p class="fz28" data-v-b30413f6>AJAX</p><br data-v-b30413f6><p class="fz28" data-v-b30413f6>異步如何接收結果?</p><p class="fz28" data-v-b30413f6>回調函數接收</p><br data-v-b30413f6><br data-v-b30413f6><p class="fz28" data-v-b30413f6>回調地獄 . . . 回調函數嵌套問題</p><br data-v-b30413f6><p class="fz28" data-v-b30413f6>你的下一次網路請求 , 依賴於 上一次網路請求數據</p><br data-v-b30413f6><br data-v-b30413f6><p class="fz28" data-v-b30413f6>setTimeout(function () {</p><p class="fz28 pTwo" data-v-b30413f6>console.log(111);</p><p class="fz28 pTwo" data-v-b30413f6>setTimeout(function () {</p><p class="fz28 pFou" data-v-b30413f6>console.log(222);</p><p class="fz28 pFou" data-v-b30413f6>setTimeout(function () {</p><p class="fz28 pSix" data-v-b30413f6>console.log(333);</p><p class="fz28 pFou" data-v-b30413f6>}, 1000)</p><p class="fz28 pTwo" data-v-b30413f6>}, 2000)</p><p class="fz28" data-v-b30413f6>}, 3000)</p><br data-v-b30413f6><br data-v-b30413f6><p class="fz28" data-v-b30413f6>Promise 鏈式調用</p><br data-v-b30413f6><div data-v-b30413f6><span class="pad20 bor fz30" data-v-b30413f6>new Promise()</span> ➔ <span class="pad20 bor fz30" data-v-b30413f6>.then( 回調函數 )</span> ➔ <span class="pad20 bor fz30" data-v-b30413f6>新的 Promise 對象</span></div><br data-v-b30413f6><div class="fz30" data-v-b30413f6><span class="cor17" data-v-b30413f6>. . . . . . . . . . . . . . . . . . . . .</span> ↘ 回調函數中 , return 的結果 ↗ </div><div class="bgcVS" data-v-b30413f6><div data-v-b30413f6><span class="function" data-v-b30413f6>const </span> <span class="word" data-v-b30413f6>p</span><span class="then" data-v-b30413f6>= new </span><span class="brackets" data-v-b30413f6>Promise (( </span><span class="variable" data-v-b30413f6>resolve,reject</span><span class="brackets" data-v-b30413f6>)</span> <span class="function" data-v-b30413f6>=&gt;</span><span class="brackets" data-v-b30413f6>{</span></div><div class="padTwo VSL" data-v-b30413f6><span class="variable" data-v-b30413f6>setTimeout</span><span class="brackets" data-v-b30413f6>(()</span><span class="function" data-v-b30413f6>=&gt;</span> <span class="brackets" data-v-b30413f6>{</span><div class="padTwo VSL" data-v-b30413f6><span class="variable" data-v-b30413f6>resolve</span><span class="brackets" data-v-b30413f6>(</span><span class="src" data-v-b30413f6>&quot;獲取的資料&quot;</span><span class="brackets" data-v-b30413f6>)</span><div data-v-b30413f6></div></div><div data-v-b30413f6></div><div data-v-b30413f6><span class="brackets" data-v-b30413f6>},</span><span class="number" data-v-b30413f6>2000</span><span class="brackets" data-v-b30413f6>)</span></div></div><div data-v-b30413f6><span class="brackets" data-v-b30413f6>})</span></div><div data-v-b30413f6><span class="word" data-v-b30413f6>p</span> <span class="variable" data-v-b30413f6>.then</span><span class="brackets" data-v-b30413f6>(</span> <span class="word" data-v-b30413f6>result</span><span class="function" data-v-b30413f6>=&gt;</span> <span class="brackets" data-v-b30413f6>{</span></div><div class="padTwo VSL" data-v-b30413f6><span class="word" data-v-b30413f6>console</span><span class="variable" data-v-b30413f6>.log</span><span class="brackets" data-v-b30413f6>(</span> <span class="word" data-v-b30413f6>result</span><span class="brackets" data-v-b30413f6>) </span><span class="comment" data-v-b30413f6>// 2 秒後打印 &quot;獲取的資料&quot;</span><div data-v-b30413f6></div></div><div data-v-b30413f6><span class="brackets" data-v-b30413f6>})</span></div><div data-v-b30413f6><span class="comment" data-v-b30413f6>//promise調用then後在原地等結果</span></div><div data-v-b30413f6><span class="comment" data-v-b30413f6>//返回一個全新的promise對象</span></div><div data-v-b30413f6><span class="comment" data-v-b30413f6>//const p2 接收</span></div><div data-v-b30413f6><span class="function" data-v-b30413f6>const </span> <span class="word" data-v-b30413f6>p2</span><span class="then" data-v-b30413f6>=</span> <span class="word" data-v-b30413f6>p</span><span class="variable" data-v-b30413f6>.then</span><span class="brackets" data-v-b30413f6>(</span> <span class="word" data-v-b30413f6>result</span><span class="function" data-v-b30413f6>=&gt;</span> <span class="brackets" data-v-b30413f6>{</span></div><div class="padTwo VSL" data-v-b30413f6><span class="word" data-v-b30413f6>console</span><span class="variable" data-v-b30413f6>.log</span><span class="brackets" data-v-b30413f6>(</span> <span class="word" data-v-b30413f6>result</span><span class="brackets" data-v-b30413f6>) </span><span class="comment" data-v-b30413f6>// 2 秒後打印 &quot;獲取的資料&quot;</span><div data-v-b30413f6><span class="comment" data-v-b30413f6>//創建Promise對象,模擬再發出請求</span></div><div data-v-b30413f6><span class="comment" data-v-b30413f6>// return promise 對象最終狀態和結果, 影響到新的 Promise 對象 // p2</span></div><div data-v-b30413f6><span class="then" data-v-b30413f6>return new </span><span class="brackets" data-v-b30413f6>Promise (( </span><span class="variable" data-v-b30413f6>resolve,reject</span><span class="brackets" data-v-b30413f6>)</span><span class="function" data-v-b30413f6>=&gt;</span> <span class="brackets" data-v-b30413f6>{</span></div><div class="padTwo VSL" data-v-b30413f6><span class="variable" data-v-b30413f6>setTimeout</span><span class="brackets" data-v-b30413f6>(()</span><span class="function" data-v-b30413f6>=&gt;</span> <span class="brackets" data-v-b30413f6>{</span><div class="padTwo VSL" data-v-b30413f6><span class="variable" data-v-b30413f6>resolve</span><span class="brackets" data-v-b30413f6>(</span><span class="word" data-v-b30413f6>result</span> <span class="then" data-v-b30413f6>+</span><span class="src" data-v-b30413f6>&quot;加上模擬另一次AJAX網路請求&quot;</span><span class="brackets" data-v-b30413f6>)</span><div data-v-b30413f6></div></div><div data-v-b30413f6><span class="brackets" data-v-b30413f6>},</span><span class="number" data-v-b30413f6>2000</span><span class="brackets" data-v-b30413f6>)</span><div data-v-b30413f6></div></div><div data-v-b30413f6></div></div><div data-v-b30413f6><span class="brackets" data-v-b30413f6>})</span></div><div data-v-b30413f6></div></div><div data-v-b30413f6><span class="brackets" data-v-b30413f6>})</span></div><div data-v-b30413f6><span class="word" data-v-b30413f6>console</span><span class="variable" data-v-b30413f6>.log</span><span class="brackets" data-v-b30413f6>(</span> <span class="word" data-v-b30413f6>p2</span><span class="then" data-v-b30413f6>===</span> <span class="word" data-v-b30413f6>p</span><span class="brackets" data-v-b30413f6>)</span><span class="comment" data-v-b30413f6>// 打印 false // 證明 p2 是全新的 promise</span></div><div data-v-b30413f6><span class="comment" data-v-b30413f6>// promise 物件保存在內存地址 // false 證明不在同一個地址</span></div><br data-v-b30413f6><div data-v-b30413f6><span class="comment" data-v-b30413f6>//獲取最終結果</span></div><div data-v-b30413f6><span class="word" data-v-b30413f6>p2</span> <span class="variable" data-v-b30413f6>.then</span><span class="brackets" data-v-b30413f6>(</span> <span class="word" data-v-b30413f6>result</span><span class="function" data-v-b30413f6>=&gt;</span> <span class="brackets" data-v-b30413f6>{</span></div><div class="padTwo VSL" data-v-b30413f6><span class="word" data-v-b30413f6>console</span><span class="variable" data-v-b30413f6>.log</span><span class="brackets" data-v-b30413f6>(</span> <span class="word" data-v-b30413f6>result</span><span class="brackets" data-v-b30413f6>)</span><div data-v-b30413f6></div></div><div data-v-b30413f6><span class="brackets" data-v-b30413f6>})</span></div></div><p class="fz28" data-v-b30413f6>1. 什麼是 Promise 鏈式調用?</p><p class="fz28" data-v-b30413f6> 使用 then 函數返回新 Promise 物件特性 , 一直串聯下去 </p><br data-v-b30413f6><p class="fz28" data-v-b30413f6>2. then 回調函數中 , return 的值 會傳到 哪裡?</p><p class="fz28" data-v-b30413f6>傳給 then 函數生成的 新 Promise 物件</p><br data-v-b30413f6><p class="fz28" data-v-b30413f6>3. Promise 鏈式調用有什麼用?</p><p class="fz28" data-v-b30413f6>解決 回調嵌套 問題</p><div id="threeajax005" class="articleCardTitle cor36 fz34" data-v-b30413f6> 9.5 async await </div><p class="fz28" data-v-b30413f6> async await 讓我們更簡潔方式寫出基於 Promise 的異步行為 , </p><p class="fz28" data-v-b30413f6>而無須鏈式調用 promise</p><br data-v-b30413f6><p class="fz28 cor36" data-v-b30413f6>概念:</p><p class="fz28" data-v-b30413f6>在 async 函數內 , 用 await 關鍵字 取代 then 函數 ,</p><p class="fz28" data-v-b30413f6><span class="spo cor36" data-v-b30413f6> 等待 </span> 獲取 Promise 對象成功狀態的結果值 </p><div class="bgcVS" data-v-b30413f6><div data-v-b30413f6><span class="function" data-v-b30413f6>async function </span><span class="word" data-v-b30413f6>getData</span><span class="brackets" data-v-b30413f6>(){</span></div><div class="padTwo VSL" data-v-b30413f6><span class="variable" data-v-b30413f6>try</span> <span class="brackets" data-v-b30413f6>{</span><div data-v-b30413f6></div></div><div class="padTwo VSL" data-v-b30413f6><span class="comment" data-v-b30413f6>//axios在原地返回一個promise對象</span><div data-v-b30413f6><span class="comment" data-v-b30413f6>//await後面接Promise物件&quot;成功狀態&quot;結果值</span></div><div data-v-b30413f6><span class="function" data-v-b30413f6>const </span><span class="word" data-v-b30413f6>pObj</span> <span class="then" data-v-b30413f6>=</span><span class="then" data-v-b30413f6>await </span><span class="variable" data-v-b30413f6>axios</span><span class="brackets" data-v-b30413f6>({</span> <span class="word" data-v-b30413f6>url:</span><span class="src" data-v-b30413f6>&quot;https://randomuser.me/api/&quot;</span><span class="brackets" data-v-b30413f6>})</span></div><div data-v-b30413f6><span class="word" data-v-b30413f6>console</span><span class="variable" data-v-b30413f6>.log</span><span class="brackets" data-v-b30413f6>(</span> <span class="word" data-v-b30413f6>pObj</span><span class="brackets" data-v-b30413f6>)</span></div><div data-v-b30413f6><span class="function" data-v-b30413f6>const </span><span class="word" data-v-b30413f6>name</span> <span class="then" data-v-b30413f6>=</span><span class="word" data-v-b30413f6>pObj.results</span><span class="brackets" data-v-b30413f6>[</span> <span class="number" data-v-b30413f6>0</span><span class="brackets" data-v-b30413f6>]</span> <span class="word" data-v-b30413f6>.name</span></div><div data-v-b30413f6></div></div><div data-v-b30413f6><span class="brackets" data-v-b30413f6>}</span></div><div data-v-b30413f6><span class="word" data-v-b30413f6>getData</span> <span class="brackets" data-v-b30413f6>()</span></div></div><p class="fz28" data-v-b30413f6>async await 捕獲錯誤</p><div class="bgcVS" data-v-b30413f6><div data-v-b30413f6><span class="function" data-v-b30413f6>async function </span><span class="word" data-v-b30413f6>getData</span><span class="brackets" data-v-b30413f6>(){</span></div><div class="padTwo VSL" data-v-b30413f6><div data-v-b30413f6><span class="comment" data-v-b30413f6>//try只要某行發生錯誤,以下就不執行,往catch執行</span></div><div data-v-b30413f6><span class="variable" data-v-b30413f6>try</span><span class="brackets" data-v-b30413f6>{</span></div><div class="padTwo VSL" data-v-b30413f6><span class="comment" data-v-b30413f6>//axios在原地返回一個promise對象</span><div data-v-b30413f6><span class="comment" data-v-b30413f6>//await後面接Promise物件&quot;成功狀態&quot;結果值</span></div><div data-v-b30413f6><span class="function" data-v-b30413f6>const </span><span class="word" data-v-b30413f6>pObj</span> <span class="then" data-v-b30413f6>=</span><span class="then" data-v-b30413f6>await </span><span class="variable" data-v-b30413f6>axios</span><span class="brackets" data-v-b30413f6>({</span><span class="word" data-v-b30413f6>url:</span><span class="src" data-v-b30413f6>&quot;https://randomuser.me/api/&quot;</span><span class="brackets" data-v-b30413f6>})</span></div><div data-v-b30413f6><span class="word" data-v-b30413f6>console</span><span class="variable" data-v-b30413f6>.log</span><span class="brackets" data-v-b30413f6>(</span> <span class="word" data-v-b30413f6>pObj</span><span class="brackets" data-v-b30413f6>)</span></div><div data-v-b30413f6><span class="function" data-v-b30413f6>const </span><span class="word" data-v-b30413f6>name</span> <span class="then" data-v-b30413f6>=</span><span class="word" data-v-b30413f6>pObj.results</span><span class="brackets" data-v-b30413f6>[</span> <span class="number" data-v-b30413f6>0</span><span class="brackets" data-v-b30413f6>]</span><span class="word" data-v-b30413f6>.name</span></div><div data-v-b30413f6></div></div><div data-v-b30413f6><span class="brackets" data-v-b30413f6>}</span><span class="variable" data-v-b30413f6>catch</span><span class="brackets" data-v-b30413f6>(</span><span class="variable" data-v-b30413f6>error</span><span class="brackets" data-v-b30413f6>){</span></div><div class="padTwo VSL" data-v-b30413f6><span class="word" data-v-b30413f6>console</span><span class="variable" data-v-b30413f6>.dir</span><span class="brackets" data-v-b30413f6>(</span><span class="variable" data-v-b30413f6>error</span><span class="brackets" data-v-b30413f6>)</span><div data-v-b30413f6></div></div><div data-v-b30413f6><span class="brackets" data-v-b30413f6>}</span></div></div><div data-v-b30413f6><span class="brackets" data-v-b30413f6>}</span></div><div data-v-b30413f6><span class="word" data-v-b30413f6>getData</span> <span class="brackets" data-v-b30413f6>()</span></div></div><div id="threeajax006" class="articleCardTitle cor36 fz34" data-v-b30413f6> 9.6 事件循環 EventLoop </div><p class="fz28" data-v-b30413f6> JS 是單線呈 (逐行執行代碼) , 為了 耗時代碼 不阻塞其他代碼 , 設計了事件循環 </p><br data-v-b30413f6><p class="fz28" data-v-b30413f6> 事件循環負責執行代碼 、 收集 、 處理事件 、 執行隊列中子任務 </p><div class="dis" data-v-b30413f6><div class="bgcVS w100" data-v-b30413f6><div data-v-b30413f6><span class="word" data-v-b30413f6>console</span><span class="variable" data-v-b30413f6>.log</span><span class="brackets" data-v-b30413f6>(</span> <span class="number" data-v-b30413f6>1</span><span class="brackets" data-v-b30413f6>)</span></div><br data-v-b30413f6><div data-v-b30413f6><span class="variable" data-v-b30413f6>setTimeout</span><span class="brackets" data-v-b30413f6>(()</span><span class="function" data-v-b30413f6>=&gt;</span> <span class="brackets" data-v-b30413f6>{</span></div><div class="padTwo VSL" data-v-b30413f6><span class="word" data-v-b30413f6>console</span><span class="variable" data-v-b30413f6>.log</span><span class="brackets" data-v-b30413f6>(</span> <span class="number" data-v-b30413f6>2</span><span class="brackets" data-v-b30413f6>)</span><div data-v-b30413f6></div></div><div data-v-b30413f6><span class="brackets" data-v-b30413f6>},</span> <span class="number" data-v-b30413f6>0</span><span class="brackets" data-v-b30413f6>)</span></div><br data-v-b30413f6><div data-v-b30413f6><span class="word" data-v-b30413f6>console</span><span class="variable" data-v-b30413f6>.log</span><span class="brackets" data-v-b30413f6>(</span> <span class="number" data-v-b30413f6>3</span><span class="brackets" data-v-b30413f6>)</span></div><br data-v-b30413f6><div data-v-b30413f6><span class="variable" data-v-b30413f6>setTimeout</span><span class="brackets" data-v-b30413f6>(()</span><span class="function" data-v-b30413f6>=&gt;</span> <span class="brackets" data-v-b30413f6>{</span></div><div class="padTwo VSL" data-v-b30413f6><span class="word" data-v-b30413f6>console</span><span class="variable" data-v-b30413f6>.log</span><span class="brackets" data-v-b30413f6>(</span> <span class="number" data-v-b30413f6>4</span><span class="brackets" data-v-b30413f6>)</span><div data-v-b30413f6></div></div><div data-v-b30413f6><span class="brackets" data-v-b30413f6>},</span><span class="number" data-v-b30413f6>2000</span><span class="brackets" data-v-b30413f6>)</span></div><br data-v-b30413f6><div data-v-b30413f6><span class="word" data-v-b30413f6>console</span><span class="variable" data-v-b30413f6>.log</span><span class="brackets" data-v-b30413f6>(</span> <span class="number" data-v-b30413f6>5</span><span class="brackets" data-v-b30413f6>)</span></div><br data-v-b30413f6><p data-v-b30413f6>控制台打印: 1 3 5 2 4</p></div><span class="cor17" data-v-b30413f6>____</span><div class="bgcVS cor36" data-v-b30413f6><div data-v-b30413f6>調用棧</div></div><span class="cor17" data-v-b30413f6>____</span><div class="w100" data-v-b30413f6><div class="bgcVS" data-v-b30413f6><p class="cor36" data-v-b30413f6>宿主環境(瀏覽器)</p><br data-v-b30413f6><p data-v-b30413f6>放耗時異步代碼</p><div data-v-b30413f6><span class="variable" data-v-b30413f6>setTimeout</span><span class="brackets" data-v-b30413f6>(()</span><span class="function" data-v-b30413f6>=&gt;</span><span class="brackets" data-v-b30413f6>{</span></div><div class="padTwo VSL" data-v-b30413f6><span class="word" data-v-b30413f6>console</span><span class="variable" data-v-b30413f6>.log</span><span class="brackets" data-v-b30413f6>(</span><span class="number" data-v-b30413f6>2</span><span class="brackets" data-v-b30413f6>)</span><div data-v-b30413f6></div></div><div data-v-b30413f6><span class="brackets" data-v-b30413f6>},</span><span class="number" data-v-b30413f6>0</span><span class="brackets" data-v-b30413f6>)</span></div><div data-v-b30413f6><span class="variable" data-v-b30413f6>setTimeout</span><span class="brackets" data-v-b30413f6>(()</span><span class="function" data-v-b30413f6>=&gt;</span><span class="brackets" data-v-b30413f6>{</span></div><div class="padTwo VSL" data-v-b30413f6><span class="word" data-v-b30413f6>console</span><span class="variable" data-v-b30413f6>.log</span><span class="brackets" data-v-b30413f6>(</span><span class="number" data-v-b30413f6>4</span><span class="brackets" data-v-b30413f6>)</span><div data-v-b30413f6></div></div><div data-v-b30413f6><span class="brackets" data-v-b30413f6>},</span><span class="number" data-v-b30413f6>2000</span><span class="brackets" data-v-b30413f6>)</span></div></div><div class="bgcVS" data-v-b30413f6><p class="cor36" data-v-b30413f6>任務隊列</p><br data-v-b30413f6><p data-v-b30413f6>回調放這邊排隊</p><br data-v-b30413f6><p data-v-b30413f6>調用棧空閒時,</p><p data-v-b30413f6>循環查找隊列執行</p></div></div></div><p class="fz28" data-v-b30413f6>1. 什麼是 事件循環?</p><p class="fz28" data-v-b30413f6> 執行代碼 和 收集異步任務 , 在調用棧 空閒時 , 反覆調用 任務隊列裡 回調函數 執行機制 </p><br data-v-b30413f6><p class="fz28" data-v-b30413f6>2. 為什麼要事件循環?</p><p class="fz28" data-v-b30413f6>JS 單線呈 , 為了 不阻塞 JS 引擎</p><br data-v-b30413f6><p class="fz28" data-v-b30413f6>3. JS 代碼怎麼執行?</p><p class="fz28" data-v-b30413f6>執行 同步代碼 , 遇到異步 交給 宿主瀏覽器環境執行</p><p class="fz28" data-v-b30413f6>異步有結果後 , 把回調函數 放入 任務隊列排隊</p><p class="fz28" data-v-b30413f6>當 調用棧 空閒時 , 反覆調用 任務隊列裡 的回調函數</p><div id="threeajax007" class="articleCardTitle cor36 fz34" data-v-b30413f6> 9.7 宏任務 微任務 </div><p class="fz28" data-v-b30413f6>ES6 引入 Promise物件 , 讓 JS 引擎可發起異步任務</p><br data-v-b30413f6><p class="fz28" data-v-b30413f6>宏任務: 由 瀏覽器環境執行的 異步代碼</p><br data-v-b30413f6><p class="fz28" data-v-b30413f6>微任務: 由 JS 引擎環境執行的 異步代碼</p><br data-v-b30413f6><p class="fz28 cor36" data-v-b30413f6># js 規則</p><br data-v-b30413f6><p class="fz28" data-v-b30413f6>1. 由上到下 , 由左到右</p><br data-v-b30413f6><p class="fz28" data-v-b30413f6>2. 先執行 同步代碼 , 再執行 異步代碼</p><br data-v-b30413f6><p class="fz28" data-v-b30413f6>3. 先執行 微任務 再執行宏任務</p><br data-v-b30413f6><p class="fz28 cor36" data-v-b30413f6># 微任務 宏任務 DOM 三者間關係?</p><br data-v-b30413f6><p class="fz28" data-v-b30413f6>1. 先執行 同步代碼</p><br data-v-b30413f6><p class="fz28" data-v-b30413f6>2. 執行 微任務</p><br data-v-b30413f6><p class="fz28" data-v-b30413f6>3. 渲染 DOM</p><br data-v-b30413f6><p class="fz28" data-v-b30413f6>4. 執行 宏任務</p><br data-v-b30413f6><br data-v-b30413f6><table data-v-b30413f6><tr data-v-b30413f6><th data-v-b30413f6><div class="pad20 fz36" data-v-b30413f6>宏任務</div></th><th data-v-b30413f6><div class="pad20 fz36" data-v-b30413f6>執行環境</div></th><th data-v-b30413f6><div class="pad20 fz36" data-v-b30413f6>微任務</div></th><th data-v-b30413f6><div class="pad20 fz36" data-v-b30413f6>執行環境</div></th></tr><tr data-v-b30413f6><td data-v-b30413f6><div class="pad20 fz30" data-v-b30413f6>JS腳本 (script)</div></td><td data-v-b30413f6><div class="pad20 fz30" data-v-b30413f6>瀏覽器</div></td><td data-v-b30413f6><div class="pad20 fz30" data-v-b30413f6> Promise物件<span class="cor36" data-v-b30413f6>.then</span></div></td><td data-v-b30413f6><div class="pad20 fz30" data-v-b30413f6>JS引擎</div></td></tr><tr data-v-b30413f6><td data-v-b30413f6><div class="padL20 fz30" data-v-b30413f6>setTimeout 4毫秒</div><div class="padL20 fz30" data-v-b30413f6>setInterval 10毫秒</div></td><td data-v-b30413f6><div class="pad20 fz30" data-v-b30413f6>瀏覽器</div></td><td data-v-b30413f6><div class="pad20" data-v-b30413f6></div></td><td data-v-b30413f6><div class="pad20" data-v-b30413f6></div></td></tr><tr data-v-b30413f6><td data-v-b30413f6><div class="pad20 fz30" data-v-b30413f6>AJAX請求完成事件</div></td><td data-v-b30413f6><div class="pad20 fz30" data-v-b30413f6>瀏覽器</div></td><td data-v-b30413f6><div class="pad20" data-v-b30413f6></div></td><td data-v-b30413f6><div class="pad20" data-v-b30413f6></div></td></tr><tr data-v-b30413f6><td data-v-b30413f6><div class="pad20 fz30" data-v-b30413f6>用戶交互事件</div></td><td data-v-b30413f6><div class="pad20 fz30" data-v-b30413f6>瀏覽器</div></td><td data-v-b30413f6><div class="pad20" data-v-b30413f6></div></td><td data-v-b30413f6><div class="pad20" data-v-b30413f6></div></td></tr></table><div class="dis" data-v-b30413f6><div class="bgcVS w100" data-v-b30413f6><div data-v-b30413f6><span class="then" data-v-b30413f6>＜</span><span class="number" data-v-b30413f6>script </span> <span class="then" data-v-b30413f6>&gt;</span></div><div data-v-b30413f6><span class="word" data-v-b30413f6>console</span><span class="variable" data-v-b30413f6>.log</span><span class="brackets" data-v-b30413f6>(</span> <span class="number" data-v-b30413f6>1</span><span class="brackets" data-v-b30413f6>)</span></div><br data-v-b30413f6><div data-v-b30413f6><span class="variable" data-v-b30413f6>setTimeout</span><span class="brackets" data-v-b30413f6>(()</span><span class="function" data-v-b30413f6>=&gt;</span> <span class="brackets" data-v-b30413f6>{</span></div><div class="padTwo VSL" data-v-b30413f6><span class="word" data-v-b30413f6>console</span><span class="variable" data-v-b30413f6>.log</span><span class="brackets" data-v-b30413f6>(</span> <span class="number" data-v-b30413f6>2</span><span class="brackets" data-v-b30413f6>)</span><div data-v-b30413f6></div></div><div data-v-b30413f6><span class="brackets" data-v-b30413f6>},</span> <span class="number" data-v-b30413f6>0</span><span class="brackets" data-v-b30413f6>)</span></div><br data-v-b30413f6><div data-v-b30413f6><span class="function" data-v-b30413f6>const </span><span class="word" data-v-b30413f6>p</span> <span class="then" data-v-b30413f6>= new </span><span class="brackets" data-v-b30413f6>Promise</span><span class="brackets" data-v-b30413f6>((</span><span class="variable" data-v-b30413f6>resolve,reject</span><span class="brackets" data-v-b30413f6>)</span><span class="function" data-v-b30413f6>=&gt;</span> <span class="brackets" data-v-b30413f6>{</span></div><div class="padTwo VSL" data-v-b30413f6><span class="word" data-v-b30413f6>console</span><span class="variable" data-v-b30413f6>.log</span><span class="brackets" data-v-b30413f6>(</span> <span class="number" data-v-b30413f6>2</span><span class="brackets" data-v-b30413f6>)</span><div data-v-b30413f6><span class="variable" data-v-b30413f6>resolve</span><span class="brackets" data-v-b30413f6>(</span> <span class="number" data-v-b30413f6>4</span><span class="brackets" data-v-b30413f6>)</span></div><div data-v-b30413f6></div></div><div data-v-b30413f6><span class="brackets" data-v-b30413f6>})</span></div><br data-v-b30413f6><div data-v-b30413f6><span class="word" data-v-b30413f6>p</span> <span class="variable" data-v-b30413f6>.then</span><span class="brackets" data-v-b30413f6>(</span><span class="word" data-v-b30413f6>result</span><span class="function" data-v-b30413f6>=&gt;</span> <span class="brackets" data-v-b30413f6>{</span></div><div class="padTwo VSL" data-v-b30413f6><span class="word" data-v-b30413f6>console</span><span class="variable" data-v-b30413f6>.log</span><span class="brackets" data-v-b30413f6>(</span><span class="word" data-v-b30413f6>result</span> <span class="brackets" data-v-b30413f6>)</span><div data-v-b30413f6></div></div><div data-v-b30413f6><span class="brackets" data-v-b30413f6>})</span></div><br data-v-b30413f6><div data-v-b30413f6><span class="word" data-v-b30413f6>console</span><span class="variable" data-v-b30413f6>.log</span><span class="brackets" data-v-b30413f6>(</span> <span class="number" data-v-b30413f6>5</span><span class="brackets" data-v-b30413f6>)</span></div><div data-v-b30413f6><span class="then" data-v-b30413f6>＜/</span><span class="number" data-v-b30413f6>script </span> <span class="then" data-v-b30413f6>&gt;</span></div><br data-v-b30413f6><p data-v-b30413f6>控制台打印: 1 3 5</p><br data-v-b30413f6><p data-v-b30413f6>現在調用棧空閒</p><p data-v-b30413f6>宏&amp;微 執行哪個?</p><p class="cor36" data-v-b30413f6>優先 微</p><p data-v-b30413f6>直到 微隊列 清空</p><p data-v-b30413f6>再執行 宏</p></div><span class="cor29" data-v-b30413f6>_</span><div class="bgcVS cor36" data-v-b30413f6><div data-v-b30413f6>調用棧</div></div><span class="cor29" data-v-b30413f6>_</span><div class="w100" data-v-b30413f6><div class="bgcVS" data-v-b30413f6><div class="cor36" data-v-b30413f6>宿主環境(瀏覽器)</div><div data-v-b30413f6><span class="variable" data-v-b30413f6>setTimeout</span><span class="brackets" data-v-b30413f6>(()</span><span class="function" data-v-b30413f6>=&gt;</span><span class="brackets" data-v-b30413f6>{</span></div><div class="padTwo VSL" data-v-b30413f6><span class="word" data-v-b30413f6>console</span><span class="variable" data-v-b30413f6>.log</span><span class="brackets" data-v-b30413f6>(</span> <span class="number" data-v-b30413f6>2</span><span class="brackets" data-v-b30413f6>)</span><div data-v-b30413f6></div></div><div data-v-b30413f6><span class="brackets" data-v-b30413f6>},</span> <span class="number" data-v-b30413f6>0</span><span class="brackets" data-v-b30413f6>)</span></div></div><div class="bgcVS" data-v-b30413f6><div class="cor36" data-v-b30413f6><span class="spoGra" data-v-b30413f6> 宏任務隊列 </span></div><div data-v-b30413f6><span class="brackets" data-v-b30413f6>()</span><span class="function" data-v-b30413f6>=&gt;</span><span class="brackets" data-v-b30413f6>{</span></div><div class="padTwo VSL" data-v-b30413f6><span class="word" data-v-b30413f6>console</span><span class="variable" data-v-b30413f6>.log</span><span class="brackets" data-v-b30413f6>(</span> <span class="number" data-v-b30413f6>2</span><span class="brackets" data-v-b30413f6>)</span><div data-v-b30413f6></div></div><div data-v-b30413f6><span class="brackets" data-v-b30413f6>}</span></div></div><div class="bgcVS" data-v-b30413f6><div class="cor36" data-v-b30413f6><span class="spoGra" data-v-b30413f6> 微任務隊列 </span></div><div data-v-b30413f6><span class="word" data-v-b30413f6>result</span><span class="function" data-v-b30413f6>=&gt;</span><span class="brackets" data-v-b30413f6>{</span></div><div class="padTwo VSL" data-v-b30413f6><span class="word" data-v-b30413f6>console</span><span class="variable" data-v-b30413f6>.log</span><span class="brackets" data-v-b30413f6>(</span><span class="word" data-v-b30413f6>result</span><span class="brackets" data-v-b30413f6>)</span><div data-v-b30413f6></div></div><div data-v-b30413f6><span class="brackets" data-v-b30413f6>}</span></div></div></div></div><p class="fz28" data-v-b30413f6>1. 什麼是宏任務?</p><p class="fz28" data-v-b30413f6>瀏覽器執行的 異步代碼</p><br data-v-b30413f6><p class="fz28" data-v-b30413f6>JS腳本 (script)</p><p class="fz28" data-v-b30413f6>setTimeout</p><p class="fz28" data-v-b30413f6>AJAX請求完成事件</p><p class="fz28" data-v-b30413f6>用戶交互事件</p><br data-v-b30413f6><p class="fz28" data-v-b30413f6>2. 什麼是微任務?</p><p class="fz28" data-v-b30413f6>JS 引擎執行的 異步代碼</p><br data-v-b30413f6><p class="fz28" data-v-b30413f6>Promise物件.then() 的回調</p><br data-v-b30413f6><p class="fz28" data-v-b30413f6>3. JS 代碼如何執行?</p><p class="fz28" data-v-b30413f6>執行第一個 script 腳本事件 宏任務 , 裡面 同步代碼</p><br data-v-b30413f6><p class="fz28" data-v-b30413f6> 遇到 宏任務 / 微任務 交給 宿主環境 , 有 結果 回調函數 進入 對應 隊列 </p><br data-v-b30413f6><p class="fz28" data-v-b30413f6> 當執行棧 空閒時 , 清空 微任務隊列 , 再執行 下一個 宏任務 </p><div class="bgcVS" data-v-b30413f6><div data-v-b30413f6><span class="word" data-v-b30413f6>console</span><span class="variable" data-v-b30413f6>.log</span><span class="brackets" data-v-b30413f6>(</span> <span class="number" data-v-b30413f6>1</span><span class="brackets" data-v-b30413f6>)</span></div><br data-v-b30413f6><div data-v-b30413f6><span class="variable" data-v-b30413f6>setTimeout</span><span class="brackets" data-v-b30413f6>(()</span><span class="function" data-v-b30413f6>=&gt;</span> <span class="brackets" data-v-b30413f6>{</span></div><div class="padTwo VSL" data-v-b30413f6><span class="word" data-v-b30413f6>console</span><span class="variable" data-v-b30413f6>.log</span><span class="brackets" data-v-b30413f6>(</span> <span class="number" data-v-b30413f6>2</span><span class="brackets" data-v-b30413f6>)</span><div data-v-b30413f6><span class="function" data-v-b30413f6>const </span><span class="number" data-v-b30413f6>p </span> <span class="then" data-v-b30413f6>= new </span><span class="brackets" data-v-b30413f6>Promise</span><span class="brackets" data-v-b30413f6>(</span><span class="variable" data-v-b30413f6>resolve</span><span class="function" data-v-b30413f6>=&gt;</span><span class="variable" data-v-b30413f6>resolve</span><span class="brackets" data-v-b30413f6>(</span> <span class="number" data-v-b30413f6>3</span><span class="brackets" data-v-b30413f6>))</span></div><div data-v-b30413f6><span class="number" data-v-b30413f6>p </span><span class="variable" data-v-b30413f6>.then</span><span class="brackets" data-v-b30413f6>(</span><span class="word" data-v-b30413f6>result</span><span class="function" data-v-b30413f6>=&gt;</span><span class="word" data-v-b30413f6>console</span><span class="variable" data-v-b30413f6>.log</span><span class="brackets" data-v-b30413f6>(</span><span class="word" data-v-b30413f6>result</span><span class="brackets" data-v-b30413f6>))</span></div><div data-v-b30413f6></div></div><div data-v-b30413f6><span class="brackets" data-v-b30413f6>},</span> <span class="number" data-v-b30413f6>0</span><span class="brackets" data-v-b30413f6>)</span></div><br data-v-b30413f6><div data-v-b30413f6><span class="function" data-v-b30413f6>const </span><span class="number" data-v-b30413f6>p </span> <span class="then" data-v-b30413f6>= new </span><span class="brackets" data-v-b30413f6>Promise</span><span class="brackets" data-v-b30413f6>(</span><span class="variable" data-v-b30413f6>resolve</span><span class="function" data-v-b30413f6>=&gt;</span> <span class="brackets" data-v-b30413f6>{</span></div><div class="padTwo VSL" data-v-b30413f6><span class="variable" data-v-b30413f6>setTimeout</span><span class="brackets" data-v-b30413f6>(()</span><span class="function" data-v-b30413f6>=&gt;</span> <span class="brackets" data-v-b30413f6>{</span><div data-v-b30413f6></div><div class="padTwo VSL" data-v-b30413f6><span class="word" data-v-b30413f6>console</span><span class="variable" data-v-b30413f6>.log</span><span class="brackets" data-v-b30413f6>(</span> <span class="number" data-v-b30413f6>4</span><span class="brackets" data-v-b30413f6>)</span><div data-v-b30413f6></div></div><div data-v-b30413f6><span class="brackets" data-v-b30413f6>},</span> <span class="number" data-v-b30413f6>0</span><span class="brackets" data-v-b30413f6>)</span></div><div data-v-b30413f6><span class="variable" data-v-b30413f6>resolve</span><span class="brackets" data-v-b30413f6>(</span> <span class="number" data-v-b30413f6>5</span><span class="brackets" data-v-b30413f6>)</span></div></div><div data-v-b30413f6><span class="brackets" data-v-b30413f6>})</span></div><br data-v-b30413f6><div data-v-b30413f6><span class="number" data-v-b30413f6>p </span><span class="variable" data-v-b30413f6>.then</span><span class="brackets" data-v-b30413f6>(</span> <span class="word" data-v-b30413f6>result</span><span class="function" data-v-b30413f6>=&gt;</span><span class="word" data-v-b30413f6>console</span><span class="variable" data-v-b30413f6>.log</span><span class="brackets" data-v-b30413f6>(</span> <span class="word" data-v-b30413f6>result</span><span class="brackets" data-v-b30413f6>))</span></div><br data-v-b30413f6><div data-v-b30413f6><span class="function" data-v-b30413f6>const </span> <span class="word" data-v-b30413f6>p2</span><span class="then" data-v-b30413f6>= new </span><span class="brackets" data-v-b30413f6>Promise</span><span class="brackets" data-v-b30413f6>(</span><span class="variable" data-v-b30413f6>resolve</span><span class="function" data-v-b30413f6>=&gt;</span><span class="variable" data-v-b30413f6>resolve</span><span class="brackets" data-v-b30413f6>(</span> <span class="number" data-v-b30413f6>6</span><span class="brackets" data-v-b30413f6>))</span></div><br data-v-b30413f6><div data-v-b30413f6><span class="word" data-v-b30413f6>p2</span> <span class="variable" data-v-b30413f6>.then</span><span class="brackets" data-v-b30413f6>(</span> <span class="word" data-v-b30413f6>result</span><span class="function" data-v-b30413f6>=&gt;</span><span class="word" data-v-b30413f6>console</span><span class="variable" data-v-b30413f6>.log</span><span class="brackets" data-v-b30413f6>(</span> <span class="word" data-v-b30413f6>result</span><span class="brackets" data-v-b30413f6>))</span></div><br data-v-b30413f6><div data-v-b30413f6><span class="word" data-v-b30413f6>console</span><span class="variable" data-v-b30413f6>.log</span><span class="brackets" data-v-b30413f6>(</span> <span class="number" data-v-b30413f6>7</span><span class="brackets" data-v-b30413f6>)</span></div></div><p class="fz28" data-v-b30413f6> setTimeout ... 宏任務 ... 交給瀏覽器...... 發現 時間到 0...推入宏任務列隊 </p><br data-v-b30413f6><p class="fz28" data-v-b30413f6> new Promise ... 同步 ... 放調用棧 ... resolve立刻執行 ... setTimout放宿主環境 ... 發現倒數0,放進宏任務隊列 </p><br data-v-b30413f6><p class="fz28" data-v-b30413f6> p 調用的 then 方法 同步 ... then 裡面異步 ... 只有當 promise 狀態改變後 , 才把 then 裡面回調推入到 微任務隊列 </p><br data-v-b30413f6><div data-v-b30413f6><img class="w100" src="'+G8+'" data-v-b30413f6></div><br data-v-b30413f6><p class="fz28" data-v-b30413f6>然後 清空微任務隊列</p><p class="fz28" data-v-b30413f6>再執行 宏任務 1.</p><p class="fz28" data-v-b30413f6>resolve 改變 promise 狀態</p><p class="fz28" data-v-b30413f6>.then(裡面的回調推入微任務)</p><br data-v-b30413f6><p class="fz28" data-v-b30413f6>!! 先執行微任務 !!</p><br data-v-b30413f6><br data-v-b30413f6><br data-v-b30413f6><p class="fz36 cor36" data-v-b30413f6>Promise.all</p><p class="fz28" data-v-b30413f6> 合併多個 Promise 對象 , 等待所有 <span class="spo cor36" data-v-b30413f6>同時成功完成</span> or 某一個失敗 , 後續處理 </p><br data-v-b30413f6><div class="dis" data-v-b30413f6><div class="bor pad20" data-v-b30413f6><br data-v-b30413f6><br data-v-b30413f6><div data-v-b30413f6><span class="bor pad20 fz28" data-v-b30413f6>new Peomise()</span></div><br data-v-b30413f6><br data-v-b30413f6><div data-v-b30413f6><span class="bor pad20 fz28" data-v-b30413f6>new Peomise()</span></div><br data-v-b30413f6><br data-v-b30413f6><div data-v-b30413f6><span class="bor pad20 fz28" data-v-b30413f6>new Peomise()</span></div><br data-v-b30413f6><br data-v-b30413f6></div><div class="pad20" data-v-b30413f6><div data-v-b30413f6><br data-v-b30413f6><br data-v-b30413f6><span class="fz28" data-v-b30413f6>..&gt;</span></div></div><div class="pad20" data-v-b30413f6><div class="bor disInl pad20" data-v-b30413f6><span class="fz28" data-v-b30413f6>新的</span><br data-v-b30413f6><span class="fz28" data-v-b30413f6>Promise</span><br data-v-b30413f6><span class="fz28" data-v-b30413f6>對象</span></div></div><div class="pad20" data-v-b30413f6><div data-v-b30413f6><span class="fz28" data-v-b30413f6>所有 ..&gt;</span></div><div data-v-b30413f6><span class="fz28" data-v-b30413f6>Promise</span></div><div data-v-b30413f6><span class="fz28" data-v-b30413f6>都成功</span></div><br data-v-b30413f6><div data-v-b30413f6><span class="fz28" data-v-b30413f6>任一個 ..&gt;</span></div><div data-v-b30413f6><span class="fz28" data-v-b30413f6>Promise</span></div><div data-v-b30413f6><span class="fz28" data-v-b30413f6>失敗</span></div></div><div class="pad20" data-v-b30413f6><div data-v-b30413f6><span class="bor pad20 fz28" data-v-b30413f6>.then(回調函數)</span></div><br data-v-b30413f6><br data-v-b30413f6><br data-v-b30413f6><br data-v-b30413f6><br data-v-b30413f6><br data-v-b30413f6><div data-v-b30413f6><span class="bor pad20 fz28" data-v-b30413f6>.catch(回調函數)</span></div><br data-v-b30413f6></div></div><br data-v-b30413f6><div class="bgcVS" data-v-b30413f6><div data-v-b30413f6><span class="function" data-v-b30413f6>const </span><span class="number" data-v-b30413f6>p </span> <span class="then" data-v-b30413f6>=</span><span class="brackets" data-v-b30413f6>Promise</span><span class="variable" data-v-b30413f6>.all</span><span class="brackets" data-v-b30413f6>([</span><span class="word" data-v-b30413f6>Promise對象,Promise對象,...</span><span class="brackets" data-v-b30413f6>])</span></div><div data-v-b30413f6><span class="number" data-v-b30413f6>p </span><span class="variable" data-v-b30413f6>.then</span><span class="brackets" data-v-b30413f6>(</span> <span class="word" data-v-b30413f6>result</span><span class="function" data-v-b30413f6>=&gt;</span> <span class="brackets" data-v-b30413f6>{</span></div><div class="padTwo VSL" data-v-b30413f6><span class="comment" data-v-b30413f6>//result結果:[Promise對象成功結果,Promise對象成功結果,...]</span><div data-v-b30413f6></div></div><div data-v-b30413f6><span class="brackets" data-v-b30413f6>})</span><span class="variable" data-v-b30413f6>.catch</span><span class="brackets" data-v-b30413f6>(</span><span class="variable" data-v-b30413f6>error</span><span class="function" data-v-b30413f6>=&gt;</span> <span class="brackets" data-v-b30413f6>{</span></div><div class="padTwo VSL" data-v-b30413f6><span class="comment" data-v-b30413f6>//第一個失敗的Promise對象,拋出的異常</span><div data-v-b30413f6></div></div><div data-v-b30413f6><span class="brackets" data-v-b30413f6>})</span></div></div><div class="bgcVS" data-v-b30413f6><div data-v-b30413f6><span class="then" data-v-b30413f6>＜</span> <span class="number" data-v-b30413f6>ul </span><span class="function" data-v-b30413f6>class </span> <span class="then" data-v-b30413f6>=</span><span class="src" data-v-b30413f6>&quot;my-ul&quot;</span> <span class="word" data-v-b30413f6>&gt;＜</span><span class="number" data-v-b30413f6>ul</span> <span class="then" data-v-b30413f6>&gt;</span></div><br data-v-b30413f6><div data-v-b30413f6><span class="function" data-v-b30413f6>const </span><span class="brackets" data-v-b30413f6>bjPromise</span><span class="then" data-v-b30413f6>=</span><span class="variable" data-v-b30413f6>axios</span><span class="brackets" data-v-b30413f6>({</span> <span class="word" data-v-b30413f6>url:</span><span class="src" data-v-b30413f6>&quot;api/weather&quot;</span><span class="word" data-v-b30413f6>,params:</span><span class="brackets" data-v-b30413f6>{</span> <span class="word" data-v-b30413f6>city:</span><span class="src" data-v-b30413f6>&quot;110100&quot;</span><span class="brackets" data-v-b30413f6>}})</span></div><div data-v-b30413f6><span class="function" data-v-b30413f6>const </span><span class="brackets" data-v-b30413f6>shPromise</span><span class="then" data-v-b30413f6>=</span><span class="variable" data-v-b30413f6>axios</span><span class="brackets" data-v-b30413f6>({</span> <span class="word" data-v-b30413f6>url:</span><span class="src" data-v-b30413f6>&quot;api/weather&quot;</span><span class="word" data-v-b30413f6>,params:</span><span class="brackets" data-v-b30413f6>{</span> <span class="word" data-v-b30413f6>city:</span><span class="src" data-v-b30413f6>&quot;310100&quot;</span><span class="brackets" data-v-b30413f6>}})</span></div><div data-v-b30413f6><span class="function" data-v-b30413f6>const </span><span class="brackets" data-v-b30413f6>gzPromise</span><span class="then" data-v-b30413f6>=</span><span class="variable" data-v-b30413f6>axios</span><span class="brackets" data-v-b30413f6>({</span> <span class="word" data-v-b30413f6>url:</span><span class="src" data-v-b30413f6>&quot;api/weather&quot;</span><span class="word" data-v-b30413f6>,params:</span><span class="brackets" data-v-b30413f6>{</span> <span class="word" data-v-b30413f6>city:</span><span class="src" data-v-b30413f6>&quot;440100&quot;</span><span class="brackets" data-v-b30413f6>}})</span></div><div data-v-b30413f6><span class="function" data-v-b30413f6>const </span><span class="brackets" data-v-b30413f6>szPromise</span><span class="then" data-v-b30413f6>=</span><span class="variable" data-v-b30413f6>axios</span><span class="brackets" data-v-b30413f6>({</span> <span class="word" data-v-b30413f6>url:</span><span class="src" data-v-b30413f6>&quot;api/weather&quot;</span><span class="word" data-v-b30413f6>,params:</span><span class="brackets" data-v-b30413f6>{</span> <span class="word" data-v-b30413f6>city:</span><span class="src" data-v-b30413f6>&quot;440300&quot;</span><span class="brackets" data-v-b30413f6>}})</span></div><br data-v-b30413f6><p data-v-b30413f6> 思想: 把 city 編碼 放到數組裡 , 遍歷 數組裡 每個城市編碼 , 創建一個 axios 請求 </p><br data-v-b30413f6><div data-v-b30413f6><span class="comment" data-v-b30413f6>//Peomise.all合併多個Promise對象</span></div><div data-v-b30413f6><span class="function" data-v-b30413f6>const </span><span class="number" data-v-b30413f6>p </span> <span class="then" data-v-b30413f6>=</span><span class="brackets" data-v-b30413f6>Promise</span><span class="variable" data-v-b30413f6>.all</span><span class="brackets" data-v-b30413f6>([</span><span class="word" data-v-b30413f6>bjPromise,shPromise,gzPromise,szPromise</span><span class="brackets" data-v-b30413f6>])</span></div><div data-v-b30413f6><span class="number" data-v-b30413f6>p </span><span class="variable" data-v-b30413f6>.then</span><span class="brackets" data-v-b30413f6>(</span> <span class="word" data-v-b30413f6>result</span><span class="function" data-v-b30413f6>=&gt;</span> <span class="brackets" data-v-b30413f6>{</span></div><div class="padTwo VSL" data-v-b30413f6><span class="word" data-v-b30413f6>console</span><span class="variable" data-v-b30413f6>.log</span><span class="brackets" data-v-b30413f6>(</span> <span class="word" data-v-b30413f6>result</span><span class="brackets" data-v-b30413f6>)</span><div data-v-b30413f6></div><br data-v-b30413f6><div data-v-b30413f6><span class="function" data-v-b30413f6>const </span><span class="word" data-v-b30413f6>htmlStr</span> <span class="then" data-v-b30413f6>=</span><span class="word" data-v-b30413f6>result</span><span class="variable" data-v-b30413f6>.map</span><span class="brackets" data-v-b30413f6>(</span> <span class="word" data-v-b30413f6>item</span><span class="function" data-v-b30413f6>=&gt;</span> <span class="brackets" data-v-b30413f6>{</span></div><div class="padTwo VSL" data-v-b30413f6><span class="then" data-v-b30413f6>return </span><span class="src" data-v-b30413f6>`＜li&gt;</span> <span class="then" data-v-b30413f6>${</span><span class="word" data-v-b30413f6>item.data.data.area</span><span class="then" data-v-b30413f6>}</span> <span class="word" data-v-b30413f6>---</span><span class="then" data-v-b30413f6>${</span><span class="word" data-v-b30413f6>item.data.data.weather</span><span class="then" data-v-b30413f6>}</span> <span class="src" data-v-b30413f6>＜/li&gt;`</span><div data-v-b30413f6></div></div><div data-v-b30413f6><span class="brackets" data-v-b30413f6>})</span><span class="variable" data-v-b30413f6>.join</span><span class="brackets" data-v-b30413f6>(</span> <span class="then" data-v-b30413f6>&#39;&#39;</span><span class="brackets" data-v-b30413f6>)</span></div><div data-v-b30413f6><span class="word" data-v-b30413f6>document</span><span class="variable" data-v-b30413f6>.querySelector</span><span class="brackets" data-v-b30413f6>(</span><span class="src" data-v-b30413f6>&quot;.my-ul&quot;</span><span class="brackets" data-v-b30413f6>)</span><span class="variable" data-v-b30413f6>.innerHTML</span><span class="then" data-v-b30413f6>=</span> <span class="word" data-v-b30413f6>htmlStr</span></div><br data-v-b30413f6></div><div data-v-b30413f6><span class="brackets" data-v-b30413f6>})</span><span class="variable" data-v-b30413f6>.catch</span><span class="brackets" data-v-b30413f6>(</span><span class="variable" data-v-b30413f6>error</span><span class="function" data-v-b30413f6>=&gt;</span> <span class="brackets" data-v-b30413f6>{</span></div><div class="padTwo VSL" data-v-b30413f6><span class="word" data-v-b30413f6>console</span><span class="variable" data-v-b30413f6>.dir</span><span class="brackets" data-v-b30413f6>(</span><span class="variable" data-v-b30413f6>error</span><span class="brackets" data-v-b30413f6>)</span><div data-v-b30413f6></div></div><div data-v-b30413f6><span class="brackets" data-v-b30413f6>})</span></div></div><br data-v-b30413f6><br data-v-b30413f6><div id="threeajax008" class="articleCardTitle cor36 fz34" data-v-b30413f6> 9.8 promise 閱讀代碼練習 </div><p class="fz28" data-v-b30413f6> js 執行 由上往下 , 先同步 再異步 , 先微任務 再 宏任務 </p><p class="fz28" data-v-b30413f6>new Promise() ...&gt; Promise.resolve()</p><p class="fz28" data-v-b30413f6> then 和 catch 內部沒有 throw new Error 相當於 resolve </p><p class="fz28" data-v-b30413f6>async function 相當於返回 Promise.resolve()</p><p class="fz28" data-v-b30413f6>await 後面代碼 都是異步</p><br data-v-b30413f6><p class="fz28" data-v-b30413f6> 除了 new Promise 寫法 , 還可以 Promise.resolve().then().catch() </p><div class="bgcVS" data-v-b30413f6><div data-v-b30413f6><span class="brackets" data-v-b30413f6>Promise</span><span class="variable" data-v-b30413f6>.resolve</span><span class="brackets" data-v-b30413f6>()</span></div><div class="padTwo VSL" data-v-b30413f6><span class="variable" data-v-b30413f6>.then</span><span class="brackets" data-v-b30413f6>(()</span><span class="function" data-v-b30413f6>=&gt; </span> <span class="brackets" data-v-b30413f6>{</span><div data-v-b30413f6></div><div class="padTwo VSL" data-v-b30413f6><span class="word" data-v-b30413f6>console</span><span class="variable" data-v-b30413f6>.log</span><span class="brackets" data-v-b30413f6>(</span> <span class="number" data-v-b30413f6>1</span><span class="brackets" data-v-b30413f6>);</span><div data-v-b30413f6></div></div><div data-v-b30413f6><span class="brackets" data-v-b30413f6>})</span></div></div><div class="padTwo VSL" data-v-b30413f6><span class="variable" data-v-b30413f6>.catch</span><span class="brackets" data-v-b30413f6>(()</span><span class="function" data-v-b30413f6>=&gt; </span> <span class="brackets" data-v-b30413f6>{</span><div data-v-b30413f6></div><div class="padTwo VSL" data-v-b30413f6><span class="word" data-v-b30413f6>console</span><span class="variable" data-v-b30413f6>.log</span><span class="brackets" data-v-b30413f6>(</span> <span class="number" data-v-b30413f6>2</span><span class="brackets" data-v-b30413f6>);</span><div data-v-b30413f6></div></div><div data-v-b30413f6><span class="brackets" data-v-b30413f6>})</span></div></div><p data-v-b30413f6>相當於 new Promise 直接調用 resolve 方法</p><div data-v-b30413f6><span class="then" data-v-b30413f6>new </span><span class="brackets" data-v-b30413f6>Promise</span><span class="brackets" data-v-b30413f6>(()</span><span class="function" data-v-b30413f6>=&gt; </span> <span class="brackets" data-v-b30413f6>{</span></div><div class="padTwo VSL" data-v-b30413f6><span class="variable" data-v-b30413f6>resolve</span><span class="brackets" data-v-b30413f6>()</span><div data-v-b30413f6></div></div><div data-v-b30413f6><span class="brackets" data-v-b30413f6>})</span></div><p data-v-b30413f6>後續觸發 .then 方法</p><br data-v-b30413f6><br data-v-b30413f6><br data-v-b30413f6><br data-v-b30413f6><br data-v-b30413f6><br data-v-b30413f6><p data-v-b30413f6>1.1 then 和 catch 內部沒有 throw new Error 相當於 resolve</p><br data-v-b30413f6><div data-v-b30413f6><span class="brackets" data-v-b30413f6>Promise</span><span class="variable" data-v-b30413f6>.resolve</span><span class="brackets" data-v-b30413f6>()</span></div><div class="padTwo VSL" data-v-b30413f6><span class="variable" data-v-b30413f6>.then</span><span class="brackets" data-v-b30413f6>(()</span><span class="function" data-v-b30413f6>=&gt; </span> <span class="brackets" data-v-b30413f6>{</span><div data-v-b30413f6></div><div class="padTwo VSL" data-v-b30413f6><span class="word" data-v-b30413f6>console</span><span class="variable" data-v-b30413f6>.log</span><span class="brackets" data-v-b30413f6>(</span> <span class="number" data-v-b30413f6>1</span><span class="brackets" data-v-b30413f6>);</span><div data-v-b30413f6></div></div><div data-v-b30413f6><span class="brackets" data-v-b30413f6>})</span></div></div><div class="padTwo VSL" data-v-b30413f6><span class="variable" data-v-b30413f6>.catch</span><span class="brackets" data-v-b30413f6>(()</span><span class="function" data-v-b30413f6>=&gt; </span> <span class="brackets" data-v-b30413f6>{</span><div data-v-b30413f6></div><div class="padTwo VSL" data-v-b30413f6><span class="word" data-v-b30413f6>console</span><span class="variable" data-v-b30413f6>.log</span><span class="brackets" data-v-b30413f6>(</span> <span class="number" data-v-b30413f6>2</span><span class="brackets" data-v-b30413f6>);</span><div data-v-b30413f6></div></div><div data-v-b30413f6><span class="brackets" data-v-b30413f6>})</span></div><div data-v-b30413f6><span class="comment" data-v-b30413f6>//相當於resolve(),會執行後面的.then()</span></div><span class="variable" data-v-b30413f6>.then</span><span class="brackets" data-v-b30413f6>(()</span><span class="function" data-v-b30413f6>=&gt; </span> <span class="brackets" data-v-b30413f6>{</span><div data-v-b30413f6></div><div class="padTwo VSL" data-v-b30413f6><span class="word" data-v-b30413f6>console</span><span class="variable" data-v-b30413f6>.log</span><span class="brackets" data-v-b30413f6>(</span> <span class="number" data-v-b30413f6>3</span><span class="brackets" data-v-b30413f6>);</span><div data-v-b30413f6></div></div><div data-v-b30413f6><span class="brackets" data-v-b30413f6>})</span></div></div><br data-v-b30413f6><div data-v-b30413f6><span class="comment" data-v-b30413f6>//打印1</span></div><div data-v-b30413f6><span class="comment" data-v-b30413f6>//打印3</span></div><br data-v-b30413f6><br data-v-b30413f6><br data-v-b30413f6><br data-v-b30413f6><br data-v-b30413f6><p data-v-b30413f6>1.2</p><br data-v-b30413f6><div data-v-b30413f6><span class="brackets" data-v-b30413f6>Promise</span><span class="variable" data-v-b30413f6>.resolve</span><span class="brackets" data-v-b30413f6>()</span></div><div class="padTwo VSL" data-v-b30413f6><span class="variable" data-v-b30413f6>.then</span><span class="brackets" data-v-b30413f6>(()</span><span class="function" data-v-b30413f6>=&gt; </span> <span class="brackets" data-v-b30413f6>{</span><div data-v-b30413f6></div><div class="padTwo VSL" data-v-b30413f6><span class="word" data-v-b30413f6>console</span><span class="variable" data-v-b30413f6>.log</span><span class="brackets" data-v-b30413f6>(</span> <span class="number" data-v-b30413f6>1</span><span class="brackets" data-v-b30413f6>);</span><div data-v-b30413f6><span class="function" data-v-b30413f6>throw </span><span class="then" data-v-b30413f6>new </span><span class="brackets" data-v-b30413f6>Error</span></div><div data-v-b30413f6><span class="comment" data-v-b30413f6>//拋出錯誤相當於reject,執行後面.catch()</span></div><div data-v-b30413f6></div></div><div data-v-b30413f6><span class="brackets" data-v-b30413f6>})</span></div></div><div class="padTwo VSL" data-v-b30413f6><span class="variable" data-v-b30413f6>.catch</span><span class="brackets" data-v-b30413f6>(()</span><span class="function" data-v-b30413f6>=&gt; </span> <span class="brackets" data-v-b30413f6>{</span><div data-v-b30413f6></div><div class="padTwo VSL" data-v-b30413f6><span class="word" data-v-b30413f6>console</span><span class="variable" data-v-b30413f6>.log</span><span class="brackets" data-v-b30413f6>(</span> <span class="number" data-v-b30413f6>2</span><span class="brackets" data-v-b30413f6>);</span><div data-v-b30413f6><span class="comment" data-v-b30413f6>//相當於resolve(),會執行後面的.then()</span></div><div data-v-b30413f6></div></div><div data-v-b30413f6><span class="brackets" data-v-b30413f6>})</span></div><span class="variable" data-v-b30413f6>.then</span><span class="brackets" data-v-b30413f6>(()</span><span class="function" data-v-b30413f6>=&gt; </span> <span class="brackets" data-v-b30413f6>{</span><div data-v-b30413f6></div><div class="padTwo VSL" data-v-b30413f6><span class="word" data-v-b30413f6>console</span><span class="variable" data-v-b30413f6>.log</span><span class="brackets" data-v-b30413f6>(</span> <span class="number" data-v-b30413f6>3</span><span class="brackets" data-v-b30413f6>);</span><div data-v-b30413f6></div></div><div data-v-b30413f6><span class="brackets" data-v-b30413f6>})</span></div></div><br data-v-b30413f6><div data-v-b30413f6><span class="comment" data-v-b30413f6>//打印1</span></div><div data-v-b30413f6><span class="comment" data-v-b30413f6>//打印2</span></div><div data-v-b30413f6><span class="comment" data-v-b30413f6>//打印3</span></div><br data-v-b30413f6><br data-v-b30413f6><br data-v-b30413f6><br data-v-b30413f6><br data-v-b30413f6><p data-v-b30413f6>1.3</p><br data-v-b30413f6><div data-v-b30413f6><span class="brackets" data-v-b30413f6>Promise</span><span class="variable" data-v-b30413f6>.reject</span><span class="brackets" data-v-b30413f6>()</span></div><div class="padTwo VSL" data-v-b30413f6><span class="variable" data-v-b30413f6>.then</span><span class="brackets" data-v-b30413f6>(()</span><span class="function" data-v-b30413f6>=&gt; </span> <span class="brackets" data-v-b30413f6>{</span><div data-v-b30413f6></div><div class="padTwo VSL" data-v-b30413f6><span class="word" data-v-b30413f6>console</span><span class="variable" data-v-b30413f6>.log</span><span class="brackets" data-v-b30413f6>(</span> <span class="number" data-v-b30413f6>1</span><span class="brackets" data-v-b30413f6>);</span><div data-v-b30413f6></div></div><div data-v-b30413f6><span class="brackets" data-v-b30413f6>})</span></div></div><div class="padTwo VSL" data-v-b30413f6><span class="variable" data-v-b30413f6>.catch</span><span class="brackets" data-v-b30413f6>(()</span><span class="function" data-v-b30413f6>=&gt; </span> <span class="brackets" data-v-b30413f6>{</span><div data-v-b30413f6></div><div class="padTwo VSL" data-v-b30413f6><span class="word" data-v-b30413f6>console</span><span class="variable" data-v-b30413f6>.log</span><span class="brackets" data-v-b30413f6>(</span> <span class="number" data-v-b30413f6>2</span><span class="brackets" data-v-b30413f6>);</span><div data-v-b30413f6><span class="comment" data-v-b30413f6>//相當於resolve(),會執行後面的.then()</span></div><div data-v-b30413f6></div></div><div data-v-b30413f6><span class="brackets" data-v-b30413f6>})</span></div><span class="variable" data-v-b30413f6>.then</span><span class="brackets" data-v-b30413f6>(()</span><span class="function" data-v-b30413f6>=&gt; </span> <span class="brackets" data-v-b30413f6>{</span><div data-v-b30413f6></div><div class="padTwo VSL" data-v-b30413f6><span class="word" data-v-b30413f6>console</span><span class="variable" data-v-b30413f6>.log</span><span class="brackets" data-v-b30413f6>(</span> <span class="number" data-v-b30413f6>3</span><span class="brackets" data-v-b30413f6>);</span><div data-v-b30413f6></div></div><div data-v-b30413f6><span class="brackets" data-v-b30413f6>})</span></div></div><br data-v-b30413f6><div data-v-b30413f6><span class="comment" data-v-b30413f6>//打印2</span></div><div data-v-b30413f6><span class="comment" data-v-b30413f6>//打印3</span></div><br data-v-b30413f6><br data-v-b30413f6><br data-v-b30413f6><br data-v-b30413f6><br data-v-b30413f6><p data-v-b30413f6>1.4</p><br data-v-b30413f6><div data-v-b30413f6><span class="brackets" data-v-b30413f6>Promise</span><span class="variable" data-v-b30413f6>.reject</span><span class="brackets" data-v-b30413f6>()</span></div><div class="padTwo VSL" data-v-b30413f6><span class="variable" data-v-b30413f6>.then</span><span class="brackets" data-v-b30413f6>(()</span><span class="function" data-v-b30413f6>=&gt; </span> <span class="brackets" data-v-b30413f6>{</span><div data-v-b30413f6></div><div class="padTwo VSL" data-v-b30413f6><span class="word" data-v-b30413f6>console</span><span class="variable" data-v-b30413f6>.log</span><span class="brackets" data-v-b30413f6>(</span> <span class="number" data-v-b30413f6>1</span><span class="brackets" data-v-b30413f6>);</span><div data-v-b30413f6></div></div><div data-v-b30413f6><span class="brackets" data-v-b30413f6>})</span></div></div><div class="padTwo VSL" data-v-b30413f6><span class="variable" data-v-b30413f6>.catch</span><span class="brackets" data-v-b30413f6>(()</span><span class="function" data-v-b30413f6>=&gt; </span> <span class="brackets" data-v-b30413f6>{</span><div data-v-b30413f6></div><div class="padTwo VSL" data-v-b30413f6><span class="word" data-v-b30413f6>console</span><span class="variable" data-v-b30413f6>.log</span><span class="brackets" data-v-b30413f6>(</span> <span class="number" data-v-b30413f6>2</span><span class="brackets" data-v-b30413f6>);</span><div data-v-b30413f6><span class="function" data-v-b30413f6>throw </span><span class="then" data-v-b30413f6>new </span><span class="brackets" data-v-b30413f6>Error</span></div><div data-v-b30413f6><span class="comment" data-v-b30413f6>//拋出錯誤相當於reject,執行後面.catch()</span></div><div data-v-b30413f6><span class="comment" data-v-b30413f6>//發現後面沒.catch() , 報錯</span></div><div data-v-b30413f6></div></div><div data-v-b30413f6><span class="brackets" data-v-b30413f6>})</span></div><span class="variable" data-v-b30413f6>.then</span><span class="brackets" data-v-b30413f6>(()</span><span class="function" data-v-b30413f6>=&gt; </span> <span class="brackets" data-v-b30413f6>{</span><div data-v-b30413f6></div><div class="padTwo VSL" data-v-b30413f6><span class="word" data-v-b30413f6>console</span><span class="variable" data-v-b30413f6>.log</span><span class="brackets" data-v-b30413f6>(</span> <span class="number" data-v-b30413f6>3</span><span class="brackets" data-v-b30413f6>);</span><div data-v-b30413f6></div></div><div data-v-b30413f6><span class="brackets" data-v-b30413f6>})</span></div></div><br data-v-b30413f6><div data-v-b30413f6><span class="comment" data-v-b30413f6>//打印2</span></div><br data-v-b30413f6><br data-v-b30413f6><br data-v-b30413f6><br data-v-b30413f6><br data-v-b30413f6><p data-v-b30413f6>2.1 async 相當於 返回 一個 Promise.resolve</p><div data-v-b30413f6><span class="function" data-v-b30413f6>const </span><span class="word" data-v-b30413f6>res</span> <span class="then" data-v-b30413f6>=</span><span class="function" data-v-b30413f6>async function </span><span class="word" data-v-b30413f6>fn</span> <span class="brackets" data-v-b30413f6>()</span><span class="brackets" data-v-b30413f6>{</span></div><div class="padTwo VSL" data-v-b30413f6><span class="then" data-v-b30413f6>return </span> <span class="number" data-v-b30413f6>100;</span><div data-v-b30413f6></div></div><div data-v-b30413f6><span class="brackets" data-v-b30413f6>};</span></div><div data-v-b30413f6><span class="word" data-v-b30413f6>console</span><span class="variable" data-v-b30413f6>.log</span><span class="brackets" data-v-b30413f6>(</span> <span class="word" data-v-b30413f6>res</span><span class="brackets" data-v-b30413f6>())</span><span class="comment" data-v-b30413f6>//得到一個promise物件,且是promise.resolve</span></div><br data-v-b30413f6><br data-v-b30413f6><br data-v-b30413f6><div data-v-b30413f6><span class="function" data-v-b30413f6>async</span><span class="function" data-v-b30413f6>function </span><span class="word" data-v-b30413f6>fn</span> <span class="brackets" data-v-b30413f6>(){</span></div><div class="padTwo VSL" data-v-b30413f6><span class="then" data-v-b30413f6>return </span><span class="number" data-v-b30413f6>100;</span><div data-v-b30413f6></div></div><div data-v-b30413f6><span class="brackets" data-v-b30413f6>};</span></div><br data-v-b30413f6><div data-v-b30413f6><span class="brackets" data-v-b30413f6>(</span><span class="function" data-v-b30413f6>async</span><span class="function" data-v-b30413f6>function </span><span class="word" data-v-b30413f6>fn</span> <span class="brackets" data-v-b30413f6>(){</span></div><div class="padTwo VSL" data-v-b30413f6><span class="function" data-v-b30413f6>const </span> <span class="word" data-v-b30413f6>a</span><span class="then" data-v-b30413f6>=</span> <span class="word" data-v-b30413f6>fn</span><span class="brackets" data-v-b30413f6>();</span><div data-v-b30413f6><span class="function" data-v-b30413f6>const </span><span class="word" data-v-b30413f6>b</span> <span class="then" data-v-b30413f6>= await </span><span class="word" data-v-b30413f6>fn</span> <span class="brackets" data-v-b30413f6>();</span></div><br data-v-b30413f6><div data-v-b30413f6><span class="word" data-v-b30413f6>console</span><span class="variable" data-v-b30413f6>.log</span><span class="brackets" data-v-b30413f6>(</span> <span class="word" data-v-b30413f6>a</span><span class="brackets" data-v-b30413f6>);</span></div><div data-v-b30413f6><span class="comment" data-v-b30413f6>//Promise.resolve(100)</span></div><div data-v-b30413f6><span class="word" data-v-b30413f6>console</span><span class="variable" data-v-b30413f6>.log</span><span class="brackets" data-v-b30413f6>(</span> <span class="word" data-v-b30413f6>b</span><span class="brackets" data-v-b30413f6>);</span></div><div data-v-b30413f6><span class="comment" data-v-b30413f6>//100//b配合上await得到return的值</span></div><div data-v-b30413f6></div></div><div data-v-b30413f6><span class="brackets" data-v-b30413f6>})();</span></div><br data-v-b30413f6><br data-v-b30413f6><br data-v-b30413f6><br data-v-b30413f6><br data-v-b30413f6><br data-v-b30413f6><p data-v-b30413f6>3.1 await 執行順序 , await 後面代碼都是異步的</p><div data-v-b30413f6><span class="function" data-v-b30413f6>async</span><span class="function" data-v-b30413f6>function </span><span class="word" data-v-b30413f6>fn1</span> <span class="brackets" data-v-b30413f6>(){</span></div><div class="padTwo VSL" data-v-b30413f6><span class="word" data-v-b30413f6>console</span><span class="variable" data-v-b30413f6>.log</span><span class="brackets" data-v-b30413f6>(</span><span class="src" data-v-b30413f6>&quot;fn1 start&quot;</span><span class="brackets" data-v-b30413f6>);</span><div data-v-b30413f6><span class="then" data-v-b30413f6>await </span> <span class="word" data-v-b30413f6>fn2</span><span class="brackets" data-v-b30413f6>();</span></div><div data-v-b30413f6><span class="word" data-v-b30413f6>console</span><span class="variable" data-v-b30413f6>.log</span><span class="brackets" data-v-b30413f6>(</span><span class="src" data-v-b30413f6>&quot;fn1 end&quot;</span><span class="brackets" data-v-b30413f6>);</span></div><div data-v-b30413f6></div></div><div data-v-b30413f6><span class="brackets" data-v-b30413f6>}</span></div><br data-v-b30413f6><div data-v-b30413f6><span class="function" data-v-b30413f6>async</span><span class="function" data-v-b30413f6>function </span><span class="word" data-v-b30413f6>fn2</span> <span class="brackets" data-v-b30413f6>(){</span></div><div class="padTwo VSL" data-v-b30413f6><span class="word" data-v-b30413f6>console</span><span class="variable" data-v-b30413f6>.log</span><span class="brackets" data-v-b30413f6>(</span><span class="src" data-v-b30413f6>&quot;fn2 start&quot;</span><span class="brackets" data-v-b30413f6>)</span><div data-v-b30413f6></div></div><div data-v-b30413f6><span class="brackets" data-v-b30413f6>}</span></div><br data-v-b30413f6><div data-v-b30413f6><span class="word" data-v-b30413f6>console</span><span class="variable" data-v-b30413f6>.log</span><span class="brackets" data-v-b30413f6>(</span> <span class="src" data-v-b30413f6>&quot;start&quot;</span><span class="brackets" data-v-b30413f6>);</span></div><div data-v-b30413f6><span class="word" data-v-b30413f6>fn1</span> <span class="brackets" data-v-b30413f6>();</span></div><div data-v-b30413f6><span class="word" data-v-b30413f6>console</span><span class="variable" data-v-b30413f6>.log</span><span class="brackets" data-v-b30413f6>(</span> <span class="src" data-v-b30413f6>&quot;end&quot;</span><span class="brackets" data-v-b30413f6>);</span></div><br data-v-b30413f6><p data-v-b30413f6>1. 函數定義 先略過</p><p data-v-b30413f6>2. 打印 start</p><p data-v-b30413f6>3. 調用 fn1 () 打印 fn1 start</p><p data-v-b30413f6>4. await 調用 fn2 () 裡面代碼馬上執行</p><p class="padTwo VSL" data-v-b30413f6>打印 fn2 start</p><p class="padTwo VSL cor36" data-v-b30413f6>! await 後面 所有代碼 都是 異步的</p><p class="padTwo VSL" data-v-b30413f6>console.log(&quot;fn1 end&quot;) 放進 隊列</p><p class="padTwo VSL" data-v-b30413f6>fn1() 執行完畢</p><p data-v-b30413f6>5 .打印 end</p><p data-v-b30413f6>6. 事件循環 打印 fn1 end</p><br data-v-b30413f6><br data-v-b30413f6><br data-v-b30413f6><br data-v-b30413f6><br data-v-b30413f6><p data-v-b30413f6>3.2</p><div data-v-b30413f6><span class="function" data-v-b30413f6>async</span><span class="function" data-v-b30413f6>function </span><span class="word" data-v-b30413f6>fn1</span> <span class="brackets" data-v-b30413f6>(){</span></div><div class="padTwo VSL" data-v-b30413f6><span class="word" data-v-b30413f6>console</span><span class="variable" data-v-b30413f6>.log</span><span class="brackets" data-v-b30413f6>(</span><span class="src" data-v-b30413f6>&quot;fn1 start&quot;</span><span class="brackets" data-v-b30413f6>);</span><div data-v-b30413f6><span class="then" data-v-b30413f6>await </span> <span class="word" data-v-b30413f6>fn2</span><span class="brackets" data-v-b30413f6>();</span></div><div data-v-b30413f6><span class="word" data-v-b30413f6>console</span><span class="variable" data-v-b30413f6>.log</span><span class="brackets" data-v-b30413f6>(</span><span class="src" data-v-b30413f6>&quot;fn1 end&quot;</span><span class="brackets" data-v-b30413f6>);</span></div><div data-v-b30413f6><span class="then" data-v-b30413f6>await </span> <span class="word" data-v-b30413f6>fn3</span><span class="brackets" data-v-b30413f6>();</span></div><div data-v-b30413f6><span class="word" data-v-b30413f6>console</span><span class="variable" data-v-b30413f6>.log</span><span class="brackets" data-v-b30413f6>(</span><span class="src" data-v-b30413f6>&quot;fn3 end&quot;</span><span class="brackets" data-v-b30413f6>);</span></div><div data-v-b30413f6></div></div><div data-v-b30413f6><span class="brackets" data-v-b30413f6>}</span></div><br data-v-b30413f6><div data-v-b30413f6><span class="function" data-v-b30413f6>async</span><span class="function" data-v-b30413f6>function </span><span class="word" data-v-b30413f6>fn2</span> <span class="brackets" data-v-b30413f6>(){</span></div><div class="padTwo VSL" data-v-b30413f6><span class="word" data-v-b30413f6>console</span><span class="variable" data-v-b30413f6>.log</span><span class="brackets" data-v-b30413f6>(</span><span class="src" data-v-b30413f6>&quot;fn2&quot;</span><span class="brackets" data-v-b30413f6>)</span><div data-v-b30413f6></div></div><div data-v-b30413f6><span class="brackets" data-v-b30413f6>}</span></div><br data-v-b30413f6><div data-v-b30413f6><span class="function" data-v-b30413f6>async</span><span class="function" data-v-b30413f6>function </span><span class="word" data-v-b30413f6>fn3</span> <span class="brackets" data-v-b30413f6>(){</span></div><div class="padTwo VSL" data-v-b30413f6><span class="word" data-v-b30413f6>console</span><span class="variable" data-v-b30413f6>.log</span><span class="brackets" data-v-b30413f6>(</span><span class="src" data-v-b30413f6>&quot;fn3&quot;</span><span class="brackets" data-v-b30413f6>)</span><div data-v-b30413f6></div></div><div data-v-b30413f6><span class="brackets" data-v-b30413f6>}</span></div><br data-v-b30413f6><div data-v-b30413f6><span class="word" data-v-b30413f6>console</span><span class="variable" data-v-b30413f6>.log</span><span class="brackets" data-v-b30413f6>(</span> <span class="src" data-v-b30413f6>&quot;start&quot;</span><span class="brackets" data-v-b30413f6>);</span></div><div data-v-b30413f6><span class="word" data-v-b30413f6>fn1</span> <span class="brackets" data-v-b30413f6>();</span></div><div data-v-b30413f6><span class="word" data-v-b30413f6>console</span><span class="variable" data-v-b30413f6>.log</span><span class="brackets" data-v-b30413f6>(</span> <span class="src" data-v-b30413f6>&quot;end&quot;</span><span class="brackets" data-v-b30413f6>);</span></div><br data-v-b30413f6><p data-v-b30413f6>1. 函數定義 先略過</p><p data-v-b30413f6>2. 打印 start</p><p data-v-b30413f6>3. 執行 fn1() 裡面立即執行 打印 fn1 start</p><p data-v-b30413f6>4. 執行 fn2() 裡面立即執行 打印 fn2</p><p class="padTwo VSL" data-v-b30413f6>await 後面全部 (3行) 異步 , 放進 列隊</p><p data-v-b30413f6>5. 打印 end</p><p data-v-b30413f6>6. 同步執行完 , 開始執行異步 打印 fn1 end</p><p data-v-b30413f6>7. 執行 fn3() 裡面立即執行 打印 fn3</p><p class="padTwo VSL" data-v-b30413f6> await 後面全部 異步 , console.log(&quot;fn3 end&quot;) 放進 列隊 </p><p data-v-b30413f6>8. 代碼執行完 , 執行異步 , 打印 fn3 end</p><br data-v-b30413f6><br data-v-b30413f6><br data-v-b30413f6><br data-v-b30413f6><br data-v-b30413f6><p data-v-b30413f6>4.1 Promise &amp; setTimeout , 宏任務 微任務 順序</p><div data-v-b30413f6><span class="function" data-v-b30413f6>async</span><span class="function" data-v-b30413f6>function </span><span class="word" data-v-b30413f6>fn1</span> <span class="brackets" data-v-b30413f6>(){</span></div><div class="padTwo VSL" data-v-b30413f6><span class="word" data-v-b30413f6>console</span><span class="variable" data-v-b30413f6>.log</span><span class="brackets" data-v-b30413f6>(</span><span class="src" data-v-b30413f6>&quot;fn1 start&quot;</span><span class="brackets" data-v-b30413f6>);</span><div data-v-b30413f6><span class="then" data-v-b30413f6>await </span> <span class="word" data-v-b30413f6>fn2</span><span class="brackets" data-v-b30413f6>();</span></div><div data-v-b30413f6><span class="word" data-v-b30413f6>console</span><span class="variable" data-v-b30413f6>.log</span><span class="brackets" data-v-b30413f6>(</span><span class="src" data-v-b30413f6>&quot;fn1 end&quot;</span><span class="brackets" data-v-b30413f6>);</span></div><div data-v-b30413f6></div></div><div data-v-b30413f6><span class="brackets" data-v-b30413f6>}</span></div><br data-v-b30413f6><div data-v-b30413f6><span class="function" data-v-b30413f6>async</span><span class="function" data-v-b30413f6>function </span><span class="word" data-v-b30413f6>fn1</span> <span class="brackets" data-v-b30413f6>(){</span></div><div class="padTwo VSL" data-v-b30413f6><span class="word" data-v-b30413f6>console</span><span class="variable" data-v-b30413f6>.log</span><span class="brackets" data-v-b30413f6>(</span> <span class="src" data-v-b30413f6>&quot;fn2&quot;</span><span class="brackets" data-v-b30413f6>);</span><div data-v-b30413f6></div></div><div data-v-b30413f6><span class="brackets" data-v-b30413f6>}</span></div><br data-v-b30413f6><div data-v-b30413f6><span class="word" data-v-b30413f6>console</span><span class="variable" data-v-b30413f6>.log</span><span class="brackets" data-v-b30413f6>(</span> <span class="src" data-v-b30413f6>&quot;start&quot;</span><span class="brackets" data-v-b30413f6>);</span></div><div data-v-b30413f6><span class="variable" data-v-b30413f6>setTimeout</span><span class="brackets" data-v-b30413f6>(()</span><span class="function" data-v-b30413f6>=&gt; </span> <span class="brackets" data-v-b30413f6>{</span></div><div class="padTwo VSL" data-v-b30413f6><span class="word" data-v-b30413f6>console</span><span class="variable" data-v-b30413f6>.log</span><span class="brackets" data-v-b30413f6>(</span><span class="src" data-v-b30413f6>&quot;setTimeout&quot;</span><span class="brackets" data-v-b30413f6>);</span><div data-v-b30413f6></div></div><div data-v-b30413f6><span class="brackets" data-v-b30413f6>});</span></div><div data-v-b30413f6><span class="word" data-v-b30413f6>fn1</span> <span class="brackets" data-v-b30413f6>();</span></div><div data-v-b30413f6><span class="word" data-v-b30413f6>console</span><span class="variable" data-v-b30413f6>.log</span><span class="brackets" data-v-b30413f6>(</span> <span class="src" data-v-b30413f6>&quot;end&quot;</span><span class="brackets" data-v-b30413f6>);</span></div><p data-v-b30413f6>1. 函數定義 先略過</p><p data-v-b30413f6>2. 打印 start</p><p data-v-b30413f6>3. setTimeout 異步代碼 放入 宏任務隊列</p><p data-v-b30413f6>4. 調用 fn1() 裡面立即執行 打印 fn1 start</p><p data-v-b30413f6>5. 調用 fn2() 裡面立即執行 打印 fn2</p><p class="padTwo VSL" data-v-b30413f6> await 後面 全部異步 且是 微任務 , 放進 微任務 列隊 </p><p data-v-b30413f6>6. 打印 end</p><p data-v-b30413f6>7. 同步代碼 執行完畢 , 先執行 微任務 , 再宏任務</p><p data-v-b30413f6>8. 打印 fn1 end</p><p data-v-b30413f6>9. 打印 setTimeout</p></div><br data-v-b30413f6><br data-v-b30413f6><p class="fz28" data-v-b30413f6></p><br data-v-b30413f6><br data-v-b30413f6><p class="fz28" data-v-b30413f6></p><br data-v-b30413f6><br data-v-b30413f6><p class="fz28" data-v-b30413f6></p><br data-v-b30413f6><br data-v-b30413f6><p class="fz28" data-v-b30413f6></p><br data-v-b30413f6><br data-v-b30413f6><p class="fz28" data-v-b30413f6></p><br data-v-b30413f6><br data-v-b30413f6><p class="fz28" data-v-b30413f6></p><br data-v-b30413f6><br data-v-b30413f6><p class="fz28" data-v-b30413f6></p><br data-v-b30413f6><br data-v-b30413f6><p class="fz28" data-v-b30413f6></p><br data-v-b30413f6><br data-v-b30413f6><p class="fz28" data-v-b30413f6></p><br data-v-b30413f6><br data-v-b30413f6><p class="fz28" data-v-b30413f6></p><br data-v-b30413f6><br data-v-b30413f6><p class="fz28" data-v-b30413f6></p><br data-v-b30413f6><br data-v-b30413f6><p class="fz28" data-v-b30413f6></p><br data-v-b30413f6><br data-v-b30413f6><p class="fz28" data-v-b30413f6></p><br data-v-b30413f6><br data-v-b30413f6><p class="fz28" data-v-b30413f6></p><br data-v-b30413f6><br data-v-b30413f6><p class="fz28" data-v-b30413f6></p><br data-v-b30413f6><br data-v-b30413f6><p class="fz28" data-v-b30413f6></p><br data-v-b30413f6><br data-v-b30413f6><p class="fz28" data-v-b30413f6></p><br data-v-b30413f6><br data-v-b30413f6><p class="fz28" data-v-b30413f6></p><br data-v-b30413f6><br data-v-b30413f6><p class="fz28" data-v-b30413f6></p><br data-v-b30413f6><br data-v-b30413f6><p class="fz28" data-v-b30413f6></p><br data-v-b30413f6><br data-v-b30413f6><p class="fz28" data-v-b30413f6></p><br data-v-b30413f6><br data-v-b30413f6><p class="fz28" data-v-b30413f6></p><br data-v-b30413f6><br data-v-b30413f6><p class="fz28" data-v-b30413f6></p><br data-v-b30413f6><br data-v-b30413f6><p class="fz28" data-v-b30413f6></p><br data-v-b30413f6><br data-v-b30413f6><p class="fz28" data-v-b30413f6></p><br data-v-b30413f6><br data-v-b30413f6><p class="fz28" data-v-b30413f6></p><br data-v-b30413f6><br data-v-b30413f6><p class="fz28" data-v-b30413f6></p><br data-v-b30413f6><br data-v-b30413f6></div></div></div>',1),to=Cn(()=>n("div",{class:"toTopButton"},[n("div",{class:"disCen"},"___"),n("div",{class:"disCen"},"▲")],-1)),co=[to],vo=Cn(()=>n("div",{class:"toBotButton"},[n("div",{class:"disCen"},"▼"),n("div",{class:"disCen"},"￣")],-1)),no=[vo],eo={__name:"JsPageThreeNine",setup(a){const s=ba(!1);window.addEventListener("scroll",function(){s.value=window.scrollY>0});function d(){window.scrollTo({top:0,left:0,behavior:"smooth"})}function v(){window.scrollTo({top:999999,left:0,behavior:"smooth"})}function t(e){window.scrollTo({top:document.getElementById(`${e}`).offsetTop,behavior:"smooth"})}return(e,c)=>(aa(),ta(G,null,[n("section",null,[n("div",Q8,[n("div",Z8,[n("div",ao,[n("div",{onClick:c[0]||(c[0]=l=>t("threeajax001")),class:"leftNavText"},"AJAX"),n("div",{onClick:c[1]||(c[1]=l=>t("threeajax002")),class:"leftNavText"}," xhr.axios.fetch "),n("div",{onClick:c[2]||(c[2]=l=>t("threeajax003")),class:"leftNavText"},"axios"),n("div",{onClick:c[3]||(c[3]=l=>t("threeajax004")),class:"leftNavText"}," Promise狀態 "),n("div",{onClick:c[4]||(c[4]=l=>t("threeajax005")),class:"leftNavText"}," async await "),n("div",{onClick:c[5]||(c[5]=l=>t("threeajax006")),class:"leftNavText"}," 事件循環 "),n("div",{onClick:c[6]||(c[6]=l=>t("threeajax007")),class:"leftNavText"}," 宏任務微任務 "),n("div",{onClick:c[7]||(c[7]=l=>t("threeajax008")),class:"leftNavText"}," promise練習 ")])])]),so]),n("div",null,[W(k(B,{name:"fade",tag:"div"},{default:S(()=>[n("div",{onClick:d,class:"toTop"},co)]),_:1},512),[[U,s.value]]),W(k(B,{name:"fade",tag:"div"},{default:S(()=>[n("div",{onClick:v,class:"toBot"},no)]),_:1},512),[[U,s.value]])])],64))}},po=pa(eo,[["__scopeId","data-v-b30413f6"]]);const xn=a=>(wa("data-v-bf306554"),a=a(),ma(),a),lo={class:"leftNav"},bo={class:"leftNavContainer"},ro={class:"leftNavLayout"},io=K('<div class="Main" data-v-bf306554><div class="mainContainer" data-v-bf306554><div class="mainLayout" data-v-bf306554><div class="articleCardTitle cor36 fz34" data-v-bf306554>set</div><div class="bgcVS" data-v-bf306554><p data-v-bf306554>先 new 一個 Set</p><div data-v-bf306554><span class="function" data-v-bf306554>const </span><span class="word" data-v-bf306554>set</span> <span class="then" data-v-bf306554>= new </span><span class="word" data-v-bf306554>Set</span> <span class="brackets" data-v-bf306554>()</span></div><br data-v-bf306554><div data-v-bf306554><span class="comment" data-v-bf306554>//往裡面放東西用.add()</span></div><div data-v-bf306554><span class="variable" data-v-bf306554>set</span><span class="variable" data-v-bf306554>.add</span><span class="brackets" data-v-bf306554>(</span> <span class="number" data-v-bf306554>1</span><span class="brackets" data-v-bf306554>)</span></div><div data-v-bf306554><span class="variable" data-v-bf306554>set</span><span class="variable" data-v-bf306554>.add</span><span class="brackets" data-v-bf306554>(</span> <span class="number" data-v-bf306554>2</span><span class="brackets" data-v-bf306554>)</span></div><div data-v-bf306554><span class="variable" data-v-bf306554>set</span><span class="variable" data-v-bf306554>.add</span><span class="brackets" data-v-bf306554>(</span> <span class="number" data-v-bf306554>3</span><span class="brackets" data-v-bf306554>)</span></div><div data-v-bf306554><span class="variable" data-v-bf306554>set</span><span class="variable" data-v-bf306554>.add</span><span class="brackets" data-v-bf306554>(</span> <span class="number" data-v-bf306554>7</span><span class="brackets" data-v-bf306554>)</span></div><br data-v-bf306554><div data-v-bf306554><span class="comment" data-v-bf306554>//set 能保證 裡面的東西 不重複</span></div><div data-v-bf306554><span class="comment" data-v-bf306554>//添加重複元素時 他並不會被添加進去 </span></div><div data-v-bf306554><span class="variable" data-v-bf306554>set</span><span class="variable" data-v-bf306554>.add</span><span class="brackets" data-v-bf306554>(</span> <span class="number" data-v-bf306554>1</span><span class="brackets" data-v-bf306554>)</span></div><div data-v-bf306554><span class="word" data-v-bf306554>console</span><span class="variable" data-v-bf306554>.log</span><span class="brackets" data-v-bf306554>(</span> <span class="variable" data-v-bf306554>set</span><span class="brackets" data-v-bf306554>) </span><span class="comment" data-v-bf306554>//{ 1,2,3,7 } //仍然只有 1 個 1</span></div><br data-v-bf306554><div data-v-bf306554><span class="comment" data-v-bf306554>//.delete()刪除方法,返回是否有此元素並刪除是否成功(true)</span></div><div data-v-bf306554><span class="variable" data-v-bf306554>set</span><span class="variable" data-v-bf306554>.delete</span><span class="brackets" data-v-bf306554>(</span> <span class="number" data-v-bf306554>1</span><span class="brackets" data-v-bf306554>)</span></div><div data-v-bf306554><span class="word" data-v-bf306554>console</span><span class="variable" data-v-bf306554>.log</span><span class="brackets" data-v-bf306554>(</span> <span class="variable" data-v-bf306554>set</span><span class="brackets" data-v-bf306554>) </span><span class="comment" data-v-bf306554>//{ 2,3,7 } </span></div><br data-v-bf306554><div data-v-bf306554><span class="comment" data-v-bf306554>//.has()查詢是否有此元素的方法,返回是否有此元素(true)</span></div><div data-v-bf306554><span class="variable" data-v-bf306554>set.has</span><span class="brackets" data-v-bf306554>(</span> <span class="number" data-v-bf306554>2</span><span class="brackets" data-v-bf306554>)</span><span class="comment" data-v-bf306554>//true</span></div><br data-v-bf306554><div data-v-bf306554><span class="comment" data-v-bf306554>//.size判斷set裡有多少個元素,返回多少個元素</span></div><div data-v-bf306554><span class="variable" data-v-bf306554>set.size</span><span class="comment" data-v-bf306554>// 3</span></div><br data-v-bf306554><div data-v-bf306554><span class="comment" data-v-bf306554>//遍歷可以用 forEach()</span></div><div data-v-bf306554><span class="variable" data-v-bf306554>set.forEach</span><span class="brackets" data-v-bf306554>(</span> <span class="word" data-v-bf306554>number</span><span class="function" data-v-bf306554>=&gt; </span><span class="word" data-v-bf306554>console</span><span class="variable" data-v-bf306554>.log</span><span class="brackets" data-v-bf306554>(</span> <span class="word" data-v-bf306554>number</span><span class="brackets" data-v-bf306554>))</span></div></div><div class="articleCardTitle cor36 fz34" data-v-bf306554>map</div><p class="fz28" data-v-bf306554>map 很像 object 也是 key value 配對的形式</p><div class="bgcVS" data-v-bf306554><p data-v-bf306554>先 new 一個 map</p><div data-v-bf306554><span class="function" data-v-bf306554>const </span><span class="word" data-v-bf306554>person</span> <span class="then" data-v-bf306554>= new </span><span class="word" data-v-bf306554>Map</span> <span class="brackets" data-v-bf306554>()</span></div><br data-v-bf306554><div data-v-bf306554><span class="comment" data-v-bf306554>//往裡面添加東西用.set()</span></div><div data-v-bf306554><span class="word" data-v-bf306554>person</span><span class="variable" data-v-bf306554>.set</span><span class="brackets" data-v-bf306554>(</span> <span class="src" data-v-bf306554>&quot;name&quot;</span><span class="then" data-v-bf306554>,</span> <span class="src" data-v-bf306554>&quot;wayne&quot;</span><span class="brackets" data-v-bf306554>)</span></div><div data-v-bf306554><span class="word" data-v-bf306554>person</span><span class="variable" data-v-bf306554>.set</span><span class="brackets" data-v-bf306554>(</span> <span class="src" data-v-bf306554>&quot;age&quot;</span><span class="then" data-v-bf306554>,</span> <span class="number" data-v-bf306554>18</span><span class="brackets" data-v-bf306554>)</span></div><div data-v-bf306554><span class="word" data-v-bf306554>person</span><span class="variable" data-v-bf306554>.set</span><span class="brackets" data-v-bf306554>(</span> <span class="src" data-v-bf306554>&quot;hobby&quot;</span><span class="then" data-v-bf306554>,</span> <span class="brackets" data-v-bf306554>[</span><span class="src" data-v-bf306554>&quot;leetcode&quot;</span> <span class="then" data-v-bf306554>,</span><span class="src" data-v-bf306554>&quot;sleep&quot;</span> <span class="brackets" data-v-bf306554>])</span></div><div data-v-bf306554><span class="word" data-v-bf306554>console</span><span class="variable" data-v-bf306554>.log</span><span class="brackets" data-v-bf306554>(</span> <span class="word" data-v-bf306554>person</span><span class="brackets" data-v-bf306554>)</span></div><div data-v-bf306554><span class="comment" data-v-bf306554>//Map(3){&quot;name&quot;=&gt;&quot;wayne&quot;,&quot;age&quot;=&gt;18,&quot;hobby&quot;=&gt;Array(2)}</span></div><br data-v-bf306554><div data-v-bf306554><span class="comment" data-v-bf306554>//get()方法,可以用key獲取value的值</span></div><div data-v-bf306554><span class="word" data-v-bf306554>console</span><span class="variable" data-v-bf306554>.log</span><span class="brackets" data-v-bf306554>(</span> <span class="word" data-v-bf306554>person</span><span class="variable" data-v-bf306554>.get</span><span class="brackets" data-v-bf306554>(</span> <span class="src" data-v-bf306554>&quot;name&quot;</span><span class="brackets" data-v-bf306554>))</span><span class="comment" data-v-bf306554>//&quot;wayne&quot;</span></div><br data-v-bf306554><div data-v-bf306554><span class="comment" data-v-bf306554>//.size判斷map裡有多少個元素,返回多少個元素</span></div><div data-v-bf306554><span class="variable" data-v-bf306554>map.size</span><span class="comment" data-v-bf306554>// 3</span></div><br data-v-bf306554><div data-v-bf306554><span class="comment" data-v-bf306554>//has()方法,返回有無這個key</span></div><div data-v-bf306554><span class="word" data-v-bf306554>person</span> <span class="word" data-v-bf306554>.has</span><span class="brackets" data-v-bf306554>(</span> <span class="src" data-v-bf306554>&quot;age&quot;</span><span class="brackets" data-v-bf306554>)</span><span class="comment" data-v-bf306554>//true</span></div><br data-v-bf306554><div data-v-bf306554><span class="comment" data-v-bf306554>//已經有age再添加age,會用新的值去更新舊值</span></div><div data-v-bf306554><span class="word" data-v-bf306554>person</span><span class="variable" data-v-bf306554>.set</span><span class="brackets" data-v-bf306554>(</span> <span class="src" data-v-bf306554>&quot;age&quot;</span><span class="then" data-v-bf306554>,</span> <span class="number" data-v-bf306554>30</span><span class="brackets" data-v-bf306554>)</span></div><div data-v-bf306554><span class="word" data-v-bf306554>console</span><span class="variable" data-v-bf306554>.log</span><span class="brackets" data-v-bf306554>(</span> <span class="word" data-v-bf306554>person</span><span class="brackets" data-v-bf306554>)</span></div><div data-v-bf306554><span class="comment" data-v-bf306554>//Map(3){&quot;name&quot;=&gt;&quot;wayne&quot;,&quot;age&quot;=&gt;30,&quot;hobby&quot;=&gt;Array(2)}</span></div><br data-v-bf306554><div data-v-bf306554><span class="comment" data-v-bf306554>//.delete()刪除方法,返回是否有此元素並刪除是否成功(true)</span></div><div data-v-bf306554><span class="word" data-v-bf306554>person</span><span class="variable" data-v-bf306554>.delete</span><span class="brackets" data-v-bf306554>(</span> <span class="src" data-v-bf306554>&quot;age&quot;</span><span class="brackets" data-v-bf306554>)</span></div><div data-v-bf306554><span class="word" data-v-bf306554>console</span><span class="variable" data-v-bf306554>.log</span><span class="brackets" data-v-bf306554>(</span> <span class="word" data-v-bf306554>person</span><span class="brackets" data-v-bf306554>)</span></div><div data-v-bf306554><span class="comment" data-v-bf306554>//Map(3){&quot;name&quot;=&gt;&quot;wayne&quot;,&quot;hobby&quot;=&gt;Array(2)}</span></div><br data-v-bf306554></div><br data-v-bf306554><br data-v-bf306554><div class="articleCardTitle cor36 fz34" data-v-bf306554>javascript 隱式轉換</div><p class="fz28" data-v-bf306554>相等比較 ( == )</p><br data-v-bf306554><br data-v-bf306554><p class="fz28" data-v-bf306554>1. 如果 兩個 數據類型相同 , 執行 嚴格比較</p><br data-v-bf306554><br data-v-bf306554><p class="fz28" data-v-bf306554> 2. 如果 兩個 數據類型 不相同 , 進行 類型轉換後 再比較 </p><div class="fz28 padTwo VSL" data-v-bf306554><br data-v-bf306554><div data-v-bf306554>2-1. 如果 一個是 null 另一個是 undefined 返回 true</div><br data-v-bf306554><div data-v-bf306554>2-2. 如果 一個是 number 另一個是 string</div><div class="padTwo VSL" data-v-bf306554><br data-v-bf306554><div data-v-bf306554>將 string 轉成 number 再比較</div></div><br data-v-bf306554><div data-v-bf306554>2-3. 如果 一個是 布林</div><div class="padTwo VSL" data-v-bf306554><br data-v-bf306554><div data-v-bf306554>將 布林 轉成 number 再比較</div><div class="padTwo VSL" data-v-bf306554><br data-v-bf306554><div data-v-bf306554>true 轉成 1</div><br data-v-bf306554><div data-v-bf306554>false 轉成 0</div></div></div><br data-v-bf306554><div data-v-bf306554>2-4. 如果 一個是 物件 另一個是 number || 字串</div><div class="padTwo VSL" data-v-bf306554><br data-v-bf306554><div data-v-bf306554>將 物件 轉成 原始值 再比較</div><div class="padTwo VSL" data-v-bf306554><br data-v-bf306554><div data-v-bf306554>先調用 物件 valueOf()方法 轉成 基本類型</div><br data-v-bf306554><div data-v-bf306554> 當 valueOf() 返回 非 基本類型 , 再調用 toString() 方法 </div></div></div><br data-v-bf306554><div data-v-bf306554>2-5. NaN 和其他任何類型比較永遠返回 false</div><br data-v-bf306554><div data-v-bf306554>2-6. 兩個都為引用類型，則比較它們是否指向同一個物件</div></div><br data-v-bf306554><div class="fz30 bgcVS" data-v-bf306554><div data-v-bf306554><span class="then" data-v-bf306554>if</span> <span class="brackets" data-v-bf306554>(</span><span class="word" data-v-bf306554>a</span> <span class="then" data-v-bf306554>==</span><span class="number" data-v-bf306554>1</span> <span class="then" data-v-bf306554>&amp;&amp;</span><span class="word" data-v-bf306554>a</span> <span class="then" data-v-bf306554>==</span><span class="number" data-v-bf306554>2</span> <span class="then" data-v-bf306554>&amp;&amp;</span><span class="word" data-v-bf306554>a</span> <span class="then" data-v-bf306554>==</span><span class="number" data-v-bf306554>3</span> <span class="brackets" data-v-bf306554>){</span></div><div class="padTwo VSL" data-v-bf306554><span class="word" data-v-bf306554>console</span><span class="variable" data-v-bf306554>.log</span><span class="brackets" data-v-bf306554>(</span><span class="src" data-v-bf306554>&quot;條件返回true&quot;</span><span class="brackets" data-v-bf306554>)</span><div data-v-bf306554></div></div><div data-v-bf306554><span class="brackets" data-v-bf306554>}</span></div><br data-v-bf306554><div data-v-bf306554><span class="function" data-v-bf306554>let </span> <span class="word" data-v-bf306554>a</span><span class="then" data-v-bf306554>=</span> <span class="brackets" data-v-bf306554>{</span></div><div class="padTwo VSL" data-v-bf306554><span class="word" data-v-bf306554>value:</span> <span class="number" data-v-bf306554>1,</span><div data-v-bf306554><span class="word" data-v-bf306554>valueOf:</span><span class="function" data-v-bf306554>function </span><span class="brackets" data-v-bf306554>(){</span></div><div data-v-bf306554></div><div class="padTwo VSL" data-v-bf306554><span class="then" data-v-bf306554>return </span><span class="then" data-v-bf306554>this</span> <span class="word" data-v-bf306554>.value</span><span class="then" data-v-bf306554>++;</span><div data-v-bf306554></div></div><div data-v-bf306554><span class="brackets" data-v-bf306554>},</span></div></div><div data-v-bf306554><span class="brackets" data-v-bf306554>};</span></div><br data-v-bf306554><p data-v-bf306554>也可以 用 toString</p><br data-v-bf306554><div data-v-bf306554><span class="function" data-v-bf306554>let </span> <span class="word" data-v-bf306554>a</span><span class="then" data-v-bf306554>=</span> <span class="brackets" data-v-bf306554>{</span></div><div class="padTwo VSL" data-v-bf306554><span class="word" data-v-bf306554>value:</span> <span class="number" data-v-bf306554>1,</span><div data-v-bf306554><span class="word" data-v-bf306554>toString:</span><span class="function" data-v-bf306554>function </span><span class="brackets" data-v-bf306554>(){</span></div><div data-v-bf306554></div><div class="padTwo VSL" data-v-bf306554><span class="then" data-v-bf306554>return </span><span class="then" data-v-bf306554>this</span> <span class="word" data-v-bf306554>.value</span><span class="then" data-v-bf306554>++;</span><div data-v-bf306554></div></div><div data-v-bf306554><span class="brackets" data-v-bf306554>},</span></div></div><div data-v-bf306554><span class="brackets" data-v-bf306554>};</span></div><br data-v-bf306554><p data-v-bf306554>如果 valueOf() 和 toString() 都寫 先調用 valueOf (規則 2-4)</p></div><br data-v-bf306554><br data-v-bf306554><br data-v-bf306554><p class="fz28 cor36" data-v-bf306554># 那些值轉換成 false?</p><br data-v-bf306554><br data-v-bf306554><p class="fz28" data-v-bf306554>1. 空字串 &quot;&quot;</p><br data-v-bf306554><br data-v-bf306554><p class="fz28" data-v-bf306554>2. 數字 0</p><br data-v-bf306554><br data-v-bf306554><p class="fz28" data-v-bf306554>3. NaN</p><br data-v-bf306554><br data-v-bf306554><p class="fz28" data-v-bf306554>4. null 或 undefined</p><div class="bgcVS" data-v-bf306554><p data-v-bf306554>練習 1</p><div data-v-bf306554><span class="function" data-v-bf306554>let </span> <span class="word" data-v-bf306554>arr</span><span class="then" data-v-bf306554>=</span> <span class="brackets" data-v-bf306554>[</span><span class="number" data-v-bf306554>0</span> <span class="brackets" data-v-bf306554>]</span></div><div data-v-bf306554><span class="then" data-v-bf306554>if</span> <span class="brackets" data-v-bf306554>(</span><span class="word" data-v-bf306554>arr</span> <span class="brackets" data-v-bf306554>){</span></div><div class="padTwo VSL" data-v-bf306554><span class="comment" data-v-bf306554>//arr不屬於上面4種,為true</span><div data-v-bf306554><span class="word" data-v-bf306554>console</span><span class="variable" data-v-bf306554>.log</span><span class="brackets" data-v-bf306554>(</span> <span class="word" data-v-bf306554>arr</span><span class="then" data-v-bf306554>==</span> <span class="number" data-v-bf306554>true</span><span class="brackets" data-v-bf306554>)</span></div><div data-v-bf306554><span class="comment" data-v-bf306554>//觸發隱式轉換2-4</span></div><div data-v-bf306554><span class="comment" data-v-bf306554>//valueOf//console.log(arr.valueOf)//返回數組,沒轉原始值</span></div><div data-v-bf306554><span class="comment" data-v-bf306554>//toString//console.log(arr.toString())//返回0</span></div><div data-v-bf306554><span class="comment" data-v-bf306554>//當調用Array.toString()方法時</span></div><div data-v-bf306554><span class="comment" data-v-bf306554>//會嘗試用join方法將數組裡面的元素拼接起來</span></div><div data-v-bf306554><span class="comment" data-v-bf306554>//發現console.log(arr.join())//也返回0</span></div><div data-v-bf306554><span class="comment" data-v-bf306554>//0==true</span></div><div data-v-bf306554><span class="comment" data-v-bf306554>//觸發隱式轉換2-3</span></div><div data-v-bf306554><span class="comment" data-v-bf306554>//true 轉成 1</span></div><div data-v-bf306554><span class="comment" data-v-bf306554>//0 == 1 //打印 false</span></div><div data-v-bf306554></div></div><div data-v-bf306554><span class="brackets" data-v-bf306554>}</span> <span class="then" data-v-bf306554>else </span><span class="brackets" data-v-bf306554>{</span></div><div class="padTwo VSL" data-v-bf306554><span class="word" data-v-bf306554>console</span><span class="variable" data-v-bf306554>.log</span><span class="brackets" data-v-bf306554>(</span> <span class="word" data-v-bf306554>a</span><span class="brackets" data-v-bf306554>);</span><div data-v-bf306554></div></div><div data-v-bf306554><span class="brackets" data-v-bf306554>}</span></div></div><br data-v-bf306554><br data-v-bf306554><p class="fz28" data-v-bf306554></p><br data-v-bf306554><br data-v-bf306554><p class="fz28" data-v-bf306554></p><br data-v-bf306554><br data-v-bf306554><p class="fz28" data-v-bf306554></p><br data-v-bf306554><br data-v-bf306554><p class="fz28" data-v-bf306554></p><br data-v-bf306554><br data-v-bf306554><p class="fz28" data-v-bf306554></p><br data-v-bf306554><br data-v-bf306554><p class="fz28" data-v-bf306554></p><br data-v-bf306554><br data-v-bf306554><p class="fz28" data-v-bf306554></p><br data-v-bf306554><br data-v-bf306554><p class="fz28" data-v-bf306554></p><br data-v-bf306554><br data-v-bf306554><p class="fz28" data-v-bf306554></p><br data-v-bf306554><br data-v-bf306554><p class="fz28" data-v-bf306554></p><br data-v-bf306554><br data-v-bf306554><p class="fz28" data-v-bf306554></p><br data-v-bf306554><br data-v-bf306554><p class="fz28" data-v-bf306554></p><br data-v-bf306554><br data-v-bf306554><p class="fz28" data-v-bf306554></p><br data-v-bf306554><br data-v-bf306554><p class="fz28" data-v-bf306554></p><br data-v-bf306554><br data-v-bf306554><p class="fz28" data-v-bf306554></p><br data-v-bf306554><br data-v-bf306554><p class="fz28" data-v-bf306554></p><br data-v-bf306554><br data-v-bf306554><p class="fz28" data-v-bf306554></p><br data-v-bf306554><br data-v-bf306554><p class="fz28" data-v-bf306554></p><br data-v-bf306554><br data-v-bf306554><p class="fz28" data-v-bf306554></p><br data-v-bf306554><br data-v-bf306554><p class="fz28" data-v-bf306554></p><br data-v-bf306554><br data-v-bf306554><p class="fz28" data-v-bf306554></p><br data-v-bf306554><br data-v-bf306554><p class="fz28" data-v-bf306554></p><br data-v-bf306554><br data-v-bf306554><p class="fz28" data-v-bf306554></p><br data-v-bf306554><br data-v-bf306554><p class="fz28" data-v-bf306554></p><br data-v-bf306554><br data-v-bf306554><p class="fz28" data-v-bf306554></p><br data-v-bf306554><br data-v-bf306554><p class="fz28" data-v-bf306554></p><br data-v-bf306554><br data-v-bf306554><p class="fz28" data-v-bf306554></p><br data-v-bf306554><br data-v-bf306554><p class="fz28" data-v-bf306554></p><br data-v-bf306554><br data-v-bf306554><p class="fz28" data-v-bf306554></p><br data-v-bf306554><br data-v-bf306554><p class="fz28" data-v-bf306554></p><br data-v-bf306554><br data-v-bf306554><div class="articleCardTitle cor36 fz34" data-v-bf306554></div><p class="fz28" data-v-bf306554></p><br data-v-bf306554><br data-v-bf306554><p class="fz28" data-v-bf306554></p><br data-v-bf306554><br data-v-bf306554><p class="fz28" data-v-bf306554></p><br data-v-bf306554><br data-v-bf306554><p class="fz28" data-v-bf306554></p><br data-v-bf306554><br data-v-bf306554><p class="fz28" data-v-bf306554></p><br data-v-bf306554><br data-v-bf306554><p class="fz28" data-v-bf306554></p><br data-v-bf306554><br data-v-bf306554><p class="fz28" data-v-bf306554></p><br data-v-bf306554><br data-v-bf306554><p class="fz28" data-v-bf306554></p><br data-v-bf306554><br data-v-bf306554><p class="fz28" data-v-bf306554></p><br data-v-bf306554><br data-v-bf306554><p class="fz28" data-v-bf306554></p><br data-v-bf306554><br data-v-bf306554><p class="fz28" data-v-bf306554></p><br data-v-bf306554><br data-v-bf306554><p class="fz28" data-v-bf306554></p><br data-v-bf306554><br data-v-bf306554><p class="fz28" data-v-bf306554></p><br data-v-bf306554><br data-v-bf306554><div class="articleCardTitle cor36 fz34" data-v-bf306554></div><p class="fz28" data-v-bf306554></p><br data-v-bf306554><br data-v-bf306554><p class="fz28" data-v-bf306554></p><br data-v-bf306554><br data-v-bf306554><p class="fz28" data-v-bf306554></p><br data-v-bf306554><br data-v-bf306554><p class="fz28" data-v-bf306554></p><br data-v-bf306554><br data-v-bf306554><p class="fz28" data-v-bf306554></p><br data-v-bf306554><br data-v-bf306554><p class="fz28" data-v-bf306554></p><br data-v-bf306554><br data-v-bf306554><p class="fz28" data-v-bf306554></p><br data-v-bf306554><br data-v-bf306554><p class="fz28" data-v-bf306554></p><br data-v-bf306554><br data-v-bf306554><p class="fz28" data-v-bf306554></p><br data-v-bf306554><br data-v-bf306554><p class="fz28" data-v-bf306554></p><br data-v-bf306554><br data-v-bf306554><p class="fz28" data-v-bf306554></p><br data-v-bf306554><br data-v-bf306554><p class="fz28" data-v-bf306554></p><br data-v-bf306554><br data-v-bf306554><p class="fz28" data-v-bf306554></p><br data-v-bf306554><br data-v-bf306554><div class="articleCardTitle cor36 fz34" data-v-bf306554></div><p class="fz28" data-v-bf306554></p><br data-v-bf306554><br data-v-bf306554></div></div></div>',1),fo=xn(()=>n("div",{class:"toTopButton"},[n("div",{class:"disCen"},"___"),n("div",{class:"disCen"},"▲")],-1)),oo=[fo],uo=xn(()=>n("div",{class:"toBotButton"},[n("div",{class:"disCen"},"▼"),n("div",{class:"disCen"},"￣")],-1)),wo=[uo],mo={__name:"JsPageThreeTen",setup(a){const s=ba(!1);window.addEventListener("scroll",function(){s.value=window.scrollY>0});function d(){window.scrollTo({top:0,left:0,behavior:"smooth"})}function v(){window.scrollTo({top:999999,left:0,behavior:"smooth"})}function t(e){window.scrollTo({top:document.getElementById(`${e}`).offsetTop,behavior:"smooth"})}return(e,c)=>(aa(),ta(G,null,[n("section",null,[n("div",lo,[n("div",bo,[n("div",ro,[n("div",{onClick:c[0]||(c[0]=l=>t("")),class:"leftNavText"}),n("div",{onClick:c[1]||(c[1]=l=>t("")),class:"leftNavText"}),n("div",{onClick:c[2]||(c[2]=l=>t("")),class:"leftNavText"}),n("div",{onClick:c[3]||(c[3]=l=>t("")),class:"leftNavText"}),n("div",{onClick:c[4]||(c[4]=l=>t("")),class:"leftNavText"}),n("div",{onClick:c[5]||(c[5]=l=>t("")),class:"leftNavText"})])])]),io]),n("div",null,[W(k(B,{name:"fade",tag:"div"},{default:S(()=>[n("div",{onClick:d,class:"toTop"},oo)]),_:1},512),[[U,s.value]]),W(k(B,{name:"fade",tag:"div"},{default:S(()=>[n("div",{onClick:v,class:"toBot"},wo)]),_:1},512),[[U,s.value]])])],64))}},ho=pa(mo,[["__scopeId","data-v-bf306554"]]);const Gt=a=>(wa("data-v-84e39b94"),a=a(),ma(),a),ko={class:"leftNav"},go={class:"leftNavContainer"},zo={class:"leftNavLayout"},To=Gt(()=>n("br",null,null,-1)),qo=K('<div class="Main" data-v-84e39b94><div class="mainContainer" data-v-84e39b94><div class="mainLayout" data-v-84e39b94><div id="vueOne001" class="articleCardTitle cor36 fz34" data-v-84e39b94> [ vue ] ≫ 對 vue 的理解? </div><p class="fz28 cor36" data-v-84e39b94>1.</p><p class="fz28" data-v-84e39b94> Vue 是一個 漸進式的 JS 框架 . . . (Vue是一個核心庫,可以添加VueRouter,添加Pinia讓項目壯大) </p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28 cor36" data-v-84e39b94>2.</p><p class="fz28" data-v-84e39b94>他是以 核心庫 加插件的 形式</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28 cor36" data-v-84e39b94>3.</p><p class="fz28" data-v-84e39b94>動態創建用戶介面</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28 cor36" data-v-84e39b94>特色</p><p class="fz28 cor36" data-v-84e39b94>1.</p><p class="fz28" data-v-84e39b94>他是 M V V M 模式</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28 cor36" data-v-84e39b94>2.</p><p class="fz28" data-v-84e39b94>他的代碼簡潔 體積小 , 能提高運行效率</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28 cor36" data-v-84e39b94>3.</p><p class="fz28" data-v-84e39b94>他適合 PC 端 和 移動端上 的開發</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28 cor36" data-v-84e39b94>4.</p><p class="fz28" data-v-84e39b94>他本身只關注 ui</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28 cor36" data-v-84e39b94>5.</p><p class="fz28" data-v-84e39b94>他可以輕鬆的引入 vue 插件 及 其他 第三方庫進行開發</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>優</p><p class="fz28" data-v-84e39b94> ① 易用性：Vue 提供資料響應式、基於配置的元件系統以及眾多指令等，這些讓開發者只需關心核心業務即可。 </p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94> ② 靈活性：如果我們的應用規模較小，僅使用 Vue 的核心庫已足夠；隨著應用的規模不斷擴大，可以根據需求引入 Vue Router、Vuex、Vue CLI 等其他工具。 </p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94> ③ 高效性：Vue 操作的是虛擬 DOM，採用差異算法 (diff) 更新 DOM，比傳統的 DOM 操作更加高效。 </p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>缺</p><p class="fz28" data-v-84e39b94> ② 不利於 SEO。 Vue 也有相關的伺服器端渲染 (SSR) 方式，並有針對 Vue 的伺服器端渲染庫，如 Nuxt.js，以提升 SEO 效果。 </p><br data-v-84e39b94><br data-v-84e39b94><div id="vueOne002" class="articleCardTitle cor36 fz30" data-v-84e39b94> [ vue ] ≫ 什麼是 MVVM ? </div><p class="fz28" data-v-84e39b94>MVVM . Model View ViewModel</p><br data-v-84e39b94><p class="fz28 cor36" data-v-84e39b94>Model . 數據層</p><p class="fz28" data-v-84e39b94>負責資料存取 -&gt; 與資料庫溝通、請求網路資源</p><br data-v-84e39b94><p class="fz28 cor36" data-v-84e39b94>View . 視圖層</p><p class="fz28" data-v-84e39b94>負責顯示資料(UI)</p><br data-v-84e39b94><p class="fz28 cor36" data-v-84e39b94> ViewModel . 他是連接 Model 和 View 之間的橋梁 </p><p class="fz28" data-v-84e39b94> 負責處理業務邏輯，並處理接收從 View 傳來的使用者操作事件、使用 Model 提供的方法來處理資料。 </p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>當 數據 發生 改變更新 時</p><br data-v-84e39b94><p class="fz28" data-v-84e39b94> 他會通過 ViewModel 通知 View 來進行 視圖層 的 展示改變 </p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>同時 當 視圖層 發生 改變 時</p><br data-v-84e39b94><p class="fz28" data-v-84e39b94>他會通過 ViewModel 通知 Model層 改變 數據</p><br data-v-84e39b94><br data-v-84e39b94><br data-v-84e39b94><div id="vueOne003" class="articleCardTitle cor36 fz30" data-v-84e39b94> [ vue ] ≫ MVVM 和 MVC 和 MVP 區別? </div><p class="fz28" data-v-84e39b94>MVC 是 model vue controller</p><br data-v-84e39b94><p class="fz28" data-v-84e39b94> View 與使用者互動，當 View 接收到使用者的回饋 要拿資料時 , 呼叫 Controller , 請 Controller 操作 Model 拿取想要的資料 , Model 拿到資料後直接把資料丟回給 View , 把資料顯示給使用者 </p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28 cor36" data-v-84e39b94>Model . 數據層</p><p class="fz28" data-v-84e39b94>負責資料存取 -&gt; 與資料庫溝通、請求網路資源</p><br data-v-84e39b94><p class="fz28 cor36" data-v-84e39b94>View . 視圖層</p><p class="fz28" data-v-84e39b94>負責顯示資料(UI)</p><br data-v-84e39b94><p class="fz28 cor36" data-v-84e39b94>Controller . 控制器</p><p class="fz28" data-v-84e39b94> 負責處理訊息、控制應用程式流程、處理事件並作出回應。 </p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>MVP 是 model vue presenter</p><br data-v-84e39b94><p class="fz28" data-v-84e39b94> 和 MVC 差別 , Model 層拿到數據後 , 並不直接傳給 View 更新，而是交還給 Presenter , Presenter 再把數據交給 View , 並更新畫面。 </p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28 cor36" data-v-84e39b94>Model . 數據層</p><p class="fz28" data-v-84e39b94>負責資料存取 -&gt; 與資料庫溝通、請求網路資源</p><br data-v-84e39b94><p class="fz28 cor36" data-v-84e39b94>View . 視圖層</p><p class="fz28" data-v-84e39b94>負責顯示資料(UI)，並將使用者的操作傳給Presenter。</p><br data-v-84e39b94><p class="fz28 cor36" data-v-84e39b94>Presenter</p><p class="fz28" data-v-84e39b94>負責處理業務邏輯，並負責View與Model的溝通。</p><br data-v-84e39b94><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94> MVVM 是 Model-View-ViewModel, 分別對應 數據, 視圖, VM </p><br data-v-84e39b94><p class="fz28" data-v-84e39b94> MVVM 透過觀察者模式將 View 和 Model 連接在一起 , 一旦 Model 的數據發生變化 , 觀察者 View 就能夠感應到這個更動 , 並把數據更新到 UI 畫面上 , ViewModel 甚至不需要有 View 的引用，更方便單元測試。 </p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>第一個相同點是都有 M 和 V,</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>MVC 中的 C 會比較手動一點,</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>要自己去監聽視圖的變化,</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>然後去發送請求,</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>然後去更新視圖或model,</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz32" data-v-84e39b94>VM 是自動化一點,</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>能自動對 model 和 視圖 進行 雙向綁定</p><br data-v-84e39b94><br data-v-84e39b94><div id="vueOne004" class="articleCardTitle cor36 fz30" data-v-84e39b94> [ vue ] ≫ 對響應式數據的理解? </div><br data-v-84e39b94><br data-v-84e39b94><br data-v-84e39b94><p class="fz28 cor36" data-v-84e39b94>1.</p><p class="fz28" data-v-84e39b94> 響應式 是 當 數據改變後 Vue 會通知 使用該數據的視圖 去更新 . . . (視圖渲染數據&gt;數據改變&gt;視圖響應更新) </p><br data-v-84e39b94><p class="fz28 cor36" data-v-84e39b94>2.</p><p class="fz28 comment" data-v-84e39b94>vue2 : 把數據變 get &amp; set</p><br data-v-84e39b94><p class="fz28 cor36" data-v-84e39b94>#</p><p class="fz28" data-v-84e39b94>vue 數據響應式 是透過 數據劫持 實現的,</p><br data-v-84e39b94><p class="fz28" data-v-84e39b94>透過 definedProperty 遍歷物件每個屬性 ,</p><br data-v-84e39b94><p class="fz28" data-v-84e39b94>把 每個屬性 變 getter 跟 setter,</p><br data-v-84e39b94><p class="fz28" data-v-84e39b94>對一個數據的屬性進行監聽,</p><br data-v-84e39b94><p class="fz28" data-v-84e39b94>數據變化時 透過 setter 改變它的數據,</p><br data-v-84e39b94><p class="fz28" data-v-84e39b94>頁面上可以透過 getter 訪問 它的屬性的值</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28 cor36" data-v-84e39b94>#</p><p class="fz28" data-v-84e39b94> 當新增方法.屬性它是監聽不了的, 需要通過 $set . $delete </p><br data-v-84e39b94><br data-v-84e39b94><br data-v-84e39b94><p class="fz28 cor36" data-v-84e39b94>#</p><p class="fz28" data-v-84e39b94> 數組考慮性能 沒有用 defineProperty 對數組每一項進行攔截 </p><br data-v-84e39b94><p class="fz28" data-v-84e39b94> 而是 重寫變異方法 (pop . push . shift . unshift . splice . sort . reverse) </p><br data-v-84e39b94><p class="fz28" data-v-84e39b94> 來對 數組 進行劫持 , 劫持過程中 可以通知視圖 去更新 </p><br data-v-84e39b94><p class="fz28" data-v-84e39b94>數組中物件 也會進行 遞歸 劫持</p><br data-v-84e39b94><p class="fz28" data-v-84e39b94>( 數組 索引 長度 無法監控 )</p><br data-v-84e39b94><br data-v-84e39b94><br data-v-84e39b94><p class="fz28 cor36" data-v-84e39b94>#</p><p class="fz28" data-v-84e39b94>Vue3 用 proxy 代理</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28 cor36" data-v-84e39b94># Vue2 如何觀測數組變化?</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28 comment" data-v-84e39b94> 數組變化: pop . push . shift . unshift . splice . sort . reverse </p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>用 函數劫持 的方法</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>藉由 改變 數組的原型</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>用戶調用數組的一些方法時</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>走被改過的方法</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>通知視圖層更新</p><br data-v-84e39b94><p class="fz28" data-v-84e39b94>數組中物件 也會進行 遞歸 劫持</p><br data-v-84e39b94><p class="fz28" data-v-84e39b94>( 數組 索引 長度 無法監控 )</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28 cor36" data-v-84e39b94># 這個Vue2數據響應式缺點是什麼?</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94> 物件不是全部都監聽, 新增方法.屬性它是監聽不了的, 沒有監聽陣列 (陣列不用defineProperty) </p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>解決: $set . $delete</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28 cor36" data-v-84e39b94># vue3用什麼解決?</p><p class="fz28 cor36" data-v-84e39b94># vue3 為什麼用 Proxy?</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>Vue2 在 2013 只能採用 defineProperty</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>該 API 存在侷限性</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94> 比如 數組的攔截 , 需要另外 專門為數組響應式 做一套 實現 </p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>再來 不能攔截 動態 增加刪除 的 物件屬性</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94> 再來 在 初始化時 需要 深度 遞歸遍歷 待處理 的物件 才能完全攔截 </p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>Vue3 用 Proxy</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>不但可以 對數組實現攔截 ,</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>還能對 Map , Set 實現攔截</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>攔截 是 懶處理 ,</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>初始化時 , 不管 物件嵌套多深</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>用戶在未來運行時 , 沒去訪問這個物件</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>則 不會主動對它 進行 響應式 攔截處理</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28 cor36" data-v-84e39b94># 缺</p><p class="fz28" data-v-84e39b94>兼容性問題 , IE 不支持 proxy</p><br data-v-84e39b94><br data-v-84e39b94><div id="vueOne005" class="articleCardTitle cor36 fz30" data-v-84e39b94> [ vue ] ≫ 事件綁定原理? </div><p class="fz28" data-v-84e39b94>第一種 原生 DOM 事件綁定</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>採用 addEventListener 實現</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>Vue 在創建 真實 DOM 時</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>會調用 createEml</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>默認調用 invokeCreateHooks</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>會遍歷 當前平台上 相對應 的屬性</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94> 其中有 updateDOMListener 方法 , 內部會傳入 add() 方法 </p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>第二種 組件綁定事件</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>Vue 通過自定義 $on 方法實現</p><br data-v-84e39b94><br data-v-84e39b94><div id="vueOne006" class="articleCardTitle cor36 fz30" data-v-84e39b94> [ vue ] ≫ 雙向綁定使用和原理? </div><div class="dis" data-v-84e39b94><div data-v-84e39b94><p class="fz28" data-v-84e39b94>vue2 實現雙向綁定 的原理是</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>通過數據劫持 和 發佈訂閱模式 實現</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>先通過 object.definedproperty 方法</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>對數據進行劫持 監聽數據的變化</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>並通過 getter 和 setter 方法 對數據 進行 讀寫</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>Vue 通過 發布 訂閱模式 , 維護一個訂閱者數組</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>當數據發生變化</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>Vue 會通知 所有 訂閱者 進行更新</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>因此 當用戶 在頁面上 進行修改時</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>Vue 會更新 對應數據</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>並通知 所有訂閱者 更新 視圖</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>同時 數據發生變化時 Vue 也會更新 對應的 視圖</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>比如 當我在 輸入框中 輸入文字時</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>Vue 會檢測到 數據的 變化</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>然後更新對應的 視圖</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>如果 通過代碼修改數據</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>vue 也會更新視圖</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28 cor36" data-v-84e39b94># vue2 和 vue3 v-model 差別?</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>vue3把 v-model 和 sync 合併成新的v-model</p><br data-v-84e39b94><p class="fz28" data-v-84e39b94>用法是 .sync 那種用法</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28 cor36" data-v-84e39b94># 訂閱者</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>在 vue 中 每一個 掛載到 視圖上 的組件</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>或 每一個 watcher</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>都可 被看作是 一個 訂閱者</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>他們 訂閱了 某一個 數據的變化</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>並等待 數據變化時 進行更新</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94># vue2 中 .sync 作用?</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>首先 props 是單向數據流</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>如果 子組件想 觸發 $emit 觸發@update:count</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>vue3 v-model:count=&quot;count&quot;</p><br data-v-84e39b94><br data-v-84e39b94></div><div class="padTwo" data-v-84e39b94></div><div class="bgcVSMid" data-v-84e39b94></div><div class="padTwo" data-v-84e39b94></div><div data-v-84e39b94><p class="fz28" data-v-84e39b94><a href="https://juejin.cn/post/7050418094233092104" data-v-84e39b94>你了解v-model吗 @掘金</a></p><br data-v-84e39b94><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>1.observer:對所有數據的屬性監聽</p><br data-v-84e39b94><p class="fz28" data-v-84e39b94>2.compiler:將指令解析生效-&gt;更新</p><br data-v-84e39b94><p class="fz28" data-v-84e39b94>3.watcher:數據變化調用update()函數</p><br data-v-84e39b94><p class="fz28" data-v-84e39b94>4.Dep:data變化時先找依賴</p><br data-v-84e39b94><p class="fz28" data-v-84e39b94>依賴:一個依賴對應到watcher</p><br data-v-84e39b94><p class="fz28 cor36" data-v-84e39b94>流程</p><br data-v-84e39b94><p class="fz28" data-v-84e39b94>1.new MVVM()</p><br data-v-84e39b94><p class="fz28" data-v-84e39b94>2.Observer:劫持監聽所有的屬性</p><br data-v-84e39b94><p class="fz28" data-v-84e39b94>3.commpiler:訂閱數據變化 綁訂到 watcher 上</p><br data-v-84e39b94><p class="fz28" data-v-84e39b94>當監聽到變化 observer 通知變化給 Dep</p><br data-v-84e39b94><p class="fz28" data-v-84e39b94>Dep 通知 watcher</p><br data-v-84e39b94><p class="fz28" data-v-84e39b94>watcher 觸發 update()</p><br data-v-84e39b94><p class="fz28" data-v-84e39b94>讓視圖更新 頁面重新渲染</p><br data-v-84e39b94><p class="fz28" data-v-84e39b94></p><br data-v-84e39b94></div></div><div id="vueOne007" class="articleCardTitle cor36 fz30" data-v-84e39b94> [ vue ] ≫ vue 如何進行依賴收集? </div><p class="fz28" data-v-84e39b94> template 裡的變量 ｛｛test1｝｝ 為 頁面上的模板 = 依賴 </p><br data-v-84e39b94><p class="fz28" data-v-84e39b94>｛｛test2｝｝</p><br data-v-84e39b94><p class="fz28" data-v-84e39b94>｛｛test3｝｝</p><br data-v-84e39b94><p class="fz28" data-v-84e39b94>每個依賴有一個 key = test1 Watcher1</p><br data-v-84e39b94><p class="fz28" data-v-84e39b94>key = test2 Watcher2</p><br data-v-84e39b94><p class="fz28" data-v-84e39b94>key = test3 Watcher3</p><br data-v-84e39b94><p class="fz28" data-v-84e39b94>需要 dep 進行管理</p><br data-v-84e39b94><p class="fz28" data-v-84e39b94> Dep1 deps = [ Watcher1,Watcher3 ] //Watcher1,Watcher3 依賴 Dep1 的內容 </p><br data-v-84e39b94><p class="fz28" data-v-84e39b94>Dep2 deps = [ Watcher2 ]</p><br data-v-84e39b94><p class="fz28" data-v-84e39b94>deps 數組將 Watcher1~3 的變化 進行 依賴收集</p><br data-v-84e39b94><p class="fz28" data-v-84e39b94>當頁面變化 觸發 deps 中的 Watcher</p><br data-v-84e39b94><p class="fz28 cor36" data-v-84e39b94>依賴收集 過程</p><br data-v-84e39b94><p class="fz28" data-v-84e39b94>1.通過 defineReactive 為 key 創建 Dep 實例</p><br data-v-84e39b94><p class="fz28" data-v-84e39b94>2.針對每個 key 對應的 變量 創建 Watcher</p><br data-v-84e39b94><p class="fz28" data-v-84e39b94>3.獲取變量 test1</p><br data-v-84e39b94><p class="fz28" data-v-84e39b94>用 getter 獲取 test1 中的方法 getter</p><br data-v-84e39b94><p class="fz28" data-v-84e39b94>針對 test1 創建 Watcher1</p><br data-v-84e39b94><p class="fz28" data-v-84e39b94> 在 getter 獲取時 將 Watcher1 添加到 test1 模板解析的 deps 上 </p><br data-v-84e39b94><p class="fz28" data-v-84e39b94>4.當 test1 更新時 觸發 setter</p><br data-v-84e39b94><p class="fz28" data-v-84e39b94>setter 從 Deps 上通知 watcher 進行更新</p><br data-v-84e39b94><p class="fz28" data-v-84e39b94></p><br data-v-84e39b94><p class="fz28" data-v-84e39b94></p><br data-v-84e39b94><p class="fz28" data-v-84e39b94></p><br data-v-84e39b94><p class="fz28" data-v-84e39b94></p><br data-v-84e39b94><p class="fz28" data-v-84e39b94></p><br data-v-84e39b94><p class="fz28" data-v-84e39b94>是實現響應式數據綁定的關鍵機制之一</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94> 通過依賴收集，Vue 能夠知道在數據變化時，哪些地方的視圖需要進行更新。 </p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>1.Watcher（觀察者）</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94> 每個綁定到 Vue 實例的數據屬性都會有一個對應的 Watcher 對象。 </p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94> Watcher 對象負責跟踪該屬性的依賴關係，並在屬性變化時執行相應的回調函數，從而更新視圖。 </p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>2.Getter 函數：</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94> 當 Vue 實例初始化時，每個數據屬性都會被轉化為一個帶有 getter 和 setter 的物件。 </p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94> Getter 函數會在頁面渲染時被呼叫，用來建立屬性與其依賴之間的關係。 </p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>3.依賴收集過程：</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94> 在 Getter 函數中，當訪問一個數據屬性時，Vue 會將正在運行的 Watcher 添加到屬性的依賴列表中。 </p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>這意味著當前的 Watcher 對該屬性產生了依賴。</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94> 如果有多個 Watcher 需要收集同一個屬性的依賴，Vue 會確保不會重複添加相同的 Watcher。 </p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>4.觸發更新：</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94> 當數據屬性變化時，對應的 Setter 函數會被呼叫，同時它會通知該屬性的所有依賴項（即 Watcher）。 </p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94> 這些 Watcher 會在被通知時執行回調函數，從而觸發視圖更新。 </p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28 cor36" data-v-84e39b94># vue3</p><p class="fz28" data-v-84e39b94>watch -&gt; effect</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>通過 map 結構 將 屬性和 effect 映射起來</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>初始化 調用 render 函數 , 觸發依賴收集 track</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>當屬性修改 , 找對應 effect 列表 依次執行 trigger</p><br data-v-84e39b94><br data-v-84e39b94><div id="vueOne008" class="articleCardTitle cor36 fz30" data-v-84e39b94> [ vue ] ≫ 異步組件是什麼? </div><p class="fz28" data-v-84e39b94>在大型項目中 , 可能需要拆分應用為 更小的塊</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>並且在 需要組件時 再加載他們</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28 cor36" data-v-84e39b94># 異步組件 &amp; 路由懶加載</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>異步組件不能被用於定義懶加載路由上</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>處理它是 vue 框架</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>處理路由組件加載的是 vue-router</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>但可以在 懶加載的路由組件中 使用 異步組件</p><br data-v-84e39b94><br data-v-84e39b94><div id="vueOne009" class="articleCardTitle cor36 fz30" data-v-84e39b94> [ vue ] ≫ nextTick </div><p class="fz28 cor36" data-v-84e39b94># Vue 為什麼會有 nextTick?</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28 cor36" data-v-84e39b94> # Vue data 中某一個屬性的值發生改變後 , 視圖會立即同步執行重新渲染嗎? </p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28 cor36" data-v-84e39b94># Vue nextTick 原理是什麼?</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>nextTick 是 等待 下一次 DOM 更新 刷新的 工具方法</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>(在下次 DOM 更新循環結束 之後 執行延遲回調)</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>由於 vue 中 DOM 更新是 異步執行的</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>修改數據時 , 視圖 不會 立即更新</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>而是 會監聽 數據變化</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>並 緩存在 同一事件循環中</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>等 同一數據 循環中 的 所有 數據 變化完成之後</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>再 統一進行 視圖更新</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>如果在 DOM 還未更新時 獲取的 DOM 是變更前的</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>可以設置 nextTick 方法</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>來 獲取 更新後的 DOM</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28 cor36" data-v-84e39b94># 使用場景</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94> 比如 需要 在 生命週期 的 created 函數 , 進行 DOM 操作 </p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>把相關代碼 寫在 nextTick 的 回調函數中</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>因為在 created 鉤子函數中 , DOM 還未進行任何渲染</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>此時 進行 DOM 操作 沒用</p><br data-v-84e39b94><br data-v-84e39b94><div id="vueOne010" class="articleCardTitle cor36 fz30" data-v-84e39b94> [ vue ] ≫ 虛擬 DOM 是幹嘛用的? </div><p class="fz28" data-v-84e39b94>因為 DOM 操作本身是是非常占用性能的,</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>先用虛擬 DOM 生成一些虛擬的節點,</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>先不真的渲染到頁面上去,</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>在生成虛擬的頁面上進行操作再一次性的選染到頁面上,</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>這樣能達到性能優化的效果</p><br data-v-84e39b94><br data-v-84e39b94><div id="vueOne011" class="articleCardTitle cor36 fz30" data-v-84e39b94> [ vue ] ≫ Vue 的 diff 算法? </div><p class="fz28" data-v-84e39b94> (雙端交叉對比5句) _ 頭頭對比 尾尾對比 新頭舊尾 新尾舊頭 利用key對比 </p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>首尾雙端這樣優化的算法,</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>先進行頭頭的對比,</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>然後進行尾尾的對比,</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>然後舊尾新頭,</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>然後舊頭新尾,</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>最後再進行key的對比,</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>這樣五步循環的方式進行一個優化</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz32 cor36" data-v-84e39b94># 好處?</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>好處是能更大程度上復用節點, 而不用像 react 一樣,</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>先把一些節點都廢棄, 再從一個map裡面去找,</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94> 如果有相同的key再給他復活的這樣一個機制, 比他更高效 </p><br data-v-84e39b94><br data-v-84e39b94><p class="fz32 cor36" data-v-84e39b94># react 為什麼不用 diff?</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>他的fiber架構上就 不支持這個 雙端指針 的問題</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>如果要升級的話, 是一個比較大幅度的改變,</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94> 而且從使用上來說, 虛擬DOM在性能上也沒產生比較大的問題, </p><br data-v-84e39b94><br data-v-84e39b94><div id="vueOne012" class="articleCardTitle cor36 fz30" data-v-84e39b94> [ vue ] ≫ Vue 通過數據劫持可以實現對數據在具體 DOM 上的變化的精確檢測，為什麼 還要使用虛擬 DOM ? </div><p class="fz28" data-v-84e39b94>當數據變化時，若直接操作真實 DOM，</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>瀏覽器必須反覆進行重新排列和重繪，</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>虛擬 DOM 的引入有助於減少頻繁的 DOM 操作。</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>先將變化渲染至虛擬 DOM，</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>然後通過差異算法 (diff)，</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>僅對真正發生變化的部分進行操作，</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94> 最後再將變化的部分呈現於實際 DOM，減輕瀏覽器負擔，提升性能。 </p><br data-v-84e39b94><br data-v-84e39b94><div id="vueOne013" class="articleCardTitle cor36 fz30" data-v-84e39b94> [ vue ] ≫ Vue2的生命週期有哪些? </div><p class="fz28" data-v-84e39b94>分三階段 , 掛載 、 更新 、 銷毀,</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>掛載有 beforeCreate, created,</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>beforeMount , mounted ,</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>更新有 beforeUpdate , updated</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>銷毀有 beforeDestroy , destroyed</p><br data-v-84e39b94><br data-v-84e39b94><br data-v-84e39b94><br data-v-84e39b94><br data-v-84e39b94><table class="fz30" data-v-84e39b94><tr data-v-84e39b94><td data-v-84e39b94><div class="pad10" data-v-84e39b94>Vue3</div></td><td data-v-84e39b94><div class="pad10" data-v-84e39b94>vue2</div></td><td data-v-84e39b94><div class="pad10" data-v-84e39b94>觸發時間</div></td></tr><tr data-v-84e39b94><td data-v-84e39b94><div class="pad10" data-v-84e39b94></div></td><td data-v-84e39b94><div class="pad10" data-v-84e39b94>beforeCreate(){}</div></td><td data-v-84e39b94><div class="pad10" data-v-84e39b94><div data-v-84e39b94>Vue實例創建完成之前</div><div data-v-84e39b94>( 組件創建 )</div></div></td></tr><tr data-v-84e39b94><td data-v-84e39b94><div class="pad10" data-v-84e39b94></div></td><td data-v-84e39b94><div class="pad10" data-v-84e39b94>created(){}</div></td><td data-v-84e39b94><div class="pad10" data-v-84e39b94>Vue實例創建完畢後</div></td></tr><tr data-v-84e39b94><td data-v-84e39b94><div class="pad10" data-v-84e39b94></div></td><td data-v-84e39b94><div class="pad10" data-v-84e39b94>beforeMount(){}</div></td><td data-v-84e39b94><div class="pad10" data-v-84e39b94>模板渲染到頁面之前</div></td></tr><tr data-v-84e39b94><td data-v-84e39b94><div class="pad10" data-v-84e39b94></div></td><td data-v-84e39b94><div class="pad10" data-v-84e39b94>mounted(){}</div></td><td data-v-84e39b94><div class="pad10" data-v-84e39b94>模板渲染到頁面後</div></td></tr><tr data-v-84e39b94><td data-v-84e39b94><div class="pad10" data-v-84e39b94></div></td><td data-v-84e39b94><div class="pad10" data-v-84e39b94>beforeUpdated(){}</div></td><td data-v-84e39b94><div class="pad10" data-v-84e39b94><div data-v-84e39b94>組件數據發生變化</div><div data-v-84e39b94>更新之前</div></div></td></tr><tr data-v-84e39b94><td data-v-84e39b94><div class="pad10" data-v-84e39b94></div></td><td data-v-84e39b94><div class="pad10" data-v-84e39b94>updated</div></td><td data-v-84e39b94><div class="pad10" data-v-84e39b94>數據更新後</div></td></tr><tr data-v-84e39b94><td data-v-84e39b94><div class="pad10" data-v-84e39b94>beforeUnmounted</div></td><td data-v-84e39b94><div class="pad10" data-v-84e39b94>beforeDestroy</div></td><td data-v-84e39b94><div class="pad10" data-v-84e39b94>組件實例銷毀前</div></td></tr><tr data-v-84e39b94><td data-v-84e39b94><div class="pad10" data-v-84e39b94>unmounted</div></td><td data-v-84e39b94><div class="pad10" data-v-84e39b94>destroyed</div></td><td data-v-84e39b94><div class="pad10" data-v-84e39b94>組件實例銷毀後</div></td></tr><tr data-v-84e39b94><td data-v-84e39b94><div class="pad10" data-v-84e39b94>renderTracked</div></td><td data-v-84e39b94><div class="pad10" data-v-84e39b94></div></td><td data-v-84e39b94><div class="pad10" data-v-84e39b94>響應式依賴被收集時</div></td></tr><tr data-v-84e39b94><td data-v-84e39b94><div class="pad10" data-v-84e39b94>renderTriggered</div></td><td data-v-84e39b94><div class="pad10" data-v-84e39b94></div></td><td data-v-84e39b94><div class="pad10" data-v-84e39b94>響應式依賴被觸發時</div></td></tr><tr data-v-84e39b94><td data-v-84e39b94><div class="pad10" data-v-84e39b94>serverPrefetch</div></td><td data-v-84e39b94><div class="pad10" data-v-84e39b94></div></td><td data-v-84e39b94><div class="pad10" data-v-84e39b94>ssr only</div></td></tr></table><br data-v-84e39b94><br data-v-84e39b94><br data-v-84e39b94><p class="fz28 cor36" data-v-84e39b94># 還有用過其他鉤子嗎?</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>keepalive,它會帶 2 個鉤子 activated, deactivated</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28 cor36" data-v-84e39b94># vue3和vue2生命鉤子差在哪?</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94> 銷毀前 beforeDestroy, 銷毀後 destroyed 換名子變成 卸載前 卸載後 beforeUnmounted unmounted </p><br data-v-84e39b94><br data-v-84e39b94><div id="vueOne014" class="articleCardTitle cor36 fz36" data-v-84e39b94> [ vue ] ≫ v-if v-for 哪個優先級更高? </div><p class="fz28" data-v-84e39b94><a href="https://v2.cn.vuejs.org/v2/guide/conditional.html#v-if-%E4%B8%8E-v-for-%E4%B8%80%E8%B5%B7%E4%BD%BF%E7%94%A8" data-v-84e39b94>vue2 文檔</a><a href="https://cn.vuejs.org/guide/essentials/list.html#v-for-with-v-if" data-v-84e39b94>vue3 文檔</a></p><br data-v-84e39b94><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>v-for 和 v-if 應該要避免在同一個標籤中使用</p><br data-v-84e39b94><p class="fz28" data-v-84e39b94>在 vue2 中 v-for 優先級高於 v-if</p><br data-v-84e39b94><p class="fz28" data-v-84e39b94>在 vue3 中 v-if 優先級高於 v-for</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28 cor36" data-v-84e39b94> # 情況 1. 有一個列表 , 列表中有一個條件 決定要不要顯示 </p><br data-v-84e39b94><p class="fz28 cor36" data-v-84e39b94># 情況 1-1 vue2</p><p class="fz28 pEig" data-v-84e39b94>v-for &gt; v-if</p><br data-v-84e39b94><div class="fz30" data-v-84e39b94><div data-v-84e39b94><span class="function" data-v-84e39b94>v-for</span> <span class="then" data-v-84e39b94>=</span><span class="src" data-v-84e39b94>&quot;userinusers&quot; </span><span class="function" data-v-84e39b94>v-if</span> <span class="then" data-v-84e39b94>=</span><span class="src" data-v-84e39b94>&quot;user.isActive&quot;</span></div></div><br data-v-84e39b94><p class="fz28" data-v-84e39b94>不斷做循環 , 不斷條件判斷 isActive 是否為真</p><br data-v-84e39b94><br data-v-84e39b94><br data-v-84e39b94><br data-v-84e39b94><p class="fz28 cor36" data-v-84e39b94># 情況 1-2 vue3</p><p class="fz28 pEig" data-v-84e39b94>v-if &gt; v-for</p><br data-v-84e39b94><div class="fz30" data-v-84e39b94><div data-v-84e39b94><span class="function" data-v-84e39b94>v-for</span> <span class="then" data-v-84e39b94>=</span><span class="src" data-v-84e39b94>&quot;user in users&quot; </span><span class="function" data-v-84e39b94>v-if</span> <span class="then" data-v-84e39b94>=</span><span class="src" data-v-84e39b94>&quot;user.isActive&quot;</span></div></div><br data-v-84e39b94><p class="fz28" data-v-84e39b94>vue 嘗試拿不存在的 user.isActive ...&gt; 報錯</p><br data-v-84e39b94><br data-v-84e39b94><br data-v-84e39b94><p class="fz28 cor36" data-v-84e39b94># 情況 1. 改善</p><br data-v-84e39b94><p class="fz28" data-v-84e39b94>定義一個 計算屬性 , 讓其返回 過濾後的 列表</p><br data-v-84e39b94><p class="fz28" data-v-84e39b94>users.filter( (u) =&gt; u.isActive)</p><br data-v-84e39b94><br data-v-84e39b94><br data-v-84e39b94><br data-v-84e39b94><br data-v-84e39b94><br data-v-84e39b94><p class="fz28 cor36" data-v-84e39b94> # 情況 2. 根據 一個 條件 直接決定 當前列表 要不要 顯示 </p><br data-v-84e39b94><p class="fz28 cor36" data-v-84e39b94># 情況 2-1 vue2</p><p class="fz28 pEig" data-v-84e39b94>v-for &gt; v-if</p><br data-v-84e39b94><div class="fz30" data-v-84e39b94><div data-v-84e39b94><span class="function" data-v-84e39b94>v-for</span> <span class="then" data-v-84e39b94>=</span><span class="src" data-v-84e39b94>&quot;user in users&quot; </span><span class="function" data-v-84e39b94>v-if</span> <span class="then" data-v-84e39b94>=</span><span class="src" data-v-84e39b94>&quot;sholdShowUsers&quot;</span></div></div><br data-v-84e39b94><p class="fz28" data-v-84e39b94>不斷先做 v-for 循環 再判斷 v-if 造成資源浪費</p><br data-v-84e39b94><br data-v-84e39b94><br data-v-84e39b94><br data-v-84e39b94><p class="fz28 cor36" data-v-84e39b94># 情況 2-2 vue3</p><p class="fz28 pEig" data-v-84e39b94>v-if &gt; v-for</p><br data-v-84e39b94><p class="fz28" data-v-84e39b94>先 v-if 判斷 再 v-for 循環</p><br data-v-84e39b94><br data-v-84e39b94><br data-v-84e39b94><p class="fz28 cor36" data-v-84e39b94># 情況 2. 改善</p><br data-v-84e39b94><p class="fz28" data-v-84e39b94>在 ul 直接 v-if 判斷 li 再做循環</p><br data-v-84e39b94><div id="vueOne015" class="articleCardTitle cor36 fz30" data-v-84e39b94> [ vue ] ≫ v-show v-if ? </div><p class="fz28" data-v-84e39b94> v-if 如果條件不成立 , 不會渲染當前指令所在節點的 dom 元素 </p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94> v-show 只是 切換當前 dom 的顯示 或 隱藏 (條件不滿足 display:none) </p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94> opacity 控制透明度 佔位 visiviblity 控制元素是否出現在頁面 佔位 </p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28 cor36" data-v-84e39b94># 如何選擇?</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94> v-if 可以阻斷內部代碼是否執行 , 條件不成立 不執行內部邏輯 </p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94> 頁面邏輯在第一次加載時 已被確認後續不會頻繁更改 用 v-if </p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28 cor36" data-v-84e39b94># v-if v-show 寫一起?</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>v-if 優先級更高</p><br data-v-84e39b94><br data-v-84e39b94><div id="vueOne016" class="articleCardTitle cor36 fz36" data-v-84e39b94> [ vue ] ≫ vue 中 key 的作用和原理? </div><p class="fz28" data-v-84e39b94>key 的作用是 給每個 vnode 節點</p><br data-v-84e39b94><p class="fz28" data-v-84e39b94>添加 唯一的 id</p><br data-v-84e39b94><p class="fz28" data-v-84e39b94>作用是 為 diff 算法做優化</p><br data-v-84e39b94><p class="fz28" data-v-84e39b94>這樣可以 根據 key 更快更好的 找到 vnode 節點</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28 cor36" data-v-84e39b94># 1. 不加 key</p><br data-v-84e39b94><p class="fz28" data-v-84e39b94>vue 選擇 就地復用 原則</p><br data-v-84e39b94><p class="fz28" data-v-84e39b94>最小化 移動 對應的 元素</p><br data-v-84e39b94><p class="fz28" data-v-84e39b94>最大程度 重用相同的 元素</p><br data-v-84e39b94><p class="fz28 cor36" data-v-84e39b94># 2. 加 key</p><br data-v-84e39b94><p class="fz28" data-v-84e39b94>veu 根據 key 的紀錄 找到 相關聯的 元素</p><br data-v-84e39b94><p class="fz28" data-v-84e39b94>就知道 元素切換之前 和 切換之後 是如何變化的</p><br data-v-84e39b94><p class="fz28 cor36" data-v-84e39b94># 不推薦 index 做 key</p><br data-v-84e39b94><p class="fz28" data-v-84e39b94>在增刪場景中 , 元素 index 可能會變</p><br data-v-84e39b94><p class="fz28" data-v-84e39b94>diff 算法是比較 同級之間的不同 , 以 key 關聯</p><br data-v-84e39b94><p class="fz28" data-v-84e39b94>當 數組進行下標變換 , 比如 刪 第一條數據</p><br data-v-84e39b94><p class="fz28" data-v-84e39b94>之後 index 發生改變 , key 也跟著發生改變</p><br data-v-84e39b94><p class="fz28" data-v-84e39b94> 所以 index 做 key 不穩定 , 可能導致性能浪費 , 導致 diff 無法關聯起上一次一樣的數據 </p><br data-v-84e39b94><p class="fz28" data-v-84e39b94></p><br data-v-84e39b94><p class="fz28" data-v-84e39b94></p><br data-v-84e39b94><p class="fz28" data-v-84e39b94></p><br data-v-84e39b94><p class="fz28" data-v-84e39b94></p><br data-v-84e39b94><p class="fz28" data-v-84e39b94></p><br data-v-84e39b94><p class="fz28" data-v-84e39b94></p><br data-v-84e39b94><p class="fz28" data-v-84e39b94></p><br data-v-84e39b94><p class="fz28" data-v-84e39b94></p><br data-v-84e39b94><p class="fz28" data-v-84e39b94></p><br data-v-84e39b94><p class="fz28" data-v-84e39b94></p><br data-v-84e39b94><p class="fz28" data-v-84e39b94></p><br data-v-84e39b94><p class="fz28" data-v-84e39b94></p><br data-v-84e39b94><p class="fz28" data-v-84e39b94></p><br data-v-84e39b94><p class="fz28" data-v-84e39b94></p><br data-v-84e39b94><p class="fz28" data-v-84e39b94></p><br data-v-84e39b94><div id="vueOne017" class="articleCardTitle cor36 fz30" data-v-84e39b94> [ vue ] ≫ Vue要做權限管理怎麼做? 控制到按鈕級別權限怎麼做? </div><p class="fz28" data-v-84e39b94>1. 登入鑒權</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>用戶登入後 , 服務器返回 token</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>前端將 token 保存到本地 , 做為 用戶登入 的憑證</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>每次發請求都攜帶 token , 後端 對 token 做驗證</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>每當 頁面刷新 都可以 透過 token 獲取用戶 相關權限</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>2. 訪問權限</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94> 根據用戶是否登入 判斷能否訪問頁面 , 通過路由守衛 實現判斷用戶 是否有 權限 </p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>router.beforeEach*( hook )</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>在路由 component 下配置 meta: { needLogin:true }</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>store.state.user.hasPermission</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>localStorage.getItem(&quot;token&quot;)</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>3. 頁面權限</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94> 前端配置路由 分 2 部分 , &quot;通用路由配置&quot; &quot;需要權限路由配置&quot; </p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94> 可 根據 後端返回 權限 來決定 那些路由需要動態添加的 </p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>可調用 router.addRoute() 實現動態路由添加</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>4. 按鈕權限</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94> 一般用 自定義指令實現 , 用戶登入後 , 返回對應按鈕權限 </p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>在對應的按鈕上 使用指令 ,</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>有權限就顯示</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>沒權限就隱藏</p><br data-v-84e39b94><br data-v-84e39b94><div id="vueOne018" class="articleCardTitle cor36 fz30" data-v-84e39b94> [ vue ] ≫ 那些 Vue 性能優化方法? </div><p class="fz28" data-v-84e39b94>平常寫代碼有一些優化手段 , 以下</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28 cor36" data-v-84e39b94>路由懶加載</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>通過 vite 提供的 動態加載方法 import</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>可以動態加載組件 , 實現 異步組件</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>於是打包時 , 可以分包去打包</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>這樣程序 能變 更小更快</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>我需要訪問時 , 才異步加載</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28 cor36" data-v-84e39b94>組件緩存</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>通過 keep-alive 可以進行 組件緩存</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>避免重複創建 組件實例 , 且能保留 緩存組件狀態</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28 cor36" data-v-84e39b94>v-show 復用 DOM</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>v-show 和 v-if 差在它不會 重新創建 元素</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>比如有一個 創建時間長的 重組件</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>通過緩存的方式</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>下次再來時 , 直接隱藏 或顯示</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>而不是 刪除 再創建 , 這樣快得多</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28 cor36" data-v-84e39b94>v-for 遍歷 避免 同時用 v-if</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>v-for 避免 v-if 同時使用</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28 cor36" data-v-84e39b94>圖片懶加載</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>對 圖片過多頁面 , 等圖片出現在可視區域 再加載</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28 cor36" data-v-84e39b94>第三方插件按需引入</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94> 像 element-plus 這樣第三方組件庫 引入 來避免 體積太大 </p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28 cor36" data-v-84e39b94>子組件分割策略</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>計算邏輯 較重的 組件 拆分</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>這樣它 頻繁更新時 , 是影響這個組件 的小單元</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94></p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94></p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94></p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94></p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94></p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94></p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94></p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94></p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94></p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94></p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94></p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94></p><br data-v-84e39b94><br data-v-84e39b94><div id="vueOne019" class="articleCardTitle cor36 fz30" data-v-84e39b94> [ vue ] ≫ 對 SPA 理解? </div><p class="fz28" data-v-84e39b94>是什麼? . 和 MPA? . 優缺</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>SPA . （Single-Page Application） . 單頁應用</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94> 在網頁初始化時，會加載相應的 HTML、JavaScript 和 CSS。 </p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94> 一旦頁面加載完成，單頁應用 (SPA) 不會因為用戶的操作而進行頁面的重新加載或跳轉 </p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94> 利用路由機制實現 HTML 內容的變換，UI 與用戶的互動，避免頁面的重新加載。 </p><br data-v-84e39b94><br data-v-84e39b94><p class="fz32" data-v-84e39b94>MPA ，每個頁面都是一個主頁面，</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94> 在訪問另一個頁面的時候，都需要重新加載 HTML、CSS、JS 檔案 </p><br data-v-84e39b94><br data-v-84e39b94><p class="fz30" data-v-84e39b94>優</p><p class="fz28" data-v-84e39b94>用戶體驗好、快，內容的改變不需要重新加載整個頁面。</p><br data-v-84e39b94><p class="fz28" data-v-84e39b94>良好的前後端分離，分工更明確。</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz30" data-v-84e39b94>缺</p><p class="fz28" data-v-84e39b94>不利於搜索引擎的抓取。</p><br data-v-84e39b94><p class="fz28" data-v-84e39b94>首次渲染速度相對較慢。</p><br data-v-84e39b94><br data-v-84e39b94><div id="vueOne020" class="articleCardTitle cor36 fz30" data-v-84e39b94> [ vue ] ≫ Watch 和 computed 區別? </div><p class="fz28 cor36" data-v-84e39b94># computed</p><p class="fz28" data-v-84e39b94> computed 是 某個值 需要 通過某些邏輯 或 多個數據計算而來 就要用 computed </p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>比如 購物車 結算總金額</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>總金額 依賴 數量 和 單價</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94> 另外 支持 緩存 , 只有當 依賴的數據 發生改變的時候 才重新計算 </p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>否則 直接從 緩存中 讀取</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94> computed 不支持異步 , 內部有異步操作是無效的 無法監聽數據變化 </p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28 cor36" data-v-84e39b94># watch</p><p class="fz28" data-v-84e39b94> watch 是當一個數據的變化 會影響其他一個 或多個數據的時候 </p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>就需要監聽這個數據</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>watch 不支持緩存</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>監聽的數據發生變化 就會觸發相應的操作</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>watch 支持異步 ,</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>且監聽的數據必須是 data 中聲明過的數據</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>或 父組件傳遞的 props 中的數據</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>另外每個監聽數據有 2 個可選屬性 immediate &amp; deep</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>immediate 是組件加載 立刻觸發</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>true 首次加載立即觸發</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>false 首次加載 不會執行這個監聽邏輯</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>只有當數據改變時 , 才會監聽</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>deep 是深度監聽</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>為了監聽物件內部值的變化 , 適合用在複雜數據類型中</p><br data-v-84e39b94><br data-v-84e39b94><div id="vueOne021" class="articleCardTitle cor36 fz30" data-v-84e39b94> [ vue ] ≫ ref 和 reactive 區別? </div><p class="fz28" data-v-84e39b94>1.概念</p><p class="fz28" data-v-84e39b94>2.使用場景</p><p class="fz28" data-v-84e39b94>3.異同</p><p class="fz28" data-v-84e39b94>4.細節</p><p class="fz28" data-v-84e39b94>5.原理</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>ref 接收內部值 返回 響應式的 包裝物件 Ref 類型</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>是對一個單值 進行 響應式處理</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94> 比較可能是 原始類型值 , 因為遠使類型值 不能做 proxy 代理 </p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>因為封裝 , 訪問內部值用 .value</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>ref 處理單值響應式 reactive 處理物件響應式</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>ref 也可以 數組 物件</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94> ref 在 JS 中使用 要加 .value , 在視圖中會自動脫ref 不須加 .value </p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94> reactive 在 JS 不用加 .value , 在視圖中要 變量名 點 屬姓名 </p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>有人會嘗試 展開運算符 ...展開</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>展開後失去響應</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>可結合 toRefs() 將值轉為 Ref 物件 後再展開</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>值是響應式單值 , 視圖對他進行單獨脫殼處理</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28 cor36" data-v-84e39b94>內部實現機制</p><p class="fz28" data-v-84e39b94> reactive 對傳入對象 通過 proxy 方式進行訪問攔截 (trap) </p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>ref 創建一個新物件 將單一值 進行包裝</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94> 這個值通過一個存取器 get value / set value 對外暴露 </p><br data-v-84e39b94><br data-v-84e39b94><div id="vueOne022" class="articleCardTitle cor36 fz30" data-v-84e39b94> [ vue ] ≫ 對 vue 組件化 的理解? </div><p class="fz28" data-v-84e39b94>定義 . 使用場景 . 如何使用 . 組件本質</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>組件 是可複用的 vue 實例</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz32" data-v-84e39b94>優</p><p class="fz28" data-v-84e39b94>組件 可增加 代碼 複用性 . 可維護性 . 可測試性</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz32" data-v-84e39b94>場景</p><p class="fz28" data-v-84e39b94> 通用組件 基本功能 -&gt; 有通用 複用性 -&gt; 按鈕、輸入框組件 </p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>業務組件 具體業務 -&gt; 複用性 -&gt; 登入、輪播組件</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94> 頁面組件 組織個部分獨立內容 -&gt; 不同頁面組件間切換 -&gt; 商品列表 </p><br data-v-84e39b94><br data-v-84e39b94><p class="fz32" data-v-84e39b94>創建</p><p class="fz28" data-v-84e39b94>定義: Vue.component() , components 選項</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>分類: 有狀態組件(有data屬性) , function</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>通信: props , $emit()/$on() , provide/inject</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>內容分發: ＜slot&gt; , ＜template&gt; , v-slot</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>使用及優化: is , keep-alive , 異步組件</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz32" data-v-84e39b94>組件本質</p><p class="fz28" data-v-84e39b94> vue組件經歷 . 組件配置 -&gt; VueComponent實例 -&gt; render() -&gt; Virtual DOM -&gt; DOM </p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>所以組件本質 -&gt; 產生虛擬 DOM</p><br data-v-84e39b94><br data-v-84e39b94><div id="vueOne023" class="articleCardTitle cor36 fz30" data-v-84e39b94> [ vue ] ≫ vue 組件通信? </div><p class="fz28" data-v-84e39b94>父子組件通信</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>兄弟組件通信</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>祖孫 後代 通信</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>非關係組件的通信</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28 cor36" data-v-84e39b94># props 父傳子</p><br data-v-84e39b94><div class="fz30" data-v-84e39b94><div data-v-84e39b94><span class="comment" data-v-84e39b94>//父組件</span></div><div data-v-84e39b94><span class="then" data-v-84e39b94>＜</span><span class="number" data-v-84e39b94>Children </span><span class="word" data-v-84e39b94>name</span> <span class="then" data-v-84e39b94>=</span><span class="src" data-v-84e39b94>&quot;wayne&quot;</span> <span class="word" data-v-84e39b94>age</span><span class="then" data-v-84e39b94>=</span> <span class="number" data-v-84e39b94>18</span><span class="then" data-v-84e39b94>&gt;</span></div><br data-v-84e39b94><div data-v-84e39b94><span class="comment" data-v-84e39b94>//children子組件</span></div><div data-v-84e39b94><span class="word" data-v-84e39b94>props:</span> <span class="brackets" data-v-84e39b94>{</span></div><div class="padTwo VSL" data-v-84e39b94><span class="word" data-v-84e39b94>name:</span><span class="brackets" data-v-84e39b94>String,</span><div data-v-84e39b94><span class="word" data-v-84e39b94>age:</span> <span class="brackets" data-v-84e39b94>{</span></div><div class="padTwo VSL" data-v-84e39b94><span class="word" data-v-84e39b94>require:</span><span class="number" data-v-84e39b94>true</span> <span class="then" data-v-84e39b94>,</span><div data-v-84e39b94><span class="word" data-v-84e39b94>default:</span><span class="number" data-v-84e39b94>18,</span></div><div data-v-84e39b94><span class="word" data-v-84e39b94>type:</span><span class="brackets" data-v-84e39b94>Number</span></div><div data-v-84e39b94></div></div><div data-v-84e39b94></div><div data-v-84e39b94><span class="brackets" data-v-84e39b94>}</span></div></div><div data-v-84e39b94><span class="brackets" data-v-84e39b94>}</span></div></div><br data-v-84e39b94><p class="fz28 cor36" data-v-84e39b94># 子組件向父組件觸發</p><p class="pFou fz28" data-v-84e39b94>1.$emit</p><p class="pFou fz28" data-v-84e39b94>2.父@add</p><p class="pFou fz28" data-v-84e39b94>3.ref</p><br data-v-84e39b94><br data-v-84e39b94><div class="fz30" data-v-84e39b94><p class="cor36" data-v-84e39b94>1.$emit</p><div class="comment" data-v-84e39b94> //子組件 透過 @emit() 觸發 自定義事件 add 參數 123 </div><div data-v-84e39b94><span class="then" data-v-84e39b94>this</span><span class="variable" data-v-84e39b94>.$emit</span><span class="brackets" data-v-84e39b94>(</span> <span class="src" data-v-84e39b94>&quot;add&quot;</span><span class="src" data-v-84e39b94>,</span> <span class="number" data-v-84e39b94>123</span><span class="brackets" data-v-84e39b94>)</span></div><br data-v-84e39b94><br data-v-84e39b94><p class="cor36" data-v-84e39b94>2.父@add</p><div data-v-84e39b94><span class="comment" data-v-84e39b94>//父組件通過add標示符@add=&quot;觸發父組件中方法&quot;</span></div><div data-v-84e39b94><span class="comment" data-v-84e39b94>//父組件透過監聽方式來觸發父組件中方法,通過event來獲取參數</span></div><div data-v-84e39b94><span class="then" data-v-84e39b94>＜</span> <span class="number" data-v-84e39b94>Children </span><span class="then" data-v-84e39b94>@add=</span><span class="src" data-v-84e39b94>&quot;cartAdd</span><span class="brackets" data-v-84e39b94>(</span> <span class="then" data-v-84e39b94>$event</span><span class="brackets" data-v-84e39b94>)</span> <span class="src" data-v-84e39b94>&quot;</span><span class="then" data-v-84e39b94>&gt;</span></div><br data-v-84e39b94><br data-v-84e39b94><p class="cor36" data-v-84e39b94>3.ref</p><br data-v-84e39b94><p class="fz28 cor36" data-v-84e39b94># 族先 後代子組件</p><p class="fz28" data-v-84e39b94>祖先組件 provide inject</p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94>後代組件 inject</p><br data-v-84e39b94><br data-v-84e39b94></div><p class="fz28" data-v-84e39b94></p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94></p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94></p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94></p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94></p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94></p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94></p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94></p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94></p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94></p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94></p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94></p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94></p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94></p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94></p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94></p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94></p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94></p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94></p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94></p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94></p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94></p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94></p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94></p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94></p><br data-v-84e39b94><br data-v-84e39b94><div class="articleCardTitle cor36 fz30" data-v-84e39b94>[ vue ] ≫</div><p class="fz28" data-v-84e39b94></p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94></p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94></p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94></p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94></p><br data-v-84e39b94><br data-v-84e39b94><div class="articleCardTitle cor36 fz30" data-v-84e39b94>[ vue ] ≫</div><p class="fz28" data-v-84e39b94></p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94></p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94></p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94></p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94></p><br data-v-84e39b94><br data-v-84e39b94><div class="articleCardTitle cor36 fz30" data-v-84e39b94>[ vue ] ≫</div><p class="fz28" data-v-84e39b94></p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94></p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94></p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94></p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94></p><br data-v-84e39b94><br data-v-84e39b94><div class="articleCardTitle cor36 fz30" data-v-84e39b94>[ vue ] ≫</div><p class="fz28" data-v-84e39b94></p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94></p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94></p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94></p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94></p><br data-v-84e39b94><br data-v-84e39b94><div class="articleCardTitle cor36 fz30" data-v-84e39b94>[ vue ] ≫</div><p class="fz28" data-v-84e39b94></p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94></p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94></p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94></p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94></p><br data-v-84e39b94><br data-v-84e39b94><div class="articleCardTitle cor36 fz30" data-v-84e39b94>[ vue ] ≫</div><p class="fz28" data-v-84e39b94></p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94></p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94></p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94></p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94></p><br data-v-84e39b94><br data-v-84e39b94><div class="articleCardTitle cor36 fz30" data-v-84e39b94>[ vue ] ≫</div><p class="fz28" data-v-84e39b94></p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94></p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94></p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94></p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94></p><br data-v-84e39b94><br data-v-84e39b94><div class="articleCardTitle cor36 fz30" data-v-84e39b94>[ vue ] ≫</div><p class="fz28" data-v-84e39b94></p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94></p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94></p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94></p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94></p><br data-v-84e39b94><br data-v-84e39b94><div class="articleCardTitle cor36 fz30" data-v-84e39b94>[ vue ] ≫</div><p class="fz28" data-v-84e39b94></p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94></p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94></p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94></p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94></p><br data-v-84e39b94><br data-v-84e39b94><div class="articleCardTitle cor36 fz30" data-v-84e39b94>[ vue ] ≫</div><p class="fz28" data-v-84e39b94></p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94></p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94></p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94></p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94></p><br data-v-84e39b94><br data-v-84e39b94><div class="articleCardTitle cor36 fz30" data-v-84e39b94>[ vue ] ≫</div><p class="fz28" data-v-84e39b94></p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94></p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94></p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94></p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94></p><br data-v-84e39b94><br data-v-84e39b94><div class="articleCardTitle cor36 fz30" data-v-84e39b94>[ vue ] ≫</div><p class="fz28" data-v-84e39b94></p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94></p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94></p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94></p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94></p><br data-v-84e39b94><br data-v-84e39b94><div class="articleCardTitle cor36 fz30" data-v-84e39b94>[ vue ] ≫</div><p class="fz28" data-v-84e39b94></p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94></p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94></p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94></p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94></p><br data-v-84e39b94><br data-v-84e39b94><div class="articleCardTitle cor36 fz30" data-v-84e39b94>[ vue ] ≫</div><p class="fz28" data-v-84e39b94></p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94></p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94></p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94></p><br data-v-84e39b94><br data-v-84e39b94><p class="fz28" data-v-84e39b94></p><br data-v-84e39b94><br data-v-84e39b94></div></div></div>',1),_o=Gt(()=>n("div",{class:"toTopButton"},[n("div",{class:"disCen"},"___"),n("div",{class:"disCen"},"▲")],-1)),So=[_o],yo=Gt(()=>n("div",{class:"toBotButton"},[n("div",{class:"disCen"},"▼"),n("div",{class:"disCen"},"￣")],-1)),Co=[yo],xo={__name:"VuePageOne",setup(a){const s=ba(!1);window.addEventListener("scroll",function(){s.value=window.scrollY>0});function d(){window.scrollTo({top:0,left:0,behavior:"smooth"})}function v(){window.scrollTo({top:999999,left:0,behavior:"smooth"})}function t(e){window.scrollTo({top:document.getElementById(`${e}`).offsetTop,behavior:"smooth"})}return(e,c)=>(aa(),ta(G,null,[n("section",null,[n("div",ko,[n("div",go,[n("div",zo,[To,n("div",{onClick:c[0]||(c[0]=l=>t("vueOne001")),class:"leftNavText"}," 對vue的理解 "),n("div",{onClick:c[1]||(c[1]=l=>t("vueOne002")),class:"leftNavText"},"什麼是MVVM"),n("div",{onClick:c[2]||(c[2]=l=>t("vueOne003")),class:"leftNavText"}," MVVM和MVC和MVP區別 "),n("div",{onClick:c[3]||(c[3]=l=>t("vueOne004")),class:"leftNavText"}," 響應式數據的理解 "),n("div",{onClick:c[4]||(c[4]=l=>t("vueOne005")),class:"leftNavText"}," 事件綁定原理 "),n("div",{onClick:c[5]||(c[5]=l=>t("vueOne006")),class:"leftNavText"}," 雙向綁定使用和原理 "),n("div",{onClick:c[6]||(c[6]=l=>t("vueOne007")),class:"leftNavText"},"依賴收集"),n("div",{onClick:c[7]||(c[7]=l=>t("vueOne008")),class:"leftNavText"},"異步組件"),n("div",{onClick:c[8]||(c[8]=l=>t("vueOne009")),class:"leftNavText"},"nextTick"),n("div",{onClick:c[9]||(c[9]=l=>t("vueOne010")),class:"leftNavText"},"虛擬 DOM"),n("div",{onClick:c[10]||(c[10]=l=>t("vueOne011")),class:"leftNavText"},"diff 算法"),n("div",{onClick:c[11]||(c[11]=l=>t("vueOne012")),class:"leftNavText"},"生命週期"),n("div",{onClick:c[12]||(c[12]=l=>t("vueOne013")),class:"leftNavText"}," v-if v-for 優先級 "),n("div",{onClick:c[13]||(c[13]=l=>t("vueOne014")),class:"leftNavText"}," v-show v-if "),n("div",{onClick:c[14]||(c[14]=l=>t("vueOne015")),class:"leftNavText"}," v-for中key的作用 "),n("div",{onClick:c[15]||(c[15]=l=>t("vueOne016")),class:"leftNavText"},"權限管理"),n("div",{onClick:c[16]||(c[16]=l=>t("vueOne017")),class:"leftNavText"}," Vue性能優化 "),n("div",{onClick:c[17]||(c[17]=l=>t("vueOne018")),class:"leftNavText"},"SPA"),n("div",{onClick:c[18]||(c[18]=l=>t("vueOne019")),class:"leftNavText"}," Watch 和 computed 區別 "),n("div",{onClick:c[19]||(c[19]=l=>t("vueOne020")),class:"leftNavText"}," ref 和 reactive 區別 "),n("div",{onClick:c[20]||(c[20]=l=>t("vueOne021")),class:"leftNavText"}," 組件化 的理解 "),n("div",{onClick:c[21]||(c[21]=l=>t("vueOne022")),class:"leftNavText"}," vue 組件通信 "),n("div",{onClick:c[22]||(c[22]=l=>t("vueOne01")),class:"leftNavText"}),n("div",{onClick:c[23]||(c[23]=l=>t("vueOne01")),class:"leftNavText"})])])]),qo]),n("div",null,[W(k(B,{name:"fade",tag:"div"},{default:S(()=>[n("div",{onClick:d,class:"toTop"},So)]),_:1},512),[[U,s.value]]),W(k(B,{name:"fade",tag:"div"},{default:S(()=>[n("div",{onClick:v,class:"toBot"},Co)]),_:1},512),[[U,s.value]])])],64))}},Lo=pa(xo,[["__scopeId","data-v-84e39b94"]]),jo=pb({history:Sl("/vue-learn-js/"),routes:[{path:"/",component:Rb,children:[{path:"",component:sv},{path:"vue",component:Lo},{path:"about",component:gr},{path:"http",component:Mr},{path:"html",component:Ur},{path:"css",component:Yr,children:[{path:"",component:f3},{path:"pagetwo",component:g3}]},{path:"js",component:q3,children:[{path:"jsnote",component:U3},{path:"jspractice",component:Y3,children:[{path:"",component:pi},{path:"two",component:ui},{path:"three",component:Ti}]},{path:"",component:Pi,children:[{path:"",component:Hi},{path:"function",component:hf},{path:"destructuringassignment",component:xf},{path:"method",component:Gf},{path:"object",component:r8},{path:"prototype",component:T8},{path:"tips",component:I8},{path:"dom",component:Y8},{path:"ajax",component:po},{path:"other",component:ho}]}]}]},{path:"/:pathMatch(.*)*",component:sv}],scrollBehavior(){return{top:0}}}),Qt=tl(bb);Qt.use(el());Qt.use(jo);Qt.mount("#app");
