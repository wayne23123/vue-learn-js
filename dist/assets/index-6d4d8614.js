(function(){const s=document.createElement("link").relList;if(s&&s.supports&&s.supports("modulepreload"))return;for(const t of document.querySelectorAll('link[rel="modulepreload"]'))n(t);new MutationObserver(t=>{for(const c of t)if(c.type==="childList")for(const e of c.addedNodes)e.tagName==="LINK"&&e.rel==="modulepreload"&&n(e)}).observe(document,{childList:!0,subtree:!0});function d(t){const c={};return t.integrity&&(c.integrity=t.integrity),t.referrerPolicy&&(c.referrerPolicy=t.referrerPolicy),t.crossOrigin==="use-credentials"?c.credentials="include":t.crossOrigin==="anonymous"?c.credentials="omit":c.credentials="same-origin",c}function n(t){if(t.ep)return;t.ep=!0;const c=d(t);fetch(t.href,c)}})();function Ct(a,s){const d=Object.create(null),n=a.split(",");for(let t=0;t<n.length;t++)d[n[t]]=!0;return s?t=>!!d[t.toLowerCase()]:t=>!!d[t]}const ba={},Fs=[],Da=()=>{},Cv=()=>!1,xv=/^on[^a-z]/,Od=a=>xv.test(a),xt=a=>a.startsWith("onUpdate:"),_a=Object.assign,Lt=(a,s)=>{const d=a.indexOf(s);d>-1&&a.splice(d,1)},Lv=Object.prototype.hasOwnProperty,G=(a,s)=>Lv.call(a,s),R=Array.isArray,Is=a=>$d(a)==="[object Map]",de=a=>$d(a)==="[object Set]",B=a=>typeof a=="function",qa=a=>typeof a=="string",jt=a=>typeof a=="symbol",wa=a=>a!==null&&typeof a=="object",te=a=>wa(a)&&B(a.then)&&B(a.catch),ne=Object.prototype.toString,$d=a=>ne.call(a),jv=a=>$d(a).slice(8,-1),ee=a=>$d(a)==="[object Object]",Pt=a=>qa(a)&&a!=="NaN"&&a[0]!=="-"&&""+parseInt(a,10)===a,_d=Ct(",key,ref,ref_for,ref_key,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted"),Ed=a=>{const s=Object.create(null);return d=>s[d]||(s[d]=a(d))},Pv=/-(\w)/g,Za=Ed(a=>a.replace(Pv,(s,d)=>d?d.toUpperCase():"")),Vv=/\B([A-Z])/g,Us=Ed(a=>a.replace(Vv,"-$1").toLowerCase()),Ad=Ed(a=>a.charAt(0).toUpperCase()+a.slice(1)),Qd=Ed(a=>a?`on${Ad(a)}`:""),pd=(a,s)=>!Object.is(a,s),Zd=(a,s)=>{for(let d=0;d<a.length;d++)a[d](s)},xd=(a,s,d)=>{Object.defineProperty(a,s,{configurable:!0,enumerable:!1,value:d})},Nv=a=>{const s=parseFloat(a);return isNaN(s)?a:s},Ov=a=>{const s=qa(a)?Number(a):NaN;return isNaN(s)?a:s};let sn;const lt=()=>sn||(sn=typeof globalThis<"u"?globalThis:typeof self<"u"?self:typeof window<"u"?window:typeof global<"u"?global:{});function Vt(a){if(R(a)){const s={};for(let d=0;d<a.length;d++){const n=a[d],t=qa(n)?Mv(n):Vt(n);if(t)for(const c in t)s[c]=t[c]}return s}else{if(qa(a))return a;if(wa(a))return a}}const $v=/;(?![^(]*\))/g,Ev=/:([^]+)/,Av=/\/\*[^]*?\*\//g;function Mv(a){const s={};return a.replace(Av,"").split($v).forEach(d=>{if(d){const n=d.split(Ev);n.length>1&&(s[n[0].trim()]=n[1].trim())}}),s}function Md(a){let s="";if(qa(a))s=a;else if(R(a))for(let d=0;d<a.length;d++){const n=Md(a[d]);n&&(s+=n+" ")}else if(wa(a))for(const d in a)a[d]&&(s+=d+" ");return s.trim()}const Fv="itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly",Iv=Ct(Fv);function ve(a){return!!a||a===""}const Rv=a=>qa(a)?a:a==null?"":R(a)||wa(a)&&(a.toString===ne||!B(a.toString))?JSON.stringify(a,ce,2):String(a),ce=(a,s)=>s&&s.__v_isRef?ce(a,s.value):Is(s)?{[`Map(${s.size})`]:[...s.entries()].reduce((d,[n,t])=>(d[`${n} =>`]=t,d),{})}:de(s)?{[`Set(${s.size})`]:[...s.values()]}:wa(s)&&!R(s)&&!ee(s)?String(s):s;let Ra;class pe{constructor(s=!1){this.detached=s,this._active=!0,this.effects=[],this.cleanups=[],this.parent=Ra,!s&&Ra&&(this.index=(Ra.scopes||(Ra.scopes=[])).push(this)-1)}get active(){return this._active}run(s){if(this._active){const d=Ra;try{return Ra=this,s()}finally{Ra=d}}}on(){Ra=this}off(){Ra=this.parent}stop(s){if(this._active){let d,n;for(d=0,n=this.effects.length;d<n;d++)this.effects[d].stop();for(d=0,n=this.cleanups.length;d<n;d++)this.cleanups[d]();if(this.scopes)for(d=0,n=this.scopes.length;d<n;d++)this.scopes[d].stop(!0);if(!this.detached&&this.parent&&!s){const t=this.parent.scopes.pop();t&&t!==this&&(this.parent.scopes[this.index]=t,t.index=this.index)}this.parent=void 0,this._active=!1}}}function Hv(a){return new pe(a)}function Bv(a,s=Ra){s&&s.active&&s.effects.push(a)}function Jv(){return Ra}const Nt=a=>{const s=new Set(a);return s.w=0,s.n=0,s},le=a=>(a.w&ks)>0,ie=a=>(a.n&ks)>0,Dv=({deps:a})=>{if(a.length)for(let s=0;s<a.length;s++)a[s].w|=ks},Wv=a=>{const{deps:s}=a;if(s.length){let d=0;for(let n=0;n<s.length;n++){const t=s[n];le(t)&&!ie(t)?t.delete(a):s[d++]=t,t.w&=~ks,t.n&=~ks}s.length=d}},it=new WeakMap;let dd=0,ks=1;const rt=30;let Ha;const Ps=Symbol(""),ot=Symbol("");class Ot{constructor(s,d=null,n){this.fn=s,this.scheduler=d,this.active=!0,this.deps=[],this.parent=void 0,Bv(this,n)}run(){if(!this.active)return this.fn();let s=Ha,d=ms;for(;s;){if(s===this)return;s=s.parent}try{return this.parent=Ha,Ha=this,ms=!0,ks=1<<++dd,dd<=rt?Dv(this):dn(this),this.fn()}finally{dd<=rt&&Wv(this),ks=1<<--dd,Ha=this.parent,ms=d,this.parent=void 0,this.deferStop&&this.stop()}}stop(){Ha===this?this.deferStop=!0:this.active&&(dn(this),this.onStop&&this.onStop(),this.active=!1)}}function dn(a){const{deps:s}=a;if(s.length){for(let d=0;d<s.length;d++)s[d].delete(a);s.length=0}}let ms=!0;const re=[];function Ks(){re.push(ms),ms=!1}function Xs(){const a=re.pop();ms=a===void 0?!0:a}function $a(a,s,d){if(ms&&Ha){let n=it.get(a);n||it.set(a,n=new Map);let t=n.get(d);t||n.set(d,t=Nt()),oe(t)}}function oe(a,s){let d=!1;dd<=rt?ie(a)||(a.n|=ks,d=!le(a)):d=!a.has(Ha),d&&(a.add(Ha),Ha.deps.push(a))}function vs(a,s,d,n,t,c){const e=it.get(a);if(!e)return;let l=[];if(s==="clear")l=[...e.values()];else if(d==="length"&&R(a)){const p=Number(n);e.forEach((r,o)=>{(o==="length"||o>=p)&&l.push(r)})}else switch(d!==void 0&&l.push(e.get(d)),s){case"add":R(a)?Pt(d)&&l.push(e.get("length")):(l.push(e.get(Ps)),Is(a)&&l.push(e.get(ot)));break;case"delete":R(a)||(l.push(e.get(Ps)),Is(a)&&l.push(e.get(ot)));break;case"set":Is(a)&&l.push(e.get(Ps));break}if(l.length===1)l[0]&&ft(l[0]);else{const p=[];for(const r of l)r&&p.push(...r);ft(Nt(p))}}function ft(a,s){const d=R(a)?a:[...a];for(const n of d)n.computed&&tn(n);for(const n of d)n.computed||tn(n)}function tn(a,s){(a!==Ha||a.allowRecurse)&&(a.scheduler?a.scheduler():a.run())}const Uv=Ct("__proto__,__v_isRef,__isVue"),fe=new Set(Object.getOwnPropertyNames(Symbol).filter(a=>a!=="arguments"&&a!=="caller").map(a=>Symbol[a]).filter(jt)),Kv=$t(),Xv=$t(!1,!0),Yv=$t(!0),nn=Gv();function Gv(){const a={};return["includes","indexOf","lastIndexOf"].forEach(s=>{a[s]=function(...d){const n=Z(this);for(let c=0,e=this.length;c<e;c++)$a(n,"get",c+"");const t=n[s](...d);return t===-1||t===!1?n[s](...d.map(Z)):t}}),["push","pop","shift","unshift","splice"].forEach(s=>{a[s]=function(...d){Ks();const n=Z(this)[s].apply(this,d);return Xs(),n}}),a}function Qv(a){const s=Z(this);return $a(s,"has",a),s.hasOwnProperty(a)}function $t(a=!1,s=!1){return function(n,t,c){if(t==="__v_isReactive")return!a;if(t==="__v_isReadonly")return a;if(t==="__v_isShallow")return s;if(t==="__v_raw"&&c===(a?s?bc:he:s?me:we).get(n))return n;const e=R(n);if(!a){if(e&&G(nn,t))return Reflect.get(nn,t,c);if(t==="hasOwnProperty")return Qv}const l=Reflect.get(n,t,c);return(jt(t)?fe.has(t):Uv(t))||(a||$a(n,"get",t),s)?l:ja(l)?e&&Pt(t)?l:l.value:wa(l)?a?ge(l):Id(l):l}}const Zv=be(),ac=be(!0);function be(a=!1){return function(d,n,t,c){let e=d[n];if(Bs(e)&&ja(e)&&!ja(t))return!1;if(!a&&(!Ld(t)&&!Bs(t)&&(e=Z(e),t=Z(t)),!R(d)&&ja(e)&&!ja(t)))return e.value=t,!0;const l=R(d)&&Pt(n)?Number(n)<d.length:G(d,n),p=Reflect.set(d,n,t,c);return d===Z(c)&&(l?pd(t,e)&&vs(d,"set",n,t):vs(d,"add",n,t)),p}}function sc(a,s){const d=G(a,s);a[s];const n=Reflect.deleteProperty(a,s);return n&&d&&vs(a,"delete",s,void 0),n}function dc(a,s){const d=Reflect.has(a,s);return(!jt(s)||!fe.has(s))&&$a(a,"has",s),d}function tc(a){return $a(a,"iterate",R(a)?"length":Ps),Reflect.ownKeys(a)}const ue={get:Kv,set:Zv,deleteProperty:sc,has:dc,ownKeys:tc},nc={get:Yv,set(a,s){return!0},deleteProperty(a,s){return!0}},ec=_a({},ue,{get:Xv,set:ac}),Et=a=>a,Fd=a=>Reflect.getPrototypeOf(a);function wd(a,s,d=!1,n=!1){a=a.__v_raw;const t=Z(a),c=Z(s);d||(s!==c&&$a(t,"get",s),$a(t,"get",c));const{has:e}=Fd(t),l=n?Et:d?It:ld;if(e.call(t,s))return l(a.get(s));if(e.call(t,c))return l(a.get(c));a!==t&&a.get(s)}function md(a,s=!1){const d=this.__v_raw,n=Z(d),t=Z(a);return s||(a!==t&&$a(n,"has",a),$a(n,"has",t)),a===t?d.has(a):d.has(a)||d.has(t)}function hd(a,s=!1){return a=a.__v_raw,!s&&$a(Z(a),"iterate",Ps),Reflect.get(a,"size",a)}function en(a){a=Z(a);const s=Z(this);return Fd(s).has.call(s,a)||(s.add(a),vs(s,"add",a,a)),this}function vn(a,s){s=Z(s);const d=Z(this),{has:n,get:t}=Fd(d);let c=n.call(d,a);c||(a=Z(a),c=n.call(d,a));const e=t.call(d,a);return d.set(a,s),c?pd(s,e)&&vs(d,"set",a,s):vs(d,"add",a,s),this}function cn(a){const s=Z(this),{has:d,get:n}=Fd(s);let t=d.call(s,a);t||(a=Z(a),t=d.call(s,a)),n&&n.call(s,a);const c=s.delete(a);return t&&vs(s,"delete",a,void 0),c}function pn(){const a=Z(this),s=a.size!==0,d=a.clear();return s&&vs(a,"clear",void 0,void 0),d}function kd(a,s){return function(n,t){const c=this,e=c.__v_raw,l=Z(e),p=s?Et:a?It:ld;return!a&&$a(l,"iterate",Ps),e.forEach((r,o)=>n.call(t,p(r),p(o),c))}}function gd(a,s,d){return function(...n){const t=this.__v_raw,c=Z(t),e=Is(c),l=a==="entries"||a===Symbol.iterator&&e,p=a==="keys"&&e,r=t[a](...n),o=d?Et:s?It:ld;return!s&&$a(c,"iterate",p?ot:Ps),{next(){const{value:b,done:w}=r.next();return w?{value:b,done:w}:{value:l?[o(b[0]),o(b[1])]:o(b),done:w}},[Symbol.iterator](){return this}}}}function rs(a){return function(...s){return a==="delete"?!1:this}}function vc(){const a={get(c){return wd(this,c)},get size(){return hd(this)},has:md,add:en,set:vn,delete:cn,clear:pn,forEach:kd(!1,!1)},s={get(c){return wd(this,c,!1,!0)},get size(){return hd(this)},has:md,add:en,set:vn,delete:cn,clear:pn,forEach:kd(!1,!0)},d={get(c){return wd(this,c,!0)},get size(){return hd(this,!0)},has(c){return md.call(this,c,!0)},add:rs("add"),set:rs("set"),delete:rs("delete"),clear:rs("clear"),forEach:kd(!0,!1)},n={get(c){return wd(this,c,!0,!0)},get size(){return hd(this,!0)},has(c){return md.call(this,c,!0)},add:rs("add"),set:rs("set"),delete:rs("delete"),clear:rs("clear"),forEach:kd(!0,!0)};return["keys","values","entries",Symbol.iterator].forEach(c=>{a[c]=gd(c,!1,!1),d[c]=gd(c,!0,!1),s[c]=gd(c,!1,!0),n[c]=gd(c,!0,!0)}),[a,d,s,n]}const[cc,pc,lc,ic]=vc();function At(a,s){const d=s?a?ic:lc:a?pc:cc;return(n,t,c)=>t==="__v_isReactive"?!a:t==="__v_isReadonly"?a:t==="__v_raw"?n:Reflect.get(G(d,t)&&t in n?d:n,t,c)}const rc={get:At(!1,!1)},oc={get:At(!1,!0)},fc={get:At(!0,!1)},we=new WeakMap,me=new WeakMap,he=new WeakMap,bc=new WeakMap;function uc(a){switch(a){case"Object":case"Array":return 1;case"Map":case"Set":case"WeakMap":case"WeakSet":return 2;default:return 0}}function wc(a){return a.__v_skip||!Object.isExtensible(a)?0:uc(jv(a))}function Id(a){return Bs(a)?a:Mt(a,!1,ue,rc,we)}function ke(a){return Mt(a,!1,ec,oc,me)}function ge(a){return Mt(a,!0,nc,fc,he)}function Mt(a,s,d,n,t){if(!wa(a)||a.__v_raw&&!(s&&a.__v_isReactive))return a;const c=t.get(a);if(c)return c;const e=wc(a);if(e===0)return a;const l=new Proxy(a,e===2?n:d);return t.set(a,l),l}function Rs(a){return Bs(a)?Rs(a.__v_raw):!!(a&&a.__v_isReactive)}function Bs(a){return!!(a&&a.__v_isReadonly)}function Ld(a){return!!(a&&a.__v_isShallow)}function Te(a){return Rs(a)||Bs(a)}function Z(a){const s=a&&a.__v_raw;return s?Z(s):a}function Ft(a){return xd(a,"__v_skip",!0),a}const ld=a=>wa(a)?Id(a):a,It=a=>wa(a)?ge(a):a;function _e(a){ms&&Ha&&(a=Z(a),oe(a.dep||(a.dep=Nt())))}function ze(a,s){a=Z(a);const d=a.dep;d&&ft(d)}function ja(a){return!!(a&&a.__v_isRef===!0)}function ua(a){return Se(a,!1)}function mc(a){return Se(a,!0)}function Se(a,s){return ja(a)?a:new hc(a,s)}class hc{constructor(s,d){this.__v_isShallow=d,this.dep=void 0,this.__v_isRef=!0,this._rawValue=d?s:Z(s),this._value=d?s:ld(s)}get value(){return _e(this),this._value}set value(s){const d=this.__v_isShallow||Ld(s)||Bs(s);s=d?s:Z(s),pd(s,this._rawValue)&&(this._rawValue=s,this._value=d?s:ld(s),ze(this))}}function Vs(a){return ja(a)?a.value:a}const kc={get:(a,s,d)=>Vs(Reflect.get(a,s,d)),set:(a,s,d,n)=>{const t=a[s];return ja(t)&&!ja(d)?(t.value=d,!0):Reflect.set(a,s,d,n)}};function qe(a){return Rs(a)?a:new Proxy(a,kc)}class gc{constructor(s,d,n,t){this._setter=d,this.dep=void 0,this.__v_isRef=!0,this.__v_isReadonly=!1,this._dirty=!0,this.effect=new Ot(s,()=>{this._dirty||(this._dirty=!0,ze(this))}),this.effect.computed=this,this.effect.active=this._cacheable=!t,this.__v_isReadonly=n}get value(){const s=Z(this);return _e(s),(s._dirty||!s._cacheable)&&(s._dirty=!1,s._value=s.effect.run()),s._value}set value(s){this._setter(s)}}function Tc(a,s,d=!1){let n,t;const c=B(a);return c?(n=a,t=Da):(n=a.get,t=a.set),new gc(n,t,c||!t,d)}function hs(a,s,d,n){let t;try{t=n?a(...n):a()}catch(c){Rd(c,s,d)}return t}function Fa(a,s,d,n){if(B(a)){const c=hs(a,s,d,n);return c&&te(c)&&c.catch(e=>{Rd(e,s,d)}),c}const t=[];for(let c=0;c<a.length;c++)t.push(Fa(a[c],s,d,n));return t}function Rd(a,s,d,n=!0){const t=s?s.vnode:null;if(s){let c=s.parent;const e=s.proxy,l=d;for(;c;){const r=c.ec;if(r){for(let o=0;o<r.length;o++)if(r[o](a,e,l)===!1)return}c=c.parent}const p=s.appContext.config.errorHandler;if(p){hs(p,null,10,[a,e,l]);return}}_c(a,d,t,n)}function _c(a,s,d,n=!0){console.error(a)}let id=!1,bt=!1;const La=[];let Qa=0;const Hs=[];let ns=null,Cs=0;const ye=Promise.resolve();let Rt=null;function Ce(a){const s=Rt||ye;return a?s.then(this?a.bind(this):a):s}function zc(a){let s=Qa+1,d=La.length;for(;s<d;){const n=s+d>>>1;rd(La[n])<a?s=n+1:d=n}return s}function Ht(a){(!La.length||!La.includes(a,id&&a.allowRecurse?Qa+1:Qa))&&(a.id==null?La.push(a):La.splice(zc(a.id),0,a),xe())}function xe(){!id&&!bt&&(bt=!0,Rt=ye.then(je))}function Sc(a){const s=La.indexOf(a);s>Qa&&La.splice(s,1)}function qc(a){R(a)?Hs.push(...a):(!ns||!ns.includes(a,a.allowRecurse?Cs+1:Cs))&&Hs.push(a),xe()}function ln(a,s=id?Qa+1:0){for(;s<La.length;s++){const d=La[s];d&&d.pre&&(La.splice(s,1),s--,d())}}function Le(a){if(Hs.length){const s=[...new Set(Hs)];if(Hs.length=0,ns){ns.push(...s);return}for(ns=s,ns.sort((d,n)=>rd(d)-rd(n)),Cs=0;Cs<ns.length;Cs++)ns[Cs]();ns=null,Cs=0}}const rd=a=>a.id==null?1/0:a.id,yc=(a,s)=>{const d=rd(a)-rd(s);if(d===0){if(a.pre&&!s.pre)return-1;if(s.pre&&!a.pre)return 1}return d};function je(a){bt=!1,id=!0,La.sort(yc);const s=Da;try{for(Qa=0;Qa<La.length;Qa++){const d=La[Qa];d&&d.active!==!1&&hs(d,null,14)}}finally{Qa=0,La.length=0,Le(),id=!1,Rt=null,(La.length||Hs.length)&&je()}}function Cc(a,s,...d){if(a.isUnmounted)return;const n=a.vnode.props||ba;let t=d;const c=s.startsWith("update:"),e=c&&s.slice(7);if(e&&e in n){const o=`${e==="modelValue"?"model":e}Modifiers`,{number:b,trim:w}=n[o]||ba;w&&(t=d.map(g=>qa(g)?g.trim():g)),b&&(t=d.map(Nv))}let l,p=n[l=Qd(s)]||n[l=Qd(Za(s))];!p&&c&&(p=n[l=Qd(Us(s))]),p&&Fa(p,a,6,t);const r=n[l+"Once"];if(r){if(!a.emitted)a.emitted={};else if(a.emitted[l])return;a.emitted[l]=!0,Fa(r,a,6,t)}}function Pe(a,s,d=!1){const n=s.emitsCache,t=n.get(a);if(t!==void 0)return t;const c=a.emits;let e={},l=!1;if(!B(a)){const p=r=>{const o=Pe(r,s,!0);o&&(l=!0,_a(e,o))};!d&&s.mixins.length&&s.mixins.forEach(p),a.extends&&p(a.extends),a.mixins&&a.mixins.forEach(p)}return!c&&!l?(wa(a)&&n.set(a,null),null):(R(c)?c.forEach(p=>e[p]=null):_a(e,c),wa(a)&&n.set(a,e),e)}function Hd(a,s){return!a||!Od(s)?!1:(s=s.slice(2).replace(/Once$/,""),G(a,s[0].toLowerCase()+s.slice(1))||G(a,Us(s))||G(a,s))}let Aa=null,Bd=null;function jd(a){const s=Aa;return Aa=a,Bd=a&&a.type.__scopeId||null,s}function ma(a){Bd=a}function ha(){Bd=null}function C(a,s=Aa,d){if(!s||a._n)return a;const n=(...t)=>{n._d&&_n(-1);const c=jd(s);let e;try{e=a(...t)}finally{jd(c),n._d&&_n(1)}return e};return n._n=!0,n._c=!0,n._d=!0,n}function at(a){const{type:s,vnode:d,proxy:n,withProxy:t,props:c,propsOptions:[e],slots:l,attrs:p,emit:r,render:o,renderCache:b,data:w,setupState:g,ctx:L,inheritAttrs:j}=a;let I,N;const E=jd(a);try{if(d.shapeFlag&4){const O=t||n;I=Ga(o.call(O,O,b,c,g,w,L)),N=p}else{const O=s;I=Ga(O.length>1?O(c,{attrs:p,slots:l,emit:r}):O(c,null)),N=s.props?p:xc(p)}}catch(O){ed.length=0,Rd(O,a,1),I=T(Wa)}let D=I;if(N&&j!==!1){const O=Object.keys(N),{shapeFlag:la}=D;O.length&&la&7&&(e&&O.some(xt)&&(N=Lc(N,e)),D=gs(D,N))}return d.dirs&&(D=gs(D),D.dirs=D.dirs?D.dirs.concat(d.dirs):d.dirs),d.transition&&(D.transition=d.transition),I=D,jd(E),I}const xc=a=>{let s;for(const d in a)(d==="class"||d==="style"||Od(d))&&((s||(s={}))[d]=a[d]);return s},Lc=(a,s)=>{const d={};for(const n in a)(!xt(n)||!(n.slice(9)in s))&&(d[n]=a[n]);return d};function jc(a,s,d){const{props:n,children:t,component:c}=a,{props:e,children:l,patchFlag:p}=s,r=c.emitsOptions;if(s.dirs||s.transition)return!0;if(d&&p>=0){if(p&1024)return!0;if(p&16)return n?rn(n,e,r):!!e;if(p&8){const o=s.dynamicProps;for(let b=0;b<o.length;b++){const w=o[b];if(e[w]!==n[w]&&!Hd(r,w))return!0}}}else return(t||l)&&(!l||!l.$stable)?!0:n===e?!1:n?e?rn(n,e,r):!0:!!e;return!1}function rn(a,s,d){const n=Object.keys(s);if(n.length!==Object.keys(a).length)return!0;for(let t=0;t<n.length;t++){const c=n[t];if(s[c]!==a[c]&&!Hd(d,c))return!0}return!1}function Pc({vnode:a,parent:s},d){for(;s&&s.subTree===a;)(a=s.vnode).el=d,s=s.parent}const Vc=a=>a.__isSuspense;function Nc(a,s){s&&s.pendingBranch?R(a)?s.effects.push(...a):s.effects.push(a):qc(a)}const Td={};function zd(a,s,d){return Ve(a,s,d)}function Ve(a,s,{immediate:d,deep:n,flush:t,onTrack:c,onTrigger:e}=ba){var l;const p=Jv()===((l=ya)==null?void 0:l.scope)?ya:null;let r,o=!1,b=!1;if(ja(a)?(r=()=>a.value,o=Ld(a)):Rs(a)?(r=()=>a,n=!0):R(a)?(b=!0,o=a.some(O=>Rs(O)||Ld(O)),r=()=>a.map(O=>{if(ja(O))return O.value;if(Rs(O))return js(O);if(B(O))return hs(O,p,2)})):B(a)?s?r=()=>hs(a,p,2):r=()=>{if(!(p&&p.isUnmounted))return w&&w(),Fa(a,p,3,[g])}:r=Da,s&&n){const O=r;r=()=>js(O())}let w,g=O=>{w=E.onStop=()=>{hs(O,p,4)}},L;if(fd)if(g=Da,s?d&&Fa(s,p,3,[r(),b?[]:void 0,g]):r(),t==="sync"){const O=Lp();L=O.__watcherHandles||(O.__watcherHandles=[])}else return Da;let j=b?new Array(a.length).fill(Td):Td;const I=()=>{if(E.active)if(s){const O=E.run();(n||o||(b?O.some((la,ga)=>pd(la,j[ga])):pd(O,j)))&&(w&&w(),Fa(s,p,3,[O,j===Td?void 0:b&&j[0]===Td?[]:j,g]),j=O)}else E.run()};I.allowRecurse=!!s;let N;t==="sync"?N=I:t==="post"?N=()=>Oa(I,p&&p.suspense):(I.pre=!0,p&&(I.id=p.uid),N=()=>Ht(I));const E=new Ot(r,N);s?d?I():j=E.run():t==="post"?Oa(E.run.bind(E),p&&p.suspense):E.run();const D=()=>{E.stop(),p&&p.scope&&Lt(p.scope.effects,E)};return L&&L.push(D),D}function Oc(a,s,d){const n=this.proxy,t=qa(a)?a.includes(".")?Ne(n,a):()=>n[a]:a.bind(n,n);let c;B(s)?c=s:(c=s.handler,d=s);const e=ya;Js(this);const l=Ve(t,c.bind(n),d);return e?Js(e):Ns(),l}function Ne(a,s){const d=s.split(".");return()=>{let n=a;for(let t=0;t<d.length&&n;t++)n=n[d[t]];return n}}function js(a,s){if(!wa(a)||a.__v_skip||(s=s||new Set,s.has(a)))return a;if(s.add(a),ja(a))js(a.value,s);else if(R(a))for(let d=0;d<a.length;d++)js(a[d],s);else if(de(a)||Is(a))a.forEach(d=>{js(d,s)});else if(ee(a))for(const d in a)js(a[d],s);return a}function X(a,s){const d=Aa;if(d===null)return a;const n=Kd(d)||d.proxy,t=a.dirs||(a.dirs=[]);for(let c=0;c<s.length;c++){let[e,l,p,r=ba]=s[c];e&&(B(e)&&(e={mounted:e,updated:e}),e.deep&&js(l),t.push({dir:e,instance:n,value:l,oldValue:void 0,arg:p,modifiers:r}))}return a}function zs(a,s,d,n){const t=a.dirs,c=s&&s.dirs;for(let e=0;e<t.length;e++){const l=t[e];c&&(l.oldValue=c[e].value);let p=l.dir[n];p&&(Ks(),Fa(p,d,8,[a.el,l,a,s]),Xs())}}function $c(){const a={isMounted:!1,isLeaving:!1,isUnmounting:!1,leavingVNodes:new Map};return Fe(()=>{a.isMounted=!0}),Ie(()=>{a.isUnmounting=!0}),a}const Ma=[Function,Array],Oe={mode:String,appear:Boolean,persisted:Boolean,onBeforeEnter:Ma,onEnter:Ma,onAfterEnter:Ma,onEnterCancelled:Ma,onBeforeLeave:Ma,onLeave:Ma,onAfterLeave:Ma,onLeaveCancelled:Ma,onBeforeAppear:Ma,onAppear:Ma,onAfterAppear:Ma,onAppearCancelled:Ma},Ec={name:"BaseTransition",props:Oe,setup(a,{slots:s}){const d=Tp(),n=$c();let t;return()=>{const c=s.default&&Ee(s.default(),!0);if(!c||!c.length)return;let e=c[0];if(c.length>1){for(const j of c)if(j.type!==Wa){e=j;break}}const l=Z(a),{mode:p}=l;if(n.isLeaving)return st(e);const r=on(e);if(!r)return st(e);const o=ut(r,l,n,d);wt(r,o);const b=d.subTree,w=b&&on(b);let g=!1;const{getTransitionKey:L}=r.type;if(L){const j=L();t===void 0?t=j:j!==t&&(t=j,g=!0)}if(w&&w.type!==Wa&&(!xs(r,w)||g)){const j=ut(w,l,n,d);if(wt(w,j),p==="out-in")return n.isLeaving=!0,j.afterLeave=()=>{n.isLeaving=!1,d.update.active!==!1&&d.update()},st(e);p==="in-out"&&r.type!==Wa&&(j.delayLeave=(I,N,E)=>{const D=$e(n,w);D[String(w.key)]=w,I._leaveCb=()=>{N(),I._leaveCb=void 0,delete o.delayedLeave},o.delayedLeave=E})}return e}}},Ac=Ec;function $e(a,s){const{leavingVNodes:d}=a;let n=d.get(s.type);return n||(n=Object.create(null),d.set(s.type,n)),n}function ut(a,s,d,n){const{appear:t,mode:c,persisted:e=!1,onBeforeEnter:l,onEnter:p,onAfterEnter:r,onEnterCancelled:o,onBeforeLeave:b,onLeave:w,onAfterLeave:g,onLeaveCancelled:L,onBeforeAppear:j,onAppear:I,onAfterAppear:N,onAppearCancelled:E}=s,D=String(a.key),O=$e(d,a),la=(J,oa)=>{J&&Fa(J,n,9,oa)},ga=(J,oa)=>{const ea=oa[1];la(J,oa),R(J)?J.every(Sa=>Sa.length<=1)&&ea():J.length<=1&&ea()},Ca={mode:c,persisted:e,beforeEnter(J){let oa=l;if(!d.isMounted)if(t)oa=j||l;else return;J._leaveCb&&J._leaveCb(!0);const ea=O[D];ea&&xs(a,ea)&&ea.el._leaveCb&&ea.el._leaveCb(),la(oa,[J])},enter(J){let oa=p,ea=r,Sa=o;if(!d.isMounted)if(t)oa=I||p,ea=N||r,Sa=E||o;else return;let $=!1;const ta=J._enterCb=Pa=>{$||($=!0,Pa?la(Sa,[J]):la(ea,[J]),Ca.delayedLeave&&Ca.delayedLeave(),J._enterCb=void 0)};oa?ga(oa,[J,ta]):ta()},leave(J,oa){const ea=String(a.key);if(J._enterCb&&J._enterCb(!0),d.isUnmounting)return oa();la(b,[J]);let Sa=!1;const $=J._leaveCb=ta=>{Sa||(Sa=!0,oa(),ta?la(L,[J]):la(g,[J]),J._leaveCb=void 0,O[ea]===a&&delete O[ea])};O[ea]=a,w?ga(w,[J,$]):$()},clone(J){return ut(J,s,d,n)}};return Ca}function st(a){if(Jd(a))return a=gs(a),a.children=null,a}function on(a){return Jd(a)?a.children?a.children[0]:void 0:a}function wt(a,s){a.shapeFlag&6&&a.component?wt(a.component.subTree,s):a.shapeFlag&128?(a.ssContent.transition=s.clone(a.ssContent),a.ssFallback.transition=s.clone(a.ssFallback)):a.transition=s}function Ee(a,s=!1,d){let n=[],t=0;for(let c=0;c<a.length;c++){let e=a[c];const l=d==null?e.key:String(d)+String(e.key!=null?e.key:c);e.type===Q?(e.patchFlag&128&&t++,n=n.concat(Ee(e.children,s,l))):(s||e.type!==Wa)&&n.push(l!=null?gs(e,{key:l}):e)}if(t>1)for(let c=0;c<n.length;c++)n[c].patchFlag=-2;return n}function Ae(a,s){return B(a)?(()=>_a({name:a.name},s,{setup:a}))():a}const Sd=a=>!!a.type.__asyncLoader,Jd=a=>a.type.__isKeepAlive;function Mc(a,s){Me(a,"a",s)}function Fc(a,s){Me(a,"da",s)}function Me(a,s,d=ya){const n=a.__wdc||(a.__wdc=()=>{let t=d;for(;t;){if(t.isDeactivated)return;t=t.parent}return a()});if(Dd(s,n,d),d){let t=d.parent;for(;t&&t.parent;)Jd(t.parent.vnode)&&Ic(n,s,d,t),t=t.parent}}function Ic(a,s,d,n){const t=Dd(s,a,n,!0);Re(()=>{Lt(n[s],t)},d)}function Dd(a,s,d=ya,n=!1){if(d){const t=d[a]||(d[a]=[]),c=s.__weh||(s.__weh=(...e)=>{if(d.isUnmounted)return;Ks(),Js(d);const l=Fa(s,d,a,e);return Ns(),Xs(),l});return n?t.unshift(c):t.push(c),c}}const cs=a=>(s,d=ya)=>(!fd||a==="sp")&&Dd(a,(...n)=>s(...n),d),Rc=cs("bm"),Fe=cs("m"),Hc=cs("bu"),Bc=cs("u"),Ie=cs("bum"),Re=cs("um"),Jc=cs("sp"),Dc=cs("rtg"),Wc=cs("rtc");function Uc(a,s=ya){Dd("ec",a,s)}const He="components";function za(a,s){return Xc(He,a,!0,s)||a}const Kc=Symbol.for("v-ndc");function Xc(a,s,d=!0,n=!1){const t=Aa||ya;if(t){const c=t.type;if(a===He){const l=yp(c,!1);if(l&&(l===s||l===Za(s)||l===Ad(Za(s))))return c}const e=fn(t[a]||c[a],s)||fn(t.appContext[a],s);return!e&&n?c:e}}function fn(a,s){return a&&(a[s]||a[Za(s)]||a[Ad(Za(s))])}const mt=a=>a?av(a)?Kd(a)||a.proxy:mt(a.parent):null,nd=_a(Object.create(null),{$:a=>a,$el:a=>a.vnode.el,$data:a=>a.data,$props:a=>a.props,$attrs:a=>a.attrs,$slots:a=>a.slots,$refs:a=>a.refs,$parent:a=>mt(a.parent),$root:a=>mt(a.root),$emit:a=>a.emit,$options:a=>Bt(a),$forceUpdate:a=>a.f||(a.f=()=>Ht(a.update)),$nextTick:a=>a.n||(a.n=Ce.bind(a.proxy)),$watch:a=>Oc.bind(a)}),dt=(a,s)=>a!==ba&&!a.__isScriptSetup&&G(a,s),Yc={get({_:a},s){const{ctx:d,setupState:n,data:t,props:c,accessCache:e,type:l,appContext:p}=a;let r;if(s[0]!=="$"){const g=e[s];if(g!==void 0)switch(g){case 1:return n[s];case 2:return t[s];case 4:return d[s];case 3:return c[s]}else{if(dt(n,s))return e[s]=1,n[s];if(t!==ba&&G(t,s))return e[s]=2,t[s];if((r=a.propsOptions[0])&&G(r,s))return e[s]=3,c[s];if(d!==ba&&G(d,s))return e[s]=4,d[s];ht&&(e[s]=0)}}const o=nd[s];let b,w;if(o)return s==="$attrs"&&$a(a,"get",s),o(a);if((b=l.__cssModules)&&(b=b[s]))return b;if(d!==ba&&G(d,s))return e[s]=4,d[s];if(w=p.config.globalProperties,G(w,s))return w[s]},set({_:a},s,d){const{data:n,setupState:t,ctx:c}=a;return dt(t,s)?(t[s]=d,!0):n!==ba&&G(n,s)?(n[s]=d,!0):G(a.props,s)||s[0]==="$"&&s.slice(1)in a?!1:(c[s]=d,!0)},has({_:{data:a,setupState:s,accessCache:d,ctx:n,appContext:t,propsOptions:c}},e){let l;return!!d[e]||a!==ba&&G(a,e)||dt(s,e)||(l=c[0])&&G(l,e)||G(n,e)||G(nd,e)||G(t.config.globalProperties,e)},defineProperty(a,s,d){return d.get!=null?a._.accessCache[s]=0:G(d,"value")&&this.set(a,s,d.value,null),Reflect.defineProperty(a,s,d)}};function bn(a){return R(a)?a.reduce((s,d)=>(s[d]=null,s),{}):a}let ht=!0;function Gc(a){const s=Bt(a),d=a.proxy,n=a.ctx;ht=!1,s.beforeCreate&&un(s.beforeCreate,a,"bc");const{data:t,computed:c,methods:e,watch:l,provide:p,inject:r,created:o,beforeMount:b,mounted:w,beforeUpdate:g,updated:L,activated:j,deactivated:I,beforeDestroy:N,beforeUnmount:E,destroyed:D,unmounted:O,render:la,renderTracked:ga,renderTriggered:Ca,errorCaptured:J,serverPrefetch:oa,expose:ea,inheritAttrs:Sa,components:$,directives:ta,filters:Pa}=s;if(r&&Qc(r,n,null),e)for(const pa in e){const aa=e[pa];B(aa)&&(n[pa]=aa.bind(d))}if(t){const pa=t.call(d,d);wa(pa)&&(a.data=Id(pa))}if(ht=!0,c)for(const pa in c){const aa=c[pa],ds=B(aa)?aa.bind(d,d):B(aa.get)?aa.get.bind(d,d):Da,is=!B(aa)&&B(aa.set)?aa.set.bind(d):Da,Ka=Ba({get:ds,set:is});Object.defineProperty(n,pa,{enumerable:!0,configurable:!0,get:()=>Ka.value,set:Na=>Ka.value=Na})}if(l)for(const pa in l)Be(l[pa],n,d,pa);if(p){const pa=B(p)?p.call(d):p;Reflect.ownKeys(pa).forEach(aa=>{qd(aa,pa[aa])})}o&&un(o,a,"c");function ka(pa,aa){R(aa)?aa.forEach(ds=>pa(ds.bind(d))):aa&&pa(aa.bind(d))}if(ka(Rc,b),ka(Fe,w),ka(Hc,g),ka(Bc,L),ka(Mc,j),ka(Fc,I),ka(Uc,J),ka(Wc,ga),ka(Dc,Ca),ka(Ie,E),ka(Re,O),ka(Jc,oa),R(ea))if(ea.length){const pa=a.exposed||(a.exposed={});ea.forEach(aa=>{Object.defineProperty(pa,aa,{get:()=>d[aa],set:ds=>d[aa]=ds})})}else a.exposed||(a.exposed={});la&&a.render===Da&&(a.render=la),Sa!=null&&(a.inheritAttrs=Sa),$&&(a.components=$),ta&&(a.directives=ta)}function Qc(a,s,d=Da){R(a)&&(a=kt(a));for(const n in a){const t=a[n];let c;wa(t)?"default"in t?c=es(t.from||n,t.default,!0):c=es(t.from||n):c=es(t),ja(c)?Object.defineProperty(s,n,{enumerable:!0,configurable:!0,get:()=>c.value,set:e=>c.value=e}):s[n]=c}}function un(a,s,d){Fa(R(a)?a.map(n=>n.bind(s.proxy)):a.bind(s.proxy),s,d)}function Be(a,s,d,n){const t=n.includes(".")?Ne(d,n):()=>d[n];if(qa(a)){const c=s[a];B(c)&&zd(t,c)}else if(B(a))zd(t,a.bind(d));else if(wa(a))if(R(a))a.forEach(c=>Be(c,s,d,n));else{const c=B(a.handler)?a.handler.bind(d):s[a.handler];B(c)&&zd(t,c,a)}}function Bt(a){const s=a.type,{mixins:d,extends:n}=s,{mixins:t,optionsCache:c,config:{optionMergeStrategies:e}}=a.appContext,l=c.get(s);let p;return l?p=l:!t.length&&!d&&!n?p=s:(p={},t.length&&t.forEach(r=>Pd(p,r,e,!0)),Pd(p,s,e)),wa(s)&&c.set(s,p),p}function Pd(a,s,d,n=!1){const{mixins:t,extends:c}=s;c&&Pd(a,c,d,!0),t&&t.forEach(e=>Pd(a,e,d,!0));for(const e in s)if(!(n&&e==="expose")){const l=Zc[e]||d&&d[e];a[e]=l?l(a[e],s[e]):s[e]}return a}const Zc={data:wn,props:mn,emits:mn,methods:td,computed:td,beforeCreate:Va,created:Va,beforeMount:Va,mounted:Va,beforeUpdate:Va,updated:Va,beforeDestroy:Va,beforeUnmount:Va,destroyed:Va,unmounted:Va,activated:Va,deactivated:Va,errorCaptured:Va,serverPrefetch:Va,components:td,directives:td,watch:sp,provide:wn,inject:ap};function wn(a,s){return s?a?function(){return _a(B(a)?a.call(this,this):a,B(s)?s.call(this,this):s)}:s:a}function ap(a,s){return td(kt(a),kt(s))}function kt(a){if(R(a)){const s={};for(let d=0;d<a.length;d++)s[a[d]]=a[d];return s}return a}function Va(a,s){return a?[...new Set([].concat(a,s))]:s}function td(a,s){return a?_a(Object.create(null),a,s):s}function mn(a,s){return a?R(a)&&R(s)?[...new Set([...a,...s])]:_a(Object.create(null),bn(a),bn(s??{})):s}function sp(a,s){if(!a)return s;if(!s)return a;const d=_a(Object.create(null),a);for(const n in s)d[n]=Va(a[n],s[n]);return d}function Je(){return{app:null,config:{isNativeTag:Cv,performance:!1,globalProperties:{},optionMergeStrategies:{},errorHandler:void 0,warnHandler:void 0,compilerOptions:{}},mixins:[],components:{},directives:{},provides:Object.create(null),optionsCache:new WeakMap,propsCache:new WeakMap,emitsCache:new WeakMap}}let dp=0;function tp(a,s){return function(n,t=null){B(n)||(n=_a({},n)),t!=null&&!wa(t)&&(t=null);const c=Je(),e=new Set;let l=!1;const p=c.app={_uid:dp++,_component:n,_props:t,_container:null,_context:c,_instance:null,version:jp,get config(){return c.config},set config(r){},use(r,...o){return e.has(r)||(r&&B(r.install)?(e.add(r),r.install(p,...o)):B(r)&&(e.add(r),r(p,...o))),p},mixin(r){return c.mixins.includes(r)||c.mixins.push(r),p},component(r,o){return o?(c.components[r]=o,p):c.components[r]},directive(r,o){return o?(c.directives[r]=o,p):c.directives[r]},mount(r,o,b){if(!l){const w=T(n,t);return w.appContext=c,o&&s?s(w,r):a(w,r,b),l=!0,p._container=r,r.__vue_app__=p,Kd(w.component)||w.component.proxy}},unmount(){l&&(a(null,p._container),delete p._container.__vue_app__)},provide(r,o){return c.provides[r]=o,p},runWithContext(r){Vd=p;try{return r()}finally{Vd=null}}};return p}}let Vd=null;function qd(a,s){if(ya){let d=ya.provides;const n=ya.parent&&ya.parent.provides;n===d&&(d=ya.provides=Object.create(n)),d[a]=s}}function es(a,s,d=!1){const n=ya||Aa;if(n||Vd){const t=n?n.parent==null?n.vnode.appContext&&n.vnode.appContext.provides:n.parent.provides:Vd._context.provides;if(t&&a in t)return t[a];if(arguments.length>1)return d&&B(s)?s.call(n&&n.proxy):s}}function np(a,s,d,n=!1){const t={},c={};xd(c,Ud,1),a.propsDefaults=Object.create(null),De(a,s,t,c);for(const e in a.propsOptions[0])e in t||(t[e]=void 0);d?a.props=n?t:ke(t):a.type.props?a.props=t:a.props=c,a.attrs=c}function ep(a,s,d,n){const{props:t,attrs:c,vnode:{patchFlag:e}}=a,l=Z(t),[p]=a.propsOptions;let r=!1;if((n||e>0)&&!(e&16)){if(e&8){const o=a.vnode.dynamicProps;for(let b=0;b<o.length;b++){let w=o[b];if(Hd(a.emitsOptions,w))continue;const g=s[w];if(p)if(G(c,w))g!==c[w]&&(c[w]=g,r=!0);else{const L=Za(w);t[L]=gt(p,l,L,g,a,!1)}else g!==c[w]&&(c[w]=g,r=!0)}}}else{De(a,s,t,c)&&(r=!0);let o;for(const b in l)(!s||!G(s,b)&&((o=Us(b))===b||!G(s,o)))&&(p?d&&(d[b]!==void 0||d[o]!==void 0)&&(t[b]=gt(p,l,b,void 0,a,!0)):delete t[b]);if(c!==l)for(const b in c)(!s||!G(s,b))&&(delete c[b],r=!0)}r&&vs(a,"set","$attrs")}function De(a,s,d,n){const[t,c]=a.propsOptions;let e=!1,l;if(s)for(let p in s){if(_d(p))continue;const r=s[p];let o;t&&G(t,o=Za(p))?!c||!c.includes(o)?d[o]=r:(l||(l={}))[o]=r:Hd(a.emitsOptions,p)||(!(p in n)||r!==n[p])&&(n[p]=r,e=!0)}if(c){const p=Z(d),r=l||ba;for(let o=0;o<c.length;o++){const b=c[o];d[b]=gt(t,p,b,r[b],a,!G(r,b))}}return e}function gt(a,s,d,n,t,c){const e=a[d];if(e!=null){const l=G(e,"default");if(l&&n===void 0){const p=e.default;if(e.type!==Function&&!e.skipFactory&&B(p)){const{propsDefaults:r}=t;d in r?n=r[d]:(Js(t),n=r[d]=p.call(null,s),Ns())}else n=p}e[0]&&(c&&!l?n=!1:e[1]&&(n===""||n===Us(d))&&(n=!0))}return n}function We(a,s,d=!1){const n=s.propsCache,t=n.get(a);if(t)return t;const c=a.props,e={},l=[];let p=!1;if(!B(a)){const o=b=>{p=!0;const[w,g]=We(b,s,!0);_a(e,w),g&&l.push(...g)};!d&&s.mixins.length&&s.mixins.forEach(o),a.extends&&o(a.extends),a.mixins&&a.mixins.forEach(o)}if(!c&&!p)return wa(a)&&n.set(a,Fs),Fs;if(R(c))for(let o=0;o<c.length;o++){const b=Za(c[o]);hn(b)&&(e[b]=ba)}else if(c)for(const o in c){const b=Za(o);if(hn(b)){const w=c[o],g=e[b]=R(w)||B(w)?{type:w}:_a({},w);if(g){const L=Tn(Boolean,g.type),j=Tn(String,g.type);g[0]=L>-1,g[1]=j<0||L<j,(L>-1||G(g,"default"))&&l.push(b)}}}const r=[e,l];return wa(a)&&n.set(a,r),r}function hn(a){return a[0]!=="$"}function kn(a){const s=a&&a.toString().match(/^\s*(function|class) (\w+)/);return s?s[2]:a===null?"null":""}function gn(a,s){return kn(a)===kn(s)}function Tn(a,s){return R(s)?s.findIndex(d=>gn(d,a)):B(s)&&gn(s,a)?0:-1}const Ue=a=>a[0]==="_"||a==="$stable",Jt=a=>R(a)?a.map(Ga):[Ga(a)],vp=(a,s,d)=>{if(s._n)return s;const n=C((...t)=>Jt(s(...t)),d);return n._c=!1,n},Ke=(a,s,d)=>{const n=a._ctx;for(const t in a){if(Ue(t))continue;const c=a[t];if(B(c))s[t]=vp(t,c,n);else if(c!=null){const e=Jt(c);s[t]=()=>e}}},Xe=(a,s)=>{const d=Jt(s);a.slots.default=()=>d},cp=(a,s)=>{if(a.vnode.shapeFlag&32){const d=s._;d?(a.slots=Z(s),xd(s,"_",d)):Ke(s,a.slots={})}else a.slots={},s&&Xe(a,s);xd(a.slots,Ud,1)},pp=(a,s,d)=>{const{vnode:n,slots:t}=a;let c=!0,e=ba;if(n.shapeFlag&32){const l=s._;l?d&&l===1?c=!1:(_a(t,s),!d&&l===1&&delete t._):(c=!s.$stable,Ke(s,t)),e=s}else s&&(Xe(a,s),e={default:1});if(c)for(const l in t)!Ue(l)&&!(l in e)&&delete t[l]};function Tt(a,s,d,n,t=!1){if(R(a)){a.forEach((w,g)=>Tt(w,s&&(R(s)?s[g]:s),d,n,t));return}if(Sd(n)&&!t)return;const c=n.shapeFlag&4?Kd(n.component)||n.component.proxy:n.el,e=t?null:c,{i:l,r:p}=a,r=s&&s.r,o=l.refs===ba?l.refs={}:l.refs,b=l.setupState;if(r!=null&&r!==p&&(qa(r)?(o[r]=null,G(b,r)&&(b[r]=null)):ja(r)&&(r.value=null)),B(p))hs(p,l,12,[e,o]);else{const w=qa(p),g=ja(p);if(w||g){const L=()=>{if(a.f){const j=w?G(b,p)?b[p]:o[p]:p.value;t?R(j)&&Lt(j,c):R(j)?j.includes(c)||j.push(c):w?(o[p]=[c],G(b,p)&&(b[p]=o[p])):(p.value=[c],a.k&&(o[a.k]=p.value))}else w?(o[p]=e,G(b,p)&&(b[p]=e)):g&&(p.value=e,a.k&&(o[a.k]=e))};e?(L.id=-1,Oa(L,d)):L()}}}const Oa=Nc;function lp(a){return ip(a)}function ip(a,s){const d=lt();d.__VUE__=!0;const{insert:n,remove:t,patchProp:c,createElement:e,createText:l,createComment:p,setText:r,setElementText:o,parentNode:b,nextSibling:w,setScopeId:g=Da,insertStaticContent:L}=a,j=(i,f,u,m=null,k=null,_=null,x=!1,S=null,q=!!f.dynamicChildren)=>{if(i===f)return;i&&!xs(i,f)&&(m=h(i),Na(i,k,_,!0),i=null),f.patchFlag===-2&&(q=!1,f.dynamicChildren=null);const{type:z,ref:M,shapeFlag:V}=f;switch(z){case Wd:I(i,f,u,m);break;case Wa:N(i,f,u,m);break;case yd:i==null&&E(f,u,m,x);break;case Q:$(i,f,u,m,k,_,x,S,q);break;default:V&1?la(i,f,u,m,k,_,x,S,q):V&6?ta(i,f,u,m,k,_,x,S,q):(V&64||V&128)&&z.process(i,f,u,m,k,_,x,S,q,y)}M!=null&&k&&Tt(M,i&&i.ref,_,f||i,!f)},I=(i,f,u,m)=>{if(i==null)n(f.el=l(f.children),u,m);else{const k=f.el=i.el;f.children!==i.children&&r(k,f.children)}},N=(i,f,u,m)=>{i==null?n(f.el=p(f.children||""),u,m):f.el=i.el},E=(i,f,u,m)=>{[i.el,i.anchor]=L(i.children,f,u,m,i.el,i.anchor)},D=({el:i,anchor:f},u,m)=>{let k;for(;i&&i!==f;)k=w(i),n(i,u,m),i=k;n(f,u,m)},O=({el:i,anchor:f})=>{let u;for(;i&&i!==f;)u=w(i),t(i),i=u;t(f)},la=(i,f,u,m,k,_,x,S,q)=>{x=x||f.type==="svg",i==null?ga(f,u,m,k,_,x,S,q):oa(i,f,k,_,x,S,q)},ga=(i,f,u,m,k,_,x,S)=>{let q,z;const{type:M,props:V,shapeFlag:F,transition:H,dirs:K}=i;if(q=i.el=e(i.type,_,V&&V.is,V),F&8?o(q,i.children):F&16&&J(i.children,q,null,m,k,_&&M!=="foreignObject",x,S),K&&zs(i,null,m,"created"),Ca(q,i,i.scopeId,x,m),V){for(const va in V)va!=="value"&&!_d(va)&&c(q,va,null,V[va],_,i.children,m,k,xa);"value"in V&&c(q,"value",null,V.value),(z=V.onVnodeBeforeMount)&&Ya(z,m,i)}K&&zs(i,null,m,"beforeMount");const ia=(!k||k&&!k.pendingBranch)&&H&&!H.persisted;ia&&H.beforeEnter(q),n(q,f,u),((z=V&&V.onVnodeMounted)||ia||K)&&Oa(()=>{z&&Ya(z,m,i),ia&&H.enter(q),K&&zs(i,null,m,"mounted")},k)},Ca=(i,f,u,m,k)=>{if(u&&g(i,u),m)for(let _=0;_<m.length;_++)g(i,m[_]);if(k){let _=k.subTree;if(f===_){const x=k.vnode;Ca(i,x,x.scopeId,x.slotScopeIds,k.parent)}}},J=(i,f,u,m,k,_,x,S,q=0)=>{for(let z=q;z<i.length;z++){const M=i[z]=S?us(i[z]):Ga(i[z]);j(null,M,f,u,m,k,_,x,S)}},oa=(i,f,u,m,k,_,x)=>{const S=f.el=i.el;let{patchFlag:q,dynamicChildren:z,dirs:M}=f;q|=i.patchFlag&16;const V=i.props||ba,F=f.props||ba;let H;u&&Ss(u,!1),(H=F.onVnodeBeforeUpdate)&&Ya(H,u,f,i),M&&zs(f,i,u,"beforeUpdate"),u&&Ss(u,!0);const K=k&&f.type!=="foreignObject";if(z?ea(i.dynamicChildren,z,S,u,m,K,_):x||aa(i,f,S,null,u,m,K,_,!1),q>0){if(q&16)Sa(S,f,V,F,u,m,k);else if(q&2&&V.class!==F.class&&c(S,"class",null,F.class,k),q&4&&c(S,"style",V.style,F.style,k),q&8){const ia=f.dynamicProps;for(let va=0;va<ia.length;va++){const Ta=ia[va],Ia=V[Ta],Es=F[Ta];(Es!==Ia||Ta==="value")&&c(S,Ta,Ia,Es,k,i.children,u,m,xa)}}q&1&&i.children!==f.children&&o(S,f.children)}else!x&&z==null&&Sa(S,f,V,F,u,m,k);((H=F.onVnodeUpdated)||M)&&Oa(()=>{H&&Ya(H,u,f,i),M&&zs(f,i,u,"updated")},m)},ea=(i,f,u,m,k,_,x)=>{for(let S=0;S<f.length;S++){const q=i[S],z=f[S],M=q.el&&(q.type===Q||!xs(q,z)||q.shapeFlag&70)?b(q.el):u;j(q,z,M,null,m,k,_,x,!0)}},Sa=(i,f,u,m,k,_,x)=>{if(u!==m){if(u!==ba)for(const S in u)!_d(S)&&!(S in m)&&c(i,S,u[S],null,x,f.children,k,_,xa);for(const S in m){if(_d(S))continue;const q=m[S],z=u[S];q!==z&&S!=="value"&&c(i,S,z,q,x,f.children,k,_,xa)}"value"in m&&c(i,"value",u.value,m.value)}},$=(i,f,u,m,k,_,x,S,q)=>{const z=f.el=i?i.el:l(""),M=f.anchor=i?i.anchor:l("");let{patchFlag:V,dynamicChildren:F,slotScopeIds:H}=f;H&&(S=S?S.concat(H):H),i==null?(n(z,u,m),n(M,u,m),J(f.children,u,M,k,_,x,S,q)):V>0&&V&64&&F&&i.dynamicChildren?(ea(i.dynamicChildren,F,u,k,_,x,S),(f.key!=null||k&&f===k.subTree)&&Ye(i,f,!0)):aa(i,f,u,M,k,_,x,S,q)},ta=(i,f,u,m,k,_,x,S,q)=>{f.slotScopeIds=S,i==null?f.shapeFlag&512?k.ctx.activate(f,u,m,x,q):Pa(f,u,m,k,_,x,q):ss(i,f,q)},Pa=(i,f,u,m,k,_,x)=>{const S=i.component=gp(i,m,k);if(Jd(i)&&(S.ctx.renderer=y),_p(S),S.asyncDep){if(k&&k.registerDep(S,ka),!i.el){const q=S.subTree=T(Wa);N(null,q,f,u)}return}ka(S,i,f,u,k,_,x)},ss=(i,f,u)=>{const m=f.component=i.component;if(jc(i,f,u))if(m.asyncDep&&!m.asyncResolved){pa(m,f,u);return}else m.next=f,Sc(m.update),m.update();else f.el=i.el,m.vnode=f},ka=(i,f,u,m,k,_,x)=>{const S=()=>{if(i.isMounted){let{next:M,bu:V,u:F,parent:H,vnode:K}=i,ia=M,va;Ss(i,!1),M?(M.el=K.el,pa(i,M,x)):M=K,V&&Zd(V),(va=M.props&&M.props.onVnodeBeforeUpdate)&&Ya(va,H,M,K),Ss(i,!0);const Ta=at(i),Ia=i.subTree;i.subTree=Ta,j(Ia,Ta,b(Ia.el),h(Ia),i,k,_),M.el=Ta.el,ia===null&&Pc(i,Ta.el),F&&Oa(F,k),(va=M.props&&M.props.onVnodeUpdated)&&Oa(()=>Ya(va,H,M,K),k)}else{let M;const{el:V,props:F}=f,{bm:H,m:K,parent:ia}=i,va=Sd(f);if(Ss(i,!1),H&&Zd(H),!va&&(M=F&&F.onVnodeBeforeMount)&&Ya(M,ia,f),Ss(i,!0),V&&sa){const Ta=()=>{i.subTree=at(i),sa(V,i.subTree,i,k,null)};va?f.type.__asyncLoader().then(()=>!i.isUnmounted&&Ta()):Ta()}else{const Ta=i.subTree=at(i);j(null,Ta,u,m,i,k,_),f.el=Ta.el}if(K&&Oa(K,k),!va&&(M=F&&F.onVnodeMounted)){const Ta=f;Oa(()=>Ya(M,ia,Ta),k)}(f.shapeFlag&256||ia&&Sd(ia.vnode)&&ia.vnode.shapeFlag&256)&&i.a&&Oa(i.a,k),i.isMounted=!0,f=u=m=null}},q=i.effect=new Ot(S,()=>Ht(z),i.scope),z=i.update=()=>q.run();z.id=i.uid,Ss(i,!0),z()},pa=(i,f,u)=>{f.component=i;const m=i.vnode.props;i.vnode=f,i.next=null,ep(i,f.props,m,u),pp(i,f.children,u),Ks(),ln(),Xs()},aa=(i,f,u,m,k,_,x,S,q=!1)=>{const z=i&&i.children,M=i?i.shapeFlag:0,V=f.children,{patchFlag:F,shapeFlag:H}=f;if(F>0){if(F&128){is(z,V,u,m,k,_,x,S,q);return}else if(F&256){ds(z,V,u,m,k,_,x,S,q);return}}H&8?(M&16&&xa(z,k,_),V!==z&&o(u,V)):M&16?H&16?is(z,V,u,m,k,_,x,S,q):xa(z,k,_,!0):(M&8&&o(u,""),H&16&&J(V,u,m,k,_,x,S,q))},ds=(i,f,u,m,k,_,x,S,q)=>{i=i||Fs,f=f||Fs;const z=i.length,M=f.length,V=Math.min(z,M);let F;for(F=0;F<V;F++){const H=f[F]=q?us(f[F]):Ga(f[F]);j(i[F],H,u,null,k,_,x,S,q)}z>M?xa(i,k,_,!0,!1,V):J(f,u,m,k,_,x,S,q,V)},is=(i,f,u,m,k,_,x,S,q)=>{let z=0;const M=f.length;let V=i.length-1,F=M-1;for(;z<=V&&z<=F;){const H=i[z],K=f[z]=q?us(f[z]):Ga(f[z]);if(xs(H,K))j(H,K,u,null,k,_,x,S,q);else break;z++}for(;z<=V&&z<=F;){const H=i[V],K=f[F]=q?us(f[F]):Ga(f[F]);if(xs(H,K))j(H,K,u,null,k,_,x,S,q);else break;V--,F--}if(z>V){if(z<=F){const H=F+1,K=H<M?f[H].el:m;for(;z<=F;)j(null,f[z]=q?us(f[z]):Ga(f[z]),u,K,k,_,x,S,q),z++}}else if(z>F)for(;z<=V;)Na(i[z],k,_,!0),z++;else{const H=z,K=z,ia=new Map;for(z=K;z<=F;z++){const Ea=f[z]=q?us(f[z]):Ga(f[z]);Ea.key!=null&&ia.set(Ea.key,z)}let va,Ta=0;const Ia=F-K+1;let Es=!1,Qt=0;const Qs=new Array(Ia);for(z=0;z<Ia;z++)Qs[z]=0;for(z=H;z<=V;z++){const Ea=i[z];if(Ta>=Ia){Na(Ea,k,_,!0);continue}let Xa;if(Ea.key!=null)Xa=ia.get(Ea.key);else for(va=K;va<=F;va++)if(Qs[va-K]===0&&xs(Ea,f[va])){Xa=va;break}Xa===void 0?Na(Ea,k,_,!0):(Qs[Xa-K]=z+1,Xa>=Qt?Qt=Xa:Es=!0,j(Ea,f[Xa],u,null,k,_,x,S,q),Ta++)}const Zt=Es?rp(Qs):Fs;for(va=Zt.length-1,z=Ia-1;z>=0;z--){const Ea=K+z,Xa=f[Ea],an=Ea+1<M?f[Ea+1].el:m;Qs[z]===0?j(null,Xa,u,an,k,_,x,S,q):Es&&(va<0||z!==Zt[va]?Ka(Xa,u,an,2):va--)}}},Ka=(i,f,u,m,k=null)=>{const{el:_,type:x,transition:S,children:q,shapeFlag:z}=i;if(z&6){Ka(i.component.subTree,f,u,m);return}if(z&128){i.suspense.move(f,u,m);return}if(z&64){x.move(i,f,u,y);return}if(x===Q){n(_,f,u);for(let V=0;V<q.length;V++)Ka(q[V],f,u,m);n(i.anchor,f,u);return}if(x===yd){D(i,f,u);return}if(m!==2&&z&1&&S)if(m===0)S.beforeEnter(_),n(_,f,u),Oa(()=>S.enter(_),k);else{const{leave:V,delayLeave:F,afterLeave:H}=S,K=()=>n(_,f,u),ia=()=>{V(_,()=>{K(),H&&H()})};F?F(_,K,ia):ia()}else n(_,f,u)},Na=(i,f,u,m=!1,k=!1)=>{const{type:_,props:x,ref:S,children:q,dynamicChildren:z,shapeFlag:M,patchFlag:V,dirs:F}=i;if(S!=null&&Tt(S,null,u,i,!0),M&256){f.ctx.deactivate(i);return}const H=M&1&&F,K=!Sd(i);let ia;if(K&&(ia=x&&x.onVnodeBeforeUnmount)&&Ya(ia,f,i),M&6)ud(i.component,u,m);else{if(M&128){i.suspense.unmount(u,m);return}H&&zs(i,null,f,"beforeUnmount"),M&64?i.type.remove(i,f,u,k,y,m):z&&(_!==Q||V>0&&V&64)?xa(z,f,u,!1,!0):(_===Q&&V&384||!k&&M&16)&&xa(q,f,u),m&&Os(i)}(K&&(ia=x&&x.onVnodeUnmounted)||H)&&Oa(()=>{ia&&Ya(ia,f,i),H&&zs(i,null,f,"unmounted")},u)},Os=i=>{const{type:f,el:u,anchor:m,transition:k}=i;if(f===Q){$s(u,m);return}if(f===yd){O(i);return}const _=()=>{t(u),k&&!k.persisted&&k.afterLeave&&k.afterLeave()};if(i.shapeFlag&1&&k&&!k.persisted){const{leave:x,delayLeave:S}=k,q=()=>x(u,_);S?S(i.el,_,q):q()}else _()},$s=(i,f)=>{let u;for(;i!==f;)u=w(i),t(i),i=u;t(f)},ud=(i,f,u)=>{const{bum:m,scope:k,update:_,subTree:x,um:S}=i;m&&Zd(m),k.stop(),_&&(_.active=!1,Na(x,i,f,u)),S&&Oa(S,f),Oa(()=>{i.isUnmounted=!0},f),f&&f.pendingBranch&&!f.isUnmounted&&i.asyncDep&&!i.asyncResolved&&i.suspenseId===f.pendingId&&(f.deps--,f.deps===0&&f.resolve())},xa=(i,f,u,m=!1,k=!1,_=0)=>{for(let x=_;x<i.length;x++)Na(i[x],f,u,m,k)},h=i=>i.shapeFlag&6?h(i.component.subTree):i.shapeFlag&128?i.suspense.next():w(i.anchor||i.el),P=(i,f,u)=>{i==null?f._vnode&&Na(f._vnode,null,null,!0):j(f._vnode||null,i,f,null,null,null,u),ln(),Le(),f._vnode=i},y={p:j,um:Na,m:Ka,r:Os,mt:Pa,mc:J,pc:aa,pbc:ea,n:h,o:a};let A,sa;return s&&([A,sa]=s(y)),{render:P,hydrate:A,createApp:tp(P,A)}}function Ss({effect:a,update:s},d){a.allowRecurse=s.allowRecurse=d}function Ye(a,s,d=!1){const n=a.children,t=s.children;if(R(n)&&R(t))for(let c=0;c<n.length;c++){const e=n[c];let l=t[c];l.shapeFlag&1&&!l.dynamicChildren&&((l.patchFlag<=0||l.patchFlag===32)&&(l=t[c]=us(t[c]),l.el=e.el),d||Ye(e,l)),l.type===Wd&&(l.el=e.el)}}function rp(a){const s=a.slice(),d=[0];let n,t,c,e,l;const p=a.length;for(n=0;n<p;n++){const r=a[n];if(r!==0){if(t=d[d.length-1],a[t]<r){s[n]=t,d.push(n);continue}for(c=0,e=d.length-1;c<e;)l=c+e>>1,a[d[l]]<r?c=l+1:e=l;r<a[d[c]]&&(c>0&&(s[n]=d[c-1]),d[c]=n)}}for(c=d.length,e=d[c-1];c-- >0;)d[c]=e,e=s[e];return d}const op=a=>a.__isTeleport,Q=Symbol.for("v-fgt"),Wd=Symbol.for("v-txt"),Wa=Symbol.for("v-cmt"),yd=Symbol.for("v-stc"),ed=[];let Ja=null;function da(a=!1){ed.push(Ja=a?null:[])}function fp(){ed.pop(),Ja=ed[ed.length-1]||null}let od=1;function _n(a){od+=a}function Ge(a){return a.dynamicChildren=od>0?Ja||Fs:null,fp(),od>0&&Ja&&Ja.push(a),a}function ca(a,s,d,n,t,c){return Ge(v(a,s,d,n,t,c,!0))}function Qe(a,s,d,n,t){return Ge(T(a,s,d,n,t,!0))}function _t(a){return a?a.__v_isVNode===!0:!1}function xs(a,s){return a.type===s.type&&a.key===s.key}const Ud="__vInternal",Ze=({key:a})=>a??null,Cd=({ref:a,ref_key:s,ref_for:d})=>(typeof a=="number"&&(a=""+a),a!=null?qa(a)||ja(a)||B(a)?{i:Aa,r:a,k:s,f:!!d}:a:null);function v(a,s=null,d=null,n=0,t=null,c=a===Q?0:1,e=!1,l=!1){const p={__v_isVNode:!0,__v_skip:!0,type:a,props:s,key:s&&Ze(s),ref:s&&Cd(s),scopeId:Bd,slotScopeIds:null,children:d,component:null,suspense:null,ssContent:null,ssFallback:null,dirs:null,transition:null,el:null,anchor:null,target:null,targetAnchor:null,staticCount:0,shapeFlag:c,patchFlag:n,dynamicProps:t,dynamicChildren:null,appContext:null,ctx:Aa};return l?(Dt(p,d),c&128&&a.normalize(p)):d&&(p.shapeFlag|=qa(d)?8:16),od>0&&!e&&Ja&&(p.patchFlag>0||c&6)&&p.patchFlag!==32&&Ja.push(p),p}const T=bp;function bp(a,s=null,d=null,n=0,t=null,c=!1){if((!a||a===Kc)&&(a=Wa),_t(a)){const l=gs(a,s,!0);return d&&Dt(l,d),od>0&&!c&&Ja&&(l.shapeFlag&6?Ja[Ja.indexOf(a)]=l:Ja.push(l)),l.patchFlag|=-2,l}if(Cp(a)&&(a=a.__vccOpts),s){s=up(s);let{class:l,style:p}=s;l&&!qa(l)&&(s.class=Md(l)),wa(p)&&(Te(p)&&!R(p)&&(p=_a({},p)),s.style=Vt(p))}const e=qa(a)?1:Vc(a)?128:op(a)?64:wa(a)?4:B(a)?2:0;return v(a,s,d,n,t,e,c,!0)}function up(a){return a?Te(a)||Ud in a?_a({},a):a:null}function gs(a,s,d=!1){const{props:n,ref:t,patchFlag:c,children:e}=a,l=s?mp(n||{},s):n;return{__v_isVNode:!0,__v_skip:!0,type:a.type,props:l,key:l&&Ze(l),ref:s&&s.ref?d&&t?R(t)?t.concat(Cd(s)):[t,Cd(s)]:Cd(s):t,scopeId:a.scopeId,slotScopeIds:a.slotScopeIds,children:e,target:a.target,targetAnchor:a.targetAnchor,staticCount:a.staticCount,shapeFlag:a.shapeFlag,patchFlag:s&&a.type!==Q?c===-1?16:c|16:c,dynamicProps:a.dynamicProps,dynamicChildren:a.dynamicChildren,appContext:a.appContext,dirs:a.dirs,transition:a.transition,component:a.component,suspense:a.suspense,ssContent:a.ssContent&&gs(a.ssContent),ssFallback:a.ssFallback&&gs(a.ssFallback),el:a.el,anchor:a.anchor,ctx:a.ctx,ce:a.ce}}function fa(a=" ",s=0){return T(Wd,null,a,s)}function U(a,s){const d=T(yd,null,a);return d.staticCount=s,d}function wp(a="",s=!1){return s?(da(),Qe(Wa,null,a)):T(Wa,null,a)}function Ga(a){return a==null||typeof a=="boolean"?T(Wa):R(a)?T(Q,null,a.slice()):typeof a=="object"?us(a):T(Wd,null,String(a))}function us(a){return a.el===null&&a.patchFlag!==-1||a.memo?a:gs(a)}function Dt(a,s){let d=0;const{shapeFlag:n}=a;if(s==null)s=null;else if(R(s))d=16;else if(typeof s=="object")if(n&65){const t=s.default;t&&(t._c&&(t._d=!1),Dt(a,t()),t._c&&(t._d=!0));return}else{d=32;const t=s._;!t&&!(Ud in s)?s._ctx=Aa:t===3&&Aa&&(Aa.slots._===1?s._=1:(s._=2,a.patchFlag|=1024))}else B(s)?(s={default:s,_ctx:Aa},d=32):(s=String(s),n&64?(d=16,s=[fa(s)]):d=8);a.children=s,a.shapeFlag|=d}function mp(...a){const s={};for(let d=0;d<a.length;d++){const n=a[d];for(const t in n)if(t==="class")s.class!==n.class&&(s.class=Md([s.class,n.class]));else if(t==="style")s.style=Vt([s.style,n.style]);else if(Od(t)){const c=s[t],e=n[t];e&&c!==e&&!(R(c)&&c.includes(e))&&(s[t]=c?[].concat(c,e):e)}else t!==""&&(s[t]=n[t])}return s}function Ya(a,s,d,n=null){Fa(a,s,7,[d,n])}const hp=Je();let kp=0;function gp(a,s,d){const n=a.type,t=(s?s.appContext:a.appContext)||hp,c={uid:kp++,vnode:a,type:n,parent:s,appContext:t,root:null,next:null,subTree:null,effect:null,update:null,scope:new pe(!0),render:null,proxy:null,exposed:null,exposeProxy:null,withProxy:null,provides:s?s.provides:Object.create(t.provides),accessCache:null,renderCache:[],components:null,directives:null,propsOptions:We(n,t),emitsOptions:Pe(n,t),emit:null,emitted:null,propsDefaults:ba,inheritAttrs:n.inheritAttrs,ctx:ba,data:ba,props:ba,attrs:ba,slots:ba,refs:ba,setupState:ba,setupContext:null,attrsProxy:null,slotsProxy:null,suspense:d,suspenseId:d?d.pendingId:0,asyncDep:null,asyncResolved:!1,isMounted:!1,isUnmounted:!1,isDeactivated:!1,bc:null,c:null,bm:null,m:null,bu:null,u:null,um:null,bum:null,da:null,a:null,rtg:null,rtc:null,ec:null,sp:null};return c.ctx={_:c},c.root=s?s.root:c,c.emit=Cc.bind(null,c),a.ce&&a.ce(c),c}let ya=null;const Tp=()=>ya||Aa;let Wt,As,zn="__VUE_INSTANCE_SETTERS__";(As=lt()[zn])||(As=lt()[zn]=[]),As.push(a=>ya=a),Wt=a=>{As.length>1?As.forEach(s=>s(a)):As[0](a)};const Js=a=>{Wt(a),a.scope.on()},Ns=()=>{ya&&ya.scope.off(),Wt(null)};function av(a){return a.vnode.shapeFlag&4}let fd=!1;function _p(a,s=!1){fd=s;const{props:d,children:n}=a.vnode,t=av(a);np(a,d,t,s),cp(a,n);const c=t?zp(a,s):void 0;return fd=!1,c}function zp(a,s){const d=a.type;a.accessCache=Object.create(null),a.proxy=Ft(new Proxy(a.ctx,Yc));const{setup:n}=d;if(n){const t=a.setupContext=n.length>1?qp(a):null;Js(a),Ks();const c=hs(n,a,0,[a.props,t]);if(Xs(),Ns(),te(c)){if(c.then(Ns,Ns),s)return c.then(e=>{Sn(a,e,s)}).catch(e=>{Rd(e,a,0)});a.asyncDep=c}else Sn(a,c,s)}else sv(a,s)}function Sn(a,s,d){B(s)?a.type.__ssrInlineRender?a.ssrRender=s:a.render=s:wa(s)&&(a.setupState=qe(s)),sv(a,d)}let qn;function sv(a,s,d){const n=a.type;if(!a.render){if(!s&&qn&&!n.render){const t=n.template||Bt(a).template;if(t){const{isCustomElement:c,compilerOptions:e}=a.appContext.config,{delimiters:l,compilerOptions:p}=n,r=_a(_a({isCustomElement:c,delimiters:l},e),p);n.render=qn(t,r)}}a.render=n.render||Da}Js(a),Ks(),Gc(a),Xs(),Ns()}function Sp(a){return a.attrsProxy||(a.attrsProxy=new Proxy(a.attrs,{get(s,d){return $a(a,"get","$attrs"),s[d]}}))}function qp(a){const s=d=>{a.exposed=d||{}};return{get attrs(){return Sp(a)},slots:a.slots,emit:a.emit,expose:s}}function Kd(a){if(a.exposed)return a.exposeProxy||(a.exposeProxy=new Proxy(qe(Ft(a.exposed)),{get(s,d){if(d in s)return s[d];if(d in nd)return nd[d](a)},has(s,d){return d in s||d in nd}}))}function yp(a,s=!0){return B(a)?a.displayName||a.name:a.name||s&&a.__name}function Cp(a){return B(a)&&"__vccOpts"in a}const Ba=(a,s)=>Tc(a,s,fd);function Ut(a,s,d){const n=arguments.length;return n===2?wa(s)&&!R(s)?_t(s)?T(a,null,[s]):T(a,s):T(a,null,s):(n>3?d=Array.prototype.slice.call(arguments,2):n===3&&_t(d)&&(d=[d]),T(a,s,d))}const xp=Symbol.for("v-scx"),Lp=()=>es(xp),jp="3.3.4",Pp="http://www.w3.org/2000/svg",Ls=typeof document<"u"?document:null,yn=Ls&&Ls.createElement("template"),Vp={insert:(a,s,d)=>{s.insertBefore(a,d||null)},remove:a=>{const s=a.parentNode;s&&s.removeChild(a)},createElement:(a,s,d,n)=>{const t=s?Ls.createElementNS(Pp,a):Ls.createElement(a,d?{is:d}:void 0);return a==="select"&&n&&n.multiple!=null&&t.setAttribute("multiple",n.multiple),t},createText:a=>Ls.createTextNode(a),createComment:a=>Ls.createComment(a),setText:(a,s)=>{a.nodeValue=s},setElementText:(a,s)=>{a.textContent=s},parentNode:a=>a.parentNode,nextSibling:a=>a.nextSibling,querySelector:a=>Ls.querySelector(a),setScopeId(a,s){a.setAttribute(s,"")},insertStaticContent(a,s,d,n,t,c){const e=d?d.previousSibling:s.lastChild;if(t&&(t===c||t.nextSibling))for(;s.insertBefore(t.cloneNode(!0),d),!(t===c||!(t=t.nextSibling)););else{yn.innerHTML=n?`<svg>${a}</svg>`:a;const l=yn.content;if(n){const p=l.firstChild;for(;p.firstChild;)l.appendChild(p.firstChild);l.removeChild(p)}s.insertBefore(l,d)}return[e?e.nextSibling:s.firstChild,d?d.previousSibling:s.lastChild]}};function Np(a,s,d){const n=a._vtc;n&&(s=(s?[s,...n]:[...n]).join(" ")),s==null?a.removeAttribute("class"):d?a.setAttribute("class",s):a.className=s}function Op(a,s,d){const n=a.style,t=qa(d);if(d&&!t){if(s&&!qa(s))for(const c in s)d[c]==null&&zt(n,c,"");for(const c in d)zt(n,c,d[c])}else{const c=n.display;t?s!==d&&(n.cssText=d):s&&a.removeAttribute("style"),"_vod"in a&&(n.display=c)}}const Cn=/\s*!important$/;function zt(a,s,d){if(R(d))d.forEach(n=>zt(a,s,n));else if(d==null&&(d=""),s.startsWith("--"))a.setProperty(s,d);else{const n=$p(a,s);Cn.test(d)?a.setProperty(Us(n),d.replace(Cn,""),"important"):a[n]=d}}const xn=["Webkit","Moz","ms"],tt={};function $p(a,s){const d=tt[s];if(d)return d;let n=Za(s);if(n!=="filter"&&n in a)return tt[s]=n;n=Ad(n);for(let t=0;t<xn.length;t++){const c=xn[t]+n;if(c in a)return tt[s]=c}return s}const Ln="http://www.w3.org/1999/xlink";function Ep(a,s,d,n,t){if(n&&s.startsWith("xlink:"))d==null?a.removeAttributeNS(Ln,s.slice(6,s.length)):a.setAttributeNS(Ln,s,d);else{const c=Iv(s);d==null||c&&!ve(d)?a.removeAttribute(s):a.setAttribute(s,c?"":d)}}function Ap(a,s,d,n,t,c,e){if(s==="innerHTML"||s==="textContent"){n&&e(n,t,c),a[s]=d??"";return}const l=a.tagName;if(s==="value"&&l!=="PROGRESS"&&!l.includes("-")){a._value=d;const r=l==="OPTION"?a.getAttribute("value"):a.value,o=d??"";r!==o&&(a.value=o),d==null&&a.removeAttribute(s);return}let p=!1;if(d===""||d==null){const r=typeof a[s];r==="boolean"?d=ve(d):d==null&&r==="string"?(d="",p=!0):r==="number"&&(d=0,p=!0)}try{a[s]=d}catch{}p&&a.removeAttribute(s)}function Mp(a,s,d,n){a.addEventListener(s,d,n)}function Fp(a,s,d,n){a.removeEventListener(s,d,n)}function Ip(a,s,d,n,t=null){const c=a._vei||(a._vei={}),e=c[s];if(n&&e)e.value=n;else{const[l,p]=Rp(s);if(n){const r=c[s]=Jp(n,t);Mp(a,l,r,p)}else e&&(Fp(a,l,e,p),c[s]=void 0)}}const jn=/(?:Once|Passive|Capture)$/;function Rp(a){let s;if(jn.test(a)){s={};let n;for(;n=a.match(jn);)a=a.slice(0,a.length-n[0].length),s[n[0].toLowerCase()]=!0}return[a[2]===":"?a.slice(3):Us(a.slice(2)),s]}let nt=0;const Hp=Promise.resolve(),Bp=()=>nt||(Hp.then(()=>nt=0),nt=Date.now());function Jp(a,s){const d=n=>{if(!n._vts)n._vts=Date.now();else if(n._vts<=d.attached)return;Fa(Dp(n,d.value),s,5,[n])};return d.value=a,d.attached=Bp(),d}function Dp(a,s){if(R(s)){const d=a.stopImmediatePropagation;return a.stopImmediatePropagation=()=>{d.call(a),a._stopped=!0},s.map(n=>t=>!t._stopped&&n&&n(t))}else return s}const Pn=/^on[a-z]/,Wp=(a,s,d,n,t=!1,c,e,l,p)=>{s==="class"?Np(a,n,t):s==="style"?Op(a,d,n):Od(s)?xt(s)||Ip(a,s,d,n,e):(s[0]==="."?(s=s.slice(1),!0):s[0]==="^"?(s=s.slice(1),!1):Up(a,s,n,t))?Ap(a,s,n,c,e,l,p):(s==="true-value"?a._trueValue=n:s==="false-value"&&(a._falseValue=n),Ep(a,s,n,t))};function Up(a,s,d,n){return n?!!(s==="innerHTML"||s==="textContent"||s in a&&Pn.test(s)&&B(d)):s==="spellcheck"||s==="draggable"||s==="translate"||s==="form"||s==="list"&&a.tagName==="INPUT"||s==="type"&&a.tagName==="TEXTAREA"||Pn.test(s)&&qa(d)?!1:s in a}const os="transition",Zs="animation",W=(a,{slots:s})=>Ut(Ac,Kp(a),s);W.displayName="Transition";const dv={name:String,type:String,css:{type:Boolean,default:!0},duration:[String,Number,Object],enterFromClass:String,enterActiveClass:String,enterToClass:String,appearFromClass:String,appearActiveClass:String,appearToClass:String,leaveFromClass:String,leaveActiveClass:String,leaveToClass:String};W.props=_a({},Oe,dv);const qs=(a,s=[])=>{R(a)?a.forEach(d=>d(...s)):a&&a(...s)},Vn=a=>a?R(a)?a.some(s=>s.length>1):a.length>1:!1;function Kp(a){const s={};for(const $ in a)$ in dv||(s[$]=a[$]);if(a.css===!1)return s;const{name:d="v",type:n,duration:t,enterFromClass:c=`${d}-enter-from`,enterActiveClass:e=`${d}-enter-active`,enterToClass:l=`${d}-enter-to`,appearFromClass:p=c,appearActiveClass:r=e,appearToClass:o=l,leaveFromClass:b=`${d}-leave-from`,leaveActiveClass:w=`${d}-leave-active`,leaveToClass:g=`${d}-leave-to`}=a,L=Xp(t),j=L&&L[0],I=L&&L[1],{onBeforeEnter:N,onEnter:E,onEnterCancelled:D,onLeave:O,onLeaveCancelled:la,onBeforeAppear:ga=N,onAppear:Ca=E,onAppearCancelled:J=D}=s,oa=($,ta,Pa)=>{ys($,ta?o:l),ys($,ta?r:e),Pa&&Pa()},ea=($,ta)=>{$._isLeaving=!1,ys($,b),ys($,g),ys($,w),ta&&ta()},Sa=$=>(ta,Pa)=>{const ss=$?Ca:E,ka=()=>oa(ta,$,Pa);qs(ss,[ta,ka]),Nn(()=>{ys(ta,$?p:c),fs(ta,$?o:l),Vn(ss)||On(ta,n,j,ka)})};return _a(s,{onBeforeEnter($){qs(N,[$]),fs($,c),fs($,e)},onBeforeAppear($){qs(ga,[$]),fs($,p),fs($,r)},onEnter:Sa(!1),onAppear:Sa(!0),onLeave($,ta){$._isLeaving=!0;const Pa=()=>ea($,ta);fs($,b),Qp(),fs($,w),Nn(()=>{$._isLeaving&&(ys($,b),fs($,g),Vn(O)||On($,n,I,Pa))}),qs(O,[$,Pa])},onEnterCancelled($){oa($,!1),qs(D,[$])},onAppearCancelled($){oa($,!0),qs(J,[$])},onLeaveCancelled($){ea($),qs(la,[$])}})}function Xp(a){if(a==null)return null;if(wa(a))return[et(a.enter),et(a.leave)];{const s=et(a);return[s,s]}}function et(a){return Ov(a)}function fs(a,s){s.split(/\s+/).forEach(d=>d&&a.classList.add(d)),(a._vtc||(a._vtc=new Set)).add(s)}function ys(a,s){s.split(/\s+/).forEach(n=>n&&a.classList.remove(n));const{_vtc:d}=a;d&&(d.delete(s),d.size||(a._vtc=void 0))}function Nn(a){requestAnimationFrame(()=>{requestAnimationFrame(a)})}let Yp=0;function On(a,s,d,n){const t=a._endId=++Yp,c=()=>{t===a._endId&&n()};if(d)return setTimeout(c,d);const{type:e,timeout:l,propCount:p}=Gp(a,s);if(!e)return n();const r=e+"end";let o=0;const b=()=>{a.removeEventListener(r,w),c()},w=g=>{g.target===a&&++o>=p&&b()};setTimeout(()=>{o<p&&b()},l+1),a.addEventListener(r,w)}function Gp(a,s){const d=window.getComputedStyle(a),n=L=>(d[L]||"").split(", "),t=n(`${os}Delay`),c=n(`${os}Duration`),e=$n(t,c),l=n(`${Zs}Delay`),p=n(`${Zs}Duration`),r=$n(l,p);let o=null,b=0,w=0;s===os?e>0&&(o=os,b=e,w=c.length):s===Zs?r>0&&(o=Zs,b=r,w=p.length):(b=Math.max(e,r),o=b>0?e>r?os:Zs:null,w=o?o===os?c.length:p.length:0);const g=o===os&&/\b(transform|all)(,|$)/.test(n(`${os}Property`).toString());return{type:o,timeout:b,propCount:w,hasTransform:g}}function $n(a,s){for(;a.length<s.length;)a=a.concat(a);return Math.max(...s.map((d,n)=>En(d)+En(a[n])))}function En(a){return Number(a.slice(0,-1).replace(",","."))*1e3}function Qp(){return document.body.offsetHeight}const Y={beforeMount(a,{value:s},{transition:d}){a._vod=a.style.display==="none"?"":a.style.display,d&&s?d.beforeEnter(a):ad(a,s)},mounted(a,{value:s},{transition:d}){d&&s&&d.enter(a)},updated(a,{value:s,oldValue:d},{transition:n}){!s!=!d&&(n?s?(n.beforeEnter(a),ad(a,!0),n.enter(a)):n.leave(a,()=>{ad(a,!1)}):ad(a,s))},beforeUnmount(a,{value:s}){ad(a,s)}};function ad(a,s){a.style.display=s?a._vod:"none"}const Zp=_a({patchProp:Wp},Vp);let An;function al(){return An||(An=lp(Zp))}const sl=(...a)=>{const s=al().createApp(...a),{mount:d}=s;return s.mount=n=>{const t=dl(n);if(!t)return;const c=s._component;!B(c)&&!c.render&&!c.template&&(c.template=t.innerHTML),t.innerHTML="";const e=d(t,!1,t instanceof SVGElement);return t instanceof Element&&(t.removeAttribute("v-cloak"),t.setAttribute("data-v-app","")),e},s};function dl(a){return qa(a)?document.querySelector(a):a}var tl=!1;/*!
 * pinia v2.1.6
 * (c) 2023 Eduardo San Martin Morote
 * @license MIT
 */const nl=Symbol();var Mn;(function(a){a.direct="direct",a.patchObject="patch object",a.patchFunction="patch function"})(Mn||(Mn={}));function el(){const a=Hv(!0),s=a.run(()=>ua({}));let d=[],n=[];const t=Ft({install(c){t._a=c,c.provide(nl,t),c.config.globalProperties.$pinia=t,n.forEach(e=>d.push(e)),n=[]},use(c){return!this._a&&!tl?n.push(c):d.push(c),this},_p:d,_a:null,_e:a,_s:new Map,state:s});return t}/*!
  * vue-router v4.2.4
  * (c) 2023 Eduardo San Martin Morote
  * @license MIT
  */const Ms=typeof window<"u";function vl(a){return a.__esModule||a[Symbol.toStringTag]==="Module"}const na=Object.assign;function vt(a,s){const d={};for(const n in s){const t=s[n];d[n]=Ua(t)?t.map(a):a(t)}return d}const vd=()=>{},Ua=Array.isArray,cl=/\/$/,pl=a=>a.replace(cl,"");function ct(a,s,d="/"){let n,t={},c="",e="";const l=s.indexOf("#");let p=s.indexOf("?");return l<p&&l>=0&&(p=-1),p>-1&&(n=s.slice(0,p),c=s.slice(p+1,l>-1?l:s.length),t=a(c)),l>-1&&(n=n||s.slice(0,l),e=s.slice(l,s.length)),n=ol(n??s,d),{fullPath:n+(c&&"?")+c+e,path:n,query:t,hash:e}}function ll(a,s){const d=s.query?a(s.query):"";return s.path+(d&&"?")+d+(s.hash||"")}function Fn(a,s){return!s||!a.toLowerCase().startsWith(s.toLowerCase())?a:a.slice(s.length)||"/"}function il(a,s,d){const n=s.matched.length-1,t=d.matched.length-1;return n>-1&&n===t&&Ds(s.matched[n],d.matched[t])&&tv(s.params,d.params)&&a(s.query)===a(d.query)&&s.hash===d.hash}function Ds(a,s){return(a.aliasOf||a)===(s.aliasOf||s)}function tv(a,s){if(Object.keys(a).length!==Object.keys(s).length)return!1;for(const d in a)if(!rl(a[d],s[d]))return!1;return!0}function rl(a,s){return Ua(a)?In(a,s):Ua(s)?In(s,a):a===s}function In(a,s){return Ua(s)?a.length===s.length&&a.every((d,n)=>d===s[n]):a.length===1&&a[0]===s}function ol(a,s){if(a.startsWith("/"))return a;if(!a)return s;const d=s.split("/"),n=a.split("/"),t=n[n.length-1];(t===".."||t===".")&&n.push("");let c=d.length-1,e,l;for(e=0;e<n.length;e++)if(l=n[e],l!==".")if(l==="..")c>1&&c--;else break;return d.slice(0,c).join("/")+"/"+n.slice(e-(e===n.length?1:0)).join("/")}var bd;(function(a){a.pop="pop",a.push="push"})(bd||(bd={}));var cd;(function(a){a.back="back",a.forward="forward",a.unknown=""})(cd||(cd={}));function fl(a){if(!a)if(Ms){const s=document.querySelector("base");a=s&&s.getAttribute("href")||"/",a=a.replace(/^\w+:\/\/[^\/]+/,"")}else a="/";return a[0]!=="/"&&a[0]!=="#"&&(a="/"+a),pl(a)}const bl=/^[^#]+#/;function ul(a,s){return a.replace(bl,"#")+s}function wl(a,s){const d=document.documentElement.getBoundingClientRect(),n=a.getBoundingClientRect();return{behavior:s.behavior,left:n.left-d.left-(s.left||0),top:n.top-d.top-(s.top||0)}}const Xd=()=>({left:window.pageXOffset,top:window.pageYOffset});function ml(a){let s;if("el"in a){const d=a.el,n=typeof d=="string"&&d.startsWith("#"),t=typeof d=="string"?n?document.getElementById(d.slice(1)):document.querySelector(d):d;if(!t)return;s=wl(t,a)}else s=a;"scrollBehavior"in document.documentElement.style?window.scrollTo(s):window.scrollTo(s.left!=null?s.left:window.pageXOffset,s.top!=null?s.top:window.pageYOffset)}function Rn(a,s){return(history.state?history.state.position-s:-1)+a}const St=new Map;function hl(a,s){St.set(a,s)}function kl(a){const s=St.get(a);return St.delete(a),s}let gl=()=>location.protocol+"//"+location.host;function nv(a,s){const{pathname:d,search:n,hash:t}=s,c=a.indexOf("#");if(c>-1){let l=t.includes(a.slice(c))?a.slice(c).length:1,p=t.slice(l);return p[0]!=="/"&&(p="/"+p),Fn(p,"")}return Fn(d,a)+n+t}function Tl(a,s,d,n){let t=[],c=[],e=null;const l=({state:w})=>{const g=nv(a,location),L=d.value,j=s.value;let I=0;if(w){if(d.value=g,s.value=w,e&&e===L){e=null;return}I=j?w.position-j.position:0}else n(g);t.forEach(N=>{N(d.value,L,{delta:I,type:bd.pop,direction:I?I>0?cd.forward:cd.back:cd.unknown})})};function p(){e=d.value}function r(w){t.push(w);const g=()=>{const L=t.indexOf(w);L>-1&&t.splice(L,1)};return c.push(g),g}function o(){const{history:w}=window;w.state&&w.replaceState(na({},w.state,{scroll:Xd()}),"")}function b(){for(const w of c)w();c=[],window.removeEventListener("popstate",l),window.removeEventListener("beforeunload",o)}return window.addEventListener("popstate",l),window.addEventListener("beforeunload",o,{passive:!0}),{pauseListeners:p,listen:r,destroy:b}}function Hn(a,s,d,n=!1,t=!1){return{back:a,current:s,forward:d,replaced:n,position:window.history.length,scroll:t?Xd():null}}function _l(a){const{history:s,location:d}=window,n={value:nv(a,d)},t={value:s.state};t.value||c(n.value,{back:null,current:n.value,forward:null,position:s.length-1,replaced:!0,scroll:null},!0);function c(p,r,o){const b=a.indexOf("#"),w=b>-1?(d.host&&document.querySelector("base")?a:a.slice(b))+p:gl()+a+p;try{s[o?"replaceState":"pushState"](r,"",w),t.value=r}catch(g){console.error(g),d[o?"replace":"assign"](w)}}function e(p,r){const o=na({},s.state,Hn(t.value.back,p,t.value.forward,!0),r,{position:t.value.position});c(p,o,!0),n.value=p}function l(p,r){const o=na({},t.value,s.state,{forward:p,scroll:Xd()});c(o.current,o,!0);const b=na({},Hn(n.value,p,null),{position:o.position+1},r);c(p,b,!1),n.value=p}return{location:n,state:t,push:l,replace:e}}function zl(a){a=fl(a);const s=_l(a),d=Tl(a,s.state,s.location,s.replace);function n(c,e=!0){e||d.pauseListeners(),history.go(c)}const t=na({location:"",base:a,go:n,createHref:ul.bind(null,a)},s,d);return Object.defineProperty(t,"location",{enumerable:!0,get:()=>s.location.value}),Object.defineProperty(t,"state",{enumerable:!0,get:()=>s.state.value}),t}function Sl(a){return typeof a=="string"||a&&typeof a=="object"}function ev(a){return typeof a=="string"||typeof a=="symbol"}const bs={path:"/",name:void 0,params:{},query:{},hash:"",fullPath:"/",matched:[],meta:{},redirectedFrom:void 0},vv=Symbol("");var Bn;(function(a){a[a.aborted=4]="aborted",a[a.cancelled=8]="cancelled",a[a.duplicated=16]="duplicated"})(Bn||(Bn={}));function Ws(a,s){return na(new Error,{type:a,[vv]:!0},s)}function ts(a,s){return a instanceof Error&&vv in a&&(s==null||!!(a.type&s))}const Jn="[^/]+?",ql={sensitive:!1,strict:!1,start:!0,end:!0},yl=/[.+*?^${}()[\]/\\]/g;function Cl(a,s){const d=na({},ql,s),n=[];let t=d.start?"^":"";const c=[];for(const r of a){const o=r.length?[]:[90];d.strict&&!r.length&&(t+="/");for(let b=0;b<r.length;b++){const w=r[b];let g=40+(d.sensitive?.25:0);if(w.type===0)b||(t+="/"),t+=w.value.replace(yl,"\\$&"),g+=40;else if(w.type===1){const{value:L,repeatable:j,optional:I,regexp:N}=w;c.push({name:L,repeatable:j,optional:I});const E=N||Jn;if(E!==Jn){g+=10;try{new RegExp(`(${E})`)}catch(O){throw new Error(`Invalid custom RegExp for param "${L}" (${E}): `+O.message)}}let D=j?`((?:${E})(?:/(?:${E}))*)`:`(${E})`;b||(D=I&&r.length<2?`(?:/${D})`:"/"+D),I&&(D+="?"),t+=D,g+=20,I&&(g+=-8),j&&(g+=-20),E===".*"&&(g+=-50)}o.push(g)}n.push(o)}if(d.strict&&d.end){const r=n.length-1;n[r][n[r].length-1]+=.7000000000000001}d.strict||(t+="/?"),d.end?t+="$":d.strict&&(t+="(?:/|$)");const e=new RegExp(t,d.sensitive?"":"i");function l(r){const o=r.match(e),b={};if(!o)return null;for(let w=1;w<o.length;w++){const g=o[w]||"",L=c[w-1];b[L.name]=g&&L.repeatable?g.split("/"):g}return b}function p(r){let o="",b=!1;for(const w of a){(!b||!o.endsWith("/"))&&(o+="/"),b=!1;for(const g of w)if(g.type===0)o+=g.value;else if(g.type===1){const{value:L,repeatable:j,optional:I}=g,N=L in r?r[L]:"";if(Ua(N)&&!j)throw new Error(`Provided param "${L}" is an array but it is not repeatable (* or + modifiers)`);const E=Ua(N)?N.join("/"):N;if(!E)if(I)w.length<2&&(o.endsWith("/")?o=o.slice(0,-1):b=!0);else throw new Error(`Missing required param "${L}"`);o+=E}}return o||"/"}return{re:e,score:n,keys:c,parse:l,stringify:p}}function xl(a,s){let d=0;for(;d<a.length&&d<s.length;){const n=s[d]-a[d];if(n)return n;d++}return a.length<s.length?a.length===1&&a[0]===40+40?-1:1:a.length>s.length?s.length===1&&s[0]===40+40?1:-1:0}function Ll(a,s){let d=0;const n=a.score,t=s.score;for(;d<n.length&&d<t.length;){const c=xl(n[d],t[d]);if(c)return c;d++}if(Math.abs(t.length-n.length)===1){if(Dn(n))return 1;if(Dn(t))return-1}return t.length-n.length}function Dn(a){const s=a[a.length-1];return a.length>0&&s[s.length-1]<0}const jl={type:0,value:""},Pl=/[a-zA-Z0-9_]/;function Vl(a){if(!a)return[[]];if(a==="/")return[[jl]];if(!a.startsWith("/"))throw new Error(`Invalid path "${a}"`);function s(g){throw new Error(`ERR (${d})/"${r}": ${g}`)}let d=0,n=d;const t=[];let c;function e(){c&&t.push(c),c=[]}let l=0,p,r="",o="";function b(){r&&(d===0?c.push({type:0,value:r}):d===1||d===2||d===3?(c.length>1&&(p==="*"||p==="+")&&s(`A repeatable param (${r}) must be alone in its segment. eg: '/:ids+.`),c.push({type:1,value:r,regexp:o,repeatable:p==="*"||p==="+",optional:p==="*"||p==="?"})):s("Invalid state to consume buffer"),r="")}function w(){r+=p}for(;l<a.length;){if(p=a[l++],p==="\\"&&d!==2){n=d,d=4;continue}switch(d){case 0:p==="/"?(r&&b(),e()):p===":"?(b(),d=1):w();break;case 4:w(),d=n;break;case 1:p==="("?d=2:Pl.test(p)?w():(b(),d=0,p!=="*"&&p!=="?"&&p!=="+"&&l--);break;case 2:p===")"?o[o.length-1]=="\\"?o=o.slice(0,-1)+p:d=3:o+=p;break;case 3:b(),d=0,p!=="*"&&p!=="?"&&p!=="+"&&l--,o="";break;default:s("Unknown state");break}}return d===2&&s(`Unfinished custom RegExp for param "${r}"`),b(),e(),t}function Nl(a,s,d){const n=Cl(Vl(a.path),d),t=na(n,{record:a,parent:s,children:[],alias:[]});return s&&!t.record.aliasOf==!s.record.aliasOf&&s.children.push(t),t}function Ol(a,s){const d=[],n=new Map;s=Kn({strict:!1,end:!0,sensitive:!1},s);function t(o){return n.get(o)}function c(o,b,w){const g=!w,L=$l(o);L.aliasOf=w&&w.record;const j=Kn(s,o),I=[L];if("alias"in o){const D=typeof o.alias=="string"?[o.alias]:o.alias;for(const O of D)I.push(na({},L,{components:w?w.record.components:L.components,path:O,aliasOf:w?w.record:L}))}let N,E;for(const D of I){const{path:O}=D;if(b&&O[0]!=="/"){const la=b.record.path,ga=la[la.length-1]==="/"?"":"/";D.path=b.record.path+(O&&ga+O)}if(N=Nl(D,b,j),w?w.alias.push(N):(E=E||N,E!==N&&E.alias.push(N),g&&o.name&&!Un(N)&&e(o.name)),L.children){const la=L.children;for(let ga=0;ga<la.length;ga++)c(la[ga],N,w&&w.children[ga])}w=w||N,(N.record.components&&Object.keys(N.record.components).length||N.record.name||N.record.redirect)&&p(N)}return E?()=>{e(E)}:vd}function e(o){if(ev(o)){const b=n.get(o);b&&(n.delete(o),d.splice(d.indexOf(b),1),b.children.forEach(e),b.alias.forEach(e))}else{const b=d.indexOf(o);b>-1&&(d.splice(b,1),o.record.name&&n.delete(o.record.name),o.children.forEach(e),o.alias.forEach(e))}}function l(){return d}function p(o){let b=0;for(;b<d.length&&Ll(o,d[b])>=0&&(o.record.path!==d[b].record.path||!cv(o,d[b]));)b++;d.splice(b,0,o),o.record.name&&!Un(o)&&n.set(o.record.name,o)}function r(o,b){let w,g={},L,j;if("name"in o&&o.name){if(w=n.get(o.name),!w)throw Ws(1,{location:o});j=w.record.name,g=na(Wn(b.params,w.keys.filter(E=>!E.optional).map(E=>E.name)),o.params&&Wn(o.params,w.keys.map(E=>E.name))),L=w.stringify(g)}else if("path"in o)L=o.path,w=d.find(E=>E.re.test(L)),w&&(g=w.parse(L),j=w.record.name);else{if(w=b.name?n.get(b.name):d.find(E=>E.re.test(b.path)),!w)throw Ws(1,{location:o,currentLocation:b});j=w.record.name,g=na({},b.params,o.params),L=w.stringify(g)}const I=[];let N=w;for(;N;)I.unshift(N.record),N=N.parent;return{name:j,path:L,params:g,matched:I,meta:Al(I)}}return a.forEach(o=>c(o)),{addRoute:c,resolve:r,removeRoute:e,getRoutes:l,getRecordMatcher:t}}function Wn(a,s){const d={};for(const n of s)n in a&&(d[n]=a[n]);return d}function $l(a){return{path:a.path,redirect:a.redirect,name:a.name,meta:a.meta||{},aliasOf:void 0,beforeEnter:a.beforeEnter,props:El(a),children:a.children||[],instances:{},leaveGuards:new Set,updateGuards:new Set,enterCallbacks:{},components:"components"in a?a.components||null:a.component&&{default:a.component}}}function El(a){const s={},d=a.props||!1;if("component"in a)s.default=d;else for(const n in a.components)s[n]=typeof d=="object"?d[n]:d;return s}function Un(a){for(;a;){if(a.record.aliasOf)return!0;a=a.parent}return!1}function Al(a){return a.reduce((s,d)=>na(s,d.meta),{})}function Kn(a,s){const d={};for(const n in a)d[n]=n in s?s[n]:a[n];return d}function cv(a,s){return s.children.some(d=>d===a||cv(a,d))}const pv=/#/g,Ml=/&/g,Fl=/\//g,Il=/=/g,Rl=/\?/g,lv=/\+/g,Hl=/%5B/g,Bl=/%5D/g,iv=/%5E/g,Jl=/%60/g,rv=/%7B/g,Dl=/%7C/g,ov=/%7D/g,Wl=/%20/g;function Kt(a){return encodeURI(""+a).replace(Dl,"|").replace(Hl,"[").replace(Bl,"]")}function Ul(a){return Kt(a).replace(rv,"{").replace(ov,"}").replace(iv,"^")}function qt(a){return Kt(a).replace(lv,"%2B").replace(Wl,"+").replace(pv,"%23").replace(Ml,"%26").replace(Jl,"`").replace(rv,"{").replace(ov,"}").replace(iv,"^")}function Kl(a){return qt(a).replace(Il,"%3D")}function Xl(a){return Kt(a).replace(pv,"%23").replace(Rl,"%3F")}function Yl(a){return a==null?"":Xl(a).replace(Fl,"%2F")}function Nd(a){try{return decodeURIComponent(""+a)}catch{}return""+a}function Gl(a){const s={};if(a===""||a==="?")return s;const n=(a[0]==="?"?a.slice(1):a).split("&");for(let t=0;t<n.length;++t){const c=n[t].replace(lv," "),e=c.indexOf("="),l=Nd(e<0?c:c.slice(0,e)),p=e<0?null:Nd(c.slice(e+1));if(l in s){let r=s[l];Ua(r)||(r=s[l]=[r]),r.push(p)}else s[l]=p}return s}function Xn(a){let s="";for(let d in a){const n=a[d];if(d=Kl(d),n==null){n!==void 0&&(s+=(s.length?"&":"")+d);continue}(Ua(n)?n.map(c=>c&&qt(c)):[n&&qt(n)]).forEach(c=>{c!==void 0&&(s+=(s.length?"&":"")+d,c!=null&&(s+="="+c))})}return s}function Ql(a){const s={};for(const d in a){const n=a[d];n!==void 0&&(s[d]=Ua(n)?n.map(t=>t==null?null:""+t):n==null?n:""+n)}return s}const Zl=Symbol(""),Yn=Symbol(""),Xt=Symbol(""),fv=Symbol(""),yt=Symbol("");function sd(){let a=[];function s(n){return a.push(n),()=>{const t=a.indexOf(n);t>-1&&a.splice(t,1)}}function d(){a=[]}return{add:s,list:()=>a.slice(),reset:d}}function ws(a,s,d,n,t){const c=n&&(n.enterCallbacks[t]=n.enterCallbacks[t]||[]);return()=>new Promise((e,l)=>{const p=b=>{b===!1?l(Ws(4,{from:d,to:s})):b instanceof Error?l(b):Sl(b)?l(Ws(2,{from:s,to:b})):(c&&n.enterCallbacks[t]===c&&typeof b=="function"&&c.push(b),e())},r=a.call(n&&n.instances[t],s,d,p);let o=Promise.resolve(r);a.length<3&&(o=o.then(p)),o.catch(b=>l(b))})}function pt(a,s,d,n){const t=[];for(const c of a)for(const e in c.components){let l=c.components[e];if(!(s!=="beforeRouteEnter"&&!c.instances[e]))if(a2(l)){const r=(l.__vccOpts||l)[s];r&&t.push(ws(r,d,n,c,e))}else{let p=l();t.push(()=>p.then(r=>{if(!r)return Promise.reject(new Error(`Couldn't resolve component "${e}" at "${c.path}"`));const o=vl(r)?r.default:r;c.components[e]=o;const w=(o.__vccOpts||o)[s];return w&&ws(w,d,n,c,e)()}))}}return t}function a2(a){return typeof a=="object"||"displayName"in a||"props"in a||"__vccOpts"in a}function Gn(a){const s=es(Xt),d=es(fv),n=Ba(()=>s.resolve(Vs(a.to))),t=Ba(()=>{const{matched:p}=n.value,{length:r}=p,o=p[r-1],b=d.matched;if(!o||!b.length)return-1;const w=b.findIndex(Ds.bind(null,o));if(w>-1)return w;const g=Qn(p[r-2]);return r>1&&Qn(o)===g&&b[b.length-1].path!==g?b.findIndex(Ds.bind(null,p[r-2])):w}),c=Ba(()=>t.value>-1&&n2(d.params,n.value.params)),e=Ba(()=>t.value>-1&&t.value===d.matched.length-1&&tv(d.params,n.value.params));function l(p={}){return t2(p)?s[Vs(a.replace)?"replace":"push"](Vs(a.to)).catch(vd):Promise.resolve()}return{route:n,href:Ba(()=>n.value.href),isActive:c,isExactActive:e,navigate:l}}const s2=Ae({name:"RouterLink",compatConfig:{MODE:3},props:{to:{type:[String,Object],required:!0},replace:Boolean,activeClass:String,exactActiveClass:String,custom:Boolean,ariaCurrentValue:{type:String,default:"page"}},useLink:Gn,setup(a,{slots:s}){const d=Id(Gn(a)),{options:n}=es(Xt),t=Ba(()=>({[Zn(a.activeClass,n.linkActiveClass,"router-link-active")]:d.isActive,[Zn(a.exactActiveClass,n.linkExactActiveClass,"router-link-exact-active")]:d.isExactActive}));return()=>{const c=s.default&&s.default(d);return a.custom?c:Ut("a",{"aria-current":d.isExactActive?a.ariaCurrentValue:null,href:d.href,onClick:d.navigate,class:t.value},c)}}}),d2=s2;function t2(a){if(!(a.metaKey||a.altKey||a.ctrlKey||a.shiftKey)&&!a.defaultPrevented&&!(a.button!==void 0&&a.button!==0)){if(a.currentTarget&&a.currentTarget.getAttribute){const s=a.currentTarget.getAttribute("target");if(/\b_blank\b/i.test(s))return}return a.preventDefault&&a.preventDefault(),!0}}function n2(a,s){for(const d in s){const n=s[d],t=a[d];if(typeof n=="string"){if(n!==t)return!1}else if(!Ua(t)||t.length!==n.length||n.some((c,e)=>c!==t[e]))return!1}return!0}function Qn(a){return a?a.aliasOf?a.aliasOf.path:a.path:""}const Zn=(a,s,d)=>a??s??d,e2=Ae({name:"RouterView",inheritAttrs:!1,props:{name:{type:String,default:"default"},route:Object},compatConfig:{MODE:3},setup(a,{attrs:s,slots:d}){const n=es(yt),t=Ba(()=>a.route||n.value),c=es(Yn,0),e=Ba(()=>{let r=Vs(c);const{matched:o}=t.value;let b;for(;(b=o[r])&&!b.components;)r++;return r}),l=Ba(()=>t.value.matched[e.value]);qd(Yn,Ba(()=>e.value+1)),qd(Zl,l),qd(yt,t);const p=ua();return zd(()=>[p.value,l.value,a.name],([r,o,b],[w,g,L])=>{o&&(o.instances[b]=r,g&&g!==o&&r&&r===w&&(o.leaveGuards.size||(o.leaveGuards=g.leaveGuards),o.updateGuards.size||(o.updateGuards=g.updateGuards))),r&&o&&(!g||!Ds(o,g)||!w)&&(o.enterCallbacks[b]||[]).forEach(j=>j(r))},{flush:"post"}),()=>{const r=t.value,o=a.name,b=l.value,w=b&&b.components[o];if(!w)return ae(d.default,{Component:w,route:r});const g=b.props[o],L=g?g===!0?r.params:typeof g=="function"?g(r):g:null,I=Ut(w,na({},L,s,{onVnodeUnmounted:N=>{N.component.isUnmounted&&(b.instances[o]=null)},ref:p}));return ae(d.default,{Component:I,route:r})||I}}});function ae(a,s){if(!a)return null;const d=a(s);return d.length===1?d[0]:d}const bv=e2;function v2(a){const s=Ol(a.routes,a),d=a.parseQuery||Gl,n=a.stringifyQuery||Xn,t=a.history,c=sd(),e=sd(),l=sd(),p=mc(bs);let r=bs;Ms&&a.scrollBehavior&&"scrollRestoration"in history&&(history.scrollRestoration="manual");const o=vt.bind(null,h=>""+h),b=vt.bind(null,Yl),w=vt.bind(null,Nd);function g(h,P){let y,A;return ev(h)?(y=s.getRecordMatcher(h),A=P):A=h,s.addRoute(A,y)}function L(h){const P=s.getRecordMatcher(h);P&&s.removeRoute(P)}function j(){return s.getRoutes().map(h=>h.record)}function I(h){return!!s.getRecordMatcher(h)}function N(h,P){if(P=na({},P||p.value),typeof h=="string"){const u=ct(d,h,P.path),m=s.resolve({path:u.path},P),k=t.createHref(u.fullPath);return na(u,m,{params:w(m.params),hash:Nd(u.hash),redirectedFrom:void 0,href:k})}let y;if("path"in h)y=na({},h,{path:ct(d,h.path,P.path).path});else{const u=na({},h.params);for(const m in u)u[m]==null&&delete u[m];y=na({},h,{params:b(u)}),P.params=b(P.params)}const A=s.resolve(y,P),sa=h.hash||"";A.params=o(w(A.params));const i=ll(n,na({},h,{hash:Ul(sa),path:A.path})),f=t.createHref(i);return na({fullPath:i,hash:sa,query:n===Xn?Ql(h.query):h.query||{}},A,{redirectedFrom:void 0,href:f})}function E(h){return typeof h=="string"?ct(d,h,p.value.path):na({},h)}function D(h,P){if(r!==h)return Ws(8,{from:P,to:h})}function O(h){return Ca(h)}function la(h){return O(na(E(h),{replace:!0}))}function ga(h){const P=h.matched[h.matched.length-1];if(P&&P.redirect){const{redirect:y}=P;let A=typeof y=="function"?y(h):y;return typeof A=="string"&&(A=A.includes("?")||A.includes("#")?A=E(A):{path:A},A.params={}),na({query:h.query,hash:h.hash,params:"path"in A?{}:h.params},A)}}function Ca(h,P){const y=r=N(h),A=p.value,sa=h.state,i=h.force,f=h.replace===!0,u=ga(y);if(u)return Ca(na(E(u),{state:typeof u=="object"?na({},sa,u.state):sa,force:i,replace:f}),P||y);const m=y;m.redirectedFrom=P;let k;return!i&&il(n,A,y)&&(k=Ws(16,{to:m,from:A}),Ka(A,A,!0,!1)),(k?Promise.resolve(k):ea(m,A)).catch(_=>ts(_)?ts(_,2)?_:is(_):aa(_,m,A)).then(_=>{if(_){if(ts(_,2))return Ca(na({replace:f},E(_.to),{state:typeof _.to=="object"?na({},sa,_.to.state):sa,force:i}),P||m)}else _=$(m,A,!0,f,sa);return Sa(m,A,_),_})}function J(h,P){const y=D(h,P);return y?Promise.reject(y):Promise.resolve()}function oa(h){const P=$s.values().next().value;return P&&typeof P.runWithContext=="function"?P.runWithContext(h):h()}function ea(h,P){let y;const[A,sa,i]=c2(h,P);y=pt(A.reverse(),"beforeRouteLeave",h,P);for(const u of A)u.leaveGuards.forEach(m=>{y.push(ws(m,h,P))});const f=J.bind(null,h,P);return y.push(f),xa(y).then(()=>{y=[];for(const u of c.list())y.push(ws(u,h,P));return y.push(f),xa(y)}).then(()=>{y=pt(sa,"beforeRouteUpdate",h,P);for(const u of sa)u.updateGuards.forEach(m=>{y.push(ws(m,h,P))});return y.push(f),xa(y)}).then(()=>{y=[];for(const u of i)if(u.beforeEnter)if(Ua(u.beforeEnter))for(const m of u.beforeEnter)y.push(ws(m,h,P));else y.push(ws(u.beforeEnter,h,P));return y.push(f),xa(y)}).then(()=>(h.matched.forEach(u=>u.enterCallbacks={}),y=pt(i,"beforeRouteEnter",h,P),y.push(f),xa(y))).then(()=>{y=[];for(const u of e.list())y.push(ws(u,h,P));return y.push(f),xa(y)}).catch(u=>ts(u,8)?u:Promise.reject(u))}function Sa(h,P,y){l.list().forEach(A=>oa(()=>A(h,P,y)))}function $(h,P,y,A,sa){const i=D(h,P);if(i)return i;const f=P===bs,u=Ms?history.state:{};y&&(A||f?t.replace(h.fullPath,na({scroll:f&&u&&u.scroll},sa)):t.push(h.fullPath,sa)),p.value=h,Ka(h,P,y,f),is()}let ta;function Pa(){ta||(ta=t.listen((h,P,y)=>{if(!ud.listening)return;const A=N(h),sa=ga(A);if(sa){Ca(na(sa,{replace:!0}),A).catch(vd);return}r=A;const i=p.value;Ms&&hl(Rn(i.fullPath,y.delta),Xd()),ea(A,i).catch(f=>ts(f,12)?f:ts(f,2)?(Ca(f.to,A).then(u=>{ts(u,20)&&!y.delta&&y.type===bd.pop&&t.go(-1,!1)}).catch(vd),Promise.reject()):(y.delta&&t.go(-y.delta,!1),aa(f,A,i))).then(f=>{f=f||$(A,i,!1),f&&(y.delta&&!ts(f,8)?t.go(-y.delta,!1):y.type===bd.pop&&ts(f,20)&&t.go(-1,!1)),Sa(A,i,f)}).catch(vd)}))}let ss=sd(),ka=sd(),pa;function aa(h,P,y){is(h);const A=ka.list();return A.length?A.forEach(sa=>sa(h,P,y)):console.error(h),Promise.reject(h)}function ds(){return pa&&p.value!==bs?Promise.resolve():new Promise((h,P)=>{ss.add([h,P])})}function is(h){return pa||(pa=!h,Pa(),ss.list().forEach(([P,y])=>h?y(h):P()),ss.reset()),h}function Ka(h,P,y,A){const{scrollBehavior:sa}=a;if(!Ms||!sa)return Promise.resolve();const i=!y&&kl(Rn(h.fullPath,0))||(A||!y)&&history.state&&history.state.scroll||null;return Ce().then(()=>sa(h,P,i)).then(f=>f&&ml(f)).catch(f=>aa(f,h,P))}const Na=h=>t.go(h);let Os;const $s=new Set,ud={currentRoute:p,listening:!0,addRoute:g,removeRoute:L,hasRoute:I,getRoutes:j,resolve:N,options:a,push:O,replace:la,go:Na,back:()=>Na(-1),forward:()=>Na(1),beforeEach:c.add,beforeResolve:e.add,afterEach:l.add,onError:ka.add,isReady:ds,install(h){const P=this;h.component("RouterLink",d2),h.component("RouterView",bv),h.config.globalProperties.$router=P,Object.defineProperty(h.config.globalProperties,"$route",{enumerable:!0,get:()=>Vs(p)}),Ms&&!Os&&p.value===bs&&(Os=!0,O(t.location).catch(sa=>{}));const y={};for(const sa in bs)Object.defineProperty(y,sa,{get:()=>p.value[sa],enumerable:!0});h.provide(Xt,P),h.provide(fv,ke(y)),h.provide(yt,p);const A=h.unmount;$s.add(h),h.unmount=function(){$s.delete(h),$s.size<1&&(r=bs,ta&&ta(),ta=null,p.value=bs,Os=!1,pa=!1),A()}}};function xa(h){return h.reduce((P,y)=>P.then(()=>oa(y)),Promise.resolve())}return ud}function c2(a,s){const d=[],n=[],t=[],c=Math.max(s.matched.length,a.matched.length);for(let e=0;e<c;e++){const l=s.matched[e];l&&(a.matched.find(r=>Ds(r,l))?n.push(l):d.push(l));const p=a.matched[e];p&&(s.matched.find(r=>Ds(r,p))||t.push(p))}return[d,n,t]}const p2={__name:"App",setup(a){return(s,d)=>(da(),Qe(Vs(bv)))}},uv="/vue-learn-js/assets/title-4942f50e.svg";const ra=(a,s)=>{const d=a.__vccOpts||a;for(const[n,t]of s)d[n]=t;return d},l2={},Ts=a=>(ma("data-v-c41a158b"),a=a(),ha(),a),i2={class:""},r2=Ts(()=>v("div",{class:"svg imgLayout"},[v("img",{src:uv,alt:""})],-1)),o2=Ts(()=>v("input",{type:"checkbox",id:"nav_check",hidden:""},null,-1)),f2=Ts(()=>v("div",{class:"liPad"},"關於",-1)),b2=Ts(()=>v("div",{class:"liPad"},"Web",-1)),u2=Ts(()=>v("div",{class:"liPad"},"Html",-1)),w2=Ts(()=>v("div",{class:"liPad"},"CSS",-1)),m2=Ts(()=>v("div",{class:"liPad"},"JavaScript",-1)),h2=Ts(()=>v("label",{for:"nav_check",class:"hamburger"},[v("div"),v("div"),v("div")],-1));function k2(a,s){const d=za("router-link"),n=za("RouterLink");return da(),ca("header",null,[v("div",i2,[T(d,{to:"/"},{default:C(()=>[r2]),_:1})]),o2,v("nav",null,[v("ul",null,[v("li",null,[T(d,{to:"/about"},{default:C(()=>[f2]),_:1})]),v("li",null,[T(d,{to:"/http"},{default:C(()=>[b2]),_:1})]),v("li",null,[T(d,{to:"/html"},{default:C(()=>[u2]),_:1})]),v("li",null,[T(d,{to:"/css"},{default:C(()=>[w2]),_:1})]),v("li",null,[T(n,{to:"/js"},{default:C(()=>[m2]),_:1})])])]),h2])}const g2=ra(l2,[["render",k2],["__scopeId","data-v-c41a158b"]]);const _s=a=>(ma("data-v-bdf2cdba"),a=a(),ha(),a),T2={class:""},_2=_s(()=>v("div",{class:"svg imgLayout"},[v("img",{src:uv,alt:""})],-1)),z2=_s(()=>v("input",{type:"checkbox",id:"nav_check",hidden:""},null,-1)),S2=_s(()=>v("div",{class:"liPad"},"關於",-1)),q2=_s(()=>v("div",{class:"liPad"},"Web",-1)),y2=_s(()=>v("div",{class:"liPad"},"Html",-1)),C2=_s(()=>v("div",{class:"liPad"},"CSS",-1)),x2=_s(()=>v("div",{class:"liPad"},"JavaScript",-1)),L2=_s(()=>v("label",{for:"nav_check",class:"hamburger"},[v("div"),v("div"),v("div")],-1)),j2={__name:"NavBarFixed",setup(a){const s=ua(!0);return window.addEventListener("scroll",function(){s.value=window.scrollY}),(d,n)=>{const t=za("router-link");return da(),ca("header",{class:Md({show:s.value>0})},[v("div",T2,[T(t,{to:"/"},{default:C(()=>[_2]),_:1})]),z2,v("nav",null,[v("ul",null,[v("li",null,[T(t,{to:"/about"},{default:C(()=>[S2]),_:1})]),v("li",null,[T(t,{to:"/http"},{default:C(()=>[q2]),_:1})]),v("li",null,[T(t,{to:"/html"},{default:C(()=>[y2]),_:1})]),v("li",null,[T(t,{to:"/css"},{default:C(()=>[C2]),_:1})]),v("li",null,[T(t,{to:"/js"},{default:C(()=>[x2]),_:1})])])]),L2],2)}}},P2=ra(j2,[["__scopeId","data-v-bdf2cdba"]]);const V2=a=>(ma("data-v-0f9d02e6"),a=a(),ha(),a),N2={class:"showTimeDiv"},O2=V2(()=>v("footer",null," Copyright © 2023 Wayne Lu ",-1)),$2={__name:"Footer",setup(a){const s=ua("");return setInterval(function(){let n=new Date;s.value=`${n.getMonth()+1} / ${n.getDate()} _ ${n.getHours()} : ${n.getMinutes()}`},2e3),(()=>{let n=new Date;s.value=`${n.getMonth()+1} / ${n.getDate()} _  ${n.getHours()} : ${n.getMinutes()}`})(),(n,t)=>(da(),ca(Q,null,[v("div",N2,[v("div",null,Rv(s.value),1)]),O2],64))}},E2=ra($2,[["__scopeId","data-v-0f9d02e6"]]),A2={__name:"Layout",setup(a){return(s,d)=>{const n=za("RouterView");return da(),ca(Q,null,[T(P2),T(g2),T(n),T(E2)],64)}}},M2="/vue-learn-js/assets/wss-1b257452.svg";const F2={},ps=a=>(ma("data-v-873b931f"),a=a(),ha(),a),I2=ps(()=>v("div",{class:"sectionHolder"},null,-1)),R2=ps(()=>v("div",{class:"sectionHolder"},null,-1)),H2={class:"disCen title"},B2={class:"titleCard"},J2={class:"titleCardLeft"},D2=ps(()=>v("h1",null,"Wayne's Blog",-1)),W2=ps(()=>v("h1",null,"前端學習筆記",-1)),U2=ps(()=>v("h3",null,"記錄一些關於前端學習的筆記",-1)),K2=ps(()=>v("br",null,null,-1)),X2={class:"btnContainer"},Y2=ps(()=>v("div",{class:"btnL btn-background-slideL"}," 快速開始 ",-1)),G2=ps(()=>v("div",null,[v("a",{href:"https://github.com/wayne23123"},[v("div",{class:"btnR btn-background-slideR"},"View on GitHub")])],-1)),Q2={class:"titleCardRight"},Z2=ps(()=>v("div",{class:"cardRightImgLayout svg"},[v("img",{src:M2,alt:""})],-1)),a8=U('<div class="fourCard" data-v-873b931f><div class="fourCardContainer" data-v-873b931f><div class="cardContainer" data-v-873b931f><div class="card" data-v-873b931f><div class="cardLayout" data-v-873b931f><div class="cardTop disCen" data-v-873b931f><span class="cardTopBGC" data-v-873b931f>💡</span></div><h3 class="corTitle disCen" data-v-873b931f>About Me</h3><p class="corText" data-v-873b931f> Hi, I&#39;m Wayne Lu, <br data-v-873b931f> a passionate frontend developer from Taiwan. </p></div></div></div><div class="cardContainer" data-v-873b931f><div class="card" data-v-873b931f><div class="cardLayout" data-v-873b931f><div class="cardTop disCen" data-v-873b931f><span class="cardTopBGC" data-v-873b931f>💻</span></div><h3 class="corTitle disCen" data-v-873b931f>Languages</h3><p class="corText" data-v-873b931f>JavaScript</p></div></div></div><div class="cardContainer" data-v-873b931f><div class="card" data-v-873b931f><div class="cardLayout" data-v-873b931f><div class="cardTop disCen" data-v-873b931f><span class="cardTopBGC" data-v-873b931f>📚</span></div><h3 class="corTitle disCen" data-v-873b931f>Frontend Skills</h3><p class="corText" data-v-873b931f>Vue</p></div></div></div><div class="cardContainer" data-v-873b931f><div class="card" data-v-873b931f><div class="cardLayout" data-v-873b931f><div class="cardTop disCen" data-v-873b931f><span class="cardTopBGC" data-v-873b931f>🛠️</span></div><h3 class="corTitle disCen" data-v-873b931f>Tools</h3><p class="corText" data-v-873b931f>Vite、Webpack</p></div></div></div></div></div>',1);function s8(a,s){const d=za("router-link");return da(),ca("section",null,[I2,R2,v("div",H2,[v("div",B2,[v("div",J2,[D2,W2,U2,K2,v("div",X2,[v("div",null,[T(d,{to:"/js"},{default:C(()=>[Y2]),_:1})]),G2])]),v("div",Q2,[T(d,{to:"/"},{default:C(()=>[Z2]),_:1})])])]),a8])}const se=ra(F2,[["render",s8],["__scopeId","data-v-873b931f"]]);const Ys=a=>(ma("data-v-c2d660c8"),a=a(),ha(),a),d8=Ys(()=>v("div",{class:"sectionHolderNav"},null,-1)),t8={class:"aboutContainer disCen"},n8={class:"aboutLayout"},e8=U('<br data-v-c2d660c8><h3 class="cor36" data-v-c2d660c8># 關於此筆記</h3><p data-v-c2d660c8>Wayne Lu 的學習筆記。</p><br data-v-c2d660c8><hr data-v-c2d660c8><br data-v-c2d660c8><h3 class="cor36" data-v-c2d660c8># 都記錄些什麼?</h3><p data-v-c2d660c8>此筆記主要記錄一些關於前端學習的筆記。</p><br data-v-c2d660c8><hr data-v-c2d660c8><br data-v-c2d660c8><h3 class="cor36" data-v-c2d660c8># 康乃爾筆記法</h3><p data-v-c2d660c8>兩欄筆記法</p><p class="pFou" data-v-c2d660c8>1. 左邊關鍵字</p><p class="pFou" data-v-c2d660c8>2. 右邊筆記</p><p class="pFou" data-v-c2d660c8>3. 下面總結</p><br data-v-c2d660c8><a href="https://zh.wikipedia.org/zh-tw/%E5%BA%B7%E5%A5%88%E5%B0%94%E7%AC%94%E8%AE%B0%E6%B3%95" data-v-c2d660c8>康乃爾筆記法 @wiki</a><br data-v-c2d660c8><p class="comment" data-v-c2d660c8> 大腦中地標 -&gt; 記憶宮殿 -&gt; 透過小紙條or圖 -&gt; 記憶點(畫表情) </p><br data-v-c2d660c8><hr data-v-c2d660c8><br data-v-c2d660c8><h3 class="cor36" data-v-c2d660c8># 費曼學習法</h3><p data-v-c2d660c8>1. 把它教給一個小孩子</p><p data-v-c2d660c8>2. 回顧教學過程(ex腳本,他不懂腳本要再解釋)</p><p data-v-c2d660c8>3. 將語言條理化,簡化</p><p data-v-c2d660c8>4. 把它教給一個大人</p><br data-v-c2d660c8><a href="https://www.youtube.com/watch?v=gcbCXqjicu0" data-v-c2d660c8>費曼學習法：快速掌握新知識 @youtube 好葉</a><br data-v-c2d660c8><a href="https://www.youtube.com/watch?v=iFSVMuBDMws" data-v-c2d660c8>大腦喜歡這樣學 @youtube 超級歪</a><br data-v-c2d660c8><hr data-v-c2d660c8><br data-v-c2d660c8><h3 class="cor36" data-v-c2d660c8># 工作中如何使用 Git</h3><br data-v-c2d660c8><a href="https://juejin.cn/post/7165654391511318559" data-v-c2d660c8> 工作中如何使用 Git @掘金 沐华 </a><br data-v-c2d660c8><hr data-v-c2d660c8><br data-v-c2d660c8><h3 class="cor36" data-v-c2d660c8># 連續跑步一年變化</h3><a href="https://www.bilibili.com/video/BV1Gk4y1V7oy/?spm_id_from=333.999.0.0" data-v-c2d660c8> 連續跑步一年變化 @bilibili 李白尼的猜想 </a><br data-v-c2d660c8><a href="https://www.youtube.com/watch?v=Po91wXp_hYE&amp;t=763s" data-v-c2d660c8>空腹才是最强的良藥 @youtube Fox面</a><br data-v-c2d660c8><a href="https://www.youtube.com/watch?v=s73WwmWVqBg" data-v-c2d660c8>為什麼要睡覺 @youtube 文森說書 </a><br data-v-c2d660c8><a href="https://www.youtube.com/watch?v=3QHjv-vOlDU&amp;t=440s" data-v-c2d660c8>天才和平庸的差距，是如何區分的 @youtubr 心河擺渡</a><br data-v-c2d660c8><a href="https://www.youtube.com/watch?v=w3PIS7a7IKI" data-v-c2d660c8>智能陷阱，如何操控我們的生活? @youtubr 心河擺渡</a><br data-v-c2d660c8><a href="https://www.youtube.com/watch?v=oeybQjreWhU" data-v-c2d660c8>貧窮的本質 @youtube 艾倫的悅讀空間</a><br data-v-c2d660c8><a href="https://www.youtube.com/watch?v=wcBHHyK9ig8" data-v-c2d660c8>一流的人如何保持巔峰 @youtube 文森說書</a><br data-v-c2d660c8><a href="https://www.youtube.com/watch?v=XS_D1n3fD54" data-v-c2d660c8>總有一天你會懂 @youtube 文森說書</a><br data-v-c2d660c8><a href="https://www.youtube.com/watch?v=qrj2DcdGCPs&amp;t=39s" data-v-c2d660c8>真正的快樂處方 @youtube 文森說書</a><br data-v-c2d660c8>',60),v8={key:0},c8=Ys(()=>v("hr",null,null,-1)),p8=Ys(()=>v("br",null,null,-1)),l8=Ys(()=>v("p",null,"Http . . . 超文本傳輸協定",-1)),i8=[c8,p8,l8],r8=Ys(()=>v("div",{class:"toTopButton"},[v("div",{class:"disCen"},"___"),v("div",{class:"disCen"},"▲")],-1)),o8=[r8],f8=Ys(()=>v("div",{class:"toBotButton"},[v("div",{class:"disCen"},"▼"),v("div",{class:"disCen"},"￣")],-1)),b8=[f8],u8={__name:"AboutPage",setup(a){const s=ua(!1);window.addEventListener("scroll",function(){s.value=window.scrollY>0});function d(){window.scrollTo({top:0,left:0,behavior:"smooth"})}function n(){window.scrollTo({top:999999,left:0,behavior:"smooth"})}const t=ua(!1);function c(){t.value=!0}return(e,l)=>(da(),ca(Q,null,[d8,v("section",null,[v("div",t8,[v("div",null,[v("div",n8,[e8,v("div",{onClick:l[0]||(l[0]=p=>c()),style:{color:"#171717"}},"test"),t.value?(da(),ca("div",v8,i8)):wp("",!0)])])])]),v("div",null,[X(T(W,{name:"fade",tag:"div"},{default:C(()=>[v("div",{onClick:d,class:"toTop"},o8)]),_:1},512),[[Y,s.value]]),X(T(W,{name:"fade",tag:"div"},{default:C(()=>[v("div",{onClick:n,class:"toBot"},b8)]),_:1},512),[[Y,s.value]])])],64))}},w8=ra(u8,[["__scopeId","data-v-c2d660c8"]]),m8="/vue-learn-js/assets/render003-702d2c0e.png",h8="/vue-learn-js/assets/render004-6e9437a2.png";const Yt=a=>(ma("data-v-fcc41752"),a=a(),ha(),a),k8={class:"leftNav"},g8={class:"leftNavContainer"},T8={class:"leftNavLayout"},_8={class:"Main"},z8={class:"mainContainer"},S8={class:"mainLayout"},q8=U('<div id="web001" class="articleCardTitle cor36" data-v-fcc41752> [ Web筆記 ] ≫ 瀏覽器內核,主要組成部分 </div><p data-v-fcc41752>主要分成 2 部分:</p><p class="cor36" data-v-fcc41752>渲染引擎:</p><br data-v-fcc41752><p class="pTwo" data-v-fcc41752> 負責取得網頁內容 ( HTML . XML . 圖片 )，整理訊息 ( 加入 CSS ) ，計算網頁顯示方式，然後輸出至顯示器。 </p><p class="cor36" data-v-fcc41752>JS 引擎:</p><br data-v-fcc41752><p class="pTwo" data-v-fcc41752> 解析和執行網頁中的 JavaScript 代碼，實現網頁的動態效果和交互功能。 </p><br data-v-fcc41752><p data-v-fcc41752>瀏覽器內核可以理解為排版引擎</p><br data-v-fcc41752><h3 class="cor36" data-v-fcc41752>WebKit</h3><p data-v-fcc41752>代表作品是 Safari、舊版 Chrome</p><br data-v-fcc41752><h3 class="cor36" data-v-fcc41752>Blink</h3><p data-v-fcc41752>代表作品是 Chrome、Opera</p><br data-v-fcc41752><h3 class="cor36" data-v-fcc41752>Trident</h3><p data-v-fcc41752>代表作品是IE</p><br data-v-fcc41752><h3 class="cor36" data-v-fcc41752>Gecko</h3><p data-v-fcc41752>代表作品是Firefox</p><br data-v-fcc41752><br data-v-fcc41752><h3 class="articleCardTitle cor36" data-v-fcc41752># 瀏覽器主要組成部分</h3><p data-v-fcc41752>1.使用者介面： 包括位址列、前進/後退/重新整理/書籤等按鈕</p><p data-v-fcc41752>2.瀏覽器引擎： 在使用者介面與呈現引擎之間傳遞指令</p><p data-v-fcc41752>3.渲染引擎： 用於繪製請求的內容</p><p data-v-fcc41752> 4.網路： 用於完成網路調用，例如 HTTP 請求，具有跨平台的介面，可以在不同平台上運作 </p><p data-v-fcc41752>5.JavaScript 解譯器： 用於解析執行 JavaScript 程式碼</p><p data-v-fcc41752> 6.使用者介面後端： 用於繪製基本的視窗元件，例如組合框和視窗，底層使用作業系統的使用者介面 </p><p data-v-fcc41752> 7.資料儲存： 屬於持久層，瀏覽器在硬碟中儲存各種類似 Cookie 的資料，HTML5 定義了 Web Database 技術，這是一種輕量級完整的客戶端儲存技術。 </p><br data-v-fcc41752><br data-v-fcc41752><h1 id="web002" class="articleCardTitle cor36" data-v-fcc41752> [ Web筆記 ] ≫ 瀏覽器輸入網址後按下 enter 會發生什麼 ? </h1><p data-v-fcc41752>首先進行 DNS 域名解析, 再來與服務器三次握手建立 TCP 連結,</p><p data-v-fcc41752>然後發送 http 請求, 然後服務器處理請求</p><p data-v-fcc41752>服務器返回響應結果, 然後四次揮手關閉 TCP 連結</p><p data-v-fcc41752>然後瀏覽器解析 HTML 文本, 最後瀏覽器布局渲染頁面</p><br data-v-fcc41752><p data-v-fcc41752>1.瀏覽器接受 URL 開啟網路請求線程 (進程 &gt; 線程)</p><p data-v-fcc41752> 2.瀏覽器通過 DNS 服務器得到域名的 IP位置, 向 IP 地址 建立連接(TCP3次握手) 後發送http請求 </p><p data-v-fcc41752>3.服務器返回響應結果, 然後四次揮手關閉TCP連結</p><p data-v-fcc41752>4.瀏覽器渲染進程解析 HTML 文本， 構建 DOM 樹</p><p data-v-fcc41752> 5.解析 HTML 時, 如果遇到 內連樣式 或 CSS 文本, 則下載並構建樣式規則, 如果遇到 JS 腳本, 則下載執行腳本 </p><p data-v-fcc41752>6.DOM 樹和 CSSOM 構建完成之後, 渲染線程將 2 者合併成渲染樹</p><p data-v-fcc41752>7.渲染進程開始對渲染樹進行布局, 生成布局樹 (layout tree)</p><p data-v-fcc41752>8.渲染樹對布局樹進行繪製, 生成繪製紀錄</p><br data-v-fcc41752><br data-v-fcc41752><div class="disCen" data-v-fcc41752><img src="'+m8+'" style="max-width:500px;" alt="" data-v-fcc41752></div><div class="disCen" data-v-fcc41752><img src="'+h8+'" style="max-width:500px;" alt="" data-v-fcc41752></div><br data-v-fcc41752><br data-v-fcc41752><h3 class="articleCardTitle cor36" data-v-fcc41752># CSS 會阻塞 DOM 嗎?</h3><p data-v-fcc41752>CSS 不會阻塞 DOM 解析，會阻塞 DOM 渲染</p><p data-v-fcc41752>CSS 會阻塞 JS 執行，不會阻塞 JS 文件下載</p><br data-v-fcc41752><p data-v-fcc41752>DOM 樹和 CSSOM 樹都加載完 才渲染 render 樹</p><p data-v-fcc41752>CSS 文件會先加載執行完 再執行 JS 文件</p><br data-v-fcc41752><p class="cor36" data-v-fcc41752># 避免 FOUC 白屏</p><p data-v-fcc41752> CSS 檔案放置在 HTML 文檔的 head 標籤中 ,確保在頁面渲染前加載並應用CSS樣式。 </p><p data-v-fcc41752>避免使用 JavaScript 動態加載 CSS 檔案</p><p data-v-fcc41752> 樣式預加載技術，如 preload 或 prefetch，提前加載 CSS 檔案以減少延遲。 </p><br data-v-fcc41752><br data-v-fcc41752><h3 class="articleCardTitle cor36" data-v-fcc41752># JS 會阻塞頁面嗎?</h3><p data-v-fcc41752>JS 會阻塞 DOM 解析，建議將 JS 文件放在 HTML 最下面</p><p data-v-fcc41752> 瀏覽器在解析 HTML 時，如果遇到 ＜script&gt;，會先下載、解析完這些 JavaScript 檔案，再往下繼續解析 HTML 其他內容。 </p><br data-v-fcc41752><p data-v-fcc41752>defer和async的差別?</p><p data-v-fcc41752>async 下載完就直接執行。</p><p data-v-fcc41752>defer 等到瀏覽器解析完 HTML 後執行。</p><br data-v-fcc41752><br data-v-fcc41752><h3 class="articleCardTitle cor36" data-v-fcc41752># 解析 HTML</h3><p data-v-fcc41752> HTML是逐行解析的，瀏覽器的渲染引擎會將HTML文檔解析並轉換為DOM節點。 </p><p data-v-fcc41752>將標記 （Tokens） 解析成物件</p><p data-v-fcc41752>將物件組合成一個DOM樹</p><br data-v-fcc41752><br data-v-fcc41752><h3 class="articleCardTitle cor36" data-v-fcc41752># 解析 CSS</h3><p data-v-fcc41752>瀏覽器會從右到左解析CSS選擇器</p><p data-v-fcc41752>∕span -&gt; ∕div -&gt; html</p><br data-v-fcc41752><br data-v-fcc41752>',87),y8=Yt(()=>v("span",null,"性能問題,假設從左往右會先找到很多a,可能99%沒用,沒必要找",-1)),C8=U('<br data-v-fcc41752><br data-v-fcc41752><h3 class="articleCardTitle cor36" data-v-fcc41752># JavaScript 解析的流程</h3><p data-v-fcc41752> 1.瀏覽器創建 Document 物件並開始解析 HTML 文件。解析器將解析到的元素和文本節點添加到文件中，此時 document.readyState 屬性為 &quot;loading&quot;。 </p><br data-v-fcc41752><p data-v-fcc41752> 2.HTML 解析器遇到沒有 async 和 defer 屬性的 script 標籤時，將它們添加到文件中並開始執行內部或外部腳本。這些腳本將同步執行，解析器在腳本下載和執行期間會暫停解析。因此，可以使用 document.write() 方法將文本插入到輸入流中。同步腳本通常用於定義函數和註冊事件處理程序，它們可以遍歷和操作腳本之前的文件內容。 </p><br data-v-fcc41752><p data-v-fcc41752> 3.當解析器遇到設置了 async 屬性的 script 標籤時，它會開始下載該腳本並繼續解析文件。這些腳本將在下載完成後盡快執行，但解析器不會等待它們的下載。異步腳本禁止使用 document.write()，它們可以訪問其所在的 script 標籤以及之前的文件元素。 </p><br data-v-fcc41752><p data-v-fcc41752> 4.所有設置了 defer 屬性的腳本將按照它們在文件中出現的順序執行。延遲腳本能夠訪問完整的文件樹，但禁止使用 document.write()。 </p><br data-v-fcc41752><p data-v-fcc41752> 5.當文件上的所有延遲腳本執行完成時，瀏覽器將在 Document 物件上觸發 DOMContentLoaded 事件。這表示文件的 DOM 結構已完全構建，可以進行操作。 </p><br data-v-fcc41752><p data-v-fcc41752> 6.等待其他內容加載完成並且所有異步腳本執行完成後，document.readyState 屬性變為 &quot;complete&quot;，此時 window 物件觸發 load 事件。這表示整個文件和相關資源已經加載完成。 </p><br data-v-fcc41752><br data-v-fcc41752><h3 class="articleCardTitle cor36" data-v-fcc41752># ip地址怎麼找?</h3><p data-v-fcc41752>ip 地址從 DNS 域名服務器裡 存儲的地址本 找出來的</p><br data-v-fcc41752><p data-v-fcc41752>之前 訪問過該網站的話 從本機 緩存數據裡找</p><br data-v-fcc41752><p data-v-fcc41752>如果找不到 就從路由器設置的 電信服務商提供的 DNS 服務器中找</p><br data-v-fcc41752><p data-v-fcc41752>再找不到 就從網站域名提供的 服務商提供的 DNS 服務器找</p><br data-v-fcc41752><br data-v-fcc41752><br data-v-fcc41752><p class="cor36" data-v-fcc41752> TCP 是一種要求資料正確性的傳輸方式， 這表示它需要一些特殊機制， 來確保傳輸的數據不會出錯。 </p><br data-v-fcc41752><a href="https://zh.wikipedia.org/wiki/%E4%BC%A0%E8%BE%93%E6%8E%A7%E5%88%B6%E5%8D%8F%E8%AE%AE" data-v-fcc41752>傳輸控制協定 @wiki</a><br data-v-fcc41752><h3 class="articleCardTitle cor36" data-v-fcc41752> # 三次握手 -&gt; 與 WEB 服務器建立連接 -&gt; 確認雙方都能接收,發送正常 </h3><br data-v-fcc41752><p data-v-fcc41752>第一次握手： 客戶端發送 SYN 數據包,服務端收到</p><br data-v-fcc41752><p data-v-fcc41752>第二次握手： 服務端回復 SYN 和 ACK 數據包,客戶端收到</p><br data-v-fcc41752><p data-v-fcc41752> 第三次握手： 客戶端 檢查接收數據包正確後 發送 ACK 數據包,服務端收到,連接建立成功 </p><br data-v-fcc41752><br data-v-fcc41752><p data-v-fcc41752> 第一次握手：客戶端向伺服器發送一個帶有 SYN 標誌位為1的數據包，同時隨機生成一個初始序列號（Seq = J）作為起始序列號。客戶端表示希望建立連接。 </p><p data-v-fcc41752> 第二次握手：伺服器收到客戶端的請求後，回復一個帶有 SYN 和 ACK 標誌位為1的數據包，確認連接請求，同時生成自己的序列號（Seq = K），同時將客戶端的序列號加1作為確認號（Ack = J + 1）。伺服器表示接受客戶端的連接請求並發送確認信息。 </p><p data-v-fcc41752> 第三次握手：客戶端收到伺服器的確認信息後，檢查確認號是否正確（Ack = K + 1），如果正確，則發送一個帶有 ACK 標誌位為1的數據包，將伺服器的序列號加1作為確認號（Ack = K + 1），表示客戶端接受伺服器的確認信息。伺服器收到客戶端的確認信息後，連接建立成功。 </p><br data-v-fcc41752><br data-v-fcc41752><br data-v-fcc41752><p data-v-fcc41752>序列號（seq，32位元長）:</p><p class="pFou" data-v-fcc41752> 如果含有同步化旗標（SYN），則此為最初的序列號；第一個資料位元的序列碼為本序列號加一。 </p><p class="pFou" data-v-fcc41752> 如果沒有同步化旗標（SYN），則此為第一個資料位元的序列碼。 </p><br data-v-fcc41752><p data-v-fcc41752>確認號（ack，32位元長）:</p><p class="pFou" data-v-fcc41752> 期望收到的資料的開始序列號。也即已經收到的資料的位元組長度加1。 </p><br data-v-fcc41752><p data-v-fcc41752>標誌符（9位元長）:</p><p class="pFou" data-v-fcc41752> SYN: 為1表示這是連接請求或是連接接受請求，用於建立連接和使順序號同步 </p><p class="pFou" data-v-fcc41752>FIN: 為1表示傳送方沒有資料要傳輸了，要求釋放連接。</p><br data-v-fcc41752><br data-v-fcc41752><p class="cor36" data-v-fcc41752>內容傳輸：</p><p data-v-fcc41752>確認封包機制： 接收端接收到包時, 要回傳確認信息給 發送端</p><p data-v-fcc41752>逾時與重送： 如果接收端 一直無返回確認信息，發送端 會重發一次</p><br data-v-fcc41752><br data-v-fcc41752><p class="articleCardTitle cor36" data-v-fcc41752># 4次揮手</p><p data-v-fcc41752> 客戶端發送一個 FIN Seq = M（FIN置位，序號為M） 封包，用來關閉客戶端到伺服器端的資料傳送。 </p><br data-v-fcc41752><p data-v-fcc41752> 伺服器端收到這個 FIN ，它回送一個 ACK ，確認序號 Ack 為收到的序號 M+1。 </p><br data-v-fcc41752><p data-v-fcc41752>伺服器端關閉與客戶端的連接，發送一個 FIN Seq = N 給客戶端。</p><br data-v-fcc41752><p data-v-fcc41752>客戶端回覆 ACK 報文確認，確認序號 Ack 為收到的序號 N+1。</p><br data-v-fcc41752><br data-v-fcc41752><br data-v-fcc41752><p class="cor36" data-v-fcc41752># 為什麼建立是 3 次，關閉是 4 次</p><p data-v-fcc41752>因為服務端在 LISTEN 狀態下, 收到建立連接請求的 SYN 報文後，</p><br data-v-fcc41752><p data-v-fcc41752>把 ACK 和 SYN 放在一個報文裡發送給客戶端。</p><br data-v-fcc41752><p data-v-fcc41752>而關閉連接時, 收到對方的 FIN 報文時</p><br data-v-fcc41752><p data-v-fcc41752>僅表示對方不再發送數據但還是能發送數據</p><br data-v-fcc41752><p data-v-fcc41752>己方是否現在關閉發送數據通道, 需要上層應用來決定</p><br data-v-fcc41752><p data-v-fcc41752>因此己方 ACK 和 FIN 分開發送</p><br data-v-fcc41752><br data-v-fcc41752><h3 class="articleCardTitle cor36" data-v-fcc41752># 什麼是SYN Flood攻擊?</h3><p data-v-fcc41752>SYNflood 利用 TCP 協議缺陷, 發送大量偽造 TCP 請求</p><br data-v-fcc41752><p data-v-fcc41752>請求連接的第一個握手包 (SYN), 服務器回應第二個握手包 (SYN+ACK)</p><br data-v-fcc41752><p data-v-fcc41752>因為偽造IP 對方不會收到包且不會回應第三個握手包</p><br data-v-fcc41752><p data-v-fcc41752> 導致服務器保持大量 SYN_RECE 為半連結, 且會默認 5 次回應第二個握手包, </p><br data-v-fcc41752><p data-v-fcc41752>大量惡意 SYN 佔滿未完成連接列隊,導致正常業務連不進來</p><br data-v-fcc41752><br data-v-fcc41752><h3 class="articleCardTitle cor36" data-v-fcc41752># SYNflood怎麼檢測?</h3><p data-v-fcc41752>在服務器上看到大量半連接狀態時, 特別是源 ip 位置是隨機的</p><br data-v-fcc41752><br data-v-fcc41752><h3 class="articleCardTitle cor36" data-v-fcc41752># SYNflood攻擊怎麼解決?</h3><p data-v-fcc41752>1.縮短超時 SYN Timeout</p><p data-v-fcc41752>2.增加最大半連接數</p><p data-v-fcc41752> 3.SYN cookie 技術(收到 SYN 報文不直接 TCP 分配資源,先打開半套的套接字) </p><br data-v-fcc41752><br data-v-fcc41752><h3 id="web003" class="articleCardTitle cor36" data-v-fcc41752> [ Web筆記 ] ≫ http協議? </h3><div data-v-fcc41752><span data-v-fcc41752><a href="https://www.runoob.com/http/http-tutorial.html" data-v-fcc41752>http協議 @菜鳥教程 </a></span></div><br data-v-fcc41752><p data-v-fcc41752>超文本傳輸協定 . . . (Hypertext Transfer Protocol)</p><br data-v-fcc41752><p data-v-fcc41752>他是基於 TCP 默認 80 端口的一個 應用層協議</p><br data-v-fcc41752><p data-v-fcc41752>用於 從全球資訊網 傳輸資源 到本地瀏覽器 的傳輸協議</p><br data-v-fcc41752><p data-v-fcc41752>主要是用來規定 客戶端 和服務器端 的數據傳輸格式</p><br data-v-fcc41752><p data-v-fcc41752>所以 HTTP 是一個標準和規範</p><br data-v-fcc41752><p data-v-fcc41752>每一個 HTTP 連接包括 請求消息 和響應消息 2 部分</p><br data-v-fcc41752><p data-v-fcc41752>請求報文包括 , 請求行, 請求頭, 空行, 請求體</p><br data-v-fcc41752><p data-v-fcc41752>響應報文包括 , 響應行, 響應頭, 空行, 請求體,</p><br data-v-fcc41752><br data-v-fcc41752><h3 class="articleCardTitle cor36" data-v-fcc41752> # http協議包括請求和響應,你能說一個請求完整內容嗎? </h3><p data-v-fcc41752>第一部分:第一行第一個字是get, 然後是url, http協議版本</p><p data-v-fcc41752>第二部分:content-type:</p><p data-v-fcc41752>第三部分:enter2</p><p data-v-fcc41752>第四部份:body a=1&amp;a=2</p><br data-v-fcc41752><br data-v-fcc41752><h3 class="articleCardTitle cor36" data-v-fcc41752># content-type內容怎麼寫?</h3><p data-v-fcc41752>JSON的話是application斜槓json</p><br data-v-fcc41752><br data-v-fcc41752><h3 class="articleCardTitle cor36" data-v-fcc41752># http和https差別?(443端口)</h3><p data-v-fcc41752>http協議傳輸的數據都是未加密的, 因此用http傳輸隱私的訊息不安全</p><br data-v-fcc41752><p data-v-fcc41752>為了保證這些隱私數據能加密傳輸, 就誕生HTTPS 所以比http協議安全</p><br data-v-fcc41752><p data-v-fcc41752> https由tls加http協議構建的, 可以進行加密傳輸, 身分認證的網路協議 </p><br data-v-fcc41752><p data-v-fcc41752>所以比http協議安全</p><br data-v-fcc41752><p data-v-fcc41752>https有兩個作用</p><br data-v-fcc41752><p data-v-fcc41752>1.可以建立一個訊息安全通道, 用來保證數據傳輸的安全性</p><br data-v-fcc41752><p data-v-fcc41752>2.確認網站的真實性</p><br data-v-fcc41752><p data-v-fcc41752>http和https差別</p><br data-v-fcc41752><p data-v-fcc41752>1.http不用證書,https需要申請ca證書</p><br data-v-fcc41752><p data-v-fcc41752> 2.http下的訊息明文傳輸, 而https由tls加http協議構建的可進行加密傳輸身分認證的網路協議, 可以防止傳輸內容被竊取竄改 </p><br data-v-fcc41752><p data-v-fcc41752> 3.http和https使用不同的連接方式, 所以端口不一樣http(80), https(443) </p><br data-v-fcc41752><br data-v-fcc41752><h1 class="articleCardTitle cor36" data-v-fcc41752># SSL怎麼做?</h1><p data-v-fcc41752>客戶端發送請求連接的請求給伺服器，請求中包含一個 SSL</p><br data-v-fcc41752><p data-v-fcc41752> 版本號以及所支持的加密算法。伺服器收到客戶端的請求後，將自己的 SSL 證書發送給客戶端。 </p><br data-v-fcc41752><p data-v-fcc41752>證書中包含伺服器的公鑰、伺服器的名稱以及證書的頒發機構等信息。</p><br data-v-fcc41752><p data-v-fcc41752> 客戶端收到伺服器的 SSL 證書後，會對證書進行驗證，包括證書的頒發機構是否可信、證書中的伺服器名稱是否和請求的伺服器名稱匹配等。 </p><br data-v-fcc41752><p data-v-fcc41752> 客戶端驗證通過後，生成一個隨機數，使用伺服器的公鑰進行加密，並將加密後的隨機數發送給伺服器。 </p><br data-v-fcc41752><p data-v-fcc41752> 伺服器收到客戶端發送的加密隨機數後，使用自己的私鑰進行解密，得到客戶端的隨機數。 </p><br data-v-fcc41752><p data-v-fcc41752> 伺服器和客戶端分別使用這兩個隨機數來生成對稱加密算法所需的密鑰。 </p><br data-v-fcc41752><p data-v-fcc41752>這個密鑰只有伺服器和客戶端才知道，可以保證數據傳輸的安全性。</p><br data-v-fcc41752><p data-v-fcc41752> 客戶端和伺服器之間的數據傳輸會使用對稱加密算法來加密和解密，以保證傳輸的安全性。 </p><h1 class="articleCardTitle cor36" data-v-fcc41752># GET和POST的區別?</h1><p data-v-fcc41752>1.get請求的參數是放在url裡面的, 而post請求參數放在請求體裡面的</p><p data-v-fcc41752>2.get請求可以被瀏覽器緩存 ,post請求不能被緩存</p><p data-v-fcc41752> 3.get請求因為放在url裡面, 而url長度是受限的, 最大2048字符, post長度沒有限制 </p><p data-v-fcc41752> 4.get放在url裡面, 安全性比較差, post請求參數放在body裡面安全性比較好 </p><p data-v-fcc41752> 5.get請求可以通過瀏覽器直接訪問, 支持刷新後退, post請求不能直接被瀏覽器訪問, 刷新後數據需要重新傳送 </p><br data-v-fcc41752><br data-v-fcc41752><h1 class="articleCardTitle cor36" data-v-fcc41752># POST 和 PUT?</h1><p data-v-fcc41752>1.兩者都可以 用來新增資源， 但 PUT 比較像 覆蓋或替代資源</p><p data-v-fcc41752>2.PUT 會指定要覆蓋掉哪個資源， POST 不用</p><p data-v-fcc41752> 3.假設資料庫不能有重複資料的話，用 POST 新增多個可能會報錯，但 PUT 不會，因為它只是不停的 對某個資源 進行覆蓋而已 </p><br data-v-fcc41752><br data-v-fcc41752><h3 class="articleCardTitle cor36" data-v-fcc41752># 強緩存和弱緩存?</h3><p data-v-fcc41752> 瀏覽器緩存是瀏覽器在本地磁碟對使用者最近請求過的文件進行存儲，當訪問者再次訪問同一頁面時，瀏覽器就可以直接從本地磁碟載入文件。 </p><p data-v-fcc41752>分 強緩存（也稱本地緩存） &amp; 協商緩存（也稱弱緩存）</p><br data-v-fcc41752><br data-v-fcc41752><p class="cor36" data-v-fcc41752>強緩存</p><p data-v-fcc41752>首先在http1.1時,他會在它的上面會有一個 catch crtl 頭</p><br data-v-fcc41752><p data-v-fcc41752>裡面可能加上 max age 假設他是 3600, 也就是在這一個小時內</p><br data-v-fcc41752><p data-v-fcc41752>再去訪問這個東西的時候, 它不會再去發請求, 它會從硬碟上去讀取</p><br data-v-fcc41752><p data-v-fcc41752>因為他已經緩存下來了, 同時它會再給他配置一個 etag</p><br data-v-fcc41752><p data-v-fcc41752>這個 etag 是它的特徵值, 可能它特徵值是 AAA</p><br data-v-fcc41752><p data-v-fcc41752>等到期3600過了之後也就到期了</p><br data-v-fcc41752><br data-v-fcc41752><p class="cor36" data-v-fcc41752>這裡涉及到協商緩存</p><br data-v-fcc41752><p data-v-fcc41752>就是它會去跟他協商, 然後發請求去協商</p><br data-v-fcc41752><p data-v-fcc41752>這時候可能會發一個 if 開頭的響應頭</p><br data-v-fcc41752><p data-v-fcc41752> 把那個特徵值帶上也就是剛剛說道的 AAA, 然後去看他是否需要繼續給它存著, </p><br data-v-fcc41752><p data-v-fcc41752>還是要改變這個文件, 它可能會返回 200 或 304, 如果返回 200</p><br data-v-fcc41752><p data-v-fcc41752>不僅返回 200 還會附帶 body,就是會把新的內容給它, 如果返回 304</p><br data-v-fcc41752><p data-v-fcc41752>304 這個狀態碼代表未修改繼續用, 那就不需要新的返回</p><br data-v-fcc41752><br data-v-fcc41752><h3 class="articleCardTitle cor36" data-v-fcc41752># HTTP狀態碼和其含義</h3><p data-v-fcc41752>1xx（資訊性狀態碼）：表示請求已被接收，正在處理。</p><br data-v-fcc41752><div class="pTwo" data-v-fcc41752> 100 Continue： 繼續，在發送 POST 請求時，已發送了 http header 之後伺服器將返回此訊息，表示確認，之後發送具體參數訊息 </div><br data-v-fcc41752><p data-v-fcc41752>2xx（成功狀態碼）：表示請求已成功被伺服器接收、理解和處理。</p><br data-v-fcc41752><div class="pTwo" data-v-fcc41752>200 OK：請求已成功，伺服器正常返回請求的內容。</div><br data-v-fcc41752><div class="pTwo" data-v-fcc41752> 201 Created：請求已成功並在伺服器上創建了新的資源。 </div><br data-v-fcc41752><div class="pTwo" data-v-fcc41752>202 Accepted：伺服器已接受請求，但尚未處理。</div><br data-v-fcc41752><p data-v-fcc41752> 3xx（重新導向狀態碼）：表示客戶端需要採取進一步操作才能完成請求。 </p><br data-v-fcc41752><div class="pTwo" data-v-fcc41752> 301 Moved Permanently：請求的資源已永久移動到新位置。 </div><br data-v-fcc41752><div class="pTwo" data-v-fcc41752>302 Found：請求的資源已臨時移動到新位置。</div><br data-v-fcc41752><div class="pTwo" data-v-fcc41752> 304 Not Modified：客戶端的快取資源是最新的，可以直接使用。 </div><br data-v-fcc41752><p data-v-fcc41752>4xx（客戶端錯誤狀態碼）：表示客戶端發起的請求有錯誤或無法完成。</p><br data-v-fcc41752><div class="pTwo" data-v-fcc41752> 400 Bad Request：請求語法錯誤，伺服器無法理解。 </div><br data-v-fcc41752><div class="pTwo" data-v-fcc41752>401 Unauthorized：請求需要用戶驗證。</div><br data-v-fcc41752><div class="pTwo" data-v-fcc41752>403 Forbidden：禁止訪問。</div><br data-v-fcc41752><div class="pTwo" data-v-fcc41752>404 Not Found：請求的資源不存在。</div><br data-v-fcc41752><p data-v-fcc41752>5xx（伺服器錯誤狀態碼）：表示伺服器在處理請求時發生了錯誤。</p><br data-v-fcc41752><div class="pTwo" data-v-fcc41752> 500 Internal Server Error：伺服器遇到了一個未知的錯誤。 </div><br data-v-fcc41752><div class="pTwo" data-v-fcc41752> 503 Service Unavailable：伺服器暫時無法處理請求，可能是由於過載或維護。 </div><br data-v-fcc41752><br data-v-fcc41752><h1 id="web004" class="articleCardTitle cor36" data-v-fcc41752> [ Web筆記 ] ≫ 描述Cookies、sessionStorage和localStorage的區別 </h1><p data-v-fcc41752> localStorage是本地存儲 cookie是服務器下發給瀏覽器的一串字串, 用來驗證的 </p><br data-v-fcc41752><p class="cor36" data-v-fcc41752>用的時候有什麼不一樣?</p><p data-v-fcc41752> cookie用來存sectionID local裡面儲存形式是字串,紀錄用戶本地操作或記錄數據 </p><br data-v-fcc41752><p class="cor36" data-v-fcc41752>localStorage sessionStorage區別?</p><p data-v-fcc41752> session是會話,當頁面關閉會清空 localStorage不會過期, 沒有過期時間, 除非用戶手動清除緩存 </p><br data-v-fcc41752><br data-v-fcc41752><br data-v-fcc41752><br data-v-fcc41752><p data-v-fcc41752> cookie是網站為了標識使用者身份而儲存在使用者本地終端（Client Side）上的數據（通常經過加密）。 </p><p data-v-fcc41752> cookie數據始終在同源的HTTP請求中攜帶（即使不需要），在瀏覽器和伺服器之間來回傳遞。 </p><p data-v-fcc41752> sessionStorage和localStorage不會自動將數據發送給伺服器，僅在本地保存。 </p><br data-v-fcc41752><h3 data-v-fcc41752>儲存容量：</h3><p data-v-fcc41752>cookie數據大小不能超過4KB。</p><p data-v-fcc41752> sessionStorage和localStorage雖然也有儲存大小的限制，但比cookie大得多，可以達到5MB或更大。 </p><br data-v-fcc41752><h3 data-v-fcc41752>生命週期： (有效時間)</h3><p data-v-fcc41752>cookie 需要設置有效時間，過期後 cookie 銷毀。</p><p data-v-fcc41752>localStorage 除非主動刪除數據，否則永久存在。</p><p data-v-fcc41752>sessionStorage 頁面關閉後刪除。</p><br data-v-fcc41752><h3 data-v-fcc41752>儲存形式:</h3><p data-v-fcc41752>三者都是字串類型</p><p data-v-fcc41752>複雜對象 可用 json 的 stringify 和 parse</p><br data-v-fcc41752><p data-v-fcc41752>JSON.stringify() 將字串轉成 JSON</p><p data-v-fcc41752>JSON.parse() 將 JSON 轉成字串</p><br data-v-fcc41752><h3 data-v-fcc41752>安全性:</h3><p data-v-fcc41752>cookie 請求時一般會攜帶在 header 中</p><p data-v-fcc41752>localStorage、sessionStorage 請求時不會攜帶</p><br data-v-fcc41752><br data-v-fcc41752><h1 id="web005" class="articleCardTitle cor36" data-v-fcc41752> [ Web筆記 ] ≫ 什麼是同源策略,不同源會怎樣? </h1><p data-v-fcc41752> 瀏覽器給出的一個規定,規定說2個URL他的域名,端口,協議都相同, 就是同源 </p><br data-v-fcc41752><p data-v-fcc41752>不同源的話, 比如運行在一個URL上的腳本, 如果它發出的請求</p><br data-v-fcc41752><p data-v-fcc41752> 請求的目標和它所運行的環境不同源, 就會受到同源策略不准你發這個請求 </p><br data-v-fcc41752><br data-v-fcc41752><h1 class="articleCardTitle" data-v-fcc41752># 跨域是什麼?</h1><p data-v-fcc41752>就是域名,端口, 協議如果不一樣,</p><p data-v-fcc41752> 瀏覽器會進行跨域報錯, 使用別人的服務時可能遇到, 遇到的話要做跨域 </p><br data-v-fcc41752><br data-v-fcc41752><div data-v-fcc41752>|......不跨域會怎樣? 不跨域的話訪問不到,沒有權限</div><div data-v-fcc41752>|.........用什麼方式訪問會提示沒有權限? AJAX會訪問不到</div><div data-v-fcc41752>|............我現在從A域名向B域名發get請求會發出去嗎? 會</div><div data-v-fcc41752>|...............B服務器會得到我的請求嗎? 會</div><div data-v-fcc41752>|..................得到之後會給我返回一個響應嗎? 會</div><div data-v-fcc41752> |.....................我唯獨什麼拿不到? JS拿不到他的 response </div><div data-v-fcc41752> |........................誰弄得為什麼拿不到? 瀏覽器, 為了安全起見 </div><div data-v-fcc41752> |...........................要跨越這個限制怎麼做? 兼容IE用JSONP, 不用就用CROS </div><br data-v-fcc41752><br data-v-fcc41752><h1 id="" class="articleCardTitle" data-v-fcc41752># 解決跨域問題:</h1><h3 class="cor36" data-v-fcc41752>JSONP</h3><p data-v-fcc41752>利用script標籤不受同源策略的影響, 前端先動態創立一個script標籤,</p><p data-v-fcc41752>然後給script設置src, 然後src裡面的目標是請求的目標,</p><p data-v-fcc41752> 通常和後端約定說一個回調函數的名字, 通常可以設callback function來告訴後端說我前端回調函數寫這個, </p><p data-v-fcc41752> 然後後端給你返回一個script, script裡面相當於調用你前端寫的callback function </p><p data-v-fcc41752> 然後callback function後端會給你傳一個數據, 你就可以從callback function裡提取這個數據出來 </p><br data-v-fcc41752><br data-v-fcc41752><div data-v-fcc41752>|...JSONP放在請求裡的參數怎麼寫? callback</div><div data-v-fcc41752>|......callback等於什麼? _ 等於參數名</div><div data-v-fcc41752> |.........參數名怎麼構造? _ 通過固定字串加上一個隨機數來確保那個函數名是唯一的 </div><div data-v-fcc41752> |............那我可以監聽它的成功失敗或獲取狀態碼嗎? 不算完全可以, 可以監聽script.onload 可能只會在200時觸發, 其他狀態碼不一定觸發 ,失敗有一個onerrpr 但具體是什麼錯誤是不確定的 </div><br data-v-fcc41752><br data-v-fcc41752><p class="cor36" data-v-fcc41752>如果發POST可能嗎?</p><p data-v-fcc41752>不可能,因為它只能 GET 文件</p><br data-v-fcc41752><br data-v-fcc41752><p class="cor36" data-v-fcc41752>如果我想要獲取狀態碼可能嗎?</p><p data-v-fcc41752> 不可能,如果 404 的話你的回掉函數根本進不來, 前端就沒有感知到 404 </p><br data-v-fcc41752><br data-v-fcc41752><p data-v-fcc41752>優: 兼容性較好, 兼容 IE 用 JSONP, 不用就用 CROS</p><br data-v-fcc41752><br data-v-fcc41752><p class="cor36" data-v-fcc41752>JSONP 的缺點:</p><p class="pTwo" data-v-fcc41752>1. 他只能用 get 請求</p><br data-v-fcc41752><p class="pTwo" data-v-fcc41752> 2-1. 這個 get 無論如何一定會帶上 cookie,這樣的話你就沒辦法限制誰能用 JSONP, 不像 CORS 指定域名使用數據? </p><p class="pSix" data-v-fcc41752>會導致數據被你不希望的源請求到</p><p class="pEig" data-v-fcc41752>解決? _ 做refer較驗</p><br data-v-fcc41752><p class="pTwo" data-v-fcc41752>2-2. A和B可以JSONP,別的網站C也可以JSONP怎麼辦?</p><p class="pSix" data-v-fcc41752> 通過請求頭request字段裡的 refer 來判斷他是C網站來屏蔽 </p><br data-v-fcc41752><p class="pTwo" data-v-fcc41752>2-3. 我能防止別有用心的人調用這個JSONP嗎?</p><p class="pSix" data-v-fcc41752>可以,加一些較驗參數在JS的後面的參數裡面</p><p class="pSix" data-v-fcc41752>1.refer檢查,請求頭 request header 裡面 refer</p><p class="pSix" data-v-fcc41752> 2.把當前域名的cookieID做一個哈希, 哈希後的值放到 JSONP 的後面就可以防止其他網站有效請求 </p><p class="pEig" data-v-fcc41752>(其他網站偽造不了,因為它拿不到cookie)</p><p class="pEig" data-v-fcc41752> (只有你要請求的域名是子域名行,如果完全不相同你自己也拿不到cookie) </p><br data-v-fcc41752><br data-v-fcc41752><h3 class="cor36" data-v-fcc41752>CORS . . . Cross-Origin Resource Sharing</h3><p data-v-fcc41752>2 種請求:</p><p class="cor36" data-v-fcc41752>CORS簡單請求?</p><p data-v-fcc41752>在後端設置響應頭 Access-Control-Allow-Origin 建立一個白名單</p><br data-v-fcc41752><br data-v-fcc41752><p class="cor36" data-v-fcc41752>CORS複雜請求兩次請求都在做什麼?</p><p data-v-fcc41752>第一次它會去 find options請求, 問服務器準不準我發POST請求,</p><p data-v-fcc41752> 如果你返回的 methods裡面有 POST 那就是準, 返回沒有POST就是不准, (需要後端做配合) </p><p data-v-fcc41752>也就是瀏覽器不一定會允許你發 POST 請求,</p><p data-v-fcc41752>你發POST被服務器阻止就發不出去了,</p><p class="comment" data-v-fcc41752> 但簡單請求是一定可以發出去的(它不會問服務器允不允許簡單請求) </p><br data-v-fcc41752><br data-v-fcc41752><p class="cor36" data-v-fcc41752>為什麼 CORS 要分簡單請求和複雜請求?</p><p data-v-fcc41752>POST 比較危險</p><br data-v-fcc41752><br data-v-fcc41752><div data-v-fcc41752>代理怎麼做跨域? 後端配一台 NGINX 服務器</div><br data-v-fcc41752><br data-v-fcc41752><div data-v-fcc41752>|...如果想提取url中的參數,然後把參數變成物件怎麼做?</div><div data-v-fcc41752> |......路徑是/xxx?a=1&amp;b=2,要得到{a:1 , b:2}怎麼做? _ 正則做一個匹配 </div><div data-v-fcc41752>|......url裡面遇到錨點#怎麼處理?</div><div data-v-fcc41752>|.........#號算不算查詢字串的一部分? _ 不算</div><div data-v-fcc41752> |...unicode和utf8區別?(分清子符集和編碼) _ unicode是一個字符集, 它世界所有文字做編碼, utf8是對unicode的計算機編碼 </div><div data-v-fcc41752>|...英文文檔? react beta</div><div data-v-fcc41752>|...如果JS API不知道用法你去哪看? MDN</div><div data-v-fcc41752>|...JS規範文檔英文? ecmascript</div><div data-v-fcc41752>|...規範文檔的英文? specification</div><div data-v-fcc41752>|...grapQL? 前端自己寫自己要的字段,然後後端一次性發過來</div><br data-v-fcc41752><br data-v-fcc41752><h1 class="articleCardTitle cor36" data-v-fcc41752># 網站開發流程?</h1><p data-v-fcc41752> 首先產品經理提出想做的網站是什麼, 前後端討論定一下對應API格式, 訂好規則後前端根據UI給的設計圖把頁面做出來, 測試再根據我們的代碼進行測試, 測試完打包上線 </p><br data-v-fcc41752><br data-v-fcc41752><h1 id="web006" class="articleCardTitle cor36" data-v-fcc41752> [ Web筆記 ] ≫ 腳本攻擊XSS,請求偽造CSRF </h1><h3 class="articleCardTitle" data-v-fcc41752> 跨站腳本攻擊（XSS）Cross-site request forgery </h3><p data-v-fcc41752> 攻擊者在網頁中注入惡意腳本，並將該腳本傳送給其他使用者的瀏覽器執行。 </p><br data-v-fcc41752><br data-v-fcc41752><p data-v-fcc41752>防止XSS攻擊:</p><p data-v-fcc41752>開發者應該適當地驗證和過濾使用者的輸入。</p><br data-v-fcc41752><br data-v-fcc41752><h3 class="articleCardTitle" data-v-fcc41752> 跨站請求偽造（CSRF）Cross-site request forgery </h3><p data-v-fcc41752> 攻擊者誘導使用者到第三方網站, 在第三方網站中, 向被攻擊網站發送跨站請求。 </p><br data-v-fcc41752><p data-v-fcc41752>利用受害者在被攻擊網站已獲取的註冊憑證, 繞過後台用戶驗證,</p><br data-v-fcc41752><p data-v-fcc41752>冒充用戶對被攻擊網站執行操作。</p><br data-v-fcc41752><br data-v-fcc41752><p data-v-fcc41752>防止CSRF攻擊:</p><p data-v-fcc41752> 檢查和驗證請求的來源、實施隨機生成的驗證碼（CSRF令牌）和同源政策等。 </p><br data-v-fcc41752><br data-v-fcc41752><h1 id="web007" class="articleCardTitle cor36" data-v-fcc41752> [ Web筆記 ] ≫ 如何進行網站性能優化 ? </h1><p data-v-fcc41752>加載方面:</p><div class="pTwo" data-v-fcc41752>1. 減少 http 請求 ( Spriter精靈圖 , 文件合併 )</div><div class="pTwo" data-v-fcc41752> 2. 減小文件大小 ( 資源壓縮 , 圖片壓縮 , 代碼壓縮 ) </div><div class="pTwo" data-v-fcc41752>3. CDN ( 第三方庫 , 大文件 , 大圖 )</div><div class="pTwo" data-v-fcc41752>4. SSR 服務端渲染 , 預渲染</div><div class="pTwo" data-v-fcc41752>5. 懶加載</div><div class="pTwo" data-v-fcc41752>6. 分包</div><br data-v-fcc41752><p data-v-fcc41752>性能方面:</p><div class="pTwo" data-v-fcc41752> 減少 DOM 操作 , 有操作量很大的 DOM 可以用 文檔碎片 </div><br data-v-fcc41752><p data-v-fcc41752>CSS 方面:</p><div class="pTwo" data-v-fcc41752>1. 將樣式表放在頁面頂部</div><div class="pTwo" data-v-fcc41752>2. 不使用 CSS 表達式</div><div class="pTwo" data-v-fcc41752>3. 使用 ＜link&gt; 不使用 @import</div><br data-v-fcc41752><p data-v-fcc41752>JS 方面:</p><div class="pTwo" data-v-fcc41752>1. 將 JS 腳本放在頁面底部</div><div class="pTwo" data-v-fcc41752>2. 將 JS 和 CSS 從外部引入</div><div class="pTwo" data-v-fcc41752>3. 壓縮 JS 和 CSS</div><div class="pTwo" data-v-fcc41752>4. 刪除不需要的腳本</div><div class="pTwo" data-v-fcc41752>5. 減少 DOM 訪問</div><br data-v-fcc41752><p data-v-fcc41752>圖片方面:</p><div class="pTwo" data-v-fcc41752>1. 壓縮圖片 tinyJPG</div><div class="pTwo" data-v-fcc41752>2. Spriter精靈圖</div><div class="pTwo" data-v-fcc41752>3. 不要在 HTML 中拉伸圖片</div><br data-v-fcc41752><br data-v-fcc41752><h1 class="articleCardTitle" data-v-fcc41752>有用過那些前端性能優化的方法 ?</h1><p data-v-fcc41752> 1. 減少 http 請求次數 =&gt; Spriter精靈圖 , JS &amp; CSS 代碼壓縮 , 圖片壓縮工具來減小圖片大小 , 網頁 <a href="https://zh.wikipedia.org/wiki/Gzip" class="cor36" data-v-fcc41752>GZIP @WIKI</a> , 引用 CDN 庫 </p><p data-v-fcc41752>2. 用 innerHTML 代替 DOM 操作 , 減少 DOM 操作次數 , 來優化 JS</p><p data-v-fcc41752>3. 當需要設置的樣式很多時用 className 而不是直接操作 style</p><p data-v-fcc41752>4. 圖片預加載 , 將樣式表放在頂部 , 將 script 放在底部</p><p data-v-fcc41752> 5. 避免在主佈局中用 table 標籤 , 因為 table 要等其中內容完全下載之後才會顯示出來 ( 比 div + css 慢 ) </p><br data-v-fcc41752><br data-v-fcc41752><h1 class="articleCardTitle" data-v-fcc41752>前端性能優化最佳實踐 ?</h1><p data-v-fcc41752> PageSpeed：PageSpeed是由Google開發的工具，用於評估網頁的性能。它通過分析網頁的載入速度、渲染性能、資源優化等指標，給出性能優化建議和分數評級。PageSpeed的評分基於一系列規則和最佳實踐，根據網頁的優化程度給出具體的優化建議，幫助開發人員改進網頁的性能。 </p><br data-v-fcc41752><p data-v-fcc41752> YSlow：YSlow是由Yahoo開發的網頁性能評估工具，它也用於評估網頁的性能和優化建議。YSlow根據一系列的規則和性能指標，對網頁的載入速度、緩存設置、JavaScript和CSS優化等進行分析和評估。它提供了類似於PageSpeed的性能分數和建議，幫助開發人員了解和改善網頁的性能表現。 </p><br data-v-fcc41752><br data-v-fcc41752><h1 class="articleCardTitle" data-v-fcc41752>最後甚麼是性能優化</h1><p data-v-fcc41752>1. 頁面加載性能 -&gt; 加載時間 , 用戶體驗</p><p data-v-fcc41752>2. 動畫與操作性能 -&gt; 是否流暢不卡頓</p><div class="pTwo" data-v-fcc41752>用 translate 和 定位 比較不會卡頓</div><div class="pTwo" data-v-fcc41752> translate 是脫離正常文檔流 , 所以移動不會影響上方&amp;下方元素 </div><div class="pTwo" data-v-fcc41752>所以不用重新渲染 DOM</div><p data-v-fcc41752>3. 內存佔用 -&gt; 內存佔用過大導致瀏覽器崩潰</p><div class="pTwo" data-v-fcc41752>直播內存超出瀏覽器上限 , 導致卡頓</div><p data-v-fcc41752>4. 電量消耗 -&gt; 遊戲方面</p><br data-v-fcc41752><p data-v-fcc41752>那些不是性能優化 ?</p><p data-v-fcc41752>1. while 循環快 還是 for 循環快 ?</p><p data-v-fcc41752>2. |0 比 Math.floor 快</p><p data-v-fcc41752>3. 三元運算符 比 if else 快</p><p data-v-fcc41752>這些是執行效率</p><br data-v-fcc41752><br data-v-fcc41752><h1 id="web008" class="articleCardTitle" data-v-fcc41752> [ Web筆記 ] ≫ 如何進行渲染優化 ? </h1><p data-v-fcc41752>1.不使用 iframe</p><p class="pTwo" data-v-fcc41752>iframe 會阻塞主頁面的 onload 事件</p><p class="pTwo" data-v-fcc41752> iframe 和主頁面共享連接池，瀏覽器對相同域的連接有限制，因而影響頁面的併行加載。 </p><br data-v-fcc41752><p data-v-fcc41752> 2.不使用 gif 來實現 loading 效果 ( 降低 CPU 消耗 而提升渲染性能) </p><br data-v-fcc41752><p data-v-fcc41752>3.用 CSS 代替 JS 動畫 ( 避免重新繪排 )</p><br data-v-fcc41752><p data-v-fcc41752> 4.小圖用 base64 位編碼，以減少網路請求。 (不建議大圖 =&gt; 較消耗CPU) </p><br data-v-fcc41752><p data-v-fcc41752> 5.不把 style 和 script 都放在頭部，才不會阻塞頁面。(Renderer進程中JS線程和渲染線程互斥) </p><br data-v-fcc41752><p data-v-fcc41752>6.避免在 href 和 src 中用空值。(link . script . img)</p><p class="pTwo" data-v-fcc41752> 瀏覽器會嘗試解析這些標籤並發起對應的網路請求，即使他為空值也會發起。 </p><br data-v-fcc41752><p data-v-fcc41752>7.用 className 而不是直接操作 style</p><br data-v-fcc41752><p data-v-fcc41752>8.用 innerHTML 代替 DOM 操作次數 來優化 JS。</p><br data-v-fcc41752><p data-v-fcc41752> 9.前端用變數保存 AJAX 請求結果，並操作客戶端變數來減少請求次數。 </p><br data-v-fcc41752><p data-v-fcc41752>10.圖片預加載 , 網頁 Gzip , CDN 庫 , data 緩存 , 圖片服務器</p><br data-v-fcc41752><br data-v-fcc41752><h3 id="web009" class="articleCardTitle cor36" data-v-fcc41752> [ Web筆記 ] ≫ OSI七層模型 </h3><p data-v-fcc41752> 1.物理層利用傳輸介質為數據鏈路層提供物理連接，實現比特流的透明傳輸。 </p><br data-v-fcc41752><p data-v-fcc41752> 2.數據鏈路層在物理層提供的比特流的基礎上，通過差錯控制、流量控制方法，使有差錯的物理線路變為無差錯的數據鏈路。 </p><br data-v-fcc41752><p data-v-fcc41752>3.網絡層向傳輸層提供最基本的端到端的數據傳輸服務。</p><br data-v-fcc41752><p data-v-fcc41752> 4.數據鏈路層向用戶提供可靠的端到端的差錯和流量控制，保證報文的正確傳輸，同時向高層屏蔽下層數據通信的細節，即向用戶透明地傳送報文。 </p><br data-v-fcc41752><p data-v-fcc41752> 5.會話層組織和協調兩個會話進程之間的通信，並對數據交換進行管理。 </p><br data-v-fcc41752><p data-v-fcc41752> 6.表示層處理用戶信息的表示問題，如編碼、數據格式轉換和加密解密等。 </p><br data-v-fcc41752><p data-v-fcc41752> 7.應用層直接向用戶提供服務，完成用戶希望在網絡上完成的各種工作。 </p><br data-v-fcc41752><br data-v-fcc41752><h3 class="articleCardTitle cor36" data-v-fcc41752># 五層網絡協議</h3><p data-v-fcc41752>1.應用層（DNS，HTTP）：域名解析為IP並發送HTTP請求</p><p data-v-fcc41752>2.傳輸層（TCP，UDP）：建立TCP連接（三次握手）</p><p data-v-fcc41752>3.網路層（IP，ARP）：IP尋址</p><p data-v-fcc41752>4.數據鏈路層（PPP）：封裝成幀</p><p data-v-fcc41752> 5.物理層（利用物理介質傳輸比特流）：物理傳輸（通過雙絞線、電磁波等各種介質） </p><br data-v-fcc41752><br data-v-fcc41752><h3 id="web010" class="articleCardTitle cor36" data-v-fcc41752> [ Web筆記 ] ≫ DOMContentLoaded和load的差別? </h3><p data-v-fcc41752>DOMContentLoaded:</p><p data-v-fcc41752>瀏覽器已完全加載 HTML 並構建 DOM 樹，</p><p data-v-fcc41752>但像 ＜img&gt; 和樣式表之類的外部資源 可能尚未加載完成。</p><br data-v-fcc41752><p data-v-fcc41752>load：</p><p data-v-fcc41752>瀏覽器已完全加載 HTML ，還加載完成所有外部資源 。</p><br data-v-fcc41752><p data-v-fcc41752>beforeunload 是在網頁被卸載「之前」觸發</p><p data-v-fcc41752>unload 是在網頁被卸載「之後」觸發</p><br data-v-fcc41752><br data-v-fcc41752><h1 id="web011" class="articleCardTitle cor36" data-v-fcc41752> [ Web筆記 ] ≫ 瀏覽器垃圾回收機制 </h1><p data-v-fcc41752>垃圾回收是一種自動的記憶體管理機制。</p><p data-v-fcc41752>當電腦上的動態記憶體不再需要時，就應該予以釋放。</p><br data-v-fcc41752><p data-v-fcc41752> 自動的意思是瀏覽器可以自動幫助我們回收記憶體垃圾，但並不代表我們不用關心記憶體管理，如果操作不當，JavaScript中仍然會出現記憶 </p><br data-v-fcc41752><br data-v-fcc41752><h3 class="articleCardTitle" data-v-fcc41752>標記清除</h3><p data-v-fcc41752> JavaScript 中有一個全域物件， 在固定的時間間隔內， 垃圾回收器會從這個全域物件開始， </p><br data-v-fcc41752><p data-v-fcc41752>尋找所有從這個全域物件開始引用的物件， 再找這些物件引用的物件</p><br data-v-fcc41752><p data-v-fcc41752> 對這些活躍的物件進行標記， 這是標記階段。 清除階段就是清除那些沒有被標記的物件。 </p><br data-v-fcc41752><br data-v-fcc41752><p data-v-fcc41752>問題: 在整理之後，內存空間是不連續的，即出現了內存碎片。</p><br data-v-fcc41752><br data-v-fcc41752><h3 data-v-fcc41752>標記整理：</h3><p data-v-fcc41752> 標記階段與標記清除法沒什麼區別， 只是標記結束後， 標記整理法會將存活的物件向內存的一邊移動， 最後清理掉邊界內存。 </p><br data-v-fcc41752><br data-v-fcc41752><h3 class="articleCardTitle" data-v-fcc41752>引用記數</h3><p data-v-fcc41752>跟蹤紀錄每個值被引用次數。</p><br data-v-fcc41752><br data-v-fcc41752><h3 class="articleCardTitle" data-v-fcc41752> 在瀏覽器中，不同類型的變量在何時釋放內存？ </h3><p data-v-fcc41752>引用類型: 當它們不再被引用時，由V8自動回收。</p><br data-v-fcc41752><p data-v-fcc41752>基本類型:</p><p data-v-fcc41752>如果處於閉包的情況下，只有在閉包沒有引用時，V8才會回收它們。</p><p data-v-fcc41752>如果不是閉包的情況，則在等待V8進行新生代切換時回收。</p><br data-v-fcc41752><br data-v-fcc41752><h3 class="articleCardTitle" data-v-fcc41752>內存洩漏</h3><p data-v-fcc41752>內存洩漏指任何對象在不再擁有之後它仍然存在</p><br data-v-fcc41752><p data-v-fcc41752>1.閉包使用不當</p><p data-v-fcc41752>2.setTimeout 的第一個参數用字串</p><br data-v-fcc41752><br data-v-fcc41752><p data-v-fcc41752> 循環引用：當兩個或多個物件相互引用，並且沒有被其他物件引用時，它們將無法被垃圾回收。 </p><p data-v-fcc41752> 未釋放資源：使用了需要手動釋放的資源，如檔案處理器、資料庫連線或網路連線，在不再需要時沒有正確釋放這些資源。 </p><p data-v-fcc41752> 定時器和回呼函式： 在使用定時器或回呼函式時，沒有正確清理或取消這些定時器或回呼函式，導致它們仍然保留在內存中。 </p><p data-v-fcc41752> 快取導致： 過度使用快取，將大量物件存儲在快取中，並且沒有適當的清理策略。 </p><br data-v-fcc41752><br data-v-fcc41752><p data-v-fcc41752>解決:</p><p data-v-fcc41752> 解除引用：當不再需要某個物件時，將其引用設置為null，使垃圾回收器能夠回收該物件佔用的內存空間。 </p><p data-v-fcc41752> 關閉資源：對於使用了需要手動釋放的資源，如檔案處理器或資料庫連線，確保在使用完畢後進行正確的關閉和釋放。 </p><p data-v-fcc41752> 取消定時器和回呼函式：在使用定時器或註冊回呼函式時，確保在不再需要時及時取消定時器或移除回呼函式，避免它們繼續佔用內存空間。 </p><p data-v-fcc41752> 合理管理快取：對於使用快取的情況，確保採用適當的清理策略，定期清除不再需要的快取物件，避免過度佔用內存。 </p><p data-v-fcc41752> 注意作用域和生命週期：確保物件的作用域和生命週期符合需求，避免長時間持有物件的引用，及時釋放不再需要的物件。 </p><p data-v-fcc41752>使用內存管理工具和效能分析工具：借助工具進行內存泄漏</p><br data-v-fcc41752><br data-v-fcc41752><h1 id="web012" class="articleCardTitle cor36" data-v-fcc41752> [ Web筆記 ] ≫ 前端需要注意哪些SEO </h1><p data-v-fcc41752>1.合理的title、description、keywords標籤</p><div class="pTwo" data-v-fcc41752>＜title &gt;網頁標題＜/title &gt;</div><div class="pTwo" data-v-fcc41752> ＜meta name=&quot;description&quot; content=&quot;網站內容概述&quot;&gt; </div><div class="pTwo" data-v-fcc41752> ＜meta name=&quot;keywords&quot; content=&quot;SEO,metatag,html&quot;&gt;曾經是SEO優化最重要的根據,但現在不參考keywords來決定SEO排名了 </div><br data-v-fcc41752><p data-v-fcc41752>2.語義化的HTML代碼, 可以讓搜索引擎更容易理解網頁的結構和內容</p><p data-v-fcc41752> 3.重要內容HTML代碼放在最前面： 搜索引擎抓取HTML的順序是從上到下，有些搜索引擎對抓取長度有限制。將重要的內容放在HTML的前面，確保重要內容一定會被抓取。 </p><p data-v-fcc41752>4.重要內容不要用JavaScript輸出： 爬蟲不會執行JavaScript獲得內容</p><p data-v-fcc41752>5.少使用iframe： 搜索引擎通常不會抓取iframe中的內容</p><p data-v-fcc41752> 6.非裝飾性圖片加上 alt 屬性: 當圖片無法加載時會顯示該描述，也可供讀屏器讀取圖片內容。 </p><p data-v-fcc41752>7.提高網站速度： 網站速度是搜索引擎排序的一個重要指標</p><div class="pTwo" data-v-fcc41752>壓縮圖片</div><div class="pTwo" data-v-fcc41752>瀏覽器緩存</div><div class="pTwo" data-v-fcc41752>最小化 CSS 和 JavaScript</div><div class="pTwo" data-v-fcc41752>使用 CDN 庫</div><div class="pTwo" data-v-fcc41752>優化代碼</div><div class="pTwo" data-v-fcc41752>避免重定向</div><div class="pTwo" data-v-fcc41752>壓縮頁面</div><div class="pTwo" data-v-fcc41752>使用快速的主機服務器</div><div class="pTwo" data-v-fcc41752>非同步載入資源</div><div class="pTwo" data-v-fcc41752>使用快取機制</div><br data-v-fcc41752><br data-v-fcc41752><h1 id="web013" class="articleCardTitle cor36" data-v-fcc41752> [ Web筆記 ] ≫ WEB標準 &amp; W3C標準 </h1><p data-v-fcc41752>WEB 標準不是某一個標準，是一系列的集合</p><p data-v-fcc41752>WEB 標準: 結構 . 表現 . 行為</p><p data-v-fcc41752>結構(Structure):</p><p class="pTwo" data-v-fcc41752>指 body 裡面寫的標籤 =&gt; HTML 標籤組成</p><br data-v-fcc41752><p data-v-fcc41752>表現(Presentation)</p><p class="pTwo" data-v-fcc41752>指豐富 HTML 標籤樣式， 由 CSS 樣式組成</p><br data-v-fcc41752><p data-v-fcc41752>行為(Behavior)</p><p class="pTwo" data-v-fcc41752>指頁面和用戶交互，由 JS 組成</p><p class="pTwo" data-v-fcc41752>標準包括: DOM . ECMAScript</p><br data-v-fcc41752><p data-v-fcc41752>W3C對於WEB標準提出了規範化的要求：</p><p data-v-fcc41752>1.標籤字母要小寫。</p><p data-v-fcc41752>2.標籤要閉合。</p><p data-v-fcc41752>3.標籤不允許隨意嵌套。</p><p data-v-fcc41752> 4.儘量用外部連結 CSS樣式表 和 JS 腳本，使結構、表現、行為分離，符合規範。能提高頁面渲染速度，提升使用者體驗。 </p><p class="comment" data-v-fcc41752> 5.儘量減少使用行內樣式表，實現結構與表現的分離。 </p><p class="comment" data-v-fcc41752> 6.標籤的id和class等屬性命名應具有語意，更有利於SEO（搜尋引擎優化），並使代碼易於維護。 </p><br data-v-fcc41752><br data-v-fcc41752><h1 id="web014" class="articleCardTitle cor36" data-v-fcc41752> [ Web筆記 ] ≫ 描述漸進增強和優雅降級之間的不同? </h1><p data-v-fcc41752>漸進增強（Progressive Enhancement）:</p><p data-v-fcc41752> 針對低版本瀏覽器進行構建頁面，保證最基本的功能，然後再針對高級瀏覽器進行效果、互動等改進和追加功能，以達到更好的使用者體驗。 </p><br data-v-fcc41752><p data-v-fcc41752>優雅降級（Graceful Degradation）:</p><p data-v-fcc41752>一開始就構建完整的功能，然後再針對低版本瀏覽器進行兼容。</p><br data-v-fcc41752><br data-v-fcc41752><p data-v-fcc41752> 區別：優雅降級是從複雜的現狀開始，並試圖減少使用者體驗的供給，而漸進增強則是從一個非常基礎的、能夠起作用的版本開始，並不斷擴充，以適應未來環境的需求。降級（功能衰減）意味著往回看；而漸進增強則意味著朝前看，同時保證其根基處於安全地帶。 </p><br data-v-fcc41752><br data-v-fcc41752><h1 id="web015" class="articleCardTitle cor36" data-v-fcc41752> [ Web筆記 ] ≫ 製作網頁用的圖片格式有哪些? </h1><p data-v-fcc41752>Webp . jpeg . gif . svg . Apng</p><br data-v-fcc41752><p data-v-fcc41752>WebP 格式:</p><p data-v-fcc41752>由 Google 開發的一種圖像格式。圖片壓縮體積約只有 JPEG 的 2/3。</p><p data-v-fcc41752>在質量相同情況下， WebP 比 JPEG 小 40%。</p><br data-v-fcc41752><p data-v-fcc41752> Apng: “Animated Portable Network Graphics” 可以實現 png 格式的動態圖片效果。 </p><br data-v-fcc41752><br data-v-fcc41752><h1 id="web016" class="articleCardTitle cor36" data-v-fcc41752> [ Web筆記 ] ≫ 大型網站有大量圖片，加載很慢，有哪些方法能優化這些圖片加載，提升用戶體驗? </h1><p data-v-fcc41752>圖片懶加載:</p><p data-v-fcc41752> 在頁面上的未被看見的區域添加滾動條事件的技術，判斷圖片與瀏覽器頂部的距離和頁面的距離，如果前者小於後者，則優先加載該圖片。 </p><br data-v-fcc41752><p data-v-fcc41752>預加載:</p><p data-v-fcc41752> 如果為幻燈片，可以使用圖片預加載技術，先下載當前展示圖片的前一張和後一張圖片。 </p><br data-v-fcc41752><p data-v-fcc41752> 如果圖片是CSS圖片，可以使用 CSS Sprite、SVG Sprite、Iconfont、Base64等技術 </p><br data-v-fcc41752><p data-v-fcc41752> 如果圖片過大，可以使用特殊編碼的圖片。在加載時，首先加載壓縮程度極高的縮略圖，以提高用戶體驗。 </p><br data-v-fcc41752><p data-v-fcc41752> 如果圖片展示區域小於圖片的實際大小，可以在伺服器端根據業務需求先進行圖片壓縮，使圖片壓縮後的大小與展示一致。 </p><br data-v-fcc41752><br data-v-fcc41752><h1 id="web017" class="articleCardTitle cor36" data-v-fcc41752> [ Web筆記 ] ≫ Web 開發中會話跟蹤的方法有哪些? </h1><p data-v-fcc41752>1.會話</p><p class="pTwo" data-v-fcc41752> 用戶打開瀏覽器，訪問 Web 服務器的資源，會話建立，直到有一方斷開連結，會話結束。 </p><p class="pTwo" data-v-fcc41752>一次會話中可以包含多次請求和響應</p><br data-v-fcc41752><p data-v-fcc41752>2.會話跟蹤</p><p class="pTwo" data-v-fcc41752> 一種維護瀏覽器狀態的方法，服務器需要識別多次請求是否來自於同一瀏覽器，以便於在同一次會話中的多次請求間共享數據。 </p><br data-v-fcc41752><p data-v-fcc41752>一次會話中的多次請求間共享數據 =&gt; 購物車 . 登陸 . 驗證碼</p><br data-v-fcc41752><p data-v-fcc41752> 3.客戶端和伺服器用HTTP協議是無狀態的 =&gt; 伺服器不知道多次請求中，那些來自同一瀏覽器 </p><p class="pTwo" data-v-fcc41752> 每次瀏覽器向伺服器發請求時，伺服器都將該請求視為新的請求 </p><p class="pTwo" data-v-fcc41752>所以需要會話跟蹤</p><p data-v-fcc41752>Cookie 和 Seccion 都是來完成一次會話內多次請求間數據共享</p><p data-v-fcc41752>存取位置: Cookie 數據存在客戶端 ， Session 數據存在伺服器</p><p data-v-fcc41752>安全性: Cookie 不安全 ， Session 安全</p><p data-v-fcc41752>數據大小: Cookie 4KB ， Session 無大小限制</p><p data-v-fcc41752>儲存時間: Cookie 可以長期存取 ， Session 默認 30 min</p><p data-v-fcc41752>伺服器: Cookie 不佔伺服器資源 ， Session 佔用 伺服器資源</p><br data-v-fcc41752><p data-v-fcc41752>1.客戶端會話跟蹤技術 Cookie</p><p data-v-fcc41752>把數據存在客戶端瀏覽器</p><br data-v-fcc41752><p data-v-fcc41752>2.服務端會話跟蹤技術 Session</p><p data-v-fcc41752>把數據存在服務端</p><br data-v-fcc41752><p data-v-fcc41752>3.URL重寫</p><p data-v-fcc41752>URL重寫是一種在URL中嵌入會話ID的方法。</p><br data-v-fcc41752><p data-v-fcc41752>4.隱藏表單字段</p><p data-v-fcc41752> 在HTML表單中，可以添加一個隱藏的字段來存儲會話ID。該字段在每次表單提交時一同發送到服務器，以維護會話狀態。 </p><br data-v-fcc41752><p data-v-fcc41752>5.ip地址</p><p data-v-fcc41752> 伺服器可以記錄使用者的IP地址，並將其與其他會話標識符（如Cookie或會話ID）相關聯。這樣，即使會話標識符發生變化（如Cookie被刪除），伺服器仍然可以根據IP地址來識別使用者並恢復其會話狀態。 </p><br data-v-fcc41752><br data-v-fcc41752><br data-v-fcc41752><br data-v-fcc41752><p data-v-fcc41752> HTTP協議如果是有狀態，每一次後邊請求要攜帶前一次請求所有的數據，會導致後邊數據大，而後邊請求速度慢。 </p><br data-v-fcc41752><br data-v-fcc41752><h1 id="web018" class="articleCardTitle cor36" data-v-fcc41752> [ Web筆記 ] ≫ CDN為什麼利用多個域名來存取網站資源更有效? </h1><p data-v-fcc41752>內容傳遞網路（英語：Content Delivery Network，縮寫：CDN）</p><p data-v-fcc41752> 指一種透過網際網路互相連接的電腦網路系統，利用最靠近每位使用者的伺服器，更快、更可靠地將音樂、圖片、影片、應用程式及其他檔案傳送給使用者，來提供高效能、可擴展性及低成本的網路內容傳遞給使用者。 </p><br data-v-fcc41752><br data-v-fcc41752><p data-v-fcc41752>CDN和緩存:</p><p data-v-fcc41752> 使用多個域名還可以更好地與 內容分發網絡（CDN） 和緩存系統配合使用。 </p><p data-v-fcc41752> CDN可以將網站資源分佈在全球各地的伺服器上，通過使用多個域名，可以更好地與CDN緩存機制配合，提供更快速的內容傳輸和加載。 </p><br data-v-fcc41752><br data-v-fcc41752><br data-v-fcc41752><p data-v-fcc41752>1.突破瀏覽器並發限制：</p><p data-v-fcc41752>瀏覽器對同一域名下的並發請求數量有限制。</p><p data-v-fcc41752> 通過使用CDN，可以將頁面資源分佈在多個CDN伺服器上，使瀏覽器可以同時從多個域名下載資源，從而提高並發性能。 </p><br data-v-fcc41752><p data-v-fcc41752>2.節省Cookie帶寬：</p><p data-v-fcc41752> Cookie是在客戶端和伺服器之間傳輸的小型資料文件，用於存儲會話信息和使用者偏好等。 </p><p data-v-fcc41752> CDN緩存靜態資源時，可以避免將Cookie傳輸到CDN伺服器，從而減少帶寬消耗，提高傳輸效率。 </p><br data-v-fcc41752><p data-v-fcc41752>3.節省主域名的連接數，優化頁面響應速度：</p><p data-v-fcc41752>瀏覽器對同一域名下的並發連接數有限制。</p><p data-v-fcc41752> 使用CDN時，可以將靜態資源（如圖片、CSS和JavaScript文件）分發到CDN伺服器上，從而減輕主域名的負載，提高頁面的響應速度和性能。 </p><br data-v-fcc41752><p data-v-fcc41752>4.防止不必要的安全問題：</p><p data-v-fcc41752> 通過使用CDN，可以將靜態資源從主伺服器分離出來，減少直接與主伺服器進行交互的機會。 </p><p data-v-fcc41752>這有助於防止潛在的攻擊和安全問題，提高網站的安全性。</p><br data-v-fcc41752><br data-v-fcc41752>',759),x8=Yt(()=>v("div",{class:"toTopButton"},[v("div",{class:"disCen"},"___"),v("div",{class:"disCen"},"▲")],-1)),L8=[x8],j8=Yt(()=>v("div",{class:"toBotButton"},[v("div",{class:"disCen"},"▼"),v("div",{class:"disCen"},"￣￣")],-1)),P8=[j8],V8={__name:"WebPage",setup(a){const s=ua(!1);window.addEventListener("scroll",function(){s.value=window.scrollY>0});function d(){window.scrollTo({top:0,left:0,behavior:"smooth"})}function n(){window.scrollTo({top:999999,left:0,behavior:"smooth"})}function t(c){window.scrollTo({top:document.getElementById(`${c}`).offsetTop,behavior:"smooth"})}return(c,e)=>{const l=za("spen");return da(),ca(Q,null,[v("section",null,[v("div",k8,[v("div",g8,[v("div",T8,[v("div",{class:"leftNavText",onClick:e[0]||(e[0]=p=>t("web001"))}," 瀏覽器內核,主要組成部分 "),v("div",{class:"leftNavText",onClick:e[1]||(e[1]=p=>t("web002"))}," 瀏覽器輸入網址後按下enter "),v("div",{class:"leftNavText",onClick:e[2]||(e[2]=p=>t("web003"))},"http協議"),v("div",{class:"leftNavText",onClick:e[3]||(e[3]=p=>t("web004"))}," Cookies.localStorage "),v("div",{class:"leftNavText",onClick:e[4]||(e[4]=p=>t("web005"))}," 什麼是同源策略,不同源會怎樣 "),v("div",{class:"leftNavText",onClick:e[5]||(e[5]=p=>t("web006"))}," 腳本攻擊XSS,請求偽造CSRF "),v("div",{class:"leftNavText",onClick:e[6]||(e[6]=p=>t("web007"))}," 如何進行網站性能優化 "),v("div",{class:"leftNavText",onClick:e[7]||(e[7]=p=>t("web008"))}," 如何進行渲染優化 "),v("div",{class:"leftNavText",onClick:e[8]||(e[8]=p=>t("web009"))},"OSI七層模型"),v("div",{class:"leftNavText",onClick:e[9]||(e[9]=p=>t("web010"))}," DOMContentLoaded和load "),v("div",{class:"leftNavText",onClick:e[10]||(e[10]=p=>t("web011"))}," 瀏覽器垃圾回收機制 "),v("div",{class:"leftNavText",onClick:e[11]||(e[11]=p=>t("web012"))}," 前端需要注意哪些SEO "),v("div",{class:"leftNavText",onClick:e[12]||(e[12]=p=>t("web013"))}," WEB標準&W3C標準 "),v("div",{class:"leftNavText",onClick:e[13]||(e[13]=p=>t("web014"))}," 漸進增強和優雅降級 "),v("div",{class:"leftNavText",onClick:e[14]||(e[14]=p=>t("web015"))}," 製作網頁用的圖片格式 "),v("div",{class:"leftNavText",onClick:e[15]||(e[15]=p=>t("web016"))}," 大型網站有大量圖片 "),v("div",{class:"leftNavText",onClick:e[16]||(e[16]=p=>t("web017"))}," Web開發中會話跟蹤 "),v("div",{class:"leftNavText",onClick:e[17]||(e[17]=p=>t("web018"))}," CDN多個域名存網站資源 ")])])]),v("div",_8,[v("div",z8,[v("div",S8,[q8,v("p",null,[T(l,{class:"cor36"},{default:C(()=>[fa("因為: ")]),_:1}),y8]),C8])])])]),v("div",null,[X(T(W,{name:"fade",tag:"div"},{default:C(()=>[v("div",{onClick:d,class:"toTop"},L8)]),_:1},512),[[Y,s.value]]),X(T(W,{name:"fade",tag:"div"},{default:C(()=>[v("div",{onClick:n,class:"toBot"},P8)]),_:1},512),[[Y,s.value]])])],64)}}},N8=ra(V8,[["__scopeId","data-v-fcc41752"]]);const wv=a=>(ma("data-v-4865db2b"),a=a(),ha(),a),O8={class:"leftNav"},$8={class:"leftNavContainer"},E8={class:"leftNavLayout"},A8=U('<div class="Main" data-v-4865db2b><div class="mainContainer" data-v-4865db2b><h1 id="html001" class="articleCardTitle cor36" data-v-4865db2b> [ Html ] ≫ 塊級元素和行內元素的差別? </h1><h3 data-v-4865db2b>塊元素有哪些?</h3><p data-v-4865db2b> ＜div&gt; . ＜p&gt; . ＜h1&gt; . ＜ul&gt; . ＜table&gt; 獨佔一行, 頁面中垂直排列, 可以設置寬高 和 內外邊距可控 </p><br data-v-4865db2b><h3 data-v-4865db2b>行內元素有哪些?</h3><p data-v-4865db2b> ＜span&gt; . ＜a&gt; . ＜img&gt; . ＜input&gt; 默認同行排列, 寬高由內容決定, 不能設置寬高 </p><br data-v-4865db2b><h3 data-v-4865db2b>行內塊元素特點?</h3><p data-v-4865db2b>display:inline-block 不獨佔一行, 可以設置寬高</p><br data-v-4865db2b><p data-v-4865db2b>空元素: 指沒有內容或結束標籤的HTML元素。</p><p data-v-4865db2b>＜br&gt; . ＜hr&gt; . ＜img&gt; . ＜input&gt; . ＜link&gt; . ＜meta&gt;</p><br data-v-4865db2b><br data-v-4865db2b><p data-v-4865db2b>行內元素如何轉塊元素?</p><p data-v-4865db2b>css display inline block</p><br data-v-4865db2b><br data-v-4865db2b><h2 class="articleCardTitle cor36" data-v-4865db2b> 頁面導入樣式,使用@import和link差異? </h2><p data-v-4865db2b> link支持早於import, 兼容性link比import好, 先加載的是link標籤, 後加載@import </p><br data-v-4865db2b><br data-v-4865db2b><h2 class="articleCardTitle" data-v-4865db2b>src 和 href 差別?</h2><p data-v-4865db2b>相同點:</p><p class="pFou" data-v-4865db2b>都可以加載外部文件</p><br data-v-4865db2b><br data-v-4865db2b><h3 data-v-4865db2b>差別:</h3><p class="pFou" data-v-4865db2b> herf 用在 link , a ; 而 src 用在 img , style , script </p><br data-v-4865db2b><h3 class="pFou" data-v-4865db2b> 瀏覽器遇到 href 會並行下載資源, 且不會停止對當前文檔的處理。 </h3><br data-v-4865db2b><h3 class="pFou" data-v-4865db2b> 瀏覽器遇到 src 會暫停其他資源的下載和處理, 直到該資源加載 或 執行完畢。 </h3><br data-v-4865db2b><br data-v-4865db2b><h1 class="articleCardTitle cor36" data-v-4865db2b> ＜img&gt; 元素的 title 屬性和 alt 屬性有甚麼不同? </h1><p data-v-4865db2b> alt 屬性是必需的，它提供了對於圖像的描述。當圖像無法加載時， alt 屬性的值會顯示在圖像的位置，也可供螢幕閱讀器讀取圖像內容。 </p><br data-v-4865db2b><p data-v-4865db2b> title 屬性提供了對圖像的附加說明。當滑鼠懸停在圖像上時，會顯示 title 屬性的值作為工具提示。 </p><br data-v-4865db2b><br data-v-4865db2b><h1 id="html002" class="articleCardTitle cor36" data-v-4865db2b> [ Html ] ≫ html5有哪些新特性 </h1><p data-v-4865db2b>1. 語意化標籤: header footer nav aside article section</p><p data-v-4865db2b>2. 影片 和 音源 支持: audio video 標籤</p><p data-v-4865db2b> 3. 畫布 canvas 元素允許通過JavaScript動態繪制圖形、動畫和圖像, 失量圖 svg </p><p data-v-4865db2b>4. 本地儲存 localStorage , seesionStorage</p><p data-v-4865db2b> 5. 語意化表單 ，如＜input type=&quot;email&quot;&gt;、＜input type=&quot;url&quot;&gt;、＜input type=&quot;date&quot;&gt;等，使表單的輸入和驗證更加簡化和語義化。 </p><p data-v-4865db2b>6. web worker</p><br data-v-4865db2b><br data-v-4865db2b><h1 class="articleCardTitle cor36" data-v-4865db2b>語義化的理解?</h1><p data-v-4865db2b>HTML語意化就是的 編寫方式, 包括header nav footer標籤</p><p data-v-4865db2b>讓頁面結構更加清晰, 更容易去維護開發</p><p data-v-4865db2b>更容易SEO搜尋引擎優化</p><br data-v-4865db2b><br data-v-4865db2b><h1 id="html003" class="articleCardTitle cor36" data-v-4865db2b> [ Html ] ≫ 那些操作可以提升SEO? </h1><p data-v-4865db2b>可以在header裡面的meta這一章節加上description網頁的描述</p><p data-v-4865db2b>再來可以加上keyword網頁關鍵字</p><p data-v-4865db2b>h1標籤要寫好</p><p data-v-4865db2b> 每個頁面的標籤要寫的符合聯結的東西, 比如你跳轉到一個頁面叫A, 你跳轉的鏈結的文字必須符合那個頁面的內容, </p><br data-v-4865db2b><br data-v-4865db2b><h2 class="articleCardTitle cor36" data-v-4865db2b>canvas能幹嘛?</h2><p data-v-4865db2b>畫圖的 畫2D為主</p><br data-v-4865db2b><br data-v-4865db2b><h2 class="articleCardTitle cor36" data-v-4865db2b>canvas它畫的是偽圖還是失量圖?</h2><p data-v-4865db2b>位圖(有像素操作), SVG才是失量圖</p><br data-v-4865db2b><br data-v-4865db2b><h2 class="articleCardTitle cor36" data-v-4865db2b>canvas支持鼠標事件嗎?</h2><p data-v-4865db2b>不支持</p><br data-v-4865db2b><br data-v-4865db2b><h2 class="articleCardTitle cor36" data-v-4865db2b>canvas和svg區別?</h2><p data-v-4865db2b>1.一個是位圖一個是失量圖</p><p data-v-4865db2b>2.一個是用畫筆一個用標籤,畫筆直接畫,標籤進行累加</p><p data-v-4865db2b>3.SVG可以進行類似CSS樣式,canvas只能全靠自己畫不能用css</p><br data-v-4865db2b><br data-v-4865db2b><h2 class="articleCardTitle cor36" data-v-4865db2b>canvas 要用的話怎麼獲取API?</h2><p data-v-4865db2b>1.獲取canvas dom元素</p><p data-v-4865db2b>2.用dom方法,一開始可以用getContext設2D或3D,</p><p data-v-4865db2b>3.設好後可以用繪畫API, fillStyle之類的</p><br data-v-4865db2b><br data-v-4865db2b><h2 class="articleCardTitle cor36" data-v-4865db2b>失量圖是什麼?</h2><p data-v-4865db2b> 失量圖是不管放大多少倍, 都沒有鋸齒的一種圖形, 因為它保存的不是色彩值, 而是曲線的座標 </p><br data-v-4865db2b><br data-v-4865db2b><h2 class="articleCardTitle cor36" data-v-4865db2b>位圖是什麼?</h2><p data-v-4865db2b>每個像素用RGB來表示</p><br data-v-4865db2b><br data-v-4865db2b><h2 class="articleCardTitle cor36" data-v-4865db2b>svg標籤可以任意嵌套嗎?</h2><p data-v-4865db2b>不可以, 一個svg裡面有單獨的p,g,路徑之類的</p><p data-v-4865db2b>g可以分組式嵌套</p><br data-v-4865db2b><br data-v-4865db2b><h2 class="articleCardTitle cor36" data-v-4865db2b>svg標籤和DOM標籤的區別?</h2><p data-v-4865db2b>svg不可以嵌套,除了g, DOM大部分可以任意嵌套</p><br data-v-4865db2b><br data-v-4865db2b><h2 class="articleCardTitle cor36" data-v-4865db2b> 如果繪畫的量很大,一般用svg還是canvas? </h2><p data-v-4865db2b> canvas, svg相當於是一種DOM元素, 操作有性能問題, 小量圖再用svg更方便一點 </p><br data-v-4865db2b><br data-v-4865db2b><h2 class="articleCardTitle" data-v-4865db2b>3. canvas 的常用 api 有哪些</h2><div data-v-4865db2b><a class="comment svgs" href="https://developer.mozilla.org/zh-TW/docs/Web/API/Canvas_API" data-v-4865db2b>canvas @MDN</a></div><p data-v-4865db2b>getContext: 返回一個指定 canvas 的繪畫環境對象</p><p data-v-4865db2b>beginPath: 開始繪製</p><p data-v-4865db2b>moveTo: 移動畫筆位置</p><p data-v-4865db2b>lineTo: 用來繪畫線段</p><p data-v-4865db2b>stroke: 用來實施繪製的操作</p><p data-v-4865db2b>lineStyle: 設置線段的樣式</p><p data-v-4865db2b>closePath: 結束繪製</p><br data-v-4865db2b><br data-v-4865db2b><h2 class="articleCardTitle cor36" data-v-4865db2b>HTML5 和 H5的區別?</h2><p data-v-4865db2b>H5是手機端顯示的頁面</p><p data-v-4865db2b> HTML5是前端標準化技術的平台, 它提供很多強大功能, 比如再頁面上顯示視屏video標籤, 音屏audio標籤, 網頁中存儲數據 local sessionStorage, 畫2D.3D圖形canvas, 音屏解析, 操作文件, 所有新推出的網頁API都屬於HTML5範圍, 甚至CSS3都屬於HTML5的一部分 </p><br data-v-4865db2b><br data-v-4865db2b><h1 id="html004" class="articleCardTitle cor36" data-v-4865db2b> [ Html ] ≫ Doctype作用?嚴格模式和混雜模式如何區分?他們有何意義? </h1><p data-v-4865db2b> ＜!Doctype&gt;（文件類型聲明）位於文檔中最前面，在＜html&gt;標籤之前。它告訴瀏覽器的解析器用哪個HTML版本的規範來解析網頁。 </p><br data-v-4865db2b><p data-v-4865db2b>嚴格模式：</p><p data-v-4865db2b> 瀏覽器會按照HTML規範的嚴格要求解析和渲染網頁，可以確保網頁在不同瀏覽器之間的一致性。 </p><p data-v-4865db2b>在HTML文檔開頭的Doctype聲明如＜!DOCTYPE html&gt;，則會進入嚴格模式。</p><br data-v-4865db2b><p data-v-4865db2b>混雜模式：</p><p data-v-4865db2b> 瀏覽器以一種向後兼容的方式解析和渲染網頁，以支持舊版本的HTML規範和非標準的HTML代碼。可能導致瀏覽器之間的解析差異。 </p><p data-v-4865db2b> HTML文檔開頭沒有正確的Doctype聲明或使用了過時的Doctype聲明，瀏覽器會進入混雜模式。 </p><br data-v-4865db2b><br data-v-4865db2b><p data-v-4865db2b> 嚴格模式和混雜模式的意義在於幫助開發者確保網頁在各種瀏覽器中的一致性和可靠性。嚴格模式遵循HTML規範，提供了更好的標準支持和更嚴格的錯誤檢查，有助於開發更可靠、易於維護的網頁。而混雜模式則提供了向後兼容的特性，以支持舊版本的網頁和非標準的HTML代碼，但容易導致瀏覽器之間的解析差異和不確定性。因此，建議使用嚴格模式並正確聲明Doctype，以確保網頁的良好兼容性和可靠性。 </p><br data-v-4865db2b><br data-v-4865db2b><h1 class="articleCardTitle cor36" data-v-4865db2b> [ Html ] ≫ HTML全局属性(global attribute)有哪些? </h1><p data-v-4865db2b>1.class：為元素指定一個或多個類名，用於樣式和 JavaScript 操作。</p><p data-v-4865db2b>2.id：為元素指定唯一的標識符。</p><p data-v-4865db2b>3.style：用於內聯樣式，用於指定元素的樣式規則。</p><p data-v-4865db2b>4.title：用於提供關於元素的額外信息。</p><p data-v-4865db2b>5.lang：用於指定元素的語言。</p><p data-v-4865db2b>6.data-*：用於自定義數據屬性，可以存儲與元素相關的自定義數據。</p><p data-v-4865db2b>7.draggable：指定元素是否可拖動。</p><p data-v-4865db2b>8.hidden：指定元素是否隱藏。</p><br data-v-4865db2b><br data-v-4865db2b><h1 class="articleCardTitle" data-v-4865db2b> [ Html ] ≫ 如何在頁面上實現一個圓形的可點擊區域 </h1><div data-v-4865db2b><a class="comment svgs" href="https://codepen.io/wayne23123/pen/jOQBdZr?editors=1010" data-v-4865db2b>作品DEMO: 在頁面上實現一個圓形可點擊區域</a></div><br data-v-4865db2b><br data-v-4865db2b><h1 class="articleCardTitle" data-v-4865db2b>怎樣處理 移動端 1px 被渲染成 2px?</h1><p data-v-4865db2b> 2倍屏 =&gt; 移動設備螢幕尺寸沒有變化，但螢幕分辨率卻提高一倍 ( 同大小螢幕像素多一倍 ) </p><br data-v-4865db2b><p data-v-4865db2b>局部處理:</p><p data-v-4865db2b>meta 標籤中的 viewport 屬性， initial-scale 設為 1</p><p data-v-4865db2b>rem 照設計稿走 ， 利用 transform: scale(0.5) 縮小</p><br data-v-4865db2b><p data-v-4865db2b>全局處理:</p><p data-v-4865db2b>meta 標籤中的 viewport 屬性， initial-scale 設為 0.5</p><p data-v-4865db2b>rem 照設計稿走</p><br data-v-4865db2b><br data-v-4865db2b><h1 id="" class="articleCardTitle cor36" data-v-4865db2b> [ Html ] ≫ div+css 布局 比 table 布局有甚麼優點? </h1><p data-v-4865db2b>div+css:</p><p data-v-4865db2b> 頁面加載速度更快，結構化清晰。(他一邊加載一邊呈現，至少基本網頁結構可以很快呈現) </p><p data-v-4865db2b>div 布局符合 W3C 標準 =&gt; 做到了 結構 表現 行為 分離</p><p data-v-4865db2b>有利 SEO</p><br data-v-4865db2b><p data-v-4865db2b>table:</p><p data-v-4865db2b> 如果 table 嵌套層數太多，可能導致頁面一直出不來。(table 布局要等到全部 table 加載完，再呈現頁面) </p><br data-v-4865db2b><br data-v-4865db2b><h1 id="" class="articleCardTitle" data-v-4865db2b> [ Html ] ≫ iframe（內嵌框架）有哪些缺點? </h1><p data-v-4865db2b>1.iframe的載入確實會阻塞主頁面的onload事件。</p><p class="pTwo" data-v-4865db2b> 當頁面中包含一個或多個iframe元素時，當iframe開始載入和渲染內容時，主頁面的onload事件將被延遲到所有的iframe載入完成後才觸發。 </p><br data-v-4865db2b><p data-v-4865db2b>2.搜索引擎無法解讀這種頁面，不利 SEO。</p><br data-v-4865db2b><p data-v-4865db2b> 3.iframe 和主頁面共享連接池，而瀏覽器對相同域的連接有限制，所以會影響頁面的併行加載 </p><br data-v-4865db2b><br data-v-4865db2b><p data-v-4865db2b> 使用 JS 動態給 iframe 添加 src 屬性值可以避免 阻塞主頁面的onload事件 和 和主頁面共享連接池 </p><br data-v-4865db2b><p data-v-4865db2b>1.在主頁面的 onload 事件觸發後再用 JS 給 iframe 添加 src 屬性</p><p data-v-4865db2b> 2.在主頁面加載完成後 用 JS 給 iframe 添加 src 屬性 可以減少對連接池的佔用，提高頁面並行加載能力。 </p><br data-v-4865db2b><br data-v-4865db2b><h1 id="" class="articleCardTitle" data-v-4865db2b> [ Html ] ≫ XHTML（可擴展超文本標記語言）和HTML（超文本標記語言）區別? </h1><p data-v-4865db2b>1.XHTML 元素必須正確嵌套</p><p data-v-4865db2b>2.XHTML 標籤必須閉合</p><p data-v-4865db2b>3.XHTML 元素必須</p><p data-v-4865db2b>4.XHTML 標籤名小寫</p><p data-v-4865db2b>5.XHTML 必須有根元素 -&gt; ＜html&gt;</p><br data-v-4865db2b><p data-v-4865db2b>語法要求：</p><p class="pTwo" data-v-4865db2b> HTML語法相對寬鬆，不強制要求標籤閉合，標籤名可以使用大寫或小寫。 </p><p class="pTwo" data-v-4865db2b> XHTML採用XML語法，要求所有標籤必須閉合，並且標籤名必須使用小寫。 </p><br data-v-4865db2b><p data-v-4865db2b>兼容性：</p><p class="pTwo" data-v-4865db2b> HTML對於各大瀏覽器的兼容性相對較差，特別是對於IE瀏覽器而言。網頁開發者需要具備較高的HTML編寫技巧，否則容易出現兼容性問題。 </p><p class="pTwo" data-v-4865db2b> XHTML則能夠有效處理各大瀏覽器的兼容性問題，因為XHTML的語法要求較為嚴謹。如果習慣於鬆散的HTML編寫方式，轉向XHTML可能需要一些適應的時間。XHTML結合了部分XML的強大功能和大部分HTML的簡單特性。 </p><br data-v-4865db2b><br data-v-4865db2b><h1 id="" class="articleCardTitle cor36" data-v-4865db2b> [ Html ] ≫ ＜meta name=&quot;viewport&quot;&gt; </h1><div class="bgcVS" data-v-4865db2b><div data-v-4865db2b><span class="then" data-v-4865db2b></span><span class="number" data-v-4865db2b>meta </span><span class="function" data-v-4865db2b>name</span><span class="then" data-v-4865db2b>=&quot;</span><span class="src" data-v-4865db2b>viewport</span><span class="then" data-v-4865db2b>&quot;</span><span class="function" data-v-4865db2b>content</span><span class="then" data-v-4865db2b>=&quot;</span><span class="src" data-v-4865db2b>width=device-width,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0,user-scalable=no</span><span class="then" data-v-4865db2b>&quot; /&gt;</span></div><br data-v-4865db2b><div class="comment" data-v-4865db2b> // width 設置viewport寬度，可以是正整數或字符串&#39;device-width&#39; </div><br data-v-4865db2b><div class="comment" data-v-4865db2b>// device-width 設備寬度</div><br data-v-4865db2b><div class="comment" data-v-4865db2b> // height 設置viewport高度，一般設置寬度後，高度會自動解析，可以不設置 </div><br data-v-4865db2b><div class="comment" data-v-4865db2b> // initial-scale 默認縮放比例（初始縮放比例），為一個數字，可以帶小數 </div><br data-v-4865db2b><div class="comment" data-v-4865db2b> // minimum-scale 允許用戶最小縮放比例，為一個數字，可以帶小數 </div><br data-v-4865db2b><div class="comment" data-v-4865db2b> // maximum-scale 允許用戶最大縮放比例，為一個數字，可以帶小數 </div><br data-v-4865db2b><div class="comment" data-v-4865db2b>// user-scalable 是否允許手動縮放</div><br data-v-4865db2b><br data-v-4865db2b></div><br data-v-4865db2b><br data-v-4865db2b><h2 class="articleCardTitle" data-v-4865db2b>4. web worker 有甚麼作用?應用場景?</h2><div data-v-4865db2b><a class="comment svgs" href="https://developer.mozilla.org/zh-TW/docs/Web/API/Web_Workers_API/Using_web_workers" data-v-4865db2b>web worker @MDN</a></div><p data-v-4865db2b>新開一個子線程, 且子線程的操作不受線程影響</p><p data-v-4865db2b>用於大數據處理 或 耗費時間長的操作</p><br data-v-4865db2b><br data-v-4865db2b><h1 id="" class="articleCardTitle cor36" data-v-4865db2b> [ Html ] ≫ html5 的離線儲存 </h1><p data-v-4865db2b> 當使用者沒有與網際網路連接時，可以正常訪問網站或應用程式；當使用者與網際網路連接時，則會更新使用者機器上的快取檔案。 </p><br data-v-4865db2b><p data-v-4865db2b> 工作原理：HTML5的離線儲存是建立在一個名為「.appcache」的快取機制上（並非儲存技術）。透過這個檔案中的解析清單，網站的資源可以被離線儲存。當網路處於離線狀態時，瀏覽器會使用這些已儲存的資源來顯示網頁。 </p><br data-v-4865db2b><p data-v-4865db2b>使用方法：</p><p class="pTwo" data-v-4865db2b> 1.在網頁的標頭中加入「manifest」屬性，例如：＜html manifest=&quot;cache.manifest&quot;&gt;＜/html&gt; </p><p class="pTwo" data-v-4865db2b> 2.創建一個「cache.manifest」檔案，並在其中編寫離線儲存的資源清單。 </p><p class="pTwo" data-v-4865db2b> 3.在需要實現離線儲存的地方，可以使用「window.applicationCache」對離線儲存進行操作。例如，可以通過檢查「applicationCache.status」來確定快取的狀態，並根據需要更新或讀取快取的資源。 </p><br data-v-4865db2b><br data-v-4865db2b></div></div>',1),M8=wv(()=>v("div",{class:"toTopButton"},[v("div",{class:"disCen"},"___"),v("div",{class:"disCen"},"▲")],-1)),F8=[M8],I8=wv(()=>v("div",{class:"toBotButton"},[v("div",{class:"disCen"},"▼"),v("div",{class:"disCen"},"￣")],-1)),R8=[I8],H8={__name:"HtmlPage",setup(a){const s=ua(!1);window.addEventListener("scroll",function(){s.value=window.scrollY>0});function d(){window.scrollTo({top:0,left:0,behavior:"smooth"})}function n(){window.scrollTo({top:999999,left:0,behavior:"smooth"})}function t(c){window.scrollTo({top:document.getElementById(`${c}`).offsetTop,behavior:"smooth"})}return(c,e)=>(da(),ca(Q,null,[v("section",null,[v("div",O8,[v("div",$8,[v("div",E8,[v("div",{onClick:e[0]||(e[0]=l=>t("html001")),class:"leftNavText"}," 塊級元素和行內元素的差別 "),v("div",{onClick:e[1]||(e[1]=l=>t("html002")),class:"leftNavText"},"html5新特性"),v("div",{onClick:e[2]||(e[2]=l=>t("html003")),class:"leftNavText"}," 那些操作可以提升SEO "),v("div",{onClick:e[3]||(e[3]=l=>t("html004")),class:"leftNavText"}," Doctype作用,嚴格模式和混雜模式 ")])])]),A8]),v("div",null,[X(T(W,{name:"fade",tag:"div"},{default:C(()=>[v("div",{onClick:d,class:"toTop"},F8)]),_:1},512),[[Y,s.value]]),X(T(W,{name:"fade",tag:"div"},{default:C(()=>[v("div",{onClick:n,class:"toBot"},R8)]),_:1},512),[[Y,s.value]])])],64))}},B8=ra(H8,[["__scopeId","data-v-4865db2b"]]);const J8={};function D8(a,s){const d=za("RouterLink"),n=za("RouterView");return da(),ca(Q,null,[v("div",null,[v("ul",null,[v("li",null,[T(d,{to:"/css"},{default:C(()=>[fa("主文章")]),_:1})]),v("li",null,[T(d,{to:"/css/pagetwo"},{default:C(()=>[fa("練習題")]),_:1})])])]),T(n)],64)}const W8=ra(J8,[["render",D8],["__scopeId","data-v-2e772d82"]]),U8="/vue-learn-js/assets/cssbox001-91b4c462.png";const Yd=a=>(ma("data-v-f8d93cc6"),a=a(),ha(),a),K8={class:"leftNav"},X8={class:"leftNavContainer"},Y8={class:"leftNavLayout"},G8=Yd(()=>v("br",null,null,-1)),Q8={class:"Main"},Z8={class:"mainContainer"},ai={class:"mainLayout"},si=U('<br data-v-f8d93cc6><br data-v-f8d93cc6><p class="cor36" data-v-f8d93cc6>CSS3有哪些新屬性?</p><p data-v-f8d93cc6>flex transform translation animation 陰影 圓角</p><br data-v-f8d93cc6><br data-v-f8d93cc6><div id="cssOne001" class="articleCardTitle cor36" data-v-f8d93cc6> [ CSS ] ≫ CSS有幾個單位px,rem,em,vw分別是怎樣? </div><p data-v-f8d93cc6>px是一個像素 . . . 絕對單位長度</p><br data-v-f8d93cc6><br data-v-f8d93cc6><p class="pFou" data-v-f8d93cc6>像素 是 顯示器上 給我們呈現畫面的 像素</p><br data-v-f8d93cc6><p data-v-f8d93cc6>rem是 相對 根元素 (html) 字體大小進行計算的 . . . 相對單位</p><br data-v-f8d93cc6><p class="pFou" data-v-f8d93cc6>瀏覽器 默認字體大小 16px , 一般 1 rem = 16 px</p><br data-v-f8d93cc6><br data-v-f8d93cc6><p data-v-f8d93cc6>em 相對 當前元素 字體大小 來計算</p><br data-v-f8d93cc6><p class="pFou" data-v-f8d93cc6>有人說 相對於 父元素</p><br data-v-f8d93cc6><p class="pFou" data-v-f8d93cc6>因為 font-size 這屬性 可以被繼承</p><br data-v-f8d93cc6><p class="pFou" data-v-f8d93cc6>所以 父元素 字體大小 會影響 子元素 字體大小</p><br data-v-f8d93cc6><p class="pFou" data-v-f8d93cc6>子元素 如果沒有 自己的 font-size</p><br data-v-f8d93cc6><p class="pFou" data-v-f8d93cc6>那子元素的 font-size 會繼承 父元素</p><br data-v-f8d93cc6><p class="pFou" data-v-f8d93cc6>此時 1 em 就會被認為 相對於 父元素 字體大小計算</p><br data-v-f8d93cc6><br data-v-f8d93cc6><p data-v-f8d93cc6>vw相對於設備視口的寬度</p><br data-v-f8d93cc6><br data-v-f8d93cc6><p class="cor36" data-v-f8d93cc6># 像素是絕對的單位嗎?</p><p data-v-f8d93cc6>像素是由操作系統和硬件決定的</p><br data-v-f8d93cc6><p data-v-f8d93cc6>一般來說硬件的象素是改變不了的</p><br data-v-f8d93cc6><p data-v-f8d93cc6>但是操作系統可以說你這個硬件我 2 個象素做 1 個象素用</p><br data-v-f8d93cc6><br data-v-f8d93cc6><p class="cor36" data-v-f8d93cc6># vw的v</p><p data-v-f8d93cc6>viewport視口, 眼睛所能瀏覽到的區域</p><br data-v-f8d93cc6><p class="cor36" data-v-f8d93cc6># 視口是窗口嗎?</p><p data-v-f8d93cc6>不是,如果窗口裡面有一個內嵌窗口, 這個viewport會變成指內嵌窗口</p><br data-v-f8d93cc6><br data-v-f8d93cc6><div id="cssOne014" class="articleCardTitle cor36" data-v-f8d93cc6> [ CSS ] ≫ link &amp; @import </div><p data-v-f8d93cc6>都是引入外部 CSS 的方式</p><br data-v-f8d93cc6><br data-v-f8d93cc6><p data-v-f8d93cc6>1.</p><p data-v-f8d93cc6>link 是 HTML 提供的標籤</p><br data-v-f8d93cc6><p data-v-f8d93cc6> @import 是 CSS 提供語法 /p&gt; <br data-v-f8d93cc6><br data-v-f8d93cc6></p><p data-v-f8d93cc6>2.加載順</p><p data-v-f8d93cc6>加載頁面時 link 標籤引入 CSS 可同時加載</p><br data-v-f8d93cc6><p data-v-f8d93cc6>@import 只會在頁面加載完畢後 才被加載</p><br data-v-f8d93cc6><br data-v-f8d93cc6><p data-v-f8d93cc6>3.</p><p data-v-f8d93cc6>link 支持使用 JS 控制 DOM 去改變樣式 (插入link標籤)</p><br data-v-f8d93cc6><p data-v-f8d93cc6>@import 不支持</p><br data-v-f8d93cc6><br data-v-f8d93cc6><div id="cssOne002" class="articleCardTitle cor36" data-v-f8d93cc6> [ CSS ] ≫ position 的值和作用? </div><p data-v-f8d93cc6>static . relative . absolute . fixed</p><br data-v-f8d93cc6><p class="cor36" data-v-f8d93cc6>static</p><p class="pTwo" data-v-f8d93cc6> 它是文檔流布局, 有行內元素和塊元素, 塊元素有一行接一行這種, 行內元素就是橫著直到一行待不下就到第二行 </p><br data-v-f8d93cc6><p class="cor36" data-v-f8d93cc6>relative</p><p class="pTwo" data-v-f8d93cc6>將元素偏離文檔流, 但占用正常文檔流位置</p><p class="pTwo" data-v-f8d93cc6>relative 相對於 自身 進行定位</p><br data-v-f8d93cc6><p class="cor36" data-v-f8d93cc6>absolute</p><p class="pTwo" data-v-f8d93cc6>將元素偏離文檔流, 不占用正常文檔流位置</p><br data-v-f8d93cc6><p class="pTwo" data-v-f8d93cc6> 若沒有指定基準元素的話，預設以 body 元素(整個視窗)為基準 </p><p class="pTwo" data-v-f8d93cc6> absolute 元素的父元素 有 相對 或 絕對 定位 的元素的話 </p><p class="pTwo" data-v-f8d93cc6> absolute 元素相對於父元素 的 padding 左上角進行定位 </p><br data-v-f8d93cc6><p class="cor36" data-v-f8d93cc6>fixed</p><p class="pTwo" data-v-f8d93cc6>將元素偏離文檔流, 不占用正常文檔流位置</p><p class="pTwo" data-v-f8d93cc6>相對於 body 定位</p><br data-v-f8d93cc6><br data-v-f8d93cc6><p class="cor36" data-v-f8d93cc6>sticky</p><p class="pTwo" data-v-f8d93cc6> 和 fixed 很像，差在 sticky 會佔住原本版面的空間，和 sticky 的預設 width 是 100 % (滿版) </p><br data-v-f8d93cc6><p class="pTw" data-v-f8d93cc6> 被 fixed 的區塊會被固定在指定位置，並且覆蓋網頁中內容 </p><p class="pTw" data-v-f8d93cc6> 而 sticky 會讓原本網頁的內容推到下面，不會讓 sticky 擋住原有的文字。 </p><br data-v-f8d93cc6><br data-v-f8d93cc6><div id="cssOne012" class="articleCardTitle cor36" data-v-f8d93cc6> [ CSS ] ≫ display的值? </div><h3 data-v-f8d93cc6>none . 隱藏元素</h3><br data-v-f8d93cc6><br data-v-f8d93cc6><h3 data-v-f8d93cc6>block . 把某元素 轉成 塊元素</h3><br data-v-f8d93cc6><br data-v-f8d93cc6><h3 data-v-f8d93cc6>inline . 把某元素 轉成 內聯元素</h3><br data-v-f8d93cc6><br data-v-f8d93cc6><h3 data-v-f8d93cc6>inline-block . 把某元素 轉成 行內塊元素</h3><br data-v-f8d93cc6><br data-v-f8d93cc6><h3 data-v-f8d93cc6>flex . 彈性盒子</h3><br data-v-f8d93cc6><br data-v-f8d93cc6><h3 data-v-f8d93cc6></h3><br data-v-f8d93cc6><br data-v-f8d93cc6><h3 data-v-f8d93cc6>塊元素</h3><p data-v-f8d93cc6> ＜div&gt; . ＜p&gt; . ＜h1&gt; . ＜ul&gt; . ＜table&gt; 獨佔一行, 頁面中垂直排列, 可以設置寬高 和 內外邊距可控 </p><br data-v-f8d93cc6><h3 data-v-f8d93cc6>行內元素</h3><p data-v-f8d93cc6> ＜span&gt; . ＜a&gt; . ＜img&gt; . ＜input&gt; 默認同行排列, 寬高由內容決定, 不能設置寬高 </p><br data-v-f8d93cc6><h3 data-v-f8d93cc6>行內塊元素</h3><p data-v-f8d93cc6>display:inline-block 不獨佔一行, 可以設置寬高</p><br data-v-f8d93cc6><div id="cssOne003" class="articleCardTitle cor36" data-v-f8d93cc6> [ CSS ] ≫ 盒模型?區別? </div><p data-v-f8d93cc6>分為content-box和border-box</p><p data-v-f8d93cc6>區別在於width指定寬度不同</p><p data-v-f8d93cc6>content-box的寬度是內容的寬度</p><p data-v-f8d93cc6>border-box的寬度是內容寬度加上padding加上border</p><br data-v-f8d93cc6><br data-v-f8d93cc6><div class="disCen" data-v-f8d93cc6><img style="max-width:500px;" src="'+U8+'" alt="" data-v-f8d93cc6></div><br data-v-f8d93cc6><br data-v-f8d93cc6><p class="cor36" data-v-f8d93cc6>#　一般用哪種?為什麼?</p><p data-v-f8d93cc6>border-box</p><p data-v-f8d93cc6> 因為你改變大小時,那個盒子總大小不會變 ; 子元素會繼承父元素寬度 content-box 寬度比你預想的要寬 用borderbox比較方便不用做額外計算 </p><br data-v-f8d93cc6><br data-v-f8d93cc6><p class="cor36" data-v-f8d93cc6> # *{box-sizing:border-box}偽元素會被影響到嗎?為什麼? </p><p data-v-f8d93cc6>不會, 因為*就選不到偽元素, *:before *:after</p><br data-v-f8d93cc6><br data-v-f8d93cc6><div id="cssOne004" class="articleCardTitle cor36" data-v-f8d93cc6> [ CSS ] ≫ BFC是什麼 </div><p data-v-f8d93cc6>塊級格式化上下文</p><p data-v-f8d93cc6>當前元素把他所有子元素包起來,不受外部影響</p><p data-v-f8d93cc6> 在一個BFC中，塊狀盒子與行盒（行盒由一行中所有的內聯元素所組成）都會垂直地沿著其父元素的邊框排列。 </p><br data-v-f8d93cc6><br data-v-f8d93cc6><p class="cor36" data-v-f8d93cc6># 為什麼要觸發BFC?</p><p data-v-f8d93cc6>阻止margin重叠 . 解决高度塌陷问题 . 消除浮動</p><br data-v-f8d93cc6><br data-v-f8d93cc6><p class="cor36" data-v-f8d93cc6># BFC怎麼觸發?</p><p data-v-f8d93cc6>overflow 的值非 visable . . . 一般用 overflow hidden</p><p data-v-f8d93cc6>display 的值為 inline-block</p><p data-v-f8d93cc6>position 的值為 absolute 或 fixed</p><p data-v-f8d93cc6>float 的值非 none</p><br data-v-f8d93cc6><br data-v-f8d93cc6><p class="cor36" data-v-f8d93cc6># margin外邊距重疊? or 外邊距合併?</p><p data-v-f8d93cc6> 塊級元素的上外邊距和下外邊距有時會合併（或折疊）為一個外邊距，其大小取其中的最大者。 </p><br data-v-f8d93cc6><p data-v-f8d93cc6> 假設一個div元素在上面，另一個div元素在下面，下面外邊距為20px，上面外邊距為30px，他們之間的邊距會取最大值30px。 </p><br data-v-f8d93cc6><br data-v-f8d93cc6><p class="cor36" data-v-f8d93cc6># 高度塌陷問題?</p><p data-v-f8d93cc6> 父元素没有設定大小（或不設定高度），子元素浮動，子元素會跳出父元素的邊界（脫離文檔流）當父元素的高度為auto時，父元素的高度直接為0。 </p><br data-v-f8d93cc6><p class="vor36" data-v-f8d93cc6>解決:</p><p class="pFou" data-v-f8d93cc6>1.父元素設定固定高度。</p><p class="pFou" data-v-f8d93cc6>2.父元素設定overflow:hidden屬性。</p><p class="pFou" data-v-f8d93cc6>3.在父元素末尾添加一個空元素並設定為清除浮動。</p><p class="pFou" data-v-f8d93cc6>4.使用after偽元素來清除浮動。</p><br data-v-f8d93cc6><br data-v-f8d93cc6><p class="cor36" data-v-f8d93cc6># 清除浮動有哪些方式?</p><p data-v-f8d93cc6>1.觸發BFC</p><p data-v-f8d93cc6> 2.後面加一個after偽類, content設為空, display設為block, 然後加一個clear:both, 現在我一般用FLEX沒怎麼用浮動 </p><br data-v-f8d93cc6><br data-v-f8d93cc6><div id="cssOne005" class="articleCardTitle cor36" data-v-f8d93cc6> [ CSS ] ≫ CSS選擇器優先級和權重? </div><span data-v-f8d93cc6><a href="https://ithelp.ithome.com.tw/articles/10243699" data-v-f8d93cc6>資料來源: 選擇器表 @iT邦幫忙 Eudora</a></span><div data-v-f8d93cc6></div><br data-v-f8d93cc6><p data-v-f8d93cc6> !import &gt; 內聯樣式 &gt; id 選擇器 &gt; 類選擇器 &gt; 標籤選擇器 &gt; 通配符選擇器 </p><br data-v-f8d93cc6><p class="cor36" data-v-f8d93cc6>CSS 權重計算:</p><p data-v-f8d93cc6>1.第一等: 內聯樣式 權重 1000</p><br data-v-f8d93cc6><p data-v-f8d93cc6>2.第二等: ID選擇器 權重 100</p><br data-v-f8d93cc6><p data-v-f8d93cc6>3.第三等: 類,屬性,偽類選擇器 權重 10</p><br data-v-f8d93cc6><p data-v-f8d93cc6>4.第四等: 標籤選擇器,偽元素選擇器 權重 1</p><br data-v-f8d93cc6><p data-v-f8d93cc6>5.第五等: 通配符選擇器 權重 0</p><br data-v-f8d93cc6><br data-v-f8d93cc6><p class="cor36" data-v-f8d93cc6># 選擇器在解析在匹配的時候從左邊開始還是右邊開始?</p><p class="cor36" data-v-f8d93cc6> or # 假設我的選擇器是 a b c,目標是找到所有c,那瀏覽器是先去找到所有的c還是先找所有的a? </p><br data-v-f8d93cc6><p data-v-f8d93cc6>瀏覽器會從右到左解析CSS選擇器</p><p data-v-f8d93cc6>∕span -&gt; ∕div -&gt; html</p><br data-v-f8d93cc6><p data-v-f8d93cc6>從c找到a,右往左找</p><br data-v-f8d93cc6><br data-v-f8d93cc6>',211),di=Yd(()=>v("span",null,"性能問題,假設從左往右會先找到很多a,可能99%沒用,沒必要找",-1)),ti=U('<br data-v-f8d93cc6><br data-v-f8d93cc6><p class="cor36" data-v-f8d93cc6>想選擇一個標籤的下一子層?</p><p data-v-f8d93cc6>標籤 右鍵頭 再加一個標籤</p><br data-v-f8d93cc6><div class="dis spa" data-v-f8d93cc6><div data-v-f8d93cc6>elA &gt; elB</div><div data-v-f8d93cc6>A 的下一子層 的所有 B (不含子子層)</div><div data-v-f8d93cc6>article &gt; h2</div></div><br data-v-f8d93cc6><br data-v-f8d93cc6><p class="cor36" data-v-f8d93cc6> # CSS選擇器,我想選擇一個標籤的下一個標籤用什麼選擇器? </p><p data-v-f8d93cc6>加號選擇器</p><br data-v-f8d93cc6><div class="dis spa" data-v-f8d93cc6><div data-v-f8d93cc6>elA + elB</div><div data-v-f8d93cc6>緊接在 A 後面的 B (同輩)</div><div data-v-f8d93cc6>h1 + p</div></div><br data-v-f8d93cc6><br data-v-f8d93cc6><p class="cor36" data-v-f8d93cc6># 如果要找到所有name,x開頭的標籤,能找到嗎?</p><p data-v-f8d93cc6>屬性選擇器 加 上間號 等於</p><br data-v-f8d93cc6><div class="dis spa" data-v-f8d93cc6><div data-v-f8d93cc6>X[ attr ^= val ]</div><div data-v-f8d93cc6>有___屬性且屬性值&quot;開頭&quot;為___的 X</div><div data-v-f8d93cc6>a[src^=&quot;https&quot;]</div></div><br data-v-f8d93cc6><br data-v-f8d93cc6><p class="cor36" data-v-f8d93cc6> # jQuery選擇器怎麼實現的?IE可以.a或.b但不支持.a .b你怎麼實現查找$(&quot;.a .b&quot;)查找過程? </p><p data-v-f8d93cc6> 先把選擇器做正則解析, 發現它的層級關係, 遍歷所有元素, 看它是否滿足這個關係 </p><br data-v-f8d93cc6><br data-v-f8d93cc6><div id="cssOne006" class="articleCardTitle cor36" data-v-f8d93cc6> [ CSS ] ≫ 水平垂直置中? </div><div data-v-f8d93cc6>(margin 0 auto 前提是 child 要設寬)</div><div data-v-f8d93cc6>(margin auto前提是當前元素是絕對定位)</div><div data-v-f8d93cc6> (translate前提是先做了絕對定位, 距離負元素 let 50% top50% 再translate(-50%, -50%)) </div><br data-v-f8d93cc6><div data-v-f8d93cc6>1.知不知寬高 . 水平or垂直</div><br data-v-f8d93cc6><h3 class="cor36" data-v-f8d93cc6>塊級元素居中布局</h3><p class="cor36" data-v-f8d93cc6>水平居中</p><p class="pFou" data-v-f8d93cc6>知道寬：margin: 0 auto;</p><p class="pFou" data-v-f8d93cc6>不知寬</p><br data-v-f8d93cc6><p class="cor36" data-v-f8d93cc6>垂直居中</p><p class="pFou" data-v-f8d93cc6> position: absolute 設置 left、top、margin-left、margin-to (定高) </p><p class="pFou" data-v-f8d93cc6>position: fixed 設置 margin: auto (定高)</p><p class="pFou" data-v-f8d93cc6>display: table-cell</p><p class="pFou" data-v-f8d93cc6>transform: translate(x, y)</p><p class="pFou" data-v-f8d93cc6>flex (不定高，不定寬) ie11 ↑</p><p class="pFou" data-v-f8d93cc6>grid (不定高，不定寬)，兼容性相對比較差 ie10 ↑</p><br data-v-f8d93cc6><h3 class="cor36" data-v-f8d93cc6>內聯元素居中布局</h3><p class="cor36" data-v-f8d93cc6>水平居中</p><p class="pFou" data-v-f8d93cc6>行內元素父元素下可設置：text-align: center</p><p class="pFou" data-v-f8d93cc6> flex布局設置父元素：display: flex; justify-content: center </p><br data-v-f8d93cc6><p class="cor36" data-v-f8d93cc6>垂直居中</p><p class="pFou" data-v-f8d93cc6>單行文本父元素確認高度：height === line-height</p><br data-v-f8d93cc6><br data-v-f8d93cc6><br data-v-f8d93cc6><br data-v-f8d93cc6><h3 class="cor36" data-v-f8d93cc6>塊級元素居中布局</h3><br data-v-f8d93cc6><p data-v-f8d93cc6>flex 彈性盒子布局 (主軸垂直 , 交叉軸水平)</p><p data-v-f8d93cc6> justify-content: center會使flex容器下的所有flex項目全部水平居中。 </p><p data-v-f8d93cc6>缺點? _ IE8以下不能用</p><br data-v-f8d93cc6><div class="bgcVS" data-v-f8d93cc6><div data-v-f8d93cc6><span class="then" data-v-f8d93cc6>＜</span> <span class="number" data-v-f8d93cc6>div </span><span class="function" data-v-f8d93cc6>class </span> <span class="then" data-v-f8d93cc6>= &quot;</span><span class="word" data-v-f8d93cc6>parent</span><span class="then" data-v-f8d93cc6>&quot;</span> <span class="then" data-v-f8d93cc6>&gt;</span></div><div class="pTwo" data-v-f8d93cc6><span class="then" data-v-f8d93cc6>＜</span> <span class="number" data-v-f8d93cc6>div </span><span class="function" data-v-f8d93cc6>class </span> <span class="then" data-v-f8d93cc6>=&quot;</span><span class="word" data-v-f8d93cc6>child</span> <span class="then" data-v-f8d93cc6>&quot;&gt;＜/ </span><span class="number" data-v-f8d93cc6>div </span> <span class="then" data-v-f8d93cc6>&gt;</span></div><div data-v-f8d93cc6><span class="then" data-v-f8d93cc6>＜ </span> <span class="number" data-v-f8d93cc6>div </span><span class="then" data-v-f8d93cc6>&gt;</span></div><div class="brackets" data-v-f8d93cc6>.parent {</div><div class="brackets pTwo" data-v-f8d93cc6>display: flex;</div><div class="brackets pTwo" data-v-f8d93cc6>justify-content: center;</div><div class="brackets pTwo" data-v-f8d93cc6>align-items: center;</div><div class="brackets" data-v-f8d93cc6>}</div></div><br data-v-f8d93cc6><br data-v-f8d93cc6><p data-v-f8d93cc6>flex 格線佈局布局</p><br data-v-f8d93cc6><div class="bgcVS" data-v-f8d93cc6><div data-v-f8d93cc6><span class="then" data-v-f8d93cc6>＜</span> <span class="number" data-v-f8d93cc6>div </span><span class="function" data-v-f8d93cc6>class </span> <span class="then" data-v-f8d93cc6>= &quot;</span><span class="word" data-v-f8d93cc6>parent</span><span class="then" data-v-f8d93cc6>&quot;</span> <span class="then" data-v-f8d93cc6>&gt;</span></div><div class="pTwo" data-v-f8d93cc6><span class="then" data-v-f8d93cc6>＜</span> <span class="number" data-v-f8d93cc6>div </span><span class="function" data-v-f8d93cc6>class </span> <span class="then" data-v-f8d93cc6>=&quot;</span><span class="word" data-v-f8d93cc6>child</span> <span class="then" data-v-f8d93cc6>&quot;&gt;＜/ </span><span class="number" data-v-f8d93cc6>div </span> <span class="then" data-v-f8d93cc6>&gt;</span></div><div data-v-f8d93cc6><span class="then" data-v-f8d93cc6>＜ </span> <span class="number" data-v-f8d93cc6>div </span><span class="then" data-v-f8d93cc6>&gt;</span></div><div class="brackets" data-v-f8d93cc6>.parent {</div><div class="brackets pTwo" data-v-f8d93cc6>display: grid;</div><div class="brackets" data-v-f8d93cc6>}</div><div class="brackets" data-v-f8d93cc6>.child {</div><div class="brackets pTwo" data-v-f8d93cc6>justify-self: center;</div><div class="brackets pTwo" data-v-f8d93cc6>align-self: center;</div><div class="brackets" data-v-f8d93cc6>}</div></div><br data-v-f8d93cc6><br data-v-f8d93cc6><br data-v-f8d93cc6><p data-v-f8d93cc6>absolute + transform translate ( -50% , -50% )</p><p data-v-f8d93cc6>絕對定位，這個方法不需要子元素固定寬高</p><br data-v-f8d93cc6><p data-v-f8d93cc6> : 可以用transform實現, 給他子絕對父相對定位, 給子top百分之50 left百分之50, 然後transform translate負的百分之50 實現垂直居中, </p><br data-v-f8d93cc6><p class="cor36" data-v-f8d93cc6>你說的絕對定位方法有沒有副作用?</p><p data-v-f8d93cc6>(fix定位會被transform屏蔽掉)</p><p data-v-f8d93cc6> 它的位置的中點會相對於原來的位置有偏移,它以前相對於窗口定位,它現在相對於父元素定位 </p><br data-v-f8d93cc6><div class="bgcVS" data-v-f8d93cc6><div data-v-f8d93cc6><span class="then" data-v-f8d93cc6>＜</span> <span class="number" data-v-f8d93cc6>div </span><span class="function" data-v-f8d93cc6>class </span> <span class="then" data-v-f8d93cc6>= &quot;</span><span class="word" data-v-f8d93cc6>parent</span><span class="then" data-v-f8d93cc6>&quot;</span> <span class="then" data-v-f8d93cc6>&gt;</span></div><div class="pTwo" data-v-f8d93cc6><span class="then" data-v-f8d93cc6>＜</span> <span class="number" data-v-f8d93cc6>div </span><span class="function" data-v-f8d93cc6>class </span> <span class="then" data-v-f8d93cc6>=&quot;</span><span class="word" data-v-f8d93cc6>child</span> <span class="then" data-v-f8d93cc6>&quot;&gt;＜/ </span><span class="number" data-v-f8d93cc6>div </span> <span class="then" data-v-f8d93cc6>&gt;</span></div><div data-v-f8d93cc6><span class="then" data-v-f8d93cc6>＜ </span> <span class="number" data-v-f8d93cc6>div </span><span class="then" data-v-f8d93cc6>&gt;</span></div><div class="brackets" data-v-f8d93cc6>.parent {</div><div class="brackets pTwo" data-v-f8d93cc6>position: relative;</div><div class="brackets" data-v-f8d93cc6>}</div><div class="brackets" data-v-f8d93cc6>.child {</div><div class="brackets pTwo" data-v-f8d93cc6>position: absolute;</div><div class="brackets pTwo" data-v-f8d93cc6>top: 50%;</div><div class="brackets pTwo" data-v-f8d93cc6>left: 50%;</div><div class="brackets pTwo" data-v-f8d93cc6>transform: translate(-50%, -50%);</div><div class="brackets" data-v-f8d93cc6>}</div></div><br data-v-f8d93cc6><br data-v-f8d93cc6><p data-v-f8d93cc6>margin: 0 auto . . . <span class="cor36" data-v-f8d93cc6>(知道子元素寬)</span></p><p data-v-f8d93cc6>只有 <span class="cor36" data-v-f8d93cc6>非絕對定位 </span> 的元素才有效</p><p data-v-f8d93cc6>絕對定位指: absolute . fixed . sticky</p><p class="comment" data-v-f8d93cc6>img/input/button等自帶寬，可不設</p><br data-v-f8d93cc6><p data-v-f8d93cc6>: 如果知道它的寬度的話, 可用margin 0 auto來實現</p><br data-v-f8d93cc6><div class="bgcVS" data-v-f8d93cc6><div data-v-f8d93cc6><span class="then" data-v-f8d93cc6>＜</span> <span class="number" data-v-f8d93cc6>div </span><span class="function" data-v-f8d93cc6>class </span> <span class="then" data-v-f8d93cc6>= &quot;</span><span class="word" data-v-f8d93cc6>parent</span><span class="then" data-v-f8d93cc6>&quot;</span> <span class="then" data-v-f8d93cc6>&gt;</span></div><div class="pTwo" data-v-f8d93cc6><span class="then" data-v-f8d93cc6>＜</span> <span class="number" data-v-f8d93cc6>div </span><span class="function" data-v-f8d93cc6>class </span> <span class="then" data-v-f8d93cc6>=&quot;</span><span class="word" data-v-f8d93cc6>child</span> <span class="then" data-v-f8d93cc6>&quot;&gt;＜/ </span><span class="number" data-v-f8d93cc6>div </span> <span class="then" data-v-f8d93cc6>&gt;</span></div><div data-v-f8d93cc6><span class="then" data-v-f8d93cc6>＜ </span> <span class="number" data-v-f8d93cc6>div </span><span class="then" data-v-f8d93cc6>&gt;</span></div><div class="brackets" data-v-f8d93cc6>.child {</div><div class="comment pTwo" data-v-f8d93cc6>/* 必須設定 box 的寬 */</div><div class="brackets pTwo" data-v-f8d93cc6>width: 100px;</div><div class="brackets pTwo" data-v-f8d93cc6>margin: 0 auto;</div><div class="brackets" data-v-f8d93cc6>}</div></div><br data-v-f8d93cc6><br data-v-f8d93cc6><p class="cor36" data-v-f8d93cc6># 父子高度都不確定但確實有值如何實現垂直居中?</p><br data-v-f8d93cc6><p data-v-f8d93cc6> margin: auto . . . <span class="cor36" data-v-f8d93cc6>(1.需要父元素高 2.子元素寬高 3.父相對子絕對)</span></p><p data-v-f8d93cc6>缺點: 不兼容ie</p><br data-v-f8d93cc6><p data-v-f8d93cc6>: 在子CSS屬性上加上下左右值為0 然後加上margin auto,</p><br data-v-f8d93cc6><div class="bgcVS" data-v-f8d93cc6><div data-v-f8d93cc6><span class="then" data-v-f8d93cc6>＜</span> <span class="number" data-v-f8d93cc6>div </span><span class="function" data-v-f8d93cc6>class </span> <span class="then" data-v-f8d93cc6>= &quot;</span><span class="word" data-v-f8d93cc6>parent</span><span class="then" data-v-f8d93cc6>&quot;</span> <span class="then" data-v-f8d93cc6>&gt;</span></div><div class="pTwo" data-v-f8d93cc6><span class="then" data-v-f8d93cc6>＜</span> <span class="number" data-v-f8d93cc6>div </span><span class="function" data-v-f8d93cc6>class </span> <span class="then" data-v-f8d93cc6>=&quot;</span><span class="word" data-v-f8d93cc6>child</span> <span class="then" data-v-f8d93cc6>&quot;&gt;＜/ </span><span class="number" data-v-f8d93cc6>div </span> <span class="then" data-v-f8d93cc6>&gt;</span></div><div data-v-f8d93cc6><span class="then" data-v-f8d93cc6>＜ </span> <span class="number" data-v-f8d93cc6>div </span><span class="then" data-v-f8d93cc6>&gt;</span></div><div class="brackets" data-v-f8d93cc6>.parent {</div><div class="brackets pTwo" data-v-f8d93cc6>position: relative;</div><div class="brackets pTwo" data-v-f8d93cc6>height: 300px;</div><div class="brackets" data-v-f8d93cc6>}</div><div class="brackets" data-v-f8d93cc6>.child {</div><div class="brackets pTwo" data-v-f8d93cc6>width: 100px;</div><div class="brackets pTwo" data-v-f8d93cc6>height: 100px;</div><div class="brackets pTwo" data-v-f8d93cc6>position: absolute;</div><div class="brackets pTwo" data-v-f8d93cc6>top: 0;</div><div class="brackets pTwo" data-v-f8d93cc6>left: 0;</div><div class="brackets pTwo" data-v-f8d93cc6>right: 0;</div><div class="brackets pTwo" data-v-f8d93cc6>bottom: 0;</div><div class="brackets pTwo" data-v-f8d93cc6>margin: auto;</div><div class="brackets" data-v-f8d93cc6>}</div></div><br data-v-f8d93cc6><br data-v-f8d93cc6><h3 class="cor36" data-v-f8d93cc6>內聯元素水平居中</h3><p data-v-f8d93cc6> text-align: center 可以使行內級元素和行內塊級元素在父元素中水平居中。 </p><p data-v-f8d93cc6> 父元素下的所有行級元素，包含子元素以及孫子元素，都相對於自己的父元素水平居中。 </p><br data-v-f8d93cc6><div class="bgcVS" data-v-f8d93cc6><div data-v-f8d93cc6><span class="then" data-v-f8d93cc6>＜</span> <span class="number" data-v-f8d93cc6>div </span><span class="function" data-v-f8d93cc6>class </span> <span class="then" data-v-f8d93cc6>= &quot;</span><span class="word" data-v-f8d93cc6>parent</span><span class="then" data-v-f8d93cc6>&quot;</span> <span class="then" data-v-f8d93cc6>&gt;</span></div><div class="pTwo" data-v-f8d93cc6><span class="then" data-v-f8d93cc6>＜</span> <span class="number" data-v-f8d93cc6>span </span><span class="function" data-v-f8d93cc6>class </span> <span class="then" data-v-f8d93cc6>=&quot;</span><span class="word" data-v-f8d93cc6>child</span> <span class="then" data-v-f8d93cc6>&quot;&gt;＜/ </span><span class="number" data-v-f8d93cc6>div </span> <span class="then" data-v-f8d93cc6>&gt;</span></div><div data-v-f8d93cc6><span class="then" data-v-f8d93cc6>＜ </span> <span class="number" data-v-f8d93cc6>div </span><span class="then" data-v-f8d93cc6>&gt;</span></div><div class="brackets" data-v-f8d93cc6>.parent {</div><div class="brackets pTwo" data-v-f8d93cc6>width: 300px;</div><div class="brackets pTwo" data-v-f8d93cc6>height: 300px;</div><div class="brackets pTwo" data-v-f8d93cc6>text-align: center;</div><div class="brackets" data-v-f8d93cc6>}</div><div class="brackets" data-v-f8d93cc6>.child {</div><div class="brackets pTwo" data-v-f8d93cc6>width: 100px;</div><div class="brackets pTwo" data-v-f8d93cc6>height: 100px;</div><div class="brackets" data-v-f8d93cc6>}</div></div><br data-v-f8d93cc6><br data-v-f8d93cc6><h3 class="cor36" data-v-f8d93cc6>內聯元素垂直居中</h3><p data-v-f8d93cc6>子元素 line-heignt 設跟父元素一樣高度</p><br data-v-f8d93cc6><div class="bgcVS" data-v-f8d93cc6><div data-v-f8d93cc6><span class="then" data-v-f8d93cc6>＜</span> <span class="number" data-v-f8d93cc6>div </span><span class="function" data-v-f8d93cc6>class </span> <span class="then" data-v-f8d93cc6>= &quot;</span><span class="word" data-v-f8d93cc6>parent</span><span class="then" data-v-f8d93cc6>&quot;</span> <span class="then" data-v-f8d93cc6>&gt;</span></div><div class="pTwo" data-v-f8d93cc6><span class="then" data-v-f8d93cc6>＜</span> <span class="number" data-v-f8d93cc6>span </span><span class="function" data-v-f8d93cc6>class </span> <span class="then" data-v-f8d93cc6>=&quot;</span><span class="word" data-v-f8d93cc6>child</span> <span class="then" data-v-f8d93cc6>&quot;&gt;＜/ </span><span class="number" data-v-f8d93cc6>div </span> <span class="then" data-v-f8d93cc6>&gt;</span></div><div data-v-f8d93cc6><span class="then" data-v-f8d93cc6>＜ </span> <span class="number" data-v-f8d93cc6>div </span><span class="then" data-v-f8d93cc6>&gt;</span></div><div class="brackets" data-v-f8d93cc6>.parent {</div><div class="brackets pTwo" data-v-f8d93cc6>width: 300px;</div><div class="brackets pTwo" data-v-f8d93cc6>height: 300px;</div><div class="brackets" data-v-f8d93cc6>}</div><div class="brackets" data-v-f8d93cc6>.child {</div><div class="brackets pTwo" data-v-f8d93cc6>width: 100px;</div><div class="brackets pTwo" data-v-f8d93cc6>line-heignt:父元素的高度;</div><div class="brackets" data-v-f8d93cc6>}</div></div><br data-v-f8d93cc6><br data-v-f8d93cc6><div id="cssOne007" class="articleCardTitle cor36" data-v-f8d93cc6> [ CSS ] ≫ CSS有哪些常見的布局方法? </div><span data-v-f8d93cc6><a href="https://ithelp.ithome.com.tw/articles/10208741" data-v-f8d93cc6>資料來源: Flex 空間分配 @iT邦幫忙 Lai</a></span><div data-v-f8d93cc6></div><br data-v-f8d93cc6><p data-v-f8d93cc6>FLEX GRID</p><br data-v-f8d93cc6><br data-v-f8d93cc6><p class="cor36" data-v-f8d93cc6>實現一個左中右三欄布局,不能用FLEX,GRID怎麼做?</p><p data-v-f8d93cc6>定位 float table</p><br data-v-f8d93cc6><br data-v-f8d93cc6><p class="cor36" data-v-f8d93cc6>Flex 布局用在什麼情況下比較合適?</p><p data-v-f8d93cc6>用於線性布局, 水平或垂直</p><br data-v-f8d93cc6><br data-v-f8d93cc6><p class="cor36" data-v-f8d93cc6>Grid 布局用在什麼情況下比較合適?</p><p data-v-f8d93cc6>用於線性布局,水平或垂直</p><br data-v-f8d93cc6><br data-v-f8d93cc6><p class="cor36" data-v-f8d93cc6>做一個左中右的布局用FLEX怎麼做?</p><p data-v-f8d93cc6>可以直接給父元素加display:flex 子元素加space:between</p><br data-v-f8d93cc6><br data-v-f8d93cc6><p class="cor36" data-v-f8d93cc6>不夠寬自然會收縮,有哪些元素會收縮?</p><p data-v-f8d93cc6>它會等比例收縮</p><br data-v-f8d93cc6><br data-v-f8d93cc6><p class="cor36" data-v-f8d93cc6>如果我希望它不等比例收縮呢?比如中間不縮左右縮呢?</p><p data-v-f8d93cc6>中間的設 flex-shrink 0</p><p data-v-f8d93cc6>兩邊默認的shrink是 1</p><br data-v-f8d93cc6><br data-v-f8d93cc6><p class="cor36" data-v-f8d93cc6> 如果希望左邊固定寬100px右邊固定寬200px中間自由收縮怎麼做? </p><p data-v-f8d93cc6>左邊寬100右邊寬200</p><br data-v-f8d93cc6><br data-v-f8d93cc6><p class="cor36" data-v-f8d93cc6>寫了寬度之後shrink怎麼寫?</p><p data-v-f8d93cc6>左右0 中間寫1</p><br data-v-f8d93cc6><br data-v-f8d93cc6><p class="cor36" data-v-f8d93cc6>那左中右grow怎麼寫?</p><p data-v-f8d93cc6>左右grow0 中間1</p><br data-v-f8d93cc6><br data-v-f8d93cc6><p class="cor36" data-v-f8d93cc6>grid一般用來做甚麼樣的布局?怎麼用?</p><p data-v-f8d93cc6>網格 屏幕做四個相等的 用行列布局骨架</p><br data-v-f8d93cc6><br data-v-f8d93cc6><div id="cssOne008" class="articleCardTitle cor36" data-v-f8d93cc6> [ CSS ] ≫ CSS動畫有哪些屬性? </div><p data-v-f8d93cc6>transition</p><p data-v-f8d93cc6>@keyframe</p><p data-v-f8d93cc6>animation</p><br data-v-f8d93cc6><br data-v-f8d93cc6><p class="cor36" data-v-f8d93cc6> transition怎麼實現動畫的,例如你怎麼把一個東西從左移到右? </p><p data-v-f8d93cc6>先自訂一個初始的位置, 比如你觸發點擊事件</p><p data-v-f8d93cc6> 點擊讓它移動100px, 用transition優化它中間過度的動畫, 寫 all 0.25秒 </p><br data-v-f8d93cc6><br data-v-f8d93cc6><p class="cor36" data-v-f8d93cc6> 你用transition加了從開始到結束的動畫,這動畫可以是線性也可以非線性也可以緩動的,你能舉幾個例子嗎?線性是用什麼值? </p><p data-v-f8d93cc6>transition-timing-function</p><p data-v-f8d93cc6>預設ease緩入中間快緩出</p><p data-v-f8d93cc6>linear均速</p><p data-v-f8d93cc6>ease-in 緩入</p><p data-v-f8d93cc6>ease-out 緩出</p><br data-v-f8d93cc6><br data-v-f8d93cc6><p class="cor36" data-v-f8d93cc6> 你做旋轉時,它默認從那裡開始旋轉?從哪個基點開始旋轉? </p><p data-v-f8d93cc6>中心點, 可以設定transform-origin 改變 例如 top left 到左上角</p><br data-v-f8d93cc6><br data-v-f8d93cc6><p class="cor36" data-v-f8d93cc6> animation我如果希望它撥放完了再繼續撥無限撥怎麼做? </p><p data-v-f8d93cc6>animation-iteration-count 設定 infinite</p><br data-v-f8d93cc6><br data-v-f8d93cc6><div id="cssOne015" class="articleCardTitle cor36" data-v-f8d93cc6> [ CSS ] ≫ 偽類 偽元素? </div><p class="cor36" data-v-f8d93cc6>:偽類</p><br data-v-f8d93cc6><br data-v-f8d93cc6><p data-v-f8d93cc6>當我們 希望樣式在 某些特定狀態下 才被呈現到 指定的 元素時</p><br data-v-f8d93cc6><br data-v-f8d93cc6><p data-v-f8d93cc6>就是 當某元素狀態改變時 , 我們期待給這元素添加一些特殊效果</p><br data-v-f8d93cc6><br data-v-f8d93cc6><p data-v-f8d93cc6>:hover 懸浮在某元素上時 , 期望該元素要顯示的樣式</p><br data-v-f8d93cc6><br data-v-f8d93cc6><p class="cor36" data-v-f8d93cc6>::偽元素</p><br data-v-f8d93cc6><br data-v-f8d93cc6><p data-v-f8d93cc6>創建一些不在文檔樹中的元素 , 並為其添加樣式</p><br data-v-f8d93cc6><br data-v-f8d93cc6><p data-v-f8d93cc6>要注意 偽元素樣式裡 必須要給 content 屬性</p><br data-v-f8d93cc6><br data-v-f8d93cc6><p data-v-f8d93cc6>::before 在一個元素前增加一些文本 , 並對文本添加樣式</p><br data-v-f8d93cc6><br data-v-f8d93cc6><p class="cor36" data-v-f8d93cc6>小結:</p><p data-v-f8d93cc6>偽類 操作對象 是 文檔樹中 已有的元素</p><br data-v-f8d93cc6><br data-v-f8d93cc6><p data-v-f8d93cc6>偽元素 創建文檔樹 以外的元素 並添加樣式</p><br data-v-f8d93cc6><br data-v-f8d93cc6><div id="cssOne011" class="articleCardTitle cor36" data-v-f8d93cc6> [ CSS ] ≫ 隱藏元素的方法? </div><h3 data-v-f8d93cc6>display: none</h3><p data-v-f8d93cc6>元素在 頁面上消失 , 不佔空間 . . . 重排 重繪</p><br data-v-f8d93cc6><br data-v-f8d93cc6><h3 data-v-f8d93cc6>opacity: 0</h3><p data-v-f8d93cc6>設置元素透明度 0 , 元素不可見 , 佔空間</p><br data-v-f8d93cc6><br data-v-f8d93cc6><h3 data-v-f8d93cc6>visbility: hidden</h3><p data-v-f8d93cc6>讓 元素消失 , 佔位置 . . . 重繪</p><br data-v-f8d93cc6><br data-v-f8d93cc6><h3 data-v-f8d93cc6>position: absolute</h3><br data-v-f8d93cc6><br data-v-f8d93cc6><div id="cssOne010" class="articleCardTitle cor36" data-v-f8d93cc6> [ css ] ≫ 什麼是重排(回流)和重繪?如何避免 </div><h2 data-v-f8d93cc6>重繪不一定重排，重排一定重繪</h2><br data-v-f8d93cc6><br data-v-f8d93cc6><h3 class="cor36" data-v-f8d93cc6># 重排(回流)（reflow）是什麼:</h3><p data-v-f8d93cc6>布局引擎會根據所有的樣式計算出盒模型在頁面上的位置 &amp; 大小</p><br data-v-f8d93cc6><p data-v-f8d93cc6>當瀏覽器偵測到頁面的佈局發生變化時，就需要進行回退並重新渲染。</p><br data-v-f8d93cc6><p class="cor36" data-v-f8d93cc6># 觸發重排(回流)條件：</p><p data-v-f8d93cc6>1.頁面第一次渲染（初始化）</p><p data-v-f8d93cc6>2.DOM樹節點的增刪或移動</p><p data-v-f8d93cc6>3.DOM元素的幾何屬性變化</p><p class="pFou" data-v-f8d93cc6>寬度（width）</p><p class="pFou" data-v-f8d93cc6>高度（height）</p><p class="pFou" data-v-f8d93cc6>內邊距（padding）</p><p class="pFou" data-v-f8d93cc6>邊框（border）等</p><p class="pFou" data-v-f8d93cc6>外邊距（margin）</p><p class="pFou" data-v-f8d93cc6>左偏移（left）</p><p class="pFou" data-v-f8d93cc6>上偏移（top）</p><br data-v-f8d93cc6><p data-v-f8d93cc6>4.瀏覽器窗口大小改變（resize）</p><p data-v-f8d93cc6>獲取元素的某些屬性，如offset系列、scroll系列和client系列屬性。</p><br data-v-f8d93cc6><p class="cor36" data-v-f8d93cc6># 重排(回流)過程</p><p data-v-f8d93cc6> 劉覽器會從根節點＜html&gt;元素 開始進行遞歸，逐個計算所有節點的幾何尺寸和位置，以確定是渲染樹的一部分發生變化還是整個渲染樹需要重新渲染。 </p><br data-v-f8d93cc6><br data-v-f8d93cc6><h3 class="cor36" data-v-f8d93cc6># 重繪（repaint）是什麼:</h3><p data-v-f8d93cc6> 計算好盒模型的 位置 大小 其他屬性後 , 瀏覽器根據每個盒模型的 特性 進行 繪製瀏覽器的渲染機制 </p><br data-v-f8d93cc6><p data-v-f8d93cc6> 當我們改變某個元素的背景色、文字顏色、邊框顏色等屬性時，屏幕的一部分需要重繪，但是元素的幾何尺寸和位置沒有發生改變。重繪過程不涉及布局的計算，只是重新繪製已有的元素。 </p><br data-v-f8d93cc6><p class="cor36" data-v-f8d93cc6># 觸發重繪條件:</p><p data-v-f8d93cc6> 1.重排(回流)必會引起重繪，因為回流的過程中可能會改變元素的樣式屬性，需要重新繪製已有的元素。 </p><p data-v-f8d93cc6>2.背景色、文字顏色、字體等的改變會觸發重繪。</p><p class="pTwo" data-v-f8d93cc6> 注意 字體大小發生變化時，將觸發回流而非僅重繪。(會影響元素的佈局) </p><br data-v-f8d93cc6><p class="cor36" data-v-f8d93cc6># 重繪過程</p><p data-v-f8d93cc6> 沒有導致 DOM 元素的幾何屬性（寬度、高度、位置）發生變化，因此元素的位置信息不需要更新，從而省去了佈局（layout）的過程。 </p><br data-v-f8d93cc6><br data-v-f8d93cc6><h2 class="cor36" data-v-f8d93cc6># 如何避免重排(回流).重繪?</h2><p data-v-f8d93cc6>1.集中改變樣式: ex 用 class 集中改變</p><br data-v-f8d93cc6><p data-v-f8d93cc6>2.用 transform 做變形和位移，可以減少重排(回流)的次數。</p><br data-v-f8d93cc6><p data-v-f8d93cc6> 3.將需要多次修改的 DOM 元素設置為 display:none，操作完成後再顯示。 </p><br data-v-f8d93cc6><p data-v-f8d93cc6>4.避免多次讀取某些屬性</p><br data-v-f8d93cc6><p data-v-f8d93cc6>5.絕對定位將複雜的節點脫離文檔流中，形成新的 Render Layer。</p><br data-v-f8d93cc6><p data-v-f8d93cc6> 6.使用 DocumentFragment 將需要多次修改的 DOM 元素緩存起來，最後一次性添加到真實的 DOM 中進行渲染。 </p><br data-v-f8d93cc6><br data-v-f8d93cc6><div id="cssOne013" class="articleCardTitle cor36" data-v-f8d93cc6> [ CSS ] ≫ CSS 的那些屬性 可以繼承? </div><p data-v-f8d93cc6>css 3 特性 : 繼承 、 層疊 、 優先級</p><br data-v-f8d93cc6><br data-v-f8d93cc6><p class="cor36" data-v-f8d93cc6>子元素 可繼承 父元素 樣式</p><div id="" class="articleCardTitle cor36" data-v-f8d93cc6>[ CSS ] ≫</div><p data-v-f8d93cc6>1. 字體 fonst . . . 顏色 大小</p><br data-v-f8d93cc6><br data-v-f8d93cc6><p data-v-f8d93cc6>2. 文本 line-height</p><br data-v-f8d93cc6><br data-v-f8d93cc6><p data-v-f8d93cc6>3. 元素可見性 visbility: hidden</p><br data-v-f8d93cc6><br data-v-f8d93cc6><p data-v-f8d93cc6>4. 表格布局的屬性 border-spacing</p><br data-v-f8d93cc6><br data-v-f8d93cc6><p data-v-f8d93cc6>5. 列表屬性 list-style</p><br data-v-f8d93cc6><br data-v-f8d93cc6><div id="cssOne013" class="articleCardTitle cor36" data-v-f8d93cc6> [ CSS ] ≫ 預處理器? </div><p class="cor36" data-v-f8d93cc6>SCSS相比於CSS有那些好處?</p><p data-v-f8d93cc6>它可以在寫語法時層層包裹, 可以用變量</p><br data-v-f8d93cc6><br data-v-f8d93cc6><p class="cor36" data-v-f8d93cc6>SASS 、 LESS</p><p data-v-f8d93cc6>變量 、 函數 、 混入</p><br data-v-f8d93cc6><br data-v-f8d93cc6><div id="cssOne009" class="articleCardTitle cor36" data-v-f8d93cc6> [ CSS ] ≫ 畫三角形的方法? </div><div data-v-f8d93cc6><span data-v-f8d93cc6><a href="https://codepen.io/wayne23123/pen/QWJdjVJ?editors=1100" data-v-f8d93cc6>@codePen demo</a></span></div><p data-v-f8d93cc6>1.</p><p data-v-f8d93cc6>用border, 給四個邊距, 然後給三個透明</p><br data-v-f8d93cc6><p data-v-f8d93cc6>2.</p><p data-v-f8d93cc6>用2個div做, 第一個div做正方形, 然後旋轉90度變成菱形,</p><p data-v-f8d93cc6> 另一個div做為父容器把他的上面百分之50顯示, 下面百分之50 overflow:hidden起來 </p><div id="cssOne016" class="articleCardTitle cor36" data-v-f8d93cc6> [ CSS ] ≫ 白屏時間 首屏時間 一樣嗎? 區別? </div><p class="cor36" data-v-f8d93cc6>白屏時間:</p><p data-v-f8d93cc6>指用戶輸入內容 enter 到瀏覽器出現第一個字符</p><br data-v-f8d93cc6><p data-v-f8d93cc6>開始顯示內容的時間</p><br data-v-f8d93cc6><p data-v-f8d93cc6>白屏 = 頁面開始展示時間 - 開始請求時間</p><br data-v-f8d93cc6><p class="cor36" data-v-f8d93cc6>首屏時間:</p><p data-v-f8d93cc6>瀏覽器響應用戶輸入 地址 到 首屏內容 全部渲染 完成的時間</p><br data-v-f8d93cc6><br data-v-f8d93cc6><div id="cssOne017" class="articleCardTitle cor36" data-v-f8d93cc6> [ CSS ] ≫ 圖片懶加載 </div><p data-v-f8d93cc6>在頁面中 有很多圖片時 , 加載圖片需要 一定時間</p><br data-v-f8d93cc6><p data-v-f8d93cc6>可以 優先加載 可視區域的 內容 , 其他 等進入可視區域 再加載</p><br data-v-f8d93cc6><p data-v-f8d93cc6>1.加載</p><p data-v-f8d93cc6>圖片進入可視區域前 先不給 src 賦值</p><br data-v-f8d93cc6><p data-v-f8d93cc6>進入可視區域 再給 src 賦上地址值</p><br data-v-f8d93cc6><p data-v-f8d93cc6>2.判斷是否進入</p><p data-v-f8d93cc6>通過 IntersectionObserver API 實現</p><br data-v-f8d93cc6><p data-v-f8d93cc6>這個 API 可以觀察元素是否可見</p><br data-v-f8d93cc6><p data-v-f8d93cc6>可見指 目標元素 與 視口 是否產生 交叉區</p><div class="bgcVS" data-v-f8d93cc6><div data-v-f8d93cc6><span class="function" data-v-f8d93cc6>const </span><span class="word" data-v-f8d93cc6>observer</span><span class="then" data-v-f8d93cc6>= new </span><span class="word" data-v-f8d93cc6>IntersectionObserver</span><span class="brackets" data-v-f8d93cc6>(</span> <span class="cor36" data-v-f8d93cc6>回調</span><span class="brackets" data-v-f8d93cc6>)</span></div><p data-v-f8d93cc6>裡面回調觸發 2 次 , 目標元素看見 觸發 , 目標看不見 觸發</p><br data-v-f8d93cc6><br data-v-f8d93cc6><div data-v-f8d93cc6><span class="then" data-v-f8d93cc6>＜</span> <span class="number" data-v-f8d93cc6>img </span><span class="word" data-v-f8d93cc6>data-src</span> <span class="then" data-v-f8d93cc6>=</span><span class="src" data-v-f8d93cc6>&quot;test.jpg&quot;</span> <span class="then" data-v-f8d93cc6>&gt;</span></div><br data-v-f8d93cc6><div data-v-f8d93cc6><span class="function" data-v-f8d93cc6>const </span><span class="word" data-v-f8d93cc6>images</span> <span class="then" data-v-f8d93cc6>=</span><span class="word" data-v-f8d93cc6>document</span><span class="variable" data-v-f8d93cc6>.querySelectorAll</span><span class="brackets" data-v-f8d93cc6>(</span> <span class="src" data-v-f8d93cc6>&quot;img&quot;</span><span class="brackets" data-v-f8d93cc6>)</span></div><br data-v-f8d93cc6><div data-v-f8d93cc6><span class="function" data-v-f8d93cc6>const </span><span class="word" data-v-f8d93cc6>callback</span> <span class="then" data-v-f8d93cc6>=</span><span class="word" data-v-f8d93cc6>entries</span><span class="function" data-v-f8d93cc6>=&gt; </span> <span class="brackets" data-v-f8d93cc6>{</span></div><div class="padTwo VSL" data-v-f8d93cc6><span class="word" data-v-f8d93cc6>entries</span><span class="variable" data-v-f8d93cc6>.forEach</span><span class="brackets" data-v-f8d93cc6>(</span> <span class="word" data-v-f8d93cc6>entry</span><span class="function" data-v-f8d93cc6>=&gt; </span> <span class="brackets" data-v-f8d93cc6>{</span><div data-v-f8d93cc6></div><div class="padTwo VSL" data-v-f8d93cc6><span class="then" data-v-f8d93cc6>if</span> <span class="brackets" data-v-f8d93cc6>(</span><span class="word" data-v-f8d93cc6>entry</span><span class="variable" data-v-f8d93cc6>.isIntersecting</span><span class="brackets" data-v-f8d93cc6>){</span><div data-v-f8d93cc6></div><div class="padTwo VSL" data-v-f8d93cc6><span class="function" data-v-f8d93cc6>const </span><span class="word" data-v-f8d93cc6>image</span> <span class="then" data-v-f8d93cc6>=</span><span class="word" data-v-f8d93cc6>entry</span><span class="variable" data-v-f8d93cc6>.target</span><div data-v-f8d93cc6><span class="function" data-v-f8d93cc6>const </span><span class="word" data-v-f8d93cc6>data_src</span><span class="then" data-v-f8d93cc6>=</span> <span class="word" data-v-f8d93cc6>image</span><span class="variable" data-v-f8d93cc6>.getAttribute</span><span class="brackets" data-v-f8d93cc6>(</span><span class="src" data-v-f8d93cc6>&quot;data-src&quot;</span><span class="brackets" data-v-f8d93cc6>)</span></div><div data-v-f8d93cc6><span class="word" data-v-f8d93cc6>image</span><span class="variable" data-v-f8d93cc6>.setAttribute</span><span class="brackets" data-v-f8d93cc6>(</span><span class="src" data-v-f8d93cc6>&quot;src&quot;</span> <span class="then" data-v-f8d93cc6>,</span><span class="word" data-v-f8d93cc6>data_src</span><span class="brackets" data-v-f8d93cc6>)</span></div><div data-v-f8d93cc6><span class="word" data-v-f8d93cc6>observer</span><span class="variable" data-v-f8d93cc6>.unobserve</span><span class="brackets" data-v-f8d93cc6>(</span><span class="word" data-v-f8d93cc6>image</span><span class="brackets" data-v-f8d93cc6>)</span></div><div data-v-f8d93cc6><span class="word" data-v-f8d93cc6>console</span><span class="variable" data-v-f8d93cc6>.log</span><span class="brackets" data-v-f8d93cc6>(</span><span class="src" data-v-f8d93cc6>&quot;觸發&quot;</span><span class="brackets" data-v-f8d93cc6>)</span></div><div data-v-f8d93cc6></div></div><div data-v-f8d93cc6><span class="brackets" data-v-f8d93cc6>}</span></div></div><div data-v-f8d93cc6><span class="brackets" data-v-f8d93cc6>})</span></div></div><div data-v-f8d93cc6><span class="brackets" data-v-f8d93cc6>}</span></div><br data-v-f8d93cc6><div data-v-f8d93cc6><span class="function" data-v-f8d93cc6>const </span><span class="word" data-v-f8d93cc6>observer</span><span class="then" data-v-f8d93cc6>= new </span><span class="word" data-v-f8d93cc6>IntersectionObserver</span><span class="brackets" data-v-f8d93cc6>(</span><span class="word" data-v-f8d93cc6>callback</span> <span class="brackets" data-v-f8d93cc6>)</span></div><br data-v-f8d93cc6><div data-v-f8d93cc6><span class="word" data-v-f8d93cc6>images</span><span class="variable" data-v-f8d93cc6>.forEach</span><span class="brackets" data-v-f8d93cc6>(</span> <span class="word" data-v-f8d93cc6>image</span><span class="function" data-v-f8d93cc6>=&gt; </span> <span class="brackets" data-v-f8d93cc6>{</span></div><div class="padTwo VSL" data-v-f8d93cc6><span class="word" data-v-f8d93cc6>observer</span><span class="variable" data-v-f8d93cc6>.observe</span><span class="brackets" data-v-f8d93cc6>(</span> <span class="word" data-v-f8d93cc6>image</span><span class="brackets" data-v-f8d93cc6>)</span><div data-v-f8d93cc6></div></div><div data-v-f8d93cc6><span class="brackets" data-v-f8d93cc6>})</span></div></div><br data-v-f8d93cc6><h2 class="articleCardTitle cor36" data-v-f8d93cc6> [ CSS ] ≫ 如何讓google瀏覽器支持小字體? </h2><p data-v-f8d93cc6>google 最小字體支持12px,想要更小用 transform: scale(0.5)</p><p data-v-f8d93cc6></p><br data-v-f8d93cc6><p data-v-f8d93cc6></p><br data-v-f8d93cc6><p data-v-f8d93cc6></p><br data-v-f8d93cc6><p class="cor36" data-v-f8d93cc6></p><p data-v-f8d93cc6></p><br data-v-f8d93cc6><br data-v-f8d93cc6><p class="cor36" data-v-f8d93cc6></p><p data-v-f8d93cc6></p><br data-v-f8d93cc6><br data-v-f8d93cc6><div id="" class="articleCardTitle cor36" data-v-f8d93cc6>[ CSS ] ≫</div><p data-v-f8d93cc6></p><br data-v-f8d93cc6><br data-v-f8d93cc6>',382),ni=Yd(()=>v("div",{class:"toTopButton"},[v("div",{class:"disCen"},"___"),v("div",{class:"disCen"},"▲")],-1)),ei=[ni],vi=Yd(()=>v("div",{class:"toBotButton"},[v("div",{class:"disCen"},"▼"),v("div",{class:"disCen"},"￣")],-1)),ci=[vi],pi={__name:"CssPageOne",setup(a){const s=ua(!1);window.addEventListener("scroll",function(){s.value=window.scrollY>0});function d(){window.scrollTo({top:0,left:0,behavior:"smooth"})}function n(){window.scrollTo({top:999999,left:0,behavior:"smooth"})}function t(c){window.scrollTo({top:document.getElementById(`${c}`).offsetTop,behavior:"smooth"})}return(c,e)=>{const l=za("spen");return da(),ca(Q,null,[v("section",null,[v("div",K8,[v("div",X8,[v("div",Y8,[G8,v("div",{onClick:e[0]||(e[0]=p=>t("cssOne001")),class:"leftNavText"}," px,rem,em,vw "),v("div",{onClick:e[1]||(e[1]=p=>t("cssOne014")),class:"leftNavText"}," link&@import "),v("div",{onClick:e[2]||(e[2]=p=>t("cssOne002")),class:"leftNavText"},"position"),v("div",{onClick:e[3]||(e[3]=p=>t("cssOne012")),class:"leftNavText"},"display"),v("div",{onClick:e[4]||(e[4]=p=>t("cssOne003")),class:"leftNavText"},"盒模型"),v("div",{onClick:e[5]||(e[5]=p=>t("cssOne004")),class:"leftNavText"},"BFC"),v("div",{onClick:e[6]||(e[6]=p=>t("cssOne005")),class:"leftNavText"}," 選擇器優先級 "),v("div",{onClick:e[7]||(e[7]=p=>t("cssOne006")),class:"leftNavText"}," 水平垂直置中 "),v("div",{onClick:e[8]||(e[8]=p=>t("cssOne007")),class:"leftNavText"},"布局"),v("div",{onClick:e[9]||(e[9]=p=>t("cssOne008")),class:"leftNavText"},"動畫"),v("div",{onClick:e[10]||(e[10]=p=>t("cssOne015")),class:"leftNavText"}," 偽類&偽元素 "),v("div",{onClick:e[11]||(e[11]=p=>t("cssOne011")),class:"leftNavText"}," 隱藏元素的方法 "),v("div",{onClick:e[12]||(e[12]=p=>t("cssOne010")),class:"leftNavText"},"重繪回流"),v("div",{onClick:e[13]||(e[13]=p=>t("cssOne013")),class:"leftNavText"}," 那些屬性可繼承 "),v("div",{onClick:e[14]||(e[14]=p=>t("cssOne009")),class:"leftNavText"},"三角形"),v("div",{onClick:e[15]||(e[15]=p=>t("cssOne016")),class:"leftNavText"}," 白屏首屏時間 "),v("div",{onClick:e[16]||(e[16]=p=>t("cssOne017")),class:"leftNavText"},"圖片懶加載"),v("div",{onClick:e[17]||(e[17]=p=>t("cssOne0")),class:"leftNavText"})])])]),v("div",Q8,[v("div",Z8,[v("div",ai,[si,v("p",null,[T(l,{class:"cor36"},{default:C(()=>[fa("因為: ")]),_:1}),di]),ti])])])]),v("div",null,[X(T(W,{name:"fade",tag:"div"},{default:C(()=>[v("div",{onClick:d,class:"toTop"},ei)]),_:1},512),[[Y,s.value]]),X(T(W,{name:"fade",tag:"div"},{default:C(()=>[v("div",{onClick:n,class:"toBot"},ci)]),_:1},512),[[Y,s.value]])])],64)}}},li=ra(pi,[["__scopeId","data-v-f8d93cc6"]]);const mv=a=>(ma("data-v-fdc401be"),a=a(),ha(),a),ii=U('<section data-v-fdc401be><div class="leftNav" data-v-fdc401be><div class="leftNavContainer" data-v-fdc401be><div class="leftNavLayout" data-v-fdc401be><br data-v-fdc401be><div class="leftNavText" data-v-fdc401be></div><div class="leftNavText" data-v-fdc401be></div><div class="leftNavText" data-v-fdc401be></div><div class="leftNavText" data-v-fdc401be></div></div></div></div><div class="Main" data-v-fdc401be><div class="mainContainer" data-v-fdc401be><div class="mainLayout" data-v-fdc401be><div id="" class="articleCardTitle cor36" data-v-fdc401be>[ CSS ] ≫ 樣式的順序</div><p data-v-fdc401be>有如下代碼，請問HTML代碼中&quot;文本&quot;最終渲染出的顏色分別是？</p><br data-v-fdc401be><div class="bgcVS" data-v-fdc401be><div data-v-fdc401be><span class="then" data-v-fdc401be>＜</span> <span class="number" data-v-fdc401be>div </span><span class="function" data-v-fdc401be>class </span> <span class="then" data-v-fdc401be>=&quot;</span><span class="word" data-v-fdc401be>red</span> <span class="word" data-v-fdc401be>blue</span><span class="word" data-v-fdc401be>&quot;&gt;</span> <span class="word" data-v-fdc401be>文本</span><span class="then" data-v-fdc401be>＜/</span> <span class="number" data-v-fdc401be>div </span><span class="then" data-v-fdc401be>&gt;</span></div><div data-v-fdc401be><span class="then" data-v-fdc401be>＜</span> <span class="number" data-v-fdc401be>div </span><span class="function" data-v-fdc401be>class </span> <span class="then" data-v-fdc401be>=&quot;</span><span class="word" data-v-fdc401be>blue</span> <span class="word" data-v-fdc401be>red</span><span class="word" data-v-fdc401be>&quot;&gt;</span> <span class="word" data-v-fdc401be>文本</span><span class="then" data-v-fdc401be>＜/</span> <span class="number" data-v-fdc401be>div </span><span class="then" data-v-fdc401be>&gt;</span></div><div class="brackets" data-v-fdc401be>.red { color: red; }</div><div class="brackets" data-v-fdc401be>.blue { color: blue; }</div></div><br data-v-fdc401be><br data-v-fdc401be><p data-v-fdc401be>兩個都是藍色。</p><br data-v-fdc401be><p data-v-fdc401be> 為什麼？CSS的層疊規則裡有一條叫做「後來居上原則」，即兩個相同權值的樣式，如存在相同的聲明屬性，則後者獲勝。 本題的CSS樣式裡，.blue 和 .red 權值相同，且都聲明了 color 屬性，但 .blue 在樣式表中位於 .red 後面的位置，所以當HTML中的同一標籤同時引用這兩個類名時，以 .blue 的 color 聲明為準，和HTML中的 className 的先後順序無關。 </p><br data-v-fdc401be><br data-v-fdc401be><p class="cor36" data-v-fdc401be></p><p data-v-fdc401be></p><br data-v-fdc401be><br data-v-fdc401be></div></div></div></section>',1),ri=mv(()=>v("div",{class:"toTopButton"},[v("div",{class:"disCen"},"___"),v("div",{class:"disCen"},"▲")],-1)),oi=[ri],fi=mv(()=>v("div",{class:"toBotButton"},[v("div",{class:"disCen"},"▼"),v("div",{class:"disCen"},"￣")],-1)),bi=[fi],ui={__name:"CssPageTwo",setup(a){const s=ua(!1);window.addEventListener("scroll",function(){s.value=window.scrollY>0});function d(){window.scrollTo({top:0,left:0,behavior:"smooth"})}function n(){window.scrollTo({top:999999,left:0,behavior:"smooth"})}return ua(!0),(t,c)=>(da(),ca(Q,null,[ii,v("div",null,[X(T(W,{name:"fade",tag:"div"},{default:C(()=>[v("div",{onClick:d,class:"toTop"},oi)]),_:1},512),[[Y,s.value]]),X(T(W,{name:"fade",tag:"div"},{default:C(()=>[v("div",{onClick:n,class:"toBot"},bi)]),_:1},512),[[Y,s.value]])])],64))}},wi=ra(ui,[["__scopeId","data-v-fdc401be"]]);const mi={};function hi(a,s){const d=za("RouterLink"),n=za("RouterView");return da(),ca(Q,null,[v("div",null,[v("ul",null,[v("li",null,[T(d,{to:"/js/jsnote"},{default:C(()=>[fa("總結")]),_:1})]),v("li",null,[T(d,{to:"/js/jspractice"},{default:C(()=>[fa("練習題")]),_:1})]),v("li",null,[T(d,{to:"/js"},{default:C(()=>[fa("上課筆記")]),_:1})])])]),T(n)],64)}const ki=ra(mi,[["render",hi],["__scopeId","data-v-ded878a9"]]);const ls=a=>(ma("data-v-85be0237"),a=a(),ha(),a),gi={class:"leftNav"},Ti={class:"leftNavContainer"},_i={class:"leftNavLayout"},zi=ls(()=>v("br",null,null,-1)),Si={class:"Main"},qi={class:"mainContainer"},yi={class:"mainLayout"},Ci=U('<div class="articleCardTitle cor36" data-v-85be0237>[ JS ] ≫ 延遲加載JS方式?</div><p data-v-85be0237>正常: 解析HTML &gt; 遇到JS &gt; 下載 &gt; 執行 &gt; 繼續解析HTML</p><br data-v-85be0237><p class="cor36" data-v-85be0237>defer 属性</p><p data-v-85be0237>解析HTML &gt; 遇到JS &gt; 下載 &gt; 等到 HTML 解析完 &gt; 再執行JS defer</p><p data-v-85be0237>順次執行 &gt; a.js &gt; b.js</p><br data-v-85be0237><p class="cor36" data-v-85be0237>async 属性</p><p data-v-85be0237> 解析HTML &gt; 遇到async &gt; 下載並同時解析 HTML &gt; async加載完 HTML暫停 直接執行JS &gt; 再繼續解析 HTML </p><p data-v-85be0237>和HTML解析同步</p><p data-v-85be0237>不是順次執行 誰先加載完 誰執行</p><br data-v-85be0237><br data-v-85be0237><div id="" class="articleCardTitle cor36" data-v-85be0237>[ JS ] ≫ ES6 新特性?</div><p data-v-85be0237>let . const . map . set . 箭頭函數 . 解構復值 . promise</p><br data-v-85be0237><br data-v-85be0237><div id="onejs001" class="articleCardTitle cor36" data-v-85be0237> [ JS ] ≫ JS數據類型? </div><p data-v-85be0237>幾本類型:</p><p class="pFou" data-v-85be0237>string number 布林 null undefined symbol bigInt</p><br data-v-85be0237><p data-v-85be0237>引用類型:</p><p class="pFou" data-v-85be0237>object</p><br data-v-85be0237><br data-v-85be0237><p class="cor36" data-v-85be0237># 陣列,函數,日期屬於數據類型嗎?</p><p data-v-85be0237>不屬於, 他們屬於構造函數</p><br data-v-85be0237><br data-v-85be0237><p data-v-85be0237>函數屬於哪個? _ object</p><p data-v-85be0237>陣列屬於哪個? _ object</p><p data-v-85be0237>正則屬於哪個? _ object</p><br data-v-85be0237><br data-v-85be0237><p class="cor36" data-v-85be0237># 為什麼不用大寫STRING?</p><p data-v-85be0237> 因為小寫string上面有大寫STRING的方法, 大寫STRING是小寫string的封裝類型 在小寫屬性.方法會自動封裝成大寫STRING, 然後用完之後自動銷毀 </p><br data-v-85be0237><br data-v-85be0237><p class="cor36" data-v-85be0237># 值和地址區別?</p><p data-v-85be0237>string nember 布林都是值, 如果存一個object對象到一個變量是地址</p><br data-v-85be0237><br data-v-85be0237><p class="cor36" data-v-85be0237># 哪我存一個函數到一個變量?</p><p data-v-85be0237>存到地址</p><br data-v-85be0237><br data-v-85be0237><p class="cor36" data-v-85be0237> # 存一個變量怎麼知道他存在值還是地址,根據他麼什麼的能區分? </p><p data-v-85be0237>用typeof看一下, typeof object &amp; function 是地址</p><br data-v-85be0237><br data-v-85be0237><div id="onejs002" class="articleCardTitle cor36" data-v-85be0237> [ JS ] ≫ null undefined區別? </div><p data-v-85be0237>1.undefined是聲明之後的默認值, 但null不是</p><p data-v-85be0237> 2.undefined一般給基本類型做未賦值, null一般給物件(物件,陣列,函數為空)做未賦值 </p><p data-v-85be0237>3.undefined不是關鍵字, null是關鍵字, 所以不能聲明一個變量叫null</p><br data-v-85be0237><br data-v-85be0237><p class="cor36" data-v-85be0237># 如果我聲明一個變量它的值?</p><p data-v-85be0237>undefined</p><br data-v-85be0237><br data-v-85be0237><p class="cor36" data-v-85be0237># NaN類型?</p><p data-v-85be0237>Number</p><br data-v-85be0237><p data-v-85be0237>因為 NaN 表示一個不能表示的數字</p><br data-v-85be0237><br data-v-85be0237><p class="cor36" data-v-85be0237># typeof null?</p><p data-v-85be0237>object</p><br data-v-85be0237><br data-v-85be0237><div id="onejs003" class="articleCardTitle cor36" data-v-85be0237> [ JS ] ≫ ==和===有什麼不同? </div><p class="cor36" data-v-85be0237>寬鬆相等 ==</p><p data-v-85be0237> 當等號兩邊的值為相同類型時比較值是否相同，類型不同時會發生類型的自動轉換，轉換為相同的類型後再做比較。 </p><br data-v-85be0237><p class="cor36" data-v-85be0237>嚴格相等 ===</p><p data-v-85be0237> 當等號兩邊的值為相同類型時，直接比較等號兩邊的值，相同返回 true；若等號兩邊值的類型不同時直接返回 false。 </p><br data-v-85be0237><br data-v-85be0237><p data-v-85be0237>1. NaN 和其他任何類型比較永遠返回 false。</p><br data-v-85be0237><p data-v-85be0237> 2. Boolean 和其他任何類型比較，Boolean 首先被轉換為 Number 類型。 </p><br data-v-85be0237><p data-v-85be0237>3. String 和 Number 比較，先將 String 轉換為 Number 類型。</p><br data-v-85be0237><p data-v-85be0237> 4. null == undefined 比較結果是 true，除此之外，null、undefined 和其他任何結果的比較值都為 false。 </p><br data-v-85be0237><p data-v-85be0237> 5. 原始類型和引用類型做比較時，引用類型會依照 ToPrimitive 規則轉換為原始類型。 </p><br data-v-85be0237><p data-v-85be0237>6. 兩個都為引用類型，則比較它們是否指向同一個物件。</p><br data-v-85be0237><br data-v-85be0237><p data-v-85be0237>1 == &quot;1&quot; . . . // true</p><br data-v-85be0237><p data-v-85be0237>1 === &quot;1&quot; . . . // false</p><br data-v-85be0237><p data-v-85be0237>NaN == NaN . . . // false</p><br data-v-85be0237><p data-v-85be0237>true == 1 . . . // true</p><br data-v-85be0237><p data-v-85be0237>true == &#39;2&#39; . . . // false, 先把 true 變 1，再參考規則 3</p><br data-v-85be0237><p data-v-85be0237> true == [&#39;1&#39;] . . . // true, 先把 true 變 1， [&#39;1&#39;]拆箱成 &#39;1&#39;, 再參考規則 3 </p><br data-v-85be0237><p data-v-85be0237>true == [&#39;2&#39;] . . . // false, 同上</p><br data-v-85be0237><p data-v-85be0237> undefined == false . . . // false ，首先 false 變 0，然後參考規則 4 </p><br data-v-85be0237><p data-v-85be0237>null == false . . . // false，同上</p><br data-v-85be0237><p data-v-85be0237>null == undefined . . . //true</p><br data-v-85be0237><p data-v-85be0237>[1,2] == &quot;1,2&quot; . . . //true</p><br data-v-85be0237><p data-v-85be0237>123 == &#39;123&#39; . . . // true, &#39;123&#39; 先變 123</p><br data-v-85be0237><p data-v-85be0237>&quot;&quot; == 0 . . . // true, &quot;&quot; 先變 0</p><br data-v-85be0237><p data-v-85be0237>&quot; &quot; == 0 . . . // true, &quot; &quot; 先變 0</p><br data-v-85be0237><p data-v-85be0237>+0 == -0 . . . // true</p><br data-v-85be0237><p data-v-85be0237>null == undefined . . . // true</p><br data-v-85be0237><p data-v-85be0237>null == &quot;&quot; . . . // false</p><br data-v-85be0237><p data-v-85be0237>null == 0 . . . // false</p><br data-v-85be0237><p data-v-85be0237>null == false . . . // false</p><br data-v-85be0237><p data-v-85be0237>undefined == &quot;&quot; . . . // false</p><br data-v-85be0237><p data-v-85be0237>undefined == 0 . . . // false</p><br data-v-85be0237><p data-v-85be0237>undefined == false . . . // false</p><br data-v-85be0237><p data-v-85be0237>&quot;false&quot; == false . . . // false // false 轉成 0</p><br data-v-85be0237><p data-v-85be0237>NaN == false . . . // false</p><br data-v-85be0237><p data-v-85be0237>NaN === false . . . // false</p><br data-v-85be0237><br data-v-85be0237><div id="onejs004" class="articleCardTitle cor36" data-v-85be0237> [ JS ] ≫ 0.1+0.2為什麼不等於0.3? </div><p data-v-85be0237>浮點數運算可能導致精度丟失，因為計算時使用的是二進制表示</p><br data-v-85be0237><p data-v-85be0237> 浮點數的精度問題, 0.1在內存裡不一定等於0.1, 0.2在內存裡不一定等於0.2, 結果約等於0.3 </p><br data-v-85be0237><br data-v-85be0237><p class="cor36" data-v-85be0237>怎麼對比兩個小數大小是否相等?</p><p data-v-85be0237> 假如a是一個小數, b是一個小數, a去減b的絕對值, 如果減出來的值小於 0.0001 就說明a和b幾乎相等 </p><br data-v-85be0237><br data-v-85be0237><div id="onejs027" class="articleCardTitle cor36" data-v-85be0237> [ JS ] ≫ 判斷數字是小數? 小數點後幾位? </div><p data-v-85be0237>數字裡 是否有 小數點</p><br data-v-85be0237><p data-v-85be0237>數字 用 .toString 轉成字串</p><br data-v-85be0237><p data-v-85be0237>字串 用 indexOf 拿到小數點在字串的 索引位置</p><br data-v-85be0237><p data-v-85be0237>沒 小數點 indexOf 返回 -1</p><br data-v-85be0237><br data-v-85be0237><p class="coe36" data-v-85be0237># 小數點後幾位?</p><p data-v-85be0237>split 方法可以把字串 切成 數組</p><br data-v-85be0237><p data-v-85be0237>把 小數點 做為 隔板 , 把字串 通過 split 方法 切割為一個 數組</p><br data-v-85be0237><p data-v-85be0237>數組 第 2 個元素 為 小數點後的部分</p><br data-v-85be0237><p data-v-85be0237>取 arr[1] , 然後 .length 方法 獲取長度 , 得到小數點後的個數</p><br data-v-85be0237><br data-v-85be0237><br data-v-85be0237><p data-v-85be0237>x.toString().split(&quot;.&quot;)[1].length</p><br data-v-85be0237><br data-v-85be0237><p data-v-85be0237>1.00 出問題 toString 後只剩 有效位</p><br data-v-85be0237><br data-v-85be0237><div id="onejs024" class="articleCardTitle cor36" data-v-85be0237> [ JS ] ≫ 判斷變量是否為陣列? </div><p data-v-85be0237>1. Array.isArray(變量) 方法</p><p data-v-85be0237>只需要傳入變量 , 是數組 , 這方法返回 true</p><br data-v-85be0237><br data-v-85be0237><p data-v-85be0237>2. Object.prototype.toString.call() 方法</p><p data-v-85be0237>他會 返回 一個 字串數組</p><br data-v-85be0237><p data-v-85be0237> 判斷 Object.prototype.toString.call(arr) 是否等於 字串 &quot;[object Array]&quot; </p><br data-v-85be0237><p data-v-85be0237> 另外 數組本身 toString 被改寫過 , 不能通過數組的 toString 來判斷 </p><br data-v-85be0237><p data-v-85be0237>想判斷數據類型要 用 Object 的原型 來實現</p><br data-v-85be0237><br data-v-85be0237><div id="onejs028" class="articleCardTitle cor36" data-v-85be0237> [ JS ] ≫ 數組去重? </div><p class="cor36" data-v-85be0237>1.</p><p data-v-85be0237>利用 set 結構 不允許 有 重複數據</p><br data-v-85be0237><p data-v-85be0237>返回 類 數組 物件 , 所以 new Set 後 要 Array.from 方法轉成數組</p><br data-v-85be0237><p data-v-85be0237>Array.from( new Set ( arr ) )</p><br data-v-85be0237><br data-v-85be0237><p class="cor36" data-v-85be0237>2.</p><p data-v-85be0237>indexOf 從前往後遍歷數組 返回元素 第一次出現 的下標</p><br data-v-85be0237><p data-v-85be0237>先 定義 一個 新數組</p><br data-v-85be0237><p data-v-85be0237>遍歷 原數組 每次通過 indexOf 方法 , 判斷 當前元素 是否在 新數組</p><br data-v-85be0237><p data-v-85be0237>值為 -1 代表 不在新數組 , 就 加入到 新數組 ＜... 就是去重後結果</p><br data-v-85be0237><br data-v-85be0237><p class="cor36" data-v-85be0237>3.</p><p data-v-85be0237>reduce 傳 2參數 1. 方法(A上一次值,B當前值) 2. 初始值</p><p data-v-85be0237>循環方式: 每次都是上一次結果 pre</p><p data-v-85be0237> 比如 第 1 次 1 , 把 1 放到 初始值 [ 1 ] , 第 2 次 [ 1, 2 ] , 每次循環都是上一次結果 </p><p data-v-85be0237> return 判斷有無重複 , 上次結果 包不包含 當前項目 pre.includes(item) </p><p data-v-85be0237>包含 ...&gt; 不要 , 直接返回當前數組 , 不包含 ...&gt; 加進 pre</p><p data-v-85be0237>? pre : [ ...pre , item ]</p><br data-v-85be0237><br data-v-85be0237><p class="cor36" data-v-85be0237>4.</p><p data-v-85be0237>兩層 for 循環比較</p><p data-v-85be0237>第 1 層循環選定 1 個值</p><p data-v-85be0237>第 2 層循環 遍歷 其餘元素</p><p data-v-85be0237>依次和 這個值 比較</p><p data-v-85be0237>相同 ..&gt; splice 刪除</p><br data-v-85be0237><br data-v-85be0237><div class="cor36" data-v-85be0237># 方法1: new set</div><div data-v-85be0237>var arr = [ 1,2,3,2,4,1 ];</div><div data-v-85be0237>console.log( new Set( arr ) );</div><div data-v-85be0237>發現打印的是物件</div><div data-v-85be0237>console.log( Array.from( new Set( arr ) ) );</div><div data-v-85be0237>打印出陣列</div><div data-v-85be0237>也可以</div><div data-v-85be0237>console.log( [...new Set( arr ) ] );</div><br data-v-85be0237><div data-v-85be0237>封裝:</div><div data-v-85be0237>function unique( arr ){</div><div class="pTwo" data-v-85be0237>return [ Array.from( new Set(arr) ) ]</div><div data-v-85be0237>}</div><div data-v-85be0237>console.log( unique( arr ) );</div><br data-v-85be0237><br data-v-85be0237><div class="cor36" data-v-85be0237>#</div><div data-v-85be0237>function unique( arr ){</div><div class="pTwo" data-v-85be0237>return [...new Set(arr)]</div><div data-v-85be0237>}</div><div data-v-85be0237>console.log( unique( arr ) );</div><br data-v-85be0237><br data-v-85be0237><div class="cor36" data-v-85be0237>方法2: indexOf</div><div data-v-85be0237> indexOf() 方法會回傳給定元素於陣列中第一個被找到之索引，若不存在於陣列中則回傳 -1 </div><br data-v-85be0237><div data-v-85be0237>var arr = [ 1,2,3,2,4,1 ];</div><div data-v-85be0237>function unique( arr ){</div><div class="pTwo" data-v-85be0237>var result = [];</div><div class="pTwo" data-v-85be0237>for( var i = 0 ; i ＜ arr.length ; i++ ){</div><div class="pFou" data-v-85be0237>if( result.indexOf( arr[i] ) == -1 ){</div><div class="pSix" data-v-85be0237>result.push( arr[i] );</div><div class="pFou" data-v-85be0237>}</div><div class="pTwo" data-v-85be0237>}</div><div class="pTwo" data-v-85be0237>return result;</div><div data-v-85be0237>}</div><div data-v-85be0237>console.log( unique( arr ) );</div><br data-v-85be0237><div data-v-85be0237>目標, 遍歷陣列, 看有沒有在 result 陣列, 沒有就添加</div><div data-v-85be0237>去找 indexOf( arr [ i ] )</div><div data-v-85be0237> 第一次去找 result 肯定是空的 ( 不存在 ) 就回傳 -1 就把他推進 result 裡面 </div><div data-v-85be0237>不是 -1 就不動作 完成。</div><br data-v-85be0237><br data-v-85be0237><div class="cor36" data-v-85be0237>方法3: reduce</div><div data-v-85be0237>var arr = [ 1,2,3,2,4,1 ];</div><div data-v-85be0237>function unique() {</div><div class="pTwo" data-v-85be0237>var result = arr.reduce( ( pre , item ) =&gt; {</div><div class="pFou" data-v-85be0237> return pre.includes ( item ) ? pre : [ ...pre , item ] </div><div class="pTwo" data-v-85be0237>} , [] )</div><div class="pTwo" data-v-85be0237>console.log ( result )</div><div data-v-85be0237>}</div><div data-v-85be0237>unique()</div><br data-v-85be0237><div data-v-85be0237>reduce 傳 2參數 1. 方法(A上一次值,B當前值) 2. 初始值</div><div data-v-85be0237>循環方式: 每次都是上一次結果 pre</div><div data-v-85be0237> 比如 第 1 次 1 , 把 1 放到 初始值 [ 1 ] , 第 2 次 [ 1, 2 ] , 每次循環都是上一次結果 </div><div data-v-85be0237> return 判斷有無重複 , 上次結果 包不包含 當前項目 pre.includes(item) </div><div data-v-85be0237>包含 ...&gt; 不要 , 直接返回當前數組 , 不包含 ...&gt; 加進 pre</div><div data-v-85be0237>? pre : [ ...pre , item ]</div><br data-v-85be0237><br data-v-85be0237><div class="cor36" data-v-85be0237>方法4: 兩層 for 循環比較</div><div data-v-85be0237>var arr = [ 1,2,3,2,4,1 ];</div><div data-v-85be0237>function unique() {</div><div class="pTwo" data-v-85be0237>for ( let i = 0 ; i ＜ arr.length ; i++ ) {</div><div class="pFou" data-v-85be0237>for ( let j = i +1 ; j ＜ arr.length ; j++ ) {</div><div class="pSix" data-v-85be0237>if ( arr [ i ] === arr [ j ] ) {</div><div class="pEig" data-v-85be0237>arr.splice ( j, 1 )</div><div class="pEig" data-v-85be0237>j--</div><div class="pSix" data-v-85be0237>}</div><div class="pFou" data-v-85be0237>}</div><div class="pTwo" data-v-85be0237>}</div><div class="pTwo" data-v-85be0237>return arr</div><div data-v-85be0237>}</div><br data-v-85be0237><br data-v-85be0237><div data-v-85be0237>第 1 層循環選定 1 個值</div><div data-v-85be0237>第 2 層循環 遍歷 其餘元素</div><div data-v-85be0237>依次和 這個值 比較</div><div data-v-85be0237>相同 ..&gt; splice 刪除</div><br data-v-85be0237><br data-v-85be0237><div id="onejs026" class="articleCardTitle cor36" data-v-85be0237> [ JS ] ≫ 獲得陣列最後一項? </div><p data-v-85be0237>1. pop()</p><p data-v-85be0237>刪除陣列最後一個元素 , 並 返回該元素</p><br data-v-85be0237><p data-v-85be0237>缺: 會把原陣列 最後一個元素 刪掉</p><br data-v-85be0237><br data-v-85be0237><p data-v-85be0237>2. length</p><p data-v-85be0237>通過 array.length 得到陣列長度</p><br data-v-85be0237><p data-v-85be0237>陣列索引從 0 開始</p><br data-v-85be0237><p data-v-85be0237>最後一個元素 的索引 為 length - 1</p><br data-v-85be0237><p data-v-85be0237>array 中括號 length - 1 . . . array[length-1]</p><br data-v-85be0237><br data-v-85be0237><p data-v-85be0237>3. slice()</p><p data-v-85be0237> 通過 指定 起始索引 擷取對應元素 , 返回一個 由 這些元素 組成的 新數組 </p><br data-v-85be0237><p data-v-85be0237>當用 負數 做參數 , 會重 陣列 末端開始計數 ,</p><br data-v-85be0237><p data-v-85be0237>當 不傳 第 2 個參數時 , 表示一直找到 陣列 末端</p><br data-v-85be0237><p data-v-85be0237>arr.slice(-1)</p><br data-v-85be0237><br data-v-85be0237><p data-v-85be0237>4. 陣列 at 方法</p><p data-v-85be0237>接收 一個 整數 做索引值 , 並返回 索引 對應的 元素</p><br data-v-85be0237><p data-v-85be0237>傳 -1 代表 最後一個</p><br data-v-85be0237><p data-v-85be0237>arr.at(-1)</p><br data-v-85be0237><div id="onejs023" class="articleCardTitle cor36" data-v-85be0237> [ JS ] ≫ 如何判斷一個物件為空? </div><p data-v-85be0237>1. JSON.stringify() 方法</p><p data-v-85be0237>將 json 物件 轉成 json 字串</p><br data-v-85be0237><p data-v-85be0237>判斷 序列化後 的物件 是否 等於 字串花括號 &quot;{}&quot;</p><br data-v-85be0237><br data-v-85be0237><p data-v-85be0237>2. Object.keys() 方法</p><p data-v-85be0237>這方法把 物件中 屬性名 取出來 以數組形式返回</p><br data-v-85be0237><p data-v-85be0237>判斷 數組長度 是否為 0 , 為0 &gt; 該物件沒屬性 &gt; 空物件</p><br data-v-85be0237><br data-v-85be0237><p data-v-85be0237>3. for in 遍歷物件</p><p data-v-85be0237>定義一個函數 , 函數內返回 true</p><br data-v-85be0237><p data-v-85be0237>將 for in 循環寫入函數</p><br data-v-85be0237><p data-v-85be0237>在循環裡 寫 return false</p><br data-v-85be0237><p data-v-85be0237>如果 物件不為空 &gt; 有可遍歷屬性 &gt; 進入循環 &gt; 返回 false</p><br data-v-85be0237><br data-v-85be0237><p data-v-85be0237>4. getOwnPropertyNames</p><br data-v-85be0237><br data-v-85be0237><div class="bgcVS" data-v-85be0237><div data-v-85be0237><span class="function" data-v-85be0237>function </span><span class="word" data-v-85be0237>isEmpty</span> <span class="brackets" data-v-85be0237>(</span><span class="word" data-v-85be0237>obj</span> <span class="brackets" data-v-85be0237>){</span></div><div class="padTwo VSL" data-v-85be0237><span class="then" data-v-85be0237>return </span><span class="brackets" data-v-85be0237>JSON</span><span class="variable" data-v-85be0237>.stringify</span><span class="brackets" data-v-85be0237>(</span> <span class="word" data-v-85be0237>obj</span><span class="brackets" data-v-85be0237>)</span> <span class="then" data-v-85be0237>===</span><span class="src" data-v-85be0237>&quot;{}&quot;</span><div data-v-85be0237></div></div><div data-v-85be0237><span class="brackets" data-v-85be0237>}</span></div><br data-v-85be0237><br data-v-85be0237><div data-v-85be0237><span class="function" data-v-85be0237>function </span><span class="word" data-v-85be0237>isEmpty2</span><span class="brackets" data-v-85be0237>(</span> <span class="word" data-v-85be0237>obj</span><span class="brackets" data-v-85be0237>){</span></div><div class="padTwo VSL" data-v-85be0237><span class="then" data-v-85be0237>return </span><span class="brackets" data-v-85be0237>Object</span><span class="word" data-v-85be0237>.keys</span> <span class="brackets" data-v-85be0237>(</span><span class="word" data-v-85be0237>obj</span> <span class="brackets" data-v-85be0237>)</span><span class="variable" data-v-85be0237>.length</span><span class="then" data-v-85be0237>===</span> <span class="number" data-v-85be0237>0</span><div data-v-85be0237></div></div><div data-v-85be0237><span class="brackets" data-v-85be0237>}</span></div><br data-v-85be0237><br data-v-85be0237><div data-v-85be0237><span class="function" data-v-85be0237>function </span><span class="word" data-v-85be0237>isEmpty3</span><span class="brackets" data-v-85be0237>(</span> <span class="word" data-v-85be0237>obj</span><span class="brackets" data-v-85be0237>){</span></div><div class="padTwo VSL" data-v-85be0237><span class="function" data-v-85be0237>let </span> <span class="word" data-v-85be0237>flag</span><span class="then" data-v-85be0237>=</span> <span class="number" data-v-85be0237>true</span><div data-v-85be0237><span class="then" data-v-85be0237>for </span> <span class="brackets" data-v-85be0237>(</span><span class="function" data-v-85be0237>const </span><span class="word" data-v-85be0237>key</span> <span class="function" data-v-85be0237>in </span><span class="word" data-v-85be0237>obj</span> <span class="brackets" data-v-85be0237>){</span></div><div data-v-85be0237></div><div class="padTwo VSL" data-v-85be0237><span class="then" data-v-85be0237>if</span> <span class="brackets" data-v-85be0237>(</span><span class="word" data-v-85be0237>key</span> <span class="brackets" data-v-85be0237>){</span><div data-v-85be0237></div><div class="padTwo VSL" data-v-85be0237><span class="word" data-v-85be0237>flag</span> <span class="then" data-v-85be0237>=</span><span class="number" data-v-85be0237>false</span><div data-v-85be0237><span class="variable" data-v-85be0237>break</span></div><div data-v-85be0237></div></div><div data-v-85be0237><span class="brackets" data-v-85be0237>}</span></div></div><div data-v-85be0237><span class="then" data-v-85be0237>return </span> <span class="word" data-v-85be0237>flag</span></div><div data-v-85be0237><span class="brackets" data-v-85be0237>}</span></div></div><div data-v-85be0237><span class="brackets" data-v-85be0237>}</span></div><br data-v-85be0237><br data-v-85be0237><div data-v-85be0237><span class="function" data-v-85be0237>function </span><span class="word" data-v-85be0237>isEmpty4</span><span class="brackets" data-v-85be0237>(</span> <span class="word" data-v-85be0237>obj</span><span class="brackets" data-v-85be0237>){</span></div><div class="padTwo VSL" data-v-85be0237><span class="then" data-v-85be0237>return </span><span class="brackets" data-v-85be0237>Object</span><span class="word" data-v-85be0237>.getOwnPropertyNames</span><span class="brackets" data-v-85be0237>(</span> <span class="word" data-v-85be0237>obj</span><span class="brackets" data-v-85be0237>)</span><span class="variable" data-v-85be0237>.length</span><span class="then" data-v-85be0237>===</span> <span class="number" data-v-85be0237>0</span><div data-v-85be0237></div></div><div data-v-85be0237><span class="brackets" data-v-85be0237>}</span></div></div><div id="onejs023" class="articleCardTitle cor36" data-v-85be0237> [ JS ] ≫ 如何判斷一個物件是否有某屬性? </div><p data-v-85be0237>1. obj.hasOwnProperty(&quot;要找的屬性&quot;)</p><p data-v-85be0237>返回 布林</p><br data-v-85be0237><p data-v-85be0237>只判斷 自身 , 不查找 原型鏈</p><br data-v-85be0237><br data-v-85be0237><p data-v-85be0237>2. obj.屬性 or obj方括號屬性 obj[&quot;屬性&quot;]</p><p data-v-85be0237>來獲取 物件上 屬性值</p><br data-v-85be0237><p data-v-85be0237>如果不存在 , 返回 undefined</p><br data-v-85be0237><p data-v-85be0237> ( 物件 和 原型鏈 都沒這屬性 ) ( 不能用在 屬性存在 但值為 undefined 時 ) </p><br data-v-85be0237><br data-v-85be0237><p data-v-85be0237>3. in 運算符</p><p data-v-85be0237>&quot;屬性&quot; in obj , true 在物件 or 原型鏈有此屬性</p><br data-v-85be0237><p data-v-85be0237>( 會找自身 找原型鏈 )</p><br data-v-85be0237><br data-v-85be0237><div id="onejs005" class="articleCardTitle cor36" data-v-85be0237> [ JS ] ≫ let var const區別? </div><p data-v-85be0237>var是ES5 let是ES6</p><p data-v-85be0237>var是函數作用域 let支持塊級作用域</p><p data-v-85be0237>var有變量提升 let沒有變量提升</p><p data-v-85be0237>var可以重複聲明, let不能重複</p><p data-v-85be0237>let和const的區別在於let可以重新賦值, const不行, 其他幾乎一樣</p><br data-v-85be0237><br data-v-85be0237><p class="cor36" data-v-85be0237>聲明1個var變數之後還能在聲明同名var變數嗎?</p><p data-v-85be0237>可以 不會報錯</p><br data-v-85be0237><br data-v-85be0237><p class="cor36" data-v-85be0237>聲明1個let變數之後還能在聲明同名let變數嗎?</p><p data-v-85be0237>不行 會報錯</p><br data-v-85be0237><br data-v-85be0237><p class="cor36" data-v-85be0237>聲明1個const變數之後還能在聲明同名const變數嗎?</p><p data-v-85be0237>不行 會報錯</p><br data-v-85be0237><br data-v-85be0237><div id="onejs006" class="articleCardTitle cor36" data-v-85be0237> [ JS ] ≫ 展開運算符 </div><p data-v-85be0237> 展開運算符 是把一個陣列展開成個別值，這個運算符後面必定接著一個陣列。 </p><p data-v-85be0237>最常見的是用來組合陣列，對應的陣列方法是concat</p><br data-v-85be0237><p data-v-85be0237> : 比如const a 等於, 然後一個陣列, 然後a點點點b, 這個b是一個舊陣列, 然後它會把a和b合成形成新陣列, 然後返回給變量 </p><br data-v-85be0237><div class="bgcVS" data-v-85be0237><br data-v-85be0237><div data-v-85be0237><span class="function" data-v-85be0237>const </span> <span class="word" data-v-85be0237>a</span><span class="then" data-v-85be0237>=</span> <span class="brackets" data-v-85be0237>[</span><span class="number" data-v-85be0237>1, 2, 3</span><span class="brackets" data-v-85be0237>]</span></div><div data-v-85be0237><span class="function" data-v-85be0237>const </span> <span class="word" data-v-85be0237>b</span><span class="then" data-v-85be0237>=</span> <span class="brackets" data-v-85be0237>[</span><span class="number" data-v-85be0237>4, 5, 6 </span><span class="brackets" data-v-85be0237>]</span></div><br data-v-85be0237><div class="comment" data-v-85be0237>用於拼接陣列</div><div data-v-85be0237><span class="function" data-v-85be0237>const </span> <span class="word" data-v-85be0237>c</span><span class="then" data-v-85be0237>=</span> <span class="brackets" data-v-85be0237>[</span><span class="word" data-v-85be0237>...a,...b</span><span class="brackets" data-v-85be0237>] </span><span class="comment" data-v-85be0237>// [1,2,3,4,5,6]</span></div><br data-v-85be0237><div class="comment" data-v-85be0237>也可以</div><div data-v-85be0237><span class="function" data-v-85be0237>const </span> <span class="word" data-v-85be0237>d</span><span class="then" data-v-85be0237>=</span> <span class="brackets" data-v-85be0237>[</span><span class="word" data-v-85be0237>...a,</span><span class="number" data-v-85be0237>4, 5, 6</span><span class="brackets" data-v-85be0237>] </span><span class="comment" data-v-85be0237>// [1,2,3,4,5,6]</span></div><br data-v-85be0237><div class="comment" data-v-85be0237>也可以</div><div data-v-85be0237><span class="word" data-v-85be0237>a.push</span> <span class="brackets" data-v-85be0237>(</span><span class="word" data-v-85be0237>...b</span> <span class="brackets" data-v-85be0237>)</span></div><div data-v-85be0237><span class="word" data-v-85be0237>console</span><span class="variable" data-v-85be0237>.log</span><span class="brackets" data-v-85be0237>(</span> <span class="word" data-v-85be0237>a</span><span class="brackets" data-v-85be0237>)</span></div><br data-v-85be0237><div class="comment" data-v-85be0237>可以做陣列淺拷貝</div><div data-v-85be0237><span class="function" data-v-85be0237>const </span> <span class="word" data-v-85be0237>e</span><span class="then" data-v-85be0237>=</span> <span class="brackets" data-v-85be0237>[</span><span class="word" data-v-85be0237>...a</span> <span class="brackets" data-v-85be0237>]</span></div><div data-v-85be0237><span class="word" data-v-85be0237>e.push</span> <span class="brackets" data-v-85be0237>(</span><span class="number" data-v-85be0237>4</span> <span class="brackets" data-v-85be0237>)</span><span class="comment" data-v-85be0237>// 不會影響 a</span></div><br data-v-85be0237><div class="comment" data-v-85be0237> 淺拷貝是指複製值時，原本的變數和新的變數會指向同一個址 (reference) </div><div class="comment" data-v-85be0237> 深拷貝是指在拷貝時不共享相同的址 (reference) </div><br data-v-85be0237></div><br data-v-85be0237><br data-v-85be0237><p data-v-85be0237>a={...b} 可以嗎?</p><br data-v-85be0237><div class="bgcVS" data-v-85be0237><br data-v-85be0237><div data-v-85be0237><span class="function" data-v-85be0237>const </span><span class="word" data-v-85be0237>obj1</span> <span class="then" data-v-85be0237>=</span><span class="brackets" data-v-85be0237>{</span> <span class="word" data-v-85be0237>a:</span><span class="number" data-v-85be0237>1,</span> <span class="word" data-v-85be0237>b:</span><span class="number" data-v-85be0237>2</span> <span class="brackets" data-v-85be0237>};</span></div><div data-v-85be0237><span class="function" data-v-85be0237>const </span><span class="word" data-v-85be0237>obj2</span> <span class="then" data-v-85be0237>=</span><span class="brackets" data-v-85be0237>{</span> <span class="word" data-v-85be0237>c:</span><span class="number" data-v-85be0237>3,</span> <span class="word" data-v-85be0237>d:</span><span class="number" data-v-85be0237>4</span> <span class="brackets" data-v-85be0237>};</span></div><br data-v-85be0237><span class="comment" data-v-85be0237>// 可以 拷貝 物件</span><div data-v-85be0237><span class="function" data-v-85be0237>const </span><span class="word" data-v-85be0237>newObj</span> <span class="then" data-v-85be0237>=</span><span class="brackets" data-v-85be0237>{</span> <span class="word" data-v-85be0237>...obj1</span><span class="brackets" data-v-85be0237>}</span><span class="word" data-v-85be0237></span></div><br data-v-85be0237><span class="comment" data-v-85be0237>// 可以 merged 2 個物件</span><div data-v-85be0237><span class="function" data-v-85be0237>const </span><span class="word" data-v-85be0237>merged</span> <span class="then" data-v-85be0237>=</span><span class="brackets" data-v-85be0237>{</span><span class="word" data-v-85be0237>...obj1,obj2</span><span class="brackets" data-v-85be0237>};</span></div><div data-v-85be0237><span class="word" data-v-85be0237>console.</span><span class="variable" data-v-85be0237>log</span> <span class="brackets" data-v-85be0237>(</span><span class="word" data-v-85be0237>merged</span><span class="brackets" data-v-85be0237>); </span><span class="comment" data-v-85be0237>// {a: 1, b: 2, c: 3, d: 4 }</span></div><br data-v-85be0237></div><br data-v-85be0237><br data-v-85be0237><p class="cor36" data-v-85be0237>這三個點除了把一個東西展開,它在函數參數有什麼用?</p><p data-v-85be0237>可以不去命名那個函數的參數, 直接用函數參數對象裡面的某一個東西</p><br data-v-85be0237><p class="cor36" data-v-85be0237>參數裡面可不可以用三個點?</p><p data-v-85be0237>可以</p><br data-v-85be0237><p class="cor36" data-v-85be0237>在賦值可以用三個點嗎?</p><p data-v-85be0237>可以</p><br data-v-85be0237><p class="cor36" data-v-85be0237> 我有一個陣列長度為10,我想把前面第一個元素命名為a,後面9個元素命名為新的數組叫b怎麼做? </p><p data-v-85be0237> 方括號a然後點,然後逗號,然後點點點rest,然後方括號,然後等於array1,那就是a,那個a就是array裡的第一個 </p><br data-v-85be0237><br data-v-85be0237>',442),xi={class:"bgcVS"},Li=U('<br data-v-85be0237><div class="comment" data-v-85be0237>// 用於函數傳參</div><br data-v-85be0237><div class="comment" data-v-85be0237>// 實參的用法</div><div data-v-85be0237><span class="function" data-v-85be0237>const </span> <span class="word" data-v-85be0237>a</span><span class="then" data-v-85be0237>=</span> <span class="brackets" data-v-85be0237>[</span><span class="number" data-v-85be0237>1, 2, 3</span><span class="brackets" data-v-85be0237>]</span></div>',5),ji=ls(()=>v("span",{class:"function"},"function ",-1)),Pi=ls(()=>v("span",{class:"word"},"test",-1)),Vi=ls(()=>v("span",{class:"brackets"},"(",-1)),Ni=ls(()=>v("span",{class:"word"},"p1,p2,p3",-1)),Oi=ls(()=>v("span",{class:"brackets"},"){",-1)),$i=U('<div class="pTwo" data-v-85be0237><span class="word" data-v-85be0237>console.</span><span class="variable" data-v-85be0237>log</span> <span class="brackets" data-v-85be0237>(</span><span class="word" data-v-85be0237>p1</span> <span class="brackets" data-v-85be0237>);</span></div><div class="pTwo" data-v-85be0237><span class="word" data-v-85be0237>console.</span><span class="variable" data-v-85be0237>log</span> <span class="brackets" data-v-85be0237>(</span><span class="word" data-v-85be0237>p2</span> <span class="brackets" data-v-85be0237>);</span></div><div class="pTwo" data-v-85be0237><span class="word" data-v-85be0237>console.</span><span class="variable" data-v-85be0237>log</span> <span class="brackets" data-v-85be0237>(</span><span class="word" data-v-85be0237>p3</span> <span class="brackets" data-v-85be0237>);</span></div><div class="brackets" data-v-85be0237>}</div><div data-v-85be0237><span class="word" data-v-85be0237>test</span><span class="brackets" data-v-85be0237>(</span><span class="word" data-v-85be0237>...a</span> <span class="brackets" data-v-85be0237>)</span></div><br data-v-85be0237><div data-v-85be0237><span class="function" data-v-85be0237>function </span><span class="word" data-v-85be0237>sum</span> <span class="brackets" data-v-85be0237>(</span><span class="word" data-v-85be0237>a,b,c</span> <span class="brackets" data-v-85be0237>){</span></div><div class="pTwo" data-v-85be0237><span class="then" data-v-85be0237>return </span> <span class="word" data-v-85be0237>a+b+c</span></div><span class="brackets" data-v-85be0237>}</span><div data-v-85be0237><span class="function" data-v-85be0237>const </span><span class="word" data-v-85be0237>sum</span> <span class="then" data-v-85be0237>=</span><span class="brackets" data-v-85be0237>(</span> <span class="word" data-v-85be0237>a,b,c</span><span class="brackets" data-v-85be0237>)</span> <span class="function" data-v-85be0237>=&gt;</span><span class="word" data-v-85be0237>a+b+c</span></div><div data-v-85be0237><span class="word" data-v-85be0237>sum</span> <span class="brackets" data-v-85be0237>(</span><span class="word" data-v-85be0237>...a</span> <span class="brackets" data-v-85be0237>) </span><span class="comment" data-v-85be0237>// 6</span></div><br data-v-85be0237><div data-v-85be0237><span class="function" data-v-85be0237>const </span><span class="word" data-v-85be0237>sum</span> <span class="then" data-v-85be0237>=</span><span class="word" data-v-85be0237>sum</span> <span class="brackets" data-v-85be0237>(</span><span class="word" data-v-85be0237>...a</span><span class="brackets" data-v-85be0237>)</span></div><br data-v-85be0237><div class="comment" data-v-85be0237>// 形參的用法</div><div class="comment" data-v-85be0237>// 形參的用法</div><div data-v-85be0237><span class="word" data-v-85be0237>conso.</span><span class="variable" data-v-85be0237>log</span> <span class="brackets" data-v-85be0237>(</span><span class="word" data-v-85be0237>Math.max</span><span class="brackets" data-v-85be0237>(</span><span class="src" data-v-85be0237>必須是字符的形式,不能直接接陣列,必須逗號隔開 </span><span class="brackets" data-v-85be0237>)</span> <span class="brackets" data-v-85be0237>)</span></div><div data-v-85be0237><span class="word" data-v-85be0237>conso.</span><span class="variable" data-v-85be0237>log</span> <span class="brackets" data-v-85be0237>(</span><span class="word" data-v-85be0237>Math.max</span><span class="brackets" data-v-85be0237>(</span> <span class="number" data-v-85be0237>1,2,3</span><span class="brackets" data-v-85be0237>)</span> <span class="brackets" data-v-85be0237>)</span><span class="comment" data-v-85be0237>// 裡面要逗號</span></div><div class="comment" data-v-85be0237>// 陣列沒有 求最大值 的方法</div><div data-v-85be0237><span class="function" data-v-85be0237>const </span> <span class="word" data-v-85be0237>a</span><span class="then" data-v-85be0237>=</span> <span class="brackets" data-v-85be0237>[</span><span class="number" data-v-85be0237>1, 2, 3</span><span class="brackets" data-v-85be0237>]</span></div><div data-v-85be0237><span class="function" data-v-85be0237>const </span> <span class="word" data-v-85be0237>b</span><span class="then" data-v-85be0237>=</span> <span class="brackets" data-v-85be0237>[</span><span class="number" data-v-85be0237>4, 5, 6</span><span class="brackets" data-v-85be0237>]</span></div><div data-v-85be0237><span class="word" data-v-85be0237>console.</span><span class="variable" data-v-85be0237>log</span> <span class="brackets" data-v-85be0237>(</span><span class="word" data-v-85be0237>...a</span><span class="brackets" data-v-85be0237>)</span><span class="comment" data-v-85be0237>// 1 2 3</span><span class="comment" data-v-85be0237>// 打印沒逗號,一樣能用在.max</span></div><span class="comment" data-v-85be0237>...a === 1,2,3</span><div data-v-85be0237><span class="word" data-v-85be0237>console.</span><span class="variable" data-v-85be0237>log</span> <span class="word" data-v-85be0237>Math</span><span class="variable" data-v-85be0237>.max</span> <span class="brackets" data-v-85be0237>(</span><span class="word" data-v-85be0237>...a</span><span class="brackets" data-v-85be0237>)</span> <span class="comment" data-v-85be0237>// 3</span></div><div data-v-85be0237><span class="word" data-v-85be0237>console.</span><span class="variable" data-v-85be0237>log</span> <span class="word" data-v-85be0237>Math</span><span class="variable" data-v-85be0237>.min</span> <span class="brackets" data-v-85be0237>(</span><span class="word" data-v-85be0237>...a</span><span class="brackets" data-v-85be0237>)</span> <span class="comment" data-v-85be0237>// 3</span></div><div data-v-85be0237><span class="word" data-v-85be0237>console.</span><span class="variable" data-v-85be0237>log</span> <span class="word" data-v-85be0237>Math</span><span class="variable" data-v-85be0237>.max</span> <span class="brackets" data-v-85be0237>(</span><span class="word" data-v-85be0237>...a,...b</span><span class="brackets" data-v-85be0237>)</span> <span class="comment" data-v-85be0237>// 6</span></div><br data-v-85be0237><div class="comment" data-v-85be0237>// 形參 &amp; 實參</div><div data-v-85be0237><span class="function" data-v-85be0237>function </span><span class="word" data-v-85be0237>test</span> <span class="brackets" data-v-85be0237>(</span><span class="word" data-v-85be0237>形參1,形參2</span><span class="brackets" data-v-85be0237>){ </span><span class="comment" data-v-85be0237>// 函數聲明的小括號裡是 形參 </span></div><div class="comment pTwo" data-v-85be0237>// 代碼</div><div class="brackets" data-v-85be0237>}</div><div data-v-85be0237><span class="word" data-v-85be0237>test</span> <span class="brackets" data-v-85be0237>(</span><span class="word" data-v-85be0237>實參1,實參2</span><span class="brackets" data-v-85be0237>) </span><span class="comment" data-v-85be0237>// 函數調用的小括號裡是 實參</span></div><br data-v-85be0237>',33),Ei=U('<div id="" class="articleCardTitle cor36" data-v-85be0237>[ JS ] ≫ 操作陣列?</div><p data-v-85be0237>push pop unshift shift reduce find include</p><div id="onejs007" class="articleCardTitle cor36" data-v-85be0237> [ JS ] ≫ 遍歷數組有幾種方式? </div><p data-v-85be0237>for . forEach</p><br data-v-85be0237><p data-v-85be0237> map: 返回一個新數組 , 數組中的元素為 原始數組元素 調用函數 處理後的值 </p><br data-v-85be0237><p data-v-85be0237> filter: 創建一個新數組 , 數組中的元素 是通過檢查指定數組中 符合條件的 所有元素 </p><br data-v-85be0237><p data-v-85be0237>every: 每一個元素都滿足條件 返回 true , 否則 返回 false</p><br data-v-85be0237><p data-v-85be0237> some: 只要有一個以上的元素滿足條件 就 返回 true , 否則 返回 false , 退出循環 </p><br data-v-85be0237><p data-v-85be0237>reduce: 對數組中的 每個元素 執行一個 回掉函數 , 將其結果返回值</p><br data-v-85be0237><br data-v-85be0237><p class="cor36" data-v-85be0237># forEach和map的區別?</p><p data-v-85be0237> map需要有個返回值把它再返回到陣列, 它會接收到那個值, 修改當前元素 </p><br data-v-85be0237><br data-v-85be0237><p class="cor36" data-v-85be0237># for in,for of,他們用在什麼場景?</p><p data-v-85be0237>for of 循環獲取到的是一對鍵值對中的值 , 也就是 value</p><br data-v-85be0237><p data-v-85be0237>而 for in 獲取的是鍵名 , 也就是 key</p><br data-v-85be0237><br data-v-85be0237><p data-v-85be0237>對數組 for of 返回的是 數組裡面的 元素值</p><br data-v-85be0237><p data-v-85be0237>for in 返回 key , 指每個元素的 索引值</p><br data-v-85be0237><p data-v-85be0237> for of 只能遍歷其底層帶有 iterator 接口的 數據結構 像 set map string array </p><br data-v-85be0237><p data-v-85be0237>物件沒有原生 iterator 接口 , 直接用 for of 會報錯</p><br data-v-85be0237><p data-v-85be0237>開發中 遍歷用 for in 更合適</p><br data-v-85be0237><br data-v-85be0237><p data-v-85be0237>for in 返回 數組元素的 索引值 , 而不是 元素</p><br data-v-85be0237><p data-v-85be0237>而且 遍歷順序 有可能不是按照 實際數據的 內部順序</p><br data-v-85be0237><p data-v-85be0237>所以 通常遍歷數組用 for of</p><br data-v-85be0237><br data-v-85be0237><p data-v-85be0237>總之 for in 適合遍歷 物件</p><p data-v-85be0237>for of 適合遍歷 數組</p><div class="bgcVS" data-v-85be0237><div data-v-85be0237><span class="comment" data-v-85be0237>// 1. 循環數組</span></div><div data-v-85be0237><span class="word" data-v-85be0237>cosnt</span> <span class="word" data-v-85be0237>arr</span><span class="then" data-v-85be0237>=</span> <span class="brackets" data-v-85be0237>[</span><span class="src" data-v-85be0237>&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;</span><span class="brackets" data-v-85be0237>]</span></div><div data-v-85be0237><span class="comment" data-v-85be0237>// for...in 輸出 數組成員 在數組中 的索引</span></div><div data-v-85be0237><span class="then" data-v-85be0237>for </span> <span class="brackets" data-v-85be0237>(</span><span class="function" data-v-85be0237>let </span> <span class="word" data-v-85be0237>n </span><span class="function" data-v-85be0237>in </span> <span class="word" data-v-85be0237>arr</span><span class="brackets" data-v-85be0237>){</span></div><div class="padTwo VSL" data-v-85be0237><span class="word" data-v-85be0237>console.log</span><span class="brackets" data-v-85be0237>(</span> <span class="word" data-v-85be0237>n </span><span class="brackets" data-v-85be0237>) </span><span class="comment" data-v-85be0237>// 0 // 1 // 2 // 3</span><div data-v-85be0237></div></div><div data-v-85be0237><span class="brackets" data-v-85be0237>}</span></div><br data-v-85be0237><div data-v-85be0237><span class="comment" data-v-85be0237>// for...of 輸出 數組的成員</span></div><div data-v-85be0237><span class="then" data-v-85be0237>for </span> <span class="brackets" data-v-85be0237>(</span><span class="function" data-v-85be0237>let </span> <span class="word" data-v-85be0237>n </span><span class="function" data-v-85be0237>of </span> <span class="word" data-v-85be0237>arr</span><span class="brackets" data-v-85be0237>){</span></div><div class="padTwo VSL" data-v-85be0237><span class="word" data-v-85be0237>console.log</span><span class="brackets" data-v-85be0237>(</span> <span class="word" data-v-85be0237>n </span><span class="brackets" data-v-85be0237>) </span><span class="comment" data-v-85be0237>// a // b // c // d</span><div data-v-85be0237></div></div><div data-v-85be0237><span class="brackets" data-v-85be0237>}</span></div><br data-v-85be0237><div data-v-85be0237><span class="comment" data-v-85be0237>// 2. 循環物件</span></div><div data-v-85be0237><span class="function" data-v-85be0237>const </span><span class="word" data-v-85be0237>obj</span> <span class="then" data-v-85be0237>=</span><span class="brackets" data-v-85be0237>{</span> <span class="word" data-v-85be0237>n:</span><span class="number" data-v-85be0237>4,</span> <span class="word" data-v-85be0237>m:</span><span class="number" data-v-85be0237>5,</span> <span class="word" data-v-85be0237>k:</span><span class="number" data-v-85be0237>6</span> <span class="brackets" data-v-85be0237>}</span></div><div data-v-85be0237><span class="comment" data-v-85be0237>// for...in </span></div><div data-v-85be0237><span class="then" data-v-85be0237>for </span> <span class="brackets" data-v-85be0237>(</span><span class="function" data-v-85be0237>let </span> <span class="word" data-v-85be0237>n </span><span class="function" data-v-85be0237>in </span> <span class="word" data-v-85be0237>obj</span><span class="brackets" data-v-85be0237>){</span></div><div class="padTwo VSL" data-v-85be0237><span class="comment" data-v-85be0237>// 物件的屬性名</span></div><div class="padTwo VSL" data-v-85be0237><span class="word" data-v-85be0237>console.log</span><span class="brackets" data-v-85be0237>(</span> <span class="word" data-v-85be0237>n</span><span class="brackets" data-v-85be0237>) </span><span class="comment" data-v-85be0237>// n // m // k</span><div data-v-85be0237></div></div><div class="padTwo VSL" data-v-85be0237><span class="comment" data-v-85be0237>// 物件的屬性值</span></div><div class="padTwo VSL" data-v-85be0237><span class="word" data-v-85be0237>console.</span><span class="variable" data-v-85be0237>log</span> <span class="brackets" data-v-85be0237>(</span><span class="word" data-v-85be0237>obj</span> <span class="brackets" data-v-85be0237>[</span><span class="word" data-v-85be0237>n</span> <span class="brackets" data-v-85be0237>])</span><span class="comment" data-v-85be0237>// 4 // 5 // 6</span><div data-v-85be0237></div></div><div data-v-85be0237><span class="brackets" data-v-85be0237>}</span></div><br data-v-85be0237><div data-v-85be0237><span class="comment" data-v-85be0237>// for...of </span></div><div data-v-85be0237><span class="then" data-v-85be0237>for </span> <span class="brackets" data-v-85be0237>(</span><span class="function" data-v-85be0237>let </span> <span class="word" data-v-85be0237>n </span><span class="function" data-v-85be0237>of </span> <span class="word" data-v-85be0237>obj</span><span class="brackets" data-v-85be0237>){</span></div><div class="padTwo VSL" data-v-85be0237><div data-v-85be0237><span class="comment" data-v-85be0237>// 報錯 , 不能循環</span></div><div data-v-85be0237><span class="comment" data-v-85be0237>// 因為沒有 iterator 接口</span></div></div><div data-v-85be0237><span class="brackets" data-v-85be0237>}</span></div><br data-v-85be0237><div data-v-85be0237><span class="comment" data-v-85be0237>// 3. 循環數組物件</span></div><div data-v-85be0237><span class="function" data-v-85be0237>const </span><span class="word" data-v-85be0237>arrObj</span> <span class="then" data-v-85be0237>=</span><span class="brackets" data-v-85be0237>[{</span></div><div class="padTwo VSL" data-v-85be0237><span class="word" data-v-85be0237>name:</span> <span class="src" data-v-85be0237>&quot;wayne&quot;,</span><div data-v-85be0237></div></div><div class="padTwo VSL" data-v-85be0237><span class="word" data-v-85be0237>number:</span> <span class="number" data-v-85be0237>1</span><div data-v-85be0237></div></div><div data-v-85be0237><span class="brackets" data-v-85be0237>}, {</span></div><div class="padTwo VSL" data-v-85be0237><span class="word" data-v-85be0237>name:</span> <span class="src" data-v-85be0237>&quot;jack&quot;,</span><div data-v-85be0237></div></div><div class="padTwo VSL" data-v-85be0237><span class="word" data-v-85be0237>number:</span> <span class="number" data-v-85be0237>9</span><div data-v-85be0237></div></div><div data-v-85be0237><span class="brackets" data-v-85be0237>}]</span></div><br data-v-85be0237><div data-v-85be0237><span class="then" data-v-85be0237>for </span> <span class="brackets" data-v-85be0237>(</span><span class="function" data-v-85be0237>let </span> <span class="word" data-v-85be0237>nObj </span><span class="function" data-v-85be0237>of </span><span class="word" data-v-85be0237>arrObj</span> <span class="brackets" data-v-85be0237>){</span></div><div class="padTwo VSL" data-v-85be0237><span class="word" data-v-85be0237>console.</span><span class="variable" data-v-85be0237>log</span> <span class="brackets" data-v-85be0237>(</span><span class="word" data-v-85be0237>nObj</span> <span class="brackets" data-v-85be0237>)</span><span class="comment" data-v-85be0237>//{name:&quot;wayne&quot;,number:1},{name:&quot;jack&quot;,number:9}</span></div><div class="padTwo VSL" data-v-85be0237><span class="then" data-v-85be0237>for </span> <span class="brackets" data-v-85be0237>(</span><span class="function" data-v-85be0237>let </span> <span class="word" data-v-85be0237>n </span><span class="function" data-v-85be0237>in </span> <span class="word" data-v-85be0237>nObj</span><span class="brackets" data-v-85be0237>){</span><div data-v-85be0237><div class="padTwo VSL" data-v-85be0237><span class="word" data-v-85be0237>console.</span><span class="variable" data-v-85be0237>log</span><span class="brackets" data-v-85be0237>(</span><span class="word" data-v-85be0237>nObj</span><span class="brackets" data-v-85be0237>[</span> <span class="word" data-v-85be0237>n</span><span class="brackets" data-v-85be0237>]) </span><span class="comment" data-v-85be0237>// wayne // 1 // jack // 9</span><div data-v-85be0237></div></div><div data-v-85be0237><span class="brackets" data-v-85be0237>}</span></div></div></div><div data-v-85be0237><span class="brackets" data-v-85be0237>}</span></div><div data-v-85be0237><span class="comment" data-v-85be0237>// for in 循環 物件</span></div><div data-v-85be0237><span class="comment" data-v-85be0237>// for of 循環 數組</span></div></div><br data-v-85be0237><br data-v-85be0237><p class="cor36" data-v-85be0237># for循環遍歷跟forEach遍歷,for循環可以中斷嗎?</p><p data-v-85be0237>for 可以中斷 , forEach 不能中斷</p><br data-v-85be0237><br data-v-85be0237><div id="onejs008" class="articleCardTitle cor36" data-v-85be0237>[ JS ] ≫ 閉包?</div><p class="comment" data-v-85be0237>什麼是閉包 , 概念 , 用途 , 優 缺點</p><br data-v-85be0237><p data-v-85be0237>閉包 就是 有權訪問 另一個 函數作用域的變量 的函數</p><br data-v-85be0237><p data-v-85be0237>優點是 私有化數據 在 私有化數據的基礎上 保持數據</p><br data-v-85be0237><p data-v-85be0237>私有化數據是 把一些變量 私有化到函數裡面</p><br data-v-85be0237><p data-v-85be0237>為了保持數據</p><br data-v-85be0237><p data-v-85be0237> 例如 節流防抖 -&gt; 當第一次點擊時 , 我們 let time = 接收他的定時器 </p><br data-v-85be0237><p data-v-85be0237> 如果不用閉包暫存他 , 下次點擊 他是重新創建函數 , 也就重創一個定時器 </p><br data-v-85be0237><p data-v-85be0237>他們 2 個不是互通的 , 沒有引用做連通</p><br data-v-85be0237><p data-v-85be0237>也就是 使用閉包 他不會在 內存中消失</p><br data-v-85be0237><p data-v-85be0237>所以我們在下次 調用時 能獲取到 上一次定時器的 時間</p><br data-v-85be0237><br data-v-85be0237><p data-v-85be0237>缺點 可能導致內存洩漏</p><br data-v-85be0237><br data-v-85be0237><p data-v-85be0237># 閉包一定會造成內存洩漏嗎?</p><p data-v-85be0237>不一定 , 看瀏覽器垃圾回收機制</p><br data-v-85be0237><p data-v-85be0237> 閉包造成內存洩漏是瀏覽器問題, 它沒有及時的清裡內存, 所以是閉包容易造成內存洩漏, 因為實現閉包的拉圾回收比普通變量難一點, 歷史上發生的有IE6IE7, 但現在已經沒有了 </p><br data-v-85be0237><br data-v-85be0237><p data-v-85be0237>閉包的目的? 用來封裝一個數據,提供一些API給外部使用</p><br data-v-85be0237><p data-v-85be0237>物件的目的? 內部包含一些數據,提供一些方法給外部使用</p><br data-v-85be0237><p data-v-85be0237> 閉包和物件的區別?(閉包是在你不想用物件時來代替物件) 物件的拆卸數據可以透過屬性暴露出來, 閉包想要暴露那些數據你得單獨給他寫個函數 </p><br data-v-85be0237><br data-v-85be0237><div id="onejs009" class="articleCardTitle cor36" data-v-85be0237> [ JS ] ≫ JS 的立即執行函數是幹嘛用的?? </div><p data-v-85be0237>避免汙染全局環境</p><br data-v-85be0237><p class="cor36" data-v-85be0237># IIFE立即執行函數它的語法?</p><p data-v-85be0237>一個匿名函數, 外面包一層括號, 後面再加一個小括號</p><br data-v-85be0237><p class="cor36" data-v-85be0237># 為什麼要包一層括號,後面再加一個小括號?</p><p data-v-85be0237> 把函數看成一個整體, 首先你匿名函數可以以傳參的形式存在, 也可以以一些其他形式存在, 但是你不行就直接寫在一段JS的外部, 這樣他語法就通過不了, 因為它不是一個整體, 你function後面直接跟一個括號, 他不知道是甚麼東西 </p><br data-v-85be0237><div id="onejs010" class="articleCardTitle cor36" data-v-85be0237> [ JS ] ≫ this 指向 </div><p data-v-85be0237>1. 全局對象 的 this 指向</p><p data-v-85be0237>指向 window</p><br data-v-85be0237><br data-v-85be0237><p data-v-85be0237>2. 全局作用域 or 普通函數中的 this</p><p data-v-85be0237>指向 window</p><br data-v-85be0237><br data-v-85be0237><p data-v-85be0237>3. this 指向最後調用他的那個對象</p><p data-v-85be0237>在不是 箭頭函數 情況下</p><br data-v-85be0237><br data-v-85be0237><p data-v-85be0237>4. new 關鍵字改變 this 指向</p><p data-v-85be0237></p><br data-v-85be0237><br data-v-85be0237><p data-v-85be0237></p><p data-v-85be0237></p><br data-v-85be0237><br data-v-85be0237><p data-v-85be0237></p><p data-v-85be0237></p><br data-v-85be0237><br data-v-85be0237><p data-v-85be0237></p><p data-v-85be0237></p><br data-v-85be0237><br data-v-85be0237><p data-v-85be0237></p><p data-v-85be0237></p><br data-v-85be0237><br data-v-85be0237><p data-v-85be0237></p><p data-v-85be0237></p><table data-v-85be0237><tr data-v-85be0237><th data-v-85be0237><div class="pad20" data-v-85be0237>調用方式</div></th><th data-v-85be0237><div class="pad20" data-v-85be0237>示例</div></th><th data-v-85be0237><div class="pad20" data-v-85be0237>函數中this指向</div></th></tr><tr data-v-85be0237><td data-v-85be0237><div class="pad20" data-v-85be0237>通過new調用</div></td><td data-v-85be0237><div class="pad20" data-v-85be0237>mew method()</div></td><td data-v-85be0237><div class="pad20" data-v-85be0237>新物件</div></td></tr><tr data-v-85be0237><td data-v-85be0237><div class="pad20" data-v-85be0237>直接調用</div></td><td data-v-85be0237><div class="pad20" data-v-85be0237>method()</div></td><td data-v-85be0237><div class="pad20" data-v-85be0237>全局對象window</div></td></tr><tr data-v-85be0237><td data-v-85be0237><div class="pad20" data-v-85be0237>通過物件調用</div></td><td data-v-85be0237><div class="pad20" data-v-85be0237>obj.method()</div></td><td data-v-85be0237><div class="pad20" data-v-85be0237>前面的物件</div></td></tr><tr data-v-85be0237><td data-v-85be0237><div class="pad20" data-v-85be0237>call.apply.bind</div></td><td data-v-85be0237><div class="pad20" data-v-85be0237>method.call(ctx)</div></td><td data-v-85be0237><div class="pad20" data-v-85be0237>第一個參數</div></td></tr></table><div id="onejs011" class="articleCardTitle cor36" data-v-85be0237> [ JS ] ≫ 箭頭函數和普通function有甚麼區別? </div><p data-v-85be0237>在執行過程中不會初始化 this</p><br data-v-85be0237><p data-v-85be0237>不會初始化 aruguments</p><br data-v-85be0237><p data-v-85be0237>不能被 new</p><br data-v-85be0237><p data-v-85be0237>沒有 prototype</p><br data-v-85be0237><p data-v-85be0237>不能當成構造函數執行</p><br data-v-85be0237><p class="cor36" data-v-85be0237># 箭頭函數什麼情況可以省略return?</p><p data-v-85be0237>不加括弧號的時候, 只有一個語句(一句代碼,可以有多個分號)</p><br data-v-85be0237><p class="cor36" data-v-85be0237># 箭頭函數的this指向哪裡?</p><p data-v-85be0237>外部的this or (捕獲其上下文中的this)</p><br data-v-85be0237><p data-v-85be0237>箭頭函數不創建 this , 他從自己的作用域鏈的上一層沿用 this</p><div id="onejs012" class="articleCardTitle cor36" data-v-85be0237> [ JS ] ≫ 原型鏈是什麼? </div><p class="cor36" data-v-85be0237>物件,原型,物件的構造函數間的關係?</p><br data-v-85be0237><p data-v-85be0237>首先任何物件都會有屬於它的隱藏屬性下滑線proto屬性__proto__</p><br data-v-85be0237><p data-v-85be0237>這個隱藏屬性就會指向它的構造函數的prototype</p><br data-v-85be0237><p data-v-85be0237>這時我們就可以說這個物件的原型就是它的構造函數的prototype</p><br data-v-85be0237><p data-v-85be0237>這就是原型</p><br data-v-85be0237><p data-v-85be0237> 然後原型鏈就是比如A的原型是B, B的原型是C, 這樣一條像鏈式的就稱為原型鏈 </p><br data-v-85be0237><br data-v-85be0237><p data-v-85be0237> : 定義一個物件A,它的原型的地址對應著object.prototype,object.prototype它的原型又會到了null 這樣一條像鏈式的就稱為原型鏈 </p><br data-v-85be0237><br data-v-85be0237><p data-v-85be0237>A指向一個物件,意味著A存的是什麼東西?(注意JS沒有指向) A它的地址</p><br data-v-85be0237><br data-v-85be0237><div id="onejs013" class="articleCardTitle cor36" data-v-85be0237> [ JS ] ≫ new 做了什麼? </div><br data-v-85be0237><p data-v-85be0237>new後面跟一個構造函數</p><br data-v-85be0237><p data-v-85be0237>先創造一個臨時物件</p><br data-v-85be0237><p data-v-85be0237>將這個 臨時物件 原型 綁定構造函數的 prototype</p><br data-v-85be0237><p data-v-85be0237>再把裡面的 this 指定為這個 臨時物件</p><br data-v-85be0237><p data-v-85be0237>再執行構造函數</p><br data-v-85be0237><p data-v-85be0237>最後return這個臨時物件</p><br data-v-85be0237><p class="cor36" data-v-85be0237># 當我 new 構造函數</p><p data-v-85be0237>1. 創建 新物件 (空的)</p><p data-v-85be0237>2. 構造函數的 this 指向 新物件</p><p data-v-85be0237>3. 執行 構造函數 代碼</p><p class="pFou" data-v-85be0237>this. 指向物件 . . . obj.name=&quot;wayne&quot;</p><p class="pFou" data-v-85be0237>name屬性 =賦值 &quot;wayne&quot;</p><p data-v-85be0237>4. 返回 這個 新物件</p><br data-v-85be0237><br data-v-85be0237><p class="cor36" data-v-85be0237> # 如果我再new後面構造函數後面最後一行加一個return一個數組會怎樣? </p><p data-v-85be0237>它就會代替這個 this</p><br data-v-85be0237><p class="cor36" data-v-85be0237> # 如果我再new後面構造函數後面最後一行加一個return一個物件會怎樣? </p><p data-v-85be0237>它就會代替這個 this</p><br data-v-85be0237><p class="cor36" data-v-85be0237># 原型綁定是綁到這個this的哪個屬性上面?</p><p data-v-85be0237>__proto__</p><br data-v-85be0237><p data-v-85be0237>new後面跟一個構造函數,這個函數可以是箭頭函數嗎? _ 不可以</p><br data-v-85be0237><p class="cor36" data-v-85be0237># 你new出來的對象原型是什麼?</p><p data-v-85be0237>new 出來的 物件的 原型 指向 構造函數的 原型</p><br data-v-85be0237><br data-v-85be0237><div id="onejs014" class="articleCardTitle cor36" data-v-85be0237>[ JS ] ≫ 繼承?</div><p class="cor36" data-v-85be0237>1. 原型鏈繼承</p><p data-v-85be0237>每個 構造函數 都有一個 原型對象 (prototype),</p><br data-v-85be0237><p data-v-85be0237>每個 實例對象 包含一個 指向 原型對象的 指針 (__proto__)</p><br data-v-85be0237><p data-v-85be0237>當代碼 讀取實例的 某屬性時 ,</p><br data-v-85be0237><p data-v-85be0237>都會先在 實例上 搜尋這個屬性, 沒找到 則搜索原型對象</p><br data-v-85be0237><p class="cor36" data-v-85be0237>缺點</p><p data-v-85be0237> 包含引用類型值的 原型屬性 會被所有實例共享。 ( 當一個實例改變該屬性 , 其他也會改 ) </p><br data-v-85be0237><p class="cor36" data-v-85be0237>2. 構造函數繼承</p><p data-v-85be0237>通過使用 call apply 方法 ,</p><br data-v-85be0237><p data-v-85be0237>可以在子類中 執行父類 構造函數 , 從而實現繼承</p><br data-v-85be0237><p class="cor36" data-v-85be0237>優點</p><p data-v-85be0237>原型屬性 不會 被共享</p><p class="cor36" data-v-85be0237>缺點</p><p data-v-85be0237>不能繼承 父類 prototype 上的屬性</p><br data-v-85be0237><p class="cor36" data-v-85be0237>3. 構造函數繼承 + 構造函數繼承</p><p data-v-85be0237>child.prototype = new Parent()</p><p class="cor36" data-v-85be0237>優點</p><p data-v-85be0237>1. 原型屬性不會被共享</p><p data-v-85be0237>2. 可以繼承父類的 原型鏈上的 屬性和方法</p><br data-v-85be0237><p class="cor36" data-v-85be0237>點</p><p data-v-85be0237>調用了 2 次 Parent()</p><p data-v-85be0237>他在 child 的 prototype 上添加了父類的 屬性和方法</p><br data-v-85be0237><br data-v-85be0237><div id="onejs015" class="articleCardTitle cor36" data-v-85be0237> [ JS ] ≫ call apply bind </div><p class="cor36" data-v-85be0237>call和apply有什麼區別?</p><p data-v-85be0237>call指定一個this, 傳參數, 直接調用他,</p><br data-v-85be0237><p data-v-85be0237>apply指定this, 傳的參數是放在陣列裡面的, 也是直接調用</p><br data-v-85be0237><br data-v-85be0237><p class="cor36" data-v-85be0237>什麼情況下只能用apply不能用call?</p><p data-v-85be0237>你要傳的數據是陣列的話用apply, 你傳的參數很多也用apply</p><br data-v-85be0237><br data-v-85be0237><p class="cor36" data-v-85be0237># 現在ES6,我能不能強行用call? _ 可以</p><p data-v-85be0237> sumNumbers.call(null, ...numbers); 直接函數.call,null三個點把那個陣列展開 </p><br data-v-85be0237><br data-v-85be0237><p class="cor36" data-v-85be0237># call和bind有什麼區別?</p><p data-v-85be0237> bind只綁定this,但它不去立即調用它,而是返回一個綁定這個this的新函數 </p><br data-v-85be0237><br data-v-85be0237><div id="onejs016" class="articleCardTitle cor36" data-v-85be0237> [ JS ] ≫ 防抖是什麼? </div><p data-v-85be0237> 防斗比如一個input標籤, 然後input標籤要實現一個功能, 再用戶輸入的時候彈出相應的提示, </p><br data-v-85be0237><br data-v-85be0237><p data-v-85be0237>所以監聽它的input事件, 但是input事件是在用戶每次輸入的時候觸發,</p><br data-v-85be0237><br data-v-85be0237><p data-v-85be0237>所以需要設置一個函數的防斗來實現一個功能,</p><br data-v-85be0237><br data-v-85be0237><p data-v-85be0237>就是當用戶輸入之後停頓某個時間沒有再次輸入才會執行這個函數,</p><br data-v-85be0237><br data-v-85be0237><p data-v-85be0237>否則不執行, 重新計時</p><br data-v-85be0237><br data-v-85be0237><div class="bgcVS" data-v-85be0237><div data-v-85be0237><span class="then" data-v-85be0237>＜</span> <span class="number" data-v-85be0237>input </span><span class="word" data-v-85be0237>type</span> <span class="then" data-v-85be0237>=</span><span class="src" data-v-85be0237>&quot;text&quot;</span> <span class="then" data-v-85be0237>&gt;</span></div><div data-v-85be0237><span class="function" data-v-85be0237>let </span><span class="word" data-v-85be0237>oInput</span> <span class="then" data-v-85be0237>=</span><span class="word" data-v-85be0237>document</span><span class="variable" data-v-85be0237>.querySelector</span><span class="brackets" data-v-85be0237>(</span> <span class="src" data-v-85be0237>&quot;input&quot;</span><span class="brackets" data-v-85be0237>)</span></div><div data-v-85be0237><span class="function" data-v-85be0237>let </span> <span class="word" data-v-85be0237>time</span><span class="then" data-v-85be0237>=</span> <span class="then" data-v-85be0237>null</span></div><div data-v-85be0237><span class="word" data-v-85be0237>oInput</span><span class="variable" data-v-85be0237>.oninput</span><span class="then" data-v-85be0237>=</span><span class="word" data-v-85be0237>debounce</span><span class="brackets" data-v-85be0237>(</span><span class="variable" data-v-85be0237>function</span><span class="brackets" data-v-85be0237>(){</span></div><div class="padTwo VSL" data-v-85be0237><span class="word" data-v-85be0237>console</span><span class="variable" data-v-85be0237>.log</span><span class="brackets" data-v-85be0237>(</span><span class="then" data-v-85be0237>this</span><span class="brackets" data-v-85be0237>) </span><div data-v-85be0237></div></div><div data-v-85be0237><span class="brackets" data-v-85be0237>},</span><span class="number" data-v-85be0237>1000</span><span class="brackets" data-v-85be0237>)</span></div><div data-v-85be0237><span class="function" data-v-85be0237>function </span><span class="word" data-v-85be0237>debounce</span><span class="brackets" data-v-85be0237>(</span><span class="word" data-v-85be0237>fn,delay</span><span class="brackets" data-v-85be0237>){</span></div><div class="padTwo VSL" data-v-85be0237><div data-v-85be0237><span class="comment" data-v-85be0237>//console.log(this)</span></div><span class="function" data-v-85be0237>let </span><span class="word" data-v-85be0237>time</span> <span class="then" data-v-85be0237>=</span><span class="then" data-v-85be0237>null</span><div data-v-85be0237></div><span class="then" data-v-85be0237>return </span><span class="function" data-v-85be0237>function </span><span class="brackets" data-v-85be0237>(){</span><div data-v-85be0237></div><div class="padTwo VSL" data-v-85be0237><span class="then" data-v-85be0237>if</span><span class="brackets" data-v-85be0237>(</span><span class="word" data-v-85be0237>time</span><span class="then" data-v-85be0237>!==null</span><span class="brackets" data-v-85be0237>){</span><div data-v-85be0237></div><div class="padTwo VSL" data-v-85be0237><span class="word" data-v-85be0237>clearTimeout</span><span class="brackets" data-v-85be0237>(</span><span class="word" data-v-85be0237>t</span><span class="brackets" data-v-85be0237>)</span><div data-v-85be0237></div></div><div data-v-85be0237><span class="brackets" data-v-85be0237>}</span></div><div data-v-85be0237><span class="word" data-v-85be0237>time</span><span class="then" data-v-85be0237>=</span><span class="variable" data-v-85be0237>setTimeout</span><span class="brackets" data-v-85be0237>(()</span><span class="function" data-v-85be0237>=&gt; </span><span class="brackets" data-v-85be0237>{</span><div class="padTwo VSL" data-v-85be0237><span class="variable" data-v-85be0237>fn</span><span class="number" data-v-85be0237>.call</span><span class="brackets" data-v-85be0237>(</span><span class="then" data-v-85be0237>this</span><span class="brackets" data-v-85be0237>)</span><span class="brackets" data-v-85be0237>()</span></div><div data-v-85be0237><span class="brackets" data-v-85be0237>},</span><span class="number" data-v-85be0237>delay</span><span class="brackets" data-v-85be0237>)</span></div></div></div><div data-v-85be0237><span class="brackets" data-v-85be0237>}</span></div></div><div data-v-85be0237><span class="brackets" data-v-85be0237>}</span></div></div><p class="cor36" data-v-85be0237>節流是什麼?</p><p data-v-85be0237> 節流類似一個技能的冷卻, 就是當你進行一個操作後, 要等一段時間才能再次進行這個操作, </p><div class="bgcVS" data-v-85be0237><div data-v-85be0237><span class="word" data-v-85be0237>window</span><span class="variable" data-v-85be0237>.onscroll</span><span class="then" data-v-85be0237>=</span> <span class="word" data-v-85be0237>throttle</span><span class="brackets" data-v-85be0237>(</span><span class="function" data-v-85be0237>function </span><span class="brackets" data-v-85be0237>(){</span></div><div class="padTwo VSL" data-v-85be0237><span class="variable" data-v-85be0237>alert</span><span class="brackets" data-v-85be0237>(</span> <span class="src" data-v-85be0237>&quot;廣告&quot;</span><span class="brackets" data-v-85be0237>)</span><div data-v-85be0237></div></div><div data-v-85be0237><span class="brackets" data-v-85be0237>},</span> <span class="number" data-v-85be0237>2000</span><span class="brackets" data-v-85be0237>)</span></div><div data-v-85be0237><span class="function" data-v-85be0237>function </span><span class="word" data-v-85be0237>throttle</span><span class="brackets" data-v-85be0237>(</span><span class="word" data-v-85be0237>fn,delay</span><span class="brackets" data-v-85be0237>){</span></div><div class="padTwo VSL" data-v-85be0237><span class="function" data-v-85be0237>let </span> <span class="word" data-v-85be0237>time</span><span class="then" data-v-85be0237>=</span> <span class="number" data-v-85be0237>true</span><div data-v-85be0237></div><span class="then" data-v-85be0237>return </span><span class="function" data-v-85be0237>function </span><span class="brackets" data-v-85be0237>(){</span><div data-v-85be0237></div><div class="padTwo VSL" data-v-85be0237><span class="then" data-v-85be0237>if</span> <span class="brackets" data-v-85be0237>(</span><span class="word" data-v-85be0237>time</span> <span class="brackets" data-v-85be0237>){</span><div data-v-85be0237></div><div class="padTwo VSL" data-v-85be0237><span class="variable" data-v-85be0237>setTimeout</span><span class="brackets" data-v-85be0237>(()</span><span class="function" data-v-85be0237>=&gt;</span><span class="brackets" data-v-85be0237>{</span><div data-v-85be0237></div><div class="padTwo VSL" data-v-85be0237><span class="word" data-v-85be0237>fn</span><span class="variable" data-v-85be0237>.call</span><span class="brackets" data-v-85be0237>(</span><span class="then" data-v-85be0237>this</span><span class="brackets" data-v-85be0237>) </span><span class="comment" data-v-85be0237>// 綁在 window 有沒有 call 都可以</span><div data-v-85be0237><span class="word" data-v-85be0237>time</span><span class="then" data-v-85be0237>=</span><span class="number" data-v-85be0237>true</span></div><div data-v-85be0237></div></div><div data-v-85be0237><span class="brackets" data-v-85be0237>},</span><span class="word" data-v-85be0237>delay</span><span class="brackets" data-v-85be0237>)</span></div></div><div data-v-85be0237><span class="brackets" data-v-85be0237>}</span></div><div data-v-85be0237><span class="word" data-v-85be0237>time</span> <span class="then" data-v-85be0237>=</span><span class="number" data-v-85be0237>false</span></div></div><div data-v-85be0237><span class="brackets" data-v-85be0237>}</span></div></div><div data-v-85be0237><span class="brackets" data-v-85be0237>}</span></div></div><br data-v-85be0237><br data-v-85be0237><p class="cor36" data-v-85be0237>proxy做什麼的?</p><p data-v-85be0237> 用於接管物件內部屬性的讀取或函數的調用方法, 它跟object.definedproperty是一樣的功能, 但是object.definedproperty一次只能處理一個屬性 </p><br data-v-85be0237><br data-v-85be0237><div id="onejs017" class="articleCardTitle cor36" data-v-85be0237> [ JS ] ≫ 什麼是DOM? </div><p data-v-85be0237>DOM是文檔物件模型</p><br data-v-85be0237><p data-v-85be0237>用途是把網頁變成JS中的對象來進行增刪改查操作</p><br data-v-85be0237><p data-v-85be0237>平時要操作DOM可以通過document.getElementByID</p><br data-v-85be0237><p data-v-85be0237>然後去對他的各種屬性進行修改,</p><br data-v-85be0237><p class="cor36" data-v-85be0237>什麼是事件捕獲?什麼是事件冒泡?</p><p data-v-85be0237> 事件捕獲是從最外層然後向觸發事件子層去一層一層往下傳遞事件, 冒泡是從子層向外層一層一層冒泡這個事件 </p><br data-v-85be0237><br data-v-85be0237><p class="cor36" data-v-85be0237>那一次點擊會同時觸發捕獲和冒泡嗎?</p><p data-v-85be0237>會,不管什麼事件一定會先捕獲在冒泡</p><br data-v-85be0237><p data-v-85be0237>先從document一層一層的到那個元素</p><br data-v-85be0237><p data-v-85be0237>然後再從那個元素一層一層到 document</p><br data-v-85be0237><p data-v-85be0237>你監聽捕獲只不過是在其中插入一個函數而已</p><br data-v-85be0237><p data-v-85be0237>監聽捕獲是在捕獲那邊插入函數</p><br data-v-85be0237><p data-v-85be0237>監聽冒泡是在冒泡那邊插入一個函數</p><br data-v-85be0237><p data-v-85be0237> 如果你兩個都監聽還是先經過捕獲階段觸發你的函數, 經過冒泡階段在觸發函數 </p><br data-v-85be0237><br data-v-85be0237><p class="cor36" data-v-85be0237># BOM</p><br data-v-85be0237><p data-v-85be0237>BOM是瀏覽器對象模型, 用途是用JS來操作瀏覽器來前進後退和地址欄</p><br data-v-85be0237><br data-v-85be0237><p class="cor36" data-v-85be0237># DOM的事件模型是什麼?</p><p data-v-85be0237>觸發事件時, 先從上往下進行事件捕獲階段</p><br data-v-85be0237><p data-v-85be0237>從觸發結點最上面 document 往下到觸發節點</p><br data-v-85be0237><p data-v-85be0237>然後監聽事件有沒有發生</p><br data-v-85be0237><p data-v-85be0237>要有同類型事件發生的話就執行函數</p><br data-v-85be0237><p data-v-85be0237>之後再從這個節點往上進行事件冒泡</p><br data-v-85be0237><p class="cor36" data-v-85be0237># 不想某一個元素往上冒泡可以用什麼API?</p><br data-v-85be0237><p data-v-85be0237>e.stopPropergation</p><br data-v-85be0237><br data-v-85be0237><p class="cor36" data-v-85be0237> 假設我點擊一個按鈕得到事件e,我把事件e綁定到變數上面,過一秒後打印這個變數,請問打印出什麼? </p><p data-v-85be0237> 空 , 因為 setTimeout 他是一個 異步事件, 他等同步執行完再執行, 這時他那個變量 e 不存在了 </p><br data-v-85be0237><br data-v-85be0237><p class="cor36" data-v-85be0237>事件委託是什麼?</p><p data-v-85be0237>假設有父子元素, 監聽子元素事件</p><br data-v-85be0237><p data-v-85be0237>假設ul裡面有很多li, 然後要求點擊li觸發一個事件</p><br data-v-85be0237><p data-v-85be0237>假如在每個li都綁定事件 會增大代碼量和內存</p><br data-v-85be0237><p data-v-85be0237> 可以根據事件冒泡在list item上面觸發的事件會向上冒泡到父元素 ul 上面 </p><br data-v-85be0237><p data-v-85be0237>所以可以在 ul 上面監聽</p><br data-v-85be0237><p class="cor36" data-v-85be0237>事件委託優點?</p><p data-v-85be0237>可以減少代碼量, 減少內存, 動態綁定</p><br data-v-85be0237><p class="cor36" data-v-85be0237>事件委託缺點?</p><p data-v-85be0237> 用了之後在開發者工具看他的事件綁定會發現沒有, 會不知道誰在監聽這個元素 </p><br data-v-85be0237><br data-v-85be0237><div id="onejs018" class="articleCardTitle cor36" data-v-85be0237> [ JS ] ≫ 深淺拷貝? </div><p data-v-85be0237>深淺拷貝區別</p><p data-v-85be0237>淺拷貝 只會複製 最外面 那一層屬性</p><br data-v-85be0237><p data-v-85be0237>簡單物件還可以 , 裡面又有物件時 ...&gt; 多層次嵌套 時 有問題</p><br data-v-85be0237><p class="cor36" data-v-85be0237># 淺拷貝</p><p data-v-85be0237>1 ...展開運算符</p><p data-v-85be0237>const o = { ...obj }</p><p data-v-85be0237>console.log ( o )</p><br data-v-85be0237><p data-v-85be0237>2.</p><p data-v-85be0237>const o= {}</p><p data-v-85be0237> Object.assign( o,obj) <span class="comment" data-v-85be0237> // (要拷貝的,被拷貝的)// (右 賦值 給 左) </span></p><p data-v-85be0237>console.log ( o )</p><br data-v-85be0237><p class="cor36" data-v-85be0237># 深拷貝</p><p data-v-85be0237>深拷貝會複製物件的所有屬性和嵌套物件</p><br data-v-85be0237><p class="cor36" data-v-85be0237># 3方法</p><p data-v-85be0237>JSON.stringify()</p><br data-v-85be0237><p class="pFou" data-v-85be0237>const o = JSON.parse ( JSON.stringify ( obj ) )</p><br data-v-85be0237><p data-v-85be0237>lodash</p><br data-v-85be0237><p class="pFou" data-v-85be0237>const o = _.cloneDeep( obj )</p><br data-v-85be0237><div class="bgcVS" data-v-85be0237><p data-v-85be0237>遞歸</p><div data-v-85be0237><span class="function" data-v-85be0237>function </span><span class="variable" data-v-85be0237>deepCopy</span><span class="brackets" data-v-85be0237>( </span><span class="word" data-v-85be0237>newObj, oldObj </span><span class="brackets" data-v-85be0237>){</span></div><div class="padTwo VSL" data-v-85be0237><span class="comment" data-v-85be0237>//把舊的值取出來給新的值</span><div data-v-85be0237></div><span class="comment" data-v-85be0237>//先遍歷舊的 , 注意 k 是誰</span></div><div class="padTwo VSL" data-v-85be0237><span class="then" data-v-85be0237>for </span> <span class="brackets" data-v-85be0237>(</span><span class="function" data-v-85be0237>let </span> <span class="word" data-v-85be0237>k </span><span class="function" data-v-85be0237>in </span><span class="word" data-v-85be0237>oldObj </span><span class="brackets" data-v-85be0237>){</span><div class="padTwo VSL" data-v-85be0237><div data-v-85be0237><span class="comment" data-v-85be0237>// 處理數組問題</span></div><div data-v-85be0237><span class="comment" data-v-85be0237>// 通過值來判斷</span></div><div data-v-85be0237><span class="then" data-v-85be0237>if</span><span class="brackets" data-v-85be0237>(</span><span class="word" data-v-85be0237>oldObj</span><span class="brackets" data-v-85be0237>[</span> <span class="word" data-v-85be0237>k </span><span class="brackets" data-v-85be0237>] </span><span class="word" data-v-85be0237>intanceof </span><span class="brackets" data-v-85be0237>Array</span><span class="brackets" data-v-85be0237>) { </span><span class="comment" data-v-85be0237>// oldObj [ k ] 屬性值</span></div><div class="padTwo VSL" data-v-85be0237><div data-v-85be0237><span class="comment" data-v-85be0237>// 我要把hobby數組再次遍歷</span></div><div data-v-85be0237><span class="comment" data-v-85be0237>// 我要把跑步拿出來放到新物件hobby第1個參數</span></div><div data-v-85be0237><span class="comment" data-v-85be0237>// 我要把足球拿出來放到新物件hobby第2個參數</span></div><div data-v-85be0237><span class="word" data-v-85be0237>newObj</span><span class="brackets" data-v-85be0237>[ </span><span class="word" data-v-85be0237>k </span><span class="brackets" data-v-85be0237>]</span><span class="then" data-v-85be0237>=</span><span class="brackets" data-v-85be0237>[ ]</span><div data-v-85be0237></div><div data-v-85be0237><span class="comment" data-v-85be0237>// newObj[k] 是 hobby</span></div><div data-v-85be0237><span class="comment" data-v-85be0237> // 新物件的 hobby 先給他一個空數組</span></div><div data-v-85be0237><span class="comment" data-v-85be0237>// 然後我在遍歷舊數組把他放進去</span></div><div data-v-85be0237><span class="comment" data-v-85be0237>// deepCopy(newObj[k],[&quot;跑步&quot;,&quot;足球&quot;])</span></div><div data-v-85be0237><span class="variable" data-v-85be0237>deepCopy</span><span class="brackets" data-v-85be0237>(</span><span class="word" data-v-85be0237>newObj</span><span class="brackets" data-v-85be0237>[</span><span class="word" data-v-85be0237>k</span><span class="brackets" data-v-85be0237>],</span><span class="word" data-v-85be0237>oldObj</span><span class="brackets" data-v-85be0237>[</span><span class="word" data-v-85be0237>k</span><span class="brackets" data-v-85be0237>])</span></div><div data-v-85be0237><span class="comment" data-v-85be0237>//調用自己遍歷數組時</span></div><div data-v-85be0237><span class="comment" data-v-85be0237>// K 變成數組的索引號了</span></div></div></div></div><div class="padTwo VSL" data-v-85be0237><div data-v-85be0237><span class="brackets" data-v-85be0237>} </span><span class="then" data-v-85be0237>else if</span><span class="brackets" data-v-85be0237>(</span><span class="word" data-v-85be0237>oldObj</span><span class="brackets" data-v-85be0237>[</span> <span class="word" data-v-85be0237>k </span><span class="brackets" data-v-85be0237>] </span><span class="word" data-v-85be0237>intanceof </span><span class="brackets" data-v-85be0237>Object</span><span class="brackets" data-v-85be0237>) { </span><span class="comment" data-v-85be0237>// oldObj [ k ] 屬性值</span></div><div class="padTwo VSL" data-v-85be0237><div data-v-85be0237><span class="word" data-v-85be0237>newObj</span><span class="brackets" data-v-85be0237>[ </span><span class="word" data-v-85be0237>k </span><span class="brackets" data-v-85be0237>]</span><span class="then" data-v-85be0237>=</span><span class="brackets" data-v-85be0237>{ }</span><div data-v-85be0237><span class="variable" data-v-85be0237>deepCopy</span><span class="brackets" data-v-85be0237>(</span><span class="word" data-v-85be0237>newObj</span><span class="brackets" data-v-85be0237>[</span><span class="word" data-v-85be0237>k</span><span class="brackets" data-v-85be0237>],</span><span class="word" data-v-85be0237>oldObj</span><span class="brackets" data-v-85be0237>[</span><span class="word" data-v-85be0237>k</span><span class="brackets" data-v-85be0237>])</span></div></div></div></div><div class="padTwo VSL" data-v-85be0237><span class="brackets" data-v-85be0237>}</span><span class="then" data-v-85be0237>else </span><span class="brackets" data-v-85be0237>{</span><div data-v-85be0237><div data-v-85be0237><div class="padTwo VSL" data-v-85be0237><span class="comment" data-v-85be0237>// k 屬性名 oldObj[ k ] 屬性值</span></div><div class="padTwo VSL" data-v-85be0237><span class="comment" data-v-85be0237>// newObj[ k ] === o.uname</span><div data-v-85be0237></div></div><div class="padTwo VSL" data-v-85be0237><div data-v-85be0237><span class="word" data-v-85be0237>newObj</span><span class="brackets" data-v-85be0237>[ </span><span class="word" data-v-85be0237>k </span><span class="brackets" data-v-85be0237>]</span><span class="then" data-v-85be0237>= </span><span class="word" data-v-85be0237>oldObj</span><span class="brackets" data-v-85be0237>[ </span><span class="word" data-v-85be0237>k </span><span class="brackets" data-v-85be0237>]</span></div></div><div data-v-85be0237><span class="brackets" data-v-85be0237>}</span></div></div></div></div><div data-v-85be0237><span class="brackets" data-v-85be0237>}</span></div></div><div data-v-85be0237><span class="brackets" data-v-85be0237>}</span></div><br data-v-85be0237><p data-v-85be0237># 一定要 先數組 再物件</p><p data-v-85be0237>因為 數組 屬於物件 他就把 數組當物件</p></div><p class="cor36" data-v-85be0237> 遞歸怎麼分類呢?你怎麼知道他是基本類型?你怎麼知道它不是一個物件? </p><p data-v-85be0237>用typeof</p><br data-v-85be0237><br data-v-85be0237><p class="cor36" data-v-85be0237>typeof返回什麼值,你認為它不是物件或者是物件呢?</p><p data-v-85be0237>判定 typeof 是 object 就說明他肯定不是基本類型</p><br data-v-85be0237><br data-v-85be0237><p class="cor36" data-v-85be0237>如果它不是object有幾種情況?</p><p data-v-85be0237>string number 布林 null function(返回function)</p><br data-v-85be0237><br data-v-85be0237><p class="cor36" data-v-85be0237>假設你知道哪些是物件,那些不是物件,接下來怎麼區分?</p><p data-v-85be0237>在物件裡面區分看他是不是函數,再看它是普通函數還是箭頭函數</p><br data-v-85be0237><br data-v-85be0237><p class="cor36" data-v-85be0237>普通函數還是箭頭函數怎麼看?</p><p data-v-85be0237>看他有沒有prototype,箭頭函數沒有prototype</p><br data-v-85be0237><br data-v-85be0237><p class="cor36" data-v-85be0237> 你知道他們區別後接下來做什麼?如果它是普通函數要怎麼複製它? </p><p data-v-85be0237>所有參數傳給那個函數,然後返回它的返回值</p><br data-v-85be0237><p data-v-85be0237>: 直接用function然後return一個a.call然後地址,然後把參數弄下來</p><br data-v-85be0237><p class="cor36" data-v-85be0237>如果是箭頭函數要怎麼複製它?</p><p data-v-85be0237>普通函數創建function 箭頭函數創建箭頭函數</p><br data-v-85be0237><br data-v-85be0237><p class="cor36" data-v-85be0237>.函數判斷完再來判斷什麼?</p><p data-v-85be0237>看他是不是陣列</p><br data-v-85be0237><br data-v-85be0237><p class="cor36" data-v-85be0237>陣列判斷完再來判斷什麼?</p><p data-v-85be0237>看他是不是Date</p><br data-v-85be0237><p data-v-85be0237>再來判斷什麼? 正則</p><br data-v-85be0237><br data-v-85be0237><p class="cor36" data-v-85be0237>要著重檢測的類型有哪些?</p><p data-v-85be0237>物件 日期 函數 字串 正則表達式</p><br data-v-85be0237><br data-v-85be0237><p class="cor36" data-v-85be0237>先檢查她是對象還是陣列呢?</p><p data-v-85be0237>先檢查陣列</p><br data-v-85be0237><br data-v-85be0237><p class="cor36" data-v-85be0237>對JSON的理解?</p><p data-v-85be0237>是一門表示通用數據結構的語言</p><br data-v-85be0237><p data-v-85be0237>用來代替XML用來做數據交換</p><br data-v-85be0237><p data-v-85be0237>JSON可以表示物件 數組 不林 string number</p><br data-v-85be0237><p data-v-85be0237>一般在 AJAX 得到的請求就是 JSON</p><br data-v-85be0237><br data-v-85be0237><p id="onejs019" class="cor36" data-v-85be0237>什麼是 RESTful API</p><p data-v-85be0237>RESTful API (表示性狀態轉移接口) 是一種設計風格</p><br data-v-85be0237><p data-v-85be0237>API 設計規範</p><br data-v-85be0237><p data-v-85be0237>1. 將一切數據視作資源</p><br data-v-85be0237><p data-v-85be0237>2. 利用 HTTP 請求方式 , 描述對資源的操作 ( 增 刪 改 查 )</p><br data-v-85be0237><p data-v-85be0237>3. 通過 HTTP 響應狀態碼 , 描述對資源的 操作結果</p><br data-v-85be0237><p data-v-85be0237>就是通過 URL 就知道要什麼資源 ,</p><br data-v-85be0237><p data-v-85be0237>通過 HTTP method 就知道要做什麼,</p><br data-v-85be0237><p data-v-85be0237>通過 HTTP status code 就知道結果如何</p><br data-v-85be0237><p data-v-85be0237>比如</p><br data-v-85be0237><p data-v-85be0237>GET 代表獲取一個資源</p><br data-v-85be0237><p data-v-85be0237>POST 代表添加一個資源</p><br data-v-85be0237><p data-v-85be0237>PUT 代表修改一個資源</p><br data-v-85be0237><p data-v-85be0237>DELETE 代表刪除一個資源</p><br data-v-85be0237><p data-v-85be0237> 用 HTTP Status Code 傳遞 server 的狀態訊息 ,ex 200 表示成功 , 500 表示 server 內部錯誤 </p><br data-v-85be0237><p class="cor36" data-v-85be0237>用 Rest 的優勢?</p><p data-v-85be0237>1. 風格統一 , 不會出現各種命名的代碼</p><br data-v-85be0237><p data-v-85be0237>2. 面相資源 , 一目了然 , 有自解釋性</p><br data-v-85be0237><p data-v-85be0237>3. 充分利用 HTTP 協議本身語意</p><br data-v-85be0237><br data-v-85be0237><p class="cor36" data-v-85be0237>併發和併行?</p><p data-v-85be0237> 併發是宏觀概念,表示並行發生, 並行是微觀概念, 表示cpu有多個核心同時執行兩個任務 </p><br data-v-85be0237><p data-v-85be0237>並行是微觀概念, 表示cpu有多個核心同時執行兩個任務</p><br data-v-85be0237><br data-v-85be0237><p class="cor36" data-v-85be0237>JS異步編程實現方式?</p><p data-v-85be0237>回調函數 . promise . async和await</p><br data-v-85be0237><br data-v-85be0237><p class="cor36" data-v-85be0237>AJAX有2種方法,XMLHttpRequest和fetch,他們的優缺點?</p><p data-v-85be0237>XHR大多數用他的庫axios</p><br data-v-85be0237><p data-v-85be0237> Fetch優勢在於瀏覽器原生支持, 方便去用, 他的API也比xhr使用起來簡單 </p><br data-v-85be0237><br data-v-85be0237><div id="onejs020" class="articleCardTitle cor36" data-v-85be0237> [ JS ] ≫ promise 的狀態? </div><p data-v-85be0237>pending 待定: 初始狀態</p><br data-v-85be0237><p data-v-85be0237>fullfilled 兌現: 操作成功</p><br data-v-85be0237><p data-v-85be0237>rejected 拒絕: 操作失敗</p><br data-v-85be0237><br data-v-85be0237><p data-v-85be0237>Promise 狀態 一但 兌現 / 拒絕 就 無法再改變</p><br data-v-85be0237><p class="cor36" data-v-85be0237>promise解決了什麼問題?</p><p data-v-85be0237>解決回調地獄</p><br data-v-85be0237><br data-v-85be0237><p class="cor36" data-v-85be0237>promise成功失敗的回調放哪?</p><p data-v-85be0237>.then</p><br data-v-85be0237><br data-v-85be0237><p class="cor36" data-v-85be0237>catch是幹嘛的?</p><p data-v-85be0237>捕獲promise的錯誤</p><br data-v-85be0237><br data-v-85be0237><p class="cor36" data-v-85be0237>finally?</p><p data-v-85be0237>不論成功 (.then) 失敗 (.catch) 都會調用的方法</p><br data-v-85be0237><br data-v-85be0237><p class="cor36" data-v-85be0237>promise的缺點?</p><p data-v-85be0237>一旦執行promise沒辦法取消, 它裡面的錯誤只能用回調函數來捕獲</p><br data-v-85be0237><br data-v-85be0237><p class="cor36" data-v-85be0237>Promise.all?</p><p data-v-85be0237> 傳入多個promise而這些promise都是成功的話 Promise.all就執行相對應函數 </p><br data-v-85be0237><br data-v-85be0237><p class="cor36" data-v-85be0237>Promise.race?</p><p data-v-85be0237>傳入多個promise而只要一個成功或失敗, 就返回那個</p><br data-v-85be0237><br data-v-85be0237><p class="cor36" data-v-85be0237>promise的缺點?</p><p data-v-85be0237>一旦執行promise沒辦法取消, 它裡面的錯誤只能用回調函數來捕獲</p><p data-v-85be0237>就整個都失敗</p><br data-v-85be0237><p data-v-85be0237>Promise.all如果失敗了一個會不會執行失敗的回調? _ 會</p><br data-v-85be0237><p class="cor36" data-v-85be0237>那是第一個失敗時執行還是所有都失敗在執行?</p><p data-v-85be0237>只要第一個失敗就執行,並以這個失敗的結果來執行下面的回調</p><br data-v-85be0237><br data-v-85be0237><p class="cor36" data-v-85be0237>Promise是一個類還是函數呢?</p><p data-v-85be0237> 它可以是函數, 你把它做為單獨的函數的話要自己實現原型, 用類的話, 直接把它方法寫到類的定義上就好 </p><br data-v-85be0237><br data-v-85be0237><p class="cor36" data-v-85be0237>這個Promise接收什麼參數呢?</p><p data-v-85be0237>它是一個回調函數</p><br data-v-85be0237><br data-v-85be0237><p class="cor36" data-v-85be0237>這個回調函數接收什麼參數呢?</p><p data-v-85be0237>resolve 和 reject</p><br data-v-85be0237><p data-v-85be0237> Promise接受到這個參數後,它對這個函數要立即執行嗎?還是異步執行? _ 立即執行 </p><br data-v-85be0237><p class="cor36" data-v-85be0237>Promise執行完這個函數後要返回什麼值?</p><p data-v-85be0237> 物件,這個物件至少有一個than方法, 可能還會有catch跟finaly方法, 在then裡面可以添加更多的回調 </p><br data-v-85be0237><br data-v-85be0237><p class="cor36" data-v-85be0237> 一般promise後面.then,這個.then的參數和返回值是什麼? </p><p data-v-85be0237> then的參數第一個是成功的回調, 第二個參數是錯誤的回調, 然後返回一個promise </p><br data-v-85be0237><p data-v-85be0237>那返回的這個promise是之前的promise嗎? _ 是</p><br data-v-85be0237><p class="cor36" data-v-85be0237>Promise.all怎麼自己去模擬?</p><p data-v-85be0237> 就是發三個請求,三個請求成功了,就調用成功,任何一個失敗了就調用失敗 </p><br data-v-85be0237><br data-v-85be0237><p class="cor36" data-v-85be0237> 不用Promise.all怎麼做? _ (可不可以給2分鐘考慮思路,promise4步) </p><p data-v-85be0237> 先記promise.all的用法, 他會接收陣列參數, 第一步把所有promise封裝到陣列裡面, 陣列能做遍歷, 裡面寫成功函數和失敗函數, 如果成功成功數目加一or給結果陣列裡面的結果填充, 比如第一個promise成功了, 給結果第一項變成他的data, 第二個..., 怎麼才能繼續, 變了data後看一下是不是三項都是data或成功, 那就可以繼續了, 最終要確定是否成功就是我這次成功之後看一下這個陣列是否是全成功的, 如果不是就什麼都不做, 最後成功的那個請求就負責往下走, 而失敗就直接調用失敗不用數數 </p><br data-v-85be0237><br data-v-85be0237><p id="onejs021" class="cor36" data-v-85be0237>async/await怎麼用?</p><p data-v-85be0237>比如在AJAX請求之間, 先聲明一個async function</p><br data-v-85be0237><p data-v-85be0237>把這個AJAX請求寫在await後面,</p><br data-v-85be0237><p data-v-85be0237>因為這個async本身是一個函數包裹了不同的異步請求的任務,</p><br data-v-85be0237><p data-v-85be0237>然後它碰到這個await就會執行這個異步函數返回一個promise</p><br data-v-85be0237><p data-v-85be0237>但不確定這個promis會返回正確還是錯誤</p><br data-v-85be0237><p data-v-85be0237>所以可以用try catch來捕捉這個異常</p><br data-v-85be0237><br data-v-85be0237><p class="cor36" data-v-85be0237> 假如我有f1f2都返回promise如果我想await要等待兩個異步操作結束之後再console.log(z)? </p><p data-v-85be0237> 可以用promise.all, peomise.all可以將多個promise合成一個新的promise, 當兩個promise都是成功的狀態下, 就是它返回一個結果陣列, 如果是失敗的話它會將, 首先哪個錯的promise的狀態的結果返回出來 </p><br data-v-85be0237><br data-v-85be0237><p class="cor36" data-v-85be0237> 如果我想用await依次執行f1f2呢?就是等f1執行完我再去執行f2? </p><p data-v-85be0237>.await(f1).await(f2)</p><br data-v-85be0237><br data-v-85be0237><p data-v-85be0237>await永遠異步對不對? _ 對</p><br data-v-85be0237><br data-v-85be0237><p data-v-85be0237>await後面一般接promise對不對? _ 對</p><br data-v-85be0237><br data-v-85be0237><p class="cor36" data-v-85be0237>如果不接promise會怎樣?await 1會怎樣?</p><p data-v-85be0237>它會默認返回一個promise, 它會把它封裝成promise.resolve 1</p><br data-v-85be0237><br data-v-85be0237><p class="cor36" data-v-85be0237>const a = 1 和 const a = await 1一樣嗎?</p><p data-v-85be0237>不一樣, 有await會變異步</p><br data-v-85be0237><br data-v-85be0237><p class="cor36" data-v-85be0237>a = await 1相當於a = 1嗎?</p><p data-v-85be0237>不是</p><br data-v-85be0237><br data-v-85be0237><p data-v-85be0237> (await是語法糖,await所有寫法會變成promise,不是promise也強行變成promise) </p><br data-v-85be0237><br data-v-85be0237><p class="cor36" data-v-85be0237>await我們在之後接上一個異步請求,a = await ajax()?</p><p data-v-85be0237>那要等到promise結果返回,在執行a = await ajax()</p><br data-v-85be0237><br data-v-85be0237><p class="cor36" data-v-85be0237>怎麼捕獲await中的錯誤?</p><p data-v-85be0237>用 try , catch</p><br data-v-85be0237><br data-v-85be0237><p class="cor36" data-v-85be0237>node.js什麼是EventLoop?</p><p data-v-85be0237>Node.js將任務分成幾個大類</p><br data-v-85be0237><br data-v-85be0237><p data-v-85be0237>有timers階段</p><br data-v-85be0237><br data-v-85be0237><p data-v-85be0237>還有IO</p><br data-v-85be0237><br data-v-85be0237><p data-v-85be0237>callbacks階段</p><br data-v-85be0237><br data-v-85be0237><p data-v-85be0237>還有prepare階段</p><br data-v-85be0237><br data-v-85be0237><p data-v-85be0237>還有poll輪詢階段</p><br data-v-85be0237><br data-v-85be0237><p data-v-85be0237>還有check階段</p><br data-v-85be0237><br data-v-85be0237><p data-v-85be0237>還有close callbcak階段</p><br data-v-85be0237><br data-v-85be0237><p data-v-85be0237>一般在三個階段停留時間比較長 timers poll check</p><br data-v-85be0237><br data-v-85be0237><br data-v-85be0237><p data-v-85be0237>setTimeout哪個階段阿? timers</p><br data-v-85be0237><br data-v-85be0237><p data-v-85be0237> 那promise的then回調在哪個階段執行? 跟nextTick一樣, 現階段結束之前執行 </p><br data-v-85be0237><br data-v-85be0237><br data-v-85be0237><p id="onejs022" class="cor36" data-v-85be0237>JS的事件循環?</p><p data-v-85be0237>打開瀏覽器頁面時, 瀏覽器會開闢隊列,</p><br data-v-85be0237><p data-v-85be0237>然後隊列分為 微任務隊列 宏任務隊列,</p><br data-v-85be0237><p data-v-85be0237>在執行script代碼時, 會把同步代碼之外的異步任務放到對列裡面去,</p><br data-v-85be0237><p data-v-85be0237> 在同步的代碼執行完成後, 去查看異步隊列中是否有滿足條件的執行任務, </p><br data-v-85be0237><p data-v-85be0237>然後把它取出來防到執行環境站裡面執行,</p><br data-v-85be0237><p data-v-85be0237>然後不斷循環這個過程, 這就是事件循環</p><br data-v-85be0237><br data-v-85be0237><br data-v-85be0237><p class="cor36" data-v-85be0237>微任務和宏任務?</p><p data-v-85be0237>微任務 宏任務 是nodejs說法,</p><br data-v-85be0237><br data-v-85be0237><p data-v-85be0237>瀏覽器只有 微任務 任務, 所以可以認為宏任務就是任務</p><br data-v-85be0237><br data-v-85be0237><p data-v-85be0237> 任務是最常規的東西, 你引入script標籤 寫一個setTimeout, 它的回調或代碼裡面都是任務, </p><br data-v-85be0237><br data-v-85be0237><p data-v-85be0237> 這個任務裡面你可以不停地去啟用微任務, 例如promise.then執行微任務 </p><br data-v-85be0237><br data-v-85be0237><p class="cor36" data-v-85be0237>那些函數是微任務和那些是宏任務?</p><p data-v-85be0237> setTimeout宏任務 promise裡面then微任務 async函數裡面await後面的部分微任務 </p><br data-v-85be0237><br data-v-85be0237><p data-v-85be0237>微任務和宏任務執行順序? _ 宏任務先執行</p><br data-v-85be0237><br data-v-85be0237><p data-v-85be0237>一般第一個任務是什麼任務?(宏任務裡可以插入微任務) _ 宏任務</p><br data-v-85be0237><br data-v-85be0237><p data-v-85be0237>在頁面中引入一個script標籤,那這個script是什麼任務? _ 宏任務</p><br data-v-85be0237><br data-v-85be0237><p data-v-85be0237> 我在兩個宏任務之間執行一個微任務,那肯定微任務在兩個中間執行隊嗎? _ 對 </p><br data-v-85be0237><br data-v-85be0237><p data-v-85be0237> 那我在中間這個微任務裡面再次執行一個微任務,它會插在下一個宏任務執行之前執行嗎?(題目問可不可以插宏任務) _ 會 </p><br data-v-85be0237><br data-v-85be0237><p data-v-85be0237> 假設我在兩個宏任務之間已經安排了兩個微任務,然後在第一個微任務執行結束的時候,又插入一個新的微任務,這個新的微任務可以在下一個微任務執行之前執行嗎? </p><p data-v-85be0237>(題目問可不可以插微任務)</p><br data-v-85be0237><p data-v-85be0237> 不行, 微任務要排隊, 微任務只能插在宏任務之前 不能, . . . 兩個微任務之間不能插微任務 </p><br data-v-85be0237><br data-v-85be0237><p class="cor36" data-v-85be0237>假設一個宏任務觸發一個微任務和宏任務,先執行哪個?</p><p data-v-85be0237>微任務之後的微任務也是會繼續執行微任務, 直到微任務隊列空</p><br data-v-85be0237><br data-v-85be0237><p data-v-85be0237>Promise.then(f1)這個then後面接的f1是異步還是同步? _ 異步</p><br data-v-85be0237><br data-v-85be0237><p data-v-85be0237> 第一行Promise.then(f1)第二console.log(999),f1會在999之後執行對嗎? _ 對 </p><br data-v-85be0237><br data-v-85be0237><p data-v-85be0237> 第一行Promise.then(f1)第二setTimeout(999),f1和999哪個先執行? _ f1 </p><br data-v-85be0237><br data-v-85be0237><p data-v-85be0237> 為什麼then回調可以比setTimeout先執行? _ then屬於微任務, setTimeout屬於宏任務 </p><br data-v-85be0237><br data-v-85be0237>',736),Ai=ls(()=>v("div",{class:"toTopButton"},[v("div",{class:"disCen"},"___"),v("div",{class:"disCen"},"▲")],-1)),Mi=[Ai],Fi=ls(()=>v("div",{class:"toBotButton"},[v("div",{class:"disCen"},"▼"),v("div",{class:"disCen"},"￣")],-1)),Ii=[Fi],Ri=ls(()=>v("div",{class:"timeDiv"},null,-1)),Hi={__name:"JsPageOne",setup(a){const s=ua(!1);window.addEventListener("scroll",function(){s.value=window.scrollY>0});function d(){window.scrollTo({top:0,left:0,behavior:"smooth"})}function n(){window.scrollTo({top:999999,left:0,behavior:"smooth"})}function t(c){window.scrollTo({top:document.getElementById(`${c}`).offsetTop,behavior:"smooth"})}return(c,e)=>{const l=za("dir");return da(),ca(Q,null,[v("section",null,[v("div",gi,[v("div",Ti,[v("div",_i,[zi,v("div",{onClick:e[0]||(e[0]=p=>t("onejs001")),class:"leftNavText"},"JS數據類型"),v("div",{onClick:e[1]||(e[1]=p=>t("onejs002")),class:"leftNavText"}," null undefined "),v("div",{onClick:e[2]||(e[2]=p=>t("onejs003")),class:"leftNavText"},"==&==="),v("div",{onClick:e[3]||(e[3]=p=>t("onejs004")),class:"leftNavText"},"0.1+0.2"),v("div",{onClick:e[4]||(e[4]=p=>t("onejs027")),class:"leftNavText"}," 判斷數字是小數 "),v("div",{onClick:e[5]||(e[5]=p=>t("onejs028")),class:"leftNavText"},"數組去重"),v("div",{onClick:e[6]||(e[6]=p=>t("onejs024")),class:"leftNavText"}," 判斷變量是否為陣列 "),v("div",{onClick:e[7]||(e[7]=p=>t("onejs026")),class:"leftNavText"}," 獲得陣列最後一項 "),v("div",{onClick:e[8]||(e[8]=p=>t("onejs023")),class:"leftNavText"}," 判斷一個物件為空 "),v("div",{onClick:e[9]||(e[9]=p=>t("onejs025")),class:"leftNavText"}," 判斷一個物件是否有某屬性 "),v("div",{onClick:e[10]||(e[10]=p=>t("onejs005")),class:"leftNavText"}," let var const "),v("div",{onClick:e[11]||(e[11]=p=>t("onejs006")),class:"leftNavText"},"展開運算符"),v("div",{onClick:e[12]||(e[12]=p=>t("onejs007")),class:"leftNavText"}," 遍歷數組有幾種方式 "),v("div",{onClick:e[13]||(e[13]=p=>t("onejs008")),class:"leftNavText"},"閉包"),v("div",{onClick:e[14]||(e[14]=p=>t("onejs009")),class:"leftNavText"}," 立即執行函數 "),v("div",{onClick:e[15]||(e[15]=p=>t("onejs010")),class:"leftNavText"},"this指向"),v("div",{onClick:e[16]||(e[16]=p=>t("onejs011")),class:"leftNavText"},"箭頭函數"),v("div",{onClick:e[17]||(e[17]=p=>t("onejs012")),class:"leftNavText"},"原型鏈"),v("div",{onClick:e[18]||(e[18]=p=>t("onejs013")),class:"leftNavText"},"new做了什麼"),v("div",{onClick:e[19]||(e[19]=p=>t("onejs014")),class:"leftNavText"},"繼承"),v("div",{onClick:e[20]||(e[20]=p=>t("onejs015")),class:"leftNavText"}," call apply bind "),v("div",{onClick:e[21]||(e[21]=p=>t("onejs016")),class:"leftNavText"},"防斗節流"),v("div",{onClick:e[22]||(e[22]=p=>t("onejs017")),class:"leftNavText"},"DOM"),v("div",{onClick:e[23]||(e[23]=p=>t("onejs018")),class:"leftNavText"}," 深拷貝淺拷貝 "),v("div",{onClick:e[24]||(e[24]=p=>t("onejs019")),class:"leftNavText"},"RESTful API"),v("div",{onClick:e[25]||(e[25]=p=>t("onejs020")),class:"leftNavText"},"promise狀態"),v("div",{onClick:e[26]||(e[26]=p=>t("onejs021")),class:"leftNavText"},"async/await"),v("div",{onClick:e[27]||(e[27]=p=>t("onejs022")),class:"leftNavText"},"JS事件循環"),v("div",{onClick:e[28]||(e[28]=p=>t("onejs0")),class:"leftNavText"}),v("div",{onClick:e[29]||(e[29]=p=>t("onejs0")),class:"leftNavText"}),v("div",{onClick:e[30]||(e[30]=p=>t("onejs0")),class:"leftNavText"}),v("div",{onClick:e[31]||(e[31]=p=>t("onejs0")),class:"leftNavText"})])])]),v("div",Si,[v("div",qi,[v("div",yi,[Ci,v("div",xi,[Li,T(l,null,{default:C(()=>[ji,Pi,fa(),Vi,Ni,Oi]),_:1}),$i]),Ei])])])]),v("div",null,[X(T(W,{name:"fade",tag:"div"},{default:C(()=>[v("div",{onClick:d,class:"toTop"},Mi)]),_:1},512),[[Y,s.value]]),X(T(W,{name:"fade",tag:"div"},{default:C(()=>[v("div",{onClick:n,class:"toBot"},Ii)]),_:1},512),[[Y,s.value]])]),Ri],64)}}},Bi=ra(Hi,[["__scopeId","data-v-85be0237"]]);const Ji={};function Di(a,s){const d=za("RouterLink"),n=za("RouterView");return da(),ca(Q,null,[v("div",null,[v("ul",null,[v("li",null,[T(d,{to:"/js/jspractice/"},{default:C(()=>[fa("練習題1")]),_:1})]),v("li",null,[T(d,{to:"/js/jspractice/two"},{default:C(()=>[fa("練習題2")]),_:1})])])]),T(n)],64)}const Wi=ra(Ji,[["render",Di],["__scopeId","data-v-8f2555a9"]]);const Gd=a=>(ma("data-v-34a3b96c"),a=a(),ha(),a),Ui={class:"leftNav"},Ki={class:"leftNavContainer"},Xi={class:"leftNavLayout"},Yi=Gd(()=>v("br",null,null,-1)),Gi=Gd(()=>v("br",null,null,-1)),Qi=U('<div class="Main" data-v-34a3b96c><div class="mainContainer" data-v-34a3b96c><div class="mainLayout" data-v-34a3b96c><div id="twohand001" class="cardTitle" data-v-34a3b96c> 1. JS作用域考题? . . . . . . . . . . . . </div><div data-v-34a3b96c>1.JS除了函數外, JS沒有塊級作用域</div><div data-v-34a3b96c> 2.作用域鏈: 內部可以訪問外部的變量, 但是外部不能訪問內部的變量 </div><div data-v-34a3b96c>3.注意聲明變量是用var還是沒寫 (window.)</div><div data-v-34a3b96c>4.注意JS有變量提升(變量懸掛聲明)</div><div data-v-34a3b96c>5.優先級: 聲明變量 &gt; 聲明普通函數 &gt; 參數 &gt; 變量提升</div><div data-v-34a3b96c>面試時</div><div data-v-34a3b96c>1.先看本層作用域有沒有此變量 (注意變量提升)</div><div data-v-34a3b96c>2.注意JS除了函數外, JS沒有塊級作用域</div><div data-v-34a3b96c>3.普通函數聲明是不看寫函數的時候順序</div><br data-v-34a3b96c><div data-v-34a3b96c>1.JS除了函數外, JS沒有塊級作用域</div><br data-v-34a3b96c><div data-v-34a3b96c>function fun(){</div><div data-v-34a3b96c>. var a = 10; . . . // 這個 a 屬於函數內部的</div><div data-v-34a3b96c>}</div><div data-v-34a3b96c>console.log( a ) . . . // a is not defined</div><div data-v-34a3b96c>fun();</div><div data-v-34a3b96c>console.log( a ) . . . // a is not defined</div><br data-v-34a3b96c><div data-v-34a3b96c>for( var i = 0; i ＜ 10 ; i++ ){</div><div data-v-34a3b96c>}</div><div data-v-34a3b96c>console.log( i ); . . . // 10 在for裡面定義沒有作用域</div><br data-v-34a3b96c><div data-v-34a3b96c>if( true ){</div><div data-v-34a3b96c>. var a = 10;</div><div data-v-34a3b96c>}</div><div data-v-34a3b96c>console.log( a ); . . . // 10 只有函數有作用域</div><br data-v-34a3b96c><div data-v-34a3b96c> 2.作用域鏈: 內部可以訪問外部的變量, 但是外部不能訪問內部的變量 </div><div data-v-34a3b96c>注意: 如果內部有, 優先查找內部, 內部沒有向外層找</div><br data-v-34a3b96c><div data-v-34a3b96c>function fun(){</div><div data-v-34a3b96c>. var a = 10;</div><div data-v-34a3b96c>. function foo(){</div><div data-v-34a3b96c>. . console.log( a )</div><div data-v-34a3b96c>. }</div><div data-v-34a3b96c>. foo();</div><div data-v-34a3b96c>}</div><div data-v-34a3b96c>fun(); . . . 打印10</div><br data-v-34a3b96c><div data-v-34a3b96c>var b = 29;</div><div data-v-34a3b96c>function fun1(){</div><div data-v-34a3b96c>. console.log( b );</div><div data-v-34a3b96c>}</div><div data-v-34a3b96c>fun1(); . . . 打印29, 內可以訪問外,但外不能訪問內</div><br data-v-34a3b96c><div data-v-34a3b96c>3.注意聲明變量是用var還是沒寫 (window.)</div><div data-v-34a3b96c>(function(){</div><div data-v-34a3b96c>. var a = b = 10;</div><div data-v-34a3b96c>})()</div><div data-v-34a3b96c>console.log(a) . . . // a is not defined</div><div data-v-34a3b96c> console.log(b) . . . // 10 b=10 沒寫默認window.b=10, 相當於全局var b=10 </div><br data-v-34a3b96c><div data-v-34a3b96c>4.注意JS有變量提升(變量懸掛聲明)</div><div data-v-34a3b96c>function c(){</div><div data-v-34a3b96c>. var b = 1</div><div data-v-34a3b96c>. function a(){</div><div data-v-34a3b96c>. . console.log(b)</div><div data-v-34a3b96c>. . var b = 2;</div><div data-v-34a3b96c>. . console.log(b)</div><div data-v-34a3b96c>. }</div><div data-v-34a3b96c>. a()</div><div data-v-34a3b96c>. console.log(b)</div><div data-v-34a3b96c>}</div><div data-v-34a3b96c>c()</div><br data-v-34a3b96c><div data-v-34a3b96c>先看本層作用域有沒有此變量 (注意變量提升)</div><div data-v-34a3b96c>a()裡面有var b提升, 第一個console.log(b) . . . // undefined</div><div data-v-34a3b96c>第二個console.log(b) . . . // 2 因為上面有</div><div data-v-34a3b96c>第三個console.log(b)本層有是 1</div><br data-v-34a3b96c><div class="cor36" data-v-34a3b96c>輸出多少?</div><div data-v-34a3b96c>var name = &quot;a&quot;;</div><div data-v-34a3b96c>(function(){</div><div data-v-34a3b96c>. if( typeof name == &quot;undefined&quot; ){</div><div data-v-34a3b96c>. . var name = &quot;b&quot;;</div><div data-v-34a3b96c>. . console.log(&quot;111&quot;+name);</div><div data-v-34a3b96c>. } else {</div><div data-v-34a3b96c>. . console.log(&quot;222&quot;+name);</div><div data-v-34a3b96c>. }</div><div data-v-34a3b96c>})()</div><br data-v-34a3b96c><div data-v-34a3b96c>先看本層作用域有沒有此變量 (注意變量提升)</div><div data-v-34a3b96c>注意JS除了函數外, JS沒有塊級作用域</div><div data-v-34a3b96c>var先變量提升到function, 就算if( false )也是提升</div><div data-v-34a3b96c>所以 var name, 所以name == undefined, 所以打印 111b</div><div class="cor36" data-v-34a3b96c>輸出多少?</div><div data-v-34a3b96c>var bar = 1;</div><div data-v-34a3b96c>function test(){</div><div data-v-34a3b96c>. console.log( bar )</div><div data-v-34a3b96c>. var bar = 2;</div><div data-v-34a3b96c>. console.log( bar )</div><div data-v-34a3b96c>}</div><div data-v-34a3b96c>test();</div><br data-v-34a3b96c><div data-v-34a3b96c>先看本層作用域有沒有此變量 (注意變量提升)</div><div data-v-34a3b96c>第一個bar undefined</div><div data-v-34a3b96c>第二個bar 2</div><div class="cor36" data-v-34a3b96c>輸出多少?</div><div data-v-34a3b96c>function fun(){</div><div data-v-34a3b96c>. var a = 10;</div><div data-v-34a3b96c>. function a(){}</div><div data-v-34a3b96c>. console.log( a );</div><div data-v-34a3b96c>}</div><div data-v-34a3b96c>fun(); . . . // 10</div><br data-v-34a3b96c><div data-v-34a3b96c>function fun(){</div><div data-v-34a3b96c>. var a = 10;</div><div data-v-34a3b96c>. var a = function(){}</div><div data-v-34a3b96c>. console.log( a );</div><div data-v-34a3b96c>}</div><div data-v-34a3b96c>fun(); . . . // f(){}</div><br data-v-34a3b96c><div data-v-34a3b96c>5.優先級: 聲明變量 &gt; 聲明普通函數 &gt; 參數 &gt; 變量提升</div><div data-v-34a3b96c>3.普通函數聲明是不看寫函數的時候順序</div><br data-v-34a3b96c><div data-v-34a3b96c>function fun(){</div><div data-v-34a3b96c>. console.log( a ); . . . //f(){}</div><div data-v-34a3b96c>. function a(){}</div><div data-v-34a3b96c>}</div><div data-v-34a3b96c>fun(); . . . 也可以先用在定義</div><br data-v-34a3b96c><div data-v-34a3b96c>function fun(){</div><div data-v-34a3b96c>. console.log( a ); . . . //f(){}</div><div data-v-34a3b96c>. var a = 10;</div><div data-v-34a3b96c>. function a(){}</div><div data-v-34a3b96c>}</div><div data-v-34a3b96c>fun(); . . . 也可以先用在定義</div><br data-v-34a3b96c><div data-v-34a3b96c>function fun( a ){</div><div data-v-34a3b96c>. console.log( a );</div><div data-v-34a3b96c>. var a = 10;</div><div data-v-34a3b96c>}</div><div data-v-34a3b96c>fun( 100 ); . . . // 10</div><br data-v-34a3b96c><div data-v-34a3b96c>function fun( a ){</div><div data-v-34a3b96c>. var a = 10;</div><div data-v-34a3b96c>. function a(){}</div><div data-v-34a3b96c>. console.log( a );</div><div data-v-34a3b96c>}</div><div data-v-34a3b96c> fun( 100 ); . . . // 10 聲明變量 &gt; 聲明普通函數 &gt; 參數 &gt; 變量提升 </div><br data-v-34a3b96c><div data-v-34a3b96c>function fun(){</div><div data-v-34a3b96c>. a = 10;</div><div data-v-34a3b96c>. console.log( a );</div><div data-v-34a3b96c>}</div><div data-v-34a3b96c> fun(); . . . // 打印 10 , 本層沒有向外找, 他是在外部拿到的,window.a </div><br data-v-34a3b96c><div data-v-34a3b96c>function fun(){</div><div data-v-34a3b96c>. a = 10;</div><div data-v-34a3b96c>. var a = 20;</div><div data-v-34a3b96c>. console.log( a );</div><div data-v-34a3b96c>}</div><div data-v-34a3b96c>fun(); . . . // 打印 20 , 本層有</div><br data-v-34a3b96c><div data-v-34a3b96c>function fun(){</div><div data-v-34a3b96c>. var a = 20;</div><div data-v-34a3b96c>. a = 10;</div><div data-v-34a3b96c>. console.log( a );</div><div data-v-34a3b96c>}</div><div data-v-34a3b96c>fun(); . . . // 打印 10 , 變量再次賦值</div><br data-v-34a3b96c><div data-v-34a3b96c>function fun(){</div><div data-v-34a3b96c>. a = 10;</div><div data-v-34a3b96c>. console.log( a );</div><div data-v-34a3b96c>. var a = 20;</div><div data-v-34a3b96c>. console.log( a );</div><div data-v-34a3b96c>}</div><div data-v-34a3b96c>fun(); . . . // 第一個打印 10 , 第二個打印 20</div><br data-v-34a3b96c><br data-v-34a3b96c><br data-v-34a3b96c><div id="twohand002" class="cardTitle" data-v-34a3b96c>2. JS物件考题</div><div data-v-34a3b96c> 1.物件是通過 new 操作符構建出來, 所以物件之間不相等 (除了引用外) </div><div data-v-34a3b96c>2.物件注意: 引用類型 (共同一個地址)</div><div data-v-34a3b96c>3.物件的 key 都是字符串類型</div><div data-v-34a3b96c>4.物件如何找屬性&amp;方法</div><div data-v-34a3b96c> 先在物件本身找 &gt; 構造函數中找 &gt; 物件原型中找 &gt; 構造函數原型中找 &gt; 物件上一層原型查找 </div><br data-v-34a3b96c><div data-v-34a3b96c>console.log([1,2,3] === [1,2,3]) . . . // false</div><div data-v-34a3b96c>new 創建新物件</div><div data-v-34a3b96c>任何陣列透過 new 出來</div><br data-v-34a3b96c><div data-v-34a3b96c>var obj1 = {</div><div data-v-34a3b96c>. a:1</div><div data-v-34a3b96c>}</div><div data-v-34a3b96c>var obj2 = obj1; . . . obj1 給 obj2 注意不是創建</div><div data-v-34a3b96c>obj1.a = &quot;aaa&quot;; . . . 兩個都被改</div><div data-v-34a3b96c>obj2.a = &quot;bbb&quot;&#39; . . . 兩個都被改</div><br data-v-34a3b96c><div class="cor36" data-v-34a3b96c>輸出多少?</div><div data-v-34a3b96c>var obj1 = {</div><div data-v-34a3b96c>. a:&quot;hellow&quot;</div><div data-v-34a3b96c>}</div><div data-v-34a3b96c>var obj2 = obj1;</div><div data-v-34a3b96c>obj2.a= &quot;world&quot;;</div><div data-v-34a3b96c>console.log(obj1);</div><div data-v-34a3b96c>(function(){</div><div data-v-34a3b96c>. console.log( a );</div><div data-v-34a3b96c>. var a = 1;</div><div data-v-34a3b96c>})();</div><div data-v-34a3b96c>第一個打印 {a:world}</div><div data-v-34a3b96c>第二個打印 undefined</div><br data-v-34a3b96c><div class="cor36" data-v-34a3b96c>物件的 key 都是字符串類型</div><div data-v-34a3b96c>var a = {}</div><div data-v-34a3b96c>var b = {</div><div data-v-34a3b96c>. key: &quot;a&quot;</div><div data-v-34a3b96c>}</div><div data-v-34a3b96c>var c = {</div><div data-v-34a3b96c>. key: &quot;c&quot;</div><div data-v-34a3b96c>}</div><div data-v-34a3b96c>a[b] = &quot;123&quot;;</div><div data-v-34a3b96c>a[c] = &quot;456&quot;;</div><div data-v-34a3b96c>console.log( a[b] )</div><br data-v-34a3b96c><div data-v-34a3b96c>這相當於 let m = {}</div><div data-v-34a3b96c>m.a = 1;</div><div data-v-34a3b96c>m.a = 2;</div><div data-v-34a3b96c>往物件裡面加內容,物件的key為字串</div><div data-v-34a3b96c>結果為 456</div><div data-v-34a3b96c>for(var k in a){</div><div data-v-34a3b96c>. console.log( typeof k )</div><div data-v-34a3b96c>}</div><br data-v-34a3b96c><div data-v-34a3b96c>物件如何找屬性&amp;方法</div><div data-v-34a3b96c>console.log( [1,2,3].constructor )</div><div data-v-34a3b96c>得到array</div><div data-v-34a3b96c>物件透過 構造函數 創造的</div><div data-v-34a3b96c>new Array</div><br data-v-34a3b96c><div data-v-34a3b96c>可以想成</div><div data-v-34a3b96c>function Fun(){</div><div data-v-34a3b96c>}</div><div data-v-34a3b96c>let obj = new Fun();</div><div data-v-34a3b96c> console.log( obj.constructor ) . . . //得到Fun() 代表 obj.constructor 指向 Fun() </div><br data-v-34a3b96c><div data-v-34a3b96c>同理</div><br data-v-34a3b96c><div data-v-34a3b96c>function Array(){</div><div data-v-34a3b96c>}</div><div data-v-34a3b96c>new Array</div><div data-v-34a3b96c> console.log( [1,2,3].constructor ) . . . //得到Array() 代表 [1,2,3].constructor 指向 Array() </div><div data-v-34a3b96c>每一個物件透過構造函數構建出來, 給 new 把它變成物件</div><br data-v-34a3b96c><div data-v-34a3b96c>1.每一個函數都自帶一個 prototype 原型</div><div data-v-34a3b96c>. 注意: 物件擁有 __proto__</div><div data-v-34a3b96c>2.new Fun 該 Fun 構造函數的原型指向於對象(new Fun)的原型</div><br data-v-34a3b96c><div data-v-34a3b96c>物件如何找屬性&amp;方法</div><div data-v-34a3b96c> 先在物件本身找 &gt; 構造函數中找 &gt; 物件原型中找 &gt; 構造函數原型中找 &gt; 物件上一層原型查找 </div><br data-v-34a3b96c><div data-v-34a3b96c>function Fun(){</div><div data-v-34a3b96c>. this.a = &quot;在 fun 函數中添加的&quot;;</div><div data-v-34a3b96c>}</div><div data-v-34a3b96c>Fun.prototype.a = &quot;這是 fun 原型添加的&quot;</div><div data-v-34a3b96c>let obj = new Fun();</div><div data-v-34a3b96c>obj.a = &quot;物件本身&quot;</div><div data-v-34a3b96c>obj.__proto__,a = &quot;這是物件原型添加的&quot;;</div><br data-v-34a3b96c><div data-v-34a3b96c>console.log(obj.a) . . . // 物件本身</div><br data-v-34a3b96c><br data-v-34a3b96c><div data-v-34a3b96c>function Fun(){</div><div data-v-34a3b96c>. this.a = &quot;在 fun 函數中添加的&quot;;</div><div data-v-34a3b96c>}</div><div data-v-34a3b96c>Fun.prototype.a = &quot;這是 fun 原型添加的&quot;</div><div data-v-34a3b96c>let obj = new Fun();</div><div data-v-34a3b96c>obj.__proto__,a = &quot;這是物件原型添加的&quot;;</div><br data-v-34a3b96c><div data-v-34a3b96c>console.log(obj.a) . . . // 在 fun 函數中添加的</div><br data-v-34a3b96c><br data-v-34a3b96c><div data-v-34a3b96c>function Fun(){</div><div data-v-34a3b96c>}</div><div data-v-34a3b96c>Fun.prototype.a = &quot;這是 fun 原型添加的&quot;</div><div data-v-34a3b96c>let obj = new Fun();</div><div data-v-34a3b96c>obj.__proto__,a = &quot;這是物件原型添加的&quot;;</div><br data-v-34a3b96c><div data-v-34a3b96c>console.log(obj.a) . . . // 這是物件原型添加的</div><br data-v-34a3b96c><br data-v-34a3b96c><div data-v-34a3b96c>function Fun(){</div><div data-v-34a3b96c>}</div><div data-v-34a3b96c>Fun.prototype.a = &quot;這是 fun 原型添加的&quot;</div><div data-v-34a3b96c>let obj = new Fun();</div><br data-v-34a3b96c><div data-v-34a3b96c>console.log(obj.a) . . . // 這是 fun 原型添加的</div><br data-v-34a3b96c><div data-v-34a3b96c>function Fun(){</div><div data-v-34a3b96c>}</div><div data-v-34a3b96c>let obj = new Fun();</div><br data-v-34a3b96c><div data-v-34a3b96c>console.log(obj.a) . . . // undefined</div><br data-v-34a3b96c><br data-v-34a3b96c><div data-v-34a3b96c>function Fun(){</div><div data-v-34a3b96c>}</div><div data-v-34a3b96c>let obj = new Fun();</div><div data-v-34a3b96c>Object.prototype.a = &quot;這是Object添加的&quot;</div><br data-v-34a3b96c><div data-v-34a3b96c>console.log(obj.a) . . . // 這是Object添加的</div><br data-v-34a3b96c><br data-v-34a3b96c><div data-v-34a3b96c>以上原型鏈</div><div data-v-34a3b96c> 先在物件本身找 &gt; 構造函數中找 &gt; 物件原型中找 &gt; 構造函數原型中找 &gt; 物件上一層原型查找 </div><br data-v-34a3b96c><br data-v-34a3b96c><br data-v-34a3b96c><div id="twohand003" class="cardTitle" data-v-34a3b96c> 3. JS作用域+this指向+原型的考题 </div><div data-v-34a3b96c>function fun(){</div><div data-v-34a3b96c>. console.log( 111 );</div><div data-v-34a3b96c>. return &quot;aaa&quot;</div><div data-v-34a3b96c>}</div><br data-v-34a3b96c><div data-v-34a3b96c>console.log( fun ); . . . // 打印出 函數本體</div><div data-v-34a3b96c>console.log( fun() ); . . . // 先打印 111 , 後打印 aaa</div><div data-v-34a3b96c> console.log( new fun() ); . . . //fun{} 返回物件, 因為你new了創建新物件 </div><br data-v-34a3b96c><div data-v-34a3b96c>如果裡面有 this 則指向於 new fun</div><br data-v-34a3b96c><div data-v-34a3b96c>function fun(){</div><div data-v-34a3b96c>. this.xxx = &quot;123&quot;</div><div data-v-34a3b96c>. console.log( 111 );</div><div data-v-34a3b96c>. return &quot;aaa&quot;</div><div data-v-34a3b96c>}</div><br data-v-34a3b96c><div data-v-34a3b96c>console.log( new fun() ); . . . //fun{xxx: &quot;123&quot;}</div><br data-v-34a3b96c><br data-v-34a3b96c><div data-v-34a3b96c>function fun(){</div><div data-v-34a3b96c>. this.xxx = &quot;123&quot;</div><div data-v-34a3b96c>. console.log( this );</div><div data-v-34a3b96c>. console.log( 111 );</div><div data-v-34a3b96c>. return &quot;aaa&quot;</div><div data-v-34a3b96c>}</div><br data-v-34a3b96c><div data-v-34a3b96c>打印出 window</div><div data-v-34a3b96c>普通函數的 this 代表 window</div><br data-v-34a3b96c><div class="cor36" data-v-34a3b96c>輸出多少?</div><div data-v-34a3b96c>function Foo(){</div><div data-v-34a3b96c>. getName = function(){console.log(1)}</div><div data-v-34a3b96c>. return this;</div><div data-v-34a3b96c>}</div><div data-v-34a3b96c>Foo.getName = function(){console.log(2)}</div><div data-v-34a3b96c>Foo.prototype.getName = function(){console.log(3)}</div><div data-v-34a3b96c>var getName = function(){console.log(4)}</div><div data-v-34a3b96c>function getName(){</div><div data-v-34a3b96c>. console.log(5)</div><div data-v-34a3b96c>}</div><br data-v-34a3b96c><div data-v-34a3b96c>Foo.getName(); . . . // 2</div><div data-v-34a3b96c>getName(); . . . // 4</div><div data-v-34a3b96c>Foo().getName();</div><div data-v-34a3b96c>getName();</div><div data-v-34a3b96c>new Foo().getName();</div><br data-v-34a3b96c><div data-v-34a3b96c>1.getName=function...是全局的window.getName=...</div><br data-v-34a3b96c><div data-v-34a3b96c>2.Foo.getName() 先找函數本身 打印出 2</div><br data-v-34a3b96c><div data-v-34a3b96c>3.Foo.getName() 的 Foo 沒有加括號代表他沒有執行</div><br data-v-34a3b96c><div data-v-34a3b96c> 4.getName() 找到變量 var getName =.. 和函數 function getName(){.. </div><div data-v-34a3b96c>(因作用域) 普通變量 &gt; 函數 . . . 所以打印出 4</div><br data-v-34a3b96c><div data-v-34a3b96c>5.Foo().getName();</div><div data-v-34a3b96c>Foo() 先執行 做 //getName = function(){console.log(1)}</div><div data-v-34a3b96c>然後 return this . . . return 出 window</div><div data-v-34a3b96c>所以是 window.getName() . . . 因上上行 所以打印出 1</div><br data-v-34a3b96c><div data-v-34a3b96c>6.getName(); . . . 因上上上行覆蓋, 所以打印出 1</div><br data-v-34a3b96c><div data-v-34a3b96c>7.new Foo().getName(); 物件找方法</div><div data-v-34a3b96c> 先在物件本身找 &gt; 構造函數中找 &gt; 物件原型中找 &gt; 構造函數原型中找 &gt; 物件上一層原型查找 </div><div data-v-34a3b96c>本身沒有</div><div data-v-34a3b96c>構造函數 function Foo(){ 本身裡不是 this. getName是 window.</div><div data-v-34a3b96c>物件原型中找 __proto__ 沒有</div><div data-v-34a3b96c>物件原型和構造函數原型他們是一個原型</div><div data-v-34a3b96c>所以看構造函數原型 , 打印出 3</div><div data-v-34a3b96c>Foo.prototype.getName = function(){console.log(3)}</div><br data-v-34a3b96c><br data-v-34a3b96c><div class="cor36" data-v-34a3b96c>輸出多少?</div><div data-v-34a3b96c>var o = {</div><div data-v-34a3b96c>. a:10,</div><div data-v-34a3b96c>. b:{</div><div data-v-34a3b96c>. . fn:function(){</div><div data-v-34a3b96c>. . . console.log( this.a );</div><div data-v-34a3b96c>. . . console.log( this );</div><div data-v-34a3b96c>. . }</div><div data-v-34a3b96c>. }</div><div data-v-34a3b96c>}</div><div data-v-34a3b96c>o.b.fn()</div><br data-v-34a3b96c><div data-v-34a3b96c>重點看誰執行 fn, 所以 fn 裡面的 this 指向 b</div><div data-v-34a3b96c>console.log( this.a ); . . . 打印 undefined</div><div data-v-34a3b96c>console.log( this ); . . . 打印 fn</div><br data-v-34a3b96c><div class="cor36" data-v-34a3b96c>輸出多少?</div><div data-v-34a3b96c>window.name = &quot;ByteDance&quot;;</div><div data-v-34a3b96c>function A(){</div><div data-v-34a3b96c>. this.name = 123;</div><div data-v-34a3b96c>}</div><div data-v-34a3b96c>A.prototype.getA = function(){</div><div data-v-34a3b96c>. console.log( this );</div><div data-v-34a3b96c>. return this.name + 1;</div><div data-v-34a3b96c>}</div><div data-v-34a3b96c>let a = new A();</div><div data-v-34a3b96c>let funcA = a.getA;</div><div data-v-34a3b96c>funcA();</div><div data-v-34a3b96c>console.log( funcA() )</div><br data-v-34a3b96c><div data-v-34a3b96c>先注意 let funcA = a.getA 的 a.getA 有沒有括號,差很大</div><div data-v-34a3b96c>a.getA 沒括號 裡面代碼不執行 有return則返回函數體</div><div data-v-34a3b96c> a.getA 沒執行, 相當於把這個 A.prototype.getA = function(){ 函數賦給了 funcA </div><div data-v-34a3b96c> funcA() 執行了 A.prototype.getA = function(){ 裡面的 console.log(this) 打印 window </div><div data-v-34a3b96c>console.log( funcA() ) 要打印 return this.name + 1;</div><div data-v-34a3b96c>而 this 代表 window, this.name 找到 &quot;ByteDance&quot;</div><div data-v-34a3b96c>console.log( funcA() ) 打印出 &quot;ByteDance1&quot;</div><br data-v-34a3b96c><div class="cor36" data-v-34a3b96c>輸出多少?</div><div data-v-34a3b96c>window.name = &quot;ByteDance&quot;;</div><div data-v-34a3b96c>function A(){</div><div data-v-34a3b96c>. this.name = 123;</div><div data-v-34a3b96c>}</div><div data-v-34a3b96c>A.prototype.getA = function(){</div><div data-v-34a3b96c>. console.log( this );</div><div data-v-34a3b96c>. return this.name + 1;</div><div data-v-34a3b96c>}</div><div data-v-34a3b96c>let a = new A();</div><div data-v-34a3b96c>let funcA = a.getA();</div><div data-v-34a3b96c>funcA;</div><br data-v-34a3b96c><div data-v-34a3b96c>let funcA = a.getA() 調用直接執行</div><div data-v-34a3b96c>執行 A.prototype.getA = function(){</div><div data-v-34a3b96c>裡面的 console.log( this ) this 指 A</div><div data-v-34a3b96c>打印出 A{name: 123}</div><div data-v-34a3b96c>funcA沒加括號 裡面代碼不執行 有return則返回函數體</div><br data-v-34a3b96c><div class="cor36" data-v-34a3b96c>輸出多少?</div><div data-v-34a3b96c>var length = 10;</div><div data-v-34a3b96c>function fn(){</div><div data-v-34a3b96c>. return this.length</div><div data-v-34a3b96c>}</div><div data-v-34a3b96c>var obj = {</div><div data-v-34a3b96c>. length: 5,</div><div data-v-34a3b96c>. test1: function(){</div><div data-v-34a3b96c>. . return fn();</div><div data-v-34a3b96c>. }</div><div data-v-34a3b96c>}</div><div data-v-34a3b96c>obj.test2 = fn;</div><div data-v-34a3b96c>console.log( obj.test1() );</div><div data-v-34a3b96c>console.log( fn()===obj.test2() );</div><div data-v-34a3b96c>console.log( obj.test1() == obj.test2() );</div><br data-v-34a3b96c><div data-v-34a3b96c>注意 obj.test2 = fn 沒加掛號 相當於 把這個函數賦給了</div><div data-v-34a3b96c>沒加掛號 裡面代碼不執行 有return則返回函數體</div><div data-v-34a3b96c>相當於 把這個 function fn(){ 函數賦給了 obj.test2</div><div data-v-34a3b96c>所以 obj 多了一個 test2: function</div><br data-v-34a3b96c><div data-v-34a3b96c>console.log( obj.test1() )</div><div data-v-34a3b96c>test1 return fn() , fn帶括號要執行</div><div data-v-34a3b96c>fn return this.length, 這個this 指向 window</div><div data-v-34a3b96c>return 10, return 10+1</div><div data-v-34a3b96c>console.log( obj.test1() ) 打印出 11</div><br data-v-34a3b96c><div data-v-34a3b96c>console.log( fn()===obj.test2() )</div><div data-v-34a3b96c>obj.test2() 裡面 return this.length,</div><div data-v-34a3b96c>this 指向 obj , this.length 是 5</div><div data-v-34a3b96c>而 fn() 的 this 指向 window , window.length 是 10</div><div data-v-34a3b96c>console.log( fn()===obj.test2() ) 是 false</div><br data-v-34a3b96c><div data-v-34a3b96c>console.log( obj.test1() == obj.test2() )</div><div data-v-34a3b96c>obj.test2() 上面討論 5</div><div data-v-34a3b96c>obj.test1() 上面討論 11</div><br data-v-34a3b96c><br data-v-34a3b96c><br data-v-34a3b96c><div id="twohand004" class="cardTitle" data-v-34a3b96c>4. JS判斷變量是不是數組？</div><div data-v-34a3b96c>建議 別寫 typeOf</div><br data-v-34a3b96c><div class="cor36" data-v-34a3b96c>方法1: isArray</div><div data-v-34a3b96c>var arr = [1,2,3];</div><div data-v-34a3b96c>console.log( Array.isArray( arr ) ); . . . // true</div><div data-v-34a3b96c>console.log( Array.isArray( {} ) ); . . . // false</div><div data-v-34a3b96c>嚴謹的方法</div><br data-v-34a3b96c><div class="cor36" data-v-34a3b96c>方法2: instanceof</div><div data-v-34a3b96c>console.log( arr instanceof Array ); . . . // true</div><div data-v-34a3b96c>console.log( arr instanceof Object ); . . . // true</div><div data-v-34a3b96c>console.log( arr instanceof {} ); . . . // true</div><div data-v-34a3b96c>arr instanceof {} true 會往原型去找, 他不嚴謹</div><br data-v-34a3b96c><div class="cor36" data-v-34a3b96c>方法3: 原型 prototype</div><div data-v-34a3b96c> console.log( Object.prototype.toString.call(arr) ); . . . [object Array] </div><div data-v-34a3b96c> console.log( Object.prototype.toString.call(arr).indexOf(&quot;Array&quot;) ); </div><div data-v-34a3b96c>不是 -1 就證明他 是陣列</div><div data-v-34a3b96c> console.log( Object.prototype.toString.call(arr).indexOf(&quot;Array&quot;) &gt; -1 ); . . . // true </div><br data-v-34a3b96c><div class="cor36" data-v-34a3b96c>方法4: isPrototypeOf()</div><div data-v-34a3b96c> console.log( Array.prototype.isPrototyprOf(arr) ) . . . // true </div><br data-v-34a3b96c><div class="cor36" data-v-34a3b96c>方法5: constructor</div><div data-v-34a3b96c> console.log( arr.constructor.toString() ) . . . [object Array] </div><div data-v-34a3b96c> console.log( arr.constructor.toString().indexOf(&quot;Array&quot;) ) . . . // true </div><br data-v-34a3b96c><br data-v-34a3b96c><br data-v-34a3b96c><div id="twohand005" class="cardTitle" data-v-34a3b96c> 5. slice是幹嘛的、splice是否會改變原數組? </div><div data-v-34a3b96c>slice 用來擷取</div><div data-v-34a3b96c> slice方法用来截取数组的元素，返回一个新的数组。slice方法有两个参数，第一个参数为截取的开始位置，为数组下标；第二个参数为截取的结束位置。但不包含结束位置的元素 </div><br data-v-34a3b96c><div data-v-34a3b96c>var arr1 = [ &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot; ];</div><br data-v-34a3b96c><div data-v-34a3b96c>var arr2 = arr1.slice( 1,3 );</div><div data-v-34a3b96c> console.log( arr2 , arr1 ); . . . // [ &quot;b&quot;, &quot;c&quot; ] , [ &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot; ] </div><br data-v-34a3b96c><div data-v-34a3b96c>var arr3 = arr1.slice( -3 );</div><div data-v-34a3b96c>console.log( arr3 ); . . . // [ &quot;c&quot;, &quot;d&quot;, &quot;e&quot; ]</div><br data-v-34a3b96c><div data-v-34a3b96c>var arr4 = arr1.slice( 2 );</div><div data-v-34a3b96c>console.log( arr4 ); . . . // [ &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot; ]</div><br data-v-34a3b96c><br data-v-34a3b96c><br data-v-34a3b96c><div data-v-34a3b96c>splice 用來 插入 刪除 替換</div><div data-v-34a3b96c> splice方法用来向数组添加元素或者删除数组某个元素，然后删除的元素。第一个参数为插入元素或者删除元素的位置，第二个参数为要删除的元素数量。后面的每个参数都会依次添加到数组中（从删除的位置开始）。 </div><br data-v-34a3b96c><div data-v-34a3b96c>var arr1 = [ &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot; ];</div><br data-v-34a3b96c><div data-v-34a3b96c>var arr2 = arr1.splice( 1,1 ); . . . // 從 1 開始刪 1 個</div><div data-v-34a3b96c>console.log( arr2 ); . . . // [ &quot;b&quot; ]</div><div data-v-34a3b96c>console.log( arr1 ); . . . // [ &quot;a&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot; ]</div><br data-v-34a3b96c><div data-v-34a3b96c>var arr3 = [ &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot; ];</div><div data-v-34a3b96c>var arr4 = arr3.splice( 1,1,&quot;你好&quot; );</div><div data-v-34a3b96c> console.log( arr4 ); . . . // [ &quot;a&quot;, &quot;你好&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot; ] </div><br data-v-34a3b96c><br data-v-34a3b96c><div data-v-34a3b96c>區別:</div><div data-v-34a3b96c> slice 不改變原數組 返回原數組中的部分元素 用來選擇數組中的元素 </div><br data-v-34a3b96c><div data-v-34a3b96c> splice 改變原數組 返回數組中被刪除的元素组成的新數組 用於在數組中插入或刪除元素 </div><br data-v-34a3b96c><br data-v-34a3b96c><br data-v-34a3b96c><div id="twohand006" class="cardTitle" data-v-34a3b96c>6. JS 數組去重的方式?</div><div class="cor36" data-v-34a3b96c># 方法1: new set</div><div data-v-34a3b96c>var arr = [ 1,2,3,2,4,1 ];</div><div data-v-34a3b96c>console.log( new Set( arr ) );</div><div data-v-34a3b96c>發現打印的是物件</div><div data-v-34a3b96c>console.log( Array.from( new Set( arr ) ) );</div><div data-v-34a3b96c>打印出陣列</div><div data-v-34a3b96c>也可以</div><div data-v-34a3b96c>console.log( [...new Set( arr ) ] );</div><br data-v-34a3b96c><div data-v-34a3b96c>封裝:</div><div data-v-34a3b96c>function unique( arr ){</div><div class="pTwo" data-v-34a3b96c>return [ Array.from( new Set(arr) ) ]</div><div data-v-34a3b96c>}</div><div data-v-34a3b96c>console.log( unique( arr ) );</div><br data-v-34a3b96c><br data-v-34a3b96c><div class="cor36" data-v-34a3b96c>#</div><div data-v-34a3b96c>function unique( arr ){</div><div class="pTwo" data-v-34a3b96c>return [...new Set(arr)]</div><div data-v-34a3b96c>}</div><div data-v-34a3b96c>console.log( unique( arr ) );</div><br data-v-34a3b96c><br data-v-34a3b96c><div class="cor36" data-v-34a3b96c>方法2: indexOf</div><div data-v-34a3b96c> indexOf() 方法會回傳給定元素於陣列中第一個被找到之索引，若不存在於陣列中則回傳 -1 </div><br data-v-34a3b96c><div data-v-34a3b96c>var arr = [ 1,2,3,2,4,1 ];</div><div data-v-34a3b96c>function unique( arr ){</div><div class="pTwo" data-v-34a3b96c>var result = [];</div><div class="pTwo" data-v-34a3b96c>for( var i = 0 ; i ＜ arr.length ; i++ ){</div><div class="pFou" data-v-34a3b96c>if( result.indexOf( arr[i] ) == -1 ){</div><div class="pSix" data-v-34a3b96c>result.push( arr[i] );</div><div class="pFou" data-v-34a3b96c>}</div><div class="pTwo" data-v-34a3b96c>}</div><div class="pTwo" data-v-34a3b96c>return result;</div><div data-v-34a3b96c>}</div><div data-v-34a3b96c>console.log( unique( arr ) );</div><br data-v-34a3b96c><div data-v-34a3b96c>目標, 遍歷陣列, 看有沒有在 result 陣列, 沒有就添加</div><div data-v-34a3b96c>去找 indexOf( arr [ i ] )</div><div data-v-34a3b96c> 第一次去找 result 肯定是空的 ( 不存在 ) 就回傳 -1 就把他推進 result 裡面 </div><div data-v-34a3b96c>不是 -1 就不動作 完成。</div><br data-v-34a3b96c><br data-v-34a3b96c><div class="cor36" data-v-34a3b96c>方法3: reduce</div><div data-v-34a3b96c>var arr = [ 1,2,3,2,4,1 ];</div><div data-v-34a3b96c>function unique() {</div><div class="pTwo" data-v-34a3b96c>var result = arr.reduce( ( pre , item ) =&gt; {</div><div class="pFou" data-v-34a3b96c> return pre.includes ( item ) ? pre : [ ...pre , item ] </div><div class="pTwo" data-v-34a3b96c>} , [] )</div><div class="pTwo" data-v-34a3b96c>console.log ( result )</div><div data-v-34a3b96c>}</div><div data-v-34a3b96c>unique()</div><br data-v-34a3b96c><div data-v-34a3b96c>reduce 傳 2參數 1. 方法(A上一次值,B當前值) 2. 初始值</div><div data-v-34a3b96c>循環方式: 每次都是上一次結果 pre</div><div data-v-34a3b96c> 比如 第 1 次 1 , 把 1 放到 初始值 [ 1 ] , 第 2 次 [ 1, 2 ] , 每次循環都是上一次結果 </div><div data-v-34a3b96c> return 判斷有無重複 , 上次結果 包不包含 當前項目 pre.includes(item) </div><div data-v-34a3b96c>包含 ...&gt; 不要 , 直接返回當前數組 , 不包含 ...&gt; 加進 pre</div><div data-v-34a3b96c>? pre : [ ...pre , item ]</div><br data-v-34a3b96c><br data-v-34a3b96c><div class="cor36" data-v-34a3b96c>方法4: 兩層 for 循環比較</div><div data-v-34a3b96c>var arr = [ 1,2,3,2,4,1 ];</div><div data-v-34a3b96c>function unique() {</div><div class="pTwo" data-v-34a3b96c>for ( let i = 0 ; i ＜ arr.length ; i++ ) {</div><div class="pFou" data-v-34a3b96c>for ( let j = i +1 ; j ＜ arr.length ; j++ ) {</div><div class="pSix" data-v-34a3b96c>if ( arr [ i ] === arr [ j ] ) {</div><div class="pEig" data-v-34a3b96c>arr.splice ( j, 1 )</div><div class="pEig" data-v-34a3b96c>j--</div><div class="pSix" data-v-34a3b96c>}</div><div class="pFou" data-v-34a3b96c>}</div><div class="pTwo" data-v-34a3b96c>}</div><div class="pTwo" data-v-34a3b96c>return arr</div><div data-v-34a3b96c>}</div><br data-v-34a3b96c><br data-v-34a3b96c><div data-v-34a3b96c>第 1 層循環選定 1 個值</div><div data-v-34a3b96c>第 2 層循環 遍歷 其餘元素</div><div data-v-34a3b96c>依次和 這個值 比較</div><div data-v-34a3b96c>相同 ..&gt; splice 刪除</div><br data-v-34a3b96c><br data-v-34a3b96c><div class="cor36" data-v-34a3b96c>方法5: sort</div><div data-v-34a3b96c>var arr3 = [ 1,2,3,2,4,1 ];</div><div data-v-34a3b96c>function unique( arr ){</div><div data-v-34a3b96c>. arr = arr.sort();</div><div data-v-34a3b96c>. var brr = [];</div><div data-v-34a3b96c>. for( var i = 0 ; i ＜ arr.length ; i++ ){</div><div data-v-34a3b96c>. . if( arr[i] !== arr[ i-1 ] ){</div><div data-v-34a3b96c>. . . brr.push( arr[ i ] );</div><div data-v-34a3b96c>. . }</div><div data-v-34a3b96c>. }</div><div data-v-34a3b96c>. return brr;</div><div data-v-34a3b96c>}</div><div data-v-34a3b96c>console.log( unique( arr3 ) );</div><br data-v-34a3b96c><br data-v-34a3b96c><br data-v-34a3b96c><div class="cardTitle" id="twohand007" data-v-34a3b96c>7. 找出多維數組最大值?</div><div data-v-34a3b96c> 大陣列中包含 4 個小陣列, 分別找到每個小陣列中的最大值, 然後串起來成新陣列 </div><div data-v-34a3b96c>輸入:[</div><div data-v-34a3b96c>. [ 4, 5, 1, 3, ],</div><div data-v-34a3b96c>. [ 13, 27, 18, 26, ],</div><div data-v-34a3b96c>. [ 32, 35, 37, 39, ],</div><div data-v-34a3b96c>. [ 1000, 1001, 857, 1 ],</div><div data-v-34a3b96c>]</div><div data-v-34a3b96c>輸出: [ 5, 27, 39, 1001 ]</div><br data-v-34a3b96c><br data-v-34a3b96c><div data-v-34a3b96c>function fnArr( arr ){</div><div data-v-34a3b96c>. var newArr = [];</div><div data-v-34a3b96c>. arr.forEach(( item, index )=&gt;{</div><div data-v-34a3b96c>. . newArr.push( Math.max( ...item ) )</div><div data-v-34a3b96c>. })</div><div data-v-34a3b96c>. return newArr;</div><div data-v-34a3b96c>}</div><div data-v-34a3b96c>console.log( fnArr([</div><div data-v-34a3b96c>. [ 4, 5, 1, 3, ],</div><div data-v-34a3b96c>. [ 13, 27, 18, 26, ],</div><div data-v-34a3b96c>. [ 32, 35, 37, 39, ],</div><div data-v-34a3b96c>. [ 1000, 1001, 857, 1 ],</div><div data-v-34a3b96c>]));</div><br data-v-34a3b96c><div data-v-34a3b96c>首先 遍歷 item 是每一項 [ 4, 5, 1, 3, ]</div><div data-v-34a3b96c>取裡面最大值 Math.max(...item)</div><br data-v-34a3b96c><br data-v-34a3b96c><br data-v-34a3b96c><div id="twohand008" class="cardTitle" data-v-34a3b96c>8. 給字串新增方法實現功能</div><div data-v-34a3b96c> 給字串物件定義一個addPrefix函數, 當傳入一個字串時, 他會返回新的帶有指定前綴的字串, 例如: </div><div data-v-34a3b96c>console.log( &quot;world&quot;.addPrefix(&quot;hello&quot;) )</div><div data-v-34a3b96c>控制台輸出: &quot;helloworld&quot;</div><br data-v-34a3b96c><div data-v-34a3b96c>var str = &quot;你好&quot;;</div><div data-v-34a3b96c>String.prototype.addTest = function(){</div><div data-v-34a3b96c>. return 111;</div><div data-v-34a3b96c>}</div><div data-v-34a3b96c>console.log( str.addPrefix() ) . . . // 打印 111</div><br data-v-34a3b96c><br data-v-34a3b96c><div data-v-34a3b96c>String.prototype.addTest = function(){</div><div data-v-34a3b96c>. return this;</div><div data-v-34a3b96c>}</div><div data-v-34a3b96c>console.log( str.addPrefix() ) . . . // 打印 你好</div><br data-v-34a3b96c><br data-v-34a3b96c><div data-v-34a3b96c>String.prototype.addTest = function(){</div><div data-v-34a3b96c>. return str + this;</div><div data-v-34a3b96c>}</div><div data-v-34a3b96c> console.log( &quot;world&quot;.addPrefix(&quot;hello&quot;) ) . . . // 打印 worldhello </div><br data-v-34a3b96c><br data-v-34a3b96c><br data-v-34a3b96c><div id="twohand009" class="cardTitle" data-v-34a3b96c> 9. 找出字符串出現最多次數的字符以及次數 </div><div data-v-34a3b96c>判斷一個字串中出現次數最多的字符, 並統計次數</div><div data-v-34a3b96c> charAt() 方法返回一个由给定索引處的單個 UTF-16 碼元構成的新字串。 </div><div data-v-34a3b96c>var john = { . . . //forin複習</div><div data-v-34a3b96c>. firstName: &#39;John&#39;,</div><div data-v-34a3b96c>. lastName: &#39;Doe&#39;</div><div data-v-34a3b96c>};</div><div data-v-34a3b96c>for (var prop in john) {</div><div data-v-34a3b96c>. console.log(prop + &#39;:&#39; + john[prop]);</div><div data-v-34a3b96c>}</div><br data-v-34a3b96c><div data-v-34a3b96c>var str = &quot;aaabbbbbbbbbccccccc&quot;</div><div data-v-34a3b96c>var obj = {};</div><div data-v-34a3b96c>for( var i = 0 ; i ＜ str.length ; i++ ){</div><div data-v-34a3b96c>. var char = str.charAt(i);</div><div data-v-34a3b96c>. if( obj[ char ] ){</div><div data-v-34a3b96c>. . obj[ char ]++</div><div data-v-34a3b96c>. } else {</div><div data-v-34a3b96c>. . obj[ char ] = 1;</div><div data-v-34a3b96c>. }</div><div data-v-34a3b96c>}</div><div data-v-34a3b96c>console.log( obj ); . . . 每個字符和次數都統計出來了</div><br data-v-34a3b96c><div data-v-34a3b96c>目標 弄一個對象 把值放進去 { a:3, b:10, c:15 }</div><div data-v-34a3b96c>遍歷字串, 如果 obj 沒有則 obj[ char ] = 1</div><div data-v-34a3b96c>如果 obj 有則 value值++</div><br data-v-34a3b96c><div data-v-34a3b96c>var max = 0;</div><div data-v-34a3b96c>for( var key in obj ){</div><div data-v-34a3b96c>. if( max ＜ obj[ key ] ){</div><div data-v-34a3b96c>. . max = obj[ key ];</div><div data-v-34a3b96c>. }</div><div data-v-34a3b96c>}</div><div data-v-34a3b96c>console.log( max );</div><br data-v-34a3b96c><div data-v-34a3b96c>目標 到物件的值找最大值 { a:3, b:10, c:15 } 最大值 15</div><div data-v-34a3b96c>遍歷物件 for in</div><div data-v-34a3b96c>如果 max變數 小於 obj[key]</div><div data-v-34a3b96c>key 是物件中每一項 a b c</div><div data-v-34a3b96c>obj[key] 是統計值 3 10 15</div><div data-v-34a3b96c>如果 max變數 小於 obj[key] 就賦值 就找到最大值 15</div><br data-v-34a3b96c><div data-v-34a3b96c>for( var key in obj ){</div><div data-v-34a3b96c>. if( obj[key] == max ){</div><div data-v-34a3b96c>. . console.log( &quot;最多字符是&quot; + key );</div><div data-v-34a3b96c>. . console.log( &quot;出現次數&quot; + max );</div><div data-v-34a3b96c>. }</div><div data-v-34a3b96c>}</div><br data-v-34a3b96c><div data-v-34a3b96c>目標 找到最大值 15 對應的 key</div><div data-v-34a3b96c>如果 obj[key] == max 就找到了</div><br data-v-34a3b96c><br data-v-34a3b96c><br data-v-34a3b96c><div id="twohand010" class="cardTitle" data-v-34a3b96c>10. 作用域考题</div><div data-v-34a3b96c>function demo(){</div><div data-v-34a3b96c>. var n = 2;</div><div data-v-34a3b96c>. if( true ){</div><div data-v-34a3b96c>. . var n = 1;</div><div data-v-34a3b96c>. }</div><div data-v-34a3b96c>. console.log( n );</div><div data-v-34a3b96c>}</div><div data-v-34a3b96c>demo(); . . . // 打印 1</div><br data-v-34a3b96c><div data-v-34a3b96c>function demo(){</div><div data-v-34a3b96c>. let n = 2;</div><div data-v-34a3b96c>. if( true ){</div><div data-v-34a3b96c>. . let n = 1;</div><div data-v-34a3b96c>. }</div><div data-v-34a3b96c>. console.log( n );</div><div data-v-34a3b96c>}</div><div data-v-34a3b96c>demo(); . . . // 打印 2</div><br data-v-34a3b96c><br data-v-34a3b96c><br data-v-34a3b96c><div id="twohand011" class="cardTitle" data-v-34a3b96c>11. 將下列物件進行合併</div><div data-v-34a3b96c>const a = { a:1, b:4 }</div><div data-v-34a3b96c>const b = { b:2, c:3 }</div><br data-v-34a3b96c><div data-v-34a3b96c>方法1: Object.assign</div><div data-v-34a3b96c>const a = { a:1, b:4 }</div><div data-v-34a3b96c>const b = { b:2, c:3 }</div><div data-v-34a3b96c>let obj1 = Object.assign( a, b );</div><div data-v-34a3b96c>console.log( obj1 ); . . . // { a:1, b:2, c:3 }</div><br data-v-34a3b96c><div data-v-34a3b96c>方法2: ...</div><div data-v-34a3b96c>const a = { a:1, b:4 }</div><div data-v-34a3b96c>const b = { b:2, c:3 }</div><div data-v-34a3b96c>;et obj2 = {...a, ...b}</div><div data-v-34a3b96c>console.log( obj1 ); . . . // { a:1, b:2, c:3 }</div><br data-v-34a3b96c><div data-v-34a3b96c>方法3: 自己封裝</div><div data-v-34a3b96c>const a = { a:1, b:4 }</div><div data-v-34a3b96c>const b = { b:2, c:3 }</div><div data-v-34a3b96c>function extend( target, source ){</div><div data-v-34a3b96c>. for( var obj in source )</div><div data-v-34a3b96c>. . console.log( key ); . . . // 打印 b . . 打印 c</div><div data-v-34a3b96c>. . target[ obj ] = source[ obj ];</div><div data-v-34a3b96c>. }</div><div data-v-34a3b96c>. return target;</div><div data-v-34a3b96c>}</div><div data-v-34a3b96c>console.log( extend( a, b ) )</div><br data-v-34a3b96c><br data-v-34a3b96c><br data-v-34a3b96c></div></div></div>',1),Zi=Gd(()=>v("div",{class:"toTopButton"},[v("div",{class:"disCen"},"___"),v("div",{class:"disCen"},"▲")],-1)),ar=[Zi],sr=Gd(()=>v("div",{class:"toBotButton"},[v("div",{class:"disCen"},"▼"),v("div",{class:"disCen"},"￣")],-1)),dr=[sr],tr={__name:"JsPageTwoOne",setup(a){const s=ua(!1);window.addEventListener("scroll",function(){s.value=window.scrollY>0});function d(){window.scrollTo({top:0,left:0,behavior:"smooth"})}function n(){window.scrollTo({top:999999,left:0,behavior:"smooth"})}function t(c){window.scrollTo({top:document.getElementById(`${c}`).offsetTop,behavior:"smooth"})}return(c,e)=>(da(),ca(Q,null,[v("section",null,[v("div",Ui,[v("div",Ki,[v("div",Xi,[Yi,Gi,v("div",{onClick:e[0]||(e[0]=l=>t("twohand001")),class:"leftNavText"}," 作用域考题 "),v("div",{onClick:e[1]||(e[1]=l=>t("twohand002")),class:"leftNavText"},"物件考题"),v("div",{onClick:e[2]||(e[2]=l=>t("twohand003")),class:"leftNavText"}," 作用域+this指向+原型 "),v("div",{onClick:e[3]||(e[3]=l=>t("twohand004")),class:"leftNavText"}," 判斷變量是不是數組 "),v("div",{onClick:e[4]||(e[4]=l=>t("twohand005")),class:"leftNavText"}," slice&splice "),v("div",{onClick:e[5]||(e[5]=l=>t("twohand006")),class:"leftNavText"}," 數組去重的方式 "),v("div",{onClick:e[6]||(e[6]=l=>t("twohand007")),class:"leftNavText"}," 找出多維數組最大值 "),v("div",{onClick:e[7]||(e[7]=l=>t("twohand008")),class:"leftNavText"}," 給字串新增方法實現功能 "),v("div",{onClick:e[8]||(e[8]=l=>t("twohand009")),class:"leftNavText"}," 找出字符串出現次數 "),v("div",{onClick:e[9]||(e[9]=l=>t("twohand010")),class:"leftNavText"}," 作用域考题 "),v("div",{onClick:e[10]||(e[10]=l=>t("twohand011")),class:"leftNavText"}," 將下列物件進行合併 "),v("div",{onClick:e[11]||(e[11]=l=>t("twohand012")),class:"leftNavText"})])])]),Qi]),v("div",null,[X(T(W,{name:"fade",tag:"div"},{default:C(()=>[v("div",{onClick:d,class:"toTop"},ar)]),_:1},512),[[Y,s.value]]),X(T(W,{name:"fade",tag:"div"},{default:C(()=>[v("div",{onClick:n,class:"toBot"},dr)]),_:1},512),[[Y,s.value]])])],64))}},nr=ra(tr,[["__scopeId","data-v-34a3b96c"]]);const hv=a=>(ma("data-v-e95ae228"),a=a(),ha(),a),er=U('<section data-v-e95ae228><div class="leftNav" data-v-e95ae228><div class="leftNavContainer" data-v-e95ae228><div class="leftNavLayout" data-v-e95ae228><br data-v-e95ae228><br data-v-e95ae228><div class="leftNavText" data-v-e95ae228></div><div class="leftNavText" data-v-e95ae228></div><div class="leftNavText" data-v-e95ae228></div><div class="leftNavText" data-v-e95ae228></div></div></div></div><div class="Main" data-v-e95ae228><div class="mainContainer" data-v-e95ae228><div class="mainLayout" data-v-e95ae228><br data-v-e95ae228><br data-v-e95ae228><div class="cardTitle cor36" data-v-e95ae228>9.輸出結果:</div><div data-v-e95ae228>alert (true + 1); . . . // 2</div><div data-v-e95ae228>alert (&quot;name&quot; + true); . . . // nametrue</div><div data-v-e95ae228>alert (undefined + 1); . . . // NaN</div><div data-v-e95ae228>alert (typeof null); . . . // object</div><div data-v-e95ae228>alert (typeof NaN); . . . // number</div><div data-v-e95ae228>alert (typeof undefined); . . . // undefined</div><br data-v-e95ae228><div data-v-e95ae228>1.隱式轉換 true 是 1 false 是 0</div><div data-v-e95ae228>2.字符串和任何相加, 其他都變字符串, 變成連接</div><br data-v-e95ae228><br data-v-e95ae228><br data-v-e95ae228><div class="cor36" data-v-e95ae228>輸出多少?</div><div data-v-e95ae228>for ( var i=0 ; i＜3 ; i++ ) {</div><div data-v-e95ae228>. setTimeout(function(){</div><div data-v-e95ae228>. . console.log(i)</div><div data-v-e95ae228>. },1000*i)</div><div data-v-e95ae228>}</div><div data-v-e95ae228>console.log(222)</div><br data-v-e95ae228><div data-v-e95ae228>setTimeout 進入事件循環, 而for循環是同步的</div><div data-v-e95ae228>第一次 i=0 , 0＜3 , 1000*0 的 setTime 進入事件循環列隊</div><div data-v-e95ae228>第二次 i=1 , 1＜3 , 1000*1 的 setTime 進入事件循環列隊</div><div data-v-e95ae228>第三次 i=2 , 2＜3 , 1000*2 的 setTime 進入事件循環列隊</div><div data-v-e95ae228>等for執行完才執行 事件循環裡的 setTimeout</div><div data-v-e95ae228>i=3 跳出循環</div><div data-v-e95ae228>結果</div><div data-v-e95ae228>222</div><div data-v-e95ae228>3</div><div data-v-e95ae228>隔1秒再打印3</div><div data-v-e95ae228>隔1秒再打印3</div><br data-v-e95ae228><br data-v-e95ae228><br data-v-e95ae228><div class="cor36" data-v-e95ae228>輸出多少?</div><div data-v-e95ae228>setTimeout(function(){</div><div data-v-e95ae228>. console.log(&quot;1&quot;);</div><div data-v-e95ae228>})</div><div data-v-e95ae228>new Promise((resolve)=&gt;{</div><div data-v-e95ae228>. console.log( &quot;1 promise 1&quot;);</div><div data-v-e95ae228>. resolve();</div><div data-v-e95ae228>}).then(()=&gt;{</div><div data-v-e95ae228>. console.log(&quot;微1&quot;)</div><div data-v-e95ae228>}).then(()=&gt;{</div><div data-v-e95ae228>. console.log(&quot;微2&quot;)</div><div data-v-e95ae228>})</div><div data-v-e95ae228>console.log(2);</div><br data-v-e95ae228><div data-v-e95ae228>同步 &gt; 微(事件循環) &gt; 宏 &gt; 微 ...</div><div data-v-e95ae228>console 同步 , promise.them 才是微</div><div data-v-e95ae228>第一個打印: 1 promise 1</div><div data-v-e95ae228>第二個打印: 2</div><div data-v-e95ae228>微任務 .then</div><div data-v-e95ae228>第三個打印: 微1</div><div data-v-e95ae228>第四個打印: 微2</div><div data-v-e95ae228>宏任務 setTimeout</div><div data-v-e95ae228>第五個打印: 1</div><br data-v-e95ae228><br data-v-e95ae228><br data-v-e95ae228><div class="cor36" data-v-e95ae228>輸出多少?</div><div data-v-e95ae228>Promise.resolve(&quot;333&quot;).then(res=&gt;{</div><div data-v-e95ae228>. console.log( res );</div><div data-v-e95ae228>. setTimeout(()=&gt;{</div><div data-v-e95ae228>. . console.log(&quot;Promise setTimeout&quot;)</div><div data-v-e95ae228>. },0)</div><div data-v-e95ae228>})</div><div data-v-e95ae228>setTimeout(()=&gt;{</div><div data-v-e95ae228>. console.log(111);</div><div data-v-e95ae228>. Promise.resolve(&quot;setTimeout Promise&quot;).then(res=&gt;{</div><div data-v-e95ae228>. . console.log( res );</div><div data-v-e95ae228>. })</div><div data-v-e95ae228>},0)</div><div data-v-e95ae228>console.log( 222 );</div><br data-v-e95ae228><div data-v-e95ae228>同步 &gt; 微(事件循環) &gt; 宏 &gt; 微 &gt; 宏 ...</div><div data-v-e95ae228>1.分同步異步 &gt; 先執行同步 &gt; 打印222</div><div data-v-e95ae228>2.先推微再推宏 &gt; 執行棧順序 &gt; 微Promise.then 宏setTimeout</div><div data-v-e95ae228>3.執行微 打印333</div><div data-v-e95ae228> 4.遇到promise推了一個setTimeout &gt; 目前2個宏 &gt; 誰先 &gt; WEBapi先推先出 &gt; 111先 </div><div data-v-e95ae228>5.執行宏 打印111</div><div data-v-e95ae228> 6.這個宏任務推了一個微任務Promise.then.setTimeout &gt; 微任務插隊宏任務 </div><div data-v-e95ae228>7.打印setTimeoutPromise</div><div data-v-e95ae228>8.最後執行宏任務打印Promise setTimeout</div><br data-v-e95ae228><br data-v-e95ae228><br data-v-e95ae228><div class="cor36" data-v-e95ae228>輸出多少?</div><div data-v-e95ae228>(function(){</div><div data-v-e95ae228>. var a = b = 10;</div><div data-v-e95ae228>})()</div><div data-v-e95ae228>console.log(a) . . . // a is not defined</div><div data-v-e95ae228> console.log(b) . . . // 10 b=10 沒寫默認window.b=10, 相當於全局var b=10 </div><br data-v-e95ae228><br data-v-e95ae228><br data-v-e95ae228><div class="cor36" data-v-e95ae228>輸出多少?</div><div data-v-e95ae228>function c(){</div><div data-v-e95ae228>. var b = 1</div><div data-v-e95ae228>. function a(){</div><div data-v-e95ae228>. . console.log(b)</div><div data-v-e95ae228>. . var b = 2;</div><div data-v-e95ae228>. . console.log(b)</div><div data-v-e95ae228>. }</div><div data-v-e95ae228>. a()</div><div data-v-e95ae228>. console.log(b)</div><div data-v-e95ae228>}</div><div data-v-e95ae228>c()</div><br data-v-e95ae228><div data-v-e95ae228>先看本層作用域有沒有此變量 (注意變量提升)</div><div data-v-e95ae228>a()裡面有var b提升, 第一個console.log(b) . . . // undefined</div><div data-v-e95ae228>第二個console.log(b) . . . // 2 因為上面有</div><div data-v-e95ae228>第三個console.log(b)本層有是 1</div><br data-v-e95ae228><br data-v-e95ae228><br data-v-e95ae228><div class="cor36" data-v-e95ae228>輸出多少?</div><div data-v-e95ae228>var name = &quot;a&quot;;</div><div data-v-e95ae228>(function(){</div><div data-v-e95ae228>. if( typeof name == &quot;undefined&quot; ){</div><div data-v-e95ae228>. . var name = &quot;b&quot;;</div><div data-v-e95ae228>. . console.log(&quot;111&quot;+name);</div><div data-v-e95ae228>. } else {</div><div data-v-e95ae228>. . console.log(&quot;222&quot;+name);</div><div data-v-e95ae228>. }</div><div data-v-e95ae228>})()</div><br data-v-e95ae228><div data-v-e95ae228>先看本層作用域有沒有此變量 (注意變量提升)</div><div data-v-e95ae228>注意JS除了函數外, JS沒有塊級作用域</div><div data-v-e95ae228>var先變量提升到function, 就算if( false )也是提升</div><div data-v-e95ae228>所以 var name, 所以name == undefined, 所以打印 111b</div><br data-v-e95ae228><br data-v-e95ae228><br data-v-e95ae228><div class="cor36" data-v-e95ae228>輸出多少?</div><div data-v-e95ae228>var bar = 1;</div><div data-v-e95ae228>function test(){</div><div data-v-e95ae228>. console.log( bar )</div><div data-v-e95ae228>. var bar = 2;</div><div data-v-e95ae228>. console.log( bar )</div><div data-v-e95ae228>}</div><div data-v-e95ae228>test();</div><br data-v-e95ae228><div data-v-e95ae228>先看本層作用域有沒有此變量 (注意變量提升)</div><div data-v-e95ae228>第一個bar undefined</div><div data-v-e95ae228>第二個bar 2</div><br data-v-e95ae228><br data-v-e95ae228><br data-v-e95ae228><div class="cor36" data-v-e95ae228>輸出多少?</div><div data-v-e95ae228>function fun(){</div><div data-v-e95ae228>. a = 10;</div><div data-v-e95ae228>. console.log( a );</div><div data-v-e95ae228>. var a = 20;</div><div data-v-e95ae228>. console.log( a );</div><div data-v-e95ae228>}</div><div data-v-e95ae228>fun(); . . . // 第一個打印 10 , 第二個打印 20</div><br data-v-e95ae228><br data-v-e95ae228><br data-v-e95ae228><div class="cor36" data-v-e95ae228>輸出多少?</div><div data-v-e95ae228>var obj1 = {</div><div data-v-e95ae228>. a:&quot;hellow&quot;</div><div data-v-e95ae228>}</div><div data-v-e95ae228>var obj2 = obj1;</div><div data-v-e95ae228>obj2.a= &quot;world&quot;;</div><div data-v-e95ae228>console.log(obj1);</div><div data-v-e95ae228>(function(){</div><div data-v-e95ae228>. console.log( a );</div><div data-v-e95ae228>. var a = 1;</div><div data-v-e95ae228>})();</div><div data-v-e95ae228>第一個打印 {a:world}</div><div data-v-e95ae228>第二個打印 undefined</div><br data-v-e95ae228><br data-v-e95ae228><br data-v-e95ae228><div class="cor36" data-v-e95ae228>輸出多少?</div><div data-v-e95ae228>var a = {}</div><div data-v-e95ae228>var b = {</div><div data-v-e95ae228>. key: &quot;a&quot;</div><div data-v-e95ae228>}</div><div data-v-e95ae228>var c = {</div><div data-v-e95ae228>. key: &quot;c&quot;</div><div data-v-e95ae228>}</div><div data-v-e95ae228>a[b] = &quot;123&quot;;</div><div data-v-e95ae228>a[c] = &quot;456&quot;;</div><div data-v-e95ae228>console.log( a[b] )</div><br data-v-e95ae228><div data-v-e95ae228>這相當於 let m = {}</div><div data-v-e95ae228>m.a = 1;</div><div data-v-e95ae228>m.a = 2;</div><div data-v-e95ae228>往物件裡面加內容,物件的key為字串</div><div data-v-e95ae228>結果為 456</div><div data-v-e95ae228>for(var k in a){</div><div data-v-e95ae228>. console.log( typeof k )</div><div data-v-e95ae228>}</div><br data-v-e95ae228><br data-v-e95ae228><br data-v-e95ae228><div class="cor36" data-v-e95ae228>輸出多少?</div><div data-v-e95ae228>function Foo(){</div><div data-v-e95ae228>. getName = function(){console.log(1)}</div><div data-v-e95ae228>. return this;</div><div data-v-e95ae228>}</div><div data-v-e95ae228>Foo.getName = function(){console.log(2)}</div><div data-v-e95ae228>Foo.prototype.getName = function(){console.log(3)}</div><div data-v-e95ae228>var getName = function(){console.log(4)}</div><div data-v-e95ae228>function getName(){</div><div data-v-e95ae228>. console.log(5)</div><div data-v-e95ae228>}</div><br data-v-e95ae228><div data-v-e95ae228>Foo.getName(); . . . // 2</div><div data-v-e95ae228>getName(); . . . // 4</div><div data-v-e95ae228>Foo().getName();</div><div data-v-e95ae228>getName();</div><div data-v-e95ae228>new Foo().getName();</div><br data-v-e95ae228><div data-v-e95ae228>1.getName=function...是全局的window.getName=...</div><br data-v-e95ae228><div data-v-e95ae228>2.Foo.getName() 先找函數本身 打印出 2</div><br data-v-e95ae228><div data-v-e95ae228>3.Foo.getName() 的 Foo 沒有加括號代表他沒有執行</div><br data-v-e95ae228><div data-v-e95ae228> 4.getName() 找到變量 var getName =.. 和函數 function getName(){.. </div><div data-v-e95ae228>(因作用域) 普通變量 &gt; 函數 . . . 所以打印出 4</div><br data-v-e95ae228><div data-v-e95ae228>5.Foo().getName();</div><div data-v-e95ae228>Foo() 先執行 做 //getName = function(){console.log(1)}</div><div data-v-e95ae228>然後 return this . . . return 出 window</div><div data-v-e95ae228>所以是 window.getName() . . . 因上上行 所以打印出 1</div><br data-v-e95ae228><div data-v-e95ae228>6.getName(); . . . 因上上上行覆蓋, 所以打印出 1</div><br data-v-e95ae228><div data-v-e95ae228>7.new Foo().getName(); 物件找方法</div><div data-v-e95ae228> 先在物件本身找 &gt; 構造函數中找 &gt; 物件原型中找 &gt; 構造函數原型中找 &gt; 物件上一層原型查找 </div><div data-v-e95ae228>本身沒有</div><div data-v-e95ae228>構造函數 function Foo(){ 本身裡不是 this. getName是 window.</div><div data-v-e95ae228>物件原型中找 __proto__ 沒有</div><div data-v-e95ae228>物件原型和構造函數原型他們是一個原型</div><div data-v-e95ae228>所以看構造函數原型 , 打印出 3</div><div data-v-e95ae228>Foo.prototype.getName = function(){console.log(3)}</div><br data-v-e95ae228><br data-v-e95ae228><br data-v-e95ae228><div class="cor36" data-v-e95ae228>輸出多少?</div><div data-v-e95ae228>var o = {</div><div data-v-e95ae228>. a:10,</div><div data-v-e95ae228>. b:{</div><div data-v-e95ae228>. . fn:function(){</div><div data-v-e95ae228>. . . console.log( this.a );</div><div data-v-e95ae228>. . . console.log( this );</div><div data-v-e95ae228>. . }</div><div data-v-e95ae228>. }</div><div data-v-e95ae228>}</div><div data-v-e95ae228>o.b.fn()</div><br data-v-e95ae228><div data-v-e95ae228>重點看誰執行 fn, 所以 fn 裡面的 this 指向 b</div><div data-v-e95ae228>console.log( this.a ); . . . 打印 undefined</div><div data-v-e95ae228>console.log( this ); . . . 打印 fn</div><br data-v-e95ae228><br data-v-e95ae228><br data-v-e95ae228><div class="cor36" data-v-e95ae228>輸出多少?</div><div data-v-e95ae228>window.name = &quot;ByteDance&quot;;</div><div data-v-e95ae228>function A(){</div><div data-v-e95ae228>. this.name = 123;</div><div data-v-e95ae228>}</div><div data-v-e95ae228>A.prototype.getA = function(){</div><div data-v-e95ae228>. console.log( this );</div><div data-v-e95ae228>. return this.name + 1;</div><div data-v-e95ae228>}</div><div data-v-e95ae228>let a = new A();</div><div data-v-e95ae228>let funcA = a.getA;</div><div data-v-e95ae228>funcA();</div><div data-v-e95ae228>console.log( funcA() )</div><br data-v-e95ae228><div data-v-e95ae228>先注意 let funcA = a.getA 的 a.getA 有沒有括號,差很大</div><div data-v-e95ae228>a.getA 沒括號 裡面代碼不執行 返回函數體</div><div data-v-e95ae228> a.getA 沒執行, 相當於把這個 A.prototype.getA = function(){ 函數賦給了 funcA </div><div data-v-e95ae228> funcA() 執行了 A.prototype.getA = function(){ 裡面的 console.log(this) 打印 window </div><div data-v-e95ae228>console.log( funcA() ) 要打印 return this.name + 1;</div><div data-v-e95ae228>而 this 代表 window, this.name 找到 &quot;ByteDance&quot;</div><div data-v-e95ae228>console.log( funcA() ) 打印出 &quot;ByteDance1&quot;</div><br data-v-e95ae228><br data-v-e95ae228><br data-v-e95ae228><div class="cor36" data-v-e95ae228>輸出多少?</div><div data-v-e95ae228>window.name = &quot;ByteDance&quot;;</div><div data-v-e95ae228>function A(){</div><div data-v-e95ae228>. this.name = 123;</div><div data-v-e95ae228>}</div><div data-v-e95ae228>A.prototype.getA = function(){</div><div data-v-e95ae228>. console.log( this );</div><div data-v-e95ae228>. return this.name + 1;</div><div data-v-e95ae228>}</div><div data-v-e95ae228>let a = new A();</div><div data-v-e95ae228>let funcA = a.getA();</div><div data-v-e95ae228>funcA;</div><br data-v-e95ae228><div data-v-e95ae228>let funcA = a.getA() 調用直接執行</div><div data-v-e95ae228>執行 A.prototype.getA = function(){</div><div data-v-e95ae228>裡面的 console.log( this ) this 指 A</div><div data-v-e95ae228>打印出 A{name: 123}</div><div data-v-e95ae228>funcA沒加括號 裡面代碼不執行 有return則返回函數體</div><br data-v-e95ae228><br data-v-e95ae228><br data-v-e95ae228><div class="cor36" data-v-e95ae228>輸出多少?</div><div data-v-e95ae228>var length = 10;</div><div data-v-e95ae228>function fn(){</div><div data-v-e95ae228>. return this.length</div><div data-v-e95ae228>}</div><div data-v-e95ae228>var obj = {</div><div data-v-e95ae228>. length: 5,</div><div data-v-e95ae228>. test1: function(){</div><div data-v-e95ae228>. . return fn();</div><div data-v-e95ae228>. }</div><div data-v-e95ae228>}</div><div data-v-e95ae228>obj.test2 = fn;</div><div data-v-e95ae228>console.log( obj.test1() );</div><div data-v-e95ae228>console.log( fn()===obj.test2() );</div><div data-v-e95ae228>console.log( obj.test1() == obj.test2() );</div><br data-v-e95ae228><div data-v-e95ae228>注意 obj.test2 = fn 沒加掛號 相當於 把這個函數賦給了</div><div data-v-e95ae228>沒加掛號 裡面代碼不執行 有return則返回函數體</div><div data-v-e95ae228>相當於 把這個 function fn(){ 函數賦給了 obj.test2</div><div data-v-e95ae228>所以 obj 多了一個 test2: function</div><br data-v-e95ae228><div data-v-e95ae228>console.log( obj.test1() )</div><div data-v-e95ae228>test1 return fn() , fn帶括號要執行</div><div data-v-e95ae228>fn return this.length, 這個this 指向 window</div><div data-v-e95ae228>return 10, return 10+1</div><div data-v-e95ae228>console.log( obj.test1() ) 打印出 11</div><br data-v-e95ae228><div data-v-e95ae228>console.log( fn()===obj.test2() )</div><div data-v-e95ae228>obj.test2() 裡面 return this.length,</div><div data-v-e95ae228>this 指向 obj , this.length 是 5</div><div data-v-e95ae228>而 fn() 的 this 指向 window , window.length 是 10</div><div data-v-e95ae228>console.log( fn()===obj.test2() ) 是 false</div><br data-v-e95ae228><div data-v-e95ae228>console.log( obj.test1() == obj.test2() )</div><div data-v-e95ae228>obj.test2() 上面討論 5</div><div data-v-e95ae228>obj.test1() 上面討論 11</div><br data-v-e95ae228><br data-v-e95ae228><br data-v-e95ae228><br data-v-e95ae228><div class="cor36" data-v-e95ae228>如何用 indexOf 數組去重?</div><div data-v-e95ae228> indexOf() 方法會回傳給定元素於陣列中第一個被找到之索引，若不存在於陣列中則回傳 -1 </div><br data-v-e95ae228><div data-v-e95ae228>var arr2 = [ 1,2,3,2,4,1 ];</div><div data-v-e95ae228>function unique( arr ){</div><div data-v-e95ae228>. var brr = [];</div><div data-v-e95ae228>. for( var i = 0 ; i ＜ arr.length ; i++ ){</div><div data-v-e95ae228>. . if( brr.indexOf( arr[i] ) == -1 ){</div><div data-v-e95ae228>. . . brr.push( arr[i] );</div><div data-v-e95ae228>. . }</div><div data-v-e95ae228>. }</div><div data-v-e95ae228>. return brr;</div><div data-v-e95ae228>}</div><div data-v-e95ae228>console.log( unique( arr2 ) );</div><br data-v-e95ae228><div data-v-e95ae228>目標, 遍歷陣列, 看有沒有在 brr 陣列, 沒有就添加</div><div data-v-e95ae228>brr去找indexOf(arr[i])</div><div data-v-e95ae228>第一次去找brr肯定是空的(不存在)就回傳-1就把他推進brr裡面</div><div data-v-e95ae228>不是-1就不動作 完成。</div><br data-v-e95ae228><br data-v-e95ae228><br data-v-e95ae228><br data-v-e95ae228><div class="cor36" data-v-e95ae228>找出多维数组最大值?</div><div data-v-e95ae228> 大陣列中包含 4 個小陣列, 分別找到每個小陣列中的最大值, 然後串起來成新陣列 </div><div data-v-e95ae228>輸入:[</div><div data-v-e95ae228>. [ 4, 5, 1, 3, ],</div><div data-v-e95ae228>. [ 13, 27, 18, 26, ],</div><div data-v-e95ae228>. [ 32, 35, 37, 39, ],</div><div data-v-e95ae228>. [ 1000, 1001, 857, 1 ],</div><div data-v-e95ae228>]</div><div data-v-e95ae228>輸出: [ 5, 27, 39, 1001 ]</div><br data-v-e95ae228><br data-v-e95ae228><div data-v-e95ae228>function fnArr( arr ){</div><div data-v-e95ae228>. var newArr = [];</div><div data-v-e95ae228>. arr.forEach(( item, index )=&gt;{</div><div data-v-e95ae228>. . newArr.push( Math.max( ...item ) )</div><div data-v-e95ae228>. })</div><div data-v-e95ae228>. return newArr;</div><div data-v-e95ae228>}</div><div data-v-e95ae228>console.log( fnArr([</div><div data-v-e95ae228>. [ 4, 5, 1, 3, ],</div><div data-v-e95ae228>. [ 13, 27, 18, 26, ],</div><div data-v-e95ae228>. [ 32, 35, 37, 39, ],</div><div data-v-e95ae228>. [ 1000, 1001, 857, 1 ],</div><div data-v-e95ae228>]));</div><br data-v-e95ae228><div data-v-e95ae228>首先 遍歷 item 是每一項 [ 4, 5, 1, 3, ]</div><div data-v-e95ae228>取裡面最大值 Math.max(...item)</div><br data-v-e95ae228><br data-v-e95ae228><br data-v-e95ae228><div class="cor36" data-v-e95ae228> 給字串物件定義一個addPrefix函數, 當傳入一個字串時, 他會返回新的帶有指定前綴的字串, 例如: </div><div data-v-e95ae228>console.log( &quot;world&quot;.addPrefix(&quot;hello&quot;) )</div><div data-v-e95ae228>控制台輸出: &quot;helloworld&quot;</div><br data-v-e95ae228><div data-v-e95ae228>var str = &quot;你好&quot;;</div><div data-v-e95ae228>String.prototype.addTest = function(){</div><div data-v-e95ae228>. return 111;</div><div data-v-e95ae228>}</div><div data-v-e95ae228>console.log( str.addPrefix() ) . . . // 打印 111</div><br data-v-e95ae228><br data-v-e95ae228><div data-v-e95ae228>String.prototype.addTest = function(){</div><div data-v-e95ae228>. return this;</div><div data-v-e95ae228>}</div><div data-v-e95ae228>console.log( str.addPrefix() ) . . . // 打印 你好</div><br data-v-e95ae228><br data-v-e95ae228><div data-v-e95ae228>String.prototype.addTest = function(){</div><div data-v-e95ae228>. return str + this;</div><div data-v-e95ae228>}</div><div data-v-e95ae228> console.log( &quot;world&quot;.addPrefix(&quot;hello&quot;) ) . . . // 打印 worldhello </div><br data-v-e95ae228><br data-v-e95ae228><br data-v-e95ae228><br data-v-e95ae228><div class="cor36" data-v-e95ae228>判斷一個字串中出現次數最多的字符, 並統計次數</div><div data-v-e95ae228> charAt() 方法返回一个由给定索引处的单个 UTF-16 码元构成的新字符串。 </div><div data-v-e95ae228>var john = { . . . //forin複習</div><div data-v-e95ae228>. firstName: &#39;John&#39;,</div><div data-v-e95ae228>. lastName: &#39;Doe&#39;</div><div data-v-e95ae228>};</div><div data-v-e95ae228>for (var prop in john) {</div><div data-v-e95ae228>. console.log(prop + &#39;:&#39; + john[prop]);</div><div data-v-e95ae228>}</div><br data-v-e95ae228><div data-v-e95ae228>var str = &quot;aaabbbbbbbbbccccccc&quot;</div><div data-v-e95ae228>var obj = {};</div><div data-v-e95ae228>for( var i = 0 ; i ＜ str.length ; i++ ){</div><div data-v-e95ae228>. var char = str.charAt(i);</div><div data-v-e95ae228>. if( obj[ char ] ){</div><div data-v-e95ae228>. . obj[ char ]++</div><div data-v-e95ae228>. } else {</div><div data-v-e95ae228>. . obj[ char ] = 1;</div><div data-v-e95ae228>. }</div><div data-v-e95ae228>}</div><div data-v-e95ae228>console.log( obj ); . . . 每個字符和次數都統計出來了</div><br data-v-e95ae228><div data-v-e95ae228>目標 弄一個對象 把值放進去 { a:3, b:10, c:15 }</div><div data-v-e95ae228>遍歷字串, 如果 obj 沒有則 obj[ char ] = 1</div><div data-v-e95ae228>如果 obj 有則 value值++</div><br data-v-e95ae228><div data-v-e95ae228>var max = 0;</div><div data-v-e95ae228>for( var key in obj ){</div><div data-v-e95ae228>. if( max ＜ obj[ key ] ){</div><div data-v-e95ae228>. . max = obj[ key ];</div><div data-v-e95ae228>. }</div><div data-v-e95ae228>}</div><div data-v-e95ae228>console.log( max );</div><br data-v-e95ae228><div data-v-e95ae228>目標 到物件的值找最大值 { a:3, b:10, c:15 } 最大值 15</div><div data-v-e95ae228>遍歷物件 for in</div><div data-v-e95ae228>如果 max變數 小於 obj[key]</div><div data-v-e95ae228>key 是物件中每一項 a b c</div><div data-v-e95ae228>obj[key] 是統計值 3 10 15</div><div data-v-e95ae228>如果 max變數 小於 obj[key] 就賦值 就找到最大值 15</div><br data-v-e95ae228><div data-v-e95ae228>for( var key in obj ){</div><div data-v-e95ae228>. if( obj[key] == max ){</div><div data-v-e95ae228>. . console.log( &quot;最多字符是&quot; + key );</div><div data-v-e95ae228>. . console.log( &quot;出現次數&quot; + max );</div><div data-v-e95ae228>. }</div><div data-v-e95ae228>}</div><br data-v-e95ae228><div data-v-e95ae228>目標 找到最大值 15 對應的 key</div><div data-v-e95ae228>如果 obj[key] == max 就找到了</div><br data-v-e95ae228><br data-v-e95ae228><br data-v-e95ae228><br data-v-e95ae228><div class="cor36" data-v-e95ae228>輸出多少?</div><div data-v-e95ae228>function demo(){</div><div data-v-e95ae228>. var n = 2;</div><div data-v-e95ae228>. if( true ){</div><div data-v-e95ae228>. . var n = 1;</div><div data-v-e95ae228>. }</div><div data-v-e95ae228>. console.log( n );</div><div data-v-e95ae228>}</div><div data-v-e95ae228>demo(); . . . // 打印 1</div><br data-v-e95ae228><br data-v-e95ae228><br data-v-e95ae228><br data-v-e95ae228><div class="cor36" data-v-e95ae228>輸出多少?</div><div data-v-e95ae228>function demo(){</div><div data-v-e95ae228>. let n = 2;</div><div data-v-e95ae228>. if( true ){</div><div data-v-e95ae228>. . let n = 1;</div><div data-v-e95ae228>. }</div><div data-v-e95ae228>. console.log( n );</div><div data-v-e95ae228>}</div><div data-v-e95ae228>demo(); . . . // 打印 2</div><br data-v-e95ae228><br data-v-e95ae228><br data-v-e95ae228><br data-v-e95ae228><div class="cor36" data-v-e95ae228>合併</div><div data-v-e95ae228>const a = { a:1, b:4 }</div><div data-v-e95ae228>const b = { b:2, c:3 }</div><div data-v-e95ae228>let obj1 = Object.assign( a, b );</div><div data-v-e95ae228>console.log( obj1 ); . . . // { a:1, b:2, c:3 }</div><br data-v-e95ae228><br data-v-e95ae228><br data-v-e95ae228><br data-v-e95ae228><div class="cor36" data-v-e95ae228>合併</div><div data-v-e95ae228>const a = { a:1, b:4 }</div><div data-v-e95ae228>const b = { b:2, c:3 }</div><div data-v-e95ae228>let obj2 = {...a, ...b}</div><div data-v-e95ae228>console.log( obj1 ); . . . // { a:1, b:2, c:3 }</div><br data-v-e95ae228><br data-v-e95ae228></div></div></div></section>',1),vr=hv(()=>v("div",{class:"toTopButton"},[v("div",{class:"disCen"},"___"),v("div",{class:"disCen"},"▲")],-1)),cr=[vr],pr=hv(()=>v("div",{class:"toBotButton"},[v("div",{class:"disCen"},"▼"),v("div",{class:"disCen"},"￣")],-1)),lr=[pr],ir={__name:"JsPageTwoTwo",setup(a){const s=ua(!1);window.addEventListener("scroll",function(){s.value=window.scrollY>0});function d(){window.scrollTo({top:0,left:0,behavior:"smooth"})}function n(){window.scrollTo({top:999999,left:0,behavior:"smooth"})}return(t,c)=>(da(),ca(Q,null,[er,v("div",null,[X(T(W,{name:"fade",tag:"div"},{default:C(()=>[v("div",{onClick:d,class:"toTop"},cr)]),_:1},512),[[Y,s.value]]),X(T(W,{name:"fade",tag:"div"},{default:C(()=>[v("div",{onClick:n,class:"toBot"},lr)]),_:1},512),[[Y,s.value]])])],64))}},rr=ra(ir,[["__scopeId","data-v-e95ae228"]]);const kv=a=>(ma("data-v-1a9c5591"),a=a(),ha(),a),or=U('<section data-v-1a9c5591><div class="leftNav" data-v-1a9c5591><div class="leftNavContainer" data-v-1a9c5591><div class="leftNavLayout" data-v-1a9c5591><br data-v-1a9c5591><br data-v-1a9c5591><div class="leftNavText" data-v-1a9c5591>1</div><div class="leftNavText" data-v-1a9c5591>1</div><div class="leftNavText" data-v-1a9c5591>1</div><div class="leftNavText" data-v-1a9c5591></div><div class="leftNavText" data-v-1a9c5591></div><div class="leftNavText" data-v-1a9c5591></div><div class="leftNavText" data-v-1a9c5591></div></div></div></div><div class="Main" data-v-1a9c5591><div class="mainContainer" data-v-1a9c5591><div class="mainLayout" data-v-1a9c5591><div class="articleCardTitle cor36" data-v-1a9c5591>[ ] ≫</div></div></div></div></section>',1),fr=kv(()=>v("div",{class:"toTopButton"},[v("div",{class:"disCen"},"___"),v("div",{class:"disCen"},"▲")],-1)),br=[fr],ur=kv(()=>v("div",{class:"toBotButton"},[v("div",{class:"disCen"},"▼"),v("div",{class:"disCen"},"￣")],-1)),wr=[ur],mr={__name:"JsPageTwoThree",setup(a){const s=ua(!1);window.addEventListener("scroll",function(){s.value=window.scrollY>0});function d(){window.scrollTo({top:0,left:0,behavior:"smooth"})}function n(){window.scrollTo({top:999999,left:0,behavior:"smooth"})}return(t,c)=>(da(),ca(Q,null,[or,v("div",null,[X(T(W,{name:"fade",tag:"div"},{default:C(()=>[v("div",{onClick:d,class:"toTop"},br)]),_:1},512),[[Y,s.value]]),X(T(W,{name:"fade",tag:"div"},{default:C(()=>[v("div",{onClick:n,class:"toBot"},wr)]),_:1},512),[[Y,s.value]])])],64))}},hr=ra(mr,[["__scopeId","data-v-1a9c5591"]]);const kr=a=>(ma("data-v-f264cfab"),a=a(),ha(),a),gr={class:"leftNav"},Tr={class:"leftNavContainer"},_r={class:"leftNavLayout"},zr=kr(()=>v("br",null,null,-1)),Sr={class:"Main"},qr={class:"mainContainer"},yr={class:"mainLayout"},Cr={__name:"JsPageThree",setup(a){const s=ua(!1);return window.addEventListener("scroll",function(){s.value=window.scrollY>0}),(d,n)=>{const t=za("RouterLink"),c=za("router-view");return da(),ca("section",null,[v("div",gr,[v("div",Tr,[v("div",_r,[zr,v("div",null,[T(t,{to:"/js"},{default:C(()=>[fa("1.作用域")]),_:1})]),v("div",null,[T(t,{to:"/js/function"},{default:C(()=>[fa("2.函數進階")]),_:1})]),v("div",null,[T(t,{to:"/js/destructuringassignment"},{default:C(()=>[fa("3.解構賦值")]),_:1})]),v("div",null,[T(t,{to:"/js/method"},{default:C(()=>[fa("4.數組方法")]),_:1})]),v("div",null,[T(t,{to:"/js/object"},{default:C(()=>[fa("5.創建物件")]),_:1})]),v("div",null,[T(t,{to:"/js/prototype"},{default:C(()=>[fa("6.物件導向")]),_:1})]),v("div",null,[T(t,{to:"/js/tips"},{default:C(()=>[fa("7.技巧")]),_:1})]),v("div",null,[T(t,{to:"/js/dom"},{default:C(()=>[fa("8.事件")]),_:1})]),v("div",null,[T(t,{to:"/js/ajax"},{default:C(()=>[fa("9.AJAX")]),_:1})]),v("div",null,[T(t,{to:"/js"})]),v("div",null,[T(t,{to:"/js"})]),v("div",null,[T(t,{to:"/js"})]),v("div",null,[T(t,{to:"/js"})]),v("div",null,[T(t,{to:"/js"})]),v("div",null,[T(t,{to:"/js"})])])])]),v("div",Sr,[v("div",qr,[v("div",yr,[T(c)])])])])}}},xr=ra(Cr,[["__scopeId","data-v-f264cfab"]]);const gv=a=>(ma("data-v-a9587193"),a=a(),ha(),a),Lr={class:"leftNav"},jr={class:"leftNavContainer"},Pr={class:"leftNavLayout"},Vr=U('<div class="Main" data-v-a9587193><div class="mainContainer" data-v-a9587193><div class="mainLayout" data-v-a9587193><br data-v-a9587193><br data-v-a9587193><p class="fz28" data-v-a9587193>總分總</p><p class="fz28" data-v-a9587193>1.要講哪個知識點</p><p class="fz28" data-v-a9587193>2.細講</p><p class="fz28" data-v-a9587193>3.總結</p><br data-v-a9587193><br data-v-a9587193><div class="articleCardTitle cor36 fz34" data-v-a9587193>1. 作用域</div><p class="fz28" data-v-a9587193>作用域 scope 規定了變量能夠被訪問的&quot;範圍&quot; ,</p><br data-v-a9587193><br data-v-a9587193><p class="fz28" data-v-a9587193>離開這個&quot;範圍&quot;變量便不能被訪問。</p><br data-v-a9587193><br data-v-a9587193><div id="scope001" class="articleCardTitle cor36 fz34" data-v-a9587193> 1.1 局部作用域 </div><p class="fz28" data-v-a9587193> 在函數內部聲明的變量只能在函數內部被訪問，外部無法直接訪問。 </p><br data-v-a9587193><br data-v-a9587193><div class="bgcVS fz30" data-v-a9587193><br data-v-a9587193><br data-v-a9587193><div data-v-a9587193><span class="function" data-v-a9587193>function </span><span class="word" data-v-a9587193>getSun</span> <span class="brackets" data-v-a9587193>(){</span></div><div class="pTwo" data-v-a9587193><span class="function" data-v-a9587193>const </span><span class="word" data-v-a9587193>num</span> <span class="then" data-v-a9587193>=</span><span class="number" data-v-a9587193>10</span></div><div class="brackets" data-v-a9587193>}</div><div data-v-a9587193><span class="word" data-v-a9587193>console.</span><span class="variable" data-v-a9587193>log</span> <span class="brackets" data-v-a9587193>(</span><span class="word" data-v-a9587193>num</span> <span class="brackets" data-v-a9587193>) </span><span class="comment" data-v-a9587193>// 報錯函數外部不能使用局部作用域變量</span></div><br data-v-a9587193><br data-v-a9587193></div><br data-v-a9587193><br data-v-a9587193><p class="fz28" data-v-a9587193>結論</p><p class="fz28" data-v-a9587193>1.函數內部聲明變量, 外部無法訪問</p><p class="fz28" data-v-a9587193>2.函數的參數也是函數內部的局部變量</p><p class="fz28" data-v-a9587193>3.不同函數內部聲明的變量無法互相訪問</p><p class="fz28" data-v-a9587193>4.函數執行完, 函數內部的變量實際被清空了</p><br data-v-a9587193><br data-v-a9587193><br data-v-a9587193><br data-v-a9587193><div class="articleCardTitle cor36 fz34" data-v-a9587193>1.2 塊作用域</div><p class="fz28" data-v-a9587193> 在 JS 中用 {} 包裹為代碼塊, 代碼塊內部聲明變量外部 &quot;有可能&quot; 無法被訪問 </p><br data-v-a9587193><br data-v-a9587193><div class="bgcVS fz30" data-v-a9587193><br data-v-a9587193><br data-v-a9587193><div data-v-a9587193><span class="then" data-v-a9587193>for </span> <span class="brackets" data-v-a9587193>(</span><span class="function" data-v-a9587193>let </span> <span class="word" data-v-a9587193>i</span><span class="then" data-v-a9587193>=</span> <span class="number" data-v-a9587193>1</span><span class="then" data-v-a9587193>;</span> <span class="word" data-v-a9587193>i</span><span class="word" data-v-a9587193>＜=</span> <span class="number" data-v-a9587193>3</span><span class="then" data-v-a9587193>;</span> <span class="word" data-v-a9587193>i</span><span class="then" data-v-a9587193>++</span> <span class="brackets" data-v-a9587193>){</span></div><div class="pTwo" data-v-a9587193><span class="word" data-v-a9587193>console.</span><span class="variable" data-v-a9587193>log</span> <span class="brackets" data-v-a9587193>(</span><span class="word" data-v-a9587193>i</span> <span class="brackets" data-v-a9587193>)</span><span class="comment" data-v-a9587193>//塊作用域 // 依序打印 1 2 3</span></div><div class="brackets" data-v-a9587193>}</div><div data-v-a9587193><span class="word" data-v-a9587193>console.</span><span class="variable" data-v-a9587193>log</span> <span class="brackets" data-v-a9587193>(</span><span class="word" data-v-a9587193>i</span> <span class="brackets" data-v-a9587193>)</span><span class="comment" data-v-a9587193>// undefined</span></div><br data-v-a9587193><br data-v-a9587193><div class="comment" data-v-a9587193>var 沒塊級作用域</div><br data-v-a9587193><br data-v-a9587193><div data-v-a9587193><span class="then" data-v-a9587193>for </span> <span class="brackets" data-v-a9587193>(</span><span class="function" data-v-a9587193>var </span> <span class="word" data-v-a9587193>i</span><span class="then" data-v-a9587193>=</span> <span class="number" data-v-a9587193>1</span><span class="then" data-v-a9587193>;</span> <span class="word" data-v-a9587193>i</span><span class="word" data-v-a9587193>＜=</span> <span class="number" data-v-a9587193>3</span><span class="then" data-v-a9587193>;</span> <span class="word" data-v-a9587193>i</span><span class="then" data-v-a9587193>++</span> <span class="brackets" data-v-a9587193>){</span></div><div class="pTwo" data-v-a9587193><span class="word" data-v-a9587193>console.</span><span class="variable" data-v-a9587193>log</span> <span class="brackets" data-v-a9587193>(</span><span class="word" data-v-a9587193>i</span> <span class="brackets" data-v-a9587193>)</span><span class="comment" data-v-a9587193>//塊作用域 // 依序打印 1 2 3</span></div><div class="brackets" data-v-a9587193>}</div><div data-v-a9587193><span class="word" data-v-a9587193>console.</span><span class="variable" data-v-a9587193>log</span> <span class="brackets" data-v-a9587193>(</span><span class="word" data-v-a9587193>i</span> <span class="brackets" data-v-a9587193>)</span><span class="comment" data-v-a9587193>// 4</span></div><br data-v-a9587193><br data-v-a9587193><div class="comment" data-v-a9587193>if() while() 也有塊級作用域</div><br data-v-a9587193><br data-v-a9587193><div data-v-a9587193><span class="then" data-v-a9587193>if </span> <span class="brackets" data-v-a9587193>(</span><span class="word" data-v-a9587193>true</span><span class="brackets" data-v-a9587193>){</span></div><div class="pTwo" data-v-a9587193><span class="word" data-v-a9587193>let </span><span class="variable" data-v-a9587193>i</span> <span class="then" data-v-a9587193>=</span><span class="number" data-v-a9587193>10</span></div><div class="brackets" data-v-a9587193>}</div><div data-v-a9587193><span class="word" data-v-a9587193>console.</span><span class="variable" data-v-a9587193>log</span> <span class="brackets" data-v-a9587193>(</span><span class="word" data-v-a9587193>i</span> <span class="brackets" data-v-a9587193>)</span><span class="comment" data-v-a9587193>// undefined</span></div></div><br data-v-a9587193><br data-v-a9587193><p class="fz28" data-v-a9587193>結論</p><p class="fz28" data-v-a9587193>1.let const 聲明的變量產生塊級作用域, var沒有塊級</p><p class="fz28" data-v-a9587193>2.不同代碼塊之間的變量無法互相訪問</p><br data-v-a9587193><br data-v-a9587193><div id="scope002" class="articleCardTitle cor36 fz34" data-v-a9587193> 1.2 全局作用域 </div><p class="fz28" data-v-a9587193>script標籤的最外層 就是 全局作用域</p><p class="fz28" data-v-a9587193>全局作用域聲明變量, 任何其他作用域都可以被訪問</p><br data-v-a9587193><br data-v-a9587193><div id="scope003" class="articleCardTitle cor36 fz34" data-v-a9587193> 1.3 作用域鏈 </div><p class="fz28" data-v-a9587193>就近原則: 誰離我近找誰</p><br data-v-a9587193><br data-v-a9587193><p class="cor36 fz32" data-v-a9587193>作用域鏈 是 變量查找機制</p><br data-v-a9587193><br data-v-a9587193><p class="fz28" data-v-a9587193>函數執行, 優先找當前函數作用域中 找變量</p><p class="fz28" data-v-a9587193> 當前作用域找不到 . &gt; . 依次逐級找 父級作用域 直到全局作用域 </p><br data-v-a9587193><br data-v-a9587193><p class="fz28" data-v-a9587193>總結:</p><p class="fz28" data-v-a9587193>作用域鏈像鍊子一樣, 按照從小到大查找</p><br data-v-a9587193><br data-v-a9587193><div id="scope004" class="articleCardTitle cor36 fz34" data-v-a9587193> 1.4 垃圾回收機制 ( Garbage Collection ) </div><p class="fz28" data-v-a9587193> JS 內存的分配和回收自動完成, 內存在不使用時被垃圾回收機制回收 </p><br data-v-a9587193><br data-v-a9587193><p class="cor36 fz28" data-v-a9587193>內存生命週期</p><p class="fz28" data-v-a9587193> 1. 內存分配: 當聲明變量 、 函數 、 物件, 系統自動分配內存 </p><p class="fz28" data-v-a9587193>2. 內存使用: 讀寫內存, 使用變量、函數</p><p class="fz28" data-v-a9587193>3. 內存回收: 使用完, 垃圾回收器 回收不再使用的內存</p><br data-v-a9587193><br data-v-a9587193><p class="fz28" data-v-a9587193>全局變量不回收 ( 直到頁面關閉 )</p><p class="fz28" data-v-a9587193>局部變量的值, 不用了, 自動回收掉</p><br data-v-a9587193><br data-v-a9587193><p class="fz28 cor36" data-v-a9587193># 內存洩漏</p><p class="fz28" data-v-a9587193>程序中分配的內存 由於某種原因 未釋放 or 無法釋放</p><br data-v-a9587193><br data-v-a9587193><p class="fz28" data-v-a9587193>堆棧空間分配</p><p class="fz28" data-v-a9587193>1.棧 stack</p><p class="fz28" data-v-a9587193>基本數據類型, 系統自動分配 自動釋放</p><br data-v-a9587193><br data-v-a9587193><p class="fz28" data-v-a9587193>2.堆 heap</p><p class="fz28" data-v-a9587193> 複雜數據類型, 由程序員分配釋放, 若不釋放 則 由垃圾回收機制回收 </p><br data-v-a9587193><br data-v-a9587193><p class="fz28 cor36" data-v-a9587193># 引用計數法</p><p class="fz28" data-v-a9587193>看一個對象 是否有 指向它的引用, 沒有就回收對象</p><br data-v-a9587193><br data-v-a9587193><p class="fz28" data-v-a9587193>1. 跟蹤紀錄被引用的次數</p><p class="fz28" data-v-a9587193>2. 被引用 1 次就 ++</p><p class="fz28" data-v-a9587193>3. 減少 1 個引用就 --</p><p class="fz28" data-v-a9587193>4. 引用次數 0 則 釋放內存</p><br data-v-a9587193><br data-v-a9587193><p class="fz28" data-v-a9587193>const arr = [ 1, 2, 3, 4 ]</p><p class="fz28" data-v-a9587193> arr -&gt; (stack) 0x1111 --counter++-&gt; (heap) [ 1, 2, 3, 4 ] </p><br data-v-a9587193><br data-v-a9587193><p class="fz28" data-v-a9587193>arr = null</p><p class="fz28" data-v-a9587193>arr -&gt; (stack) null 不指向 heap</p><p class="fz28" data-v-a9587193>[ 1, 2, 3, 4 ] 的被引用次數變為 0 回收</p><br data-v-a9587193><br data-v-a9587193><p class="fz28 cor36" data-v-a9587193># 引用計數 缺點</p><p class="fz28 cor36" data-v-a9587193>嵌套引用 (循環引用)</p><p class="fz28" data-v-a9587193> 兩個物件 相互引用 . . . 儘管不再用, 不會回收, 而內存洩漏 </p><br data-v-a9587193><br data-v-a9587193><p class="fz20" data-v-a9587193>現代瀏覽器 不用 引用計數</p><br data-v-a9587193><br data-v-a9587193><div class="bgcVS fz30" data-v-a9587193><br data-v-a9587193><br data-v-a9587193><div data-v-a9587193><span class="function" data-v-a9587193>function </span><span class="word" data-v-a9587193>fn</span> <span class="brackets" data-v-a9587193>(){</span></div><div class="pTwo" data-v-a9587193><span class="function" data-v-a9587193>let </span> <span class="word" data-v-a9587193>obj1</span><span class="then" data-v-a9587193>=</span> <span class="brackets" data-v-a9587193>{}</span></div><div class="pTwo" data-v-a9587193><span class="function" data-v-a9587193>let </span> <span class="word" data-v-a9587193>obj2</span><span class="then" data-v-a9587193>=</span> <span class="brackets" data-v-a9587193>{}</span></div><div class="pTwo" data-v-a9587193><span class="word" data-v-a9587193>obj1.a</span> <span class="then" data-v-a9587193>=</span><span class="word" data-v-a9587193>obj2</span></div><div class="pTwo" data-v-a9587193><span class="word" data-v-a9587193>obj2.a</span> <span class="then" data-v-a9587193>=</span><span class="word" data-v-a9587193>obj1</span></div><div class="brackets" data-v-a9587193>}</div><br data-v-a9587193><br data-v-a9587193></div><br data-v-a9587193><br data-v-a9587193><p class="fz28 cor36" data-v-a9587193># 標記清除法</p><p class="fz28" data-v-a9587193> 將 &quot;不再使用的對象&quot; 定義為 &quot;無法到達的對象&quot; -&gt; (我找不到你) </p><br data-v-a9587193><br data-v-a9587193><p class="fz28" data-v-a9587193>1. 從根部 (全局對象) 出發定期掃描內存中對象</p><p class="fz28" data-v-a9587193>2. 從根部出發找不到的對象就標記為 不再使用 回收</p><br data-v-a9587193><br data-v-a9587193><div id="scope005" class="articleCardTitle cor36 fz34" data-v-a9587193> 1.5 閉包 ( closure ) </div><p class="fz28" data-v-a9587193> 一個函數對周圍狀態的引用綑綁在一起, 內層函數中訪問到其外層函數的作用域 </p><p class="fz28 cor36" data-v-a9587193>閉包 = 內層函數 + 外層函數的變量</p><br data-v-a9587193><br data-v-a9587193><div class="dis" data-v-a9587193><div class="bgcVS fz30" data-v-a9587193><br data-v-a9587193><br data-v-a9587193><div data-v-a9587193><span class="function" data-v-a9587193>function </span><span class="word" data-v-a9587193>outer</span><span class="brackets" data-v-a9587193>(){</span></div><div class="pTwo" data-v-a9587193><span class="function" data-v-a9587193>let </span> <span class="word" data-v-a9587193>a</span><span class="then" data-v-a9587193>=</span> <span class="number" data-v-a9587193>10;</span></div><div class="pTwo" data-v-a9587193><span class="function" data-v-a9587193>function </span><span class="word" data-v-a9587193>fn</span> <span class="brackets" data-v-a9587193>(){</span></div><div class="pFou" data-v-a9587193><span class="word" data-v-a9587193>console.</span><span class="variable" data-v-a9587193>log</span><span class="brackets" data-v-a9587193>(</span> <span class="word" data-v-a9587193>a</span><span class="brackets" data-v-a9587193>)</span></div><div class="brackets pTwo" data-v-a9587193>}</div><div class="pTwo" data-v-a9587193><span class="then" data-v-a9587193>return </span><span class="word" data-v-a9587193>fn</span></div><div class="brackets" data-v-a9587193>}</div><br data-v-a9587193><div data-v-a9587193><span class="word" data-v-a9587193>outer</span><span class="brackets" data-v-a9587193>()</span> <span class="then" data-v-a9587193>===</span><span class="word" data-v-a9587193>fn</span><span class="then" data-v-a9587193>===</span><span class="function" data-v-a9587193>function </span><span class="word" data-v-a9587193>fn</span> <span class="brackets" data-v-a9587193>(){}</span></div><br data-v-a9587193><div data-v-a9587193><span class="function" data-v-a9587193>const </span><span class="word" data-v-a9587193>fun</span> <span class="then" data-v-a9587193>=</span><span class="function" data-v-a9587193>function </span><span class="word" data-v-a9587193>fn</span> <span class="wbrackets" data-v-a9587193>(){}</span></div><br data-v-a9587193><div data-v-a9587193><span class="function" data-v-a9587193>const </span><span class="word" data-v-a9587193>fun</span> <span class="then" data-v-a9587193>=</span><span class="word" data-v-a9587193>outer</span> <span class="brackets" data-v-a9587193>()</span></div><div data-v-a9587193><span class="word" data-v-a9587193>fun</span> <span class="brackets" data-v-a9587193>() </span><span class="comment" data-v-a9587193>// 調用函數 </span><span class="comment" data-v-a9587193>// 10</span></div><div class="comment" data-v-a9587193> // 實現外部函數 使用 outer 函數 內部的變量 </div><br data-v-a9587193><br data-v-a9587193><p data-v-a9587193>另外 return 也可以這樣寫</p><div data-v-a9587193><span class="function" data-v-a9587193>function </span><span class="word" data-v-a9587193>fn</span> <span class="brackets" data-v-a9587193>(){</span></div><div class="padTwo VSL" data-v-a9587193><span class="function" data-v-a9587193>let </span> <span class="word" data-v-a9587193>a</span><span class="then" data-v-a9587193>=</span> <span class="number" data-v-a9587193>0</span><div data-v-a9587193><span class="then" data-v-a9587193>return </span><span class="function" data-v-a9587193>function </span><span class="brackets" data-v-a9587193>(){</span></div><div data-v-a9587193></div><div class="padTwo VSL" data-v-a9587193><span class="word" data-v-a9587193>a</span> <span class="then" data-v-a9587193>++</span><div data-v-a9587193><span class="word" data-v-a9587193>console</span><span class="variable" data-v-a9587193>.log</span><span class="brackets" data-v-a9587193>(</span> <span class="word" data-v-a9587193>a</span><span class="brackets" data-v-a9587193>)</span></div><div data-v-a9587193></div></div><div data-v-a9587193><span class="brackets" data-v-a9587193>}</span></div></div><div data-v-a9587193><span class="brackets" data-v-a9587193>}</span></div><div data-v-a9587193><span class="function" data-v-a9587193>let </span> <span class="word" data-v-a9587193>f</span><span class="then" data-v-a9587193>=</span> <span class="word" data-v-a9587193>fn</span><span class="brackets" data-v-a9587193>() </span><span class="comment" data-v-a9587193>//</span> <span class="word" data-v-a9587193>外部</span><span class="word" data-v-a9587193>fn</span><span class="word" data-v-a9587193>只是一開始創建閉包時</span><span class="then" data-v-a9587193>,</span> <span class="word" data-v-a9587193>執行一次</span></div><div data-v-a9587193><span class="word" data-v-a9587193>f</span> <span class="brackets" data-v-a9587193>() </span><span class="comment" data-v-a9587193>//</span><span class="word" data-v-a9587193>後面每次執行</span><span class="then" data-v-a9587193>return </span><span class="word" data-v-a9587193>後的</span><span class="function" data-v-a9587193>function </span></div><div data-v-a9587193><span class="word" data-v-a9587193>f</span> <span class="brackets" data-v-a9587193>() </span><span class="comment" data-v-a9587193>//</span><span class="word" data-v-a9587193>後面每次執行</span><span class="then" data-v-a9587193>return </span><span class="word" data-v-a9587193>後的</span><span class="function" data-v-a9587193>function </span></div></div><div class="bgcVSMid" data-v-a9587193>&gt;</div><div class="bgcVS fz30" data-v-a9587193><br data-v-a9587193><br data-v-a9587193><div data-v-a9587193><span class="function" data-v-a9587193>function </span><span class="word" data-v-a9587193>outer</span><span class="brackets" data-v-a9587193>(){</span></div><div class="pTwo" data-v-a9587193><span class="function" data-v-a9587193>let </span> <span class="word" data-v-a9587193>a</span><span class="then" data-v-a9587193>=</span> <span class="number" data-v-a9587193>10;</span></div><div class="pTwo" data-v-a9587193><span class="function" data-v-a9587193>return function </span><span class="word" data-v-a9587193>fn</span> <span class="brackets" data-v-a9587193>(){</span></div><div class="pFou" data-v-a9587193><span class="word" data-v-a9587193>console.</span><span class="variable" data-v-a9587193>log</span><span class="brackets" data-v-a9587193>(</span> <span class="word" data-v-a9587193>a</span><span class="brackets" data-v-a9587193>)</span></div><div class="brackets pTwo" data-v-a9587193>}</div><div class="brackets" data-v-a9587193>}</div><br data-v-a9587193><br data-v-a9587193><div data-v-a9587193><span class="function" data-v-a9587193>const </span><span class="word" data-v-a9587193>fun</span> <span class="then" data-v-a9587193>=</span><span class="word" data-v-a9587193>outer</span> <span class="brackets" data-v-a9587193>()</span></div><div data-v-a9587193><span class="word" data-v-a9587193>fun</span> <span class="brackets" data-v-a9587193>() </span><span class="comment" data-v-a9587193>// 調用函數 </span><span class="comment" data-v-a9587193>// 10</span></div><div class="comment" data-v-a9587193> // 實現外部函數 使用 outer 函數 內部的變量 </div><br data-v-a9587193><br data-v-a9587193></div></div><br data-v-a9587193><br data-v-a9587193><p class="fz28 cor36" data-v-a9587193># 作用</p><p class="fz28" data-v-a9587193>封閉數據, 提供操作, 外部也可以訪問函數內部的變量</p><br data-v-a9587193><br data-v-a9587193><p class="fz28" data-v-a9587193># 應用</p><p class="fz28" data-v-a9587193>實現數據私有</p><p class="fz28" data-v-a9587193>比如 統計函數調用次數</p><br data-v-a9587193><br data-v-a9587193><div class="bgcVS fz30" data-v-a9587193><br data-v-a9587193><br data-v-a9587193><div data-v-a9587193><span class="function" data-v-a9587193>function </span><span class="word" data-v-a9587193>count</span> <span class="brackets" data-v-a9587193>(){</span></div><div class="pTwo" data-v-a9587193><span class="function" data-v-a9587193>let </span> <span class="word" data-v-a9587193>i</span><span class="then" data-v-a9587193>=</span> <span class="number" data-v-a9587193>0</span></div><div class="pTwo" data-v-a9587193><span class="function" data-v-a9587193>function </span><span class="word" data-v-a9587193>fn</span> <span class="brackets" data-v-a9587193>(){</span></div><div class="pFou" data-v-a9587193>i++</div><div class="pFou" data-v-a9587193><span class="word" data-v-a9587193>console.</span><span class="variable" data-v-a9587193>log</span> <span class="brackets" data-v-a9587193>(</span><span class="word" data-v-a9587193>i</span> <span class="brackets" data-v-a9587193>)</span></div><div class="brackets pTwo" data-v-a9587193>}</div><div class="pTwo" data-v-a9587193><span class="then" data-v-a9587193>return </span><span class="word" data-v-a9587193>fn</span></div><div class="brackets" data-v-a9587193>}</div><div data-v-a9587193><span class="function" data-v-a9587193>const </span><span class="word" data-v-a9587193>fun</span> <span class="then" data-v-a9587193>=</span><span class="word" data-v-a9587193>count</span> <span class="brackets" data-v-a9587193>()</span></div><br data-v-a9587193><div class="number" data-v-a9587193>Q1: 裡面的 i 會被回收嗎?</div><br data-v-a9587193><div class="number" data-v-a9587193>global &gt; fun &gt; fn() &gt; i++ &gt; let i</div><div class="number" data-v-a9587193>i 不會被回收</div><div class="number" data-v-a9587193>內存洩漏</div><br data-v-a9587193><br data-v-a9587193></div><br data-v-a9587193><br data-v-a9587193><div id="scope006" class="articleCardTitle cor36 fz34" data-v-a9587193> 1.6 變量提升 ( Hoisting ) </div><p class="fz28" data-v-a9587193>變數提升是指變數在其宣告之前已經可以使用</p><p class="fz28" data-v-a9587193>只提升聲明 , 不賦值</p><br data-v-a9587193><p class="fz28" data-v-a9587193>把所有 var 聲明的變量提升到當前作用域的最前面</p><p class="fz28" data-v-a9587193>只提升聲明 , 不賦值</p><br data-v-a9587193><br data-v-a9587193><p class="fz28 comment" data-v-a9587193>var num</p><p class="fz28" data-v-a9587193>console.log( num ) . . . // undefined</p><p class="fz28" data-v-a9587193>var num = 10</p><p class="fz28" data-v-a9587193>console.log( num ) . . . // 10</p><br data-v-a9587193><br data-v-a9587193><p class="fz28" data-v-a9587193>function fn() {</p><p class="fz28 comment pTwo" data-v-a9587193>var num</p><p class="fz28 pTwo" data-v-a9587193>console.log( num ) . . . // undefined</p><p class="fz28 pTwo" data-v-a9587193>var num = 10</p><p class="fz28 pTwo" data-v-a9587193>console.log( num ) . . . // 10</p><p class="fz28" data-v-a9587193>}</p><br data-v-a9587193><br data-v-a9587193><p class="fz28" data-v-a9587193>用 let 或 const 宣告的變量和常量不會被提升</p><br data-v-a9587193><br data-v-a9587193><p class="fz28" data-v-a9587193>注意:</p><p class="fz28" data-v-a9587193>1.變量在未聲明即被訪問時會報錯</p><p class="fz28" data-v-a9587193>2.變量在var聲明之前被訪問, 值為 undefined</p><br data-v-a9587193><br data-v-a9587193></div></div></div>',1),Nr=gv(()=>v("div",{class:"toTopButton"},[v("div",{class:"disCen"},"___"),v("div",{class:"disCen"},"▲")],-1)),Or=[Nr],$r=gv(()=>v("div",{class:"toBotButton"},[v("div",{class:"disCen"},"▼"),v("div",{class:"disCen"},"￣")],-1)),Er=[$r],Ar={__name:"JsPageThreeOne",setup(a){const s=ua(!1);window.addEventListener("scroll",function(){s.value=window.scrollY>0});function d(){window.scrollTo({top:0,left:0,behavior:"smooth"})}function n(){window.scrollTo({top:999999,left:0,behavior:"smooth"})}function t(c){window.scrollTo({top:document.getElementById(`${c}`).offsetTop,behavior:"smooth"})}return(c,e)=>(da(),ca(Q,null,[v("section",null,[v("div",Lr,[v("div",jr,[v("div",Pr,[v("div",{onClick:e[0]||(e[0]=l=>t("scope001")),class:"leftNavText"},"局部作用域"),v("div",{onClick:e[1]||(e[1]=l=>t("scope002")),class:"leftNavText"},"全局作用域"),v("div",{onClick:e[2]||(e[2]=l=>t("scope003")),class:"leftNavText"},"作用域鏈"),v("div",{onClick:e[3]||(e[3]=l=>t("scope004")),class:"leftNavText"}," JS垃圾回收機制 "),v("div",{onClick:e[4]||(e[4]=l=>t("scope005")),class:"leftNavText"},"閉包"),v("div",{onClick:e[5]||(e[5]=l=>t("scope006")),class:"leftNavText"},"變量提升")])])]),Vr]),v("div",null,[X(T(W,{name:"fade",tag:"div"},{default:C(()=>[v("div",{onClick:d,class:"toTop"},Or)]),_:1},512),[[Y,s.value]]),X(T(W,{name:"fade",tag:"div"},{default:C(()=>[v("div",{onClick:n,class:"toBot"},Er)]),_:1},512),[[Y,s.value]])])],64))}},Mr=ra(Ar,[["__scopeId","data-v-a9587193"]]);const as=a=>(ma("data-v-b7e7046a"),a=a(),ha(),a),Fr={class:"leftNav"},Ir={class:"leftNavContainer"},Rr={class:"leftNavLayout"},Hr={class:"Main"},Br={class:"mainContainer"},Jr={class:"mainLayout"},Dr=U('<br data-v-b7e7046a><br data-v-b7e7046a><p class="fz28" data-v-b7e7046a>總分總</p><p class="fz28" data-v-b7e7046a>1.要講哪個知識點</p><p class="fz28" data-v-b7e7046a>2.細講</p><p class="fz28" data-v-b7e7046a>3.總結</p><br data-v-b7e7046a><br data-v-b7e7046a><div id="twofunction001" class="articleCardTitle cor36 fz34" data-v-b7e7046a> 2.1 函數提升 </div><br data-v-b7e7046a><div class="bgcVS fz30" data-v-b7e7046a><div class="comment" data-v-b7e7046a> // 1.會把所有函數聲明提升到當前作用域最前面 </div><div class="comment" data-v-b7e7046a>// 2.只提升函數聲明, 不提升函數調用-&gt;()</div><div data-v-b7e7046a><span class="word" data-v-b7e7046a>fn</span> <span class="brackets" data-v-b7e7046a>()</span></div><div data-v-b7e7046a><span class="function" data-v-b7e7046a>function </span><span class="word" data-v-b7e7046a>fn</span> <span class="brackets" data-v-b7e7046a>(){</span></div><div class="pTwo" data-v-b7e7046a><span class="word" data-v-b7e7046a>console.</span><span class="variable" data-v-b7e7046a>log</span> <span class="brackets" data-v-b7e7046a>(</span><span class="src" data-v-b7e7046a>&quot;函數提升</span> <span class="then" data-v-b7e7046a>&quot;</span><span class="brackets" data-v-b7e7046a>)</span></div><div class="brackets" data-v-b7e7046a>)</div><br data-v-b7e7046a><br data-v-b7e7046a><div data-v-b7e7046a><span class="word" data-v-b7e7046a>fun</span> <span class="brackets" data-v-b7e7046a>() </span><span class="comment" data-v-b7e7046a>// fun is not a function</span></div><div data-v-b7e7046a><span class="function" data-v-b7e7046a>var </span><span class="variable" data-v-b7e7046a>fun </span><span class="then" data-v-b7e7046a>= </span><span class="function" data-v-b7e7046a>function </span><span class="brackets" data-v-b7e7046a>(){ </span><span class="comment" data-v-b7e7046a>// 這叫 賦值</span></div><div class="pTwo" data-v-b7e7046a><span class="word" data-v-b7e7046a>console.</span><span class="variable" data-v-b7e7046a>log</span> <span class="brackets" data-v-b7e7046a>(</span><span class="src" data-v-b7e7046a>&quot;函數表達式&quot;</span><span class="brackets" data-v-b7e7046a>)</span></div><div class="brackets" data-v-b7e7046a>}</div><span class="comment" data-v-b7e7046a>// var 只提升聲明 不賦值</span></div><div id="twofunction002" class="articleCardTitle cor36 fz34" data-v-b7e7046a> 2.2 形參實參 </div><p class="fz28 cor36" data-v-b7e7046a>形式參數</p><p class="fz28" data-v-b7e7046a>接收函數在調用的時候傳入的具體參數值</p><br data-v-b7e7046a><p class="fz28" data-v-b7e7046a>1.出現在函數的定義裡面 , 只能在函數體內使用</p><br data-v-b7e7046a><p class="fz28 cor36" data-v-b7e7046a>實際參數</p><p class="fz28" data-v-b7e7046a>調用的時候傳入的具體值</p><br data-v-b7e7046a><p class="fz28" data-v-b7e7046a>1.出現在主調函數裡面 , 被調不能訪問實參</p><p class="fz28" data-v-b7e7046a> 2.實參是基本類型的值, 將實參值進行拷貝傳給形參, 函數運行完, 釋放形參, 所以實參不會被改變 </p><p class="fz28" data-v-b7e7046a> 2.實參是引用類型的值, 將實參內存地址進行拷貝傳給形參, 實參和形參將會指向同一地址 </p><br data-v-b7e7046a><p class="fz28" data-v-b7e7046a>其他:</p><p class="fz28" data-v-b7e7046a> 1.函數可以不定義形參, 函數體內可以通過 arguments 這個變量來獲取到 我們實際傳遞的參數 </p><p class="fz28" data-v-b7e7046a>2. 函數的參數個數、數據類型不一定要相同</p><br data-v-b7e7046a><br data-v-b7e7046a>',29),Wr={class:"bgcVS"},Ur=U('<div data-v-b7e7046a><span class="function" data-v-b7e7046a>function </span><span class="word" data-v-b7e7046a>fn1</span> <span class="brackets" data-v-b7e7046a>(){</span></div><div class="pTwo" data-v-b7e7046a><span class="function" data-v-b7e7046a>var </span><span class="word" data-v-b7e7046a>param</span> <span class="then" data-v-b7e7046a>=</span><span class="src" data-v-b7e7046a>&quot;hi&quot;;</span></div><div class="pTwo" data-v-b7e7046a><span class="word" data-v-b7e7046a>fn2</span> <span class="brackets" data-v-b7e7046a>(</span><span class="word" data-v-b7e7046a>param</span> <span class="brackets" data-v-b7e7046a>) </span><span class="comment" data-v-b7e7046a>// 對 fn2 來說是 實參</span></div><div class="brackets" data-v-b7e7046a>}</div><br data-v-b7e7046a><div data-v-b7e7046a><span class="function" data-v-b7e7046a>function </span><span class="word" data-v-b7e7046a>fn2</span> <span class="brackets" data-v-b7e7046a>(</span><span class="word" data-v-b7e7046a>arg</span> <span class="brackets" data-v-b7e7046a>){ </span><span class="comment" data-v-b7e7046a>// 形參</span></div><div class="pTwo" data-v-b7e7046a><span class="word" data-v-b7e7046a>console.</span><span class="variable" data-v-b7e7046a>log</span> <span class="brackets" data-v-b7e7046a>(</span><span class="word" data-v-b7e7046a>arg</span> <span class="brackets" data-v-b7e7046a>);</span></div><div class="pTwo" data-v-b7e7046a><span class="word" data-v-b7e7046a>console.</span><span class="variable" data-v-b7e7046a>log</span> <span class="brackets" data-v-b7e7046a>(</span><span class="word" data-v-b7e7046a>param</span> <span class="brackets" data-v-b7e7046a>); </span><span class="comment" data-v-b7e7046a>// param is not defined</span></div><div class="brackets" data-v-b7e7046a>}</div><br data-v-b7e7046a><div class="comment" data-v-b7e7046a> // 實參是基本類型的值, 將實參值進行拷貝傳給形參, 函數運行完, 釋放形參, 所以實參不會被改變 </div><div data-v-b7e7046a><span class="function" data-v-b7e7046a>var </span> <span class="word" data-v-b7e7046a>arg</span><span class="then" data-v-b7e7046a>=</span> <span class="word" data-v-b7e7046a>1;</span></div><div data-v-b7e7046a><span class="function" data-v-b7e7046a>function </span><span class="word" data-v-b7e7046a>fn</span> <span class="brackets" data-v-b7e7046a>(</span><span class="word" data-v-b7e7046a>param</span> <span class="brackets" data-v-b7e7046a>){</span></div><div class="pTwo" data-v-b7e7046a><span class="word" data-v-b7e7046a>console.</span><span class="variable" data-v-b7e7046a>log</span> <span class="brackets" data-v-b7e7046a>(</span><span class="word" data-v-b7e7046a>param</span> <span class="brackets" data-v-b7e7046a>){</span></div><div class="pTwo" data-v-b7e7046a><span class="word" data-v-b7e7046a>param</span> <span class="then" data-v-b7e7046a>=</span><span class="word" data-v-b7e7046a>2;</span></div><div class="brackets" data-v-b7e7046a>}</div><div data-v-b7e7046a><span class="word" data-v-b7e7046a>fn</span> <span class="brackets" data-v-b7e7046a>(</span><span class="word" data-v-b7e7046a>arg</span> <span class="brackets" data-v-b7e7046a>); </span><span class="comment" data-v-b7e7046a>// 1</span></div><div data-v-b7e7046a><span class="word" data-v-b7e7046a>console.</span><span class="variable" data-v-b7e7046a>log</span> <span class="brackets" data-v-b7e7046a>(</span><span class="word" data-v-b7e7046a>arg</span> <span class="brackets" data-v-b7e7046a>); </span><span class="comment" data-v-b7e7046a>// 1 </span><span class="comment" data-v-b7e7046a>// 所以實參不會被改變 </span></div><br data-v-b7e7046a><br data-v-b7e7046a><div class="comment" data-v-b7e7046a> // 實參是引用類型的值, 將實參內存地址進行拷貝傳給形參, 實參和形參將會指向同一地址 </div><div data-v-b7e7046a><span class="function" data-v-b7e7046a>var </span> <span class="word" data-v-b7e7046a>arg2</span><span class="then" data-v-b7e7046a>=</span> <span class="brackets" data-v-b7e7046a>{</span><span class="word" data-v-b7e7046a>name:</span> <span class="src" data-v-b7e7046a>&quot;wayne&quot;</span><span class="brackets" data-v-b7e7046a>};</span></div><div data-v-b7e7046a><span class="function" data-v-b7e7046a>function </span><span class="word" data-v-b7e7046a>fn2</span> <span class="brackets" data-v-b7e7046a>(</span><span class="word" data-v-b7e7046a>param</span> <span class="brackets" data-v-b7e7046a>){</span></div>',23),Kr=as(()=>v("span",{class:"word"},"param.name",-1)),Xr=as(()=>v("span",{class:"then"},"=",-1)),Yr=as(()=>v("span",{class:"src"},'"會改變值但不改變指向"',-1)),Gr=U('<div class="pTwo" data-v-b7e7046a><span class="word" data-v-b7e7046a>param</span> <span class="then" data-v-b7e7046a>=</span><span class="brackets" data-v-b7e7046a>{};</span><span class="comment" data-v-b7e7046a>//改變了形參的指向</span></div><div class="brackets" data-v-b7e7046a>}</div><div data-v-b7e7046a><span class="word" data-v-b7e7046a>fn2</span> <span class="brackets" data-v-b7e7046a>(</span><span class="word" data-v-b7e7046a>arg2</span> <span class="brackets" data-v-b7e7046a>); </span></div><div data-v-b7e7046a><span class="word" data-v-b7e7046a>console.</span><span class="variable" data-v-b7e7046a>log</span> <span class="brackets" data-v-b7e7046a>(</span><span class="word" data-v-b7e7046a>arg2</span> <span class="brackets" data-v-b7e7046a>); </span><span class="comment" data-v-b7e7046a>// { name: &quot;會改變值但不改變指向&quot; } </span></div><span class="comment" data-v-b7e7046a>// 不能改變引用地址, 能改變值 </span><br data-v-b7e7046a><br data-v-b7e7046a><div class="comment" data-v-b7e7046a>// 函數的參數個數、數據類型不一定要相同</div><div data-v-b7e7046a><span class="function" data-v-b7e7046a>function </span><span class="word" data-v-b7e7046a>fn3</span> <span class="brackets" data-v-b7e7046a>(</span><span class="word" data-v-b7e7046a>arg1:string,arg2</span><span class="brackets" data-v-b7e7046a>){</span></div><div class="pTwo" data-v-b7e7046a><span class="comment" data-v-b7e7046a>// 1. arg1 傳入 number 類型 可以</span></div><div class="pTwo" data-v-b7e7046a><span class="comment" data-v-b7e7046a>// 2. arg2 沒傳入 是 undefined </span></div><div class="brackets" data-v-b7e7046a>}</div>',12),Qr=U('<br data-v-b7e7046a><br data-v-b7e7046a><p class="fz28" data-v-b7e7046a>需求 寫一個求和函數</p><p class="fz28" data-v-b7e7046a>不管傳入多少實參 都要求和</p><p class="fz28" data-v-b7e7046a>getSum( 2, 3)</p><p class="fz28" data-v-b7e7046a>getSum( 1, 2, 3)</p><p class="fz28" data-v-b7e7046a>getSum( 1, 2, 3, 4, 5,)</p><div id="twofunction003" class="articleCardTitle cor36 fz34" data-v-b7e7046a> 2.3 動態參數 arguments </div><div class="bgcVS" data-v-b7e7046a><div data-v-b7e7046a><span class="function" data-v-b7e7046a>function </span><span class="word" data-v-b7e7046a>getSum</span> <span class="brackets" data-v-b7e7046a>(){</span></div><div class="comment pTwo" data-v-b7e7046a> // arguments 動態參數 只存在於 函數裡面 </div><div class="comment pTwo" data-v-b7e7046a> // 1. 是偽數組 -&gt; 有所引號 有下標 沒有常用的方法 </div><div class="word pTwo" data-v-b7e7046a><span class="word" data-v-b7e7046a>console.</span><span class="variable" data-v-b7e7046a>log</span> <span class="brackets" data-v-b7e7046a>(</span><span class="word" data-v-b7e7046a>arguments</span><span class="brackets" data-v-b7e7046a>) </span><span class="comment" data-v-b7e7046a>// [2,3,4]</span></div><div class="pTwo" data-v-b7e7046a><span class="function" data-v-b7e7046a>let </span> <span class="word" data-v-b7e7046a>sum</span><span class="then" data-v-b7e7046a>=</span> <span class="number" data-v-b7e7046a>0</span></div><div class="pTwo" data-v-b7e7046a><span class="then" data-v-b7e7046a>for </span> <span class="brackets" data-v-b7e7046a>(</span><span class="function" data-v-b7e7046a>let </span> <span class="word" data-v-b7e7046a>i</span><span class="then" data-v-b7e7046a>=</span> <span class="number" data-v-b7e7046a>0</span><span class="then" data-v-b7e7046a>;</span> <span class="word" data-v-b7e7046a>i</span><span class="then" data-v-b7e7046a>＜</span><span class="word" data-v-b7e7046a>arguments.length</span><span class="then" data-v-b7e7046a>;</span> <span class="word" data-v-b7e7046a>i++</span><span class="brackets" data-v-b7e7046a>){</span></div><div class="pFou" data-v-b7e7046a><span class="word" data-v-b7e7046a>sum</span> <span class="then" data-v-b7e7046a>+=</span><span class="word" data-v-b7e7046a>arguments</span><span class="brackets" data-v-b7e7046a>[</span> <span class="word" data-v-b7e7046a>i</span><span class="brackets" data-v-b7e7046a>]</span></div><div class="pTwo brackets" data-v-b7e7046a>}</div><div class="pTwo" data-v-b7e7046a><span class="word" data-v-b7e7046a>sum</span> <span class="then" data-v-b7e7046a>+=</span><span class="word" data-v-b7e7046a>arguments</span><span class="brackets" data-v-b7e7046a>[</span> <span class="word" data-v-b7e7046a>i</span><span class="brackets" data-v-b7e7046a>]</span></div><div class="brackets" data-v-b7e7046a>}</div><div data-v-b7e7046a><span class="word" data-v-b7e7046a>getSum</span> <span class="brackets" data-v-b7e7046a>(</span><span class="word" data-v-b7e7046a>2,3,4</span> <span class="brackets" data-v-b7e7046a>)</span></div></div><br data-v-b7e7046a><br data-v-b7e7046a><p class="fz28" data-v-b7e7046a>總結</p><p class="fz28" data-v-b7e7046a>1. arguments 是一個偽數組, 只存在函數中</p><p class="fz28" data-v-b7e7046a>2. arguments 作用是 動態獲取函數的 實參</p><p class="fz28" data-v-b7e7046a>3. 可用 for 循環依次得到傳過來的 實參</p><br data-v-b7e7046a><br data-v-b7e7046a><p class="fz28" data-v-b7e7046a>需求 寫一個求和函數</p><p class="fz28" data-v-b7e7046a>不管傳入多少實參 都要求和</p><p class="fz28" data-v-b7e7046a>getSum( 2, 3)</p><p class="fz28" data-v-b7e7046a>getSum( 1, 2, 3)</p><p class="fz28" data-v-b7e7046a>getSum( 1, 2, 3, 4, 5,)</p><p class="fz28" data-v-b7e7046a>改成形參?</p><div id="twofunction004" class="articleCardTitle cor36 fz34" data-v-b7e7046a> 2.4 剩餘參數 ＜- 建議用這個 </div><p class="fz28" data-v-b7e7046a>剩餘參數允許我們將一個不定數量的參數表示為一個數組</p><div class="bgcVS" data-v-b7e7046a><div data-v-b7e7046a><span class="function" data-v-b7e7046a>function </span><span class="word" data-v-b7e7046a>getSum</span> <span class="brackets" data-v-b7e7046a>(</span><span class="word" data-v-b7e7046a>...arr</span><span class="brackets" data-v-b7e7046a>){</span></div><div class="word pTwo" data-v-b7e7046a><span class="word" data-v-b7e7046a>console.</span><span class="variable" data-v-b7e7046a>log</span> <span class="brackets" data-v-b7e7046a>(</span><span class="word" data-v-b7e7046a>arr</span><span class="brackets" data-v-b7e7046a>) </span><span class="comment" data-v-b7e7046a>// [2,3,4]</span></div><div class="brackets" data-v-b7e7046a>}</div><div data-v-b7e7046a><span class="word" data-v-b7e7046a>getSum</span> <span class="brackets" data-v-b7e7046a>(</span><span class="word" data-v-b7e7046a>2,3,4</span> <span class="brackets" data-v-b7e7046a>)</span></div><br data-v-b7e7046a><div data-v-b7e7046a><span class="function" data-v-b7e7046a>function </span><span class="word" data-v-b7e7046a>getSum</span> <span class="brackets" data-v-b7e7046a>(</span><span class="word" data-v-b7e7046a>a, b, ...arr</span><span class="brackets" data-v-b7e7046a>){</span></div><div class="comment pTwo" data-v-b7e7046a>// 2 給 a , 3 給 b</div><div class="word pTwo" data-v-b7e7046a><span class="word" data-v-b7e7046a>console.</span><span class="variable" data-v-b7e7046a>log</span> <span class="brackets" data-v-b7e7046a>(</span><span class="word" data-v-b7e7046a>arr</span><span class="brackets" data-v-b7e7046a>) </span><span class="comment" data-v-b7e7046a>// [2,3,4] </span><span class="comment" data-v-b7e7046a>// 使用時不用...</span></div><div class="brackets" data-v-b7e7046a>}</div><div data-v-b7e7046a><span class="word" data-v-b7e7046a>getSum</span> <span class="brackets" data-v-b7e7046a>(</span><span class="word" data-v-b7e7046a>2,3,4</span> <span class="brackets" data-v-b7e7046a>)</span></div></div><br data-v-b7e7046a><p class="fz28" data-v-b7e7046a>動態、剩餘參數差別</p><p class="fz28" data-v-b7e7046a> 1. ...是語法符號, 置於最末函數形參之前, 用於獲取多餘的實參 </p><p class="fz28" data-v-b7e7046a>2. 剩餘參數 獲取的數組是 真數組</p><div id="twofunction005" class="articleCardTitle cor36 fz34" data-v-b7e7046a> 2.5 展開運算符 </div><p class="fz28" data-v-b7e7046a>展開運算符</p><p class="fz28" data-v-b7e7046a> 可以把陣列展開, 可以利用求陣列最大值 和 合併陣列 等操作 </p><br data-v-b7e7046a><p class="fz28" data-v-b7e7046a> : 比如const a 等於, 然後一個陣列, 然後a點點點b, 這個b是一個舊陣列, 然後它會把a和b合成形成新陣列, 然後返回給變量 </p><br data-v-b7e7046a><div class="bgcVS" data-v-b7e7046a><br data-v-b7e7046a><div data-v-b7e7046a><span class="function" data-v-b7e7046a>const </span> <span class="word" data-v-b7e7046a>a</span><span class="then" data-v-b7e7046a>=</span> <span class="brackets" data-v-b7e7046a>[</span><span class="number" data-v-b7e7046a>1, 2, 3</span><span class="brackets" data-v-b7e7046a>]</span></div><div data-v-b7e7046a><span class="function" data-v-b7e7046a>const </span> <span class="word" data-v-b7e7046a>b</span><span class="then" data-v-b7e7046a>=</span> <span class="brackets" data-v-b7e7046a>[</span><span class="number" data-v-b7e7046a>4, 5, 6 </span><span class="brackets" data-v-b7e7046a>]</span></div><br data-v-b7e7046a><div class="comment" data-v-b7e7046a>用於拼接陣列</div><div data-v-b7e7046a><span class="function" data-v-b7e7046a>const </span> <span class="word" data-v-b7e7046a>c</span><span class="then" data-v-b7e7046a>=</span> <span class="brackets" data-v-b7e7046a>[</span><span class="word" data-v-b7e7046a>...a,...b</span><span class="brackets" data-v-b7e7046a>] </span><span class="comment" data-v-b7e7046a>// [1,2,3,4,5,6]</span></div><br data-v-b7e7046a><div class="comment" data-v-b7e7046a>也可以</div><div data-v-b7e7046a><span class="function" data-v-b7e7046a>const </span> <span class="word" data-v-b7e7046a>d</span><span class="then" data-v-b7e7046a>=</span> <span class="brackets" data-v-b7e7046a>[</span><span class="word" data-v-b7e7046a>...a,</span><span class="number" data-v-b7e7046a>4, 5, 6</span><span class="brackets" data-v-b7e7046a>] </span><span class="comment" data-v-b7e7046a>// [1,2,3,4,5,6]</span></div><br data-v-b7e7046a><div class="comment" data-v-b7e7046a>也可以</div><div data-v-b7e7046a><span class="word" data-v-b7e7046a>a.push</span> <span class="brackets" data-v-b7e7046a>(</span><span class="word" data-v-b7e7046a>...b</span> <span class="brackets" data-v-b7e7046a>)</span></div><div data-v-b7e7046a><span class="word" data-v-b7e7046a>console</span><span class="variable" data-v-b7e7046a>.log</span><span class="brackets" data-v-b7e7046a>(</span> <span class="word" data-v-b7e7046a>a</span><span class="brackets" data-v-b7e7046a>)</span></div><br data-v-b7e7046a><div class="comment" data-v-b7e7046a>可以做陣列淺拷貝</div><div data-v-b7e7046a><span class="function" data-v-b7e7046a>const </span> <span class="word" data-v-b7e7046a>e</span><span class="then" data-v-b7e7046a>=</span> <span class="brackets" data-v-b7e7046a>[</span><span class="word" data-v-b7e7046a>...a</span> <span class="brackets" data-v-b7e7046a>]</span></div><div data-v-b7e7046a><span class="word" data-v-b7e7046a>e.push</span> <span class="brackets" data-v-b7e7046a>(</span><span class="number" data-v-b7e7046a>4</span> <span class="brackets" data-v-b7e7046a>)</span><span class="comment" data-v-b7e7046a>// 不會影響 a</span></div><br data-v-b7e7046a><div class="comment" data-v-b7e7046a> 淺拷貝是指複製值時，原本的變數和新的變數會指向同一個址 (reference) </div><div class="comment" data-v-b7e7046a> 深拷貝是指在拷貝時不共享相同的址 (reference) </div><br data-v-b7e7046a></div><br data-v-b7e7046a><br data-v-b7e7046a><p class="fz28" data-v-b7e7046a>a={...b} 可以嗎?</p><br data-v-b7e7046a><div class="bgcVS" data-v-b7e7046a><br data-v-b7e7046a><div data-v-b7e7046a><span class="function" data-v-b7e7046a>const </span><span class="word" data-v-b7e7046a>obj1</span> <span class="then" data-v-b7e7046a>=</span><span class="brackets" data-v-b7e7046a>{</span> <span class="word" data-v-b7e7046a>a:</span><span class="number" data-v-b7e7046a>1,</span> <span class="word" data-v-b7e7046a>b:</span><span class="number" data-v-b7e7046a>2</span> <span class="brackets" data-v-b7e7046a>};</span></div><div data-v-b7e7046a><span class="function" data-v-b7e7046a>const </span><span class="word" data-v-b7e7046a>obj2</span> <span class="then" data-v-b7e7046a>=</span><span class="brackets" data-v-b7e7046a>{</span> <span class="word" data-v-b7e7046a>c:</span><span class="number" data-v-b7e7046a>3,</span> <span class="word" data-v-b7e7046a>d:</span><span class="number" data-v-b7e7046a>4</span> <span class="brackets" data-v-b7e7046a>};</span></div><br data-v-b7e7046a><span class="comment" data-v-b7e7046a>// 可以 拷貝 物件</span><div data-v-b7e7046a><span class="function" data-v-b7e7046a>const </span><span class="word" data-v-b7e7046a>newObj</span> <span class="then" data-v-b7e7046a>=</span><span class="brackets" data-v-b7e7046a>{</span> <span class="word" data-v-b7e7046a>...obj1</span><span class="brackets" data-v-b7e7046a>}</span><span class="word" data-v-b7e7046a></span></div><br data-v-b7e7046a><span class="comment" data-v-b7e7046a>// 可以 merged 2 個物件</span><div data-v-b7e7046a><span class="function" data-v-b7e7046a>const </span><span class="word" data-v-b7e7046a>merged</span> <span class="then" data-v-b7e7046a>=</span><span class="brackets" data-v-b7e7046a>{</span><span class="word" data-v-b7e7046a>...obj1,obj2</span><span class="brackets" data-v-b7e7046a>};</span></div><div data-v-b7e7046a><span class="word" data-v-b7e7046a>console.</span><span class="variable" data-v-b7e7046a>log</span> <span class="brackets" data-v-b7e7046a>(</span><span class="word" data-v-b7e7046a>merged</span><span class="brackets" data-v-b7e7046a>); </span><span class="comment" data-v-b7e7046a>// {a: 1, b: 2, c: 3, d: 4 }</span></div><br data-v-b7e7046a></div><br data-v-b7e7046a><br data-v-b7e7046a><p class="cor36 fz28" data-v-b7e7046a> 這三個點除了把一個東西展開,它在函數參數有什麼用? </p><p class="fz28" data-v-b7e7046a> 可以不去命名那個函數的參數, 直接用函數參數對象裡面的某一個東西 </p><br data-v-b7e7046a><p class="cor36 fz28" data-v-b7e7046a>參數裡面可不可以用三個點?</p><p class="fz28" data-v-b7e7046a>可以</p><br data-v-b7e7046a><p class="cor36 fz28" data-v-b7e7046a>在賦值可以用三個點嗎?</p><p class="fz28" data-v-b7e7046a>可以</p><br data-v-b7e7046a><p class="cor36 fz28" data-v-b7e7046a> 我有一個陣列長度為10,我想把前面第一個元素命名為a,後面9個元素命名為新的數組叫b怎麼做? </p><p class="fz28" data-v-b7e7046a> 方括號a然後點,然後逗號,然後點點點rest,然後方括號,然後等於array1,那就是a,那個a就是array裡的第一個 </p><br data-v-b7e7046a><br data-v-b7e7046a>',57),Zr={class:"bgcVS"},ao=U('<br data-v-b7e7046a><div class="comment" data-v-b7e7046a>// 用於函數傳參</div><br data-v-b7e7046a><div class="comment" data-v-b7e7046a>// 實參的用法</div><div data-v-b7e7046a><span class="function" data-v-b7e7046a>const </span> <span class="word" data-v-b7e7046a>a</span><span class="then" data-v-b7e7046a>=</span> <span class="brackets" data-v-b7e7046a>[</span><span class="number" data-v-b7e7046a>1, 2, 3</span><span class="brackets" data-v-b7e7046a>]</span></div>',5),so=as(()=>v("span",{class:"function"},"function ",-1)),to=as(()=>v("span",{class:"word"},"test",-1)),no=as(()=>v("span",{class:"brackets"},"(",-1)),eo=as(()=>v("span",{class:"word"},"p1,p2,p3",-1)),vo=as(()=>v("span",{class:"brackets"},"){",-1)),co=U('<div class="pTwo" data-v-b7e7046a><span class="word" data-v-b7e7046a>console.</span><span class="variable" data-v-b7e7046a>log</span> <span class="brackets" data-v-b7e7046a>(</span><span class="word" data-v-b7e7046a>p1</span> <span class="brackets" data-v-b7e7046a>);</span></div><div class="pTwo" data-v-b7e7046a><span class="word" data-v-b7e7046a>console.</span><span class="variable" data-v-b7e7046a>log</span> <span class="brackets" data-v-b7e7046a>(</span><span class="word" data-v-b7e7046a>p2</span> <span class="brackets" data-v-b7e7046a>);</span></div><div class="pTwo" data-v-b7e7046a><span class="word" data-v-b7e7046a>console.</span><span class="variable" data-v-b7e7046a>log</span> <span class="brackets" data-v-b7e7046a>(</span><span class="word" data-v-b7e7046a>p3</span> <span class="brackets" data-v-b7e7046a>);</span></div><div class="brackets" data-v-b7e7046a>}</div><div data-v-b7e7046a><span class="word" data-v-b7e7046a>test</span><span class="brackets" data-v-b7e7046a>(</span><span class="word" data-v-b7e7046a>...a</span> <span class="brackets" data-v-b7e7046a>)</span></div><br data-v-b7e7046a><div data-v-b7e7046a><span class="function" data-v-b7e7046a>function </span><span class="word" data-v-b7e7046a>sum</span> <span class="brackets" data-v-b7e7046a>(</span><span class="word" data-v-b7e7046a>a,b,c</span> <span class="brackets" data-v-b7e7046a>){</span></div><div class="pTwo" data-v-b7e7046a><span class="then" data-v-b7e7046a>return </span> <span class="word" data-v-b7e7046a>a+b+c</span></div><span class="brackets" data-v-b7e7046a>}</span><div data-v-b7e7046a><span class="function" data-v-b7e7046a>const </span><span class="word" data-v-b7e7046a>sum</span> <span class="then" data-v-b7e7046a>=</span><span class="brackets" data-v-b7e7046a>(</span> <span class="word" data-v-b7e7046a>a,b,c</span><span class="brackets" data-v-b7e7046a>)</span> <span class="function" data-v-b7e7046a>=&gt;</span><span class="word" data-v-b7e7046a>a+b+c</span></div><div data-v-b7e7046a><span class="word" data-v-b7e7046a>sum</span> <span class="brackets" data-v-b7e7046a>(</span><span class="word" data-v-b7e7046a>...a</span> <span class="brackets" data-v-b7e7046a>) </span><span class="comment" data-v-b7e7046a>// 6</span></div><br data-v-b7e7046a><div data-v-b7e7046a><span class="function" data-v-b7e7046a>const </span><span class="word" data-v-b7e7046a>sum</span> <span class="then" data-v-b7e7046a>=</span><span class="word" data-v-b7e7046a>sum</span> <span class="brackets" data-v-b7e7046a>(</span><span class="word" data-v-b7e7046a>...a</span><span class="brackets" data-v-b7e7046a>)</span></div><br data-v-b7e7046a><div class="comment" data-v-b7e7046a>// 形參的用法</div><div data-v-b7e7046a><span class="word" data-v-b7e7046a>conso.</span><span class="variable" data-v-b7e7046a>log</span> <span class="brackets" data-v-b7e7046a>(</span><span class="word" data-v-b7e7046a>Math.max</span><span class="brackets" data-v-b7e7046a>(</span><span class="src" data-v-b7e7046a>必須是字符的形式,不能直接接陣列,必須逗號隔開 </span><span class="brackets" data-v-b7e7046a>)</span> <span class="brackets" data-v-b7e7046a>)</span></div><div data-v-b7e7046a><span class="word" data-v-b7e7046a>conso.</span><span class="variable" data-v-b7e7046a>log</span> <span class="brackets" data-v-b7e7046a>(</span><span class="word" data-v-b7e7046a>Math.max</span><span class="brackets" data-v-b7e7046a>(</span> <span class="number" data-v-b7e7046a>1,2,3</span><span class="brackets" data-v-b7e7046a>)</span> <span class="brackets" data-v-b7e7046a>)</span><span class="comment" data-v-b7e7046a>// 裡面要逗號</span></div><div class="comment" data-v-b7e7046a>// 陣列沒有 求最大值 的方法</div><div data-v-b7e7046a><span class="function" data-v-b7e7046a>const </span> <span class="word" data-v-b7e7046a>a</span><span class="then" data-v-b7e7046a>=</span> <span class="brackets" data-v-b7e7046a>[</span><span class="number" data-v-b7e7046a>1, 2, 3</span><span class="brackets" data-v-b7e7046a>]</span></div><div data-v-b7e7046a><span class="function" data-v-b7e7046a>const </span> <span class="word" data-v-b7e7046a>b</span><span class="then" data-v-b7e7046a>=</span> <span class="brackets" data-v-b7e7046a>[</span><span class="number" data-v-b7e7046a>4, 5, 6</span><span class="brackets" data-v-b7e7046a>]</span></div><div data-v-b7e7046a><span class="word" data-v-b7e7046a>console.</span><span class="variable" data-v-b7e7046a>log</span> <span class="brackets" data-v-b7e7046a>(</span><span class="word" data-v-b7e7046a>...a</span><span class="brackets" data-v-b7e7046a>)</span><span class="comment" data-v-b7e7046a>// 1 2 3</span><span class="comment" data-v-b7e7046a>// 打印沒逗號,一樣能用在.max</span></div><span class="comment" data-v-b7e7046a>...a === 1,2,3</span><div data-v-b7e7046a><span class="word" data-v-b7e7046a>console.</span><span class="variable" data-v-b7e7046a>log</span> <span class="word" data-v-b7e7046a>Math</span><span class="variable" data-v-b7e7046a>.max</span> <span class="brackets" data-v-b7e7046a>(</span><span class="word" data-v-b7e7046a>...a</span><span class="brackets" data-v-b7e7046a>)</span> <span class="comment" data-v-b7e7046a>// 3</span></div><div data-v-b7e7046a><span class="word" data-v-b7e7046a>console.</span><span class="variable" data-v-b7e7046a>log</span> <span class="word" data-v-b7e7046a>Math</span><span class="variable" data-v-b7e7046a>.min</span> <span class="brackets" data-v-b7e7046a>(</span><span class="word" data-v-b7e7046a>...a</span><span class="brackets" data-v-b7e7046a>)</span> <span class="comment" data-v-b7e7046a>// 3</span></div><div data-v-b7e7046a><span class="word" data-v-b7e7046a>console.</span><span class="variable" data-v-b7e7046a>log</span> <span class="word" data-v-b7e7046a>Math</span><span class="variable" data-v-b7e7046a>.max</span> <span class="brackets" data-v-b7e7046a>(</span><span class="word" data-v-b7e7046a>...a,...b</span><span class="brackets" data-v-b7e7046a>)</span> <span class="comment" data-v-b7e7046a>// 6</span></div><br data-v-b7e7046a><div class="comment" data-v-b7e7046a>// 形參 &amp; 實參</div><div data-v-b7e7046a><span class="function" data-v-b7e7046a>function </span><span class="word" data-v-b7e7046a>test</span> <span class="brackets" data-v-b7e7046a>(</span><span class="word" data-v-b7e7046a>形參1,形參2</span><span class="brackets" data-v-b7e7046a>){ </span><span class="comment" data-v-b7e7046a>// 函數聲明的小括號裡是 形參 </span></div><div class="comment pTwo" data-v-b7e7046a>// 代碼</div><div class="brackets" data-v-b7e7046a>}</div><div data-v-b7e7046a><span class="word" data-v-b7e7046a>test</span> <span class="brackets" data-v-b7e7046a>(</span><span class="word" data-v-b7e7046a>實參1,實參2</span><span class="brackets" data-v-b7e7046a>) </span><span class="comment" data-v-b7e7046a>// 函數調用的小括號裡是 實參</span></div>',31),po=U('<div class="articleCardTitle cor36 fz34" data-v-b7e7046a>匿名函數</div><a href="https://juejin.cn/post/6844903962257129485" data-v-b7e7046a>https://juejin.cn/post/6844903962257129485</a><a href="https://hackmd.io/@Jung/H1H3ErwUI" data-v-b7e7046a>https://hackmd.io/@Jung/H1H3ErwUI</a><p class="fz28" data-v-b7e7046a>1.事件</p><p class="fz28" data-v-b7e7046a>2.物件</p><p class="fz28" data-v-b7e7046a>3.函數表達式</p><p class="fz28" data-v-b7e7046a>4.回調函數</p><p class="fz28" data-v-b7e7046a>5.函數返回值</p><p class="fz28" data-v-b7e7046a>6.模仿塊及作用域 IIFE</p><div id="twofunction006" class="articleCardTitle cor36 fz34" data-v-b7e7046a> 2.6 箭頭函數 -&gt; 更適用於本來需要匿名函數的地方 </div><p class="fz28" data-v-b7e7046a>箭頭函數 和 普通function區別</p><p class="fz28" data-v-b7e7046a> 在執行過程中不會初始化this, 也不會初始化aruguments, 它不能被new, 沒有prototype, 它不能當成構造函數執行 </p><br data-v-b7e7046a><br data-v-b7e7046a><p class="fz28" data-v-b7e7046a>另外 1. 箭頭函式可作為物件的方法使用</p><br data-v-b7e7046a><p class="fz28" data-v-b7e7046a> 2. 箭頭函式(arrow function)的 this 不因為使用 call() / apply() / bind() 方法而被修改 </p><div class="dis" data-v-b7e7046a><div class="bgcVS" data-v-b7e7046a><div data-v-b7e7046a><span class="function" data-v-b7e7046a>const </span><span class="word" data-v-b7e7046a>fn</span> <span class="then" data-v-b7e7046a>=</span><span class="function" data-v-b7e7046a>function </span><span class="brackets" data-v-b7e7046a>(){</span></div><div class="pTwo" data-v-b7e7046a><span class="word" data-v-b7e7046a>console.</span><span class="variable" data-v-b7e7046a>log</span><span class="brackets" data-v-b7e7046a>(</span> <span class="number" data-v-b7e7046a>123</span><span class="brackets" data-v-b7e7046a>)</span></div><div class="brackets" data-v-b7e7046a>}</div></div><div class="bgcVSMid" data-v-b7e7046a>&gt;</div><div class="bgcVS" data-v-b7e7046a><div data-v-b7e7046a><span class="function" data-v-b7e7046a>const </span><span class="word" data-v-b7e7046a>fn</span> <span class="then" data-v-b7e7046a>=</span><span class="brackets" data-v-b7e7046a>()</span><span class="function" data-v-b7e7046a>=&gt;</span> <span class="brackets" data-v-b7e7046a>{</span></div><div class="pTwo" data-v-b7e7046a><span class="word" data-v-b7e7046a>console.</span><span class="variable" data-v-b7e7046a>log</span><span class="brackets" data-v-b7e7046a>(</span> <span class="number" data-v-b7e7046a>123</span><span class="brackets" data-v-b7e7046a>)</span></div><div class="brackets" data-v-b7e7046a>}</div><br data-v-b7e7046a><br data-v-b7e7046a><div data-v-b7e7046a><span class="function" data-v-b7e7046a>const </span><span class="word" data-v-b7e7046a>fn</span> <span class="then" data-v-b7e7046a>=</span><span class="brackets" data-v-b7e7046a>(</span> <span class="word" data-v-b7e7046a>x</span><span class="brackets" data-v-b7e7046a>)</span><span class="function" data-v-b7e7046a>=&gt;</span><span class="brackets" data-v-b7e7046a>{ </span><span class="comment" data-v-b7e7046a>// 這裡接形參</span></div><div class="pTwo" data-v-b7e7046a><span class="word" data-v-b7e7046a>console.</span><span class="variable" data-v-b7e7046a>log</span><span class="brackets" data-v-b7e7046a>(</span> <span class="word" data-v-b7e7046a>x</span><span class="brackets" data-v-b7e7046a>)</span></div><div class="brackets" data-v-b7e7046a>}</div><div data-v-b7e7046a><span class="word" data-v-b7e7046a>fn</span> <span class="brackets" data-v-b7e7046a>(</span><span class="number" data-v-b7e7046a>1</span> <span class="brackets" data-v-b7e7046a>)</span><span class="comment" data-v-b7e7046a>// 這裡放實參</span></div><br data-v-b7e7046a><br data-v-b7e7046a><span class="comment" data-v-b7e7046a>// 只有一個形參 可省略小括號</span><div data-v-b7e7046a><span class="function" data-v-b7e7046a>const </span><span class="word" data-v-b7e7046a>fn</span> <span class="then" data-v-b7e7046a>= </span><span class="word" data-v-b7e7046a>x </span><span class="function" data-v-b7e7046a>=&gt;</span><span class="brackets" data-v-b7e7046a>{ </span></div><div class="pTwo" data-v-b7e7046a><span class="word" data-v-b7e7046a>console.</span><span class="variable" data-v-b7e7046a>log</span><span class="brackets" data-v-b7e7046a>(</span> <span class="word" data-v-b7e7046a>x</span><span class="brackets" data-v-b7e7046a>)</span></div><div class="brackets" data-v-b7e7046a>}</div><div data-v-b7e7046a><span class="word" data-v-b7e7046a>fn</span> <span class="brackets" data-v-b7e7046a>(</span><span class="number" data-v-b7e7046a>1</span> <span class="brackets" data-v-b7e7046a>)</span><span class="comment" data-v-b7e7046a>// 這裡放實參</span></div><span class="comment" data-v-b7e7046a>// 沒有形參 或 2 個形參 不可省略小括號</span><br data-v-b7e7046a><br data-v-b7e7046a><div class="comment" data-v-b7e7046a> // 只有一個語句 可省略大括號 並自動做為返回值被返回 </div><div class="comment" data-v-b7e7046a>// ( 只有一行代碼 )</div><div data-v-b7e7046a><span class="function" data-v-b7e7046a>const </span><span class="word" data-v-b7e7046a>fn</span> <span class="then" data-v-b7e7046a>= </span><span class="word" data-v-b7e7046a>x </span><span class="function" data-v-b7e7046a>=&gt; </span><span class="word" data-v-b7e7046a>console.</span><span class="variable" data-v-b7e7046a>log</span><span class="brackets" data-v-b7e7046a>(</span> <span class="word" data-v-b7e7046a>x</span><span class="brackets" data-v-b7e7046a>)</span></div><div data-v-b7e7046a><span class="word" data-v-b7e7046a>fn</span> <span class="brackets" data-v-b7e7046a>(</span><span class="number" data-v-b7e7046a>1</span> <span class="brackets" data-v-b7e7046a>)</span><span class="comment" data-v-b7e7046a>// 要先聲明在調用</span></div><br data-v-b7e7046a><br data-v-b7e7046a><span class="comment" data-v-b7e7046a>// 只有一個形參 可省略小括號</span><div data-v-b7e7046a><span class="function" data-v-b7e7046a>const </span><span class="word" data-v-b7e7046a>fn</span> <span class="then" data-v-b7e7046a>= </span><span class="word" data-v-b7e7046a>x </span><span class="function" data-v-b7e7046a>=&gt;</span><span class="brackets" data-v-b7e7046a>{ </span></div><div class="pTwo" data-v-b7e7046a><span class="then" data-v-b7e7046a>return </span><span class="word" data-v-b7e7046a>x </span><span class="then" data-v-b7e7046a>+ </span><span class="word" data-v-b7e7046a>x </span></div><div class="brackets" data-v-b7e7046a>}</div><div data-v-b7e7046a><span class="word" data-v-b7e7046a>fn</span> <span class="brackets" data-v-b7e7046a>(</span><span class="number" data-v-b7e7046a>1</span> <span class="brackets" data-v-b7e7046a>)</span><span class="comment" data-v-b7e7046a>// 2</span></div><br data-v-b7e7046a><br data-v-b7e7046a><span class="comment" data-v-b7e7046a>// 如果在一行裡面可以省 return &amp; 大括號</span><div data-v-b7e7046a><span class="function" data-v-b7e7046a>const </span><span class="word" data-v-b7e7046a>fn</span> <span class="then" data-v-b7e7046a>= </span><span class="word" data-v-b7e7046a>x </span><span class="function" data-v-b7e7046a>=&gt;</span><span class="word" data-v-b7e7046a>x </span><span class="then" data-v-b7e7046a>+ </span><span class="word" data-v-b7e7046a>x </span></div><div data-v-b7e7046a><span class="word" data-v-b7e7046a>fn</span> <span class="brackets" data-v-b7e7046a>(</span><span class="number" data-v-b7e7046a>1</span> <span class="brackets" data-v-b7e7046a>)</span><span class="comment" data-v-b7e7046a>// 2</span></div><br data-v-b7e7046a><br data-v-b7e7046a><div class="comment" data-v-b7e7046a>// 可以直接返回一個物件</div><div class="comment" data-v-b7e7046a>// 注意! 物件和函數都是 {}</div><div class="comment" data-v-b7e7046a>// 直接 ( { 物件 } )</div><div data-v-b7e7046a><span class="function" data-v-b7e7046a>const </span><span class="word" data-v-b7e7046a>fn</span> <span class="then" data-v-b7e7046a>= </span><span class="brackets" data-v-b7e7046a>(</span> <span class="word" data-v-b7e7046a>uname</span><span class="brackets" data-v-b7e7046a>)</span><span class="function" data-v-b7e7046a>=&gt;</span><span class="brackets" data-v-b7e7046a>( {</span><span class="word" data-v-b7e7046a>name: uname</span><span class="brackets" data-v-b7e7046a>} )</span></div><div data-v-b7e7046a><span class="function" data-v-b7e7046a>const </span><span class="word" data-v-b7e7046a>fn</span> <span class="then" data-v-b7e7046a>= </span><span class="brackets" data-v-b7e7046a>(</span> <span class="word" data-v-b7e7046a>uname</span><span class="brackets" data-v-b7e7046a>)</span><span class="function" data-v-b7e7046a>=&gt;</span><span class="brackets" data-v-b7e7046a>( {</span><span class="word" data-v-b7e7046a>uname: uname</span><span class="brackets" data-v-b7e7046a>} )</span></div><div data-v-b7e7046a><span class="word" data-v-b7e7046a>fn</span> <span class="brackets" data-v-b7e7046a>(</span><span class="src" data-v-b7e7046a>&quot;wayne&quot;</span> <span class="brackets" data-v-b7e7046a>)</span></div><br data-v-b7e7046a><br data-v-b7e7046a></div></div><div class="bgcVS" data-v-b7e7046a><div data-v-b7e7046a><span class="function" data-v-b7e7046a>const </span><span class="word" data-v-b7e7046a>form</span> <span class="then" data-v-b7e7046a>=</span><span class="word" data-v-b7e7046a>document.querySelector</span><span class="brackets" data-v-b7e7046a>(</span> <span class="src" data-v-b7e7046a>&quot;form&quot;</span><span class="brackets" data-v-b7e7046a>)</span></div><div data-v-b7e7046a><span class="word" data-v-b7e7046a>form.addEventListener</span><span class="brackets" data-v-b7e7046a>(</span> <span class="src" data-v-b7e7046a>&quot;click&quot;,</span><span class="function" data-v-b7e7046a>function</span><span class="brackets" data-v-b7e7046a>(e){</span></div><div class="pTwo" data-v-b7e7046a><span class="word" data-v-b7e7046a>e.preventDefault</span><span class="brackets" data-v-b7e7046a>()</span></div><div class="brackets" data-v-b7e7046a>}</div><div data-v-b7e7046a><span class="word" data-v-b7e7046a>form.addEventListener</span><span class="brackets" data-v-b7e7046a>(</span> <span class="src" data-v-b7e7046a>&quot;click&quot;,</span><span class="word" data-v-b7e7046a>ev</span> <span class="function" data-v-b7e7046a>=&gt;</span><span class="word" data-v-b7e7046a>ev.preventDefault</span><span class="brackets" data-v-b7e7046a>())</span></div></div><p class="fz28" data-v-b7e7046a>結論</p><p class="fz28" data-v-b7e7046a>1. 箭頭屬於表達式函數, 不存在函數提升</p><p class="fz28" data-v-b7e7046a>2. 只有一個形參 可省略小括號 ( )</p><p class="fz28" data-v-b7e7046a> 3. 只有一個語句 (一行代碼) 可省略大括號 { } 並自動做為返回值被返回 </p><p class="fz28" data-v-b7e7046a>4. 加括號 ( ) 的函數體 返回 物件字面量 表達式</p><br data-v-b7e7046a><br data-v-b7e7046a><div class="articleCardTitle cor36 fz34" data-v-b7e7046a>箭頭函數參數</div><p class="fz28" data-v-b7e7046a>箭頭函數 沒有 arguments 動態參數</p><p class="fz28" data-v-b7e7046a>有 剩餘參數 ...args</p><div class="bgcVS" data-v-b7e7046a><div class="comment" data-v-b7e7046a>// 利用箭頭函數來求和</div><div data-v-b7e7046a><span class="function" data-v-b7e7046a>const </span><span class="word" data-v-b7e7046a>getSum</span> <span class="then" data-v-b7e7046a>=</span><span class="brackets" data-v-b7e7046a>(</span> <span class="word" data-v-b7e7046a>...arr</span><span class="brackets" data-v-b7e7046a>)</span> <span class="function" data-v-b7e7046a>=&gt;</span><span class="brackets" data-v-b7e7046a>{</span></div><div class="pTwo" data-v-b7e7046a><span class="function" data-v-b7e7046a>let </span> <span class="word" data-v-b7e7046a>sum</span><span class="then" data-v-b7e7046a>=</span> <span class="number" data-v-b7e7046a>0</span></div><div class="pTwo" data-v-b7e7046a><span class="then" data-v-b7e7046a>for </span> <span class="brackets" data-v-b7e7046a>(</span><span class="function" data-v-b7e7046a>let </span> <span class="word" data-v-b7e7046a>i</span><span class="then" data-v-b7e7046a>=</span> <span class="number" data-v-b7e7046a>0</span><span class="then" data-v-b7e7046a>;</span> <span class="word" data-v-b7e7046a>i</span><span class="then" data-v-b7e7046a>＜</span> <span class="word" data-v-b7e7046a>arr.length</span><span class="then" data-v-b7e7046a>;</span> <span class="word" data-v-b7e7046a>i</span><span class="then" data-v-b7e7046a>++</span> <span class="brackets" data-v-b7e7046a>){</span></div><div class="pFou" data-v-b7e7046a><span class="word" data-v-b7e7046a>sum</span> <span class="then" data-v-b7e7046a>+=</span><span class="word" data-v-b7e7046a>arr</span> <span class="brackets" data-v-b7e7046a>[</span><span class="word" data-v-b7e7046a>i</span> <span class="brackets" data-v-b7e7046a>]</span></div><div class="pTwo brackets" data-v-b7e7046a>}</div><div class="pTwo" data-v-b7e7046a><span class="then" data-v-b7e7046a>return </span> <span class="word" data-v-b7e7046a>sum</span></div><div class="brackets" data-v-b7e7046a>}</div><div data-v-b7e7046a><span class="word" data-v-b7e7046a>getSum</span> <span class="brackets" data-v-b7e7046a>(</span><span class="number" data-v-b7e7046a>2,3</span> <span class="brackets" data-v-b7e7046a>)</span></div></div><div class="articleCardTitle cor36 fz34" data-v-b7e7046a>箭頭函數 this</div><p class="fz28" data-v-b7e7046a>箭頭函數的this指向哪裡?</p><p class="fz28" data-v-b7e7046a>外部的this or (捕獲其上下文中的this)</p><p class="fz28" data-v-b7e7046a> 箭頭函數不創建 this , 他從自己的作用域鏈的上一層沿用 this </p><div class="bgcVS" data-v-b7e7046a><div class="comment" data-v-b7e7046a> // 以前學this指向:誰調用的這個函數,this就指向誰 </div><div data-v-b7e7046a><span class="word" data-v-b7e7046a>console.</span><span class="variable" data-v-b7e7046a>log</span> <span class="brackets" data-v-b7e7046a>(</span><span class="then" data-v-b7e7046a>this</span> <span class="brackets" data-v-b7e7046a>)</span><span class="comment" data-v-b7e7046a>//window</span></div><br data-v-b7e7046a><div data-v-b7e7046a><span class="function" data-v-b7e7046a>function </span><span class="word" data-v-b7e7046a>fn</span> <span class="brackets" data-v-b7e7046a>(){</span></div><div class="pTwo" data-v-b7e7046a><span class="word" data-v-b7e7046a>console.</span><span class="variable" data-v-b7e7046a>log</span> <span class="brackets" data-v-b7e7046a>(</span><span class="then" data-v-b7e7046a>this</span> <span class="brackets" data-v-b7e7046a>)</span><span class="comment" data-v-b7e7046a>//window</span></div><div class="brackets" data-v-b7e7046a>}</div><br data-v-b7e7046a><div data-v-b7e7046a><span class="function" data-v-b7e7046a>const </span><span class="word" data-v-b7e7046a>obj</span> <span class="then" data-v-b7e7046a>=</span><span class="brackets" data-v-b7e7046a>{</span></div><div class="pTwo" data-v-b7e7046a><span class="word" data-v-b7e7046a>uname:</span> <span class="src" data-v-b7e7046a>&quot;wayne&quot;</span></div><div class="pTwo" data-v-b7e7046a><span class="word" data-v-b7e7046a>sayHi:</span><span class="function" data-v-b7e7046a>function </span><span class="brackets" data-v-b7e7046a>(){</span></div><div class="pFou" data-v-b7e7046a><span class="word" data-v-b7e7046a>console.</span><span class="variable" data-v-b7e7046a>log</span> <span class="brackets" data-v-b7e7046a>(</span><span class="then" data-v-b7e7046a>this</span> <span class="brackets" data-v-b7e7046a>)</span><span class="comment" data-v-b7e7046a>// obj</span></div><div class="brackets pTwo" data-v-b7e7046a>}</div><div class="brackets" data-v-b7e7046a>}</div><div data-v-b7e7046a><span class="word" data-v-b7e7046a>obj.sayHi</span><span class="brackets" data-v-b7e7046a>()</span></div><div class="comment" data-v-b7e7046a>// sayHi() 是 obj 調用的</div><div class="comment" data-v-b7e7046a>// this 指向 obj</div><br data-v-b7e7046a><br data-v-b7e7046a><div class="comment" data-v-b7e7046a>// 箭頭 this指向 上一層作用域的 this 指向</div><div data-v-b7e7046a><span class="function" data-v-b7e7046a>const </span> <span class="word" data-v-b7e7046a>fn</span><span class="then" data-v-b7e7046a>=</span> <span class="brackets" data-v-b7e7046a>()</span><span class="function" data-v-b7e7046a>=&gt;</span> <span class="brackets" data-v-b7e7046a>{</span></div><div class="pTwo" data-v-b7e7046a><span class="word" data-v-b7e7046a>console.</span><span class="variable" data-v-b7e7046a>log</span> <span class="brackets" data-v-b7e7046a>(</span><span class="then" data-v-b7e7046a>this</span> <span class="brackets" data-v-b7e7046a>)</span><span class="comment" data-v-b7e7046a>//window</span></div><div class="brackets" data-v-b7e7046a>}</div><span class="word" data-v-b7e7046a>fn</span> <span class="brackets" data-v-b7e7046a>()</span><br data-v-b7e7046a><div data-v-b7e7046a><span class="function" data-v-b7e7046a>const </span><span class="word" data-v-b7e7046a>obj</span> <span class="then" data-v-b7e7046a>=</span><span class="brackets" data-v-b7e7046a>{</span></div><div class="pTwo" data-v-b7e7046a><span class="word" data-v-b7e7046a>uname:</span> <span class="src" data-v-b7e7046a>&quot;wayne&quot;</span></div><div class="pTwo" data-v-b7e7046a><span class="word" data-v-b7e7046a>sayHi:</span><span class="brackets" data-v-b7e7046a>()</span><span class="function" data-v-b7e7046a>=&gt; </span><span class="brackets" data-v-b7e7046a>{</span></div><div class="pFou" data-v-b7e7046a><span class="word" data-v-b7e7046a>console.</span><span class="variable" data-v-b7e7046a>log</span> <span class="brackets" data-v-b7e7046a>(</span><span class="then" data-v-b7e7046a>this</span> <span class="brackets" data-v-b7e7046a>)</span><span class="comment" data-v-b7e7046a>// window</span></div><div class="comment pFou" data-v-b7e7046a>// 1. { 裡面沒有 this }</div><div class="comment pFou" data-v-b7e7046a>// 2. 往上一層 作用域找</div><div class="comment pFou" data-v-b7e7046a> // 3. obj.sayHi() 是 window.obj.sayHi() </div><div class="comment pFou" data-v-b7e7046a>// . 是window來調用的</div><div class="comment pFou" data-v-b7e7046a>// this 指向 window</div><div class="brackets pTwo" data-v-b7e7046a>}</div><div class="brackets" data-v-b7e7046a>}</div><div data-v-b7e7046a><span class="word" data-v-b7e7046a>obj.sayHi</span><span class="brackets" data-v-b7e7046a>()</span></div><br data-v-b7e7046a><br data-v-b7e7046a><div data-v-b7e7046a><span class="function" data-v-b7e7046a>const </span><span class="word" data-v-b7e7046a>obj</span> <span class="then" data-v-b7e7046a>=</span><span class="brackets" data-v-b7e7046a>{</span></div><div class="pTwo" data-v-b7e7046a><span class="word" data-v-b7e7046a>uname:</span> <span class="src" data-v-b7e7046a>&quot;wayne&quot;</span></div><div class="" data-v-b7e7046a><div class="pTwo" data-v-b7e7046a><span class="word" data-v-b7e7046a>sayHi:</span><span class="function" data-v-b7e7046a>function </span><span class="brackets" data-v-b7e7046a>(){</span></div><div class="pFou" data-v-b7e7046a><span class="word" data-v-b7e7046a>console.</span><span class="variable" data-v-b7e7046a>log</span><span class="brackets" data-v-b7e7046a>(</span> <span class="then" data-v-b7e7046a>this</span><span class="brackets" data-v-b7e7046a>)</span><span class="comment" data-v-b7e7046a>// obj</span></div><div class="pFou" data-v-b7e7046a><span class="function" data-v-b7e7046a>let </span> <span class="word" data-v-b7e7046a>i</span><span class="then" data-v-b7e7046a>=</span> <span class="number" data-v-b7e7046a>10</span></div><div class="" data-v-b7e7046a><div class="pFou" data-v-b7e7046a><span class="function" data-v-b7e7046a>const </span><span class="word" data-v-b7e7046a>count</span> <span class="then" data-v-b7e7046a>=</span><span class="brackets" data-v-b7e7046a>()</span><span class="function" data-v-b7e7046a>=&gt;</span><span class="brackets" data-v-b7e7046a>{</span></div><div class="pSix" data-v-b7e7046a><span class="word" data-v-b7e7046a>console.</span><span class="variable" data-v-b7e7046a>log</span><span class="brackets" data-v-b7e7046a>(</span> <span class="then" data-v-b7e7046a>this</span><span class="brackets" data-v-b7e7046a>)</span><span class="comment" data-v-b7e7046a>// obj</span></div><div class="brackets pFou" data-v-b7e7046a>}</div><div class="pFou" data-v-b7e7046a><span class="word" data-v-b7e7046a>count</span><span class="brackets" data-v-b7e7046a>()</span></div></div><div class="brackets pTwo" data-v-b7e7046a>}</div></div><div class="brackets" data-v-b7e7046a>}</div><div data-v-b7e7046a><span class="word" data-v-b7e7046a>obj.sayHi</span><span class="brackets" data-v-b7e7046a>()</span></div><br data-v-b7e7046a><br data-v-b7e7046a><div data-v-b7e7046a><span class="function" data-v-b7e7046a>const </span><span class="word" data-v-b7e7046a>obj</span> <span class="then" data-v-b7e7046a>=</span><span class="brackets" data-v-b7e7046a>{</span></div><div class="pTwo" data-v-b7e7046a><span class="word" data-v-b7e7046a>uname:</span> <span class="src" data-v-b7e7046a>&quot;wayne&quot;</span></div><div class="bor1" data-v-b7e7046a><span class="comment" data-v-b7e7046a>// 這層函數 this 指向他的調用者 obj</span><div class="pTwo" data-v-b7e7046a><span class="word" data-v-b7e7046a>sayHi:</span><span class="function" data-v-b7e7046a>function </span><span class="brackets" data-v-b7e7046a>(){</span></div><div class="pFou" data-v-b7e7046a><span class="word" data-v-b7e7046a>console.</span><span class="variable" data-v-b7e7046a>log</span><span class="brackets" data-v-b7e7046a>(</span> <span class="then" data-v-b7e7046a>this</span><span class="brackets" data-v-b7e7046a>)</span><span class="comment" data-v-b7e7046a>// obj</span></div><div class="pFou" data-v-b7e7046a><span class="function" data-v-b7e7046a>let </span> <span class="word" data-v-b7e7046a>i</span><span class="then" data-v-b7e7046a>=</span> <span class="number" data-v-b7e7046a>10</span></div><div class="bor2" data-v-b7e7046a><span class="comment" data-v-b7e7046a>// 這層沒有 this 往上一層找 ^</span><div class="pTwo" data-v-b7e7046a><span class="function" data-v-b7e7046a>const </span><span class="word" data-v-b7e7046a>count</span> <span class="then" data-v-b7e7046a>=</span><span class="brackets" data-v-b7e7046a>()</span><span class="function" data-v-b7e7046a>=&gt;</span><span class="brackets" data-v-b7e7046a>{</span></div><div class="pFou" data-v-b7e7046a><span class="word" data-v-b7e7046a>console.</span><span class="variable" data-v-b7e7046a>log</span><span class="brackets" data-v-b7e7046a>(</span> <span class="then" data-v-b7e7046a>this</span><span class="brackets" data-v-b7e7046a>)</span><span class="comment" data-v-b7e7046a>// obj</span></div><div class="brackets pTwo" data-v-b7e7046a>}</div><div class="pTwo" data-v-b7e7046a><span class="word" data-v-b7e7046a>count</span><span class="brackets" data-v-b7e7046a>()</span></div></div><div class="brackets pTwo" data-v-b7e7046a>}</div></div><div class="brackets" data-v-b7e7046a>}</div><div data-v-b7e7046a><span class="word" data-v-b7e7046a>obj.sayHi</span><span class="brackets" data-v-b7e7046a>()</span></div><br data-v-b7e7046a><br data-v-b7e7046a><div data-v-b7e7046a><span class="function" data-v-b7e7046a>const </span><span class="word" data-v-b7e7046a>btn</span> <span class="then" data-v-b7e7046a>=</span><span class="word" data-v-b7e7046a>document.querySelector</span><span class="brackets" data-v-b7e7046a>(</span> <span class="src" data-v-b7e7046a>&quot;.btn&quot;</span><span class="brackets" data-v-b7e7046a>)</span></div><span class="comment" data-v-b7e7046a>//普通函數指DOM對象</span><div data-v-b7e7046a><span class="word" data-v-b7e7046a>btn.addEventListener</span><span class="brackets" data-v-b7e7046a>(</span> <span class="src" data-v-b7e7046a>&quot;click&quot;,</span><span class="function" data-v-b7e7046a>function</span><span class="brackets" data-v-b7e7046a>(){</span></div><div class="pTwo" data-v-b7e7046a><span class="word" data-v-b7e7046a>console.</span><span class="variable" data-v-b7e7046a>log</span> <span class="brackets" data-v-b7e7046a>(</span><span class="then" data-v-b7e7046a>this</span> <span class="brackets" data-v-b7e7046a>)</span><span class="comment" data-v-b7e7046a>// btn</span></div><div class="brackets" data-v-b7e7046a>}</div><div data-v-b7e7046a><span class="comment" data-v-b7e7046a>// 箭頭函數 此時 this 指向 window</span></div><div data-v-b7e7046a><span class="word" data-v-b7e7046a>btn.addEventListener</span><span class="brackets" data-v-b7e7046a>(</span> <span class="src" data-v-b7e7046a>&quot;click&quot;,</span><span class="brackets" data-v-b7e7046a>()</span><span class="function" data-v-b7e7046a>=&gt; </span><span class="brackets" data-v-b7e7046a>{</span></div><div class="pTwo" data-v-b7e7046a><span class="word" data-v-b7e7046a>console.</span><span class="variable" data-v-b7e7046a>log</span> <span class="brackets" data-v-b7e7046a>(</span><span class="then" data-v-b7e7046a>this</span> <span class="brackets" data-v-b7e7046a>)</span><span class="comment" data-v-b7e7046a>// window</span></div><div class="brackets" data-v-b7e7046a>})</div></div><p class="fz28" data-v-b7e7046a> 箭頭函式(arrow function)的 this 不因為使用 call() / apply() / bind() 方法而被修改 </p><p class="fz28" data-v-b7e7046a></p><p class="fz28" data-v-b7e7046a></p><p class="fz28" data-v-b7e7046a></p><p class="fz28" data-v-b7e7046a></p><p class="fz28" data-v-b7e7046a></p><p class="fz28" data-v-b7e7046a></p><p class="fz28" data-v-b7e7046a></p><p class="fz28" data-v-b7e7046a></p><p class="fz28" data-v-b7e7046a></p><p class="fz28" data-v-b7e7046a></p><p class="fz28" data-v-b7e7046a></p><p class="fz28" data-v-b7e7046a></p><p class="fz28" data-v-b7e7046a></p><p class="fz28" data-v-b7e7046a></p><p class="fz28" data-v-b7e7046a></p><p class="fz28" data-v-b7e7046a></p><p class="fz28" data-v-b7e7046a></p><p class="fz28" data-v-b7e7046a></p><p class="fz28" data-v-b7e7046a></p><p class="fz28" data-v-b7e7046a></p><p class="fz28" data-v-b7e7046a></p><p class="fz28" data-v-b7e7046a></p><p class="fz28" data-v-b7e7046a></p><p class="fz28" data-v-b7e7046a></p><p class="fz28" data-v-b7e7046a></p><p class="fz28" data-v-b7e7046a></p><p class="fz28" data-v-b7e7046a></p>',63),lo=as(()=>v("div",{class:"toTopButton"},[v("div",{class:"disCen"},"___"),v("div",{class:"disCen"},"▲")],-1)),io=[lo],ro=as(()=>v("div",{class:"toBotButton"},[v("div",{class:"disCen"},"▼"),v("div",{class:"disCen"},"￣")],-1)),oo=[ro],fo={__name:"JsPageThreeTwo",setup(a){const s=ua(!1);window.addEventListener("scroll",function(){s.value=window.scrollY>0});function d(){window.scrollTo({top:0,left:0,behavior:"smooth"})}function n(){window.scrollTo({top:999999,left:0,behavior:"smooth"})}function t(c){window.scrollTo({top:document.getElementById(`${c}`).offsetTop,behavior:"smooth"})}return(c,e)=>{const l=za("dir");return da(),ca(Q,null,[v("section",null,[v("div",Fr,[v("div",Ir,[v("div",Rr,[v("div",{onClick:e[0]||(e[0]=p=>t("twofunction001")),class:"leftNavText"}," 函數提升 "),v("div",{onClick:e[1]||(e[1]=p=>t("twofunction002")),class:"leftNavText"}," 形參實參 "),v("div",{onClick:e[2]||(e[2]=p=>t("twofunction003")),class:"leftNavText"}," 動態參數 "),v("div",{onClick:e[3]||(e[3]=p=>t("twofunction004")),class:"leftNavText"}," 剩餘參數 "),v("div",{onClick:e[4]||(e[4]=p=>t("twofunction005")),class:"leftNavText"}," 展開運算符 "),v("div",{onClick:e[5]||(e[5]=p=>t("twofunction006")),class:"leftNavText"}," 箭頭函數 "),v("div",{onClick:e[6]||(e[6]=p=>t("")),class:"leftNavText"})])])]),v("div",Hr,[v("div",Br,[v("div",Jr,[Dr,v("div",Wr,[Ur,T(l,{class:"pTwo"},{default:C(()=>[Kr,fa(),Xr,Yr]),_:1}),Gr]),Qr,v("div",Zr,[ao,T(l,null,{default:C(()=>[so,to,fa(),no,eo,vo]),_:1}),co]),po])])])]),v("div",null,[X(T(W,{name:"fade",tag:"div"},{default:C(()=>[v("div",{onClick:d,class:"toTop"},io)]),_:1},512),[[Y,s.value]]),X(T(W,{name:"fade",tag:"div"},{default:C(()=>[v("div",{onClick:n,class:"toBot"},oo)]),_:1},512),[[Y,s.value]])])],64)}}},bo=ra(fo,[["__scopeId","data-v-b7e7046a"]]);const Tv=a=>(ma("data-v-222ff4b9"),a=a(),ha(),a),uo={class:"leftNav"},wo={class:"leftNavContainer"},mo={class:"leftNavLayout"},ho=U('<div class="Main" data-v-222ff4b9><div class="mainContainer" data-v-222ff4b9><div class="mainLayout" data-v-222ff4b9><br data-v-222ff4b9><br data-v-222ff4b9><p class="fz28" data-v-222ff4b9>總分總</p><p class="fz28" data-v-222ff4b9>1.要講哪個知識點</p><p class="fz28" data-v-222ff4b9>2.細講</p><p class="fz28" data-v-222ff4b9>3.總結</p><br data-v-222ff4b9><br data-v-222ff4b9><div id="threeda001" class="articleCardTitle cor36 fz34" data-v-222ff4b9> 3.1 數組解構 </div><p class="fz28" data-v-222ff4b9>解構賦值允許從物件或陣列中提取值並將其賦給變數</p><br data-v-222ff4b9><p class="fz28" data-v-222ff4b9> 數組解構是將數組的單元值快速批量賦值給一系列變量的簡潔語法 </p><br data-v-222ff4b9><p class="fz28" data-v-222ff4b9>1. 是什麼? _ 語法</p><p class="fz28" data-v-222ff4b9>2. 做什麼? _ 批量賦值給變量</p><p class="fz28" data-v-222ff4b9>3. 誰賦值給變量? _ 單元值</p><p class="fz28" data-v-222ff4b9>4. 單元值? _ 數組原素</p><div class="dis" data-v-222ff4b9><div class="bgcVS w100" data-v-222ff4b9><div data-v-222ff4b9><span class="function" data-v-222ff4b9>const </span><span class="word" data-v-222ff4b9>arr</span> <span class="then" data-v-222ff4b9>=</span><span class="brackets" data-v-222ff4b9>[</span><span class="number" data-v-222ff4b9>100,60,80</span><span class="brackets" data-v-222ff4b9>]</span></div><div data-v-222ff4b9><span class="function" data-v-222ff4b9>const </span><span class="word" data-v-222ff4b9>max</span> <span class="then" data-v-222ff4b9>=</span><span class="word" data-v-222ff4b9>arr</span> <span class="brackets" data-v-222ff4b9>[</span><span class="number" data-v-222ff4b9>0</span> <span class="brackets" data-v-222ff4b9>]</span></div><div data-v-222ff4b9><span class="function" data-v-222ff4b9>const </span><span class="word" data-v-222ff4b9>min</span> <span class="then" data-v-222ff4b9>=</span><span class="word" data-v-222ff4b9>arr</span> <span class="brackets" data-v-222ff4b9>[</span><span class="number" data-v-222ff4b9>1</span> <span class="brackets" data-v-222ff4b9>]</span></div><div data-v-222ff4b9><span class="function" data-v-222ff4b9>const </span><span class="word" data-v-222ff4b9>avg</span> <span class="then" data-v-222ff4b9>=</span><span class="word" data-v-222ff4b9>arr</span> <span class="brackets" data-v-222ff4b9>[</span><span class="number" data-v-222ff4b9>3</span> <span class="brackets" data-v-222ff4b9>]</span></div><div data-v-222ff4b9><span class="word" data-v-222ff4b9>console.</span><span class="variable" data-v-222ff4b9>log</span><span class="brackets" data-v-222ff4b9>(</span> <span class="word" data-v-222ff4b9>max</span><span class="brackets" data-v-222ff4b9>)</span></div><div data-v-222ff4b9><span class="word" data-v-222ff4b9>console.</span><span class="variable" data-v-222ff4b9>log</span><span class="brackets" data-v-222ff4b9>(</span> <span class="word" data-v-222ff4b9>min</span><span class="brackets" data-v-222ff4b9>)</span></div><div data-v-222ff4b9><span class="word" data-v-222ff4b9>console.</span><span class="variable" data-v-222ff4b9>log</span><span class="brackets" data-v-222ff4b9>(</span> <span class="word" data-v-222ff4b9>avg</span><span class="brackets" data-v-222ff4b9>)</span></div></div><div class="bgcVSMid" data-v-222ff4b9>&gt;</div><div class="bgcVS w100" data-v-222ff4b9><div data-v-222ff4b9><span class="function" data-v-222ff4b9>const </span><span class="brackets" data-v-222ff4b9>[</span><span class="word" data-v-222ff4b9>max,min,avg</span><span class="brackets" data-v-222ff4b9>]</span> <span class="then" data-v-222ff4b9>=</span><span class="brackets" data-v-222ff4b9>[</span><span class="number" data-v-222ff4b9>100,60,80</span><span class="brackets" data-v-222ff4b9>]</span></div><div data-v-222ff4b9><span class="word" data-v-222ff4b9>console.</span><span class="variable" data-v-222ff4b9>log</span><span class="brackets" data-v-222ff4b9>(</span> <span class="word" data-v-222ff4b9>max</span><span class="brackets" data-v-222ff4b9>)</span></div><div data-v-222ff4b9><span class="word" data-v-222ff4b9>console.</span><span class="variable" data-v-222ff4b9>log</span><span class="brackets" data-v-222ff4b9>(</span> <span class="word" data-v-222ff4b9>min</span><span class="brackets" data-v-222ff4b9>)</span></div><div data-v-222ff4b9><span class="word" data-v-222ff4b9>console.</span><span class="variable" data-v-222ff4b9>log</span><span class="brackets" data-v-222ff4b9>(</span> <span class="word" data-v-222ff4b9>avg</span><span class="brackets" data-v-222ff4b9>)</span></div></div></div><div class="bgcVS" data-v-222ff4b9><div data-v-222ff4b9><span class="function" data-v-222ff4b9>const </span><span class="word" data-v-222ff4b9>arr</span> <span class="then" data-v-222ff4b9>=</span><span class="brackets" data-v-222ff4b9>[</span><span class="number" data-v-222ff4b9>100,60,80</span><span class="brackets" data-v-222ff4b9>]</span></div><div data-v-222ff4b9><span class="function" data-v-222ff4b9>const </span><span class="brackets" data-v-222ff4b9>[</span><span class="word" data-v-222ff4b9>max,min,avg</span><span class="brackets" data-v-222ff4b9>]</span> <span class="then" data-v-222ff4b9>=</span><span class="word" data-v-222ff4b9>arr</span></div><span class="comment" data-v-222ff4b9>相當於 </span><div data-v-222ff4b9><span class="function" data-v-222ff4b9>const </span><span class="word" data-v-222ff4b9>max</span> <span class="then" data-v-222ff4b9>=</span><span class="word" data-v-222ff4b9>arr</span> <span class="brackets" data-v-222ff4b9>[</span><span class="number" data-v-222ff4b9>0</span> <span class="brackets" data-v-222ff4b9>]</span></div><div data-v-222ff4b9><span class="function" data-v-222ff4b9>const </span><span class="word" data-v-222ff4b9>min</span> <span class="then" data-v-222ff4b9>=</span><span class="word" data-v-222ff4b9>arr</span> <span class="brackets" data-v-222ff4b9>[</span><span class="number" data-v-222ff4b9>1</span> <span class="brackets" data-v-222ff4b9>]</span></div><div data-v-222ff4b9><span class="function" data-v-222ff4b9>const </span><span class="word" data-v-222ff4b9>avg</span> <span class="then" data-v-222ff4b9>=</span><span class="word" data-v-222ff4b9>arr</span> <span class="brackets" data-v-222ff4b9>[</span><span class="number" data-v-222ff4b9>3</span> <span class="brackets" data-v-222ff4b9>]</span></div><br data-v-222ff4b9><br data-v-222ff4b9><div class="comment" data-v-222ff4b9>//交換2變量</div><div data-v-222ff4b9><span class="function" data-v-222ff4b9>const </span> <span class="word" data-v-222ff4b9>a</span><span class="then" data-v-222ff4b9>=</span> <span class="number" data-v-222ff4b9>1</span></div><div data-v-222ff4b9><span class="function" data-v-222ff4b9>const </span> <span class="word" data-v-222ff4b9>b</span><span class="then" data-v-222ff4b9>=</span> <span class="number" data-v-222ff4b9>2</span></div><div data-v-222ff4b9><span class="brackets" data-v-222ff4b9>[</span> <span class="word" data-v-222ff4b9>b,a</span><span class="brackets" data-v-222ff4b9>]</span> <span class="then" data-v-222ff4b9>=</span><span class="brackets" data-v-222ff4b9>[</span> <span class="word" data-v-222ff4b9>a,b</span><span class="brackets" data-v-222ff4b9>] </span><span class="number" data-v-222ff4b9>// !!!報錯了!!!</span></div><div data-v-222ff4b9><span class="word" data-v-222ff4b9>console.log</span><span class="brackets" data-v-222ff4b9>(</span> <span class="word" data-v-222ff4b9>a,b</span><span class="brackets" data-v-222ff4b9>)</span></div><br data-v-222ff4b9><div data-v-222ff4b9><span class="function" data-v-222ff4b9>const </span> <span class="word" data-v-222ff4b9>a</span><span class="then" data-v-222ff4b9>=</span> <span class="number" data-v-222ff4b9>1</span></div><div data-v-222ff4b9><span class="function" data-v-222ff4b9>const </span> <span class="word" data-v-222ff4b9>b</span><span class="then" data-v-222ff4b9>=</span> <span class="number" data-v-222ff4b9>2</span><span class="number" data-v-222ff4b9>; . . . // 一定要加分號</span></div><div data-v-222ff4b9><span class="brackets" data-v-222ff4b9>[</span> <span class="word" data-v-222ff4b9>b,a</span><span class="brackets" data-v-222ff4b9>]</span> <span class="then" data-v-222ff4b9>=</span><span class="brackets" data-v-222ff4b9>[</span> <span class="word" data-v-222ff4b9>a,b</span><span class="brackets" data-v-222ff4b9>] </span></div><div data-v-222ff4b9><span class="word" data-v-222ff4b9>console.log</span><span class="brackets" data-v-222ff4b9>(</span> <span class="word" data-v-222ff4b9>a,b</span><span class="brackets" data-v-222ff4b9>)</span></div><br data-v-222ff4b9><br data-v-222ff4b9><p data-v-222ff4b9>當變量多 單元值少的情況</p><div data-v-222ff4b9><span class="function" data-v-222ff4b9>const </span><span class="brackets" data-v-222ff4b9>[</span> <span class="word" data-v-222ff4b9>a,b,c,d</span><span class="brackets" data-v-222ff4b9>]</span> <span class="then" data-v-222ff4b9>=</span><span class="brackets" data-v-222ff4b9>[</span> <span class="number" data-v-222ff4b9>1,2,3</span><span class="brackets" data-v-222ff4b9>]</span></div><div data-v-222ff4b9><span class="word" data-v-222ff4b9>console.</span><span class="variable" data-v-222ff4b9>log</span> <span class="brackets" data-v-222ff4b9>(</span><span class="word" data-v-222ff4b9>a</span> <span class="brackets" data-v-222ff4b9>)</span><span class="comment" data-v-222ff4b9>// 1</span></div><div data-v-222ff4b9><span class="word" data-v-222ff4b9>console.</span><span class="variable" data-v-222ff4b9>log</span> <span class="brackets" data-v-222ff4b9>(</span><span class="word" data-v-222ff4b9>b</span> <span class="brackets" data-v-222ff4b9>)</span><span class="comment" data-v-222ff4b9>// 2</span></div><div data-v-222ff4b9><span class="word" data-v-222ff4b9>console.</span><span class="variable" data-v-222ff4b9>log</span> <span class="brackets" data-v-222ff4b9>(</span><span class="word" data-v-222ff4b9>c</span> <span class="brackets" data-v-222ff4b9>)</span><span class="comment" data-v-222ff4b9>// 3</span></div><div data-v-222ff4b9><span class="word" data-v-222ff4b9>console.</span><span class="variable" data-v-222ff4b9>log</span> <span class="brackets" data-v-222ff4b9>(</span><span class="word" data-v-222ff4b9>d</span> <span class="brackets" data-v-222ff4b9>)</span><span class="comment" data-v-222ff4b9>// undefined</span></div><br data-v-222ff4b9><br data-v-222ff4b9><p data-v-222ff4b9>當變量多 單元值少的情況</p><div data-v-222ff4b9><span class="function" data-v-222ff4b9>const </span><span class="brackets" data-v-222ff4b9>[</span> <span class="word" data-v-222ff4b9>a,b</span><span class="brackets" data-v-222ff4b9>]</span> <span class="then" data-v-222ff4b9>=</span><span class="brackets" data-v-222ff4b9>[</span> <span class="number" data-v-222ff4b9>1,2,3</span><span class="brackets" data-v-222ff4b9>]</span></div><div data-v-222ff4b9><span class="word" data-v-222ff4b9>console.</span><span class="variable" data-v-222ff4b9>log</span> <span class="brackets" data-v-222ff4b9>(</span><span class="word" data-v-222ff4b9>a</span> <span class="brackets" data-v-222ff4b9>)</span><span class="comment" data-v-222ff4b9>// 1</span></div><div data-v-222ff4b9><span class="word" data-v-222ff4b9>console.</span><span class="variable" data-v-222ff4b9>log</span> <span class="brackets" data-v-222ff4b9>(</span><span class="word" data-v-222ff4b9>b</span> <span class="brackets" data-v-222ff4b9>)</span><span class="comment" data-v-222ff4b9>// 2</span></div><br data-v-222ff4b9><br data-v-222ff4b9><p data-v-222ff4b9>用剩餘參數解決 變量少 單元值多的情況</p><div data-v-222ff4b9><span class="function" data-v-222ff4b9>const </span><span class="brackets" data-v-222ff4b9>[</span><span class="word" data-v-222ff4b9>a,b,...c</span><span class="brackets" data-v-222ff4b9>]</span> <span class="then" data-v-222ff4b9>=</span><span class="brackets" data-v-222ff4b9>[</span><span class="number" data-v-222ff4b9>1,2,3,4</span><span class="brackets" data-v-222ff4b9>]</span></div><div data-v-222ff4b9><span class="word" data-v-222ff4b9>console.</span><span class="variable" data-v-222ff4b9>log</span> <span class="brackets" data-v-222ff4b9>(</span><span class="word" data-v-222ff4b9>a</span> <span class="brackets" data-v-222ff4b9>)</span><span class="comment" data-v-222ff4b9>// 1</span></div><div data-v-222ff4b9><span class="word" data-v-222ff4b9>console.</span><span class="variable" data-v-222ff4b9>log</span> <span class="brackets" data-v-222ff4b9>(</span><span class="word" data-v-222ff4b9>b</span> <span class="brackets" data-v-222ff4b9>)</span><span class="comment" data-v-222ff4b9>// 2</span></div><div data-v-222ff4b9><span class="word" data-v-222ff4b9>console.</span><span class="variable" data-v-222ff4b9>log</span> <span class="brackets" data-v-222ff4b9>(</span><span class="word" data-v-222ff4b9>c</span> <span class="brackets" data-v-222ff4b9>)</span><span class="comment" data-v-222ff4b9>// [3,4] //真陣列</span></div><br data-v-222ff4b9><br data-v-222ff4b9><p data-v-222ff4b9>防止有undefined 傳遞單元值的情況, 可以設默認值:</p><div data-v-222ff4b9><span class="function" data-v-222ff4b9>const </span><span class="brackets" data-v-222ff4b9>[</span><span class="word" data-v-222ff4b9>a</span> <span class="then" data-v-222ff4b9>=</span><span class="number" data-v-222ff4b9>0,</span> <span class="word" data-v-222ff4b9>b</span><span class="then" data-v-222ff4b9>=</span> <span class="number" data-v-222ff4b9>0</span><span class="brackets" data-v-222ff4b9>]</span> <span class="then" data-v-222ff4b9>=</span><span class="brackets" data-v-222ff4b9>[</span><span class="number" data-v-222ff4b9>1,2</span><span class="brackets" data-v-222ff4b9>]</span></div><div data-v-222ff4b9><span class="word" data-v-222ff4b9>console.</span><span class="variable" data-v-222ff4b9>log</span> <span class="brackets" data-v-222ff4b9>(</span><span class="word" data-v-222ff4b9>a</span> <span class="brackets" data-v-222ff4b9>)</span><span class="comment" data-v-222ff4b9>// 1</span></div><div data-v-222ff4b9><span class="word" data-v-222ff4b9>console.</span><span class="variable" data-v-222ff4b9>log</span> <span class="brackets" data-v-222ff4b9>(</span><span class="word" data-v-222ff4b9>b</span> <span class="brackets" data-v-222ff4b9>)</span><span class="comment" data-v-222ff4b9>// 2</span></div><br data-v-222ff4b9><br data-v-222ff4b9><p data-v-222ff4b9>按需導入賦值</p><div data-v-222ff4b9><span class="function" data-v-222ff4b9>const </span><span class="brackets" data-v-222ff4b9>[</span> <span class="word" data-v-222ff4b9>a,b, ,d</span><span class="brackets" data-v-222ff4b9>]</span> <span class="then" data-v-222ff4b9>=</span><span class="brackets" data-v-222ff4b9>[</span><span class="number" data-v-222ff4b9>1,2,3,4</span><span class="brackets" data-v-222ff4b9>]</span></div><div data-v-222ff4b9><span class="word" data-v-222ff4b9>console.</span><span class="variable" data-v-222ff4b9>log</span> <span class="brackets" data-v-222ff4b9>(</span><span class="word" data-v-222ff4b9>a</span> <span class="brackets" data-v-222ff4b9>)</span><span class="comment" data-v-222ff4b9>// 1</span></div><div data-v-222ff4b9><span class="word" data-v-222ff4b9>console.</span><span class="variable" data-v-222ff4b9>log</span> <span class="brackets" data-v-222ff4b9>(</span><span class="word" data-v-222ff4b9>b</span> <span class="brackets" data-v-222ff4b9>)</span><span class="comment" data-v-222ff4b9>// 2</span></div><div data-v-222ff4b9><span class="word" data-v-222ff4b9>console.</span><span class="variable" data-v-222ff4b9>log</span> <span class="brackets" data-v-222ff4b9>(</span><span class="word" data-v-222ff4b9>d</span> <span class="brackets" data-v-222ff4b9>)</span><span class="comment" data-v-222ff4b9>// 4</span></div><br data-v-222ff4b9><br data-v-222ff4b9><p data-v-222ff4b9>多維數組</p><div data-v-222ff4b9><span class="word" data-v-222ff4b9>const</span> <span class="word" data-v-222ff4b9>arr</span><span class="then" data-v-222ff4b9>=</span> <span class="brackets" data-v-222ff4b9>[</span><span class="number" data-v-222ff4b9>1,2,</span> <span class="brackets" data-v-222ff4b9>[</span><span class="number" data-v-222ff4b9>3,4</span> <span class="brackets" data-v-222ff4b9>] ]</span></div><br data-v-222ff4b9><br data-v-222ff4b9><p data-v-222ff4b9>支持多維數組解構</p><div data-v-222ff4b9><div data-v-222ff4b9><span class="function" data-v-222ff4b9>const </span><span class="brackets" data-v-222ff4b9>[</span> <span class="word" data-v-222ff4b9>a,b,c</span><span class="brackets" data-v-222ff4b9>]</span><span class="then" data-v-222ff4b9>=</span> <span class="brackets" data-v-222ff4b9>[</span><span class="number" data-v-222ff4b9>1,2,</span><span class="brackets" data-v-222ff4b9>[</span> <span class="number" data-v-222ff4b9>3,4</span><span class="brackets" data-v-222ff4b9>] ]</span></div><div data-v-222ff4b9><span class="word" data-v-222ff4b9>console.</span><span class="variable" data-v-222ff4b9>log</span><span class="brackets" data-v-222ff4b9>(</span> <span class="word" data-v-222ff4b9>c</span><span class="brackets" data-v-222ff4b9>)</span><span class="comment" data-v-222ff4b9>// [3,4] </span></div><br data-v-222ff4b9><div data-v-222ff4b9><span class="function" data-v-222ff4b9>const </span><span class="brackets" data-v-222ff4b9>[</span> <span class="word" data-v-222ff4b9>a,b</span><span class="brackets" data-v-222ff4b9>[</span> <span class="word" data-v-222ff4b9>c,d</span><span class="brackets" data-v-222ff4b9>] ]</span><span class="then" data-v-222ff4b9>=</span> <span class="brackets" data-v-222ff4b9>[</span><span class="number" data-v-222ff4b9>1,2,</span><span class="brackets" data-v-222ff4b9>[</span> <span class="number" data-v-222ff4b9>3,4</span><span class="brackets" data-v-222ff4b9>] ]</span></div><div data-v-222ff4b9><span class="word" data-v-222ff4b9>console.</span><span class="variable" data-v-222ff4b9>log</span><span class="brackets" data-v-222ff4b9>(</span> <span class="word" data-v-222ff4b9>a</span><span class="brackets" data-v-222ff4b9>)</span><span class="comment" data-v-222ff4b9>// 1</span></div><div data-v-222ff4b9><span class="word" data-v-222ff4b9>console.</span><span class="variable" data-v-222ff4b9>log</span><span class="brackets" data-v-222ff4b9>(</span> <span class="word" data-v-222ff4b9>b</span><span class="brackets" data-v-222ff4b9>)</span><span class="comment" data-v-222ff4b9>// 2</span></div><div data-v-222ff4b9><span class="word" data-v-222ff4b9>console.</span><span class="variable" data-v-222ff4b9>log</span><span class="brackets" data-v-222ff4b9>(</span> <span class="word" data-v-222ff4b9>c</span><span class="brackets" data-v-222ff4b9>)</span><span class="comment" data-v-222ff4b9>// 3</span></div><div data-v-222ff4b9><span class="word" data-v-222ff4b9>console.</span><span class="variable" data-v-222ff4b9>log</span><span class="brackets" data-v-222ff4b9>(</span> <span class="word" data-v-222ff4b9>d</span><span class="brackets" data-v-222ff4b9>)</span><span class="comment" data-v-222ff4b9>// 4</span></div></div></div><div id="threeda002" class="articleCardTitle cor36 fz34" data-v-222ff4b9> 3.2 物件解構 </div><p class="fz28" data-v-222ff4b9> 物件解構是將物件屬性和方法快速批量賦值給一系列變量的簡潔語法 </p><div class="bgcVS" data-v-222ff4b9><div data-v-222ff4b9><span class="comment" data-v-222ff4b9>const name = &quot;不能變量名衝突&quot; // 報錯</span></div><br data-v-222ff4b9><div data-v-222ff4b9><span class="function" data-v-222ff4b9>const </span><span class="brackets" data-v-222ff4b9>{</span><span class="word" data-v-222ff4b9>name,number</span><span class="brackets" data-v-222ff4b9>}</span> <span class="then" data-v-222ff4b9>=</span><span class="brackets" data-v-222ff4b9>{</span> <span class="word" data-v-222ff4b9>name:</span><span class="src" data-v-222ff4b9>&quot;wayne&quot;,</span><span class="word" data-v-222ff4b9>number:</span> <span class="number" data-v-222ff4b9>123</span><span class="brackets" data-v-222ff4b9>}</span></div><div class="comment" data-v-222ff4b9>// 相當於 const name = obj.name</div><br data-v-222ff4b9><p data-v-222ff4b9>1. 變量名 (左) 和 屬姓名 (右) 要一樣</p><p data-v-222ff4b9>2. 解構的變量名 不要和 外面的 變量名衝突</p><p data-v-222ff4b9>3. 變量名 (左) 可以重新改名</p><br data-v-222ff4b9><div data-v-222ff4b9><span class="function" data-v-222ff4b9>const </span><span class="brackets" data-v-222ff4b9>{ </span><span class="word" data-v-222ff4b9>name: username , number</span><span class="brackets" data-v-222ff4b9>}</span> <span class="then" data-v-222ff4b9>=</span><span class="brackets" data-v-222ff4b9>{</span> <span class="word" data-v-222ff4b9>name:</span><span class="src" data-v-222ff4b9>&quot;wayne&quot;,</span><span class="word" data-v-222ff4b9>number:</span> <span class="number" data-v-222ff4b9>123</span><span class="brackets" data-v-222ff4b9>}</span></div><div data-v-222ff4b9><span class="word" data-v-222ff4b9>console.</span><span class="variable" data-v-222ff4b9>log</span> <span class="brackets" data-v-222ff4b9>(</span><span class="word" data-v-222ff4b9>username</span> <span class="brackets" data-v-222ff4b9>)</span><span class="comment" data-v-222ff4b9>// wayne</span></div></div><div class="articleCardTitle cor36 fz34" data-v-222ff4b9>數組物件解構</div><div class="bgcVS" data-v-222ff4b9><div data-v-222ff4b9><span class="function" data-v-222ff4b9>const </span><span class="word" data-v-222ff4b9>arr</span> <span class="then" data-v-222ff4b9>=</span><span class="brackets" data-v-222ff4b9>[ </span></div><div class="brackets pTwo" data-v-222ff4b9>{</div><div class="pFou" data-v-222ff4b9><span class="word" data-v-222ff4b9>uname:</span> <span class="src" data-v-222ff4b9>&quot;wayne&quot;,</span></div><div class="pFou" data-v-222ff4b9><span class="word" data-v-222ff4b9>number:</span> <span class="number" data-v-222ff4b9>123</span></div><div class="brackets pTwo" data-v-222ff4b9>}</div><div class="brackets" data-v-222ff4b9>]</div><br data-v-222ff4b9><div data-v-222ff4b9><span class="function" data-v-222ff4b9>const </span><span class="brackets" data-v-222ff4b9>[{</span><span class="word" data-v-222ff4b9>uname,number</span><span class="brackets" data-v-222ff4b9>}]</span> <span class="then" data-v-222ff4b9>=</span><span class="word" data-v-222ff4b9>arr</span></div><div data-v-222ff4b9><span class="word" data-v-222ff4b9>console.</span><span class="variable" data-v-222ff4b9>log</span> <span class="brackets" data-v-222ff4b9>(</span><span class="word" data-v-222ff4b9>uname</span> <span class="brackets" data-v-222ff4b9>)</span></div><div data-v-222ff4b9><span class="word" data-v-222ff4b9>console.</span><span class="variable" data-v-222ff4b9>log</span> <span class="brackets" data-v-222ff4b9>(</span><span class="word" data-v-222ff4b9>number</span> <span class="brackets" data-v-222ff4b9>)</span></div></div><div class="articleCardTitle cor36 fz34" data-v-222ff4b9>多級物件解構</div><div class="bgcVS" data-v-222ff4b9><div data-v-222ff4b9><span class="function" data-v-222ff4b9>const </span><span class="word" data-v-222ff4b9>objOuter</span> <span class="then" data-v-222ff4b9>=</span><span class="brackets" data-v-222ff4b9>{ </span></div><div class="pTwo" data-v-222ff4b9><span class="word" data-v-222ff4b9>name:</span> <span class="src" data-v-222ff4b9>&quot;wayne&quot;,</span></div><div class="pTwo" data-v-222ff4b9><span class="word" data-v-222ff4b9>number:</span> <span class="number" data-v-222ff4b9>123</span></div><div class="pTwo" data-v-222ff4b9><span class="word" data-v-222ff4b9>objInner:</span><span class="brackets" data-v-222ff4b9>{</span></div><div class="pFou" data-v-222ff4b9><span class="word" data-v-222ff4b9>iname:</span> <span class="src" data-v-222ff4b9>&quot;inn&quot;,</span></div><div class="pFou" data-v-222ff4b9><span class="word" data-v-222ff4b9>inumber:</span> <span class="number" data-v-222ff4b9>321</span></div><div class="brackets pTwo" data-v-222ff4b9>}</div><div class="brackets" data-v-222ff4b9>}</div><br data-v-222ff4b9><div data-v-222ff4b9><span class="function" data-v-222ff4b9>const </span><span class="brackets" data-v-222ff4b9>{ </span><span class="word" data-v-222ff4b9>name, number, </span><span class="word" data-v-222ff4b9>objInner: </span><span class="brackets" data-v-222ff4b9>{ </span><span class="word" data-v-222ff4b9>iname, inumber </span><span class="brackets" data-v-222ff4b9>} } </span> <span class="then" data-v-222ff4b9>=</span><span class="word" data-v-222ff4b9>objOuter</span></div><div data-v-222ff4b9><span class="word" data-v-222ff4b9>console.</span><span class="variable" data-v-222ff4b9>log</span> <span class="brackets" data-v-222ff4b9>(</span><span class="word" data-v-222ff4b9>name</span> <span class="brackets" data-v-222ff4b9>)</span></div><div data-v-222ff4b9><span class="word" data-v-222ff4b9>console.</span><span class="variable" data-v-222ff4b9>log</span> <span class="brackets" data-v-222ff4b9>(</span><span class="word" data-v-222ff4b9>number</span> <span class="brackets" data-v-222ff4b9>)</span></div><div data-v-222ff4b9><span class="word" data-v-222ff4b9>console.</span><span class="variable" data-v-222ff4b9>log</span> <span class="brackets" data-v-222ff4b9>(</span><span class="word" data-v-222ff4b9>iname</span> <span class="brackets" data-v-222ff4b9>)</span></div><div data-v-222ff4b9><span class="word" data-v-222ff4b9>console.</span><span class="variable" data-v-222ff4b9>log</span> <span class="brackets" data-v-222ff4b9>(</span><span class="word" data-v-222ff4b9>inumber</span> <span class="brackets" data-v-222ff4b9>)</span></div></div><p class="fz28" data-v-222ff4b9>陣列包起來時</p><div class="bgcVS" data-v-222ff4b9><div data-v-222ff4b9><span class="function" data-v-222ff4b9>const </span><span class="word" data-v-222ff4b9>porson </span> <span class="then" data-v-222ff4b9>=</span><span class="brackets" data-v-222ff4b9>[ </span></div><div class="brackets pTwo VSL" data-v-222ff4b9>{</div><div class="pFou VSL" data-v-222ff4b9><span class="word" data-v-222ff4b9>123name:</span><span class="src" data-v-222ff4b9>&quot;wayne&quot;,</span></div><div class="pFou VSL" data-v-222ff4b9><span class="word" data-v-222ff4b9>number:</span> <span class="number" data-v-222ff4b9>123</span></div><div class="pFou VSL" data-v-222ff4b9><span class="word" data-v-222ff4b9>objInner:</span><span class="brackets" data-v-222ff4b9>{</span></div><div class="pSix VSL" data-v-222ff4b9><span class="word" data-v-222ff4b9>iname:</span><span class="src" data-v-222ff4b9>&quot;inn&quot;,</span></div><div class="pSix VSL" data-v-222ff4b9><span class="word" data-v-222ff4b9>inumber:</span><span class="number" data-v-222ff4b9>321</span></div><div class="brackets pFou VSL" data-v-222ff4b9>}</div><div class="brackets pTwo VSL" data-v-222ff4b9>}</div><div class="brackets" data-v-222ff4b9>]</div><br data-v-222ff4b9><div data-v-222ff4b9><span class="function" data-v-222ff4b9>const </span><span class="brackets" data-v-222ff4b9>[ { </span><span class="word" data-v-222ff4b9>name, number, objInner: </span><span class="brackets" data-v-222ff4b9>{ </span><span class="word" data-v-222ff4b9>iname, inumber </span><span class="brackets" data-v-222ff4b9>} } ]</span> <span class="then" data-v-222ff4b9>=</span><span class="word" data-v-222ff4b9>person</span></div></div><div class="dis" data-v-222ff4b9><div class="bgcVS w100" data-v-222ff4b9><p data-v-222ff4b9>JSON格式msg={&quot;code&quot;:200,&quot;data&quot;:[{...}]}</p><br data-v-222ff4b9><div data-v-222ff4b9><span class="function" data-v-222ff4b9>const </span><span class="brackets" data-v-222ff4b9>{</span> <span class="word" data-v-222ff4b9>data</span><span class="brackets" data-v-222ff4b9>}</span> <span class="then" data-v-222ff4b9>=</span><span class="word" data-v-222ff4b9>msg</span></div><div data-v-222ff4b9><span class="word" data-v-222ff4b9>console.</span><span class="variable" data-v-222ff4b9>log</span><span class="brackets" data-v-222ff4b9>(</span> <span class="word" data-v-222ff4b9>data</span><span class="brackets" data-v-222ff4b9>)</span></div><br data-v-222ff4b9><div data-v-222ff4b9><span class="function" data-v-222ff4b9>function </span><span class="word" data-v-222ff4b9>render</span><span class="brackets" data-v-222ff4b9>(</span> <span class="word" data-v-222ff4b9>arr</span><span class="brackets" data-v-222ff4b9>){</span></div><div class="pTwo VSL" data-v-222ff4b9><span class="word" data-v-222ff4b9>console.</span><span class="variable" data-v-222ff4b9>log</span><span class="brackets" data-v-222ff4b9>(</span> <span class="word" data-v-222ff4b9>arr</span><span class="brackets" data-v-222ff4b9>)</span></div><div class="brackets" data-v-222ff4b9>}</div><div data-v-222ff4b9><span class="word" data-v-222ff4b9>render</span><span class="brackets" data-v-222ff4b9>(</span> <span class="word" data-v-222ff4b9>data</span><span class="brackets" data-v-222ff4b9>)</span></div></div><div class="bgcVSMid" data-v-222ff4b9>&gt;</div><div class="bgcVS w100" data-v-222ff4b9><br data-v-222ff4b9><br data-v-222ff4b9><div data-v-222ff4b9><span class="function" data-v-222ff4b9>function </span><span class="word" data-v-222ff4b9>render</span><span class="brackets" data-v-222ff4b9>(</span> <span class="word" data-v-222ff4b9>arr</span><span class="brackets" data-v-222ff4b9>){</span></div><div class="pTwo VSL" data-v-222ff4b9><span class="function" data-v-222ff4b9>const </span><span class="brackets" data-v-222ff4b9>{</span> <span class="word" data-v-222ff4b9>data</span><span class="brackets" data-v-222ff4b9>}</span> <span class="then" data-v-222ff4b9>=</span><span class="word" data-v-222ff4b9>arr</span></div><div class="pTwo VSL" data-v-222ff4b9><span class="word" data-v-222ff4b9>console.</span><span class="variable" data-v-222ff4b9>log</span><span class="brackets" data-v-222ff4b9>(</span> <span class="word" data-v-222ff4b9>data</span><span class="brackets" data-v-222ff4b9>)</span></div><div class="brackets" data-v-222ff4b9>}</div><div data-v-222ff4b9><span class="word" data-v-222ff4b9>render</span><span class="brackets" data-v-222ff4b9>(</span> <span class="word" data-v-222ff4b9>msg</span><span class="brackets" data-v-222ff4b9>)</span></div><br data-v-222ff4b9><div class="disCen comment" data-v-222ff4b9>更簡潔寫法 V</div><br data-v-222ff4b9><div data-v-222ff4b9><span class="function" data-v-222ff4b9>function </span><span class="word" data-v-222ff4b9>render</span><span class="brackets" data-v-222ff4b9>( { </span><span class="word" data-v-222ff4b9>data </span><span class="brackets" data-v-222ff4b9>} ) {</span></div><div class="pTwo VSL" data-v-222ff4b9><span class="word" data-v-222ff4b9>console.</span><span class="variable" data-v-222ff4b9>log</span><span class="brackets" data-v-222ff4b9>(</span> <span class="word" data-v-222ff4b9>data</span><span class="brackets" data-v-222ff4b9>)</span></div><div class="brackets" data-v-222ff4b9>}</div><div data-v-222ff4b9><span class="word" data-v-222ff4b9>render</span><span class="brackets" data-v-222ff4b9>(</span> <span class="word" data-v-222ff4b9>msg</span><span class="brackets" data-v-222ff4b9>)</span></div><br data-v-222ff4b9><div class="comment" data-v-222ff4b9>data容易命名衝突, 接進來資料改名myData</div><br data-v-222ff4b9><div data-v-222ff4b9><span class="function" data-v-222ff4b9>function </span><span class="word" data-v-222ff4b9>render</span><span class="brackets" data-v-222ff4b9>( { </span><span class="word" data-v-222ff4b9>data: myData </span><span class="brackets" data-v-222ff4b9>} ) {</span></div><div class="pTwo VSL" data-v-222ff4b9><span class="word" data-v-222ff4b9>console.</span><span class="variable" data-v-222ff4b9>log</span><span class="brackets" data-v-222ff4b9>(</span> <span class="word" data-v-222ff4b9>myData</span><span class="brackets" data-v-222ff4b9>)</span></div><div class="brackets" data-v-222ff4b9>}</div><div data-v-222ff4b9><span class="word" data-v-222ff4b9>render</span><span class="brackets" data-v-222ff4b9>(</span> <span class="word" data-v-222ff4b9>msg</span><span class="brackets" data-v-222ff4b9>)</span></div></div></div></div></div></div>',1),ko=Tv(()=>v("div",{class:"toTopButton"},[v("div",{class:"disCen"},"___"),v("div",{class:"disCen"},"▲")],-1)),go=[ko],To=Tv(()=>v("div",{class:"toBotButton"},[v("div",{class:"disCen"},"▼"),v("div",{class:"disCen"},"￣")],-1)),_o=[To],zo={__name:"JsPageThreeThree",setup(a){const s=ua(!1);window.addEventListener("scroll",function(){s.value=window.scrollY>0});function d(){window.scrollTo({top:0,left:0,behavior:"smooth"})}function n(){window.scrollTo({top:999999,left:0,behavior:"smooth"})}function t(c){window.scrollTo({top:document.getElementById(`${c}`).offsetTop,behavior:"smooth"})}return(c,e)=>(da(),ca(Q,null,[v("section",null,[v("div",uo,[v("div",wo,[v("div",mo,[v("div",{onClick:e[0]||(e[0]=l=>t("threeda001")),class:"leftNavText"},"數組解構"),v("div",{onClick:e[1]||(e[1]=l=>t("threeda002")),class:"leftNavText"},"物件解構"),v("div",{onClick:e[2]||(e[2]=l=>t("")),class:"leftNavText"}),v("div",{onClick:e[3]||(e[3]=l=>t("")),class:"leftNavText"}),v("div",{onClick:e[4]||(e[4]=l=>t("")),class:"leftNavText"}),v("div",{onClick:e[5]||(e[5]=l=>t("")),class:"leftNavText"})])])]),ho]),v("div",null,[X(T(W,{name:"fade",tag:"div"},{default:C(()=>[v("div",{onClick:d,class:"toTop"},go)]),_:1},512),[[Y,s.value]]),X(T(W,{name:"fade",tag:"div"},{default:C(()=>[v("div",{onClick:n,class:"toBot"},_o)]),_:1},512),[[Y,s.value]])])],64))}},So=ra(zo,[["__scopeId","data-v-222ff4b9"]]);const Gs=a=>(ma("data-v-0378212a"),a=a(),ha(),a),qo={class:"leftNav"},yo={class:"leftNavContainer"},Co={class:"leftNavLayout"},xo=Gs(()=>v("div",null,"for in",-1)),Lo=Gs(()=>v("div",null,"for of",-1)),jo=[xo,Lo],Po=Gs(()=>v("div",null,".every()",-1)),Vo=Gs(()=>v("div",null,".some()",-1)),No=[Po,Vo],Oo={class:"Main"},$o={class:"mainContainer"},Eo={class:"mainLayout"},Ao=U('<br data-v-0378212a><br data-v-0378212a><div class="fz28" data-v-0378212a><span class="cor17" data-v-0378212a> . . . . . </span> shift ↖ <span class="cor17" data-v-0378212a> . . . </span> ↗ pop </div><div class="fz28" data-v-0378212a>unshift → ▯▮▮▮▯ ← push</div><br data-v-0378212a><table class="fz28" data-v-0378212a><tr data-v-0378212a><td data-v-0378212a>🐕🐕🐕🐕.map(🐕=&gt;🐶)</td><td class="pad10" data-v-0378212a>&gt;</td><td data-v-0378212a>🐶🐶🐶🐶</td></tr><tr data-v-0378212a><td data-v-0378212a>🐕🐶🐕🐶.filter(🐶)</td><td class="pad10" data-v-0378212a>&gt;</td><td data-v-0378212a>🐶🐶</td></tr><tr data-v-0378212a><td data-v-0378212a>🐕🐶🐕🐕.find(🐶)</td><td class="pad10" data-v-0378212a>&gt;</td><td data-v-0378212a>🐶</td></tr><tr data-v-0378212a><td data-v-0378212a>🐕🐶🐕🥤.at( -1 )</td><td class="pad10" data-v-0378212a>&gt;</td><td data-v-0378212a>🥤</td></tr><tr data-v-0378212a><td data-v-0378212a>🐕🐶🐕🥤.includes(🥤)</td><td class="pad10" data-v-0378212a>&gt;</td><td data-v-0378212a>true</td></tr><tr data-v-0378212a><td data-v-0378212a>🐕🐶🐕🐕.every(🐕)</td><td class="pad10" data-v-0378212a>&gt;</td><td data-v-0378212a>false</td></tr><tr data-v-0378212a><td data-v-0378212a>🐕🐶🐶🐕.some(🐶)</td><td class="pad10" data-v-0378212a>&gt;</td><td data-v-0378212a>true</td></tr><tr data-v-0378212a><td data-v-0378212a>🐕🐕🐕🐕.fill(🐶,1)</td><td class="pad10" data-v-0378212a>&gt;</td><td data-v-0378212a>🐕🐶🐶🐶</td></tr><tr data-v-0378212a><td data-v-0378212a>🐕🐕🐶🐕.findIndex.(el=&gt;el===🐶)</td><td class="pad10" data-v-0378212a>&gt;</td><td data-v-0378212a>2</td></tr></table><br data-v-0378212a><br data-v-0378212a><p class="fz28" data-v-0378212a> 會改原陣列: push.pop.unshift.shift() . sort() .reverse() .splice() </p><br data-v-0378212a><br data-v-0378212a><table class="fz30 methodTable" data-v-0378212a><tr class="cor36" data-v-0378212a><th data-v-0378212a>方法</th><th data-v-0378212a>作用</th><th data-v-0378212a>說明</th></tr><tr data-v-0378212a><td data-v-0378212a>map</td><td data-v-0378212a>迭代數組</td><td data-v-0378212a><span class="cor36" data-v-0378212a>返回</span> 新數組, <span class="cor36" data-v-0378212a>返回</span>的是處理之後的數組元素, 想要使用返回的新數組 </td></tr><tr data-v-0378212a><td class="tdPad" data-v-0378212a>forEach</td><td class="tdPad" data-v-0378212a>遍歷數組</td><td class="tdPad" data-v-0378212a>不返回數組, 常用於查找遍歷數組元素</td></tr><tr data-v-0378212a><td class="tdPad" data-v-0378212a>filter</td><td class="tdPad" data-v-0378212a>過濾數組</td><td class="tdPad" data-v-0378212a><span class="cor36" data-v-0378212a>返回</span>新數組, <span class="cor36" data-v-0378212a>返回</span>的是篩選滿足條件的數組元素 </td></tr><tr data-v-0378212a><td class="tdPad" data-v-0378212a>reduce</td><td class="tdPad" data-v-0378212a>累計器</td><td class="tdPad" data-v-0378212a><span class="cor36" data-v-0378212a>返回</span>累計處理的結果, 常用於求和 </td></tr><tr data-v-0378212a><td class="tdPad" data-v-0378212a>join</td><td class="tdPad" data-v-0378212a></td><td class="tdPad" data-v-0378212a> 數組拼接成字串, <span class="cor36" data-v-0378212a>返回</span> 字串 </td></tr><tr data-v-0378212a><td class="tdPad" data-v-0378212a>find</td><td class="tdPad" data-v-0378212a>查找元素</td><td class="tdPad" data-v-0378212a><span class="cor36" data-v-0378212a>返回</span>符合條件的第一個數組元素值, 沒有則<span class="cor36" data-v-0378212a>返回</span>undefined </td></tr><tr data-v-0378212a><td class="tdPad" data-v-0378212a>every</td><td class="tdPad" data-v-0378212a></td><td class="tdPad" data-v-0378212a> 數組所有元素是否都符合條件, 所有都符合<span class="cor36" data-v-0378212a>返回</span>true, 否<span class="cor36" data-v-0378212a>返回</span>false </td></tr><tr data-v-0378212a><td class="tdPad" data-v-0378212a>some</td><td class="tdPad" data-v-0378212a></td><td class="tdPad" data-v-0378212a> 數組中的元素是否有滿足條件的, 如果有<span class="cor36" data-v-0378212a>返回</span>true, 沒有<span class="cor36" data-v-0378212a>返回</span>false </td></tr><tr data-v-0378212a><td class="tdPad" data-v-0378212a>concat</td><td class="tdPad" data-v-0378212a></td><td class="tdPad" data-v-0378212a> 合併 2 個數組, <span class="cor36" data-v-0378212a>返回</span>生成新數組 </td></tr><tr data-v-0378212a><td class="tdPad" data-v-0378212a>sort</td><td class="tdPad" data-v-0378212a></td><td class="tdPad" data-v-0378212a>對原數組單元值排序</td></tr><tr data-v-0378212a><td class="tdPad" data-v-0378212a>splice</td><td class="tdPad" data-v-0378212a></td><td class="tdPad" data-v-0378212a>刪除或替換原數組單元</td></tr><tr data-v-0378212a><td class="tdPad" data-v-0378212a>reverse</td><td class="tdPad" data-v-0378212a></td><td class="tdPad" data-v-0378212a>反轉數組</td></tr><tr data-v-0378212a><td class="tdPad" data-v-0378212a>findIndex</td><td class="tdPad" data-v-0378212a></td><td class="tdPad" data-v-0378212a>查找元素的索引值</td></tr></table><div id="threemethod001" class="articleCardTitle cor36 fz34" data-v-0378212a> 4. push() . . . 會改變原數組 </div><p class="fz28" data-v-0378212a> push 方法 在 數組末端 添加 一個or多個 元素 , 並返回添加新元素後的數組長度 </p><p class="fz28" data-v-0378212a>注意 會改變原數組</p><br data-v-0378212a><div class="fz28" data-v-0378212a><span class="cor17" data-v-0378212a> . . . . . </span> shift ↖ <span class="cor17" data-v-0378212a> . . . </span> ↗ pop </div><div class="fz28" data-v-0378212a>unshift → ▯▮▮▮▯ ← push</div><div class="bgcVS" data-v-0378212a><div data-v-0378212a><span class="function" data-v-0378212a>let </span> <span class="word" data-v-0378212a>arr</span><span class="then" data-v-0378212a>=</span> <span class="brackets" data-v-0378212a>[</span><span class="src" data-v-0378212a>&quot;hi&quot;</span> <span class="brackets" data-v-0378212a>]</span></div><div data-v-0378212a><span class="comment" data-v-0378212a>//arr[1]=&quot;添加方法1&quot;</span></div><div data-v-0378212a><span class="word" data-v-0378212a>arr</span> <span class="variable" data-v-0378212a>.push</span><span class="brackets" data-v-0378212a>(</span> <span class="src" data-v-0378212a>&quot;大家好&quot;</span><span class="brackets" data-v-0378212a>)</span></div><div data-v-0378212a><span class="function" data-v-0378212a>let </span><span class="word" data-v-0378212a>arrLength</span> <span class="then" data-v-0378212a>=</span><span class="word" data-v-0378212a>arr</span> <span class="variable" data-v-0378212a>.push</span><span class="brackets" data-v-0378212a>(</span> <span class="src" data-v-0378212a>&quot;大家好&quot;</span><span class="brackets" data-v-0378212a>)</span><span class="comment" data-v-0378212a>//打印添加這個東西,返回數組長度//2</span></div><div data-v-0378212a><span class="word" data-v-0378212a>console</span><span class="variable" data-v-0378212a>.log</span><span class="brackets" data-v-0378212a>(</span> <span class="word" data-v-0378212a>arr</span><span class="brackets" data-v-0378212a>)</span><span class="comment" data-v-0378212a>//[&quot;hi&quot;,&quot;大家好&quot;]</span></div><div data-v-0378212a><span class="word" data-v-0378212a>console</span><span class="variable" data-v-0378212a>.log</span><span class="brackets" data-v-0378212a>(</span><span class="word" data-v-0378212a>arrLength</span><span class="brackets" data-v-0378212a>)</span><span class="comment" data-v-0378212a>// 2</span></div><br data-v-0378212a><p data-v-0378212a>也可以同時添加多條</p><div data-v-0378212a><span class="word" data-v-0378212a>arr</span> <span class="variable" data-v-0378212a>.push</span><span class="brackets" data-v-0378212a>(</span><span class="src" data-v-0378212a>&quot;大家好&quot;,123,&quot;hi&quot;</span><span class="brackets" data-v-0378212a>)</span></div></div><div id="threemethod002" class="articleCardTitle cor36 fz34" data-v-0378212a> 4. pop() . . . 會改變原數組 </div><p class="fz28" data-v-0378212a>push 方法 刪除數組的最後一個元素 , 並返回該元素</p><p class="fz28" data-v-0378212a>注意 會改變原數組</p><br data-v-0378212a><div class="fz28" data-v-0378212a><span class="cor17" data-v-0378212a> . . . . . </span> shift ↖ <span class="cor17" data-v-0378212a> . . . </span> ↗ pop </div><div class="fz28" data-v-0378212a>unshift → ▯▮▮▮▯ ← push</div><div class="bgcVS" data-v-0378212a><div data-v-0378212a><span class="function" data-v-0378212a>let </span> <span class="word" data-v-0378212a>arr</span><span class="then" data-v-0378212a>=</span> <span class="brackets" data-v-0378212a>[</span><span class="number" data-v-0378212a>100,200,300,400</span><span class="brackets" data-v-0378212a>]</span></div><div data-v-0378212a><span class="word" data-v-0378212a>arr</span> <span class="variable" data-v-0378212a>.pop</span><span class="brackets" data-v-0378212a>()</span></div><div data-v-0378212a><span class="word" data-v-0378212a>console</span><span class="variable" data-v-0378212a>.log</span><span class="brackets" data-v-0378212a>(</span> <span class="word" data-v-0378212a>arr</span><span class="brackets" data-v-0378212a>)</span><span class="comment" data-v-0378212a>//[100,200,300]</span></div></div><div id="threemethod003" class="articleCardTitle cor36 fz34" data-v-0378212a> 4. shift() . . . 會改變原數組 </div><p class="fz28" data-v-0378212a>shift 方法 刪除數組的第一個元素 , 並返回該元素</p><p class="fz28" data-v-0378212a>注意 會改變原數組</p><br data-v-0378212a><div class="fz28" data-v-0378212a><span class="cor17" data-v-0378212a> . . . . . </span> shift ↖ <span class="cor17" data-v-0378212a> . . . </span> ↗ pop </div><div class="fz28" data-v-0378212a>unshift → ▯▮▮▮▯ ← push</div><div class="bgcVS" data-v-0378212a><div data-v-0378212a><span class="function" data-v-0378212a>let </span> <span class="word" data-v-0378212a>name</span><span class="then" data-v-0378212a>=</span> <span class="brackets" data-v-0378212a>[</span><span class="src" data-v-0378212a>&quot;wayne&quot;,&quot;neo&quot;,&quot;jack&quot;</span><span class="brackets" data-v-0378212a>]</span></div><div data-v-0378212a><span class="function" data-v-0378212a>let </span><span class="word" data-v-0378212a>result</span> <span class="then" data-v-0378212a>=</span><span class="word" data-v-0378212a>name</span><span class="variable" data-v-0378212a>.shift</span><span class="brackets" data-v-0378212a>()</span></div><div data-v-0378212a><span class="word" data-v-0378212a>console</span><span class="variable" data-v-0378212a>.log</span><span class="brackets" data-v-0378212a>(</span> <span class="word" data-v-0378212a>name</span><span class="brackets" data-v-0378212a>)</span><span class="comment" data-v-0378212a>//[&quot;neo&quot;,&quot;jack&quot;]</span></div><div data-v-0378212a><span class="word" data-v-0378212a>console</span><span class="variable" data-v-0378212a>.log</span><span class="brackets" data-v-0378212a>(</span> <span class="word" data-v-0378212a>result</span><span class="brackets" data-v-0378212a>)</span><span class="comment" data-v-0378212a>//wayne</span></div><br data-v-0378212a><div data-v-0378212a><span class="comment" data-v-0378212a>//清空數組元素</span></div><div data-v-0378212a><span class="function" data-v-0378212a>let </span> <span class="word" data-v-0378212a>arr</span><span class="then" data-v-0378212a>=</span> <span class="brackets" data-v-0378212a>[]</span></div><div data-v-0378212a><span class="word" data-v-0378212a>console</span><span class="variable" data-v-0378212a>.log</span><span class="brackets" data-v-0378212a>(</span> <span class="word" data-v-0378212a>arr</span><span class="variable" data-v-0378212a>.shift</span><span class="brackets" data-v-0378212a>())</span><span class="comment" data-v-0378212a>//undefined</span></div><br data-v-0378212a><div data-v-0378212a><span class="function" data-v-0378212a>let </span> <span class="word" data-v-0378212a>arr1</span><span class="then" data-v-0378212a>=</span> <span class="brackets" data-v-0378212a>[</span><span class="number" data-v-0378212a>100,200,300</span><span class="brackets" data-v-0378212a>]</span></div><div data-v-0378212a><span class="function" data-v-0378212a>let </span> <span class="word" data-v-0378212a>item</span></div><div data-v-0378212a><span class="comment" data-v-0378212a>//()裡面取布林值,當0,undefined,Null,NaN,空數值,false為false</span></div><div data-v-0378212a><span class="word" data-v-0378212a>while</span> <span class="brackets" data-v-0378212a>(</span><span class="word" data-v-0378212a>item</span> <span class="then" data-v-0378212a>=</span><span class="word" data-v-0378212a>arr1</span><span class="variable" data-v-0378212a>.shift</span><span class="brackets" data-v-0378212a>()){</span><span class="comment" data-v-0378212a>//我把arr1每次刪除的數據賦值給item</span></div><div class="padTwo VSL" data-v-0378212a><span class="word" data-v-0378212a>console</span><span class="variable" data-v-0378212a>.log</span><span class="brackets" data-v-0378212a>(</span> <span class="word" data-v-0378212a>item</span><span class="brackets" data-v-0378212a>)</span><span class="comment" data-v-0378212a>//100//200//300//[]</span><div data-v-0378212a></div></div><div data-v-0378212a><span class="brackets" data-v-0378212a>}</span></div></div><div id="threemethod004" class="articleCardTitle cor36 fz34" data-v-0378212a> 4. unshift() . . . 會改變原數組 </div><p class="fz28" data-v-0378212a> shift 方法 向 數組的第一個位置 添加元素 , 並返回添加元素後的 數組長度 </p><p class="fz28" data-v-0378212a>注意 會改變原數組</p><br data-v-0378212a><div class="fz28" data-v-0378212a><span class="cor17" data-v-0378212a> . . . . . </span> shift ↖ <span class="cor17" data-v-0378212a> . . . </span> ↗ pop </div><div class="fz28" data-v-0378212a>unshift → ▯▮▮▮▯ ← push</div><div class="bgcVS" data-v-0378212a><div data-v-0378212a><span class="function" data-v-0378212a>let </span> <span class="word" data-v-0378212a>arr</span><span class="then" data-v-0378212a>=</span> <span class="brackets" data-v-0378212a>[</span><span class="number" data-v-0378212a>200</span> <span class="brackets" data-v-0378212a>]</span></div><div data-v-0378212a><span class="word" data-v-0378212a>arr</span><span class="variable" data-v-0378212a>.unshift</span><span class="brackets" data-v-0378212a>(</span> <span class="number" data-v-0378212a>100</span><span class="brackets" data-v-0378212a>)</span></div><div data-v-0378212a><span class="word" data-v-0378212a>console</span><span class="variable" data-v-0378212a>.log</span><span class="brackets" data-v-0378212a>(</span> <span class="word" data-v-0378212a>arr</span><span class="brackets" data-v-0378212a>)</span><span class="comment" data-v-0378212a>//[100,200]</span></div><br data-v-0378212a><p data-v-0378212a>也可以添加多個</p></div><div id="threemethod017" class="articleCardTitle cor36 fz34" data-v-0378212a> 4. for in , for of </div><p class="fz28" data-v-0378212a> for of 循環獲取到的是一對鍵值對中的值 , 也就是 value </p><br data-v-0378212a><p class="fz28" data-v-0378212a>而 for in 獲取的是鍵名 , 也就是 key</p><br data-v-0378212a><br data-v-0378212a><p class="fz28" data-v-0378212a>對數組 for of 返回的是 數組裡面的 元素值</p><br data-v-0378212a><p class="fz28" data-v-0378212a>for in 返回 key , 指每個元素的 索引值</p><br data-v-0378212a><p class="fz28" data-v-0378212a> for of 只能遍歷其底層帶有 iterator 接口的 數據結構 像 set map string array </p><br data-v-0378212a><p class="fz28" data-v-0378212a>物件沒有原生 iterator 接口 , 直接用 for of 會報錯</p><br data-v-0378212a><p class="fz28" data-v-0378212a>開發中 遍歷用 for in 更合適</p><br data-v-0378212a><br data-v-0378212a><p class="fz28" data-v-0378212a>for in 返回 數組元素的 索引值 , 而不是 元素</p><br data-v-0378212a><p class="fz28" data-v-0378212a>而且 遍歷順序 有可能不是按照 實際數據的 內部順序</p><br data-v-0378212a><p class="fz28" data-v-0378212a>所以 通常遍歷數組用 for of</p><br data-v-0378212a><br data-v-0378212a><p class="fz28" data-v-0378212a>總之 for in 適合遍歷 物件</p><p class="fz28" data-v-0378212a>for of 適合遍歷 數組</p><div class="bgcVS" data-v-0378212a><div data-v-0378212a><span class="comment" data-v-0378212a>// 1. 循環數組</span></div><div data-v-0378212a><span class="word" data-v-0378212a>cosnt</span> <span class="word" data-v-0378212a>arr</span><span class="then" data-v-0378212a>=</span> <span class="brackets" data-v-0378212a>[</span><span class="src" data-v-0378212a>&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;</span><span class="brackets" data-v-0378212a>]</span></div><div data-v-0378212a><span class="comment" data-v-0378212a>// for...in 輸出 數組成員 在數組中 的索引</span></div><div data-v-0378212a><span class="then" data-v-0378212a>for </span> <span class="brackets" data-v-0378212a>(</span><span class="function" data-v-0378212a>let </span> <span class="word" data-v-0378212a>n </span><span class="function" data-v-0378212a>in </span> <span class="word" data-v-0378212a>arr</span><span class="brackets" data-v-0378212a>){</span></div><div class="padTwo VSL" data-v-0378212a><span class="word" data-v-0378212a>console.log</span><span class="brackets" data-v-0378212a>(</span> <span class="word" data-v-0378212a>n </span><span class="brackets" data-v-0378212a>) </span><span class="comment" data-v-0378212a>// 0 // 1 // 2 // 3</span><div data-v-0378212a></div></div><div data-v-0378212a><span class="brackets" data-v-0378212a>}</span></div><br data-v-0378212a><div data-v-0378212a><span class="comment" data-v-0378212a>// for...of 輸出 數組的成員</span></div><div data-v-0378212a><span class="then" data-v-0378212a>for </span> <span class="brackets" data-v-0378212a>(</span><span class="function" data-v-0378212a>let </span> <span class="word" data-v-0378212a>n </span><span class="function" data-v-0378212a>of </span> <span class="word" data-v-0378212a>arr</span><span class="brackets" data-v-0378212a>){</span></div><div class="padTwo VSL" data-v-0378212a><span class="word" data-v-0378212a>console.log</span><span class="brackets" data-v-0378212a>(</span> <span class="word" data-v-0378212a>n </span><span class="brackets" data-v-0378212a>) </span><span class="comment" data-v-0378212a>// a // b // c // d</span><div data-v-0378212a></div></div><div data-v-0378212a><span class="brackets" data-v-0378212a>}</span></div><br data-v-0378212a><div data-v-0378212a><span class="comment" data-v-0378212a>// 2. 循環物件</span></div><div data-v-0378212a><span class="function" data-v-0378212a>const </span><span class="word" data-v-0378212a>obj</span> <span class="then" data-v-0378212a>=</span><span class="brackets" data-v-0378212a>{</span> <span class="word" data-v-0378212a>n:</span><span class="number" data-v-0378212a>4,</span> <span class="word" data-v-0378212a>m:</span><span class="number" data-v-0378212a>5,</span> <span class="word" data-v-0378212a>k:</span><span class="number" data-v-0378212a>6</span> <span class="brackets" data-v-0378212a>}</span></div><div data-v-0378212a><span class="comment" data-v-0378212a>// for...in </span></div><div data-v-0378212a><span class="then" data-v-0378212a>for </span> <span class="brackets" data-v-0378212a>(</span><span class="function" data-v-0378212a>let </span> <span class="word" data-v-0378212a>n </span><span class="function" data-v-0378212a>in </span> <span class="word" data-v-0378212a>obj</span><span class="brackets" data-v-0378212a>){</span></div><div class="padTwo VSL" data-v-0378212a><span class="comment" data-v-0378212a>// 物件的屬性名</span></div><div class="padTwo VSL" data-v-0378212a><span class="word" data-v-0378212a>console.log</span><span class="brackets" data-v-0378212a>(</span> <span class="word" data-v-0378212a>n</span><span class="brackets" data-v-0378212a>) </span><span class="comment" data-v-0378212a>// n // m // k</span><div data-v-0378212a></div></div><div class="padTwo VSL" data-v-0378212a><span class="comment" data-v-0378212a>// 物件的屬性值</span></div><div class="padTwo VSL" data-v-0378212a><span class="word" data-v-0378212a>console.</span><span class="variable" data-v-0378212a>log</span> <span class="brackets" data-v-0378212a>(</span><span class="word" data-v-0378212a>obj</span> <span class="brackets" data-v-0378212a>[</span><span class="word" data-v-0378212a>n</span> <span class="brackets" data-v-0378212a>])</span><span class="comment" data-v-0378212a>// 4 // 5 // 6</span><div data-v-0378212a></div></div><div data-v-0378212a><span class="brackets" data-v-0378212a>}</span></div><br data-v-0378212a><div data-v-0378212a><span class="comment" data-v-0378212a>// for...of </span></div><div data-v-0378212a><span class="then" data-v-0378212a>for </span> <span class="brackets" data-v-0378212a>(</span><span class="function" data-v-0378212a>let </span> <span class="word" data-v-0378212a>n </span><span class="function" data-v-0378212a>of </span> <span class="word" data-v-0378212a>obj</span><span class="brackets" data-v-0378212a>){</span></div><div class="padTwo VSL" data-v-0378212a><div data-v-0378212a><span class="comment" data-v-0378212a>// 報錯 , 不能循環</span></div><div data-v-0378212a><span class="comment" data-v-0378212a>// 因為沒有 iterator 接口</span></div></div><div data-v-0378212a><span class="brackets" data-v-0378212a>}</span></div><br data-v-0378212a><div data-v-0378212a><span class="comment" data-v-0378212a>// 3. 循環數組物件</span></div><div data-v-0378212a><span class="function" data-v-0378212a>const </span><span class="word" data-v-0378212a>arrObj</span> <span class="then" data-v-0378212a>=</span><span class="brackets" data-v-0378212a>[{</span></div><div class="padTwo VSL" data-v-0378212a><span class="word" data-v-0378212a>name:</span> <span class="src" data-v-0378212a>&quot;wayne&quot;,</span><div data-v-0378212a></div></div><div class="padTwo VSL" data-v-0378212a><span class="word" data-v-0378212a>number:</span> <span class="number" data-v-0378212a>1</span><div data-v-0378212a></div></div><div data-v-0378212a><span class="brackets" data-v-0378212a>}, {</span></div><div class="padTwo VSL" data-v-0378212a><span class="word" data-v-0378212a>name:</span> <span class="src" data-v-0378212a>&quot;jack&quot;,</span><div data-v-0378212a></div></div><div class="padTwo VSL" data-v-0378212a><span class="word" data-v-0378212a>number:</span> <span class="number" data-v-0378212a>9</span><div data-v-0378212a></div></div><div data-v-0378212a><span class="brackets" data-v-0378212a>}]</span></div><br data-v-0378212a><div data-v-0378212a><span class="then" data-v-0378212a>for </span> <span class="brackets" data-v-0378212a>(</span><span class="function" data-v-0378212a>let </span> <span class="word" data-v-0378212a>nObj </span><span class="function" data-v-0378212a>of </span><span class="word" data-v-0378212a>arrObj</span> <span class="brackets" data-v-0378212a>){</span></div><div class="padTwo VSL" data-v-0378212a><span class="word" data-v-0378212a>console.</span><span class="variable" data-v-0378212a>log</span> <span class="brackets" data-v-0378212a>(</span><span class="word" data-v-0378212a>nObj</span> <span class="brackets" data-v-0378212a>)</span><span class="comment" data-v-0378212a>//{name:&quot;wayne&quot;,number:1},{name:&quot;jack&quot;,number:9}</span></div><div class="padTwo VSL" data-v-0378212a><span class="then" data-v-0378212a>for </span> <span class="brackets" data-v-0378212a>(</span><span class="function" data-v-0378212a>let </span> <span class="word" data-v-0378212a>n </span><span class="function" data-v-0378212a>in </span> <span class="word" data-v-0378212a>nObj</span><span class="brackets" data-v-0378212a>){</span><div data-v-0378212a><div class="padTwo VSL" data-v-0378212a><span class="word" data-v-0378212a>console.</span><span class="variable" data-v-0378212a>log</span><span class="brackets" data-v-0378212a>(</span><span class="word" data-v-0378212a>nObj</span><span class="brackets" data-v-0378212a>[</span> <span class="word" data-v-0378212a>n</span><span class="brackets" data-v-0378212a>]) </span><span class="comment" data-v-0378212a>// wayne // 1 // jack // 9</span><div data-v-0378212a></div></div><div data-v-0378212a><span class="brackets" data-v-0378212a>}</span></div></div></div><div data-v-0378212a><span class="brackets" data-v-0378212a>}</span></div><div data-v-0378212a><span class="comment" data-v-0378212a>// for in 循環 物件</span></div><div data-v-0378212a><span class="comment" data-v-0378212a>// for of 循環 數組</span></div></div><br data-v-0378212a><br data-v-0378212a><div id="threemethod005" class="articleCardTitle cor36 fz34" data-v-0378212a> 4. map() </div><p class="fz28" data-v-0378212a> map 可以遍歷數組 處理數據 , 並 <span class="spo pad10 cor36" data-v-0378212a> 返回 新數組 </span><span class="cor36" data-v-0378212a>不影響原數組</span></p><br data-v-0378212a><p class="fz28" data-v-0378212a>map([🐮,🥔,🐔,🌽] , cook) =&gt; [🍔,🍟,🍗,🍿]</p>',73),Mo={class:"bgcVS"},Fo=U('<div data-v-0378212a><span class="word" data-v-0378212a>arr</span><span class="variable" data-v-0378212a>.map</span><span class="brackets" data-v-0378212a>(</span><span class="cor36" data-v-0378212a>回調函數 </span><span class="brackets" data-v-0378212a>(</span><span class="word" data-v-0378212a>當前數組元素,當前元素索引號,數組本身</span><span class="brackets" data-v-0378212a>){</span></div><div class="comment pTwo" data-v-0378212a>//函數體</div><div class="brackets" data-v-0378212a>} , thisValue )</div><br data-v-0378212a><p data-v-0378212a>計算結果 一定要返回 , 否則新數組會 undefined</p><br data-v-0378212a><div data-v-0378212a><span class="function" data-v-0378212a>const </span><span class="word" data-v-0378212a>arr</span> <span class="then" data-v-0378212a>=</span><span class="brackets" data-v-0378212a>[</span> <span class="src" data-v-0378212a>&quot;red&quot;</span><span class="then" data-v-0378212a>,</span> <span class="src" data-v-0378212a>&quot;blue&quot;</span><span class="then" data-v-0378212a>,</span> <span class="src" data-v-0378212a>&quot;pink&quot;</span><span class="brackets" data-v-0378212a>]</span></div><div data-v-0378212a><span class="word" data-v-0378212a>arr</span> <span class="variable" data-v-0378212a>.map</span><span class="brackets" data-v-0378212a>(</span><span class="function" data-v-0378212a>function </span><span class="brackets" data-v-0378212a>(</span><span class="word" data-v-0378212a>ele,index</span><span class="brackets" data-v-0378212a>){</span></div><div class="padTwo VSL" data-v-0378212a><span class="word" data-v-0378212a>console</span> <span class="word" data-v-0378212a>.log</span><span class="brackets" data-v-0378212a>(</span> <span class="word" data-v-0378212a>ele</span><span class="brackets" data-v-0378212a>)</span><span class="comment" data-v-0378212a>//red//blue//pink//數組元素</span><span class="word" data-v-0378212a></span><div data-v-0378212a><span class="word" data-v-0378212a>console</span><span class="word" data-v-0378212a>.log</span> <span class="brackets" data-v-0378212a>(</span><span class="word" data-v-0378212a>index</span> <span class="brackets" data-v-0378212a>)</span><span class="comment" data-v-0378212a>//0//1//2//索引號</span></div><div data-v-0378212a><span class="then" data-v-0378212a>return </span> <span class="word" data-v-0378212a>el</span><span class="then" data-v-0378212a>+</span> <span class="src" data-v-0378212a>&quot;顏色&quot;</span></div><div data-v-0378212a></div></div><div data-v-0378212a><span class="brackets" data-v-0378212a>})</span></div><br data-v-0378212a>',11),Io=U('<br data-v-0378212a><div data-v-0378212a><span class="function" data-v-0378212a>const </span><span class="word" data-v-0378212a>newArr</span> <span class="then" data-v-0378212a>=</span><span class="word" data-v-0378212a>arr</span> <span class="variable" data-v-0378212a>.map</span><span class="brackets" data-v-0378212a>(</span><span class="function" data-v-0378212a>function </span><span class="brackets" data-v-0378212a>(</span><span class="word" data-v-0378212a>ele,index</span><span class="brackets" data-v-0378212a>){</span></div><div class="padTwo VSL" data-v-0378212a><span class="word" data-v-0378212a>console</span> <span class="word" data-v-0378212a>.log</span><span class="brackets" data-v-0378212a>(</span> <span class="word" data-v-0378212a>ele</span><span class="brackets" data-v-0378212a>)</span><span class="comment" data-v-0378212a>//red//blue//pink//數組元素</span><span class="word" data-v-0378212a></span><div data-v-0378212a><span class="word" data-v-0378212a>console</span><span class="word" data-v-0378212a>.log</span> <span class="brackets" data-v-0378212a>(</span><span class="word" data-v-0378212a>index</span> <span class="brackets" data-v-0378212a>)</span><span class="comment" data-v-0378212a>//0//1//2//索引號</span></div><div data-v-0378212a><span class="then" data-v-0378212a>return </span> <span class="word" data-v-0378212a>el</span><span class="then" data-v-0378212a>+</span> <span class="src" data-v-0378212a>&quot;顏色&quot;</span></div><div data-v-0378212a></div></div><div data-v-0378212a><span class="brackets" data-v-0378212a>})</span></div><div data-v-0378212a><span class="word" data-v-0378212a>console</span><span class="variable" data-v-0378212a>.log</span><span class="brackets" data-v-0378212a>(</span> <span class="word" data-v-0378212a>newArr</span><span class="brackets" data-v-0378212a>)</span></div>',5),Ro=U('<p class="fz28" data-v-0378212a></p><p class="fz28" data-v-0378212a></p><p class="fz28" data-v-0378212a></p><p class="fz28" data-v-0378212a></p><p class="fz28" data-v-0378212a></p><div id="threemethod006" class="articleCardTitle cor36 fz34" data-v-0378212a> 4. forEach() </div><p class="fz28" data-v-0378212a> forEach() 方法用於調用數組的每個元素, 並將元素傳遞給回調函數 </p><br data-v-0378212a><p class="fz28" data-v-0378212a>適合用來遍歷數組對象</p><div class="bgcVS" data-v-0378212a><div data-v-0378212a><span class="comment" data-v-0378212a>1.裡面幾個參數 2. 返回值返回什麼 3. 使用方法</span></div><br data-v-0378212a><div data-v-0378212a><span class="word" data-v-0378212a>arr</span><span class="variable" data-v-0378212a>.forEach</span><span class="brackets" data-v-0378212a>(</span><span class="cor36" data-v-0378212a>回調函數 </span><span class="brackets" data-v-0378212a>(</span><span class="word" data-v-0378212a>當前數組元素 , 當前元素索引號 , 數組本身</span><span class="brackets" data-v-0378212a>) {</span></div><div class="comment pTwo" data-v-0378212a>//函數體</div><div class="brackets" data-v-0378212a>}, thisValue )</div><br data-v-0378212a><div class="number" data-v-0378212a>只遍歷 , 不返回值</div><br data-v-0378212a><br data-v-0378212a><div data-v-0378212a><span class="function" data-v-0378212a>const </span><span class="word" data-v-0378212a>arr</span> <span class="then" data-v-0378212a>=</span><span class="brackets" data-v-0378212a>[</span><span class="src" data-v-0378212a>&quot;wayne&quot;,&quot;neo&quot;,&quot;jack&quot;</span><span class="brackets" data-v-0378212a>]</span></div><div data-v-0378212a><span class="word" data-v-0378212a>arr</span><span class="variable" data-v-0378212a>.forEach</span><span class="brackets" data-v-0378212a>(</span><span class="function" data-v-0378212a>function </span><span class="brackets" data-v-0378212a>(</span><span class="word" data-v-0378212a>item,index</span><span class="brackets" data-v-0378212a>){</span></div><div class="pTwo VSL" data-v-0378212a><span class="word" data-v-0378212a>console.</span><span class="variable" data-v-0378212a>log</span> <span class="brackets" data-v-0378212a>(</span><span class="word" data-v-0378212a>item</span> <span class="brackets" data-v-0378212a>) </span><span class="comment" data-v-0378212a>// wayne neo jack</span></div><div class="pTwo VSL" data-v-0378212a><span class="word" data-v-0378212a>console.</span><span class="variable" data-v-0378212a>log</span> <span class="brackets" data-v-0378212a>(</span><span class="word" data-v-0378212a>index</span> <span class="brackets" data-v-0378212a>) </span><span class="comment" data-v-0378212a>// 0 1 2</span></div><div class="brackets" data-v-0378212a>})</div><br data-v-0378212a><div class="number" data-v-0378212a>和 map 差在 他不返回數組</div><br data-v-0378212a><div data-v-0378212a><span class="function" data-v-0378212a>const </span><span class="word" data-v-0378212a>result</span> <span class="then" data-v-0378212a>=</span><span class="word" data-v-0378212a>arr</span><span class="variable" data-v-0378212a>.forEach</span><span class="brackets" data-v-0378212a>(</span><span class="function" data-v-0378212a>function </span><span class="brackets" data-v-0378212a>(</span><span class="word" data-v-0378212a>item,index</span><span class="brackets" data-v-0378212a>){</span></div><div class="pTwo VSL" data-v-0378212a><span class="word" data-v-0378212a>console.</span><span class="variable" data-v-0378212a>log</span> <span class="brackets" data-v-0378212a>(</span><span class="word" data-v-0378212a>item</span> <span class="brackets" data-v-0378212a>) </span><span class="comment" data-v-0378212a>// wayne neo jack</span></div><div class="pTwo VSL" data-v-0378212a><span class="word" data-v-0378212a>console.</span><span class="variable" data-v-0378212a>log</span> <span class="brackets" data-v-0378212a>(</span><span class="word" data-v-0378212a>index</span> <span class="brackets" data-v-0378212a>) </span><span class="comment" data-v-0378212a>// 0 1 2</span></div><div class="brackets" data-v-0378212a>})</div><div class="" data-v-0378212a><span class="word" data-v-0378212a>console.</span><span class="variable" data-v-0378212a>log</span> <span class="brackets" data-v-0378212a>(</span><span class="word" data-v-0378212a>result</span> <span class="brackets" data-v-0378212a>) </span><span class="comment" data-v-0378212a>// undefined</span></div><br data-v-0378212a><br data-v-0378212a><p data-v-0378212a>練習 渲染 ul 列表</p><br data-v-0378212a><div data-v-0378212a><span class="function" data-v-0378212a>const </span><span class="word" data-v-0378212a>list</span> <span class="then" data-v-0378212a>=</span><span class="brackets" data-v-0378212a>[{</span></div><div class="padTwo VSL" data-v-0378212a><span class="word" data-v-0378212a>id:</span> <span class="src" data-v-0378212a>&quot;0001&quot;,</span><div data-v-0378212a><span class="word" data-v-0378212a>mame:</span> <span class="src" data-v-0378212a>&quot;wayne&quot;</span></div><div data-v-0378212a><span class="brackets" data-v-0378212a>},{</span></div><span class="word" data-v-0378212a>id:</span> <span class="src" data-v-0378212a>&quot;0002&quot;,</span><div data-v-0378212a><span class="word" data-v-0378212a>mame:</span> <span class="src" data-v-0378212a>&quot;jack&quot;</span></div><div data-v-0378212a><span class="brackets" data-v-0378212a>},{</span></div><span class="word" data-v-0378212a>id:</span> <span class="src" data-v-0378212a>&quot;0003&quot;,</span><div data-v-0378212a><span class="word" data-v-0378212a>mame:</span> <span class="src" data-v-0378212a>&quot;neo&quot;</span></div><div data-v-0378212a></div></div><div data-v-0378212a><span class="brackets" data-v-0378212a>}]</span></div><br data-v-0378212a><div data-v-0378212a><span class="then" data-v-0378212a>＜</span> <span class="number" data-v-0378212a>div </span><span class="function" data-v-0378212a>class </span> <span class="then" data-v-0378212a>=</span><span class="src" data-v-0378212a>&quot;list&quot;</span> <span class="then" data-v-0378212a>&gt;＜/ </span><span class="number" data-v-0378212a>div </span> <span class="then" data-v-0378212a>&gt;</span></div><div data-v-0378212a><span class="function" data-v-0378212a>let </span> <span class="word" data-v-0378212a>str</span><span class="then" data-v-0378212a>=</span> <span class="src" data-v-0378212a>&quot;&quot;</span></div><div data-v-0378212a><span class="word" data-v-0378212a>list</span><span class="variable" data-v-0378212a>.forEach</span><span class="brackets" data-v-0378212a>(</span> <span class="word" data-v-0378212a>item</span><span class="function" data-v-0378212a>=&gt;</span> <span class="brackets" data-v-0378212a>{</span></div><div class="padTwo VSL" data-v-0378212a><span class="word" data-v-0378212a>console</span> <span class="word" data-v-0378212a>.log</span><span class="brackets" data-v-0378212a>(</span> <span class="word" data-v-0378212a>item</span><span class="brackets" data-v-0378212a>)</span><span class="comment" data-v-0378212a>//每一個數組元素-&gt;物件</span><div data-v-0378212a><span class="word" data-v-0378212a>str</span> <span class="then" data-v-0378212a>+=</span><span class="src" data-v-0378212a>` ＜p&gt;</span><span class="then" data-v-0378212a>${</span><span class="word" data-v-0378212a>item.name</span> <span class="then" data-v-0378212a>}</span><span class="src" data-v-0378212a>＜/p&gt;`</span></div><div data-v-0378212a></div></div><div data-v-0378212a><span class="brackets" data-v-0378212a>})</span></div><div data-v-0378212a><span class="word" data-v-0378212a>document</span><span class="variable" data-v-0378212a>.querySelector</span><span class="brackets" data-v-0378212a>(</span> <span class="src" data-v-0378212a>&quot;.list&quot;</span><span class="brackets" data-v-0378212a>)</span><span class="variable" data-v-0378212a>.innerHTML</span><span class="then" data-v-0378212a>=</span> <span class="word" data-v-0378212a>str</span></div><br data-v-0378212a><p data-v-0378212a>改成 解構賦值</p><br data-v-0378212a><div data-v-0378212a><span class="word" data-v-0378212a>list</span><span class="variable" data-v-0378212a>.forEach</span><span class="brackets" data-v-0378212a>(</span> <span class="word" data-v-0378212a>item</span><span class="function" data-v-0378212a>=&gt;</span> <span class="brackets" data-v-0378212a>{</span></div><div class="padTwo VSL" data-v-0378212a><span class="function" data-v-0378212a>const </span><span class="brackets" data-v-0378212a>{</span> <span class="word" data-v-0378212a>name</span><span class="brackets" data-v-0378212a>}</span> <span class="then" data-v-0378212a>=</span><span class="word" data-v-0378212a>item</span><div data-v-0378212a><span class="word" data-v-0378212a>str</span> <span class="then" data-v-0378212a>+=</span><span class="src" data-v-0378212a>` ＜p&gt;</span><span class="then" data-v-0378212a>${</span><span class="word" data-v-0378212a>name</span> <span class="then" data-v-0378212a>}</span><span class="src" data-v-0378212a>＜/p&gt;`</span></div><div data-v-0378212a></div></div><div data-v-0378212a><span class="brackets" data-v-0378212a>})</span></div></div><p class="fz28" data-v-0378212a>1. forEach 主要是遍歷數組</p><p class="fz28" data-v-0378212a>2. 索引號可以不寫</p><div id="threemethod016" class="articleCardTitle cor36 fz34" data-v-0378212a> 4. filter() </div><p class="fz28" data-v-0378212a><span class="cor36" data-v-0378212a>返回</span> 一個符合條件 的 新陣列 <span class="cor17" data-v-0378212a>. . . </span><span class="cor36" data-v-0378212a>不影響 原陣列</span></p><br data-v-0378212a><p class="fz28" data-v-0378212a>🐕🐶🐕🐶.filter(🐶) &gt; 🐶🐶</p><div class="bgcVS" data-v-0378212a><div data-v-0378212a><span class="word" data-v-0378212a>arr</span><span class="variable" data-v-0378212a>.filter</span><span class="brackets" data-v-0378212a>(</span><span class="cor36" data-v-0378212a>回調函數</span><span class="brackets" data-v-0378212a>(</span><span class="word" data-v-0378212a>當前數組的值 , 索引值 , 陣列本身 </span><span class="brackets" data-v-0378212a>)</span> <span class="then" data-v-0378212a>,</span><span class="word" data-v-0378212a>thisValue</span> <span class="word" data-v-0378212a></span><span class="brackets" data-v-0378212a>)</span></div><br data-v-0378212a><p data-v-0378212a>不給 thisValue 則 指向 全局變量</p><br data-v-0378212a><div data-v-0378212a><span class="function" data-v-0378212a>let </span> <span class="word" data-v-0378212a>arr</span><span class="then" data-v-0378212a>=</span> <span class="brackets" data-v-0378212a>[</span><span class="number" data-v-0378212a>1,2,1,6,7,8,1,2</span><span class="brackets" data-v-0378212a>]</span></div><br data-v-0378212a><div data-v-0378212a><span class="comment" data-v-0378212a>//過濾奇數</span></div><div data-v-0378212a><span class="word" data-v-0378212a>arr</span><span class="variable" data-v-0378212a>.filter</span><span class="brackets" data-v-0378212a>(</span><span class="function" data-v-0378212a>function </span><span class="brackets" data-v-0378212a>(</span> <span class="word" data-v-0378212a>item</span><span class="brackets" data-v-0378212a>){</span></div><div class="padTwo VSL" data-v-0378212a><span class="function" data-v-0378212a>let </span><span class="word" data-v-0378212a>result</span> <span class="then" data-v-0378212a>=</span><span class="word" data-v-0378212a>item</span> <span class="then" data-v-0378212a>%</span><span class="number" data-v-0378212a>2</span> <span class="then" data-v-0378212a>!==</span><span class="number" data-v-0378212a>0</span><div data-v-0378212a><span class="then" data-v-0378212a>return </span><span class="word" data-v-0378212a>result</span></div><div data-v-0378212a></div></div><div data-v-0378212a><span class="brackets" data-v-0378212a>})</span></div><br data-v-0378212a><div data-v-0378212a><span class="comment" data-v-0378212a>//數組去重</span></div><div data-v-0378212a><span class="word" data-v-0378212a>arr</span><span class="variable" data-v-0378212a>.filter</span><span class="brackets" data-v-0378212a>(</span><span class="function" data-v-0378212a>function </span><span class="brackets" data-v-0378212a>(</span><span class="word" data-v-0378212a>item,index,self</span><span class="brackets" data-v-0378212a>)</span></div><div class="padTwo VSL" data-v-0378212a><span class="function" data-v-0378212a>let </span><span class="word" data-v-0378212a>newIndex</span> <span class="then" data-v-0378212a>=</span><span class="word" data-v-0378212a>self</span><span class="variable" data-v-0378212a>.indexOf</span><span class="brackets" data-v-0378212a>(</span> <span class="word" data-v-0378212a>current</span><span class="brackets" data-v-0378212a>)</span><div data-v-0378212a><span class="then" data-v-0378212a>return </span><span class="word" data-v-0378212a>newIndex</span><span class="then" data-v-0378212a>===</span> <span class="word" data-v-0378212a>index</span></div><div data-v-0378212a></div></div><div data-v-0378212a><span class="brackets" data-v-0378212a>})</span></div><div class="comment" data-v-0378212a>//item newIndex index =&gt; 取出</div><div class="comment" data-v-0378212a>// 1 0 0 =&gt; 1</div><div class="comment" data-v-0378212a>// 2 1 1 =&gt; 2</div><div class="comment" data-v-0378212a>// 1 0 3 !=&gt; 不輸出</div></div><div id="threemethod007" class="articleCardTitle cor36 fz34" data-v-0378212a> 4. join() </div><p class="fz28" data-v-0378212a>用於把 數組中的 所有元素 轉換一個字串</p><div class="bgcVS" data-v-0378212a><div data-v-0378212a><span class="function" data-v-0378212a>const </span><span class="word" data-v-0378212a>arr</span> <span class="then" data-v-0378212a>=</span><span class="brackets" data-v-0378212a>[</span> <span class="src" data-v-0378212a>&quot;red&quot;</span><span class="then" data-v-0378212a>,</span> <span class="src" data-v-0378212a>&quot;blue&quot;</span><span class="then" data-v-0378212a>,</span> <span class="src" data-v-0378212a>&quot;pink&quot;</span><span class="brackets" data-v-0378212a>]</span></div><div data-v-0378212a><span class="word" data-v-0378212a>console.</span><span class="variable" data-v-0378212a>log</span> <span class="brackets" data-v-0378212a>(</span><span class="word" data-v-0378212a>arr.join</span><span class="brackets" data-v-0378212a>())</span><span class="comment" data-v-0378212a>//小括號為空,則逗號分割</span></div><div data-v-0378212a><span class="word" data-v-0378212a>console.</span><span class="variable" data-v-0378212a>log</span> <span class="brackets" data-v-0378212a>(</span><span class="word" data-v-0378212a>arr.join</span><span class="brackets" data-v-0378212a>(</span> <span class="src" data-v-0378212a>&quot;&quot;</span><span class="brackets" data-v-0378212a>))</span><span class="comment" data-v-0378212a>//redbluepink</span></div></div><div id="threemethod008" class="articleCardTitle cor36 fz34" data-v-0378212a> 4. reduce </div><p class="fz28" data-v-0378212a>reduce 返回累計處理的結果, 常用於求和</p><div class="bgcVS" data-v-0378212a><div data-v-0378212a><span class="commsnt" data-v-0378212a>1.裡面幾個參數 2. 返回值返回什麼 3. 使用方法</span></div><br data-v-0378212a><div data-v-0378212a><span class="word" data-v-0378212a>arr.reduce</span><span class="brackets" data-v-0378212a>(</span><span class="cor36" data-v-0378212a>回調函數 </span><span class="brackets" data-v-0378212a>(</span><span class="word" data-v-0378212a>上一次累加器返回值,執行累加器當前元素值,當前數組索引,數組本身</span><span class="brackets" data-v-0378212a>){},</span><span class="word" data-v-0378212a>初始值</span><span class="brackets" data-v-0378212a>)</span></div><br data-v-0378212a><br data-v-0378212a><div data-v-0378212a><span class="function" data-v-0378212a>const </span><span class="word" data-v-0378212a>arr</span> <span class="then" data-v-0378212a>=</span><span class="brackets" data-v-0378212a>[</span> <span class="number" data-v-0378212a>1,5,8</span><span class="brackets" data-v-0378212a>]</span></div><br data-v-0378212a><div class="comment" data-v-0378212a>//1.沒初始值 , 以數組第 1 個值 來運算</div><div data-v-0378212a><span class="word" data-v-0378212a>arr.reduce</span><span class="brackets" data-v-0378212a>(</span><span class="function" data-v-0378212a>function </span><span class="brackets" data-v-0378212a>(</span><span class="word" data-v-0378212a>prev,current</span><span class="brackets" data-v-0378212a>){</span></div><div class="pTwo" data-v-0378212a><span class="then" data-v-0378212a>return </span> <span class="word" data-v-0378212a>prev</span><span class="then" data-v-0378212a>+</span> <span class="word" data-v-0378212a>current</span></div><div class="brackets" data-v-0378212a>})</div><div data-v-0378212a><span class="word" data-v-0378212a>console.</span><span class="variable" data-v-0378212a>log</span> <span class="brackets" data-v-0378212a>(</span><span class="word" data-v-0378212a>total</span> <span class="brackets" data-v-0378212a>) </span><span class="comment" data-v-0378212a>// 14</span></div><br data-v-0378212a><div class="comment" data-v-0378212a> //2.有初始值 , 第 1 個值 用你傳的初始值 來運算 </div><div data-v-0378212a><span class="word" data-v-0378212a>arr.reduce</span><span class="brackets" data-v-0378212a>(</span><span class="function" data-v-0378212a>function </span><span class="brackets" data-v-0378212a>(</span><span class="word" data-v-0378212a>prev,current</span><span class="brackets" data-v-0378212a>){</span></div><div class="pTwo" data-v-0378212a><span class="then" data-v-0378212a>return </span> <span class="word" data-v-0378212a>prev</span><span class="then" data-v-0378212a>+</span> <span class="word" data-v-0378212a>current</span></div><div data-v-0378212a><span class="brackets" data-v-0378212a>},</span> <span class="number" data-v-0378212a>10</span><span class="brackets" data-v-0378212a>)</span></div><div data-v-0378212a><span class="word" data-v-0378212a>console.</span><span class="variable" data-v-0378212a>log</span> <span class="brackets" data-v-0378212a>(</span><span class="word" data-v-0378212a>total</span> <span class="brackets" data-v-0378212a>) </span><span class="comment" data-v-0378212a>// 24</span></div><br data-v-0378212a><div class="comment" data-v-0378212a>//3.匿名函數</div><div data-v-0378212a><span class="function" data-v-0378212a>const </span><span class="word" data-v-0378212a>total</span> <span class="then" data-v-0378212a>=</span><span class="word" data-v-0378212a>arr.reduce</span><span class="brackets" data-v-0378212a>((</span><span class="word" data-v-0378212a>prev,current</span><span class="brackets" data-v-0378212a>)</span> <span class="function" data-v-0378212a>=&gt;</span><span class="word" data-v-0378212a>prev</span> <span class="then" data-v-0378212a>+</span><span class="word" data-v-0378212a>current,</span> <span class="number" data-v-0378212a>10</span><span class="brackets" data-v-0378212a>)</span></div><div data-v-0378212a><span class="word" data-v-0378212a>console.</span><span class="variable" data-v-0378212a>log</span> <span class="brackets" data-v-0378212a>(</span><span class="word" data-v-0378212a>total</span> <span class="brackets" data-v-0378212a>) </span><span class="comment" data-v-0378212a>// 24</span></div></div><p class="fz28" data-v-0378212a>reduce 執行過程</p><p class="fz28" data-v-0378212a> 1. 如果 沒有 起始值 , 則 上一次值 以 數組的 第一個 數組元素 的值 </p><p class="fz28" data-v-0378212a> 2. 每一次循環 , 把返回值 做為 下一次循環的 上一次值 </p><p class="fz28" data-v-0378212a>3. 如果 有 起始值, 則 起始值 做為 上一次值</p><div class="bgcVS" data-v-0378212a><div data-v-0378212a><span class="function" data-v-0378212a>const </span><span class="word" data-v-0378212a>arr</span> <span class="then" data-v-0378212a>=</span><span class="brackets" data-v-0378212a>[{</span></div><div class="pTwo VSL" data-v-0378212a><span class="word" data-v-0378212a>name:</span> <span class="src" data-v-0378212a>&quot;wayne&quot;</span></div><div class="pTwo VSL" data-v-0378212a><span class="word" data-v-0378212a>number:</span> <span class="number" data-v-0378212a>1000</span></div><div class="brackets" data-v-0378212a>}, {</div><div class="pTwo VSL" data-v-0378212a><span class="word" data-v-0378212a>name:</span> <span class="src" data-v-0378212a>&quot;neo&quot;</span></div><div class="pTwo VSL" data-v-0378212a><span class="word" data-v-0378212a>number:</span> <span class="number" data-v-0378212a>2000</span></div><div class="brackets" data-v-0378212a>}, {</div><div class="pTwo VSL" data-v-0378212a><span class="word" data-v-0378212a>name:</span> <span class="src" data-v-0378212a>&quot;jack&quot;</span></div><div class="pTwo VSL" data-v-0378212a><span class="word" data-v-0378212a>number:</span> <span class="number" data-v-0378212a>3000</span></div><div class="brackets" data-v-0378212a>} ]</div><br data-v-0378212a><div data-v-0378212a><span class="function" data-v-0378212a>const </span><span class="word" data-v-0378212a>total</span> <span class="then" data-v-0378212a>=</span><span class="word" data-v-0378212a>arr.reduce</span><span class="brackets" data-v-0378212a>((</span><span class="word" data-v-0378212a>prev,current</span><span class="brackets" data-v-0378212a>)</span> <span class="function" data-v-0378212a>=&gt;</span><span class="brackets" data-v-0378212a>{</span></div><div class="pTwo" data-v-0378212a><span class="then" data-v-0378212a>return </span> <span class="word" data-v-0378212a>prev</span><span class="then" data-v-0378212a>+</span><span class="word" data-v-0378212a>current.number</span></div><div data-v-0378212a><span class="brackets" data-v-0378212a>},</span> <span class="number" data-v-0378212a>0</span><span class="brackets" data-v-0378212a>) </span><span class="comment" data-v-0378212a>// 不寫出使值則以數組第一個元素{}為初始值</span></div><div data-v-0378212a><span class="word" data-v-0378212a>console.</span><span class="variable" data-v-0378212a>log</span> <span class="brackets" data-v-0378212a>(</span><span class="word" data-v-0378212a>total</span> <span class="brackets" data-v-0378212a>) </span><span class="comment" data-v-0378212a>// 6000</span></div><br data-v-0378212a><p data-v-0378212a>數字 + 30% 怎麼改?</p><br data-v-0378212a><div data-v-0378212a><span class="function" data-v-0378212a>const </span><span class="word" data-v-0378212a>total</span> <span class="then" data-v-0378212a>=</span><span class="word" data-v-0378212a>arr.reduce</span><span class="brackets" data-v-0378212a>((</span><span class="word" data-v-0378212a>prev,current</span><span class="brackets" data-v-0378212a>)</span> <span class="function" data-v-0378212a>=&gt;</span><span class="word" data-v-0378212a>prev</span><span class="then" data-v-0378212a>+</span><span class="word" data-v-0378212a>current.number </span><span class="then" data-v-0378212a>* </span><span class="number" data-v-0378212a>1.3 , 0</span><span class="brackets" data-v-0378212a>) </span></div></div><div id="threemethod009" class="articleCardTitle cor36 fz34" data-v-0378212a> 4. find </div><p class="fz28" data-v-0378212a> 查找陣列裡 , 第一個滿足條件的值 , 並把它 <span class="cor36" data-v-0378212a>返回</span></p><br data-v-0378212a><p class="fz28" data-v-0378212a>🐕🐶🐕🐕.find(🐶) &gt; 🐶</p><div class="bgcVS" data-v-0378212a><div data-v-0378212a><span class="comment" data-v-0378212a>1.裡面幾個參數 2. 返回值返回什麼 3. 使用方法</span></div><br data-v-0378212a><div data-v-0378212a><span class="word" data-v-0378212a>arr</span> <span class="variable" data-v-0378212a>.find</span><span class="brackets" data-v-0378212a>(</span><span class="cor36" data-v-0378212a>回調函數</span><span class="brackets" data-v-0378212a>(</span><span class="word" data-v-0378212a>item,index,arr</span><span class="brackets" data-v-0378212a>)</span> <span class="then" data-v-0378212a>,</span><span class="word" data-v-0378212a>thisArgs</span> <span class="brackets" data-v-0378212a>)</span></div><br data-v-0378212a> # <div data-v-0378212a><span class="function" data-v-0378212a>const </span><span class="word" data-v-0378212a>arr</span> <span class="then" data-v-0378212a>=</span><span class="brackets" data-v-0378212a>[</span><span class="src" data-v-0378212a>&quot;wayne&quot;,&quot;neo&quot;,&quot;jack&quot;</span><span class="brackets" data-v-0378212a>]</span></div><div data-v-0378212a><span class="function" data-v-0378212a>const </span><span class="word" data-v-0378212a>re </span> <span class="then" data-v-0378212a>= </span><span class="word" data-v-0378212a>arr</span><span class="variable" data-v-0378212a>.find</span><span class="brackets" data-v-0378212a>(</span><span class="function" data-v-0378212a>function </span><span class="brackets" data-v-0378212a>(</span><span class="word" data-v-0378212a>item</span><span class="brackets" data-v-0378212a>){</span></div><div class="pTwo" data-v-0378212a><span class="then" data-v-0378212a>return </span> <span class="word" data-v-0378212a>item</span><span class="then" data-v-0378212a>===</span> <span class="src" data-v-0378212a>&quot;wayne&quot;</span></div><div class="brackets" data-v-0378212a>})</div><div data-v-0378212a><span class="word" data-v-0378212a>console.</span><span class="variable" data-v-0378212a>log</span> <span class="brackets" data-v-0378212a>(</span><span class="word" data-v-0378212a>re</span> <span class="brackets" data-v-0378212a>); </span><span class="comment" data-v-0378212a>// wayne</span></div><br data-v-0378212a><br data-v-0378212a><p data-v-0378212a>物件中 , 我只想要 wayne 的物件 怎麼做?</p><br data-v-0378212a><div data-v-0378212a><span class="function" data-v-0378212a>const </span><span class="word" data-v-0378212a>arr</span> <span class="then" data-v-0378212a>= </span><span class="brackets" data-v-0378212a>[ {</span></div><div class="pTwo VSL" data-v-0378212a><span class="word" data-v-0378212a>name:</span> <span class="src" data-v-0378212a>&quot;wayne&quot;</span></div><div class="pTwo VSL" data-v-0378212a><span class="word" data-v-0378212a>number:</span> <span class="number" data-v-0378212a>1000</span></div><div class="brackets" data-v-0378212a>}, {</div><div class="pTwo VSL" data-v-0378212a><span class="word" data-v-0378212a>name:</span> <span class="src" data-v-0378212a>&quot;neo&quot;</span></div><div class="pTwo VSL" data-v-0378212a><span class="word" data-v-0378212a>number:</span> <span class="number" data-v-0378212a>2000</span></div><div class="brackets" data-v-0378212a>}, {</div><div class="pTwo VSL" data-v-0378212a><span class="word" data-v-0378212a>name:</span> <span class="src" data-v-0378212a>&quot;jack&quot;</span></div><div class="pTwo VSL" data-v-0378212a><span class="word" data-v-0378212a>number:</span> <span class="number" data-v-0378212a>3000</span></div><div class="brackets" data-v-0378212a>} ]</div><br data-v-0378212a><br data-v-0378212a><div data-v-0378212a><span class="word" data-v-0378212a>arr.</span> <span class="variable" data-v-0378212a>find</span><span class="brackets" data-v-0378212a>(</span><span class="function" data-v-0378212a>function </span><span class="brackets" data-v-0378212a>(</span> <span class="word" data-v-0378212a>item</span><span class="brackets" data-v-0378212a>){</span></div><div class="pTwo VSL" data-v-0378212a><span class="word" data-v-0378212a>console.</span><span class="variable" data-v-0378212a>log</span><span class="brackets" data-v-0378212a>(</span> <span class="word" data-v-0378212a>item</span><span class="brackets" data-v-0378212a>)</span><span class="comment" data-v-0378212a>//{name:&quot;wayne&quot;,number:1000},{...}</span></div><div class="pTwo VSL" data-v-0378212a><span class="word" data-v-0378212a>console.</span><span class="variable" data-v-0378212a>log</span><span class="brackets" data-v-0378212a>(</span><span class="word" data-v-0378212a>item.name</span><span class="brackets" data-v-0378212a>)</span><span class="comment" data-v-0378212a>//wayne neo jack</span></div><div class="pTwo VSL" data-v-0378212a><span class="word" data-v-0378212a>console.</span><span class="variable" data-v-0378212a>log</span> <span class="brackets" data-v-0378212a>(</span><span class="number" data-v-0378212a>1</span> <span class="brackets" data-v-0378212a>)</span><span class="comment" data-v-0378212a>//打印1次//找到數組中第一個滿足就不再找了</span></div><div class="pTwo VSL" data-v-0378212a><span class="then" data-v-0378212a>return </span><span class="word" data-v-0378212a>item.name</span> <span class="then" data-v-0378212a>===</span><span class="src" data-v-0378212a>&quot;wayne&quot;</span><span class="comment" data-v-0378212a>//返回這條物件 數組元素</span></div><div class="brackets" data-v-0378212a>})</div><br data-v-0378212a><br data-v-0378212a><div data-v-0378212a><span class="function" data-v-0378212a>const </span> <span class="word" data-v-0378212a>mi</span><span class="then" data-v-0378212a>=</span><span class="word" data-v-0378212a>arr.</span> <span class="variable" data-v-0378212a>find</span><span class="brackets" data-v-0378212a>(</span><span class="function" data-v-0378212a>function </span><span class="brackets" data-v-0378212a>(</span> <span class="word" data-v-0378212a>item</span><span class="brackets" data-v-0378212a>){</span></div><div class="pTwo VSL" data-v-0378212a><span class="then" data-v-0378212a>return </span><span class="word" data-v-0378212a>item.name</span> <span class="then" data-v-0378212a>===</span><span class="src" data-v-0378212a>&quot;wayne&quot;</span><span class="comment" data-v-0378212a>//返回這條物件 數組元素</span></div><div class="brackets" data-v-0378212a>})</div><div data-v-0378212a><span class="word" data-v-0378212a>console.</span><span class="variable" data-v-0378212a>log</span> <span class="brackets" data-v-0378212a>(</span><span class="word" data-v-0378212a>mi</span> <span class="brackets" data-v-0378212a>)</span><span class="comment" data-v-0378212a>//{name:&quot;wayne&quot;,number:1000}</span></div><br data-v-0378212a><br data-v-0378212a><div data-v-0378212a><span class="function" data-v-0378212a>const </span> <span class="word" data-v-0378212a>mi</span><span class="then" data-v-0378212a>=</span> <span class="word" data-v-0378212a>arr.</span><span class="variable" data-v-0378212a>find</span><span class="brackets" data-v-0378212a>(</span> <span class="word" data-v-0378212a>item</span><span class="function" data-v-0378212a>=&gt;</span><span class="word" data-v-0378212a>item.name</span> <span class="then" data-v-0378212a>===</span><span class="src" data-v-0378212a>&quot;wayne&quot;</span> <span class="brackets" data-v-0378212a>)</span></div><div data-v-0378212a><span class="word" data-v-0378212a>console.</span><span class="variable" data-v-0378212a>log</span> <span class="brackets" data-v-0378212a>(</span><span class="word" data-v-0378212a>mi</span> <span class="brackets" data-v-0378212a>)</span><span class="comment" data-v-0378212a>//{name:&quot;wayne&quot;,number:1000}</span></div></div><div id="threemethod010" class="articleCardTitle cor36 fz34" data-v-0378212a> 4. slice </div><p class="fz28" data-v-0378212a>用來擷取片段 , 數組 或 字串 擷取一部分</p><br data-v-0378212a><p class="fz28" data-v-0378212a>不會修改原數組</p><br data-v-0378212a><div class="bgcVS" data-v-0378212a><div data-v-0378212a><span class="variable" data-v-0378212a>.slice</span><span class="brackets" data-v-0378212a>(</span><span class="number" data-v-0378212a>2個參數可選</span><span class="brackets" data-v-0378212a>)</span></div><div data-v-0378212a><span class="variable" data-v-0378212a>.slice</span><span class="brackets" data-v-0378212a>(</span><span class="word" data-v-0378212a>擷取時起始位置,終止位置</span><span class="brackets" data-v-0378212a>)</span></div><br data-v-0378212a><br data-v-0378212a><div data-v-0378212a><span class="function" data-v-0378212a>let </span> <span class="word" data-v-0378212a>arr</span><span class="then" data-v-0378212a>=</span> <span class="brackets" data-v-0378212a>[</span><span class="number" data-v-0378212a>1,2,3,4,5</span><span class="brackets" data-v-0378212a>]</span></div><div data-v-0378212a><span class="function" data-v-0378212a>let </span> <span class="word" data-v-0378212a>str</span><span class="then" data-v-0378212a>=</span> <span class="src" data-v-0378212a>&quot;12345&quot;</span></div><br data-v-0378212a><div data-v-0378212a><span class="comment" data-v-0378212a>//沒參數,直接把原數組or原字串整個拷貝成新數組並返回</span></div><div data-v-0378212a><span class="word" data-v-0378212a>console</span><span class="variable" data-v-0378212a>.log</span><span class="brackets" data-v-0378212a>(</span> <span class="word" data-v-0378212a>arr</span><span class="variable" data-v-0378212a>.slice</span><span class="brackets" data-v-0378212a>()) </span><span class="comment" data-v-0378212a>//[1,2,3,4,5]</span></div><br data-v-0378212a><div data-v-0378212a><span class="word" data-v-0378212a>console</span><span class="variable" data-v-0378212a>.log</span><span class="brackets" data-v-0378212a>(</span> <span class="word" data-v-0378212a>arr</span><span class="variable" data-v-0378212a>.slice</span><span class="brackets" data-v-0378212a>(</span> <span class="number" data-v-0378212a>1</span><span class="brackets" data-v-0378212a>))</span><span class="comment" data-v-0378212a>//[2,3,4,5]//1當起始位置,數組末最終</span></div><br data-v-0378212a><div data-v-0378212a><span class="word" data-v-0378212a>console</span><span class="variable" data-v-0378212a>.log</span><span class="brackets" data-v-0378212a>(</span> <span class="word" data-v-0378212a>arr</span><span class="variable" data-v-0378212a>.slice</span><span class="brackets" data-v-0378212a>(</span> <span class="number" data-v-0378212a>-1</span><span class="brackets" data-v-0378212a>))</span><span class="comment" data-v-0378212a>//[5]//從最後一項倒數,-1是5</span></div><br data-v-0378212a><div data-v-0378212a><span class="word" data-v-0378212a>console</span><span class="variable" data-v-0378212a>.log</span><span class="brackets" data-v-0378212a>(</span> <span class="word" data-v-0378212a>arr</span><span class="variable" data-v-0378212a>.slice</span><span class="brackets" data-v-0378212a>(</span> <span class="number" data-v-0378212a>1,2</span><span class="brackets" data-v-0378212a>))</span><span class="comment" data-v-0378212a>//[2]//包括起始位置下標,不包括終止位置下標</span></div><br data-v-0378212a><div data-v-0378212a><span class="word" data-v-0378212a>console</span><span class="variable" data-v-0378212a>.log</span><span class="brackets" data-v-0378212a>(</span> <span class="word" data-v-0378212a>arr</span><span class="variable" data-v-0378212a>.slice</span><span class="brackets" data-v-0378212a>(</span> <span class="number" data-v-0378212a>-5,-1</span><span class="brackets" data-v-0378212a>))</span><span class="comment" data-v-0378212a>//[1,2,3,4]</span><span class="word" data-v-0378212a></span></div><br data-v-0378212a><div data-v-0378212a><span class="word" data-v-0378212a>console</span><span class="variable" data-v-0378212a>.log</span><span class="brackets" data-v-0378212a>(</span> <span class="word" data-v-0378212a>str</span><span class="variable" data-v-0378212a>.slice</span><span class="brackets" data-v-0378212a>(</span> <span class="number" data-v-0378212a>-5,-1</span><span class="brackets" data-v-0378212a>))</span><span class="comment" data-v-0378212a>//1234</span> <span class="word" data-v-0378212a></span></div></div><div id="threemethod011" class="articleCardTitle cor36 fz34" data-v-0378212a> 4. splice </div><p class="fz28" data-v-0378212a> 能刪改數組 , 會返回由 刪除元素 組成的 數組 , 沒刪返回 空數組 </p><p class="fz28" data-v-0378212a>注意 會修改原數組</p><br data-v-0378212a><div class="bgcVS" data-v-0378212a><div data-v-0378212a><span class="variable" data-v-0378212a>.splice</span><span class="brackets" data-v-0378212a>(</span><span class="number" data-v-0378212a>3 個參數可選</span><span class="brackets" data-v-0378212a>)</span></div><div data-v-0378212a><span class="word" data-v-0378212a>arr</span><span class="variable" data-v-0378212a>.splice</span><span class="brackets" data-v-0378212a>(</span><span class="word" data-v-0378212a>指定要插入or刪除位置, 指定刪除元素的個數, 插入的值 </span><span class="brackets" data-v-0378212a>)</span></div><br data-v-0378212a><div data-v-0378212a><span class="function" data-v-0378212a>let </span> <span class="word" data-v-0378212a>arr</span><span class="then" data-v-0378212a>=</span> <span class="brackets" data-v-0378212a>[</span><span class="number" data-v-0378212a>1,2,3,4,5,6,7,8</span><span class="brackets" data-v-0378212a>]</span></div><div data-v-0378212a><span class="word" data-v-0378212a>console</span><span class="variable" data-v-0378212a>.log</span><span class="brackets" data-v-0378212a>(</span> <span class="word" data-v-0378212a>arr</span><span class="brackets" data-v-0378212a>())</span><span class="comment" data-v-0378212a>//[1,2,3,4,5,6,7,8]</span></div><div data-v-0378212a><span class="word" data-v-0378212a>console</span><span class="variable" data-v-0378212a>.log</span><span class="brackets" data-v-0378212a>(</span> <span class="word" data-v-0378212a>arr</span><span class="variable" data-v-0378212a>.splice</span><span class="brackets" data-v-0378212a>()) </span><div data-v-0378212a><span class="comment" data-v-0378212a>//[] //返回由刪除元素組成的數組(沒刪返回空數組)</span></div></div><br data-v-0378212a><div data-v-0378212a><span class="word" data-v-0378212a>console</span><span class="variable" data-v-0378212a>.log</span><span class="brackets" data-v-0378212a>(</span> <span class="word" data-v-0378212a>arr</span><span class="variable" data-v-0378212a>.splice</span><span class="brackets" data-v-0378212a>(</span> <span class="word" data-v-0378212a>-2</span><span class="brackets" data-v-0378212a>))</span><span class="comment" data-v-0378212a>//[7,8]</span></div><div data-v-0378212a><span class="word" data-v-0378212a>console</span><span class="variable" data-v-0378212a>.log</span><span class="brackets" data-v-0378212a>(</span> <span class="word" data-v-0378212a>arr</span><span class="variable" data-v-0378212a>.splice</span><span class="brackets" data-v-0378212a>(</span> <span class="number" data-v-0378212a>4</span><span class="brackets" data-v-0378212a>))</span><span class="comment" data-v-0378212a>//[5,6,7,8]</span></div><div data-v-0378212a><span class="word" data-v-0378212a>console</span><span class="variable" data-v-0378212a>.log</span><span class="brackets" data-v-0378212a>(</span> <span class="word" data-v-0378212a>arr</span><span class="brackets" data-v-0378212a>)</span><span class="comment" data-v-0378212a>//[1,2,3,4]</span></div><br data-v-0378212a><br data-v-0378212a><div data-v-0378212a><span class="function" data-v-0378212a>let </span> <span class="word" data-v-0378212a>arr2</span><span class="then" data-v-0378212a>=</span> <span class="brackets" data-v-0378212a>[</span><span class="number" data-v-0378212a>1,2,3,4,5,6,7,8</span><span class="brackets" data-v-0378212a>]</span></div><div data-v-0378212a><span class="comment" data-v-0378212a>//console.log(arr2.splice(0,-2))//第2個不合法的值,不刪除,回傳[]</span></div><div data-v-0378212a><span class="word" data-v-0378212a>console</span><span class="variable" data-v-0378212a>.log</span><span class="brackets" data-v-0378212a>(</span> <span class="word" data-v-0378212a>arr2</span><span class="variable" data-v-0378212a>.splice</span><span class="brackets" data-v-0378212a>(</span> <span class="number" data-v-0378212a>0,6</span><span class="brackets" data-v-0378212a>))</span><span class="comment" data-v-0378212a>//[1,2,3,4,5,6]</span></div><div data-v-0378212a><span class="word" data-v-0378212a>console</span><span class="variable" data-v-0378212a>.log</span><span class="brackets" data-v-0378212a>(</span> <span class="word" data-v-0378212a>arr2</span><span class="brackets" data-v-0378212a>)</span><span class="comment" data-v-0378212a>//[7,8]</span></div><br data-v-0378212a><br data-v-0378212a><div data-v-0378212a><span class="function" data-v-0378212a>let </span> <span class="word" data-v-0378212a>arr3</span><span class="then" data-v-0378212a>=</span> <span class="brackets" data-v-0378212a>[</span><span class="number" data-v-0378212a>1,2,3,4,5,6,7,8</span><span class="brackets" data-v-0378212a>]</span></div><div data-v-0378212a><span class="word" data-v-0378212a>console</span><span class="variable" data-v-0378212a>.log</span><span class="brackets" data-v-0378212a>(</span> <span class="word" data-v-0378212a>arr3</span><span class="variable" data-v-0378212a>.splice</span><span class="brackets" data-v-0378212a>(</span> <span class="number" data-v-0378212a>0,0,</span><span class="src" data-v-0378212a>&quot;a&quot;</span> <span class="then" data-v-0378212a>,</span><span class="src" data-v-0378212a>&quot;b&quot;</span> <span class="brackets" data-v-0378212a>))</span></div><div data-v-0378212a><span class="comment" data-v-0378212a>//[&quot;a&quot;,&quot;b&quot;,1,2,3,4,5,6,7,8]</span></div></div><table class="fz30" data-v-0378212a><tr data-v-0378212a><td data-v-0378212a><div class="pad20" data-v-0378212a></div></td><td data-v-0378212a><div class="pad20" data-v-0378212a>slice</div></td><td data-v-0378212a><div class="pad20" data-v-0378212a>splice</div></td></tr><tr data-v-0378212a><td data-v-0378212a><div class="pad20" data-v-0378212a>原數組</div></td><td data-v-0378212a><div class="pad20" data-v-0378212a>不改變</div></td><td data-v-0378212a><div class="pad20" data-v-0378212a>會改原數組</div></td></tr><tr data-v-0378212a><td data-v-0378212a><div class="pad20" data-v-0378212a>沒傳參數</div></td><td data-v-0378212a><div class="pad20" data-v-0378212a>返回原數組</div></td><td data-v-0378212a><div class="pad20" data-v-0378212a><div class="" data-v-0378212a>返回由刪除元素</div><div class="" data-v-0378212a>組成的數組</div><div class="" data-v-0378212a>沒刪返回空</div></div></td></tr><tr data-v-0378212a><td data-v-0378212a><div class="pad20" data-v-0378212a>參數一個時</div></td><td data-v-0378212a><div class="pad20" data-v-0378212a>一樣</div></td><td data-v-0378212a><div class="pad20" data-v-0378212a>一樣</div></td></tr><tr data-v-0378212a><td data-v-0378212a><div class="pad20" data-v-0378212a></div></td><td data-v-0378212a><div class="pad20" data-v-0378212a></div></td><td data-v-0378212a><div class="pad20" data-v-0378212a></div></td></tr><tr data-v-0378212a><td data-v-0378212a><div class="pad20" data-v-0378212a></div></td><td data-v-0378212a><div class="pad20" data-v-0378212a></div></td><td data-v-0378212a><div class="pad20" data-v-0378212a></div></td></tr></table><div id="threemethod012" class="articleCardTitle cor36 fz34" data-v-0378212a> 4. every &amp; some <span class="spo marL100" data-v-0378212a>回調</span></div><p class="fz28" data-v-0378212a> every 判斷 數組中 每個元素 是否都符合條件, 都符合返回 true, 否返回 false </p><br data-v-0378212a><p class="fz28" data-v-0378212a>🐕🐶🐕🐕.every(🐕) &gt; false</p><br data-v-0378212a><br data-v-0378212a><p class="fz28" data-v-0378212a> some 判斷 數組中 每個元素 是否有一些 滿足 傳入條件 , 有返回 true </p><br data-v-0378212a><p class="fz28" data-v-0378212a>🐕🐶🐶🐕.some(🐶) &gt; true</p><div class="bgcVS" data-v-0378212a><div data-v-0378212a><span class="comment" data-v-0378212a>1.裡面幾個參數 2. 返回值返回什麼 3. 使用方法</span></div><br data-v-0378212a><div data-v-0378212a><span class="word" data-v-0378212a>arr</span><span class="variable" data-v-0378212a>.every</span><span class="brackets" data-v-0378212a>(</span><span class="cor36" data-v-0378212a>回調函數</span><span class="brackets" data-v-0378212a>(</span><span class="word" data-v-0378212a>當前數組元素,元素索引值,arr</span><span class="brackets" data-v-0378212a>))</span></div><br data-v-0378212a><div data-v-0378212a><span class="word" data-v-0378212a>arr</span><span class="variable" data-v-0378212a>.every</span><span class="brackets" data-v-0378212a>(</span><span class="cor36" data-v-0378212a>回調函數</span><span class="brackets" data-v-0378212a>(</span><span class="word" data-v-0378212a>item,index,arr</span><span class="brackets" data-v-0378212a>))</span></div><br data-v-0378212a> # <div data-v-0378212a><span class="function" data-v-0378212a>const </span><span class="word" data-v-0378212a>arr</span> <span class="then" data-v-0378212a>=</span><span class="brackets" data-v-0378212a>[</span><span class="number" data-v-0378212a>10,20,30</span><span class="brackets" data-v-0378212a>]</span></div><div data-v-0378212a><span class="function" data-v-0378212a>const </span><span class="word" data-v-0378212a>flag</span> <span class="then" data-v-0378212a>=</span><span class="word" data-v-0378212a>arr.</span> <span class="variable" data-v-0378212a>every</span><span class="brackets" data-v-0378212a>(</span> <span class="word" data-v-0378212a>item</span><span class="function" data-v-0378212a>=&gt;</span> <span class="word" data-v-0378212a>item</span><span class="then" data-v-0378212a>&gt;=</span> <span class="number" data-v-0378212a>10</span><span class="brackets" data-v-0378212a>)</span></div><div data-v-0378212a><span class="word" data-v-0378212a>console.</span><span class="variable" data-v-0378212a>log</span> <span class="brackets" data-v-0378212a>(</span><span class="word" data-v-0378212a>flag</span> <span class="brackets" data-v-0378212a>) </span><span class="comment" data-v-0378212a>// true</span></div><br data-v-0378212a><br data-v-0378212a><div data-v-0378212a><span class="word" data-v-0378212a>arr</span> <span class="variable" data-v-0378212a>.some</span><span class="brackets" data-v-0378212a>(</span><span class="cor36" data-v-0378212a>回調函數</span><span class="brackets" data-v-0378212a>(</span><span class="word" data-v-0378212a>當前數組元素,元素索引值,arr</span><span class="brackets" data-v-0378212a>))</span></div><br data-v-0378212a><div data-v-0378212a><span class="word" data-v-0378212a>arr</span> <span class="variable" data-v-0378212a>.some</span><span class="brackets" data-v-0378212a>(</span><span class="cor36" data-v-0378212a>回調函數</span><span class="brackets" data-v-0378212a>(</span><span class="word" data-v-0378212a>item,index,arr</span><span class="brackets" data-v-0378212a>))</span></div><br data-v-0378212a> # <div data-v-0378212a><span class="function" data-v-0378212a>const </span><span class="word" data-v-0378212a>flag</span> <span class="then" data-v-0378212a>=</span><span class="word" data-v-0378212a>arr.</span> <span class="variable" data-v-0378212a>some</span><span class="brackets" data-v-0378212a>(</span> <span class="word" data-v-0378212a>item</span><span class="function" data-v-0378212a>=&gt;</span> <span class="word" data-v-0378212a>item</span><span class="then" data-v-0378212a>&gt;=</span> <span class="number" data-v-0378212a>20</span><span class="brackets" data-v-0378212a>)</span></div><div data-v-0378212a><span class="word" data-v-0378212a>console.</span><span class="variable" data-v-0378212a>log</span> <span class="brackets" data-v-0378212a>(</span><span class="word" data-v-0378212a>flag</span> <span class="brackets" data-v-0378212a>) </span><span class="comment" data-v-0378212a>// true</span></div></div><div id="threemethod013" class="articleCardTitle cor36 fz34" data-v-0378212a> 4. concat . . . 不改變 原數組 </div><p class="fz28" data-v-0378212a> concat 方法用於 多個數組合並 , 他將 新數組的成員 , 加到 原數組 成員的 後部 , 然後返回一個 新數組 </p><p class="fz28" data-v-0378212a>原數組不變</p><br data-v-0378212a><div class="bgcVS" data-v-0378212a><div data-v-0378212a><span class="function" data-v-0378212a>let </span> <span class="word" data-v-0378212a>arr1</span><span class="then" data-v-0378212a>=</span> <span class="brackets" data-v-0378212a>[</span><span class="src" data-v-0378212a>&quot;wayne&quot;,&quot;jack&quot;</span><span class="brackets" data-v-0378212a>]</span></div><div data-v-0378212a><span class="function" data-v-0378212a>let </span> <span class="word" data-v-0378212a>arr2</span><span class="then" data-v-0378212a>=</span> <span class="brackets" data-v-0378212a>[</span><span class="src" data-v-0378212a>&quot;hello&quot;,&quot;hi&quot;</span><span class="brackets" data-v-0378212a>]</span> <span class="word" data-v-0378212a></span></div><br data-v-0378212a><div data-v-0378212a><span class="comment" data-v-0378212a>//直接+會變字串</span></div><div data-v-0378212a><span class="word" data-v-0378212a>console</span><span class="variable" data-v-0378212a>.log</span><span class="brackets" data-v-0378212a>(</span> <span class="word" data-v-0378212a>arr1</span><span class="then" data-v-0378212a>+</span> <span class="word" data-v-0378212a>arr2</span><span class="brackets" data-v-0378212a>)</span><span class="comment" data-v-0378212a>//wayne,jackhello,hi</span></div><br data-v-0378212a><div data-v-0378212a><span class="word" data-v-0378212a>console</span><span class="variable" data-v-0378212a>.log</span><span class="brackets" data-v-0378212a>(</span><span class="word" data-v-0378212a>arr1.concat</span><span class="brackets" data-v-0378212a>(</span> <span class="word" data-v-0378212a>arr2</span><span class="brackets" data-v-0378212a>)) </span><span class="comment" data-v-0378212a>//[&quot;wayne&quot;,&quot;jack&quot;,&quot;hello&quot;,&quot;hi&quot;]</span></div><br data-v-0378212a><p data-v-0378212a>也可以多個</p><br data-v-0378212a><div data-v-0378212a><span class="function" data-v-0378212a>let </span> <span class="word" data-v-0378212a>arr3</span><span class="then" data-v-0378212a>=</span> <span class="brackets" data-v-0378212a>[</span><span class="src" data-v-0378212a>&quot;web&quot;,&quot;Python&quot;</span><span class="brackets" data-v-0378212a>]</span></div><div data-v-0378212a><span class="word" data-v-0378212a>console</span><span class="variable" data-v-0378212a>.log</span><span class="brackets" data-v-0378212a>(</span><span class="word" data-v-0378212a>arr1.concat</span><span class="brackets" data-v-0378212a>(</span><span class="word" data-v-0378212a>arr2,arr3</span><span class="brackets" data-v-0378212a>))</span><span class="comment" data-v-0378212a>//[&quot;wayne&quot;,&quot;jack&quot;,&quot;hello&quot;,&quot;hi&quot;,&quot;web&quot;,&quot;Python&quot;]</span></div><div data-v-0378212a><span class="word" data-v-0378212a>console</span><span class="variable" data-v-0378212a>.log</span><span class="brackets" data-v-0378212a>(</span> <span class="word" data-v-0378212a>arr1</span><span class="brackets" data-v-0378212a>)</span><span class="comment" data-v-0378212a>//3個原數組沒變</span></div><br data-v-0378212a><p data-v-0378212a>除了接受數組,也接受其他類型的值作為參數,添加到數組尾部</p><br data-v-0378212a><div data-v-0378212a><span class="function" data-v-0378212a>let </span> <span class="word" data-v-0378212a>arr4</span><span class="then" data-v-0378212a>=</span> <span class="brackets" data-v-0378212a>[</span><span class="number" data-v-0378212a>10</span> <span class="brackets" data-v-0378212a>]</span></div><div data-v-0378212a><span class="word" data-v-0378212a>console</span><span class="variable" data-v-0378212a>.log</span><span class="brackets" data-v-0378212a>(</span> <span class="word" data-v-0378212a>arr4</span><span class="variable" data-v-0378212a>.concat</span><span class="brackets" data-v-0378212a>(</span><span class="number" data-v-0378212a>20,30,40</span><span class="brackets" data-v-0378212a>))</span><span class="comment" data-v-0378212a>//[10,20,30,40]</span></div><br data-v-0378212a><br data-v-0378212a><br data-v-0378212a><div data-v-0378212a><span class="brackets" data-v-0378212a>[</span> <span class="number" data-v-0378212a>1,2,3</span><span class="brackets" data-v-0378212a>]</span><span class="variable" data-v-0378212a>.concat</span><span class="brackets" data-v-0378212a>(</span><span class="number" data-v-0378212a>4,5,6,</span><span class="brackets" data-v-0378212a>[</span> <span class="number" data-v-0378212a>7,8,9</span><span class="brackets" data-v-0378212a>])</span></div><div data-v-0378212a><span class="brackets" data-v-0378212a>[</span><span class="number" data-v-0378212a>1,2,3,4,5,6,7,8,9</span><span class="brackets" data-v-0378212a>]</span></div></div><div id="threemethod014" class="articleCardTitle cor36 fz34" data-v-0378212a> 4. Array.form() </div><p class="fz28" data-v-0378212a>偽數組轉換為真數組</p><div class="bgcVS" data-v-0378212a><div data-v-0378212a><span class="then" data-v-0378212a>＜</span> <span class="word" data-v-0378212a>ul</span><span class="then" data-v-0378212a>&gt;</span></div><div class="pTwo" data-v-0378212a><span class="then" data-v-0378212a>＜</span> <span class="word" data-v-0378212a>li</span><span class="then" data-v-0378212a>&gt;</span></div><div class="pTwo" data-v-0378212a><span class="then" data-v-0378212a>＜</span> <span class="word" data-v-0378212a>li</span><span class="then" data-v-0378212a>&gt;</span></div><div class="pTwo" data-v-0378212a><span class="then" data-v-0378212a>＜</span> <span class="word" data-v-0378212a>li</span><span class="then" data-v-0378212a>&gt;</span></div><div data-v-0378212a><span class="then" data-v-0378212a>＜/</span> <span class="word" data-v-0378212a>ul</span><span class="then" data-v-0378212a>&gt;</span></div><div data-v-0378212a><span class="function" data-v-0378212a>const </span><span class="word" data-v-0378212a>lis</span> <span class="then" data-v-0378212a>=</span><span class="word" data-v-0378212a>document</span><span class="variable" data-v-0378212a>.querySelectorAll</span><span class="brackets" data-v-0378212a>(</span> <span class="src" data-v-0378212a>&quot;ul li&quot;</span><span class="brackets" data-v-0378212a>)</span></div><div data-v-0378212a><span class="word" data-v-0378212a>console.</span><span class="variable" data-v-0378212a>log</span> <span class="brackets" data-v-0378212a>(</span><span class="word" data-v-0378212a>lis</span> <span class="brackets" data-v-0378212a>)</span><span class="comment" data-v-0378212a>// 是 偽數組 Argument 也是</span></div><div data-v-0378212a><span class="word" data-v-0378212a>lis.</span> <span class="variable" data-v-0378212a>pop</span><span class="brackets" data-v-0378212a>() </span><span class="comment" data-v-0378212a>// pop is not a function</span></div><div data-v-0378212a><span class="function" data-v-0378212a>const </span><span class="word" data-v-0378212a>liss</span> <span class="then" data-v-0378212a>=</span><span class="brackets" data-v-0378212a>Array</span><span class="variable" data-v-0378212a>.from</span><span class="brackets" data-v-0378212a>(</span> <span class="word" data-v-0378212a>lis</span><span class="brackets" data-v-0378212a>)</span></div></div><p class="fz28" data-v-0378212a></p><p class="fz28" data-v-0378212a></p><p class="fz28" data-v-0378212a></p><p class="fz28" data-v-0378212a></p><p class="fz28" data-v-0378212a></p><p class="fz28" data-v-0378212a></p><p class="fz28" data-v-0378212a></p><p class="fz28" data-v-0378212a></p><p class="fz28" data-v-0378212a></p><p class="fz28" data-v-0378212a></p><p class="fz28" data-v-0378212a></p><p class="fz28" data-v-0378212a></p><p class="fz28" data-v-0378212a></p><p class="fz28" data-v-0378212a></p><p class="fz28" data-v-0378212a></p><p class="fz28" data-v-0378212a></p><p class="fz28" data-v-0378212a></p><p class="fz28" data-v-0378212a></p><p class="fz28" data-v-0378212a></p><p class="fz28" data-v-0378212a></p><p class="fz28" data-v-0378212a></p><p class="fz28" data-v-0378212a></p><p class="fz28" data-v-0378212a></p><p class="fz28" data-v-0378212a></p><p class="fz28" data-v-0378212a></p><p class="fz28" data-v-0378212a></p><p class="fz28" data-v-0378212a></p><p class="fz28" data-v-0378212a></p><p class="fz28" data-v-0378212a></p><p class="fz28" data-v-0378212a></p><p class="fz28" data-v-0378212a></p><p class="fz28" data-v-0378212a></p><p class="fz28" data-v-0378212a></p><p class="fz28" data-v-0378212a></p><p class="fz28" data-v-0378212a></p><div id="threemethod015" class="articleCardTitle cor36 fz34" data-v-0378212a> 4. 綜合練習 </div><div class="dis" data-v-0378212a><div class="bgcVS w100" data-v-0378212a><p data-v-0378212a>JSON格式msg={&quot;code&quot;:200,&quot;data&quot;:[{...}]}</p><br data-v-0378212a><div data-v-0378212a><span class="function" data-v-0378212a>const </span><span class="brackets" data-v-0378212a>{</span> <span class="word" data-v-0378212a>data</span><span class="brackets" data-v-0378212a>}</span> <span class="then" data-v-0378212a>=</span><span class="word" data-v-0378212a>msg</span></div><div data-v-0378212a><span class="word" data-v-0378212a>console.</span><span class="variable" data-v-0378212a>log</span><span class="brackets" data-v-0378212a>(</span> <span class="word" data-v-0378212a>data</span><span class="brackets" data-v-0378212a>)</span></div><br data-v-0378212a><div data-v-0378212a><span class="function" data-v-0378212a>function </span><span class="word" data-v-0378212a>render</span><span class="brackets" data-v-0378212a>(</span> <span class="word" data-v-0378212a>arr</span><span class="brackets" data-v-0378212a>){</span></div><div class="pTwo VSL" data-v-0378212a><span class="word" data-v-0378212a>console.</span><span class="variable" data-v-0378212a>log</span><span class="brackets" data-v-0378212a>(</span> <span class="word" data-v-0378212a>arr</span><span class="brackets" data-v-0378212a>)</span></div><div class="brackets" data-v-0378212a>}</div><div data-v-0378212a><span class="word" data-v-0378212a>render</span><span class="brackets" data-v-0378212a>(</span> <span class="word" data-v-0378212a>data</span><span class="brackets" data-v-0378212a>)</span></div></div><div class="bgcVSMid" data-v-0378212a>&gt;</div><div class="bgcVS w100" data-v-0378212a><br data-v-0378212a><br data-v-0378212a><div data-v-0378212a><span class="function" data-v-0378212a>function </span><span class="word" data-v-0378212a>render</span><span class="brackets" data-v-0378212a>(</span> <span class="word" data-v-0378212a>arr</span><span class="brackets" data-v-0378212a>){</span></div><div class="pTwo VSL" data-v-0378212a><span class="function" data-v-0378212a>const </span><span class="brackets" data-v-0378212a>{</span> <span class="word" data-v-0378212a>data</span><span class="brackets" data-v-0378212a>}</span> <span class="then" data-v-0378212a>=</span><span class="word" data-v-0378212a>arr</span></div><div class="pTwo VSL" data-v-0378212a><span class="word" data-v-0378212a>console.</span><span class="variable" data-v-0378212a>log</span><span class="brackets" data-v-0378212a>(</span> <span class="word" data-v-0378212a>data</span><span class="brackets" data-v-0378212a>)</span></div><div class="brackets" data-v-0378212a>}</div><div data-v-0378212a><span class="word" data-v-0378212a>render</span><span class="brackets" data-v-0378212a>(</span> <span class="word" data-v-0378212a>msg</span><span class="brackets" data-v-0378212a>)</span></div><br data-v-0378212a><div class="disCen comment" data-v-0378212a>更簡潔寫法 V</div><br data-v-0378212a><div data-v-0378212a><span class="function" data-v-0378212a>function </span><span class="word" data-v-0378212a>render</span><span class="brackets" data-v-0378212a>( { </span><span class="word" data-v-0378212a>data </span><span class="brackets" data-v-0378212a>} ) {</span></div><div class="pTwo VSL" data-v-0378212a><span class="word" data-v-0378212a>console.</span><span class="variable" data-v-0378212a>log</span><span class="brackets" data-v-0378212a>(</span> <span class="word" data-v-0378212a>data</span><span class="brackets" data-v-0378212a>)</span></div><div class="brackets" data-v-0378212a>}</div><div data-v-0378212a><span class="word" data-v-0378212a>render</span><span class="brackets" data-v-0378212a>(</span> <span class="word" data-v-0378212a>msg</span><span class="brackets" data-v-0378212a>)</span></div><br data-v-0378212a><div class="comment" data-v-0378212a>data容易命名衝突, 接進來資料改名myData</div><br data-v-0378212a><div data-v-0378212a><span class="function" data-v-0378212a>function </span><span class="word" data-v-0378212a>render</span><span class="brackets" data-v-0378212a>( { </span><span class="word" data-v-0378212a>data: myData </span><span class="brackets" data-v-0378212a>} ) {</span></div><div class="pTwo VSL" data-v-0378212a><span class="word" data-v-0378212a>console.</span><span class="variable" data-v-0378212a>log</span><span class="brackets" data-v-0378212a>(</span> <span class="word" data-v-0378212a>myData</span><span class="brackets" data-v-0378212a>)</span></div><div class="brackets" data-v-0378212a>}</div><div data-v-0378212a><span class="word" data-v-0378212a>render</span><span class="brackets" data-v-0378212a>(</span> <span class="word" data-v-0378212a>msg</span><span class="brackets" data-v-0378212a>)</span></div></div></div><div class="bgcVS" data-v-0378212a><div data-v-0378212a><span class="function" data-v-0378212a>const </span><span class="word" data-v-0378212a>spec</span> <span class="then" data-v-0378212a>=</span><span class="brackets" data-v-0378212a>{</span> <span class="word" data-v-0378212a>size:</span><span class="src" data-v-0378212a>&quot;40cm*40cm&quot;</span><span class="word" data-v-0378212a>,color:</span><span class="src" data-v-0378212a>&quot;black&quot;</span> <span class="brackets" data-v-0378212a>}</span></div><span class="comment" data-v-0378212a>//1.獲取所有屬性值</span><div data-v-0378212a><span class="brackets" data-v-0378212a>Object</span><span class="variable" data-v-0378212a>.values</span><span class="brackets" data-v-0378212a>(</span> <span class="word" data-v-0378212a>spec</span><span class="brackets" data-v-0378212a>)</span></div><div data-v-0378212a><span class="word" data-v-0378212a>console.</span><span class="variable" data-v-0378212a>log</span> <span class="brackets" data-v-0378212a>(</span><span class="word" data-v-0378212a>Object.values</span><span class="brackets" data-v-0378212a>(</span> <span class="word" data-v-0378212a>spec</span><span class="brackets" data-v-0378212a>))</span><span class="comment" data-v-0378212a>//[&quot;40cm*40cm&quot;,&quot;black&quot;]</span></div><span class="comment" data-v-0378212a>// 2. 轉換為字串 join(&quot;/&quot;)</span><span class="comment" data-v-0378212a>// 2. 轉換為字串</span><div data-v-0378212a><span class="brackets" data-v-0378212a>Object</span><span class="variable" data-v-0378212a>.values</span><span class="brackets" data-v-0378212a>(</span> <span class="word" data-v-0378212a>spec</span><span class="brackets" data-v-0378212a>)</span><span class="variable" data-v-0378212a>.join</span><span class="brackets" data-v-0378212a>(</span> <span class="src" data-v-0378212a>&quot;/&quot;</span><span class="brackets" data-v-0378212a>)</span></div><div data-v-0378212a><span class="word" data-v-0378212a>console.</span><span class="variable" data-v-0378212a>log</span> <span class="brackets" data-v-0378212a>(</span><span class="brackets" data-v-0378212a>Object</span><span class="variable" data-v-0378212a>.values</span><span class="brackets" data-v-0378212a>(</span> <span class="word" data-v-0378212a>spec</span><span class="brackets" data-v-0378212a>)</span><span class="variable" data-v-0378212a>.join</span><span class="brackets" data-v-0378212a>(</span> <span class="src" data-v-0378212a>&quot;/&quot;</span><span class="brackets" data-v-0378212a>)) </span><span class="comment" data-v-0378212a>//40cm*40cm/black</span></div><div data-v-0378212a><span class="word" data-v-0378212a>document.</span><span class="variable" data-v-0378212a>querySelect</span><span class="brackets" data-v-0378212a>(</span><span class="src" data-v-0378212a>&quot;.showDiv&quot;</span><span class="brackets" data-v-0378212a>)</span><span class="variable" data-v-0378212a>.innerHTML</span><span class="then" data-v-0378212a>=</span> <span class="brackets" data-v-0378212a>Object</span><span class="word" data-v-0378212a>.value</span> <span class="brackets" data-v-0378212a>(</span><span class="word" data-v-0378212a>spec</span> <span class="brackets" data-v-0378212a>)</span><span class="variable" data-v-0378212a>.join</span><span class="brackets" data-v-0378212a>(</span> <span class="src" data-v-0378212a>&quot;/&quot;</span><span class="brackets" data-v-0378212a>)</span></div></div><div class="bgcVS" data-v-0378212a><div data-v-0378212a><span class="function" data-v-0378212a>const </span><span class="word" data-v-0378212a>tea</span> <span class="then" data-v-0378212a>=</span><span class="src" data-v-0378212a>&quot;50g的飲料,100g茶葉&quot;</span></div><span class="comment" data-v-0378212a>// 1.把字串轉成數組</span><div data-v-0378212a><span class="word" data-v-0378212a>console.</span><span class="variable" data-v-0378212a>log</span> <span class="brackets" data-v-0378212a>(</span><span class="word" data-v-0378212a>tea.</span><span class="variable" data-v-0378212a>split</span><span class="brackets" data-v-0378212a>(</span> <span class="src" data-v-0378212a>&quot;,&quot;</span><span class="brackets" data-v-0378212a>)) </span><span class="comment" data-v-0378212a>// [ &quot;50g的飲料&quot;, &quot;100g茶葉&quot; ]</span></div><span class="comment" data-v-0378212a>// 2. 有幾條數據 我就生成幾個 ＜span&gt;</span><div data-v-0378212a><span class="word" data-v-0378212a>tea.</span><span class="variable" data-v-0378212a>split</span><span class="brackets" data-v-0378212a>(</span> <span class="src" data-v-0378212a>&quot;,&quot;</span><span class="brackets" data-v-0378212a>)</span><span class="variable" data-v-0378212a>.map</span><span class="brackets" data-v-0378212a>(</span><span class="function" data-v-0378212a>function </span><span class="brackets" data-v-0378212a>(</span> <span class="word" data-v-0378212a>item</span><span class="brackets" data-v-0378212a>){ </span><span class="comment" data-v-0378212a>//item是裡面的每一個值</span></div><div class="pTwo" data-v-0378212a><div class="dis" data-v-0378212a><div data-v-0378212a><span class="then" data-v-0378212a>return </span><span class="src" data-v-0378212a>`＜span&gt;贈品</span><span class="then" data-v-0378212a>${</span> <span class="word" data-v-0378212a>item</span><span class="then" data-v-0378212a>}</span> <span class="src" data-v-0378212a>＜/span&gt;`</span></div><div class="comment" data-v-0378212a><span data-v-0378212a>//贈品50g的飲料</span><br data-v-0378212a><span data-v-0378212a>//贈品100g茶葉</span></div></div></div><span class="brackets" data-v-0378212a>})</span><div data-v-0378212a><span class="function" data-v-0378212a>const </span><span class="word" data-v-0378212a>str</span> <span class="then" data-v-0378212a>=</span><span class="word" data-v-0378212a>tea.</span><span class="variable" data-v-0378212a>split</span><span class="brackets" data-v-0378212a>(</span> <span class="src" data-v-0378212a>&quot;,&quot;</span><span class="brackets" data-v-0378212a>)</span><span class="variable" data-v-0378212a>.map</span><span class="brackets" data-v-0378212a>(</span><span class="function" data-v-0378212a>function </span><span class="brackets" data-v-0378212a>(</span> <span class="word" data-v-0378212a>item</span><span class="brackets" data-v-0378212a>){ </span></div><div class="pTwo" data-v-0378212a><div data-v-0378212a><span class="then" data-v-0378212a>return </span><span class="src" data-v-0378212a>`＜span&gt;贈品</span><span class="then" data-v-0378212a>${</span> <span class="word" data-v-0378212a>item</span><span class="then" data-v-0378212a>}</span> <span class="src" data-v-0378212a>＜/span&gt;`</span></div></div><span class="brackets" data-v-0378212a>})</span><div data-v-0378212a><span class="word" data-v-0378212a>console.</span><span class="variable" data-v-0378212a>log</span> <span class="brackets" data-v-0378212a>(</span><span class="word" data-v-0378212a>arr</span> <span class="brackets" data-v-0378212a>) </span><span class="comment" data-v-0378212a>[&quot;＜span&gt;贈品50g的飲料＜/span&gt;&quot;,&quot;＜span&gt;贈品100g茶葉＜/span&gt;&quot;]</span></div><br data-v-0378212a><div class="comment" data-v-0378212a>數組不能直接往盒子加</div><div class="comment" data-v-0378212a>想要改成字串</div><div data-v-0378212a><span class="function" data-v-0378212a>const </span><span class="word" data-v-0378212a>str</span> <span class="then" data-v-0378212a>=</span><span class="word" data-v-0378212a>tea.</span><span class="variable" data-v-0378212a>split</span><span class="brackets" data-v-0378212a>(</span> <span class="src" data-v-0378212a>&quot;,&quot;</span><span class="brackets" data-v-0378212a>)</span><span class="variable" data-v-0378212a>.map</span><span class="brackets" data-v-0378212a>(</span><span class="function" data-v-0378212a>function </span><span class="brackets" data-v-0378212a>(</span> <span class="word" data-v-0378212a>item</span><span class="brackets" data-v-0378212a>){ </span></div><div class="pTwo" data-v-0378212a><div data-v-0378212a><span class="then" data-v-0378212a>return </span><span class="src" data-v-0378212a>`＜span&gt;贈品</span><span class="then" data-v-0378212a>${</span> <span class="word" data-v-0378212a>item</span><span class="then" data-v-0378212a>}</span> <span class="src" data-v-0378212a>＜/span&gt;`</span></div></div><div data-v-0378212a><span class="brackets" data-v-0378212a>})</span><span class="variable" data-v-0378212a>.join</span><span class="brackets" data-v-0378212a>(</span> <span class="src" data-v-0378212a>&quot;&quot;</span><span class="brackets" data-v-0378212a>)</span></div><div data-v-0378212a><span class="word" data-v-0378212a>console.</span><span class="variable" data-v-0378212a>log</span> <span class="brackets" data-v-0378212a>(</span><span class="word" data-v-0378212a>str</span> <span class="brackets" data-v-0378212a>)</span></div><span class="comment" data-v-0378212a>＜span&gt;贈品50g的飲料＜/span&gt;＜span&gt;贈品100g茶葉＜/span&gt;</span><div data-v-0378212a><span class="word" data-v-0378212a>document.</span><span class="variable" data-v-0378212a>querySelector</span><span class="brackets" data-v-0378212a>(</span> <span class="src" data-v-0378212a>&quot;div&quot;</span><span class="brackets" data-v-0378212a>)</span><span class="variable" data-v-0378212a>.innerHTML</span><span class="then" data-v-0378212a>=</span> <span class="word" data-v-0378212a>str</span></div><br data-v-0378212a><br data-v-0378212a><p data-v-0378212a>轉成箭頭函數</p><br data-v-0378212a><div data-v-0378212a><span class="function" data-v-0378212a>const </span><span class="word" data-v-0378212a>tea</span> <span class="then" data-v-0378212a>=</span><span class="src" data-v-0378212a>&quot;50g的飲料,100g茶葉&quot;</span></div><br data-v-0378212a><div data-v-0378212a><span class="word" data-v-0378212a>tea.</span><span class="variable" data-v-0378212a>split</span><span class="brackets" data-v-0378212a>(</span> <span class="then" data-v-0378212a>&quot;,&quot;</span><span class="brackets" data-v-0378212a>)</span><span class="variable" data-v-0378212a>.map</span><span class="brackets" data-v-0378212a>(</span> <span class="word" data-v-0378212a>item</span><span class="function" data-v-0378212a>=&gt;</span><span class="src" data-v-0378212a>`＜span&gt;贈品</span><span class="then" data-v-0378212a>${</span> <span class="word" data-v-0378212a>item</span><span class="then" data-v-0378212a>}</span><span class="src" data-v-0378212a>＜/span&gt;＜br&gt;`</span><span class="brackets" data-v-0378212a>)</span><span class="variable" data-v-0378212a>.join</span><span class="brackets" data-v-0378212a>(</span> <span class="src" data-v-0378212a>&quot;&quot;</span><span class="brackets" data-v-0378212a>)</span></div><br data-v-0378212a><div data-v-0378212a><span class="word" data-v-0378212a>document.</span><span class="variable" data-v-0378212a>querySelector</span><span class="brackets" data-v-0378212a>(</span> <span class="word" data-v-0378212a>&quot;div&quot;</span><span class="brackets" data-v-0378212a>)</span><span class="variable" data-v-0378212a>.innerHTML</span><span class="then" data-v-0378212a>=</span><span class="word" data-v-0378212a>tea.</span><span class="variable" data-v-0378212a>split</span><span class="brackets" data-v-0378212a>(</span> <span class="then" data-v-0378212a>&quot;,&quot;</span><span class="brackets" data-v-0378212a>)</span><span class="variable" data-v-0378212a>.map</span><span class="brackets" data-v-0378212a>(</span> <span class="word" data-v-0378212a>item</span><span class="function" data-v-0378212a>=&gt;</span><span class="src" data-v-0378212a>`＜span&gt;贈品</span><span class="then" data-v-0378212a>${</span> <span class="word" data-v-0378212a>item</span><span class="then" data-v-0378212a>}</span><span class="src" data-v-0378212a>＜/span&gt;＜br&gt;`</span><span class="brackets" data-v-0378212a>)</span><span class="variable" data-v-0378212a>.join</span><span class="brackets" data-v-0378212a>(</span> <span class="src" data-v-0378212a>&quot;&quot;</span><span class="brackets" data-v-0378212a>)</span></div></div>',102),Ho=Gs(()=>v("div",{class:"toTopButton"},[v("div",{class:"disCen"},"___"),v("div",{class:"disCen"},"▲")],-1)),Bo=[Ho],Jo=Gs(()=>v("div",{class:"toBotButton"},[v("div",{class:"disCen"},"▼"),v("div",{class:"disCen"},"￣")],-1)),Do=[Jo],Wo={__name:"JsPageThreeFour",setup(a){const s=ua(!1);window.addEventListener("scroll",function(){s.value=window.scrollY>0});function d(){window.scrollTo({top:0,left:0,behavior:"smooth"})}function n(){window.scrollTo({top:999999,left:0,behavior:"smooth"})}function t(c){window.scrollTo({top:document.getElementById(`${c}`).offsetTop,behavior:"smooth"})}return(c,e)=>{const l=za("P");return da(),ca(Q,null,[v("section",null,[v("div",qo,[v("div",yo,[v("div",Co,[v("div",{onClick:e[0]||(e[0]=p=>t("threemethod001")),class:"leftNavText"}," .push() "),v("div",{onClick:e[1]||(e[1]=p=>t("threemethod002")),class:"leftNavText"}," .pop() "),v("div",{onClick:e[2]||(e[2]=p=>t("threemethod003")),class:"leftNavText"}," .shift "),v("div",{onClick:e[3]||(e[3]=p=>t("threemethod004")),class:"leftNavText"}," .unshift "),v("div",{onClick:e[4]||(e[4]=p=>t("threemethod017")),class:"leftNavText"},jo),v("div",{onClick:e[5]||(e[5]=p=>t("threemethod005")),class:"leftNavText"}," .map() "),v("div",{onClick:e[6]||(e[6]=p=>t("threemethod006")),class:"leftNavText"}," .forEach() "),v("div",{onClick:e[7]||(e[7]=p=>t("threemethod016")),class:"leftNavText"}," .filter() "),v("div",{onClick:e[8]||(e[8]=p=>t("threemethod007")),class:"leftNavText"}," .join() "),v("div",{onClick:e[9]||(e[9]=p=>t("threemethod008")),class:"leftNavText"}," .reduce() "),v("div",{onClick:e[10]||(e[10]=p=>t("threemethod009")),class:"leftNavText"}," .find() "),v("div",{onClick:e[11]||(e[11]=p=>t("threemethod010")),class:"leftNavText"}," .slice() "),v("div",{onClick:e[12]||(e[12]=p=>t("threemethod011")),class:"leftNavText"}," .splice() "),v("div",{onClick:e[13]||(e[13]=p=>t("threemethod012")),class:"leftNavText"},No),v("div",{onClick:e[14]||(e[14]=p=>t("threemethod013")),class:"leftNavText"}," .concat(arr) "),v("div",{onClick:e[15]||(e[15]=p=>t("threemethod014")),class:"leftNavText"}," Array.form() "),v("div",{onClick:e[16]||(e[16]=p=>t("threemethod015")),class:"leftNavText"},"練習")])])]),v("div",Oo,[v("div",$o,[v("div",Eo,[Ao,v("div",Mo,[Fo,T(l,null,{default:C(()=>[fa("map 特點: 有一個數組返回給我們 , 所以 const newArr")]),_:1}),Io]),Ro])])])]),v("div",null,[X(T(W,{name:"fade",tag:"div"},{default:C(()=>[v("div",{onClick:d,class:"toTop"},Bo)]),_:1},512),[[Y,s.value]]),X(T(W,{name:"fade",tag:"div"},{default:C(()=>[v("div",{onClick:n,class:"toBot"},Do)]),_:1},512),[[Y,s.value]])])],64)}}},Uo=ra(Wo,[["__scopeId","data-v-0378212a"]]);const _v=a=>(ma("data-v-3231e665"),a=a(),ha(),a),Ko={class:"leftNav"},Xo={class:"leftNavContainer"},Yo={class:"leftNavLayout"},Go={class:"Main"},Qo={class:"mainContainer"},Zo={class:"mainLayout"},af=U('<br data-v-3231e665><br data-v-3231e665><p class="fz28" data-v-3231e665>總分總</p><p class="fz28" data-v-3231e665>1.要講哪個知識點</p><p class="fz28" data-v-3231e665>2.細講</p><p class="fz28" data-v-3231e665>3.總結</p><br data-v-3231e665><br data-v-3231e665><div id="threeobject001" class="articleCardTitle cor36 fz34" data-v-3231e665> 5.1 創建物件 </div><div class="bgcVS" data-v-3231e665><p data-v-3231e665>1. 利用對象字面量 創建</p><br data-v-3231e665><div data-v-3231e665><span class="function" data-v-3231e665>const </span><span class="word" data-v-3231e665>obj</span> <span class="then" data-v-3231e665>=</span><span class="brackets" data-v-3231e665>{</span></div><div class="pTwo" data-v-3231e665><span class="word" data-v-3231e665>uname:</span> <span class="src" data-v-3231e665>&quot;wayne&quot;</span></div><div class="brackets" data-v-3231e665>}</div><br data-v-3231e665><br data-v-3231e665><p data-v-3231e665>2. 利用 new Object 創建</p><br data-v-3231e665><div data-v-3231e665><span class="function" data-v-3231e665>const </span><span class="word" data-v-3231e665>obj</span><span class="then" data-v-3231e665>= new </span> <span class="word" data-v-3231e665>Object</span><span class="brackets" data-v-3231e665>()</span></div><div data-v-3231e665><span class="word" data-v-3231e665>obj.name</span> <span class="then" data-v-3231e665>=</span><span class="src" data-v-3231e665>&quot;wayne&quot;</span></div><br data-v-3231e665><div data-v-3231e665><span class="function" data-v-3231e665>const </span><span class="word" data-v-3231e665>obj</span><span class="then" data-v-3231e665>= new </span> <span class="word" data-v-3231e665>Object</span><span class="brackets" data-v-3231e665>( {</span> <span class="word" data-v-3231e665>name:</span><span class="src" data-v-3231e665>&quot;wayne&quot;</span> <span class="brackets" data-v-3231e665>} )</span></div></div><div id="threeobject002" class="articleCardTitle cor36 fz34" data-v-3231e665> 5.2 利用 構造函數 創建 </div><p class="fz28" data-v-3231e665>是一種特殊的 函數 , 用來 初始化 物件</p><br data-v-3231e665><p class="fz28" data-v-3231e665>1. 是什麼? _ 函數</p><p class="fz28" data-v-3231e665>2. 做什麼? _ 創建物件</p><br data-v-3231e665><br data-v-3231e665><p class="fz28" data-v-3231e665>約定 (非強制)</p><p class="fz28" data-v-3231e665>1. 第 1 個字母大寫</p><p class="fz28" data-v-3231e665>2. 只能由 new 操作符</p><div class="bgcVS" data-v-3231e665><p data-v-3231e665>創建 構造函數</p><br data-v-3231e665><div data-v-3231e665><span class="function" data-v-3231e665>function </span><span class="word" data-v-3231e665>Person</span> <span class="brackets" data-v-3231e665>(</span><span class="word" data-v-3231e665>uname,number</span><span class="brackets" data-v-3231e665>){</span></div><div class="pTwo VSL" data-v-3231e665><span class="comment" data-v-3231e665>// this.name=uname</span></div><div class="pTwo VSL" data-v-3231e665><span class="then" data-v-3231e665>this</span><span class="word" data-v-3231e665>.uname</span> <span class="then" data-v-3231e665>=</span><span class="word" data-v-3231e665>uname</span></div><div class="pTwo VSL" data-v-3231e665><span class="comment" data-v-3231e665>//物件的屬性 . . . 形參</span></div><div class="pTwo VSL" data-v-3231e665><span class="then" data-v-3231e665>this</span> <span class="word" data-v-3231e665>.number</span><span class="then" data-v-3231e665>=</span> <span class="word" data-v-3231e665>number</span></div><div class="brackets" data-v-3231e665>}</div><div data-v-3231e665><span class="word" data-v-3231e665>console.</span><span class="variable" data-v-3231e665>log</span> <span class="brackets" data-v-3231e665>(</span><span class="then" data-v-3231e665>new </span> <span class="word" data-v-3231e665>Person</span><span class="brackets" data-v-3231e665>(</span><span class="src" data-v-3231e665>&quot;wayne&quot;,</span> <span class="number" data-v-3231e665>123</span><span class="brackets" data-v-3231e665>))</span></div><br data-v-3231e665><div data-v-3231e665><span class="function" data-v-3231e665>const </span><span class="word" data-v-3231e665>p</span><span class="then" data-v-3231e665>= new </span><span class="word" data-v-3231e665>Person</span> <span class="brackets" data-v-3231e665>(</span><span class="src" data-v-3231e665>&quot;wayne&quot;,</span> <span class="number" data-v-3231e665>6</span><span class="brackets" data-v-3231e665>)</span></div></div><p class="fz28" data-v-3231e665>說明</p><p class="fz28" data-v-3231e665>1. 使用 new 調用函數 的行為 叫 實例化</p><p class="fz28" data-v-3231e665> 2. 實例化 構造函數時 沒有參數 可以省略 ( ) <span class="comment" data-v-3231e665>不建議省略</span></p><p class="fz28" data-v-3231e665> 3. 構造函數內部 無需寫 return, 返回值為新創建的物件 </p><p class="fz28 comment" data-v-3231e665>以前 調用函數 要加 return 才返回給我們</p><p class="fz28" data-v-3231e665> 4. 構造函數內部的 return 返回的值無效 , 不要寫 return </p><p class="fz28" data-v-3231e665>5. new Object() new Date() 也是 實例化構造函數</p><div id="threeobject003" class="articleCardTitle cor36 fz34" data-v-3231e665> 5.3 new做了什麼? </div><p class="fz28" data-v-3231e665> : new後面跟一個構造函數,先創造一個臨時對象,將這個臨時對象原型綁定構造函數的prototype,再把裡面的this指定為這個臨時對象,再執行構造函數,最後return這個臨時對象 </p><br data-v-3231e665><p class="fz28 cor36" data-v-3231e665># 當我 new 構造函數</p><p class="fz28" data-v-3231e665>1. 創建 新物件 (空的)</p><p class="fz28" data-v-3231e665>2. 構造函數的 this 指向 新物件</p><p class="fz28" data-v-3231e665>3. 執行 構造函數 代碼</p><p class="fz28 pFou" data-v-3231e665> this. 指向物件 <span class="comment" data-v-3231e665>. . . obj.name=&quot;wayne&quot;</span></p><p class="fz28 pFou" data-v-3231e665>name屬性 =賦值 &quot;wayne&quot;</p><p class="fz28" data-v-3231e665>4. 返回 這個 新物件</p><div id="threeobject004" class="articleCardTitle cor36 fz34" data-v-3231e665> 5.4 實例成員 &amp; 靜態成員 </div><p class="fz28" data-v-3231e665>通過 構造函數創建的 對象 為 實例對象</p><p class="fz28" data-v-3231e665>實例對象中的屬性方法 為 實例成員</p><br data-v-3231e665><p class="fz28" data-v-3231e665>說明</p><p class="fz28" data-v-3231e665>1. 為構造函數傳入參數, 創建結構相同但值不同的對象</p><p class="fz28" data-v-3231e665>2. 構造函數創建的實例對象彼此獨立互不影響</p><div class="bgcVS" data-v-3231e665><div data-v-3231e665><span class="function" data-v-3231e665>function </span><span class="word" data-v-3231e665>Person</span> <span class="brackets" data-v-3231e665>(</span><span class="word" data-v-3231e665>uname,number</span><span class="brackets" data-v-3231e665>){</span></div><div class="pTwo VSL" data-v-3231e665><span class="then" data-v-3231e665>this</span><span class="word" data-v-3231e665>.uname</span> <span class="then" data-v-3231e665>=</span><span class="word" data-v-3231e665>uname</span></div><div class="pTwo VSL" data-v-3231e665><span class="then" data-v-3231e665>this</span> <span class="word" data-v-3231e665>.number</span><span class="then" data-v-3231e665>=</span> <span class="word" data-v-3231e665>number</span></div><div class="brackets" data-v-3231e665>}</div><br data-v-3231e665><div data-v-3231e665><span class="function" data-v-3231e665>const </span><span class="word" data-v-3231e665>p</span><span class="then" data-v-3231e665>= new </span><span class="word" data-v-3231e665>Person</span> <span class="brackets" data-v-3231e665>(</span><span class="src" data-v-3231e665>&quot;wayne&quot;,</span> <span class="number" data-v-3231e665>6</span><span class="brackets" data-v-3231e665>)</span></div><div data-v-3231e665><span class="function" data-v-3231e665>const </span><span class="word" data-v-3231e665>n</span><span class="then" data-v-3231e665>= new </span><span class="word" data-v-3231e665>Person</span> <span class="brackets" data-v-3231e665>(</span><span class="src" data-v-3231e665>&quot;neo&quot;,</span> <span class="number" data-v-3231e665>3</span><span class="brackets" data-v-3231e665>)</span></div><div data-v-3231e665><span class="word" data-v-3231e665>console.</span><span class="variable" data-v-3231e665>log</span> <span class="brackets" data-v-3231e665>(</span><span class="word" data-v-3231e665>p</span><span class="then" data-v-3231e665>=== </span> <span class="word" data-v-3231e665>n</span><span class="brackets" data-v-3231e665>) </span><span class="comment" data-v-3231e665>// false</span></div><br data-v-3231e665><p data-v-3231e665>new p 時, 內存開闢了新空間 存放 p 這個新物件</p><p data-v-3231e665>new n 時, 內存開闢了新空間 存放 n 這個新物件</p><p data-v-3231e665>所以 2 個物件 在不同位置</p><br data-v-3231e665><div data-v-3231e665><span class="word" data-v-3231e665>p.name</span> <span class="then" data-v-3231e665>=</span><span class="src" data-v-3231e665>&quot;jack&quot;</span><span class="comment" data-v-3231e665> // 實例屬性</span></div><br data-v-3231e665><p data-v-3231e665>不影響 n 的 name</p><br data-v-3231e665><div data-v-3231e665><span class="word" data-v-3231e665>p.sayHi</span> <span class="then" data-v-3231e665>=</span><span class="brackets" data-v-3231e665>()</span> <span class="function" data-v-3231e665>=&gt;</span><span class="brackets" data-v-3231e665>{ </span><span class="comment" data-v-3231e665> // 實例方法</span></div><div class="pTwo" data-v-3231e665><span class="word" data-v-3231e665>console.</span><span class="variable" data-v-3231e665>log</span> <span class="brackets" data-v-3231e665>(</span><span class="src" data-v-3231e665>&quot;hi&quot;</span> <span class="brackets" data-v-3231e665>)</span></div><div class="brackets" data-v-3231e665>}</div><br data-v-3231e665><p class="fz28" data-v-3231e665>p 增加 sayHi 方法 不影響 n</p></div><p class="fz28" data-v-3231e665>靜態成員</p><p class="fz28" data-v-3231e665>構造函數的屬性和方法 是 靜態成員</p><p class="fz28" data-v-3231e665>靜態 屬性 &amp; 靜態 方法</p><br data-v-3231e665><p class="fz28" data-v-3231e665>說明</p><p class="fz28" data-v-3231e665>1. 靜態成員 只能 構造函數來訪問</p><p class="fz28" data-v-3231e665>2. 靜態方法 中的 this 指向 構造函數</p><div class="bgcVS" data-v-3231e665><div data-v-3231e665><span class="function" data-v-3231e665>function </span><span class="word" data-v-3231e665>Person</span> <span class="brackets" data-v-3231e665>(</span><span class="word" data-v-3231e665>uname,number</span><span class="brackets" data-v-3231e665>){</span></div><div class="pTwo VSL" data-v-3231e665><span class="then" data-v-3231e665>this</span><span class="word" data-v-3231e665>.uname</span> <span class="then" data-v-3231e665>=</span><span class="word" data-v-3231e665>uname</span></div><div class="pTwo VSL" data-v-3231e665><span class="then" data-v-3231e665>this</span> <span class="word" data-v-3231e665>.number</span><span class="then" data-v-3231e665>=</span> <span class="word" data-v-3231e665>number</span></div><div class="brackets" data-v-3231e665>}</div><br data-v-3231e665><div data-v-3231e665><span class="word" data-v-3231e665>Person.eyes</span> <span class="then" data-v-3231e665>=</span><span class="number" data-v-3231e665>2 </span><span class="comment" data-v-3231e665>// 靜態屬性</span></div><div data-v-3231e665><span class="word" data-v-3231e665>console.</span><span class="variable" data-v-3231e665>log</span> <span class="brackets" data-v-3231e665>(</span><span class="word" data-v-3231e665>Person.eyes</span><span class="brackets" data-v-3231e665>) </span> <span class="comment" data-v-3231e665>// 2</span></div><br data-v-3231e665><p class="fz28" data-v-3231e665>Math.Pi 就是 Math 這個構造函數 加了 Pi 屬性</p><br data-v-3231e665><div data-v-3231e665><span class="word" data-v-3231e665>Person.sayHi</span><span class="then" data-v-3231e665>=</span><span class="function" data-v-3231e665>function </span><span class="brackets" data-v-3231e665>(){ </span><span class="comment" data-v-3231e665>// 這邊不要用箭頭函數,因為沒this</span></div><div class="pTwo" data-v-3231e665><span class="word" data-v-3231e665>console.</span><span class="variable" data-v-3231e665>log</span> <span class="brackets" data-v-3231e665>(</span><span class="then" data-v-3231e665>this</span> <span class="brackets" data-v-3231e665>) </span><span class="comment" data-v-3231e665>// Person // 指向構造函數</span></div><div class="brackets" data-v-3231e665>}</div><div data-v-3231e665><span class="word" data-v-3231e665>Person.sayHi</span><span class="brackets" data-v-3231e665>()</span></div></div><div id="threeobject005" class="articleCardTitle cor36 fz34" data-v-3231e665> 5.5 內置構造函數 </div><p class="fz28 cor36" data-v-3231e665> # 基本數據類型不是物件 為什麼 基本類型可以用方法? </p><p class="fz28 cor36" data-v-3231e665># 為什麼字串可以使用.length?為什麼有方法?</p><p class="fz28" data-v-3231e665> 在JS底層把基本數據類型包裝成了引用數據類型, 轉成物件, 物件有屬性和方法, 就可以使用方法了 </p><div class="bgcVS" data-v-3231e665><div data-v-3231e665><span class="function" data-v-3231e665>const </span><span class="word" data-v-3231e665>str</span> <span class="then" data-v-3231e665>=</span><span class="word" data-v-3231e665>&quot;wayne&quot;</span></div><div data-v-3231e665><span class="word" data-v-3231e665>console.</span><span class="variable" data-v-3231e665>log</span> <span class="brackets" data-v-3231e665>(</span><span class="word" data-v-3231e665>str.length</span><span class="brackets" data-v-3231e665>)</span></div><br data-v-3231e665><div class="comment" data-v-3231e665>// JS底層做包裝</div><div data-v-3231e665><span class="function" data-v-3231e665>const </span><span class="word" data-v-3231e665>str</span> <span class="then" data-v-3231e665>= new </span><span class="word" data-v-3231e665>String</span> <span class="brackets" data-v-3231e665>(</span><span class="src" data-v-3231e665>&quot;wayne&quot;</span> <span class="brackets" data-v-3231e665>)</span></div><div class="comment" data-v-3231e665> // JS底層把簡單數據類型包裝成了引用數據類型 </div></div><p class="fz28 cor36" data-v-3231e665>Object</p><p class="fz28" data-v-3231e665> Object 是內置的 構造函數, 用於創建普通物件 (new Object) </p><br data-v-3231e665><p class="fz28" data-v-3231e665>3 個常用靜態方法</p><p class="fz28" data-v-3231e665>( 靜態方法只有構造函數 Object 可以調用 )</p><br data-v-3231e665><p class="fz28" data-v-3231e665>Object.values 靜態方法獲取物件中所有屬性值</p><p class="fz28" data-v-3231e665>注意: 返回的是一個數組</p><br data-v-3231e665><div class="bgcVS" data-v-3231e665><p data-v-3231e665>想要獲得物件裡面的屬性和值?</p><br data-v-3231e665><p data-v-3231e665>之前</p><br data-v-3231e665><div data-v-3231e665><span class="function" data-v-3231e665>const </span> <span class="word" data-v-3231e665>o</span><span class="then" data-v-3231e665>=</span> <span class="brackets" data-v-3231e665>{</span><span class="word" data-v-3231e665>name:&quot;wayne&quot;,number:</span><span class="number" data-v-3231e665>123</span> <span class="brackets" data-v-3231e665>}</span></div><div data-v-3231e665><span class="then" data-v-3231e665>for </span> <span class="brackets" data-v-3231e665>(</span><span class="function" data-v-3231e665>let </span> <span class="word" data-v-3231e665>k </span><span class="function" data-v-3231e665>in </span> <span class="word" data-v-3231e665>o</span><span class="brackets" data-v-3231e665>){</span></div><div data-v-3231e665><span class="word" data-v-3231e665>console.</span><span class="variable" data-v-3231e665>log</span> <span class="brackets" data-v-3231e665>(</span><span class="word" data-v-3231e665>k</span> <span class="brackets" data-v-3231e665>) </span><span class="comment" data-v-3231e665>// 屬性 name number</span></div><div data-v-3231e665><span class="word" data-v-3231e665>console.</span><span class="variable" data-v-3231e665>log</span> <span class="brackets" data-v-3231e665>(</span><span class="word" data-v-3231e665>o</span> <span class="brackets" data-v-3231e665>[</span><span class="word" data-v-3231e665>k</span> <span class="brackets" data-v-3231e665>]</span><span class="brackets" data-v-3231e665>) </span><span class="comment" data-v-3231e665>// 值 wayne 123</span></div><div class="brackets" data-v-3231e665>}</div><br data-v-3231e665><br data-v-3231e665><div data-v-3231e665><span class="function" data-v-3231e665>const </span> <span class="word" data-v-3231e665>o</span><span class="then" data-v-3231e665>=</span> <span class="brackets" data-v-3231e665>{</span><span class="word" data-v-3231e665>name:&quot;wayne&quot;,number:</span><span class="number" data-v-3231e665>123</span> <span class="brackets" data-v-3231e665>}</span></div><div data-v-3231e665><span class="function" data-v-3231e665>const </span><span class="word" data-v-3231e665>arr</span> <span class="then" data-v-3231e665>=</span><span class="word" data-v-3231e665>Object.keys</span><span class="brackets" data-v-3231e665>(</span> <span class="word" data-v-3231e665>o</span><span class="brackets" data-v-3231e665>)</span></div><div class="comment" data-v-3231e665>// 獲得所有 屬性名</div><div data-v-3231e665><span class="function" data-v-3231e665>const </span><span class="word" data-v-3231e665>arr</span> <span class="then" data-v-3231e665>=</span><span class="word" data-v-3231e665>Object.keys</span><span class="brackets" data-v-3231e665>(</span> <span class="word" data-v-3231e665>o</span><span class="brackets" data-v-3231e665>)</span></div><div class="comment" data-v-3231e665>// 獲得所有 屬性值</div><div data-v-3231e665><span class="word" data-v-3231e665>console.</span><span class="variable" data-v-3231e665>log</span> <span class="brackets" data-v-3231e665>(</span><span class="word" data-v-3231e665>Object.value</span><span class="brackets" data-v-3231e665>(</span> <span class="word" data-v-3231e665>o</span><span class="brackets" data-v-3231e665>)) </span><span class="comment" data-v-3231e665>//[&quot;wayne&quot;,123]</span></div></div><p class="fz28" data-v-3231e665>Object.assign 靜態方法用於物件拷貝</p><div class="bgcVS" data-v-3231e665><div data-v-3231e665><span class="function" data-v-3231e665>const </span> <span class="word" data-v-3231e665>o</span><span class="then" data-v-3231e665>=</span> <span class="brackets" data-v-3231e665>{</span><span class="word" data-v-3231e665>name:&quot;wayne&quot;,number:</span><span class="number" data-v-3231e665>123</span> <span class="brackets" data-v-3231e665>}</span></div><div data-v-3231e665><span class="function" data-v-3231e665>const </span><span class="word" data-v-3231e665>obj</span> <span class="then" data-v-3231e665>=</span><span class="brackets" data-v-3231e665>{}</span></div><div data-v-3231e665><span class="word" data-v-3231e665>Object.assign</span><span class="brackets" data-v-3231e665>(</span> <span class="word" data-v-3231e665>obj,o</span><span class="brackets" data-v-3231e665>) </span><span class="comment" data-v-3231e665>// (要拷貝的,被拷貝的)</span><span class="comment" data-v-3231e665>// (右 賦值 給 左)</span></div><div data-v-3231e665><span class="word" data-v-3231e665>console.</span><span class="variable" data-v-3231e665>log</span> <span class="brackets" data-v-3231e665>(</span><span class="word" data-v-3231e665>obj</span><span class="brackets" data-v-3231e665>)</span></div><br data-v-3231e665><p data-v-3231e665>可用來新增屬性</p><br data-v-3231e665><div data-v-3231e665><span class="word" data-v-3231e665>Object.assign</span><span class="brackets" data-v-3231e665>(</span> <span class="word" data-v-3231e665>o,</span><span class="brackets" data-v-3231e665>{</span><span class="word" data-v-3231e665>gender:&quot;男&quot;</span><span class="brackets" data-v-3231e665>})</span></div><div data-v-3231e665><span class="word" data-v-3231e665>console.</span><span class="variable" data-v-3231e665>log</span> <span class="brackets" data-v-3231e665>(</span><span class="word" data-v-3231e665>o</span><span class="brackets" data-v-3231e665>)</span></div><br data-v-3231e665><p data-v-3231e665>把一個物件 拷貝到裡面去</p></div>',71),sf=U('<div id="" class="articleCardTitle cor36 fz34" data-v-3231e665>String 方法</div><p class="fz28" data-v-3231e665>1. 實例屬性 length 獲取字串長度</p><br data-v-3231e665><p class="fz28" data-v-3231e665>2. 實例方法 split(&quot;分隔符&quot;) 用來將字串拆分成數組</p><div class="bgcVS" data-v-3231e665><div data-v-3231e665><span class="function" data-v-3231e665>const </span><span class="word" data-v-3231e665>str</span> <span class="then" data-v-3231e665>=</span><span class="src" data-v-3231e665>&quot;wayne,jack&quot;</span></div><div data-v-3231e665><span class="function" data-v-3231e665>const </span><span class="word" data-v-3231e665>arr</span> <span class="then" data-v-3231e665>=</span><span class="word" data-v-3231e665>str.</span><span class="variable" data-v-3231e665>split</span><span class="brackets" data-v-3231e665>(</span> <span class="then" data-v-3231e665>&quot;,&quot;</span><span class="brackets" data-v-3231e665>)</span></div><div data-v-3231e665><span class="word" data-v-3231e665>console.</span><span class="variable" data-v-3231e665>log</span> <span class="brackets" data-v-3231e665>(</span><span class="word" data-v-3231e665>arr</span> <span class="brackets" data-v-3231e665>)</span><span class="comment" data-v-3231e665>//[&quot;wayne&quot;,&quot;jack&quot;]</span></div><div data-v-3231e665><span class="function" data-v-3231e665>const </span><span class="word" data-v-3231e665>str1</span> <span class="then" data-v-3231e665>=</span><span class="src" data-v-3231e665>&quot;2077-1-1&quot;</span></div><div data-v-3231e665><span class="function" data-v-3231e665>const </span><span class="word" data-v-3231e665>arr1</span> <span class="then" data-v-3231e665>=</span><span class="word" data-v-3231e665>str1.</span><span class="variable" data-v-3231e665>split</span><span class="brackets" data-v-3231e665>(</span> <span class="src" data-v-3231e665>&quot;-&quot;</span><span class="brackets" data-v-3231e665>)</span></div><div data-v-3231e665><span class="word" data-v-3231e665>console.</span><span class="variable" data-v-3231e665>log</span> <span class="brackets" data-v-3231e665>(</span><span class="word" data-v-3231e665>arr</span> <span class="brackets" data-v-3231e665>)</span><span class="comment" data-v-3231e665>//[&quot;2077&quot;,&quot;1&quot;,&quot;1&quot;]</span></div></div><p class="fz28" data-v-3231e665> 3. 實例方法 substring (需要擷取的第一個字符的索引[,結束的索引號]) 用於字串擷取 </p><br data-v-3231e665><p class="fz28" data-v-3231e665>3.1 省略 結束索引號 默認取到最後</p><p class="fz28" data-v-3231e665>3.2 結束索引號 不包含 想要擷取的部分</p><div class="bgcVS" data-v-3231e665><div data-v-3231e665><span class="comment" data-v-3231e665>1.裡面幾個參數 2. 返回值返回什麼 3. 使用方法</span></div><br data-v-3231e665><div data-v-3231e665><span class="word" data-v-3231e665>str.</span><span class="variable" data-v-3231e665>substring</span><span class="brackets" data-v-3231e665>(</span><span class="word" data-v-3231e665>要截的第一個字所引</span><span class="brackets" data-v-3231e665>)</span></div><div data-v-3231e665><span class="cor36" data-v-3231e665>返回</span><span class="word" data-v-3231e665>擷取的那部分的新字串</span></div><br data-v-3231e665><div data-v-3231e665><span class="function" data-v-3231e665>const </span><span class="word" data-v-3231e665>str</span> <span class="then" data-v-3231e665>=</span><span class="src" data-v-3231e665>&quot;waynetestneo&quot;</span></div><div data-v-3231e665><span class="word" data-v-3231e665>console.</span><span class="variable" data-v-3231e665>log</span> <span class="brackets" data-v-3231e665>(</span><span class="word" data-v-3231e665>str.</span><span class="variable" data-v-3231e665>substring</span><span class="brackets" data-v-3231e665>(</span> <span class="number" data-v-3231e665>9</span><span class="brackets" data-v-3231e665>)) </span><span class="comment" data-v-3231e665>// neo</span></div><div data-v-3231e665><span class="word" data-v-3231e665>console.</span><span class="variable" data-v-3231e665>log</span> <span class="brackets" data-v-3231e665>(</span><span class="word" data-v-3231e665>str.</span><span class="variable" data-v-3231e665>substring</span><span class="brackets" data-v-3231e665>(</span> <span class="number" data-v-3231e665>5 , 9</span><span class="brackets" data-v-3231e665>)) </span><span class="comment" data-v-3231e665>// test</span></div></div><p class="fz28" data-v-3231e665> 4. 實例方法 startWith (檢測字串[,檢測位置索引號]) 判斷是否以某字符開頭 </p><p class="fz28" data-v-3231e665>返回 true or false</p><div class="bgcVS" data-v-3231e665><div data-v-3231e665><span class="comment" data-v-3231e665>1.裡面幾個參數 2. 返回值返回什麼 3. 使用方法</span></div><br data-v-3231e665><div data-v-3231e665><span class="word" data-v-3231e665>str.</span><span class="variable" data-v-3231e665>starstWith</span><span class="brackets" data-v-3231e665>(</span><span class="word" data-v-3231e665>要搜索的字串</span><span class="brackets" data-v-3231e665>)</span></div><br data-v-3231e665><div data-v-3231e665><span class="word" data-v-3231e665>一定要開頭 </span><span class="comment" data-v-3231e665>＜=&gt; includes 就不用</span></div><p class="fz28" data-v-3231e665>返回 true or false</p><br data-v-3231e665><div data-v-3231e665><span class="function" data-v-3231e665>const </span><span class="word" data-v-3231e665>str</span> <span class="then" data-v-3231e665>=</span><span class="src" data-v-3231e665>&quot;wayne學JS中&quot;</span></div><div data-v-3231e665><span class="word" data-v-3231e665>console.</span><span class="variable" data-v-3231e665>log</span> <span class="brackets" data-v-3231e665>(</span><span class="word" data-v-3231e665>str.</span><span class="variable" data-v-3231e665>startsWith</span><span class="brackets" data-v-3231e665>(</span> <span class="word" data-v-3231e665></span><span class="src" data-v-3231e665>&quot;yne&quot;</span> <span class="brackets" data-v-3231e665>))</span><span class="comment" data-v-3231e665>//true</span></div></div><p class="fz28" data-v-3231e665> 5. 實例方法 includes (搜索的字串[,檢測位置索引號]) 判斷一個字串是否包含在另一個字串中 </p><p class="fz28" data-v-3231e665>返回 true or false</p><div class="bgcVS" data-v-3231e665><div data-v-3231e665><span class="comment" data-v-3231e665>1.裡面幾個參數 2. 返回值返回什麼 3. 使用方法</span></div><br data-v-3231e665><div data-v-3231e665><span class="word" data-v-3231e665>str.</span><span class="variable" data-v-3231e665>includes</span><span class="brackets" data-v-3231e665>(</span><span class="word" data-v-3231e665>要搜索的字串</span><span class="brackets" data-v-3231e665>)</span></div><br data-v-3231e665><div data-v-3231e665><span class="word" data-v-3231e665>裡面有就 true </span><span class="comment" data-v-3231e665>＜=&gt; starstWith 一定要開頭</span></div><p class="fz28" data-v-3231e665>返回 true or false</p><p class="fz28" data-v-3231e665>有區分大小寫 false</p><br data-v-3231e665><div data-v-3231e665><span class="function" data-v-3231e665>const </span><span class="word" data-v-3231e665>str</span> <span class="then" data-v-3231e665>=</span><span class="src" data-v-3231e665>&quot;我是wayne&quot;</span></div><div data-v-3231e665><span class="word" data-v-3231e665>console.</span><span class="variable" data-v-3231e665>log</span> <span class="brackets" data-v-3231e665>(</span><span class="word" data-v-3231e665>str.</span><span class="variable" data-v-3231e665>includes</span><span class="brackets" data-v-3231e665>(</span> <span class="src" data-v-3231e665>&quot;wayne&quot;</span><span class="brackets" data-v-3231e665>) )</span><span class="comment" data-v-3231e665>//true</span></div><div data-v-3231e665><span class="word" data-v-3231e665>console.</span><span class="variable" data-v-3231e665>log</span> <span class="brackets" data-v-3231e665>(</span><span class="word" data-v-3231e665>str.</span><span class="variable" data-v-3231e665>includes</span><span class="brackets" data-v-3231e665>(</span> <span class="src" data-v-3231e665>&quot;wayne&quot; </span><span class="number" data-v-3231e665>, 3 </span><span class="brackets" data-v-3231e665>) )</span><span class="comment" data-v-3231e665>//false</span></div></div><p class="fz28" data-v-3231e665>6. 實例方法 toUpperCase 用於將字母轉成大寫</p><br data-v-3231e665><p class="fz28" data-v-3231e665>7. 實例方法 toLowerCase 用於將字母轉成小寫</p><br data-v-3231e665><p class="fz28" data-v-3231e665>8. 實例方法 indexOf 檢測是否包含某字符</p><br data-v-3231e665><p class="fz28" data-v-3231e665>9. 實例方法 endsWith 檢測是否以某字符結尾</p><br data-v-3231e665><p class="fz28" data-v-3231e665>10. 實例方法 replace 用於替換字串, 支持正則匹配</p><br data-v-3231e665><p class="fz28" data-v-3231e665>11. 實例方法 match 用於查找字串, 支持正則匹配</p><br data-v-3231e665><div class="bgcVS" data-v-3231e665><div data-v-3231e665><span class="function" data-v-3231e665>const </span><span class="word" data-v-3231e665>tea</span> <span class="then" data-v-3231e665>=</span><span class="src" data-v-3231e665>&quot;50g的飲料,100g茶葉&quot;</span></div><span class="comment" data-v-3231e665>// 1.把字串轉成數組</span><div data-v-3231e665><span class="word" data-v-3231e665>console.</span><span class="variable" data-v-3231e665>log</span> <span class="brackets" data-v-3231e665>(</span><span class="word" data-v-3231e665>tea.</span><span class="variable" data-v-3231e665>split</span><span class="brackets" data-v-3231e665>(</span> <span class="src" data-v-3231e665>&quot;,&quot;</span><span class="brackets" data-v-3231e665>)) </span><span class="comment" data-v-3231e665>// [ &quot;50g的飲料&quot;, &quot;100g茶葉&quot; ]</span></div><span class="comment" data-v-3231e665>// 2. 有幾條數據 我就生成幾個 ＜span&gt;</span><div data-v-3231e665><span class="word" data-v-3231e665>tea.</span><span class="variable" data-v-3231e665>split</span><span class="brackets" data-v-3231e665>(</span> <span class="src" data-v-3231e665>&quot;,&quot;</span><span class="brackets" data-v-3231e665>)</span><span class="variable" data-v-3231e665>.map</span><span class="brackets" data-v-3231e665>(</span><span class="function" data-v-3231e665>function </span><span class="brackets" data-v-3231e665>(</span> <span class="word" data-v-3231e665>item</span><span class="brackets" data-v-3231e665>){ </span><span class="comment" data-v-3231e665>//item是裡面的每一個值</span></div><div class="pTwo" data-v-3231e665><div class="dis" data-v-3231e665><div data-v-3231e665><span class="then" data-v-3231e665>return </span><span class="src" data-v-3231e665>`＜span&gt;贈品</span><span class="then" data-v-3231e665>${</span> <span class="word" data-v-3231e665>item</span><span class="then" data-v-3231e665>}</span> <span class="src" data-v-3231e665>＜/span&gt;`</span></div><div class="comment" data-v-3231e665><span data-v-3231e665>//贈品50g的飲料</span><br data-v-3231e665><span data-v-3231e665>//贈品100g茶葉</span></div></div></div><span class="brackets" data-v-3231e665>})</span><div data-v-3231e665><span class="function" data-v-3231e665>const </span><span class="word" data-v-3231e665>str</span> <span class="then" data-v-3231e665>=</span><span class="word" data-v-3231e665>tea.</span><span class="variable" data-v-3231e665>split</span><span class="brackets" data-v-3231e665>(</span> <span class="src" data-v-3231e665>&quot;,&quot;</span><span class="brackets" data-v-3231e665>)</span><span class="variable" data-v-3231e665>.map</span><span class="brackets" data-v-3231e665>(</span><span class="function" data-v-3231e665>function </span><span class="brackets" data-v-3231e665>(</span> <span class="word" data-v-3231e665>item</span><span class="brackets" data-v-3231e665>){ </span></div><div class="pTwo" data-v-3231e665><div data-v-3231e665><span class="then" data-v-3231e665>return </span><span class="src" data-v-3231e665>`＜span&gt;贈品</span><span class="then" data-v-3231e665>${</span> <span class="word" data-v-3231e665>item</span><span class="then" data-v-3231e665>}</span> <span class="src" data-v-3231e665>＜/span&gt;`</span></div></div><span class="brackets" data-v-3231e665>})</span><div data-v-3231e665><span class="word" data-v-3231e665>console.</span><span class="variable" data-v-3231e665>log</span> <span class="brackets" data-v-3231e665>(</span><span class="word" data-v-3231e665>arr</span> <span class="brackets" data-v-3231e665>) </span><span class="comment" data-v-3231e665>[&quot;＜span&gt;贈品50g的飲料＜/span&gt;&quot;,&quot;＜span&gt;贈品100g茶葉＜/span&gt;&quot;]</span></div><br data-v-3231e665><div class="comment" data-v-3231e665>數組不能直接往盒子加</div><div class="comment" data-v-3231e665>想要改成字串</div><div data-v-3231e665><span class="function" data-v-3231e665>const </span><span class="word" data-v-3231e665>str</span> <span class="then" data-v-3231e665>=</span><span class="word" data-v-3231e665>tea.</span><span class="variable" data-v-3231e665>split</span><span class="brackets" data-v-3231e665>(</span> <span class="src" data-v-3231e665>&quot;,&quot;</span><span class="brackets" data-v-3231e665>)</span><span class="variable" data-v-3231e665>.map</span><span class="brackets" data-v-3231e665>(</span><span class="function" data-v-3231e665>function </span><span class="brackets" data-v-3231e665>(</span> <span class="word" data-v-3231e665>item</span><span class="brackets" data-v-3231e665>){ </span></div><div class="pTwo" data-v-3231e665><div data-v-3231e665><span class="then" data-v-3231e665>return </span><span class="src" data-v-3231e665>`＜span&gt;贈品</span><span class="then" data-v-3231e665>${</span> <span class="word" data-v-3231e665>item</span><span class="then" data-v-3231e665>}</span> <span class="src" data-v-3231e665>＜/span&gt;`</span></div></div><div data-v-3231e665><span class="brackets" data-v-3231e665>})</span><span class="variable" data-v-3231e665>.join</span><span class="brackets" data-v-3231e665>(</span> <span class="src" data-v-3231e665>&quot;&quot;</span><span class="brackets" data-v-3231e665>)</span></div><div data-v-3231e665><span class="word" data-v-3231e665>console.</span><span class="variable" data-v-3231e665>log</span> <span class="brackets" data-v-3231e665>(</span><span class="word" data-v-3231e665>str</span> <span class="brackets" data-v-3231e665>)</span></div><span class="comment" data-v-3231e665>＜span&gt;贈品50g的飲料＜/span&gt;＜span&gt;贈品100g茶葉＜/span&gt;</span><div data-v-3231e665><span class="word" data-v-3231e665>document.</span><span class="variable" data-v-3231e665>querySelector</span><span class="brackets" data-v-3231e665>(</span> <span class="src" data-v-3231e665>&quot;div&quot;</span><span class="brackets" data-v-3231e665>)</span><span class="variable" data-v-3231e665>.innerHTML</span><span class="then" data-v-3231e665>=</span> <span class="word" data-v-3231e665>str</span></div><br data-v-3231e665><br data-v-3231e665><p data-v-3231e665>轉成箭頭函數</p><br data-v-3231e665><div data-v-3231e665><span class="function" data-v-3231e665>const </span><span class="word" data-v-3231e665>tea</span> <span class="then" data-v-3231e665>=</span><span class="src" data-v-3231e665>&quot;50g的飲料,100g茶葉&quot;</span></div><br data-v-3231e665><div data-v-3231e665><span class="word" data-v-3231e665>tea.</span><span class="variable" data-v-3231e665>split</span><span class="brackets" data-v-3231e665>(</span> <span class="then" data-v-3231e665>&quot;,&quot;</span><span class="brackets" data-v-3231e665>)</span><span class="variable" data-v-3231e665>.map</span><span class="brackets" data-v-3231e665>(</span> <span class="word" data-v-3231e665>item</span><span class="function" data-v-3231e665>=&gt;</span><span class="src" data-v-3231e665>`＜span&gt;贈品</span><span class="then" data-v-3231e665>${</span> <span class="word" data-v-3231e665>item</span><span class="then" data-v-3231e665>}</span><span class="src" data-v-3231e665>＜/span&gt;＜br&gt;`</span><span class="brackets" data-v-3231e665>)</span><span class="variable" data-v-3231e665>.join</span><span class="brackets" data-v-3231e665>(</span> <span class="src" data-v-3231e665>&quot;&quot;</span><span class="brackets" data-v-3231e665>)</span></div><br data-v-3231e665><div data-v-3231e665><span class="word" data-v-3231e665>document.</span><span class="variable" data-v-3231e665>querySelector</span><span class="brackets" data-v-3231e665>(</span> <span class="word" data-v-3231e665>&quot;div&quot;</span><span class="brackets" data-v-3231e665>)</span><span class="variable" data-v-3231e665>.innerHTML</span><span class="then" data-v-3231e665>=</span><span class="word" data-v-3231e665>tea.</span><span class="variable" data-v-3231e665>split</span><span class="brackets" data-v-3231e665>(</span> <span class="then" data-v-3231e665>&quot;,&quot;</span><span class="brackets" data-v-3231e665>)</span><span class="variable" data-v-3231e665>.map</span><span class="brackets" data-v-3231e665>(</span> <span class="word" data-v-3231e665>item</span><span class="function" data-v-3231e665>=&gt;</span><span class="src" data-v-3231e665>`＜span&gt;贈品</span><span class="then" data-v-3231e665>${</span> <span class="word" data-v-3231e665>item</span><span class="then" data-v-3231e665>}</span><span class="src" data-v-3231e665>＜/span&gt;＜br&gt;`</span><span class="brackets" data-v-3231e665>)</span><span class="variable" data-v-3231e665>.join</span><span class="brackets" data-v-3231e665>(</span> <span class="src" data-v-3231e665>&quot;&quot;</span><span class="brackets" data-v-3231e665>)</span></div></div><p class="fz28 cor36" data-v-3231e665>Number</p><p class="fz28" data-v-3231e665>1. toFixed() 設置保留小數位的長度</p><div class="bgcVS" data-v-3231e665><div data-v-3231e665><span class="function" data-v-3231e665>const </span><span class="word" data-v-3231e665>num</span> <span class="then" data-v-3231e665>=</span><span class="number" data-v-3231e665>10.123</span></div><div data-v-3231e665><span class="word" data-v-3231e665>console.</span><span class="variable" data-v-3231e665>log</span> <span class="brackets" data-v-3231e665>(</span><span class="word" data-v-3231e665>num.toFixed</span><span class="brackets" data-v-3231e665>()) </span><span class="comment" data-v-3231e665>// 10 // 四捨五入到整數位</span></div><div data-v-3231e665><span class="word" data-v-3231e665>console.</span><span class="variable" data-v-3231e665>log</span> <span class="brackets" data-v-3231e665>(</span><span class="word" data-v-3231e665>num.toFixed</span><span class="brackets" data-v-3231e665>(</span> <span class="number" data-v-3231e665>2</span><span class="brackets" data-v-3231e665> )) </span><span class="comment" data-v-3231e665>// 10.12</span></div><div data-v-3231e665><span class="function" data-v-3231e665>const </span><span class="word" data-v-3231e665>integer</span> <span class="then" data-v-3231e665>=</span><span class="number" data-v-3231e665>10</span></div><div data-v-3231e665><span class="word" data-v-3231e665>console.</span><span class="variable" data-v-3231e665>log</span> <span class="brackets" data-v-3231e665>(</span><span class="word" data-v-3231e665>num.toFixed</span><span class="brackets" data-v-3231e665>(</span> <span class="number" data-v-3231e665>2</span><span class="brackets" data-v-3231e665> )) </span><span class="comment" data-v-3231e665>// 10.00</span></div></div><p class="fz28" data-v-3231e665> 2. Math.floor()：無條件捨去，回傳大於所給數字的最小整數 </p><br data-v-3231e665><br data-v-3231e665><p class="fz28" data-v-3231e665></p><p class="fz28" data-v-3231e665></p><p class="fz28" data-v-3231e665></p><p class="fz28" data-v-3231e665></p><p class="fz28" data-v-3231e665></p><p class="fz28" data-v-3231e665></p><p class="fz28" data-v-3231e665></p><p class="fz28" data-v-3231e665></p><p class="fz28" data-v-3231e665></p><p class="fz28" data-v-3231e665></p><p class="fz28" data-v-3231e665></p><p class="fz28" data-v-3231e665></p><p class="fz28" data-v-3231e665></p><p class="fz28" data-v-3231e665></p><p class="fz28" data-v-3231e665></p><p class="fz28" data-v-3231e665></p><p class="fz28" data-v-3231e665></p><p class="fz28" data-v-3231e665></p><p class="fz28" data-v-3231e665></p><p class="fz28" data-v-3231e665></p><p class="fz28" data-v-3231e665></p><p class="fz28" data-v-3231e665></p><p class="fz28" data-v-3231e665></p><p class="fz28" data-v-3231e665></p><p class="fz28" data-v-3231e665></p><p class="fz28" data-v-3231e665></p><p class="fz28" data-v-3231e665></p><p class="fz28" data-v-3231e665></p><p class="fz28" data-v-3231e665></p><p class="fz28" data-v-3231e665></p><p class="fz28" data-v-3231e665></p><p class="fz28" data-v-3231e665></p><p class="fz28" data-v-3231e665></p><p class="fz28" data-v-3231e665></p><p class="fz28" data-v-3231e665></p><p class="fz28" data-v-3231e665></p><p class="fz28" data-v-3231e665></p><p class="fz28" data-v-3231e665></p><p class="fz28" data-v-3231e665></p><p class="fz28" data-v-3231e665></p><p class="fz28" data-v-3231e665></p><p class="fz28" data-v-3231e665></p><p class="fz28" data-v-3231e665></p><p class="fz28" data-v-3231e665></p><p class="fz28" data-v-3231e665></p>',80),df=_v(()=>v("div",{class:"toTopButton"},[v("div",{class:"disCen"},"___"),v("div",{class:"disCen"},"▲")],-1)),tf=[df],nf=_v(()=>v("div",{class:"toBotButton"},[v("div",{class:"disCen"},"▼"),v("div",{class:"disCen"},"￣")],-1)),ef=[nf],vf={__name:"JsPageThreeFive",setup(a){const s=ua(!1);window.addEventListener("scroll",function(){s.value=window.scrollY>0});function d(){window.scrollTo({top:0,left:0,behavior:"smooth"})}function n(){window.scrollTo({top:999999,left:0,behavior:"smooth"})}function t(c){window.scrollTo({top:document.getElementById(`${c}`).offsetTop,behavior:"smooth"})}return(c,e)=>{const l=za("RouterLink");return da(),ca(Q,null,[v("section",null,[v("div",Ko,[v("div",Xo,[v("div",Yo,[v("div",{onClick:e[0]||(e[0]=p=>t("threeobject001")),class:"leftNavText"}," 創建物件 "),v("div",{onClick:e[1]||(e[1]=p=>t("threeobject002")),class:"leftNavText"}," 構造函數 "),v("div",{onClick:e[2]||(e[2]=p=>t("threeobject003")),class:"leftNavText"}," new做了什麼 "),v("div",{onClick:e[3]||(e[3]=p=>t("threeobject004")),class:"leftNavText"}," 實例&靜態成員 "),v("div",{onClick:e[4]||(e[4]=p=>t("threeobject005")),class:"leftNavText"}," 內置構造函數 "),v("div",{onClick:e[5]||(e[5]=p=>t("")),class:"leftNavText"})])])]),v("div",Go,[v("div",Qo,[v("div",Zo,[af,v("div",null,[T(l,{to:"/js/method",class:"fz34"},{default:C(()=>[fa("Array 方法")]),_:1})]),sf])])])]),v("div",null,[X(T(W,{name:"fade",tag:"div"},{default:C(()=>[v("div",{onClick:d,class:"toTop"},tf)]),_:1},512),[[Y,s.value]]),X(T(W,{name:"fade",tag:"div"},{default:C(()=>[v("div",{onClick:n,class:"toBot"},ef)]),_:1},512),[[Y,s.value]])])],64)}}},cf=ra(vf,[["__scopeId","data-v-3231e665"]]),pf="/vue-learn-js/assets/object001-1817e630.jpg";const zv=a=>(ma("data-v-ff866de0"),a=a(),ha(),a),lf={class:"leftNav"},rf={class:"leftNavContainer"},of={class:"leftNavLayout"},ff=U('<div class="Main" data-v-ff866de0><div class="mainContainer" data-v-ff866de0><div class="mainLayout" data-v-ff866de0><br data-v-ff866de0><br data-v-ff866de0><p class="fz28" data-v-ff866de0>總分總</p><p class="fz28" data-v-ff866de0>1.要講哪個知識點</p><p class="fz28" data-v-ff866de0>2.細講</p><p class="fz28" data-v-ff866de0>3.總結</p><br data-v-ff866de0><br data-v-ff866de0><div id="threeprototype001" class="articleCardTitle cor36 fz34" data-v-ff866de0> 6.1 編程思想 </div><p class="fz28" data-v-ff866de0><span class="cor36" data-v-ff866de0> 面相過程 </span><span class="cor17" data-v-ff866de0> . . . </span><span class="cor36" data-v-ff866de0> 函數導向 </span><span class="cor17" data-v-ff866de0> . . . </span><span class="cor36" data-v-ff866de0>functional programming </span></p><p class="fz28" data-v-ff866de0> 分析解決問題所需要的步驟, 然後用函數把這些步驟一步一步實現, 使用時再一個一個的依次調用 </p><br data-v-ff866de0><br data-v-ff866de0><br data-v-ff866de0><p class="fz28" data-v-ff866de0><span class="cor36" data-v-ff866de0> 面相對象 </span><span class="cor17" data-v-ff866de0> . . . </span><span class="cor36" data-v-ff866de0> 物件導向 OOP </span><span class="cor17" data-v-ff866de0> . . . </span><span class="cor36" data-v-ff866de0>Object-oriented programming </span></p><p class="fz28" data-v-ff866de0>每一個物件都是功能中心, 有明確分工</p><p class="fz28" data-v-ff866de0></p><br data-v-ff866de0><br data-v-ff866de0><p class="fz28 cor36" data-v-ff866de0># 3 特性</p><p class="fz28" data-v-ff866de0> 封裝 <span class="cor17" data-v-ff866de0> . . . . . . </span> 我一點開關 就 掃地 </p><p class="fz28" data-v-ff866de0></p><br data-v-ff866de0><p class="fz28" data-v-ff866de0> 繼承 <span class="cor17" data-v-ff866de0> . . . . . . </span> 掃地機 繼承 拖拉機 接口 </p><p class="fz28" data-v-ff866de0></p><br data-v-ff866de0><p class="fz28" data-v-ff866de0> 多態 <span class="cor17" data-v-ff866de0> . . . . . . </span> 多功能 平時掃地 天熱變風扇 </p><p class="fz28" data-v-ff866de0></p><br data-v-ff866de0><p class="fz28" data-v-ff866de0> 重用 <span class="cor17" data-v-ff866de0> . . . . . . </span> 沒用額外動力, 重複用發動機 </p><p class="fz28" data-v-ff866de0> 低耦合 <span class="cor17" data-v-ff866de0> . . . . . . </span> 掃把壞了拿下來換新的 不影響別的 </p><br data-v-ff866de0><br data-v-ff866de0><div class="dis spaAro" data-v-ff866de0><div data-v-ff866de0><p class="fz28 cor36" data-v-ff866de0>函數導向編程</p><p class="fz28 cor36" data-v-ff866de0># 優</p><p class="fz28" data-v-ff866de0>性能比 物件導向高 , 適合跟硬件聯繫很緊密的東西</p><br data-v-ff866de0><p class="fz28 cor36" data-v-ff866de0># 缺</p><p class="fz28" data-v-ff866de0>沒有物件導向易維護 , 易復用 , 易擴展</p></div><div data-v-ff866de0><p class="fz28 cor36" data-v-ff866de0>物件導向編程</p><p class="fz28 cor36" data-v-ff866de0># 優</p><p class="fz28" data-v-ff866de0>易維護 , 易復用 , 易擴展</p><p class="fz28" data-v-ff866de0> 有封裝 , 繼承 , 多態 , 可設計出 低耦合 的系統 , 系統更靈活、易維護 </p><br data-v-ff866de0><p class="fz28 cor36" data-v-ff866de0># 缺</p><p class="fz28" data-v-ff866de0>性能比 物件導向低</p></div></div><br data-v-ff866de0><div id="threeprototype002" class="articleCardTitle cor36 fz34" data-v-ff866de0> 6.2 構造函數 </div><div data-v-ff866de0><span class="cor36 fz28" data-v-ff866de0>封裝 </span><span class="cor17" data-v-ff866de0> . . . . . </span><span class="fz28" data-v-ff866de0>JS 透過 構造函數 實現 封裝</span></div><br data-v-ff866de0><p class="fz28" data-v-ff866de0>構造函數很好用 , 但是 存在 浪費 內存 問題</p><div class="bgcVS" data-v-ff866de0><p data-v-ff866de0>創建 構造函數</p><br data-v-ff866de0><div class="disCen" data-v-ff866de0><img style="width:100%;" src="'+pf+'" data-v-ff866de0></div><br data-v-ff866de0><p class="fz28" data-v-ff866de0>如果我創建 200 個物件</p><p class="fz28" data-v-ff866de0>堆 放了 200 個 function</p><p class="fz28" data-v-ff866de0>浪費 內存</p></div><div class="articleCardTitle cor36 fz34" data-v-ff866de0>6. 原型</div><p class="fz28" data-v-ff866de0>解決構造函數 浪費內存問題</p><br data-v-ff866de0><p class="fz28" data-v-ff866de0> 1. 構造函數 通過原型 分配的函數 是 所有對象 所共享的 </p><br data-v-ff866de0><p class="fz28" data-v-ff866de0> 2. JS 規定 每個 構造函數 都有一個 prototype 屬性, 指向另一個對象, 也稱為原型對象 </p><br data-v-ff866de0><p class="fz28" data-v-ff866de0> 3. 這個對象 可以 掛載函數, 對象 實例化 不會 多次創建原型上函數, 節約內存 </p><br data-v-ff866de0><p class="fz28" data-v-ff866de0> 4. 可以把 不變的方法 直接定義在 prototype 對象上 , 這樣所有對象 的實例 就可以共享這些方法 </p><br data-v-ff866de0><p class="fz28" data-v-ff866de0>5. 構造函數和原型對象中的 this 都指向 實例化的對象</p><div class="bgcVS" data-v-ff866de0><div data-v-ff866de0><span class="function" data-v-ff866de0>function </span><span class="word" data-v-ff866de0>Person</span> <span class="brackets" data-v-ff866de0>(</span><span class="word" data-v-ff866de0>uname,number</span><span class="brackets" data-v-ff866de0>){</span></div><div class="pTwo VSL" data-v-ff866de0><span class="comment" data-v-ff866de0>// this.name=uname</span></div><div class="pTwo VSL" data-v-ff866de0><span class="then" data-v-ff866de0>this</span><span class="word" data-v-ff866de0>.uname</span> <span class="then" data-v-ff866de0>=</span><span class="word" data-v-ff866de0>uname</span></div><div class="pTwo VSL" data-v-ff866de0><span class="comment" data-v-ff866de0>//物件的屬性 . . . 形參</span></div><div class="pTwo VSL" data-v-ff866de0><span class="then" data-v-ff866de0>this</span> <span class="word" data-v-ff866de0>.number</span><span class="then" data-v-ff866de0>=</span> <span class="word" data-v-ff866de0>number</span></div><div class="pTwo VSL" data-v-ff866de0><span class="then" data-v-ff866de0>this.</span> <span class="word" data-v-ff866de0>sayHi</span><span class="then" data-v-ff866de0>=</span><span class="function" data-v-ff866de0>function </span><span class="brackets" data-v-ff866de0>(){</span></div><div class="pFou VSL" data-v-ff866de0><span class="word" data-v-ff866de0>console.</span><span class="variable" data-v-ff866de0>log</span> <span class="brackets" data-v-ff866de0>(</span><span class="src" data-v-ff866de0>&quot;hi&quot;</span> <span class="brackets" data-v-ff866de0>)</span></div><div class="pTwo VSL" data-v-ff866de0><span class="brackets" data-v-ff866de0>}</span></div><div class="brackets" data-v-ff866de0>}</div><div data-v-ff866de0><span class="word" data-v-ff866de0>console.</span><span class="variable" data-v-ff866de0>log</span> <span class="brackets" data-v-ff866de0>(</span><span class="then" data-v-ff866de0>new </span> <span class="word" data-v-ff866de0>Person</span><span class="brackets" data-v-ff866de0>(</span><span class="src" data-v-ff866de0>&quot;wayne&quot;,</span> <span class="number" data-v-ff866de0>123</span><span class="brackets" data-v-ff866de0>))</span></div><br data-v-ff866de0><div data-v-ff866de0><span class="function" data-v-ff866de0>const </span><span class="word" data-v-ff866de0>p</span><span class="then" data-v-ff866de0>= new </span><span class="word" data-v-ff866de0>Person</span> <span class="brackets" data-v-ff866de0>(</span><span class="src" data-v-ff866de0>&quot;wayne&quot;,</span> <span class="number" data-v-ff866de0>6</span><span class="brackets" data-v-ff866de0>)</span></div><div data-v-ff866de0><span class="function" data-v-ff866de0>const </span> <span class="word" data-v-ff866de0>j</span><span class="then" data-v-ff866de0>=</span> <span class="then" data-v-ff866de0>new </span><span class="word" data-v-ff866de0>Person</span> <span class="brackets" data-v-ff866de0>(</span><span class="src" data-v-ff866de0>&quot;jack&quot;,</span> <span class="number" data-v-ff866de0>9</span><span class="brackets" data-v-ff866de0>)</span></div><br data-v-ff866de0><span class="comment" data-v-ff866de0>//dir 打印對象形式</span><div data-v-ff866de0><span class="word" data-v-ff866de0>console.</span><span class="variable" data-v-ff866de0>dir</span> <span class="brackets" data-v-ff866de0>(</span><span class="brackets" data-v-ff866de0>Person</span> <span class="then" data-v-ff866de0>.</span><span class="word" data-v-ff866de0>prototype</span><span class="brackets" data-v-ff866de0>) </span><span class="comment" data-v-ff866de0>//寫法是屬性 返回是物件</span></div><br data-v-ff866de0><br data-v-ff866de0><div data-v-ff866de0><span class="comment" data-v-ff866de0>公共屬性寫到 構造函數</span></div><div data-v-ff866de0><span class="function" data-v-ff866de0>function </span><span class="word" data-v-ff866de0>Person</span> <span class="brackets" data-v-ff866de0>(</span><span class="word" data-v-ff866de0>uname,number</span><span class="brackets" data-v-ff866de0>){</span></div><div class="pTwo VSL" data-v-ff866de0><span class="then" data-v-ff866de0>this</span><span class="word" data-v-ff866de0>.uname</span> <span class="then" data-v-ff866de0>=</span><span class="word" data-v-ff866de0>uname</span></div><div class="pTwo VSL" data-v-ff866de0><span class="then" data-v-ff866de0>this</span> <span class="word" data-v-ff866de0>.number</span><span class="then" data-v-ff866de0>=</span> <span class="word" data-v-ff866de0>number</span></div><div class="brackets" data-v-ff866de0>}</div><br data-v-ff866de0><div data-v-ff866de0><span class="comment" data-v-ff866de0>公共方法寫到 原型object</span></div><div data-v-ff866de0><span class="brackets" data-v-ff866de0>Person</span><span class="word" data-v-ff866de0>.prototype.sayHi</span><span class="then" data-v-ff866de0>=</span><span class="function" data-v-ff866de0>function </span><span class="brackets" data-v-ff866de0>(){</span></div><div class="pTwo" data-v-ff866de0><span class="word" data-v-ff866de0>console.</span><span class="variable" data-v-ff866de0>log</span> <span class="brackets" data-v-ff866de0>(</span><span class="src" data-v-ff866de0>&quot;hi&quot;</span> <span class="brackets" data-v-ff866de0>)</span></div><div data-v-ff866de0><span class="brackets" data-v-ff866de0>}</span></div><br data-v-ff866de0><div data-v-ff866de0><span class="function" data-v-ff866de0>const </span><span class="word" data-v-ff866de0>p</span><span class="then" data-v-ff866de0>= new </span><span class="word" data-v-ff866de0>Person</span> <span class="brackets" data-v-ff866de0>(</span><span class="src" data-v-ff866de0>&quot;wayne&quot;,</span> <span class="number" data-v-ff866de0>6</span><span class="brackets" data-v-ff866de0>)</span></div><div data-v-ff866de0><span class="function" data-v-ff866de0>const </span> <span class="word" data-v-ff866de0>j</span><span class="then" data-v-ff866de0>=</span> <span class="then" data-v-ff866de0>new </span><span class="word" data-v-ff866de0>Person</span> <span class="brackets" data-v-ff866de0>(</span><span class="src" data-v-ff866de0>&quot;jack&quot;,</span> <span class="number" data-v-ff866de0>9</span><span class="brackets" data-v-ff866de0>)</span></div><br data-v-ff866de0><div data-v-ff866de0><span class="word" data-v-ff866de0>p.sayHi</span> <span class="brackets" data-v-ff866de0>()</span></div><br data-v-ff866de0><div data-v-ff866de0><span class="word" data-v-ff866de0>console.</span><span class="variable" data-v-ff866de0>log</span> <span class="brackets" data-v-ff866de0>(</span><span class="word" data-v-ff866de0>p.sayHi</span> <span class="then" data-v-ff866de0>===</span><span class="word" data-v-ff866de0>j.sayHi</span> <span class="brackets" data-v-ff866de0>)</span><span class="comment" data-v-ff866de0>//true</span></div></div><p class="fz28 cor36" data-v-ff866de0># 原型是什麼?</p><p class="fz28" data-v-ff866de0>一個對象, 也稱 原型對象</p><br data-v-ff866de0><p class="fz28 cor36" data-v-ff866de0># 原型做什麼?</p><p class="fz28" data-v-ff866de0>共享方法</p><br data-v-ff866de0><p class="fz28 cor36" data-v-ff866de0># 構造函數 &amp; 原型 this 指向誰?</p><p class="fz28" data-v-ff866de0>實例化的對象</p><div class="bgcVS" data-v-ff866de0><p class="fz28" data-v-ff866de0> 我只要一調用 函數 觸發 this 把這個 this 保存下來 賦值給 let </p><div data-v-ff866de0><span class="function" data-v-ff866de0>let </span> <span class="word" data-v-ff866de0>that</span></div><div data-v-ff866de0><span class="function" data-v-ff866de0>function </span><span class="word" data-v-ff866de0>Person</span> <span class="brackets" data-v-ff866de0>(</span><span class="word" data-v-ff866de0>uname</span><span class="brackets" data-v-ff866de0>){</span></div><div class="pTwo VSL" data-v-ff866de0><span class="word" data-v-ff866de0>console.</span><span class="variable" data-v-ff866de0>log</span> <span class="brackets" data-v-ff866de0>(</span><span class="then" data-v-ff866de0>this</span> <span class="brackets" data-v-ff866de0>)</span><span class="comment" data-v-ff866de0>//Person看不出來this指向誰</span></div><div class="pTwo VSL" data-v-ff866de0><span class="word" data-v-ff866de0>that</span> <span class="then" data-v-ff866de0>=</span><span class="then" data-v-ff866de0>this</span></div><div class="pTwo VSL" data-v-ff866de0><span class="then" data-v-ff866de0>this</span><span class="word" data-v-ff866de0>.uname</span> <span class="then" data-v-ff866de0>=</span><span class="word" data-v-ff866de0>uname</span></div><div class="brackets" data-v-ff866de0>}</div><br data-v-ff866de0><div data-v-ff866de0><span class="comment" data-v-ff866de0>1.實例對象是 p</span></div><div data-v-ff866de0><span class="function" data-v-ff866de0>const </span> <span class="word" data-v-ff866de0>p</span><span class="then" data-v-ff866de0>=</span> <span class="then" data-v-ff866de0>new </span><span class="word" data-v-ff866de0>Person</span> <span class="brackets" data-v-ff866de0>(</span><span class="src" data-v-ff866de0>&quot;wayne&quot;</span> <span class="brackets" data-v-ff866de0>)</span></div><div data-v-ff866de0><span class="word" data-v-ff866de0>console.</span><span class="variable" data-v-ff866de0>log</span> <span class="brackets" data-v-ff866de0>(</span><span class="word" data-v-ff866de0>that</span> <span class="then" data-v-ff866de0>===</span><span class="word" data-v-ff866de0>p</span> <span class="brackets" data-v-ff866de0>)</span></div><div class="comment" data-v-ff866de0>如果相等 那this 就是 p</div><div class="comment" data-v-ff866de0>// true // 構造函數 this 指向 p</div><br data-v-ff866de0><div data-v-ff866de0><span class="function" data-v-ff866de0>let </span> <span class="word" data-v-ff866de0>that2</span></div><span class="comment" data-v-ff866de0>// 原型對象裡面的函數this指向的是實例對象 p</span><div data-v-ff866de0><span class="brackets" data-v-ff866de0>Person</span><span class="word" data-v-ff866de0>.prototype.sayHi</span><span class="then" data-v-ff866de0>=</span><span class="function" data-v-ff866de0>function </span><span class="brackets" data-v-ff866de0>(){</span></div><div class="pTwo VSL" data-v-ff866de0><span class="word" data-v-ff866de0>that2</span> <span class="then" data-v-ff866de0>=</span><span class="then" data-v-ff866de0>this</span></div><div class="pTwo VSL" data-v-ff866de0><span class="word" data-v-ff866de0>console.</span><span class="variable" data-v-ff866de0>log</span> <span class="brackets" data-v-ff866de0>(</span><span class="src" data-v-ff866de0>&quot;hi&quot;</span> <span class="brackets" data-v-ff866de0>)</span></div><div data-v-ff866de0><span class="brackets" data-v-ff866de0>}</span></div><div data-v-ff866de0><span class="word" data-v-ff866de0>p.</span> <span class="variable" data-v-ff866de0>sing</span><span class="brackets" data-v-ff866de0>()</span></div><div class="comment" data-v-ff866de0>this 指向 函數的 調用者 就是 p</div><br data-v-ff866de0><div data-v-ff866de0><span class="word" data-v-ff866de0>console.</span><span class="variable" data-v-ff866de0>log</span> <span class="brackets" data-v-ff866de0>(</span><span class="word" data-v-ff866de0>that</span> <span class="then" data-v-ff866de0>===</span><span class="word" data-v-ff866de0>p</span> <span class="brackets" data-v-ff866de0>)</span><span class="comment" data-v-ff866de0>// true</span></div></div><p class="fz28" data-v-ff866de0>結論</p><p class="fz28" data-v-ff866de0>構造函數 和 原型對象中的 this 都指向 實例化的對象</p><br data-v-ff866de0><br data-v-ff866de0><p class="fz34 cor36" data-v-ff866de0># 給數組擴展方法</p><p class="fz28" data-v-ff866de0>reduce 是累計器</p><p class="fz28" data-v-ff866de0>定義一個 arr.sum() 返回累加結果</p><div class="bgcVS" data-v-ff866de0><div data-v-ff866de0><span class="function" data-v-ff866de0>const </span><span class="word" data-v-ff866de0>arr</span> <span class="then" data-v-ff866de0>=</span><span class="brackets" data-v-ff866de0>[</span> <span class="number" data-v-ff866de0>1,2,3</span><span class="brackets" data-v-ff866de0>]</span></div><div data-v-ff866de0><span class="brackets" data-v-ff866de0>Array</span><span class="word" data-v-ff866de0>.prototype.</span><span class="variable" data-v-ff866de0>max</span> <span class="then" data-v-ff866de0>=</span><span class="function" data-v-ff866de0>function </span><span class="brackets" data-v-ff866de0>(){</span></div><div class="pTwo" data-v-ff866de0><span class="then" data-v-ff866de0>return </span><span class="brackets" data-v-ff866de0>Math</span><span class="word" data-v-ff866de0>.</span><span class="variable" data-v-ff866de0>max</span> <span class="brackets" data-v-ff866de0>(</span><span class="word" data-v-ff866de0>...</span><span class="then" data-v-ff866de0>this</span><span class="brackets" data-v-ff866de0>)</span></div><div class="pTwo" data-v-ff866de0><span class="comment" data-v-ff866de0>// 原型對象裡面的函數this指向的是實例對象 arr</span></div><div data-v-ff866de0><span class="brackets" data-v-ff866de0>}</span></div><div data-v-ff866de0><span class="word" data-v-ff866de0>console.</span><span class="variable" data-v-ff866de0>log</span> <span class="brackets" data-v-ff866de0>(</span><span class="word" data-v-ff866de0>arr.</span> <span class="word" data-v-ff866de0>max</span><span class="brackets" data-v-ff866de0>())</span></div><br data-v-ff866de0><div data-v-ff866de0><span class="brackets" data-v-ff866de0>Array</span><span class="word" data-v-ff866de0>.prototype.</span><span class="variable" data-v-ff866de0>sum</span> <span class="then" data-v-ff866de0>=</span><span class="function" data-v-ff866de0>function </span><span class="brackets" data-v-ff866de0>(){</span></div><div class="pTwo VSL" data-v-ff866de0><span class="then" data-v-ff866de0>return </span> <span class="then" data-v-ff866de0>this</span><span class="variable" data-v-ff866de0>.reduce</span><span class="brackets" data-v-ff866de0>((</span><span class="word" data-v-ff866de0>prev,item</span><span class="brackets" data-v-ff866de0>)</span> <span class="function" data-v-ff866de0>=&gt;</span><span class="word" data-v-ff866de0>prev</span> <span class="then" data-v-ff866de0>+</span><span class="word" data-v-ff866de0>item,</span> <span class="number" data-v-ff866de0>0</span><span class="brackets" data-v-ff866de0>)</span></div><div data-v-ff866de0><span class="brackets" data-v-ff866de0>}</span></div><div data-v-ff866de0><span class="word" data-v-ff866de0>console.</span><span class="variable" data-v-ff866de0>log</span><span class="brackets" data-v-ff866de0>([</span> <span class="word" data-v-ff866de0>1,2,3</span><span class="brackets" data-v-ff866de0>]</span><span class="variable" data-v-ff866de0>.sum</span><span class="brackets" data-v-ff866de0>())</span></div></div><div id="threeprototype003" class="articleCardTitle cor36 fz34" data-v-ff866de0> 6.3 constructor </div><p class="fz28" data-v-ff866de0>在哪裡?</p><p class="fz28" data-v-ff866de0>每個 原型對象 裡面都有 constructor 屬性</p><br data-v-ff866de0><p class="fz28" data-v-ff866de0>做什麼?</p><p class="fz28" data-v-ff866de0>該屬性 指向 該原型對象的 構造函數</p><br data-v-ff866de0><div class="bgcVS" data-v-ff866de0><div data-v-ff866de0><span class="function" data-v-ff866de0>function </span><span class="word" data-v-ff866de0>Person</span> <span class="brackets" data-v-ff866de0>(){</span></div><div data-v-ff866de0><span class="brackets" data-v-ff866de0>}</span></div><div data-v-ff866de0><span class="function" data-v-ff866de0>const </span> <span class="word" data-v-ff866de0>p</span><span class="then" data-v-ff866de0>=</span> <span class="then" data-v-ff866de0>new </span><span class="word" data-v-ff866de0>Person</span> <span class="brackets" data-v-ff866de0>()</span></div><div data-v-ff866de0><span class="word" data-v-ff866de0>console.</span><span class="variable" data-v-ff866de0>log</span> <span class="brackets" data-v-ff866de0>(</span><span class="brackets" data-v-ff866de0>Person</span><span class="word" data-v-ff866de0>.prototype</span><span class="brackets" data-v-ff866de0>)</span></div><div data-v-ff866de0><span class="comment" data-v-ff866de0>// 得到構造函數裡面的原型對象</span></div><div data-v-ff866de0><span class="comment" data-v-ff866de0>// F12 展開這個對象看到 constructor</span></div><div data-v-ff866de0><span class="comment" data-v-ff866de0>// 只要是原型對象 裡面 默認都有 constructor 屬性</span></div><div data-v-ff866de0><span class="comment" data-v-ff866de0>// 做什麼?</span></div><div data-v-ff866de0><span class="comment" data-v-ff866de0>// 發現 指向 Person</span></div><div data-v-ff866de0><span class="comment" data-v-ff866de0>// 指向 構造函數</span></div><br data-v-ff866de0><div data-v-ff866de0><span class="word" data-v-ff866de0>console.</span><span class="variable" data-v-ff866de0>log</span> <span class="brackets" data-v-ff866de0>(</span><span class="word" data-v-ff866de0>Person.prototype.constructor</span><span class="then" data-v-ff866de0>===</span> <span class="word" data-v-ff866de0>Person</span><span class="brackets" data-v-ff866de0>)</span><span class="comment" data-v-ff866de0>//true</span></div><br data-v-ff866de0><div data-v-ff866de0><span class="function" data-v-ff866de0>function </span><span class="word" data-v-ff866de0>Person</span> <span class="brackets" data-v-ff866de0>(){</span></div><div data-v-ff866de0><span class="brackets" data-v-ff866de0>}</span></div><div data-v-ff866de0><span class="comment" data-v-ff866de0>// Person.prototype.say = function(){</span></div><div class="pTwo" data-v-ff866de0><span class="comment" data-v-ff866de0>// console.log(&quot;hi&quot;)</span></div><div data-v-ff866de0><span class="comment" data-v-ff866de0>}</span></div><div data-v-ff866de0><span class="comment" data-v-ff866de0>// Person.prototype.walk = function(){</span></div><div class="pTwo" data-v-ff866de0><span class="comment" data-v-ff866de0>// console.log(&quot;walk&quot;)</span></div><div data-v-ff866de0><span class="comment" data-v-ff866de0>}</span></div><br data-v-ff866de0><div data-v-ff866de0><span class="word" data-v-ff866de0>console.</span><span class="variable" data-v-ff866de0>log</span> <span class="brackets" data-v-ff866de0>(</span><span class="brackets" data-v-ff866de0>Person</span><span class="word" data-v-ff866de0>.prototype</span><span class="brackets" data-v-ff866de0>) </span><span class="comment" data-v-ff866de0>// 有 constructor</span></div><div data-v-ff866de0><span class="brackets" data-v-ff866de0>Person</span><span class="word" data-v-ff866de0>.prototype</span> <span class="then" data-v-ff866de0>=</span><span class="brackets" data-v-ff866de0>{</span></div><div class="padTwo VSL" data-v-ff866de0><div data-v-ff866de0><span class="word" data-v-ff866de0>sing:</span><span class="function" data-v-ff866de0>function </span><span class="brackets" data-v-ff866de0>(){</span></div><div class="padTwo VSL" data-v-ff866de0><span class="word" data-v-ff866de0>console.</span><span class="variable" data-v-ff866de0>log</span><span class="brackets" data-v-ff866de0>(</span> <span class="src" data-v-ff866de0>&quot;hi&quot;</span><span class="brackets" data-v-ff866de0>)</span></div><div data-v-ff866de0><span class="brackets" data-v-ff866de0>},</span></div><div data-v-ff866de0><span class="word" data-v-ff866de0>walk:</span><span class="function" data-v-ff866de0>function </span><span class="brackets" data-v-ff866de0>(){</span></div><div class="padTwo VSL" data-v-ff866de0><div data-v-ff866de0></div><span class="word" data-v-ff866de0>console.</span><span class="variable" data-v-ff866de0>log</span><span class="brackets" data-v-ff866de0>(</span><span class="word" data-v-ff866de0>&quot;walk&quot;</span> <span class="brackets" data-v-ff866de0>)</span></div><div data-v-ff866de0><span class="brackets" data-v-ff866de0>},</span></div></div><div data-v-ff866de0><span class="brackets" data-v-ff866de0>}</span></div><br data-v-ff866de0><div data-v-ff866de0><span class="word" data-v-ff866de0>console.</span><span class="variable" data-v-ff866de0>log</span> <span class="brackets" data-v-ff866de0>(</span><span class="brackets" data-v-ff866de0>Person</span><span class="word" data-v-ff866de0>.prototype</span><span class="brackets" data-v-ff866de0>) </span><span class="comment" data-v-ff866de0>// constructor 不見了</span></div><br data-v-ff866de0><p data-v-ff866de0>我一定要 constructor 指向父親</p><br data-v-ff866de0><div data-v-ff866de0><span class="brackets" data-v-ff866de0>Person</span><span class="word" data-v-ff866de0>.prototype</span> <span class="then" data-v-ff866de0>=</span><span class="brackets" data-v-ff866de0>{</span></div><div class="padTwo VSL" data-v-ff866de0><div data-v-ff866de0><span class="comment" data-v-ff866de0>// 重新指回創造這個原型對象的 </span></div><div data-v-ff866de0><span class="word" data-v-ff866de0>constructor:</span><span class="brackets" data-v-ff866de0>Person,</span></div><div data-v-ff866de0><span class="word" data-v-ff866de0>sing:</span><span class="function" data-v-ff866de0>function </span><span class="brackets" data-v-ff866de0>(){</span></div><div class="padTwo VSL" data-v-ff866de0><span class="word" data-v-ff866de0>console.</span><span class="variable" data-v-ff866de0>log</span><span class="brackets" data-v-ff866de0>(</span> <span class="src" data-v-ff866de0>&quot;hi&quot;</span><span class="brackets" data-v-ff866de0>)</span></div><div data-v-ff866de0><span class="brackets" data-v-ff866de0>},</span></div><div data-v-ff866de0><span class="word" data-v-ff866de0>walk:</span><span class="function" data-v-ff866de0>function </span><span class="brackets" data-v-ff866de0>(){</span></div><div class="padTwo VSL" data-v-ff866de0><div data-v-ff866de0></div><span class="word" data-v-ff866de0>console.</span><span class="variable" data-v-ff866de0>log</span><span class="brackets" data-v-ff866de0>(</span><span class="word" data-v-ff866de0>&quot;walk&quot;</span> <span class="brackets" data-v-ff866de0>)</span></div><div data-v-ff866de0><span class="brackets" data-v-ff866de0>},</span></div></div><div data-v-ff866de0><span class="brackets" data-v-ff866de0>}</span></div><br data-v-ff866de0></div><p class="fz28" data-v-ff866de0>思考</p><br data-v-ff866de0><div class="fz28" data-v-ff866de0><span class="bor pad204" data-v-ff866de0>構造函數</span> → <span class="bor pad204" data-v-ff866de0> 原型 prototype 共享屬性方法 </span></div><br data-v-ff866de0><div class="fz28" data-v-ff866de0><span class="cor17" data-v-ff866de0> . . . </span> ↓</div><br data-v-ff866de0><div class="fz28" data-v-ff866de0><span class="bor pad204" data-v-ff866de0>實例對象 new Person()</span></div><br data-v-ff866de0><br data-v-ff866de0><br data-v-ff866de0><p class="fz28" data-v-ff866de0>為什麼 實例對象 可以訪問 原型的 方法?</p><div id="threeprototype004" class="articleCardTitle cor36 fz34" data-v-ff866de0> 6.4 對象原型 </div><p class="fz28" data-v-ff866de0> 對象都會有一個屬性 __proto__ 指向 構造函數的 prototype 原型對象 </p><br data-v-ff866de0><br data-v-ff866de0><br data-v-ff866de0><div class="fz28" data-v-ff866de0><span class="bor pad204" data-v-ff866de0>構造函數</span> → <span class="bor pad204" data-v-ff866de0> 原型 prototype 共享屬性方法 </span></div><br data-v-ff866de0><div class="fz28" data-v-ff866de0><span class="cor17" data-v-ff866de0> . . . </span> ↓ <span class="cor17" data-v-ff866de0> . . . . . . . . . . . . . . . . </span> ↗ __proto__ </div><br data-v-ff866de0><div class="fz28" data-v-ff866de0><span class="bor pad204" data-v-ff866de0>實例對象 new Person()</span></div><div class="bgcVS" data-v-ff866de0><div data-v-ff866de0><span class="function" data-v-ff866de0>function </span><span class="word" data-v-ff866de0>Person</span><span class="brackets" data-v-ff866de0>(){}</span></div><div data-v-ff866de0><span class="function" data-v-ff866de0>const </span> <span class="word" data-v-ff866de0>p</span><span class="then" data-v-ff866de0>=</span> <span class="then" data-v-ff866de0>new </span><span class="word" data-v-ff866de0>Person</span> <span class="brackets" data-v-ff866de0>()</span></div><div data-v-ff866de0><span class="word" data-v-ff866de0>console.</span><span class="variable" data-v-ff866de0>log</span> <span class="brackets" data-v-ff866de0>(</span><span class="word" data-v-ff866de0>p</span> <span class="brackets" data-v-ff866de0>)</span></div><div class="comment" data-v-ff866de0>// person 物件裡面展開有一個 __proto__</div><br data-v-ff866de0><span class="comment" data-v-ff866de0>//對象原型__proto__指向 該構造函數的原型對象</span><div data-v-ff866de0><span class="word" data-v-ff866de0>console.</span><span class="variable" data-v-ff866de0>log</span> <span class="brackets" data-v-ff866de0>(</span><span class="word" data-v-ff866de0>p.__proto__</span><span class="then" data-v-ff866de0>===</span><span class="word" data-v-ff866de0>p.prototype</span><span class="brackets" data-v-ff866de0>) </span><span class="comment" data-v-ff866de0>// true</span></div><br data-v-ff866de0><div data-v-ff866de0><span class="comment" data-v-ff866de0>// 對象原型裡面有 constructor 指向 構造函數 Person</span></div><div data-v-ff866de0><span class="word" data-v-ff866de0>console.</span><span class="variable" data-v-ff866de0>log</span> <span class="brackets" data-v-ff866de0>(</span><span class="word" data-v-ff866de0>p.__proto__</span><span class="brackets" data-v-ff866de0>)</span></div><div data-v-ff866de0><span class="word" data-v-ff866de0>console.</span><span class="variable" data-v-ff866de0>log</span> <span class="brackets" data-v-ff866de0>(</span><span class="word" data-v-ff866de0>p.__proto__.constructor</span><span class="then" data-v-ff866de0>===</span> <span class="word" data-v-ff866de0>Person</span><span class="brackets" data-v-ff866de0>) </span><span class="comment" data-v-ff866de0>// true</span></div></div><p class="fz28" data-v-ff866de0>注意</p><p class="fz28" data-v-ff866de0>__proto__ 是 js 非標準屬性</p><p class="fz28" data-v-ff866de0>[[Prototype]] 和 __proto__ 意義相同</p><p class="fz28" data-v-ff866de0>用來表明當前實例對象指向哪個原型對象 prototype</p><p class="fz28" data-v-ff866de0> __proto__ 對象原型裡面也有一個 constructor 屬性, 指向創建該實例對象的構造函數 </p><br data-v-ff866de0><br data-v-ff866de0><br data-v-ff866de0><br data-v-ff866de0><br data-v-ff866de0><br data-v-ff866de0><p class="fz40" data-v-ff866de0>對象原型 指向 原型對象</p><br data-v-ff866de0><br data-v-ff866de0><br data-v-ff866de0><br data-v-ff866de0><br data-v-ff866de0><br data-v-ff866de0><div class="fz28" data-v-ff866de0><span class="bor pad204" data-v-ff866de0>. . . 構造函數</span> → ← constructor <span class="bor pad204" data-v-ff866de0> 原型 prototype 共享屬性方法 </span></div><br data-v-ff866de0><div class="fz28" data-v-ff866de0><span class="cor17" data-v-ff866de0> . . . . . . . . . </span> ↓ </div><br data-v-ff866de0><div class="fz28" data-v-ff866de0> constructor ↑ <span class="cor17" data-v-ff866de0> . . . . . . . . . . . </span> ↗ __proto__ 也是 [[Prototype]] </div><br data-v-ff866de0><div class="fz28" data-v-ff866de0><span class="bor pad204" data-v-ff866de0>實例對象 new Person()</span></div><br data-v-ff866de0><br data-v-ff866de0><br data-v-ff866de0><p class="fz28 cor36" data-v-ff866de0># 結論</p><p class="fz28 cor36" data-v-ff866de0>prototype 是什麼?</p><p class="fz28" data-v-ff866de0>原型</p><br data-v-ff866de0><p class="fz28 cor36" data-v-ff866de0>哪裡來?</p><p class="fz28" data-v-ff866de0>構造函數 都自動有</p><br data-v-ff866de0><p class="fz28 cor36" data-v-ff866de0>constructor 在哪裡?</p><p class="fz28" data-v-ff866de0>prototype 原型 和 對象原型 __proto__ 都有</p><br data-v-ff866de0><p class="fz28 cor36" data-v-ff866de0>做什麼?</p><p class="fz28" data-v-ff866de0>指向 創建 實例對象的 構造函數</p><br data-v-ff866de0><p class="fz28" data-v-ff866de0>指向 創建 原型的 構造函數</p><br data-v-ff866de0><br data-v-ff866de0><p class="fz28 cor36" data-v-ff866de0>__proto__在哪裡?</p><p class="fz28" data-v-ff866de0>實例對象裡面</p><br data-v-ff866de0><p class="fz28 cor36" data-v-ff866de0>指向誰?</p><p class="fz28" data-v-ff866de0>對象原型 指向 原型對象</p><br data-v-ff866de0><div id="threeprototype005" class="articleCardTitle cor36 fz34" data-v-ff866de0> 6.5 原型繼承 </div><div class="bgcVS" data-v-ff866de0><div data-v-ff866de0><span class="function" data-v-ff866de0>function </span><span class="word" data-v-ff866de0>Man</span> <span class="brackets" data-v-ff866de0>(){</span></div><div class="padTwo VSL" data-v-ff866de0><span class="then" data-v-ff866de0>this</span> <span class="word" data-v-ff866de0>.eyes</span><span class="then" data-v-ff866de0>=</span> <span class="number" data-v-ff866de0>2</span><div data-v-ff866de0></div></div><div data-v-ff866de0><span class="brackets" data-v-ff866de0>}</span></div><div data-v-ff866de0><span class="function" data-v-ff866de0>function </span><span class="word" data-v-ff866de0>Woman</span> <span class="brackets" data-v-ff866de0>(){</span></div><div class="padTwo VSL" data-v-ff866de0><span class="then" data-v-ff866de0>this</span> <span class="word" data-v-ff866de0>.eyes</span><span class="then" data-v-ff866de0>=</span> <span class="number" data-v-ff866de0>2</span><div data-v-ff866de0></div></div><div data-v-ff866de0><span class="brackets" data-v-ff866de0>}</span></div><div data-v-ff866de0><span class="comment" data-v-ff866de0>// 想要繼承 Person , 公共的部分放到原型上 , 就是原型繼承</span></div><br data-v-ff866de0><br data-v-ff866de0><div data-v-ff866de0><span class="function" data-v-ff866de0>const </span><span class="word" data-v-ff866de0>Person</span> <span class="then" data-v-ff866de0>=</span><span class="brackets" data-v-ff866de0>{</span></div><div class="padTwo VSL" data-v-ff866de0><span class="word" data-v-ff866de0>eyes:</span> <span class="number" data-v-ff866de0>2,</span><div data-v-ff866de0></div></div><div data-v-ff866de0><span class="brackets" data-v-ff866de0>}</span></div><div data-v-ff866de0><span class="function" data-v-ff866de0>function </span><span class="word" data-v-ff866de0>Man</span> <span class="brackets" data-v-ff866de0>(){}</span></div><br data-v-ff866de0><div class="comment" data-v-ff866de0>// Man 通過原型來繼承 Person</div><div data-v-ff866de0><span class="word" data-v-ff866de0>Man.prototype</span><span class="then" data-v-ff866de0>=</span> <span class="brackets" data-v-ff866de0>Person</span></div><br data-v-ff866de0><div data-v-ff866de0><span class="word" data-v-ff866de0>console.</span><span class="variable" data-v-ff866de0>log</span> <span class="brackets" data-v-ff866de0>(</span><span class="word" data-v-ff866de0>Man.prototype</span><span class="brackets" data-v-ff866de0>)</span><span class="comment" data-v-ff866de0>//看有沒有constructor</span></div><div class="comment" data-v-ff866de0>// 沒有 , 因為 Person 是 物件 形式</div><div class="comment" data-v-ff866de0>// 直接進行覆蓋 , 覆蓋完後指不回來了</div><br data-v-ff866de0><br data-v-ff866de0><div class="comment" data-v-ff866de0>// Man 通過原型來繼承 Person</div><div data-v-ff866de0><span class="word" data-v-ff866de0>Man.prototype</span><span class="then" data-v-ff866de0>=</span> <span class="brackets" data-v-ff866de0>Person</span></div><br data-v-ff866de0><div data-v-ff866de0><span class="number" data-v-ff866de0>!指回原來的構造函數! . . . constructor</span></div><br data-v-ff866de0><div data-v-ff866de0><span class="word" data-v-ff866de0>Man.prototype.</span><span class="function" data-v-ff866de0>constructor</span><span class="then" data-v-ff866de0>=</span> <span class="word" data-v-ff866de0>Man</span></div><div data-v-ff866de0><span class="word" data-v-ff866de0>console.</span><span class="variable" data-v-ff866de0>log</span> <span class="brackets" data-v-ff866de0>(</span><span class="word" data-v-ff866de0>Man.prototype</span><span class="brackets" data-v-ff866de0>)</span><span class="comment" data-v-ff866de0>//有constructor</span></div><br data-v-ff866de0><br data-v-ff866de0><br data-v-ff866de0><br data-v-ff866de0><div data-v-ff866de0><span class="function" data-v-ff866de0>function </span><span class="word" data-v-ff866de0>Woman</span> <span class="brackets" data-v-ff866de0>(){}</span></div><div data-v-ff866de0><span class="word" data-v-ff866de0>Woman.prototype</span><span class="then" data-v-ff866de0>=</span> <span class="brackets" data-v-ff866de0>Person</span></div><div data-v-ff866de0><span class="word" data-v-ff866de0>Woman.prototype.</span><span class="function" data-v-ff866de0>constructor</span><span class="then" data-v-ff866de0>=</span> <span class="word" data-v-ff866de0>Woman</span></div><div data-v-ff866de0><span class="function" data-v-ff866de0>const </span> <span class="word" data-v-ff866de0>p</span><span class="then" data-v-ff866de0>=</span> <span class="then" data-v-ff866de0>new </span><span class="word" data-v-ff866de0>Woman</span> <span class="brackets" data-v-ff866de0>()</span></div><div data-v-ff866de0><span class="word" data-v-ff866de0>console.</span><span class="variable" data-v-ff866de0>log</span> <span class="brackets" data-v-ff866de0>(</span><span class="word" data-v-ff866de0>p</span> <span class="brackets" data-v-ff866de0>)</span><span class="comment" data-v-ff866de0>//看到constructor指回Person</span></div><br data-v-ff866de0><br data-v-ff866de0><br data-v-ff866de0><br data-v-ff866de0><p data-v-ff866de0># 我除了繼承 父 的屬性 還想添加方法</p><br data-v-ff866de0><div data-v-ff866de0><span class="word" data-v-ff866de0>Woman.prototype.</span><span class="variable" data-v-ff866de0>baby</span> <span class="then" data-v-ff866de0>=</span><span class="function" data-v-ff866de0>function </span><span class="brackets" data-v-ff866de0>(){</span></div><div class="padTwo VSL" data-v-ff866de0><span class="word" data-v-ff866de0>console.</span><span class="variable" data-v-ff866de0>log</span> <span class="brackets" data-v-ff866de0>(</span><span class="word" data-v-ff866de0>&quot;baby&quot;</span> <span class="brackets" data-v-ff866de0>)</span><div data-v-ff866de0></div></div><div data-v-ff866de0><span class="brackets" data-v-ff866de0>}</span></div><br data-v-ff866de0><div data-v-ff866de0><span class="function" data-v-ff866de0>const </span><span class="word" data-v-ff866de0>red</span> <span class="then" data-v-ff866de0>=</span><span class="then" data-v-ff866de0>new </span><span class="brackets" data-v-ff866de0>Woman</span><span class="brackets" data-v-ff866de0>()</span></div><div data-v-ff866de0><span class="word" data-v-ff866de0>console.</span><span class="variable" data-v-ff866de0>log</span> <span class="brackets" data-v-ff866de0>(</span><span class="word" data-v-ff866de0>red</span> <span class="brackets" data-v-ff866de0>)</span><span class="comment" data-v-ff866de0>//看[[Prototype]]看到有baby方法</span></div><br data-v-ff866de0><div data-v-ff866de0><span class="comment" data-v-ff866de0>// 我想 Man 沒有添加 baby 方法</span></div><div data-v-ff866de0><span class="function" data-v-ff866de0>const </span><span class="word" data-v-ff866de0>wayne</span> <span class="then" data-v-ff866de0>=</span><span class="then" data-v-ff866de0>new </span> <span class="brackets" data-v-ff866de0>Man</span><span class="brackets" data-v-ff866de0>()</span></div><div data-v-ff866de0><span class="word" data-v-ff866de0>console.</span><span class="variable" data-v-ff866de0>log</span> <span class="brackets" data-v-ff866de0>(</span><span class="word" data-v-ff866de0>wayne</span> <span class="brackets" data-v-ff866de0>)</span></div><div data-v-ff866de0><span class="comment" data-v-ff866de0>// 看 [[Prototype]] 也有 baby 方法</span></div><br data-v-ff866de0><p data-v-ff866de0># 為什麼?</p><p data-v-ff866de0>因為他們 2 個的 原型 都是 繼承 Person</p><br data-v-ff866de0><br data-v-ff866de0><div class="dis" data-v-ff866de0><div data-v-ff866de0><br data-v-ff866de0><div data-v-ff866de0><span class="word" data-v-ff866de0>Woman.prototype</span><span class="then" data-v-ff866de0>=</span><span class="brackets" data-v-ff866de0>Person</span></div><br data-v-ff866de0><div data-v-ff866de0><span class="word" data-v-ff866de0>Man.prototype</span><span class="then" data-v-ff866de0>=</span><span class="brackets" data-v-ff866de0>Person</span></div></div><div class="padL20" data-v-ff866de0> 棧 <div data-v-ff866de0>→0x1111→</div><br data-v-ff866de0><div data-v-ff866de0>→0x2222↗</div></div><div class="padL20" data-v-ff866de0> 堆 <div data-v-ff866de0><span class="function" data-v-ff866de0>const </span><span class="word" data-v-ff866de0>Person</span> <span class="then" data-v-ff866de0>=</span><span class="brackets" data-v-ff866de0>{</span></div><div class="padTwo VSL" data-v-ff866de0><span class="word" data-v-ff866de0>eyes:</span> <span class="number" data-v-ff866de0>2,</span><div data-v-ff866de0></div></div><div class="padTwo VSL" data-v-ff866de0><span class="word" data-v-ff866de0>baby:</span><span class="function" data-v-ff866de0>function </span><span class="brackets" data-v-ff866de0>(){}</span><div data-v-ff866de0></div></div><div data-v-ff866de0><span class="brackets" data-v-ff866de0>}</span></div><br data-v-ff866de0><br data-v-ff866de0><br data-v-ff866de0></div></div><p data-v-ff866de0># 我要 Woman &amp; Man 不互相影響 . . . &gt; 給他們不同的對象</p><br data-v-ff866de0><div data-v-ff866de0><span class="function" data-v-ff866de0>const </span><span class="word" data-v-ff866de0>Person1</span> <span class="then" data-v-ff866de0>=</span><span class="brackets" data-v-ff866de0>{</span></div><div class="padTwo VSL" data-v-ff866de0><span class="word" data-v-ff866de0>eyes:</span> <span class="number" data-v-ff866de0>2,</span><div data-v-ff866de0></div></div><div data-v-ff866de0><span class="brackets" data-v-ff866de0>}</span></div><div data-v-ff866de0><span class="function" data-v-ff866de0>const </span><span class="word" data-v-ff866de0>Person2</span> <span class="then" data-v-ff866de0>=</span><span class="brackets" data-v-ff866de0>{</span></div><div class="padTwo VSL" data-v-ff866de0><span class="word" data-v-ff866de0>eyes:</span> <span class="number" data-v-ff866de0>2,</span><div data-v-ff866de0></div></div><div data-v-ff866de0><span class="brackets" data-v-ff866de0>}</span></div><br data-v-ff866de0><div data-v-ff866de0><span class="word" data-v-ff866de0>Woman.prototype</span><span class="then" data-v-ff866de0>=</span><span class="brackets" data-v-ff866de0>Person1</span></div><div data-v-ff866de0><span class="word" data-v-ff866de0>Man.prototype</span><span class="then" data-v-ff866de0>=</span><span class="brackets" data-v-ff866de0>Person2</span></div><br data-v-ff866de0><br data-v-ff866de0><p data-v-ff866de0># 我要 內容一樣 但是 物件 結構不一樣 . . . &gt; 構造函數</p><p data-v-ff866de0># 構造函數 new 出來的對象 結構一樣 , 但是 對象 不一樣</p><br data-v-ff866de0><div class="comment" data-v-ff866de0>//const Person1 = { eyes:2 }</div><div class="comment" data-v-ff866de0>//const Person2 = { eyes:2 }</div><div data-v-ff866de0><span class="function" data-v-ff866de0>function </span><span class="brackets" data-v-ff866de0>Person</span><span class="brackets" data-v-ff866de0>(){</span></div><div class="padTwo VSL" data-v-ff866de0><span class="then" data-v-ff866de0>this.</span> <span class="word" data-v-ff866de0>eyes</span><span class="then" data-v-ff866de0>=</span> <span class="number" data-v-ff866de0>2</span><div data-v-ff866de0></div></div><div data-v-ff866de0><span class="brackets" data-v-ff866de0>}</span></div><div data-v-ff866de0><span class="word" data-v-ff866de0>Woman.prototype</span><span class="then" data-v-ff866de0>=</span> <span class="then" data-v-ff866de0>new </span><span class="brackets" data-v-ff866de0>Person</span><span class="brackets" data-v-ff866de0>()</span></div><div class="comment" data-v-ff866de0>// new Person 新增一個物件</div><div class="comment" data-v-ff866de0>// 這個物件就是 我們寫的 結構 eyes:2</div><div data-v-ff866de0><span class="word" data-v-ff866de0>Man.prototype</span><span class="then" data-v-ff866de0>=</span> <span class="then" data-v-ff866de0>new </span><span class="brackets" data-v-ff866de0>Person</span><span class="brackets" data-v-ff866de0>()</span></div><div class="comment" data-v-ff866de0>// new Person 又 新增一個物件</div><div class="comment" data-v-ff866de0> // 這個物件 結構一樣 內容一樣 這 2 個 物件 不一樣 </div><br data-v-ff866de0><div data-v-ff866de0><span class="word" data-v-ff866de0>Woman.prototype.</span><span class="variable" data-v-ff866de0>baby</span> <span class="then" data-v-ff866de0>=</span><span class="function" data-v-ff866de0>function </span><span class="brackets" data-v-ff866de0>(){</span></div><div class="padTwo VSL" data-v-ff866de0><span class="word" data-v-ff866de0>console.</span><span class="variable" data-v-ff866de0>log</span> <span class="brackets" data-v-ff866de0>(</span><span class="src" data-v-ff866de0>&quot;baby&quot;</span> <span class="brackets" data-v-ff866de0>)</span><div data-v-ff866de0></div></div><div data-v-ff866de0><span class="brackets" data-v-ff866de0>}</span></div><br data-v-ff866de0><p data-v-ff866de0># 以上 原型繼承</p><p data-v-ff866de0> 需求: Man Woman 不要用同一個物件, 但不同物件裡面包含相同屬性和方法 </p><p data-v-ff866de0>用: 構造函數</p><p data-v-ff866de0>new 每次都會創建一個新物件</p><br data-v-ff866de0><br data-v-ff866de0><br data-v-ff866de0><br data-v-ff866de0><p data-v-ff866de0>1. 換成 構造函數</p><p data-v-ff866de0>2. prototype 不再是物件名了, 用 new Person 的方法</p><br data-v-ff866de0><br data-v-ff866de0><br data-v-ff866de0><br data-v-ff866de0><p data-v-ff866de0>父構造函數 (父類) . . . 子構造函數 (子類)</p><p data-v-ff866de0>function Person(){} 父構造函數</p><p data-v-ff866de0>Woman 子構造函數</p><br data-v-ff866de0><p data-v-ff866de0>子類的原型 = new 父類</p><div data-v-ff866de0><span class="word" data-v-ff866de0>Woman.prototype</span><span class="then" data-v-ff866de0>=</span> <span class="then" data-v-ff866de0>new </span><span class="brackets" data-v-ff866de0>Person</span><span class="brackets" data-v-ff866de0>()</span></div><br data-v-ff866de0><br data-v-ff866de0><p data-v-ff866de0>JS 繼承很多方法</p><p data-v-ff866de0>Java 用 class 類</p><p data-v-ff866de0>後面 JS 引入 class</p></div><div id="threeprototype006" class="articleCardTitle cor36 fz34" data-v-ff866de0> 6.6 原型鏈 </div><p class="fz28" data-v-ff866de0>作用域鏈 一層一層 查找 變量在哪個作用域</p><p class="fz28" data-v-ff866de0>原型鏈 查找 原型</p><div class="bgcVS" data-v-ff866de0><div class="fz28" data-v-ff866de0><span class="cor29" data-v-ff866de0>. . . </span><span class="bor pad204" data-v-ff866de0> 構造函數</span> → ← constructor <span class="bor pad204" data-v-ff866de0> 原型 prototype 共享屬性方法 </span></div><div class="fz28" data-v-ff866de0><span class="cor29" data-v-ff866de0> . . . . . . . . . </span> ↓ </div><div class="fz28" data-v-ff866de0> constructor ↑ <span class="cor29" data-v-ff866de0> . . . . . . . . . . . </span> ↗ __proto__ 也是 [[Prototype]] </div><div class="fz28 pad20 disInl bor" data-v-ff866de0><span class="" data-v-ff866de0>實例對象 new Person()</span></div><br data-v-ff866de0><br data-v-ff866de0><br data-v-ff866de0><br data-v-ff866de0><br data-v-ff866de0><br data-v-ff866de0><div class="fz28" data-v-ff866de0><span class="cor29" data-v-ff866de0>. . . </span><span class="bor pad204" data-v-ff866de0> Person</span> → ← constructor <span class="bor pad204" data-v-ff866de0> Person.prototype </span></div><div class="fz28" data-v-ff866de0><span class="cor29" data-v-ff866de0> . . . . . . . . . </span> ↓ </div><div class="fz28" data-v-ff866de0> constructor ↑ <span class="cor29" data-v-ff866de0> . . . . . . . . . . . </span> ↗ __proto__ </div><div class="fz28" data-v-ff866de0><div class="disInl bor pad20" data-v-ff866de0><span data-v-ff866de0>實例對象 new Person()</span><br data-v-ff866de0><span data-v-ff866de0>p</span><br data-v-ff866de0><span data-v-ff866de0>p.__proto__</span></div></div><br data-v-ff866de0><div data-v-ff866de0><span class="word" data-v-ff866de0>console.</span><span class="variable" data-v-ff866de0>log</span> <span class="brackets" data-v-ff866de0>(</span><span class="word" data-v-ff866de0>p.__proto__</span><span class="then" data-v-ff866de0>===</span><span class="word" data-v-ff866de0>Person.prototype</span><span class="brackets" data-v-ff866de0>)</span><span class="comment" data-v-ff866de0>//true</span></div><div data-v-ff866de0><span class="word" data-v-ff866de0>console.</span><span class="variable" data-v-ff866de0>log</span> <span class="brackets" data-v-ff866de0>(</span><span class="word" data-v-ff866de0>Person.prototype</span><span class="brackets" data-v-ff866de0>) </span><span class="comment" data-v-ff866de0>// 發現裡面也有[[Prototype]]</span></div><div data-v-ff866de0><span class="comment" data-v-ff866de0>//原型對象也是對象, 只要是對象 都有 __proto__</span></div><div data-v-ff866de0><span class="comment" data-v-ff866de0>// 他指向誰?</span></div><div data-v-ff866de0><span class="comment" data-v-ff866de0>// 指向 object</span></div><div data-v-ff866de0><span class="word" data-v-ff866de0>console.</span><span class="variable" data-v-ff866de0>log</span> <span class="brackets" data-v-ff866de0>(</span><span class="word" data-v-ff866de0>Person.prototype.__proto__</span><span class="brackets" data-v-ff866de0>)</span></div><div data-v-ff866de0><span class="comment" data-v-ff866de0>// 這個 __proto__ 指向誰?</span></div><div data-v-ff866de0><span class="comment" data-v-ff866de0>// 對象原型 指向 原型對象</span></div><br data-v-ff866de0><div data-v-ff866de0><span class="comment" data-v-ff866de0>// 而 Person.prototype 屬於原型對象</span></div><div data-v-ff866de0><span class="comment" data-v-ff866de0>// 原型對象裡面有一個對象原型</span></div><div data-v-ff866de0><span class="comment" data-v-ff866de0>// 這個 對象原型 指向 原型對象</span></div><br data-v-ff866de0><div data-v-ff866de0><span class="comment" data-v-ff866de0>// 那他 指向 誰的 原型對象?</span></div><br data-v-ff866de0><br data-v-ff866de0><p data-v-ff866de0>構造函數 Object</p><div data-v-ff866de0><span class="function" data-v-ff866de0>function </span><span class="brackets" data-v-ff866de0>Object</span><span class="brackets" data-v-ff866de0>(){}</span></div><p data-v-ff866de0>構造函數 就有 原型對象</p><br data-v-ff866de0><div data-v-ff866de0><span class="word" data-v-ff866de0>console.</span><span class="variable" data-v-ff866de0>log</span> <span class="brackets" data-v-ff866de0>(</span><span class="word" data-v-ff866de0>object</span> <span class="brackets" data-v-ff866de0>)</span><span class="comment" data-v-ff866de0>//是Object(){[native code]}</span></div><div data-v-ff866de0><span class="word" data-v-ff866de0>console.</span><span class="variable" data-v-ff866de0>log</span> <span class="brackets" data-v-ff866de0>(</span><span class="word" data-v-ff866de0>object.prototype</span><span class="brackets" data-v-ff866de0>)</span><span class="comment" data-v-ff866de0>//</span></div><br data-v-ff866de0><p data-v-ff866de0>原型鏈</p><div class="fz28" data-v-ff866de0><span class="cor29" data-v-ff866de0> . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . </span><div class="disInl bor pad20" data-v-ff866de0><span data-v-ff866de0>null</span></div></div><div class="fz28" data-v-ff866de0><span class="cor29" data-v-ff866de0> . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .</span> ↗ __proto__ </div><br data-v-ff866de0><div class="fz28" data-v-ff866de0><span class="cor29" data-v-ff866de0>. . . . . . . . . . . </span><span class="bor pad204" data-v-ff866de0> Object</span> → ← Object.constructor <div class="disInl bor pad20" data-v-ff866de0><span data-v-ff866de0>Object.prototype</span><br data-v-ff866de0><span data-v-ff866de0>Object.prototype.__proto__</span></div></div><br data-v-ff866de0><div class="fz28" data-v-ff866de0><span class="cor29" data-v-ff866de0> . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .</span> ↗ __proto__ </div><br data-v-ff866de0><div class="fz28" data-v-ff866de0><span class="cor29" data-v-ff866de0>. . . </span><span class="bor pad204" data-v-ff866de0> Person</span> → ← constructor <div class="disInl bor pad20" data-v-ff866de0><span data-v-ff866de0> Person.prototype </span><br data-v-ff866de0><span data-v-ff866de0>Person.prototype.__proto__</span></div></div><div class="fz28" data-v-ff866de0><span class="cor29" data-v-ff866de0> . . . . . . . . . </span> ↓ </div><div class="fz28" data-v-ff866de0> constructor ↑ <span class="cor29" data-v-ff866de0> . . . . . . . . . . . </span> ↗ __proto__ </div><div class="fz28" data-v-ff866de0><div class="disInl bor pad20" data-v-ff866de0><span data-v-ff866de0>實例對象 new Person()</span><br data-v-ff866de0><span data-v-ff866de0>p</span><br data-v-ff866de0><span data-v-ff866de0>p.__proto__</span></div></div><br data-v-ff866de0><div data-v-ff866de0><span class="word" data-v-ff866de0>console.</span><span class="variable" data-v-ff866de0>log</span> <span class="brackets" data-v-ff866de0>(</span><span class="word" data-v-ff866de0>Person.prototype.__proto__</span><span class="then" data-v-ff866de0>===</span><span class="brackets" data-v-ff866de0>Object</span><span class="word" data-v-ff866de0>.prototype</span><span class="brackets" data-v-ff866de0>) </span><span class="comment" data-v-ff866de0>// true</span></div><div data-v-ff866de0><span class="word" data-v-ff866de0>console.</span><span class="variable" data-v-ff866de0>log</span> <span class="brackets" data-v-ff866de0>(</span><span class="brackets" data-v-ff866de0>Object</span><span class="word" data-v-ff866de0>.prototype.__proto__</span><span class="brackets" data-v-ff866de0>) </span><span class="comment" data-v-ff866de0>// null</span></div></div><p class="fz28 cor36" data-v-ff866de0>原型鏈</p><p class="fz28" data-v-ff866de0> 基於 原型對象 的 繼承 使得不同 構造函數的 原型對象 關聯在一起, 並且這種關聯的關係是一種 鏈狀的結構 </p><p class="fz28" data-v-ff866de0>1. 只要是 物件 就有 __proto__</p><p class="fz28" data-v-ff866de0> 2. 只要是 原型對象 裡面就有 constructor 指向 創造我的 構造函數 </p><br data-v-ff866de0><br data-v-ff866de0><p class="fz28 cor36" data-v-ff866de0>原型鏈 查找規則</p><p class="fz28" data-v-ff866de0> 1. 當訪問一個物件的屬性&amp;方法 , 先找 物件自身 有沒有 該屬性 </p><p class="fz28" data-v-ff866de0> 2. 沒有 . . &gt; 找 它的 原型 ( __proto__ 指向的 prototype 原型對象 ) </p><p class="fz28" data-v-ff866de0> 3. 沒有 . . &gt; 找 原型對象的原型 ( Object 的原型對象 ) </p><p class="fz28" data-v-ff866de0>4. 依此類推 一直找到 Object 為止 ( null )</p><br data-v-ff866de0><br data-v-ff866de0><p class="fz28" data-v-ff866de0> : 首先任何物件都會有屬於它的隱藏屬性下滑線proto屬性, 這個隱藏屬性就會指向它的構造函數的prototype, 這時我們就可以說這個物件的原型就是它的構造函數的prototype, 這就是原型, 然後原型鏈就是比如A的原型是B, B的原型是C, 這樣一條像鏈式的就稱為原型鏈 </p><br data-v-ff866de0><p class="fz28" data-v-ff866de0> :定義一個物件A,它的原型的地址對應著object.prototype,object.prototype它的原型又會到了null 這樣一條像鏈式的就稱為原型鏈 </p><br data-v-ff866de0><p class="fz28 cor36" data-v-ff866de0>instanceof</p><p class="fz28" data-v-ff866de0> 可用 instanceof 檢測構造函數的 prototype 屬性是否出現在某個實例對象的原型鏈上 </p><p class="fz28" data-v-ff866de0>他 屬不屬於 另外一個 構造函數</p><div class="bgcVS" data-v-ff866de0><div data-v-ff866de0><span class="function" data-v-ff866de0>function </span><span class="word" data-v-ff866de0>Person</span><span class="brackets" data-v-ff866de0>(){}</span></div><div data-v-ff866de0><span class="function" data-v-ff866de0>const </span> <span class="word" data-v-ff866de0>p</span><span class="then" data-v-ff866de0>=</span> <span class="then" data-v-ff866de0>new </span><span class="word" data-v-ff866de0>Person</span> <span class="brackets" data-v-ff866de0>()</span></div><div data-v-ff866de0><span class="word" data-v-ff866de0>console.</span><span class="variable" data-v-ff866de0>log</span> <span class="brackets" data-v-ff866de0>(</span><span class="word" data-v-ff866de0>p</span> <span class="word" data-v-ff866de0>instanceof </span><span class="brackets" data-v-ff866de0>Person</span><span class="brackets" data-v-ff866de0>) </span><span class="comment" data-v-ff866de0>// true</span></div><div data-v-ff866de0><span class="word" data-v-ff866de0>console.</span><span class="variable" data-v-ff866de0>log</span> <span class="brackets" data-v-ff866de0>(</span><span class="word" data-v-ff866de0>p</span> <span class="word" data-v-ff866de0>instanceof </span><span class="brackets" data-v-ff866de0>Object</span><span class="brackets" data-v-ff866de0>) </span><span class="comment" data-v-ff866de0>// true</span></div><div data-v-ff866de0><span class="word" data-v-ff866de0>console.</span><span class="variable" data-v-ff866de0>log</span> <span class="brackets" data-v-ff866de0>(</span><span class="word" data-v-ff866de0>p </span> <span class="word" data-v-ff866de0>instanceof </span><span class="brackets" data-v-ff866de0>Array</span><span class="brackets" data-v-ff866de0>) </span><span class="comment" data-v-ff866de0>// false</span></div><div data-v-ff866de0><span class="word" data-v-ff866de0>console.</span><span class="variable" data-v-ff866de0>log</span> <span class="brackets" data-v-ff866de0>(</span><span class="brackets" data-v-ff866de0>Array </span><span class="word" data-v-ff866de0>instanceof </span><span class="brackets" data-v-ff866de0>Object</span><span class="brackets" data-v-ff866de0>)</span><span class="comment" data-v-ff866de0>//true</span></div><br data-v-ff866de0><p data-v-ff866de0>萬物皆物件</p></div><div id="threeprototype007" class="articleCardTitle cor36 fz34" data-v-ff866de0> 6.7 class </div><div class="bgcVS" data-v-ff866de0><p data-v-ff866de0>過去, 函數有兩種調用方法</p><br data-v-ff866de0><div data-v-ff866de0><span class="function" data-v-ff866de0>function </span><span class="word" data-v-ff866de0>A</span> <span class="brackets" data-v-ff866de0>(){}</span></div><div data-v-ff866de0><span class="word" data-v-ff866de0>A</span> <span class="brackets" data-v-ff866de0>()</span><span class="comment" data-v-ff866de0>//直接調用</span></div><div data-v-ff866de0><span class="then" data-v-ff866de0>new </span> <span class="word" data-v-ff866de0>A</span><span class="brackets" data-v-ff866de0>()</span><span class="comment" data-v-ff866de0>//做為構造函數調用</span></div><br data-v-ff866de0><p data-v-ff866de0>這種做法無法從定義上明確函數用途 , ES6 構造函數</p><br data-v-ff866de0><div data-v-ff866de0><span class="comment" data-v-ff866de0>//舊的寫法</span></div><div data-v-ff866de0><span class="function" data-v-ff866de0>function </span><span class="word" data-v-ff866de0>User</span> <span class="brackets" data-v-ff866de0>(</span><span class="word" data-v-ff866de0>firstName,lastName</span><span class="brackets" data-v-ff866de0>){</span></div><div class="padTwo VSL" data-v-ff866de0><span class="then" data-v-ff866de0>this</span><span class="word" data-v-ff866de0>.firstName</span> <span class="then" data-v-ff866de0>=</span><span class="word" data-v-ff866de0>firstName;</span><div data-v-ff866de0><span class="then" data-v-ff866de0>this</span><span class="word" data-v-ff866de0>.lastName</span> <span class="then" data-v-ff866de0>=</span><span class="word" data-v-ff866de0>lastName;</span></div><div data-v-ff866de0><span class="then" data-v-ff866de0>this</span><span class="word" data-v-ff866de0>.fullName</span> <span class="then" data-v-ff866de0>=</span><span class="src" data-v-ff866de0>`${</span><span class="word" data-v-ff866de0>firstName</span><span class="src" data-v-ff866de0>} ${</span><span class="word" data-v-ff866de0>lastName</span> <span class="src" data-v-ff866de0>}`</span></div><div data-v-ff866de0></div></div><div data-v-ff866de0><span class="brackets" data-v-ff866de0>}</span></div><div data-v-ff866de0><span class="comment" data-v-ff866de0>//靜態方法</span></div><div data-v-ff866de0><span class="word" data-v-ff866de0>User.isUser</span> <span class="then" data-v-ff866de0>=</span><span class="function" data-v-ff866de0>function </span><span class="brackets" data-v-ff866de0>(</span> <span class="word" data-v-ff866de0>u</span><span class="brackets" data-v-ff866de0>){</span></div><div class="padTwo VSL" data-v-ff866de0><span class="then" data-v-ff866de0>return !! </span> <span class="word" data-v-ff866de0>u </span><span class="then" data-v-ff866de0>&amp;&amp; !! </span><span class="word" data-v-ff866de0>u.fullName</span><div data-v-ff866de0></div></div><div data-v-ff866de0><span class="brackets" data-v-ff866de0>}</span></div><div data-v-ff866de0><span class="comment" data-v-ff866de0>//調用靜態方法</span></div><div data-v-ff866de0><span class="word" data-v-ff866de0>User.isUser</span><span class="brackets" data-v-ff866de0>(</span> <span class="word" data-v-ff866de0>xxx</span><span class="brackets" data-v-ff866de0>)</span></div><div data-v-ff866de0><span class="comment" data-v-ff866de0>//原型方法 (也叫 實例方法)</span></div><div data-v-ff866de0><span class="word" data-v-ff866de0>User.prototype.sayHi</span><span class="then" data-v-ff866de0>=</span><span class="function" data-v-ff866de0>function </span><span class="brackets" data-v-ff866de0>(){</span></div><div class="padTwo VSL" data-v-ff866de0><span class="word" data-v-ff866de0>console</span><span class="variable" data-v-ff866de0>.log</span><span class="brackets" data-v-ff866de0>(</span> <span class="src" data-v-ff866de0>`Hi, </span><span class="then" data-v-ff866de0>${</span> <span class="then" data-v-ff866de0>this</span><span class="word" data-v-ff866de0>.fullName</span> <span class="src" data-v-ff866de0>}`</span><span class="word" data-v-ff866de0></span> <span class="brackets" data-v-ff866de0>)</span><div data-v-ff866de0></div></div><div data-v-ff866de0><span class="brackets" data-v-ff866de0>}</span></div><div data-v-ff866de0><span class="comment" data-v-ff866de0>//調用原型方法 (實例方法)</span></div><div data-v-ff866de0><span class="function" data-v-ff866de0>const </span> <span class="word" data-v-ff866de0>u</span><span class="then" data-v-ff866de0>=</span> <span class="then" data-v-ff866de0>new </span><span class="word" data-v-ff866de0>User</span> <span class="brackets" data-v-ff866de0>()</span></div><div data-v-ff866de0><span class="word" data-v-ff866de0>u.sayHi</span> <span class="brackets" data-v-ff866de0>()</span></div><br data-v-ff866de0><br data-v-ff866de0><p data-v-ff866de0>es6 之後建議寫法 class 效果一樣</p><br data-v-ff866de0><div data-v-ff866de0><span class="function" data-v-ff866de0>class </span><span class="word" data-v-ff866de0>User</span> <span class="brackets" data-v-ff866de0>{</span></div><div class="padTwo VSL" data-v-ff866de0><div data-v-ff866de0><span class="comment" data-v-ff866de0>//constructor表示他的構造器</span></div><span class="function" data-v-ff866de0>constructor</span><span class="brackets" data-v-ff866de0>(</span><span class="word" data-v-ff866de0>firstName,lastName</span><span class="brackets" data-v-ff866de0>){</span><div data-v-ff866de0></div><div class="padTwo VSL" data-v-ff866de0><span class="then" data-v-ff866de0>this</span><span class="word" data-v-ff866de0>.firstName</span><span class="then" data-v-ff866de0>=</span> <span class="word" data-v-ff866de0>firstName;</span><div data-v-ff866de0><span class="then" data-v-ff866de0>this</span><span class="word" data-v-ff866de0>.lastName</span><span class="then" data-v-ff866de0>=</span><span class="word" data-v-ff866de0>lastName;</span></div><div data-v-ff866de0><span class="then" data-v-ff866de0>this</span><span class="word" data-v-ff866de0>.fullName</span><span class="then" data-v-ff866de0>=</span> <span class="src" data-v-ff866de0>`${ </span><span class="word" data-v-ff866de0>firstName </span><span class="src" data-v-ff866de0>} ${</span><span class="word" data-v-ff866de0>lastName </span><span class="src" data-v-ff866de0>}`;</span></div><div data-v-ff866de0></div></div><div data-v-ff866de0><span class="brackets" data-v-ff866de0>}</span></div><div data-v-ff866de0><span class="comment" data-v-ff866de0>//通過關鍵字static表示靜態方法</span></div><div data-v-ff866de0><span class="word" data-v-ff866de0>static</span><span class="word" data-v-ff866de0>isUser</span><span class="brackets" data-v-ff866de0>(</span> <span class="word" data-v-ff866de0>u</span><span class="brackets" data-v-ff866de0>){</span></div><div class="padTwo VSL" data-v-ff866de0><span class="then" data-v-ff866de0>return !!</span><span class="word" data-v-ff866de0>u </span> <span class="then" data-v-ff866de0>&amp;&amp; !!</span><span class="word" data-v-ff866de0>u.fullName</span><div data-v-ff866de0></div></div><div data-v-ff866de0><span class="brackets" data-v-ff866de0>}</span></div><div data-v-ff866de0><span class="word" data-v-ff866de0>sayHi</span><span class="brackets" data-v-ff866de0>(){</span></div><div class="padTwo VSL" data-v-ff866de0><span class="word" data-v-ff866de0>console</span><span class="variable" data-v-ff866de0>.log</span><span class="brackets" data-v-ff866de0>(</span> <span class="src" data-v-ff866de0>`Hi, </span><span class="then" data-v-ff866de0>${</span> <span class="then" data-v-ff866de0>this</span><span class="word" data-v-ff866de0>.fullName</span> <span class="src" data-v-ff866de0>}`</span><span class="word" data-v-ff866de0></span> <span class="brackets" data-v-ff866de0>)</span><div data-v-ff866de0></div></div><div data-v-ff866de0><span class="brackets" data-v-ff866de0>}</span></div></div><div data-v-ff866de0><span class="brackets" data-v-ff866de0>}</span></div><br data-v-ff866de0><br data-v-ff866de0><p data-v-ff866de0>範例2 繼承</p><br data-v-ff866de0><div data-v-ff866de0><span class="function" data-v-ff866de0>function </span><span class="word" data-v-ff866de0>Animal</span> <span class="brackets" data-v-ff866de0>(</span><span class="word" data-v-ff866de0>type,name</span><span class="brackets" data-v-ff866de0>){</span></div><div class="padTwo VSL" data-v-ff866de0><span class="then" data-v-ff866de0>this</span> <span class="word" data-v-ff866de0>.type</span><span class="then" data-v-ff866de0>=</span> <span class="word" data-v-ff866de0>type;</span><div data-v-ff866de0><span class="then" data-v-ff866de0>this</span> <span class="word" data-v-ff866de0>.name</span><span class="then" data-v-ff866de0>=</span> <span class="word" data-v-ff866de0>name;</span></div><div data-v-ff866de0></div></div><div data-v-ff866de0><span class="brackets" data-v-ff866de0>}</span></div><br data-v-ff866de0><div data-v-ff866de0><span class="word" data-v-ff866de0>Animal.prototype.intro</span><span class="then" data-v-ff866de0>=</span><span class="function" data-v-ff866de0>function </span><span class="brackets" data-v-ff866de0>(){</span></div><div class="padTwo VSL" data-v-ff866de0><span class="word" data-v-ff866de0>console</span><span class="variable" data-v-ff866de0>.log</span><span class="brackets" data-v-ff866de0>(</span> <span class="src" data-v-ff866de0>`I am ${</span><span class="then" data-v-ff866de0>this</span> <span class="word" data-v-ff866de0>.type</span><span class="src" data-v-ff866de0>},name: ${</span><span class="then" data-v-ff866de0>this</span> <span class="word" data-v-ff866de0>.name</span><span class="src" data-v-ff866de0>)`</span> <span class="brackets" data-v-ff866de0>)</span><div data-v-ff866de0></div></div><div data-v-ff866de0><span class="brackets" data-v-ff866de0>}</span></div><br data-v-ff866de0><div data-v-ff866de0><span class="function" data-v-ff866de0>function </span><span class="word" data-v-ff866de0>Human</span> <span class="brackets" data-v-ff866de0>(</span><span class="word" data-v-ff866de0>name</span> <span class="brackets" data-v-ff866de0>){</span></div><div class="padTwo VSL" data-v-ff866de0><span class="word" data-v-ff866de0>Animal</span><span class="variable" data-v-ff866de0>.call</span><span class="brackets" data-v-ff866de0>(</span> <span class="then" data-v-ff866de0>this</span><span class="then" data-v-ff866de0>,</span> <span class="word" data-v-ff866de0>&quot;人&quot;,</span><span class="word" data-v-ff866de0>name</span> <span class="brackets" data-v-ff866de0>);</span><div data-v-ff866de0></div></div><div data-v-ff866de0><span class="brackets" data-v-ff866de0>}</span></div><br data-v-ff866de0><div data-v-ff866de0><span class="comment" data-v-ff866de0>//設置繼承關係</span></div><div data-v-ff866de0><span class="word" data-v-ff866de0>Human.prototype</span><span class="then" data-v-ff866de0>=</span> <span class="brackets" data-v-ff866de0>Object</span><span class="word" data-v-ff866de0>.create</span> <span class="brackets" data-v-ff866de0>(</span><span class="word" data-v-ff866de0>Animal.prototype</span><span class="brackets" data-v-ff866de0>);</span></div><br data-v-ff866de0><div data-v-ff866de0><span class="comment" data-v-ff866de0>//新的方式 //繼承 子構造函數 &amp; 父構造函數</span></div><div data-v-ff866de0><span class="function" data-v-ff866de0>class </span><span class="word" data-v-ff866de0>Animal</span> <span class="brackets" data-v-ff866de0>{ </span><span class="comment" data-v-ff866de0>//父類</span></div><div class="padTwo VSL" data-v-ff866de0><span class="function" data-v-ff866de0>constructor</span><span class="brackets" data-v-ff866de0>(</span><span class="word" data-v-ff866de0>type,name</span><span class="brackets" data-v-ff866de0>){</span><div data-v-ff866de0></div><div class="padTwo VSL" data-v-ff866de0><span class="then" data-v-ff866de0>this</span> <span class="word" data-v-ff866de0>.type</span><span class="then" data-v-ff866de0>=</span> <span class="word" data-v-ff866de0>type;</span><div data-v-ff866de0><span class="then" data-v-ff866de0>this</span><span class="word" data-v-ff866de0>.name</span> <span class="then" data-v-ff866de0>=</span><span class="word" data-v-ff866de0>name;</span></div><div data-v-ff866de0></div></div><div data-v-ff866de0><span class="brackets" data-v-ff866de0>}</span></div><br data-v-ff866de0><div data-v-ff866de0><span class="word" data-v-ff866de0>intro</span><span class="brackets" data-v-ff866de0>(){</span></div><div class="padTwo VSL" data-v-ff866de0><span class="word" data-v-ff866de0>console</span><span class="variable" data-v-ff866de0>.log</span><span class="brackets" data-v-ff866de0>(</span><span class="src" data-v-ff866de0>`I am ${</span><span class="then" data-v-ff866de0>this</span> <span class="word" data-v-ff866de0>.type</span><span class="src" data-v-ff866de0>},name: ${</span><span class="then" data-v-ff866de0>this</span> <span class="word" data-v-ff866de0>.name</span><span class="src" data-v-ff866de0>)`</span> <span class="brackets" data-v-ff866de0>)</span><div data-v-ff866de0></div></div><div data-v-ff866de0><span class="brackets" data-v-ff866de0>}</span></div></div><div data-v-ff866de0><span class="brackets" data-v-ff866de0>}</span></div><br data-v-ff866de0><div data-v-ff866de0><span class="function" data-v-ff866de0>class </span><span class="word" data-v-ff866de0>Human </span><span class="function" data-v-ff866de0>extends </span><span class="word" data-v-ff866de0>Animal</span> <span class="brackets" data-v-ff866de0>{ </span><span class="comment" data-v-ff866de0>//extends 子類 去繼承 父類</span></div><div class="padTwo VSL" data-v-ff866de0><span class="function" data-v-ff866de0>constructor</span><span class="brackets" data-v-ff866de0>(</span> <span class="word" data-v-ff866de0>name</span><span class="brackets" data-v-ff866de0>){</span><div data-v-ff866de0></div><div class="padTwo VSL" data-v-ff866de0><span class="function" data-v-ff866de0>super </span><span class="brackets" data-v-ff866de0>(</span> <span class="src" data-v-ff866de0>&quot;人&quot;</span><span class="then" data-v-ff866de0>,</span> <span class="word" data-v-ff866de0>name</span><span class="brackets" data-v-ff866de0>);</span><div data-v-ff866de0></div></div><div data-v-ff866de0><span class="brackets" data-v-ff866de0>}</span></div></div><div data-v-ff866de0><span class="brackets" data-v-ff866de0>}</span></div></div><p class="fz28" data-v-ff866de0></p><p class="fz28" data-v-ff866de0></p><p class="fz28" data-v-ff866de0></p><p class="fz28" data-v-ff866de0></p><p class="fz28" data-v-ff866de0></p><p class="fz28" data-v-ff866de0></p><p class="fz28" data-v-ff866de0></p><p class="fz28" data-v-ff866de0></p><p class="fz28" data-v-ff866de0></p><p class="fz28" data-v-ff866de0></p><p class="fz28" data-v-ff866de0></p><p class="fz28" data-v-ff866de0></p><p class="fz28" data-v-ff866de0></p><p class="fz28" data-v-ff866de0></p><p class="fz28" data-v-ff866de0></p><p class="fz28" data-v-ff866de0></p><p class="fz28" data-v-ff866de0></p><p class="fz28" data-v-ff866de0></p><p class="fz28" data-v-ff866de0></p><p class="fz28" data-v-ff866de0></p><p class="fz28" data-v-ff866de0></p><p class="fz28" data-v-ff866de0></p><p class="fz28" data-v-ff866de0></p><p class="fz28" data-v-ff866de0></p><p class="fz28" data-v-ff866de0></p><p class="fz28" data-v-ff866de0></p><p class="fz28" data-v-ff866de0></p><p class="fz28" data-v-ff866de0></p><p class="fz28" data-v-ff866de0></p><p class="fz28" data-v-ff866de0></p><p class="fz28" data-v-ff866de0></p><p class="fz28" data-v-ff866de0></p><p class="fz28" data-v-ff866de0></p><p class="fz28" data-v-ff866de0></p><p class="fz28" data-v-ff866de0></p><p class="fz28" data-v-ff866de0></p><p class="fz28" data-v-ff866de0></p><p class="fz28" data-v-ff866de0></p><p class="fz28" data-v-ff866de0></p><p class="fz28" data-v-ff866de0></p><p class="fz28" data-v-ff866de0></p><p class="fz28" data-v-ff866de0></p><p class="fz28" data-v-ff866de0></p><p class="fz28" data-v-ff866de0></p><p class="fz28" data-v-ff866de0></p><p class="fz28" data-v-ff866de0></p><p class="fz28" data-v-ff866de0></p><p class="fz28" data-v-ff866de0></p><p class="fz28" data-v-ff866de0></p><p class="fz28" data-v-ff866de0></p><p class="fz28" data-v-ff866de0></p><p class="fz28" data-v-ff866de0></p><p class="fz28" data-v-ff866de0></p><p class="fz28" data-v-ff866de0></p><p class="fz28" data-v-ff866de0></p><p class="fz28" data-v-ff866de0></p><p class="fz28" data-v-ff866de0></p><p class="fz28" data-v-ff866de0></p><p class="fz28" data-v-ff866de0></p><p class="fz28" data-v-ff866de0></p><p class="fz28" data-v-ff866de0></p><p class="fz28" data-v-ff866de0></p><p class="fz28" data-v-ff866de0></p><p class="fz28" data-v-ff866de0></p><p class="fz28" data-v-ff866de0></p><p class="fz28" data-v-ff866de0></p><p class="fz28" data-v-ff866de0></p><p class="fz28" data-v-ff866de0></p><p class="fz28" data-v-ff866de0></p><p class="fz28" data-v-ff866de0></p><p class="fz28" data-v-ff866de0></p><p class="fz28" data-v-ff866de0></p><p class="fz28" data-v-ff866de0></p><p class="fz28" data-v-ff866de0></p><p class="fz28" data-v-ff866de0></p><p class="fz28" data-v-ff866de0></p><p class="fz28" data-v-ff866de0></p><p class="fz28" data-v-ff866de0></p><p class="fz28" data-v-ff866de0></p><p class="fz28" data-v-ff866de0></p><p class="fz28" data-v-ff866de0></p><p class="fz28" data-v-ff866de0></p><p class="fz28" data-v-ff866de0></p><p class="fz28" data-v-ff866de0></p><p class="fz28" data-v-ff866de0></p><p class="fz28" data-v-ff866de0></p></div></div></div>',1),bf=zv(()=>v("div",{class:"toTopButton"},[v("div",{class:"disCen"},"___"),v("div",{class:"disCen"},"▲")],-1)),uf=[bf],wf=zv(()=>v("div",{class:"toBotButton"},[v("div",{class:"disCen"},"▼"),v("div",{class:"disCen"},"￣")],-1)),mf=[wf],hf={__name:"JsPageThreeSix",setup(a){const s=ua(!1);window.addEventListener("scroll",function(){s.value=window.scrollY>0});function d(){window.scrollTo({top:0,left:0,behavior:"smooth"})}function n(){window.scrollTo({top:999999,left:0,behavior:"smooth"})}function t(c){window.scrollTo({top:document.getElementById(`${c}`).offsetTop,behavior:"smooth"})}return(c,e)=>(da(),ca(Q,null,[v("section",null,[v("div",lf,[v("div",rf,[v("div",of,[v("div",{onClick:e[0]||(e[0]=l=>t("threeprototype001")),class:"leftNavText"}," 物件導向 "),v("div",{onClick:e[1]||(e[1]=l=>t("threeprototype002")),class:"leftNavText"}," 構造函數 "),v("div",{onClick:e[2]||(e[2]=l=>t("threeprototype003")),class:"leftNavText"}," constructor "),v("div",{onClick:e[3]||(e[3]=l=>t("threeprototype004")),class:"leftNavText"}," 對象原型 "),v("div",{onClick:e[4]||(e[4]=l=>t("threeprototype005")),class:"leftNavText"}," 原型繼承 "),v("div",{onClick:e[5]||(e[5]=l=>t("threeprototype006")),class:"leftNavText"}," 原型鏈 "),v("div",{onClick:e[6]||(e[6]=l=>t("threeprototype007")),class:"leftNavText"}," class ")])])]),ff]),v("div",null,[X(T(W,{name:"fade",tag:"div"},{default:C(()=>[v("div",{onClick:d,class:"toTop"},uf)]),_:1},512),[[Y,s.value]]),X(T(W,{name:"fade",tag:"div"},{default:C(()=>[v("div",{onClick:n,class:"toBot"},mf)]),_:1},512),[[Y,s.value]])])],64))}},kf=ra(hf,[["__scopeId","data-v-ff866de0"]]),gf="/vue-learn-js/assets/jstip001-1390af12.jpg";const Sv=a=>(ma("data-v-40a8e85d"),a=a(),ha(),a),Tf={class:"leftNav"},_f={class:"leftNavContainer"},zf={class:"leftNavLayout"},Sf={class:"Main"},qf={class:"mainContainer"},yf={class:"mainLayout"},Cf=U('<br data-v-40a8e85d><br data-v-40a8e85d><p class="fz28" data-v-40a8e85d>總分總</p><p class="fz28" data-v-40a8e85d>1.要講哪個知識點</p><p class="fz28" data-v-40a8e85d>2.細講</p><p class="fz28" data-v-40a8e85d>3.總結</p><br data-v-40a8e85d><br data-v-40a8e85d><div id="threetips001" class="articleCardTitle cor36 fz34" data-v-40a8e85d> 7.1 淺拷貝 </div><p class="fz28" data-v-40a8e85d> 深拷貝會複製物件的所有屬性和嵌套物件，而淺拷貝只會複製一層屬性 </p><br data-v-40a8e85d><p class="fz28" data-v-40a8e85d>只針對引用數據類型</p><div class="bgcVS" data-v-40a8e85d><div data-v-40a8e85d><span class="function" data-v-40a8e85d>const </span><span class="word" data-v-40a8e85d>obj</span> <span class="then" data-v-40a8e85d>=</span><span class="brackets" data-v-40a8e85d>{</span> <span class="word" data-v-40a8e85d>number:</span><span class="number" data-v-40a8e85d>1</span> <span class="brackets" data-v-40a8e85d>}</span></div><div data-v-40a8e85d><span class="function" data-v-40a8e85d>const </span> <span class="word" data-v-40a8e85d>o</span><span class="then" data-v-40a8e85d>=</span> <span class="word" data-v-40a8e85d>obj</span></div><div data-v-40a8e85d><span class="word" data-v-40a8e85d>console.</span><span class="variable" data-v-40a8e85d>log</span> <span class="brackets" data-v-40a8e85d>(</span><span class="word" data-v-40a8e85d>o</span> <span class="brackets" data-v-40a8e85d>)</span></div><div data-v-40a8e85d><span class="word" data-v-40a8e85d>o.number</span> <span class="then" data-v-40a8e85d>=</span><span class="number" data-v-40a8e85d>20</span></div><div data-v-40a8e85d><span class="word" data-v-40a8e85d>console.</span><span class="variable" data-v-40a8e85d>log</span> <span class="brackets" data-v-40a8e85d>(</span><span class="word" data-v-40a8e85d>o</span> <span class="brackets" data-v-40a8e85d>)</span><span class="comment" data-v-40a8e85d>//{number:20} . . . 堆 &amp; 棧</span></div><div data-v-40a8e85d><span class="word" data-v-40a8e85d>console.</span><span class="variable" data-v-40a8e85d>log</span> <span class="brackets" data-v-40a8e85d>(</span><span class="word" data-v-40a8e85d>obj</span> <span class="brackets" data-v-40a8e85d>)</span><span class="comment" data-v-40a8e85d>//{number:20} . . . 堆 &amp; 棧</span></div><div class="dis" data-v-40a8e85d><div class="pad20" data-v-40a8e85d><br data-v-40a8e85d><div data-v-40a8e85d>obj</div><div data-v-40a8e85d>o</div><br data-v-40a8e85d></div><div class="pad20" data-v-40a8e85d> 棧 <div data-v-40a8e85d>→ 0x1111 →</div><div data-v-40a8e85d>→ 0x2222 ↗</div><div data-v-40a8e85d>把地址</div><div data-v-40a8e85d>賦值給他</div></div><div class="pad20" data-v-40a8e85d> 堆 <div data-v-40a8e85d>{ number:1 }</div><br data-v-40a8e85d><div data-v-40a8e85d>址</div></div></div><br data-v-40a8e85d><br data-v-40a8e85d><p data-v-40a8e85d>淺拷貝: 拷貝的是 地址</p><br data-v-40a8e85d><p data-v-40a8e85d>法一</p><div data-v-40a8e85d><span class="function" data-v-40a8e85d>const </span><span class="word" data-v-40a8e85d>obj</span> <span class="then" data-v-40a8e85d>=</span><span class="brackets" data-v-40a8e85d>{</span></div><div class="padTwo VSL" data-v-40a8e85d><span class="word" data-v-40a8e85d>uname:</span> <span class="src" data-v-40a8e85d>&quot;wayne&quot;</span></div><div class="padTwo VSL" data-v-40a8e85d><span class="word" data-v-40a8e85d>number:</span> <span class="number" data-v-40a8e85d>1</span><div data-v-40a8e85d></div></div><div class="brackets" data-v-40a8e85d>}</div><div data-v-40a8e85d><span class="function" data-v-40a8e85d>const </span> <span class="word" data-v-40a8e85d>o</span><span class="then" data-v-40a8e85d>=</span> <span class="brackets" data-v-40a8e85d>{</span><span class="word" data-v-40a8e85d>...obj</span> <span class="brackets" data-v-40a8e85d>}</span></div><div data-v-40a8e85d><span class="word" data-v-40a8e85d>console.</span><span class="variable" data-v-40a8e85d>log</span> <span class="brackets" data-v-40a8e85d>(</span><span class="word" data-v-40a8e85d>o</span> <span class="brackets" data-v-40a8e85d>)</span></div><br data-v-40a8e85d><p data-v-40a8e85d>法二</p><div data-v-40a8e85d><span class="function" data-v-40a8e85d>const </span> <span class="word" data-v-40a8e85d>o</span><span class="then" data-v-40a8e85d>=</span> <span class="brackets" data-v-40a8e85d>{}</span></div><div data-v-40a8e85d><span class="brackets" data-v-40a8e85d>Object</span><span class="word" data-v-40a8e85d>.assign</span><span class="brackets" data-v-40a8e85d>(</span> <span class="word" data-v-40a8e85d>o,obj</span><span class="brackets" data-v-40a8e85d>)</span><span class="comment" data-v-40a8e85d> // (要拷貝的,被拷貝的)// (右 賦值 給 左)</span></div><div data-v-40a8e85d><span class="word" data-v-40a8e85d>console.</span><span class="variable" data-v-40a8e85d>log</span> <span class="brackets" data-v-40a8e85d>(</span><span class="word" data-v-40a8e85d>o</span> <span class="brackets" data-v-40a8e85d>)</span></div><br data-v-40a8e85d><br data-v-40a8e85d><p data-v-40a8e85d>淺拷貝只拷貝最外面那一層 (uname number)</p><p data-v-40a8e85d>簡單物件還可以 , 裡面又有物件時 , 有問題</p><p data-v-40a8e85d>. . &gt; 多層次嵌套 有問題</p><div data-v-40a8e85d><span class="function" data-v-40a8e85d>const </span><span class="word" data-v-40a8e85d>obj</span> <span class="then" data-v-40a8e85d>=</span><span class="brackets" data-v-40a8e85d>{</span></div><div class="padTwo VSL" data-v-40a8e85d><span class="word" data-v-40a8e85d>uname:</span> <span class="src" data-v-40a8e85d>&quot;wayne&quot;</span></div><div class="padTwo VSL" data-v-40a8e85d><span class="word" data-v-40a8e85d>number:</span> <span class="number" data-v-40a8e85d>1</span><div data-v-40a8e85d></div></div><div class="padTwo VSL" data-v-40a8e85d><span class="word" data-v-40a8e85d>inner:</span> <span class="brackets" data-v-40a8e85d>{</span><div data-v-40a8e85d><div class="padTwo VSL" data-v-40a8e85d><span class="word" data-v-40a8e85d>cantcopy:</span><span class="src" data-v-40a8e85d>&quot;裡面的潛拷貝不到&quot;</span></div></div><div data-v-40a8e85d><span class="brackets" data-v-40a8e85d>}</span></div></div><div class="brackets" data-v-40a8e85d>}</div><br data-v-40a8e85d><br data-v-40a8e85d><div class="dis" data-v-40a8e85d><div class="pad20" data-v-40a8e85d><br data-v-40a8e85d><div data-v-40a8e85d>obj.name</div><div data-v-40a8e85d>o.name</div><br data-v-40a8e85d><div data-v-40a8e85d>obj.inner</div><div data-v-40a8e85d>o.inner</div></div><div class="pad20" data-v-40a8e85d> 棧 <div data-v-40a8e85d>wayne</div><div data-v-40a8e85d>wayne</div><div data-v-40a8e85d>obj直接把wayne複製給o</div><div data-v-40a8e85d>→ 0x1111 →</div><div data-v-40a8e85d>→ 0x1111 ↗</div><div data-v-40a8e85d>拷貝了地址</div></div><div class="pad20" data-v-40a8e85d> 堆 <br data-v-40a8e85d><br data-v-40a8e85d><br data-v-40a8e85d><br data-v-40a8e85d><div data-v-40a8e85d>{ cantcopy:&quot;裡面的潛拷貝不到&quot; }</div></div></div></div><p class="fz28" data-v-40a8e85d>解決 多層次嵌套 問題</p><div id="threetips002" class="articleCardTitle cor36 fz34" data-v-40a8e85d> 7.2 深拷貝 </div><p class="fz28" data-v-40a8e85d> 深拷貝會複製物件的所有屬性和嵌套物件，而淺拷貝只會複製一層屬性 </p><br data-v-40a8e85d><p class="fz28" data-v-40a8e85d>深拷貝 拷貝的是 物件 不是地址</p><p class="fz28 cor36" data-v-40a8e85d># 3 方法</p><p class="fz28" data-v-40a8e85d>1. 通過 遞歸 實現 深拷貝</p><p class="fz28" data-v-40a8e85d>2. lodash / cloneDeep</p><p class="fz28" data-v-40a8e85d>3. 通過 JSON.stringify() 實現</p><br data-v-40a8e85d><br data-v-40a8e85d><p class="fz28" data-v-40a8e85d>什麼是遞歸函數（recursion）?</p><p class="fz28" data-v-40a8e85d>一個函數在內部 調用自己 就是遞歸函數</p><p class="fz28" data-v-40a8e85d> 遞歸容易 &quot;棧溢出&quot; 錯誤 , 所以必須加 退出條件 return </p>',27),xf={class:"bgcVS"},Lf=U('<div data-v-40a8e85d><span class="function" data-v-40a8e85d>function </span><span class="word" data-v-40a8e85d>fn</span> <span class="brackets" data-v-40a8e85d>(){</span></div><div class="padTwo VSL" data-v-40a8e85d><span class="word" data-v-40a8e85d>fn</span> <span class="brackets" data-v-40a8e85d>()</span><div data-v-40a8e85d></div></div><div data-v-40a8e85d><span class="brackets" data-v-40a8e85d>}</span></div><div data-v-40a8e85d><span class="word" data-v-40a8e85d>fn</span> <span class="brackets" data-v-40a8e85d>()</span></div><br data-v-40a8e85d><div data-v-40a8e85d><span class="function" data-v-40a8e85d>let </span> <span class="word" data-v-40a8e85d>i</span><span class="then" data-v-40a8e85d>=</span> <span class="number" data-v-40a8e85d>1</span></div><div data-v-40a8e85d><span class="function" data-v-40a8e85d>function </span><span class="word" data-v-40a8e85d>fn</span> <span class="brackets" data-v-40a8e85d>(){</span></div><div class="padTwo VSL" data-v-40a8e85d><span class="word" data-v-40a8e85d>console.</span><span class="variable" data-v-40a8e85d>log</span> <span class="brackets" data-v-40a8e85d>(</span><span class="src" data-v-40a8e85d>`這是第</span> <span class="then" data-v-40a8e85d>${</span><span class="word" data-v-40a8e85d>i</span> <span class="then" data-v-40a8e85d>}</span><span class="src" data-v-40a8e85d>次`</span> <span class="brackets" data-v-40a8e85d>)</span><div data-v-40a8e85d><span class="then" data-v-40a8e85d>if</span> <span class="brackets" data-v-40a8e85d>(</span><span class="word" data-v-40a8e85d>i</span> <span class="then" data-v-40a8e85d>&gt;=</span><span class="number" data-v-40a8e85d>6</span> <span class="brackets" data-v-40a8e85d>){</span><div class="padTwo VSL" data-v-40a8e85d><span class="then" data-v-40a8e85d>return </span></div><div data-v-40a8e85d><span class="brackets" data-v-40a8e85d>}</span></div><div data-v-40a8e85d><span class="word" data-v-40a8e85d>i</span> <span class="then" data-v-40a8e85d>++</span></div></div></div><div class="padTwo VSL" data-v-40a8e85d><span class="word" data-v-40a8e85d>fn</span> <span class="brackets" data-v-40a8e85d>()</span><div data-v-40a8e85d></div></div><div data-v-40a8e85d><span class="brackets" data-v-40a8e85d>}</span></div><div data-v-40a8e85d><span class="word" data-v-40a8e85d>fn</span> <span class="brackets" data-v-40a8e85d>()</span></div><br data-v-40a8e85d><br data-v-40a8e85d><p data-v-40a8e85d>利用 遞歸函數 實現 setTimeout 模擬 setInterval</p><p data-v-40a8e85d>1. 每隔 1 秒輸出當前時間</p>',15),jf=U('<div data-v-40a8e85d><span class="variable" data-v-40a8e85d>setTimeout</span><span class="brackets" data-v-40a8e85d>( </span><span class="function" data-v-40a8e85d>函數, </span><span class="number" data-v-40a8e85d>時間 </span> <span class="brackets" data-v-40a8e85d>)</span></div><br data-v-40a8e85d><br data-v-40a8e85d><div data-v-40a8e85d><span class="function" data-v-40a8e85d>function </span><span class="word" data-v-40a8e85d>getTime</span><span class="brackets" data-v-40a8e85d>(){</span></div><div class="padTwo VSL" data-v-40a8e85d><span class="word" data-v-40a8e85d>document.</span><span class="variable" data-v-40a8e85d>querySelector</span><span class="brackets" data-v-40a8e85d>(</span><span class="src" data-v-40a8e85d>&quot;showTimeDiv&quot;</span><span class="brackets" data-v-40a8e85d>)</span><span class="variable" data-v-40a8e85d>.innerHTML</span><span class="then" data-v-40a8e85d>=</span> <span class="then" data-v-40a8e85d>new </span><span class="brackets" data-v-40a8e85d>Date()</span><span class="variable" data-v-40a8e85d>.toLocaleString</span><span class="brackets" data-v-40a8e85d>()</span><div data-v-40a8e85d></div></div><div data-v-40a8e85d><span class="brackets" data-v-40a8e85d>}</span></div><br data-v-40a8e85d><br data-v-40a8e85d><div data-v-40a8e85d><span class="function" data-v-40a8e85d>function </span><span class="word" data-v-40a8e85d>getTime</span><span class="brackets" data-v-40a8e85d>(){</span></div><div class="padTwo VSL" data-v-40a8e85d><span class="word" data-v-40a8e85d>document.</span><span class="variable" data-v-40a8e85d>querySelector</span><span class="brackets" data-v-40a8e85d>(</span><span class="src" data-v-40a8e85d>&quot;.showTimeDiv&quot;</span><span class="brackets" data-v-40a8e85d>)</span><span class="variable" data-v-40a8e85d>.innerHTML</span><span class="then" data-v-40a8e85d>=</span> <span class="then" data-v-40a8e85d>new </span><span class="brackets" data-v-40a8e85d>Date()</span><span class="variable" data-v-40a8e85d>.toLocaleString</span><span class="brackets" data-v-40a8e85d>()</span><div data-v-40a8e85d></div><div data-v-40a8e85d><span class="variable" data-v-40a8e85d>setTimeout</span><span class="brackets" data-v-40a8e85d>(</span><span class="variable" data-v-40a8e85d>getTime,</span><span class="number" data-v-40a8e85d>1000</span> <span class="brackets" data-v-40a8e85d>)</span></div></div><div data-v-40a8e85d><span class="brackets" data-v-40a8e85d>}</span></div><br data-v-40a8e85d><br data-v-40a8e85d><br data-v-40a8e85d><p data-v-40a8e85d>for in . for of</p><br data-v-40a8e85d><div data-v-40a8e85d><span class="comment" data-v-40a8e85d>// 1. 循環數組</span></div><div data-v-40a8e85d><span class="word" data-v-40a8e85d>cosnt</span> <span class="word" data-v-40a8e85d>arr</span><span class="then" data-v-40a8e85d>=</span> <span class="brackets" data-v-40a8e85d>[</span><span class="src" data-v-40a8e85d>&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;</span><span class="brackets" data-v-40a8e85d>]</span></div><div data-v-40a8e85d><span class="comment" data-v-40a8e85d>// for...in 輸出 數組成員 在數組中 的索引</span></div><div data-v-40a8e85d><span class="then" data-v-40a8e85d>for </span> <span class="brackets" data-v-40a8e85d>(</span><span class="function" data-v-40a8e85d>let </span> <span class="word" data-v-40a8e85d>n </span><span class="function" data-v-40a8e85d>in </span> <span class="word" data-v-40a8e85d>arr</span><span class="brackets" data-v-40a8e85d>){</span></div><div class="padTwo VSL" data-v-40a8e85d><span class="word" data-v-40a8e85d>console.log</span><span class="brackets" data-v-40a8e85d>(</span> <span class="word" data-v-40a8e85d>n </span><span class="brackets" data-v-40a8e85d>) </span><span class="comment" data-v-40a8e85d>// 0 // 1 // 2 // 3</span><div data-v-40a8e85d></div></div><div data-v-40a8e85d><span class="brackets" data-v-40a8e85d>}</span></div><br data-v-40a8e85d><div data-v-40a8e85d><span class="comment" data-v-40a8e85d>// for...of 輸出 數組的成員</span></div><div data-v-40a8e85d><span class="then" data-v-40a8e85d>for </span> <span class="brackets" data-v-40a8e85d>(</span><span class="function" data-v-40a8e85d>let </span> <span class="word" data-v-40a8e85d>n </span><span class="function" data-v-40a8e85d>of </span> <span class="word" data-v-40a8e85d>arr</span><span class="brackets" data-v-40a8e85d>){</span></div><div class="padTwo VSL" data-v-40a8e85d><span class="word" data-v-40a8e85d>console.log</span><span class="brackets" data-v-40a8e85d>(</span> <span class="word" data-v-40a8e85d>n </span><span class="brackets" data-v-40a8e85d>) </span><span class="comment" data-v-40a8e85d>// a // b // c // d</span><div data-v-40a8e85d></div></div><div data-v-40a8e85d><span class="brackets" data-v-40a8e85d>}</span></div><br data-v-40a8e85d><div data-v-40a8e85d><span class="comment" data-v-40a8e85d>// 2. 循環物件</span></div><div data-v-40a8e85d><span class="function" data-v-40a8e85d>const </span><span class="word" data-v-40a8e85d>obj</span> <span class="then" data-v-40a8e85d>=</span><span class="brackets" data-v-40a8e85d>{</span> <span class="word" data-v-40a8e85d>n:</span><span class="number" data-v-40a8e85d>4,</span> <span class="word" data-v-40a8e85d>m:</span><span class="number" data-v-40a8e85d>5,</span> <span class="word" data-v-40a8e85d>k:</span><span class="number" data-v-40a8e85d>6</span> <span class="brackets" data-v-40a8e85d>}</span></div><div data-v-40a8e85d><span class="comment" data-v-40a8e85d>// for...in </span></div><div data-v-40a8e85d><span class="then" data-v-40a8e85d>for </span> <span class="brackets" data-v-40a8e85d>(</span><span class="function" data-v-40a8e85d>let </span> <span class="word" data-v-40a8e85d>n </span><span class="function" data-v-40a8e85d>in </span> <span class="word" data-v-40a8e85d>obj</span><span class="brackets" data-v-40a8e85d>){</span></div><div class="padTwo VSL" data-v-40a8e85d><span class="comment" data-v-40a8e85d>// 物件的屬性名</span></div><div class="padTwo VSL" data-v-40a8e85d><span class="word" data-v-40a8e85d>console.log</span><span class="brackets" data-v-40a8e85d>(</span> <span class="word" data-v-40a8e85d>n</span><span class="brackets" data-v-40a8e85d>) </span><span class="comment" data-v-40a8e85d>// n // m // k</span><div data-v-40a8e85d></div></div><div class="padTwo VSL" data-v-40a8e85d><span class="comment" data-v-40a8e85d>// 物件的屬性值</span></div><div class="padTwo VSL" data-v-40a8e85d><span class="word" data-v-40a8e85d>console.</span><span class="variable" data-v-40a8e85d>log</span> <span class="brackets" data-v-40a8e85d>(</span><span class="word" data-v-40a8e85d>obj</span> <span class="brackets" data-v-40a8e85d>[</span><span class="word" data-v-40a8e85d>n</span> <span class="brackets" data-v-40a8e85d>])</span><span class="comment" data-v-40a8e85d>// 4 // 5 // 6</span><div data-v-40a8e85d></div></div><div data-v-40a8e85d><span class="brackets" data-v-40a8e85d>}</span></div><br data-v-40a8e85d><div data-v-40a8e85d><span class="comment" data-v-40a8e85d>// for...of </span></div><div data-v-40a8e85d><span class="then" data-v-40a8e85d>for </span> <span class="brackets" data-v-40a8e85d>(</span><span class="function" data-v-40a8e85d>let </span> <span class="word" data-v-40a8e85d>n </span><span class="function" data-v-40a8e85d>of </span> <span class="word" data-v-40a8e85d>obj</span><span class="brackets" data-v-40a8e85d>){</span></div><div class="padTwo VSL" data-v-40a8e85d><div data-v-40a8e85d><span class="comment" data-v-40a8e85d>// 報錯 , 不能循環</span></div><div data-v-40a8e85d><span class="comment" data-v-40a8e85d>// 因為沒有 iterator 接口</span></div></div><div data-v-40a8e85d><span class="brackets" data-v-40a8e85d>}</span></div><br data-v-40a8e85d><div data-v-40a8e85d><span class="comment" data-v-40a8e85d>// 3. 循環數組物件</span></div><div data-v-40a8e85d><span class="function" data-v-40a8e85d>const </span><span class="word" data-v-40a8e85d>arrObj</span> <span class="then" data-v-40a8e85d>=</span><span class="brackets" data-v-40a8e85d>[{</span></div><div class="padTwo VSL" data-v-40a8e85d><span class="word" data-v-40a8e85d>name:</span> <span class="src" data-v-40a8e85d>&quot;wayne&quot;,</span><div data-v-40a8e85d></div></div><div class="padTwo VSL" data-v-40a8e85d><span class="word" data-v-40a8e85d>number:</span> <span class="number" data-v-40a8e85d>1</span><div data-v-40a8e85d></div></div><div data-v-40a8e85d><span class="brackets" data-v-40a8e85d>}, {</span></div><div class="padTwo VSL" data-v-40a8e85d><span class="word" data-v-40a8e85d>name:</span> <span class="src" data-v-40a8e85d>&quot;jack&quot;,</span><div data-v-40a8e85d></div></div><div class="padTwo VSL" data-v-40a8e85d><span class="word" data-v-40a8e85d>number:</span> <span class="number" data-v-40a8e85d>9</span><div data-v-40a8e85d></div></div><div data-v-40a8e85d><span class="brackets" data-v-40a8e85d>}]</span></div><br data-v-40a8e85d><div data-v-40a8e85d><span class="then" data-v-40a8e85d>for </span> <span class="brackets" data-v-40a8e85d>(</span><span class="function" data-v-40a8e85d>let </span> <span class="word" data-v-40a8e85d>nObj </span><span class="function" data-v-40a8e85d>of </span><span class="word" data-v-40a8e85d>arrObj</span> <span class="brackets" data-v-40a8e85d>){</span></div><div class="padTwo VSL" data-v-40a8e85d><span class="word" data-v-40a8e85d>console.</span><span class="variable" data-v-40a8e85d>log</span> <span class="brackets" data-v-40a8e85d>(</span><span class="word" data-v-40a8e85d>nObj</span> <span class="brackets" data-v-40a8e85d>)</span><span class="comment" data-v-40a8e85d>//{name:&quot;wayne&quot;,number:1},{name:&quot;jack&quot;,number:9}</span></div><div class="padTwo VSL" data-v-40a8e85d><span class="then" data-v-40a8e85d>for </span> <span class="brackets" data-v-40a8e85d>(</span><span class="function" data-v-40a8e85d>let </span> <span class="word" data-v-40a8e85d>n </span><span class="function" data-v-40a8e85d>in </span> <span class="word" data-v-40a8e85d>nObj</span><span class="brackets" data-v-40a8e85d>){</span><div data-v-40a8e85d><div class="padTwo VSL" data-v-40a8e85d><span class="word" data-v-40a8e85d>console.</span><span class="variable" data-v-40a8e85d>log</span><span class="brackets" data-v-40a8e85d>(</span><span class="word" data-v-40a8e85d>nObj</span><span class="brackets" data-v-40a8e85d>[</span> <span class="word" data-v-40a8e85d>n</span><span class="brackets" data-v-40a8e85d>]) </span><span class="comment" data-v-40a8e85d>// wayne // 1 // jack // 9</span><div data-v-40a8e85d></div></div><div data-v-40a8e85d><span class="brackets" data-v-40a8e85d>}</span></div></div></div><div data-v-40a8e85d><span class="brackets" data-v-40a8e85d>}</span></div><div data-v-40a8e85d><span class="comment" data-v-40a8e85d>// for in 循環 物件</span></div><div data-v-40a8e85d><span class="comment" data-v-40a8e85d>// for of 循環 數組</span></div><br data-v-40a8e85d><br data-v-40a8e85d><p data-v-40a8e85d>利用 遞歸 函數 實現 深拷貝</p><br data-v-40a8e85d><div data-v-40a8e85d><span class="function" data-v-40a8e85d>const </span><span class="word" data-v-40a8e85d>obj</span> <span class="then" data-v-40a8e85d>=</span><span class="brackets" data-v-40a8e85d>{</span></div><div class="padTwo VSL" data-v-40a8e85d><span class="word" data-v-40a8e85d>uname:</span> <span class="src" data-v-40a8e85d>&quot;wayne&quot;</span></div><div class="padTwo VSL" data-v-40a8e85d><span class="word" data-v-40a8e85d>number:</span> <span class="number" data-v-40a8e85d>1</span><div data-v-40a8e85d></div></div><div class="brackets" data-v-40a8e85d>}</div><span class="comment" data-v-40a8e85d>// 我想把 obj 物件 拷貝給 o</span><div data-v-40a8e85d><span class="function" data-v-40a8e85d>const </span> <span class="word" data-v-40a8e85d>o</span><span class="then" data-v-40a8e85d>=</span> <span class="brackets" data-v-40a8e85d>{}</span></div><div data-v-40a8e85d><span class="comment" data-v-40a8e85d>思想:</span></div><div data-v-40a8e85d><span class="comment" data-v-40a8e85d>拿到物件 利用 遍歷 把屬性(值) 取過來 做 賦值</span></div><div data-v-40a8e85d><span class="comment" data-v-40a8e85d>把 obj 的 wayne 賦值給 o 的 uname 完成一次賦值</span></div><div data-v-40a8e85d><span class="comment" data-v-40a8e85d>再利用 循環 把 obj 的 1 傳給 o 的 number</span></div><br data-v-40a8e85d><div data-v-40a8e85d><span class="number" data-v-40a8e85d>如果是簡單類型直接放行</span></div><br data-v-40a8e85d><div class="por" data-v-40a8e85d><div data-v-40a8e85d><span class="function" data-v-40a8e85d>function </span><span class="variable" data-v-40a8e85d>deepCopy</span><span class="brackets" data-v-40a8e85d>( </span><span class="word" data-v-40a8e85d>newObj, oldObj </span><span class="brackets" data-v-40a8e85d>){</span></div><div class="padTwo VSL" data-v-40a8e85d><span class="comment" data-v-40a8e85d>//把舊的值取出來給新的值</span><div data-v-40a8e85d></div><span class="comment" data-v-40a8e85d>//先遍歷舊的 , 注意 k 是誰</span></div><div class="padTwo VSL" data-v-40a8e85d><span class="then" data-v-40a8e85d>for </span> <span class="brackets" data-v-40a8e85d>(</span><span class="function" data-v-40a8e85d>let </span> <span class="word" data-v-40a8e85d>k </span><span class="function" data-v-40a8e85d>in </span><span class="word" data-v-40a8e85d>oldObj </span><span class="brackets" data-v-40a8e85d>){</span><div data-v-40a8e85d><div class="padTwo VSL" data-v-40a8e85d><span class="comment" data-v-40a8e85d>// k 屬性名 oldObj[ k ] 屬性值</span></div><div class="padTwo VSL" data-v-40a8e85d><span class="comment" data-v-40a8e85d>// newObj[ k ] === o.uname</span><div data-v-40a8e85d></div></div><div class="padTwo VSL" data-v-40a8e85d><div data-v-40a8e85d><span class="word" data-v-40a8e85d>newObj</span><span class="brackets" data-v-40a8e85d>[ </span><span class="word" data-v-40a8e85d>k </span><span class="brackets" data-v-40a8e85d>]</span><span class="then" data-v-40a8e85d>= </span><span class="word" data-v-40a8e85d>oldObj</span><span class="brackets" data-v-40a8e85d>[ </span><span class="word" data-v-40a8e85d>k </span><span class="brackets" data-v-40a8e85d>]</span></div></div><div data-v-40a8e85d><span class="brackets" data-v-40a8e85d>}</span></div></div></div><div data-v-40a8e85d><span class="brackets" data-v-40a8e85d>}</span></div><div data-v-40a8e85d><span class="variable" data-v-40a8e85d>deepCopy</span><span class="brackets" data-v-40a8e85d>(</span> <span class="word" data-v-40a8e85d>o,obj</span><span class="brackets" data-v-40a8e85d>)</span><span class="comment" data-v-40a8e85d>//函數調用,o是新物件,obj是舊物件</span></div><div data-v-40a8e85d><span class="word" data-v-40a8e85d>console.</span><span class="variable" data-v-40a8e85d>log</span><span class="brackets" data-v-40a8e85d>(</span> <span class="word" data-v-40a8e85d>o</span><span class="brackets" data-v-40a8e85d>)</span></div><div data-v-40a8e85d><span class="word" data-v-40a8e85d>o.number</span> <span class="then" data-v-40a8e85d>=</span><span class="word" data-v-40a8e85d>99</span></div><div data-v-40a8e85d><span class="word" data-v-40a8e85d>console.</span><span class="variable" data-v-40a8e85d>log</span><span class="brackets" data-v-40a8e85d>(</span> <span class="word" data-v-40a8e85d>obj</span><span class="brackets" data-v-40a8e85d>)</span></div><div class="objectDivPoa" data-v-40a8e85d><div data-v-40a8e85d><span class="comment" data-v-40a8e85d>// 2. 循環物件</span></div><div data-v-40a8e85d><span class="function" data-v-40a8e85d>const </span><span class="word" data-v-40a8e85d>obj</span> <span class="then" data-v-40a8e85d>=</span></div><div data-v-40a8e85d><span class="brackets" data-v-40a8e85d>{</span> <span class="word" data-v-40a8e85d>n:</span><span class="number" data-v-40a8e85d>4,</span> <span class="word" data-v-40a8e85d>m:</span><span class="number" data-v-40a8e85d>5,</span> <span class="word" data-v-40a8e85d>k:</span><span class="number" data-v-40a8e85d>6</span> <span class="brackets" data-v-40a8e85d>}</span></div><div data-v-40a8e85d><span class="then" data-v-40a8e85d>for </span><span class="brackets" data-v-40a8e85d>(</span><span class="function" data-v-40a8e85d>let </span><span class="word" data-v-40a8e85d>n </span><span class="function" data-v-40a8e85d>in </span><span class="word" data-v-40a8e85d>obj</span><span class="brackets" data-v-40a8e85d>){</span></div><div class="padTwo VSL" data-v-40a8e85d><span class="comment" data-v-40a8e85d>// 物件的屬性名</span></div><div class="padTwo VSL" data-v-40a8e85d><span class="word" data-v-40a8e85d>console.log</span><span class="brackets" data-v-40a8e85d>(</span> <span class="word" data-v-40a8e85d>n</span><span class="brackets" data-v-40a8e85d>) </span><div data-v-40a8e85d></div><span class="comment" data-v-40a8e85d>// n // m // k</span></div><div class="padTwo VSL" data-v-40a8e85d><span class="comment" data-v-40a8e85d>// 物件的屬性值</span></div><div class="padTwo VSL" data-v-40a8e85d><span class="word" data-v-40a8e85d>console.</span><span class="variable" data-v-40a8e85d>log</span><span class="brackets" data-v-40a8e85d>(</span><span class="word" data-v-40a8e85d>obj</span><span class="brackets" data-v-40a8e85d>[</span><span class="word" data-v-40a8e85d>n</span><span class="brackets" data-v-40a8e85d>])</span><div data-v-40a8e85d></div><span class="comment" data-v-40a8e85d>// 4 // 5 // 6</span></div><div data-v-40a8e85d><span class="brackets" data-v-40a8e85d>}</span></div></div><br data-v-40a8e85d><p data-v-40a8e85d>Q: oldObj [ k ] 是誰?</p><p data-v-40a8e85d>舊物件 屬性值</p><br data-v-40a8e85d><p data-v-40a8e85d>Q: newObj [ k ] 是誰?</p><p data-v-40a8e85d>新物件 屬性名</p><br data-v-40a8e85d><p data-v-40a8e85d>------------以上做潛拷貝------------</p><div data-v-40a8e85d><span class="function" data-v-40a8e85d>const </span><span class="word" data-v-40a8e85d>obj</span> <span class="then" data-v-40a8e85d>=</span><span class="brackets" data-v-40a8e85d>{</span></div><div class="padTwo VSL" data-v-40a8e85d><span class="word" data-v-40a8e85d>uname:</span><span class="src" data-v-40a8e85d>&quot;wayne&quot;</span></div><div class="padTwo VSL" data-v-40a8e85d><span class="word" data-v-40a8e85d>number:</span> <span class="number" data-v-40a8e85d>1</span><div data-v-40a8e85d></div></div><div class="padTwo VSL" data-v-40a8e85d><span class="word" data-v-40a8e85d>hobby:</span><span class="brackets" data-v-40a8e85d>[</span><span class="src" data-v-40a8e85d>&quot;跑步&quot;,&quot;足球&quot;</span><span class="brackets" data-v-40a8e85d>]</span><div data-v-40a8e85d></div></div><div class="brackets" data-v-40a8e85d>}</div><br data-v-40a8e85d><div data-v-40a8e85d><span class="number" data-v-40a8e85d>遇到數組 跑步拿出來 放 hobby[0] 足球拿租來 放 hobby[1]</span></div><br data-v-40a8e85d><div data-v-40a8e85d><span class="function" data-v-40a8e85d>function </span><span class="variable" data-v-40a8e85d>deepCopy</span><span class="brackets" data-v-40a8e85d>( </span><span class="word" data-v-40a8e85d>newObj, oldObj </span><span class="brackets" data-v-40a8e85d>){</span></div><div class="padTwo VSL" data-v-40a8e85d><span class="comment" data-v-40a8e85d>//把舊的值取出來給新的值</span><div data-v-40a8e85d></div><span class="comment" data-v-40a8e85d>//先遍歷舊的 , 注意 k 是誰</span></div><div class="padTwo VSL" data-v-40a8e85d><span class="then" data-v-40a8e85d>for </span> <span class="brackets" data-v-40a8e85d>(</span><span class="function" data-v-40a8e85d>let </span> <span class="word" data-v-40a8e85d>k </span><span class="function" data-v-40a8e85d>in </span><span class="word" data-v-40a8e85d>oldObj </span><span class="brackets" data-v-40a8e85d>){</span><div class="padTwo VSL" data-v-40a8e85d><div data-v-40a8e85d><span class="number" data-v-40a8e85d>//</span><span class="comment" data-v-40a8e85d> 處理數組問題</span></div><div data-v-40a8e85d><span class="number" data-v-40a8e85d>// </span><span class="comment" data-v-40a8e85d>通過值來判斷</span></div><div data-v-40a8e85d><span class="then" data-v-40a8e85d>if</span><span class="brackets" data-v-40a8e85d>(</span><span class="word" data-v-40a8e85d>oldObj</span><span class="brackets" data-v-40a8e85d>[</span> <span class="word" data-v-40a8e85d>k </span><span class="brackets" data-v-40a8e85d>] </span><span class="word" data-v-40a8e85d>intanceof </span><span class="brackets" data-v-40a8e85d>Array</span><span class="brackets" data-v-40a8e85d>) { </span><span class="comment" data-v-40a8e85d>// oldObj [ k ] 屬性值</span></div><div class="padTwo VSL" data-v-40a8e85d><div data-v-40a8e85d><span class="number" data-v-40a8e85d>// </span><span class="comment" data-v-40a8e85d>我要把hobby數組再次遍歷</span></div><div data-v-40a8e85d><span class="number" data-v-40a8e85d>// </span><span class="comment" data-v-40a8e85d>我要把跑步拿出來放到新物件hobby第1個參數</span></div><div data-v-40a8e85d><span class="number" data-v-40a8e85d>// </span><span class="comment" data-v-40a8e85d>我要把足球拿出來放到新物件hobby第2個參數</span></div><div data-v-40a8e85d><span class="word" data-v-40a8e85d>newObj</span><span class="brackets" data-v-40a8e85d>[ </span><span class="word" data-v-40a8e85d>k </span><span class="brackets" data-v-40a8e85d>]</span><span class="then" data-v-40a8e85d>=</span><span class="brackets" data-v-40a8e85d>[ ]</span><div data-v-40a8e85d></div><div data-v-40a8e85d><span class="number" data-v-40a8e85d>// </span><span class="comment" data-v-40a8e85d> newObj[k] 是 hobby</span></div><div data-v-40a8e85d><span class="number" data-v-40a8e85d>// </span><span class="comment" data-v-40a8e85d> 新物件的 hobby 先給他一個空數組</span></div><div data-v-40a8e85d><span class="number" data-v-40a8e85d>// </span><span class="comment" data-v-40a8e85d>然後我在遍歷舊數組把他放進去</span></div><br data-v-40a8e85d><div data-v-40a8e85d><span class="number" data-v-40a8e85d>// </span><span class="comment" data-v-40a8e85d>deepCopy(newObj[k],[&quot;跑步&quot;,&quot;足球&quot;])</span></div><div class="por" data-v-40a8e85d><div data-v-40a8e85d><span class="variable" data-v-40a8e85d>deepCopy</span><span class="brackets" data-v-40a8e85d>(</span><span class="word" data-v-40a8e85d>newObj</span><span class="brackets" data-v-40a8e85d>[</span><span class="word" data-v-40a8e85d>k</span><span class="brackets" data-v-40a8e85d>],</span><span class="word" data-v-40a8e85d>oldObj</span><span class="brackets" data-v-40a8e85d>[</span><span class="word" data-v-40a8e85d>k</span><span class="brackets" data-v-40a8e85d>])</span></div><div data-v-40a8e85d><span class="comment" data-v-40a8e85d>//調用自己遍歷數組時</span></div><div data-v-40a8e85d><span class="number" data-v-40a8e85d>// K 變成數組的索引號了</span></div><div class="objectDivPoa" data-v-40a8e85d><div data-v-40a8e85d><span class="comment" data-v-40a8e85d>// 1. 循環數組</span></div><div data-v-40a8e85d><span class="word" data-v-40a8e85d>cosnt</span><span class="word" data-v-40a8e85d>arr</span><span class="then" data-v-40a8e85d>=</span></div><div data-v-40a8e85d><span class="brackets" data-v-40a8e85d>[</span><span class="src" data-v-40a8e85d>&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;</span><span class="brackets" data-v-40a8e85d>]</span></div><div data-v-40a8e85d><span class="comment" data-v-40a8e85d>//for...in輸出</span></div><div data-v-40a8e85d><span class="comment" data-v-40a8e85d>數組成員在</span></div><div data-v-40a8e85d><span class="comment" data-v-40a8e85d>數組中的索引</span></div><div data-v-40a8e85d><span class="then" data-v-40a8e85d>for </span><span class="brackets" data-v-40a8e85d>(</span><span class="function" data-v-40a8e85d>let </span><span class="word" data-v-40a8e85d>n </span><span class="function" data-v-40a8e85d>in </span><span class="word" data-v-40a8e85d>arr</span><span class="brackets" data-v-40a8e85d>){</span></div><div class="" data-v-40a8e85d><span class="word" data-v-40a8e85d>console.log</span><span class="brackets" data-v-40a8e85d>(</span><span class="word" data-v-40a8e85d>n </span><span class="brackets" data-v-40a8e85d>) </span></div><div data-v-40a8e85d><span class="comment" data-v-40a8e85d>// 0 // 1 // 2 // 3</span><div data-v-40a8e85d></div></div><div data-v-40a8e85d><span class="brackets" data-v-40a8e85d>}</span></div></div></div></div></div></div><div class="padTwo VSL" data-v-40a8e85d><span class="brackets" data-v-40a8e85d>}</span><span class="then" data-v-40a8e85d>else </span><span class="brackets" data-v-40a8e85d>{</span><div data-v-40a8e85d><div data-v-40a8e85d><div class="padTwo VSL" data-v-40a8e85d><span class="comment" data-v-40a8e85d>// k 屬性名 oldObj[ k ] 屬性值</span></div><div class="padTwo VSL" data-v-40a8e85d><span class="comment" data-v-40a8e85d>// newObj[ k ] === o.uname</span><div data-v-40a8e85d></div></div><div class="padTwo VSL" data-v-40a8e85d><div data-v-40a8e85d><span class="word" data-v-40a8e85d>newObj</span><span class="brackets" data-v-40a8e85d>[ </span><span class="word" data-v-40a8e85d>k </span><span class="brackets" data-v-40a8e85d>]</span><span class="then" data-v-40a8e85d>= </span><span class="word" data-v-40a8e85d>oldObj</span><span class="brackets" data-v-40a8e85d>[ </span><span class="word" data-v-40a8e85d>k </span><span class="brackets" data-v-40a8e85d>]</span></div></div><div data-v-40a8e85d><span class="brackets" data-v-40a8e85d>}</span></div></div></div></div><div data-v-40a8e85d><span class="brackets" data-v-40a8e85d>}</span></div></div><div data-v-40a8e85d><span class="brackets" data-v-40a8e85d>}</span></div><div data-v-40a8e85d><span class="variable" data-v-40a8e85d>deepCopy</span><span class="brackets" data-v-40a8e85d>(</span> <span class="word" data-v-40a8e85d>o,obj</span><span class="brackets" data-v-40a8e85d>)</span><span class="comment" data-v-40a8e85d>//函數調用,o是新物件,obj是舊物件</span></div><div data-v-40a8e85d><span class="word" data-v-40a8e85d>console.</span><span class="variable" data-v-40a8e85d>log</span><span class="brackets" data-v-40a8e85d>(</span> <span class="word" data-v-40a8e85d>o</span><span class="brackets" data-v-40a8e85d>)</span></div><div data-v-40a8e85d><span class="word" data-v-40a8e85d>o.number</span> <span class="then" data-v-40a8e85d>=</span><span class="word" data-v-40a8e85d>99</span></div><div data-v-40a8e85d><span class="word" data-v-40a8e85d>console.</span><span class="variable" data-v-40a8e85d>log</span><span class="brackets" data-v-40a8e85d>(</span> <span class="word" data-v-40a8e85d>obj</span><span class="brackets" data-v-40a8e85d>)</span></div><br data-v-40a8e85d><div data-v-40a8e85d><span class="number" data-v-40a8e85d>處理遇到物件</span></div><br data-v-40a8e85d><div data-v-40a8e85d><span class="function" data-v-40a8e85d>const </span><span class="word" data-v-40a8e85d>obj</span> <span class="then" data-v-40a8e85d>=</span><span class="brackets" data-v-40a8e85d>{</span></div><div class="padTwo VSL" data-v-40a8e85d><span class="word" data-v-40a8e85d>uname:</span><span class="src" data-v-40a8e85d>&quot;wayne&quot;</span></div><div class="padTwo VSL" data-v-40a8e85d><span class="word" data-v-40a8e85d>number:</span> <span class="number" data-v-40a8e85d>1</span><div data-v-40a8e85d></div></div><div class="padTwo VSL" data-v-40a8e85d><span class="word" data-v-40a8e85d>hobby:</span><span class="brackets" data-v-40a8e85d>[</span><span class="src" data-v-40a8e85d>&quot;跑步&quot;,&quot;足球&quot;</span><span class="brackets" data-v-40a8e85d>]</span><div data-v-40a8e85d></div></div><div class="padTwo VSL" data-v-40a8e85d><span class="word" data-v-40a8e85d>family:</span><span class="brackets" data-v-40a8e85d>{</span><div data-v-40a8e85d><div class="padTwo VSL" data-v-40a8e85d><span class="word" data-v-40a8e85d>baby:</span><span class="src" data-v-40a8e85d>&quot;小neo&quot;</span><div data-v-40a8e85d></div></div><div data-v-40a8e85d><span class="brackets" data-v-40a8e85d>}</span></div></div></div><div class="brackets" data-v-40a8e85d>}</div><br data-v-40a8e85d><div data-v-40a8e85d><span class="function" data-v-40a8e85d>function </span><span class="variable" data-v-40a8e85d>deepCopy</span><span class="brackets" data-v-40a8e85d>( </span><span class="word" data-v-40a8e85d>newObj, oldObj </span><span class="brackets" data-v-40a8e85d>){</span></div><div class="padTwo VSL" data-v-40a8e85d><span class="comment" data-v-40a8e85d>//把舊的值取出來給新的值</span><div data-v-40a8e85d></div><span class="comment" data-v-40a8e85d>//先遍歷舊的 , 注意 k 是誰</span></div><div class="padTwo VSL" data-v-40a8e85d><span class="then" data-v-40a8e85d>for </span> <span class="brackets" data-v-40a8e85d>(</span><span class="function" data-v-40a8e85d>let </span> <span class="word" data-v-40a8e85d>k </span><span class="function" data-v-40a8e85d>in </span><span class="word" data-v-40a8e85d>oldObj </span><span class="brackets" data-v-40a8e85d>){</span><div class="padTwo VSL" data-v-40a8e85d><div data-v-40a8e85d><span class="comment" data-v-40a8e85d>// 處理數組問題</span></div><div data-v-40a8e85d><span class="comment" data-v-40a8e85d>// 通過值來判斷</span></div><div data-v-40a8e85d><span class="then" data-v-40a8e85d>if</span><span class="brackets" data-v-40a8e85d>(</span><span class="word" data-v-40a8e85d>oldObj</span><span class="brackets" data-v-40a8e85d>[</span> <span class="word" data-v-40a8e85d>k </span><span class="brackets" data-v-40a8e85d>] </span><span class="word" data-v-40a8e85d>intanceof </span><span class="brackets" data-v-40a8e85d>Array</span><span class="brackets" data-v-40a8e85d>) { </span><span class="comment" data-v-40a8e85d>// oldObj [ k ] 屬性值</span></div><div class="padTwo VSL" data-v-40a8e85d><div data-v-40a8e85d><span class="comment" data-v-40a8e85d>// 我要把hobby數組再次遍歷</span></div><div data-v-40a8e85d><span class="comment" data-v-40a8e85d>// 我要把跑步拿出來放到新物件hobby第1個參數</span></div><div data-v-40a8e85d><span class="comment" data-v-40a8e85d>// 我要把足球拿出來放到新物件hobby第2個參數</span></div><div data-v-40a8e85d><span class="word" data-v-40a8e85d>newObj</span><span class="brackets" data-v-40a8e85d>[ </span><span class="word" data-v-40a8e85d>k </span><span class="brackets" data-v-40a8e85d>]</span><span class="then" data-v-40a8e85d>=</span><span class="brackets" data-v-40a8e85d>[ ]</span><div data-v-40a8e85d></div><div data-v-40a8e85d><span class="comment" data-v-40a8e85d>// newObj[k] 是 hobby</span></div><div data-v-40a8e85d><span class="comment" data-v-40a8e85d> // 新物件的 hobby 先給他一個空數組</span></div><div data-v-40a8e85d><span class="comment" data-v-40a8e85d>// 然後我在遍歷舊數組把他放進去</span></div><div data-v-40a8e85d><span class="comment" data-v-40a8e85d>// deepCopy(newObj[k],[&quot;跑步&quot;,&quot;足球&quot;])</span></div><div data-v-40a8e85d><span class="variable" data-v-40a8e85d>deepCopy</span><span class="brackets" data-v-40a8e85d>(</span><span class="word" data-v-40a8e85d>newObj</span><span class="brackets" data-v-40a8e85d>[</span><span class="word" data-v-40a8e85d>k</span><span class="brackets" data-v-40a8e85d>],</span><span class="word" data-v-40a8e85d>oldObj</span><span class="brackets" data-v-40a8e85d>[</span><span class="word" data-v-40a8e85d>k</span><span class="brackets" data-v-40a8e85d>])</span></div><div data-v-40a8e85d><span class="comment" data-v-40a8e85d>//調用自己遍歷數組時</span></div><div data-v-40a8e85d><span class="comment" data-v-40a8e85d>// K 變成數組的索引號了</span></div></div></div></div><div class="padTwo VSL" data-v-40a8e85d><div data-v-40a8e85d><span class="brackets" data-v-40a8e85d>} </span><span class="then" data-v-40a8e85d>else if</span><span class="brackets" data-v-40a8e85d>(</span><span class="word" data-v-40a8e85d>oldObj</span><span class="brackets" data-v-40a8e85d>[</span> <span class="word" data-v-40a8e85d>k </span><span class="brackets" data-v-40a8e85d>] </span><span class="word" data-v-40a8e85d>intanceof </span><span class="brackets" data-v-40a8e85d>Object</span><span class="brackets" data-v-40a8e85d>) { </span><span class="comment" data-v-40a8e85d>// oldObj [ k ] 屬性值</span></div><div class="padTwo VSL" data-v-40a8e85d><br data-v-40a8e85d><div data-v-40a8e85d><span class="word" data-v-40a8e85d>newObj</span><span class="brackets" data-v-40a8e85d>[ </span><span class="word" data-v-40a8e85d>k </span><span class="brackets" data-v-40a8e85d>]</span><span class="then" data-v-40a8e85d>=</span><span class="brackets" data-v-40a8e85d>{ }</span><span class="cor36 padTwo" data-v-40a8e85d> ← . . . . . ↑ . . . 改這兩個 </span><div data-v-40a8e85d></div><br data-v-40a8e85d><div data-v-40a8e85d><span class="variable" data-v-40a8e85d>deepCopy</span><span class="brackets" data-v-40a8e85d>(</span><span class="word" data-v-40a8e85d>newObj</span><span class="brackets" data-v-40a8e85d>[</span><span class="word" data-v-40a8e85d>k</span><span class="brackets" data-v-40a8e85d>],</span><span class="word" data-v-40a8e85d>oldObj</span><span class="brackets" data-v-40a8e85d>[</span><span class="word" data-v-40a8e85d>k</span><span class="brackets" data-v-40a8e85d>])</span></div></div></div></div><div class="padTwo VSL" data-v-40a8e85d><span class="brackets" data-v-40a8e85d>}</span><span class="then" data-v-40a8e85d>else </span><span class="brackets" data-v-40a8e85d>{</span><div data-v-40a8e85d><div data-v-40a8e85d><div class="padTwo VSL" data-v-40a8e85d><span class="comment" data-v-40a8e85d>// k 屬性名 oldObj[ k ] 屬性值</span></div><div class="padTwo VSL" data-v-40a8e85d><span class="comment" data-v-40a8e85d>// newObj[ k ] === o.uname</span><div data-v-40a8e85d></div></div><div class="padTwo VSL" data-v-40a8e85d><div data-v-40a8e85d><span class="word" data-v-40a8e85d>newObj</span><span class="brackets" data-v-40a8e85d>[ </span><span class="word" data-v-40a8e85d>k </span><span class="brackets" data-v-40a8e85d>]</span><span class="then" data-v-40a8e85d>= </span><span class="word" data-v-40a8e85d>oldObj</span><span class="brackets" data-v-40a8e85d>[ </span><span class="word" data-v-40a8e85d>k </span><span class="brackets" data-v-40a8e85d>]</span></div></div><div data-v-40a8e85d><span class="brackets" data-v-40a8e85d>}</span></div></div></div></div><div data-v-40a8e85d><span class="brackets" data-v-40a8e85d>}</span></div></div><div data-v-40a8e85d><span class="brackets" data-v-40a8e85d>}</span></div><br data-v-40a8e85d><p data-v-40a8e85d># 一定要 先數組 再物件</p><p data-v-40a8e85d>因為 數組 屬於物件 他就把 數組當物件</p><br data-v-40a8e85d><div data-v-40a8e85d><span class="word" data-v-40a8e85d>console.</span><span class="variable" data-v-40a8e85d>log</span><span class="brackets" data-v-40a8e85d>([</span><span class="number" data-v-40a8e85d>1, 2, 3</span><span class="brackets" data-v-40a8e85d>]</span><span class="word" data-v-40a8e85d>instanceof</span><span class="brackets" data-v-40a8e85d>Object</span><span class="brackets" data-v-40a8e85d>) </span><span class="comment" data-v-40a8e85d>// true</span></div><div class="comment" data-v-40a8e85d>// 陣列 被當成 物件</div></div>',76),Pf=U('<p class="fz28 cor36" data-v-40a8e85d># 你怎麼實現 深拷貝?</p><p class="fz28" data-v-40a8e85d>深拷貝 是做到 拷貝出來的 新物件 不會影響 舊物件</p><p class="fz28" data-v-40a8e85d>想實現 深拷貝 函數遞歸</p><p class="fz28" data-v-40a8e85d>當我在 普通拷貝 直接賦值就好了</p><p class="fz28" data-v-40a8e85d>當我遇到 陣列 我再次調用 這個函數</p><p class="fz28" data-v-40a8e85d>當我遇到物件 我再次調用遞歸</p><p class="fz28" data-v-40a8e85d>先 陣列 後 物件</p><div id="threetips003" class="articleCardTitle cor36 fz34" data-v-40a8e85d> 7.3 lodash </div><a href="https://lodashjs.com/" class="fz28" data-v-40a8e85d>@ lodash中文</a><p class="fz28" data-v-40a8e85d> 庫 . 把一些常用的 方法 封裝好 . 只需要把庫引用進來 . 調用一個函數就可以用了 </p><a href="https://www.lodashjs.com/docs/lodash.cloneDeep#_clonedeepvalue" class="fz28" data-v-40a8e85d>@ lodash深拷貝</a><div class="bgcVS" data-v-40a8e85d><div data-v-40a8e85d><span class="then" data-v-40a8e85d>＜</span> <span class="number" data-v-40a8e85d>script </span><span class="word" data-v-40a8e85d>src</span> <span class="then" data-v-40a8e85d>=</span><span class="src" data-v-40a8e85d>&quot;lodash.js&quot;</span><span class="then" data-v-40a8e85d>&gt;＜/ </span><span class="number" data-v-40a8e85d>script</span> <span class="then" data-v-40a8e85d>&gt;</span></div><div data-v-40a8e85d><span class="function" data-v-40a8e85d>const </span><span class="word" data-v-40a8e85d>obj</span> <span class="then" data-v-40a8e85d>=</span><span class="brackets" data-v-40a8e85d>{</span></div><div class="padTwo VSL" data-v-40a8e85d><span class="word" data-v-40a8e85d>uname:</span><span class="src" data-v-40a8e85d>&quot;wayne&quot;</span></div><div class="padTwo VSL" data-v-40a8e85d><span class="word" data-v-40a8e85d>number:</span> <span class="number" data-v-40a8e85d>1</span><div data-v-40a8e85d></div></div><div class="padTwo VSL" data-v-40a8e85d><span class="word" data-v-40a8e85d>hobby:</span><span class="brackets" data-v-40a8e85d>[</span><span class="src" data-v-40a8e85d>&quot;跑步&quot;,&quot;足球&quot;</span><span class="brackets" data-v-40a8e85d>]</span><div data-v-40a8e85d></div></div><div class="padTwo VSL" data-v-40a8e85d><span class="word" data-v-40a8e85d>family:</span><span class="brackets" data-v-40a8e85d>{</span><div data-v-40a8e85d><div class="padTwo VSL" data-v-40a8e85d><span class="word" data-v-40a8e85d>baby:</span><span class="src" data-v-40a8e85d>&quot;小neo&quot;</span><div data-v-40a8e85d></div></div><div data-v-40a8e85d><span class="brackets" data-v-40a8e85d>}</span></div></div></div><div data-v-40a8e85d><span class="brackets" data-v-40a8e85d>}</span></div><div data-v-40a8e85d><span class="function" data-v-40a8e85d>const </span><span class="brackets" data-v-40a8e85d>o </span> <span class="then" data-v-40a8e85d>= </span><span class="word" data-v-40a8e85d>_.</span><span class="variable" data-v-40a8e85d>cloneDeep</span><span class="brackets" data-v-40a8e85d>( obj )</span></div><div data-v-40a8e85d><span class="comment" data-v-40a8e85d>// _.cloneDeep 有返回值 , 我 const o 接過來</span></div></div><div id="threetips004" class="articleCardTitle cor36 fz34" data-v-40a8e85d> 7.4 JSON 實現 深拷貝 </div><div class="bgcVS" data-v-40a8e85d><div data-v-40a8e85d><span class="function" data-v-40a8e85d>const </span><span class="word" data-v-40a8e85d>obj</span> <span class="then" data-v-40a8e85d>=</span><span class="brackets" data-v-40a8e85d>{</span></div><div class="padTwo VSL" data-v-40a8e85d><span class="word" data-v-40a8e85d>uname:</span><span class="src" data-v-40a8e85d>&quot;wayne&quot;</span></div><div class="padTwo VSL" data-v-40a8e85d><span class="word" data-v-40a8e85d>number:</span> <span class="number" data-v-40a8e85d>1</span><div data-v-40a8e85d></div></div><div class="padTwo VSL" data-v-40a8e85d><span class="word" data-v-40a8e85d>hobby:</span><span class="brackets" data-v-40a8e85d>[</span><span class="src" data-v-40a8e85d>&quot;跑步&quot;,&quot;足球&quot;</span><span class="brackets" data-v-40a8e85d>]</span><div data-v-40a8e85d></div></div><div class="padTwo VSL" data-v-40a8e85d><span class="word" data-v-40a8e85d>family:</span><span class="brackets" data-v-40a8e85d>{</span><div data-v-40a8e85d><div class="padTwo VSL" data-v-40a8e85d><span class="word" data-v-40a8e85d>baby:</span><span class="src" data-v-40a8e85d>&quot;小neo&quot;</span><div data-v-40a8e85d></div></div><div data-v-40a8e85d><span class="brackets" data-v-40a8e85d>}</span></div></div></div><div data-v-40a8e85d><span class="brackets" data-v-40a8e85d>}</span></div><div data-v-40a8e85d><span class="function" data-v-40a8e85d>const </span><span class="brackets" data-v-40a8e85d>o </span> <span class="then" data-v-40a8e85d>= </span><span class="word" data-v-40a8e85d>_.</span><span class="variable" data-v-40a8e85d>cloneDeep</span><span class="brackets" data-v-40a8e85d>( obj )</span></div><div data-v-40a8e85d><span class="comment" data-v-40a8e85d>// _.cloneDeep 有返回值 , 我 const o 接過來</span></div><div data-v-40a8e85d><span class="comment" data-v-40a8e85d>//把物件轉成JSON字串</span></div><div data-v-40a8e85d><span class="brackets" data-v-40a8e85d>JSON</span><span class="variable" data-v-40a8e85d>.stringify</span><span class="brackets" data-v-40a8e85d>(</span> <span class="word" data-v-40a8e85d>obj</span><span class="brackets" data-v-40a8e85d>)</span><span class="comment" data-v-40a8e85d>// 得到字串</span></div><div data-v-40a8e85d><span class="word" data-v-40a8e85d>console.</span><span class="variable" data-v-40a8e85d>log</span> <span class="brackets" data-v-40a8e85d>(</span><span class="brackets" data-v-40a8e85d>JSON</span><span class="variable" data-v-40a8e85d>.stringify</span><span class="brackets" data-v-40a8e85d>(</span> <span class="word" data-v-40a8e85d>obj</span><span class="brackets" data-v-40a8e85d>))</span></div><div data-v-40a8e85d><span class="brackets" data-v-40a8e85d>JSON</span><span class="variable" data-v-40a8e85d>.parse</span><span class="brackets" data-v-40a8e85d>(</span><span class="brackets" data-v-40a8e85d>JSON</span><span class="variable" data-v-40a8e85d>.stringify</span><span class="brackets" data-v-40a8e85d>(</span> <span class="word" data-v-40a8e85d>obj</span><span class="brackets" data-v-40a8e85d>))</span></div><div data-v-40a8e85d><span class="function" data-v-40a8e85d>const </span> <span class="word" data-v-40a8e85d>o</span><span class="then" data-v-40a8e85d>=</span> <span class="brackets" data-v-40a8e85d>JSON</span><span class="variable" data-v-40a8e85d>.parse</span><span class="brackets" data-v-40a8e85d>(</span><span class="brackets" data-v-40a8e85d>JSON</span><span class="variable" data-v-40a8e85d>.stringify</span><span class="brackets" data-v-40a8e85d>(</span> <span class="word" data-v-40a8e85d>obj</span><span class="brackets" data-v-40a8e85d>))</span></div></div><div id="threetips005" class="articleCardTitle cor36 fz34" data-v-40a8e85d> 7.5 異常處理 </div><div id="" class="articleCardTitle cor36 fz34" data-v-40a8e85d>throw 拋異常</div><div class="bgcVS" data-v-40a8e85d><p data-v-40a8e85d>JavaScript 中的驚嘆號（&quot;!&quot;）操作符</p><br data-v-40a8e85d><p data-v-40a8e85d>1. 邏輯 NOT 運算符：</p><br data-v-40a8e85d><p data-v-40a8e85d> 驚嘆號（&quot;!&quot;）在 JavaScript 中被用作邏輯 NOT 運算符。它會將其後的表達式的真值反轉，即如果表達式是真，則 NOT 運算後為假；如果表達式是假，則 NOT 運算後為真。 </p><br data-v-40a8e85d><div data-v-40a8e85d><span class="function" data-v-40a8e85d>let </span><span class="word" data-v-40a8e85d>isTrue</span> <span class="then" data-v-40a8e85d>=</span><span class="number" data-v-40a8e85d>true</span></div><div data-v-40a8e85d><span class="function" data-v-40a8e85d>let </span><span class="word" data-v-40a8e85d>isFalse</span> <span class="then" data-v-40a8e85d>=</span><span class="number" data-v-40a8e85d>!isTrue</span><span class="comment" data-v-40a8e85d>//isFalse將會是false</span></div><br data-v-40a8e85d><p data-v-40a8e85d>1.1</p><br data-v-40a8e85d><p data-v-40a8e85d> 如果您的變數 x 沒有被定義，那麼在使用 ! 來取得布林相反值時，會得到 true，因為 undefined 被轉換為布林值時為 false，而取其相反值則是 true。 </p><br data-v-40a8e85d><div data-v-40a8e85d><span class="function" data-v-40a8e85d>var </span> <span class="word" data-v-40a8e85d>y</span><span class="comment" data-v-40a8e85d>//y是undefined</span></div><div data-v-40a8e85d><span class="function" data-v-40a8e85d>var </span><span class="word" data-v-40a8e85d>oppositeValue</span><span class="then" data-v-40a8e85d>=</span> <span class="number" data-v-40a8e85d>!y</span><span class="comment" data-v-40a8e85d>//oppositeValue將是true</span></div><br data-v-40a8e85d><p data-v-40a8e85d>2. 轉換為布林值：</p><br data-v-40a8e85d><p data-v-40a8e85d> 在一些情況下，驚嘆號也可以將值轉換為布林值。將任何值進行這樣的轉換後，非空字串將轉換為 true，數字 0 轉換為 false，以及其他值按通常的 JavaScript 轉換規則進行轉換。 </p><br data-v-40a8e85d><div data-v-40a8e85d><span class="function" data-v-40a8e85d>let </span><span class="word" data-v-40a8e85d>value</span> <span class="then" data-v-40a8e85d>=</span><span class="src" data-v-40a8e85d>&quot;Hello&quot;</span></div><div data-v-40a8e85d><span class="function" data-v-40a8e85d>let </span><span class="word" data-v-40a8e85d>convertedValue</span><span class="then" data-v-40a8e85d>=</span> <span class="number" data-v-40a8e85d>!!value</span><span class="comment" data-v-40a8e85d>//convertedValue將會是true，因為非空字串轉換為true</span></div><br data-v-40a8e85d><br data-v-40a8e85d><br data-v-40a8e85d><div data-v-40a8e85d><span class="function" data-v-40a8e85d>function </span><span class="word" data-v-40a8e85d>fn</span> <span class="brackets" data-v-40a8e85d>(</span><span class="word" data-v-40a8e85d>x,y</span> <span class="brackets" data-v-40a8e85d>){</span></div><div class="padTwo VSL" data-v-40a8e85d><div data-v-40a8e85d><span class="comment" data-v-40a8e85d>//如果變數x沒有被定義,那麼在使用!來取得布林相反值時,得到true,因為undefined被轉換為布林值時為false,而取其相反值則是true。</span></div><span class="then" data-v-40a8e85d>if</span> <span class="brackets" data-v-40a8e85d>(</span><span class="number" data-v-40a8e85d>!x</span> <span class="then" data-v-40a8e85d>|| </span><span class="number" data-v-40a8e85d>!y</span> <span class="brackets" data-v-40a8e85d>){</span><div data-v-40a8e85d><div class="padTwo VSL" data-v-40a8e85d><div data-v-40a8e85d><span class="comment" data-v-40a8e85d>//當undefined時,為true</span></div><span class="function" data-v-40a8e85d>throw </span><span class="brackets" data-v-40a8e85d>(</span><span class="src" data-v-40a8e85d>&quot;沒有參數傳遞進來&quot;</span><span class="brackets" data-v-40a8e85d>)</span><div data-v-40a8e85d><span class="comment" data-v-40a8e85d>//發現不return值了,一扔錯誤,直接中斷</span></div><span class="function" data-v-40a8e85d>throw </span><span class="then" data-v-40a8e85d>new </span><span class="word" data-v-40a8e85d>Error </span><span class="brackets" data-v-40a8e85d>(</span><span class="src" data-v-40a8e85d>&quot;沒有參數傳遞進來&quot;</span><span class="brackets" data-v-40a8e85d>)</span><div data-v-40a8e85d><span class="comment" data-v-40a8e85d>//一般用這個,效果一樣,且會標註第幾行</span></div><div data-v-40a8e85d></div></div><div data-v-40a8e85d><span class="brackets" data-v-40a8e85d>}</span></div></div></div><div class="padTwo VSL" data-v-40a8e85d><span class="then" data-v-40a8e85d>return </span> <span class="word" data-v-40a8e85d>x</span><span class="then" data-v-40a8e85d>+</span> <span class="word" data-v-40a8e85d>y</span><div data-v-40a8e85d><span class="comment" data-v-40a8e85d>// 我沒有傳值 x+y 是 undefined + undefined = NaN</span></div><div data-v-40a8e85d></div></div><div data-v-40a8e85d><span class="brackets" data-v-40a8e85d>}</span></div></div><p class="fz28" data-v-40a8e85d>總結</p><p class="fz28" data-v-40a8e85d>1. throw 後面跟異常訊息,程式也會中止執行</p><p class="fz28" data-v-40a8e85d>2. Error 對象配合 throw 可設置詳細錯誤訊息</p><div id="" class="articleCardTitle cor36 fz34" data-v-40a8e85d>try catch</div><div class="bgcVS" data-v-40a8e85d><div data-v-40a8e85d><span class="then" data-v-40a8e85d>＜</span> <span class="number" data-v-40a8e85d>p</span><span class="then" data-v-40a8e85d>&gt;</span> <span class="word" data-v-40a8e85d>test</span><span class="then" data-v-40a8e85d>＜/</span> <span class="number" data-v-40a8e85d>p</span><span class="then" data-v-40a8e85d>&gt;</span></div><br data-v-40a8e85d><div data-v-40a8e85d><span class="function" data-v-40a8e85d>function </span><span class="word" data-v-40a8e85d>fn</span> <span class="brackets" data-v-40a8e85d>(){</span></div><div class="padTwo VSL" data-v-40a8e85d><span class="variable" data-v-40a8e85d>try</span> <span class="brackets" data-v-40a8e85d>{</span><div data-v-40a8e85d><div class="padTwo VSL" data-v-40a8e85d><span class="comment" data-v-40a8e85d>//try寫可能發送錯誤的代碼</span></div><div class="padTwo VSL" data-v-40a8e85d><div data-v-40a8e85d><span class="function" data-v-40a8e85d>const </span><span class="word" data-v-40a8e85d>p</span> <span class="then" data-v-40a8e85d>=</span><span class="word" data-v-40a8e85d>document</span><span class="variable" data-v-40a8e85d>.querySelector</span><span class="brackets" data-v-40a8e85d>(</span><span class="src" data-v-40a8e85d>&quot;.p&quot;</span><span class="brackets" data-v-40a8e85d>) </span><span class="comment" data-v-40a8e85d>//往錯誤的catch(){}走</span></div><div data-v-40a8e85d><span class="comment" data-v-40a8e85d>//const p = document.querySelector(&quot;p&quot;) // 正確往下走</span></div><div data-v-40a8e85d><span class="word" data-v-40a8e85d>p.style.color</span><span class="then" data-v-40a8e85d>=</span> <span class="src" data-v-40a8e85d>&quot;red&quot;</span></div><div data-v-40a8e85d></div></div></div><div data-v-40a8e85d><span class="brackets" data-v-40a8e85d>}</span><span class="variable" data-v-40a8e85d>catch</span><span class="brackets" data-v-40a8e85d>(</span> <span class="word" data-v-40a8e85d>err</span><span class="brackets" data-v-40a8e85d>){ </span><span class="comment" data-v-40a8e85d>// 注意catch後面() , ()裡面是形參 寫什麼都行</span><div data-v-40a8e85d><div class="padTwo VSL" data-v-40a8e85d><div data-v-40a8e85d><span class="comment" data-v-40a8e85d>// 這邊拋錯後 依然會繼續執行</span></div><div data-v-40a8e85d><span class="comment" data-v-40a8e85d>// 攔截錯誤,提示瀏覽器提供的錯誤訊息,但不中斷程式執行</span></div><div data-v-40a8e85d><span class="word" data-v-40a8e85d>console.</span><span class="variable" data-v-40a8e85d>log</span><span class="brackets" data-v-40a8e85d>(</span><span class="word" data-v-40a8e85d>err</span><span class="word" data-v-40a8e85d>.message</span><span class="brackets" data-v-40a8e85d>)</span></div><span class="comment" data-v-40a8e85d>//err是我的形參可以自訂,message是固定的屬性</span><div data-v-40a8e85d><span class="function" data-v-40a8e85d>throw </span><span class="then" data-v-40a8e85d>new </span><span class="brackets" data-v-40a8e85d>Error</span><span class="brackets" data-v-40a8e85d>(</span><span class="src" data-v-40a8e85d>&quot;選擇器選取錯誤&quot;</span><span class="brackets" data-v-40a8e85d>)</span></div><div data-v-40a8e85d><span class="comment" data-v-40a8e85d>//需要加return中斷程式</span></div><div data-v-40a8e85d><span class="comment" data-v-40a8e85d>// return </span></div><div data-v-40a8e85d></div></div><div data-v-40a8e85d><span class="brackets" data-v-40a8e85d>}</span></div><div data-v-40a8e85d><span class="function" data-v-40a8e85d>finally</span><span class="brackets" data-v-40a8e85d>{</span></div><div class="padTwo VSL" data-v-40a8e85d><span class="comment" data-v-40a8e85d>//不管程式對不對,一定會執行的代碼</span><div data-v-40a8e85d><span class="word" data-v-40a8e85d>console.</span><span class="variable" data-v-40a8e85d>log</span><span class="brackets" data-v-40a8e85d>(</span><span class="src" data-v-40a8e85d>&quot;比如可用在獲取資料的轉圈&quot;</span><span class="brackets" data-v-40a8e85d>)</span></div><div data-v-40a8e85d></div></div><div data-v-40a8e85d><span class="brackets" data-v-40a8e85d>}</span></div><div data-v-40a8e85d><span class="word" data-v-40a8e85d>console.</span><span class="variable" data-v-40a8e85d>log</span><span class="brackets" data-v-40a8e85d>(</span><span class="number" data-v-40a8e85d>11</span><span class="brackets" data-v-40a8e85d>)</span></div></div></div></div><div data-v-40a8e85d><span class="brackets" data-v-40a8e85d>}</span></div><div data-v-40a8e85d><span class="word" data-v-40a8e85d>fn</span> <span class="brackets" data-v-40a8e85d>()</span></div></div><p class="fz28" data-v-40a8e85d>小結</p><p class="fz28" data-v-40a8e85d>1. try...catch用於捕獲錯誤訊息</p><p class="fz28" data-v-40a8e85d>2. 將預估可能發生錯誤的代碼寫在 try</p><p class="fz28" data-v-40a8e85d>3. 如果 try 錯誤 執行 catch 並獲取錯誤訊息</p><p class="fz28" data-v-40a8e85d>4. finally 不管怎樣 都執行</p><div id="" class="articleCardTitle cor36 fz34" data-v-40a8e85d>debugger</div><p class="fz28" data-v-40a8e85d>代碼特別長 一打斷點 就自動跳過來了</p><p class="fz28" data-v-40a8e85d>目的</p><p class="fz28" data-v-40a8e85d>在運行時 可直接跳到這邊 不用再開sorce...</p><div class="bgcVS" data-v-40a8e85d><div data-v-40a8e85d><span class="function" data-v-40a8e85d>function </span><span class="variable" data-v-40a8e85d>deepCopy</span><span class="brackets" data-v-40a8e85d>( </span><span class="word" data-v-40a8e85d>newObj, oldObj </span><span class="brackets" data-v-40a8e85d>){</span></div><div class="padTwo VSL" data-v-40a8e85d><span class="number" data-v-40a8e85d>debugger</span></div><div class="padTwo VSL" data-v-40a8e85d><span class="then" data-v-40a8e85d>for </span> <span class="brackets" data-v-40a8e85d>(</span><span class="function" data-v-40a8e85d>let </span> <span class="word" data-v-40a8e85d>k </span><span class="function" data-v-40a8e85d>in </span><span class="word" data-v-40a8e85d>oldObj </span><span class="brackets" data-v-40a8e85d>){</span><div data-v-40a8e85d><div class="padTwo VSL" data-v-40a8e85d><div data-v-40a8e85d><span class="word" data-v-40a8e85d>newObj</span><span class="brackets" data-v-40a8e85d>[ </span><span class="word" data-v-40a8e85d>k </span><span class="brackets" data-v-40a8e85d>]</span><span class="then" data-v-40a8e85d>= </span><span class="word" data-v-40a8e85d>oldObj</span><span class="brackets" data-v-40a8e85d>[ </span><span class="word" data-v-40a8e85d>k </span><span class="brackets" data-v-40a8e85d>]</span></div></div><div data-v-40a8e85d><span class="brackets" data-v-40a8e85d>}</span></div></div></div><div data-v-40a8e85d><span class="brackets" data-v-40a8e85d>}</span></div></div><div id="threetips006" class="articleCardTitle cor36 fz34" data-v-40a8e85d> 7.6 this 指向 </div><table class="fz30" data-v-40a8e85d><tr data-v-40a8e85d><th data-v-40a8e85d><div class="pad20" data-v-40a8e85d>調用方式</div></th><th data-v-40a8e85d><div class="pad20" data-v-40a8e85d>示例</div></th><th data-v-40a8e85d><div class="pad20" data-v-40a8e85d>函數中this指向</div></th></tr><tr data-v-40a8e85d><td data-v-40a8e85d><div class="pad20" data-v-40a8e85d>通過new調用</div></td><td data-v-40a8e85d><div class="pad20" data-v-40a8e85d>mew method()</div></td><td data-v-40a8e85d><div class="pad20" data-v-40a8e85d>新物件</div></td></tr><tr data-v-40a8e85d><td data-v-40a8e85d><div class="pad20" data-v-40a8e85d>直接調用</div></td><td data-v-40a8e85d><div class="pad20" data-v-40a8e85d>method()</div></td><td data-v-40a8e85d><div class="pad20" data-v-40a8e85d>全局對象window</div></td></tr><tr data-v-40a8e85d><td data-v-40a8e85d><div class="pad20" data-v-40a8e85d>通過物件調用</div></td><td data-v-40a8e85d><div class="pad20" data-v-40a8e85d>obj.method()</div></td><td data-v-40a8e85d><div class="pad20" data-v-40a8e85d>前面的物件</div></td></tr><tr data-v-40a8e85d><td data-v-40a8e85d><div class="pad20" data-v-40a8e85d>call.apply.bind</div></td><td data-v-40a8e85d><div class="pad20" data-v-40a8e85d>method.call(ctx)</div></td><td data-v-40a8e85d><div class="pad20" data-v-40a8e85d>第一個參數</div></td></tr></table><br data-v-40a8e85d><br data-v-40a8e85d><p class="fz28" data-v-40a8e85d>1. 普通函數 this</p><p class="fz40" data-v-40a8e85d>誰調用 this的值 指向誰</p><div class="bgcVS" data-v-40a8e85d><div data-v-40a8e85d><span class="word" data-v-40a8e85d>console.</span><span class="variable" data-v-40a8e85d>log</span> <span class="brackets" data-v-40a8e85d>(</span><span class="then" data-v-40a8e85d>this</span> <span class="brackets" data-v-40a8e85d>)</span><span class="comment" data-v-40a8e85d>//window</span></div><br data-v-40a8e85d><div data-v-40a8e85d><span class="function" data-v-40a8e85d>function </span><span class="word" data-v-40a8e85d>fn</span> <span class="brackets" data-v-40a8e85d>(){</span></div><div class="padTwo VSL" data-v-40a8e85d><span class="word" data-v-40a8e85d>console.</span><span class="variable" data-v-40a8e85d>log</span> <span class="brackets" data-v-40a8e85d>(</span><span class="then" data-v-40a8e85d>this</span> <span class="brackets" data-v-40a8e85d>)</span><span class="comment" data-v-40a8e85d>//window</span><div data-v-40a8e85d></div></div><div data-v-40a8e85d><span class="brackets" data-v-40a8e85d>}</span></div><div data-v-40a8e85d><span class="comment" data-v-40a8e85d>//是 window.fn() // window 調用的指向 window</span></div><br data-v-40a8e85d><div data-v-40a8e85d><span class="variable" data-v-40a8e85d>setTimeout</span><span class="brackets" data-v-40a8e85d>(</span><span class="function" data-v-40a8e85d>function </span><span class="brackets" data-v-40a8e85d>(){</span></div><div class="padTwo VSL" data-v-40a8e85d><span class="word" data-v-40a8e85d>console.</span><span class="variable" data-v-40a8e85d>log</span> <span class="brackets" data-v-40a8e85d>(</span><span class="then" data-v-40a8e85d>this</span> <span class="brackets" data-v-40a8e85d>)</span><span class="comment" data-v-40a8e85d>//window</span><div data-v-40a8e85d></div></div><div data-v-40a8e85d><span class="brackets" data-v-40a8e85d>},</span> <span class="number" data-v-40a8e85d>1000</span><span class="brackets" data-v-40a8e85d>)</span></div><div data-v-40a8e85d><span class="word" data-v-40a8e85d>window</span><span class="variable" data-v-40a8e85d>.setTimeout</span><span class="brackets" data-v-40a8e85d>(</span><span class="function" data-v-40a8e85d>function </span><span class="brackets" data-v-40a8e85d>(){})</span></div><br data-v-40a8e85d><br data-v-40a8e85d><div data-v-40a8e85d><span class="src" data-v-40a8e85d>&quot;use strict&quot;</span><span class="comment" data-v-40a8e85d>//語法要嚴格按照正常語法來寫</span></div><div data-v-40a8e85d><span class="comment" data-v-40a8e85d>//所有變量要先聲明在賦值</span></div><div data-v-40a8e85d><span class="comment" data-v-40a8e85d>//函數不允許聲明多個一樣的</span></div><br data-v-40a8e85d><br data-v-40a8e85d><div data-v-40a8e85d><span class="src" data-v-40a8e85d>&quot;use strict&quot;</span></div><div data-v-40a8e85d><span class="function" data-v-40a8e85d>function </span><span class="word" data-v-40a8e85d>fn</span> <span class="brackets" data-v-40a8e85d>(){</span></div><div class="padTwo VSL" data-v-40a8e85d><span class="word" data-v-40a8e85d>console.</span><span class="variable" data-v-40a8e85d>log</span> <span class="brackets" data-v-40a8e85d>(</span><span class="then" data-v-40a8e85d>this</span> <span class="brackets" data-v-40a8e85d>)</span><span class="comment" data-v-40a8e85d>//undefined</span><div data-v-40a8e85d></div></div><div data-v-40a8e85d><span class="brackets" data-v-40a8e85d>}</span></div><br data-v-40a8e85d><br data-v-40a8e85d><div data-v-40a8e85d><span class="then" data-v-40a8e85d>＜</span> <span class="number" data-v-40a8e85d>button</span><span class="then" data-v-40a8e85d>&gt;</span> <span class="word" data-v-40a8e85d>點擊</span><span class="then" data-v-40a8e85d>＜/</span> <span class="number" data-v-40a8e85d>button</span><span class="then" data-v-40a8e85d>&gt;</span></div><div data-v-40a8e85d><span class="word" data-v-40a8e85d>document</span><span class="variable" data-v-40a8e85d>.querySelector</span><span class="brackets" data-v-40a8e85d>(</span> <span class="src" data-v-40a8e85d>&quot;button&quot;</span><span class="brackets" data-v-40a8e85d>)</span><span class="variable" data-v-40a8e85d>.addEventListener</span><span class="brackets" data-v-40a8e85d>(</span> <span class="src" data-v-40a8e85d>&quot;click&quot;,</span><span class="function" data-v-40a8e85d>function </span><span class="brackets" data-v-40a8e85d>(){</span></div><div class="pTwo VSL" data-v-40a8e85d><span class="word" data-v-40a8e85d>console.</span><span class="variable" data-v-40a8e85d>log</span> <span class="brackets" data-v-40a8e85d>(</span><span class="then" data-v-40a8e85d>this</span> <span class="brackets" data-v-40a8e85d>)</span><span class="comment" data-v-40a8e85d>//button , button 調用了我這個函數</span></div><div data-v-40a8e85d><span class="brackets" data-v-40a8e85d>})</span></div><br data-v-40a8e85d><br data-v-40a8e85d><div data-v-40a8e85d><span class="function" data-v-40a8e85d>const </span><span class="word" data-v-40a8e85d>obj</span> <span class="then" data-v-40a8e85d>=</span><span class="brackets" data-v-40a8e85d>{</span></div><div class="padTwo VSL" data-v-40a8e85d><span class="word" data-v-40a8e85d>sayHi:</span><span class="function" data-v-40a8e85d>function </span><span class="brackets" data-v-40a8e85d>(){</span><div data-v-40a8e85d><div class="pTwo VSL" data-v-40a8e85d><span class="word" data-v-40a8e85d>console.</span><span class="variable" data-v-40a8e85d>log</span><span class="brackets" data-v-40a8e85d>(</span><span class="then" data-v-40a8e85d>this</span><span class="brackets" data-v-40a8e85d>)</span><span class="comment" data-v-40a8e85d>//指向obj</span></div></div><div data-v-40a8e85d><span class="brackets" data-v-40a8e85d>}</span></div></div><div data-v-40a8e85d><span class="brackets" data-v-40a8e85d>}</span></div><div data-v-40a8e85d><span class="word" data-v-40a8e85d>obj.sayHi</span><span class="brackets" data-v-40a8e85d>()</span></div></div><p class="fz28" data-v-40a8e85d>2. 箭頭函數 this</p><p class="fz40" data-v-40a8e85d>箭頭函數 this 根據上下文 , 去上一級作用域找 this</p><br data-v-40a8e85d><p class="fz28" data-v-40a8e85d> 1.箭頭函數 默認 綁定 外層 this 的值, 所以在 箭頭函數中 this 的值和 外層的 this 是一樣的 </p><p class="fz28" data-v-40a8e85d>2.箭頭函數的的 this 引用的就是最近作用域中的 this</p><p class="fz28" data-v-40a8e85d> 3.向外層作用域中 , 一層一層查找 this , 直到有 this 的定義 </p><div class="bgcVS" data-v-40a8e85d><div data-v-40a8e85d><span class="function" data-v-40a8e85d>const </span><span class="word" data-v-40a8e85d>user</span> <span class="then" data-v-40a8e85d>=</span><span class="brackets" data-v-40a8e85d>{</span></div><div class="padTwo VSL" data-v-40a8e85d><div class="bor pad20 disInl" data-v-40a8e85d><span class="word" data-v-40a8e85d>name:</span> <span class="src" data-v-40a8e85d>&quot;wayne&quot;</span><div data-v-40a8e85d><span class="comment" data-v-40a8e85d>//箭頭函數中的this為</span></div><div data-v-40a8e85d><span class="comment" data-v-40a8e85d>//函數聲明環境中的this一致</span></div><div data-v-40a8e85d><span class="word" data-v-40a8e85d>sayHi:</span><span class="brackets" data-v-40a8e85d>()</span><span class="function" data-v-40a8e85d>=&gt;</span><span class="brackets" data-v-40a8e85d>{</span></div><div data-v-40a8e85d><div class="padTwo VSL" data-v-40a8e85d><span class="word" data-v-40a8e85d>console.</span><span class="variable" data-v-40a8e85d>log</span><span class="brackets" data-v-40a8e85d>(</span><span class="then" data-v-40a8e85d>this</span><span class="brackets" data-v-40a8e85d>)</span><span class="comment" data-v-40a8e85d>//箭頭函數裡面沒有this</span><div data-v-40a8e85d><span class="comment" data-v-40a8e85d>//他綁定最近一級的this(這個物件裡面的this)</span></div><div data-v-40a8e85d><span class="comment" data-v-40a8e85d>//物件的this是誰?</span></div><div data-v-40a8e85d><span class="comment" data-v-40a8e85d>//函數有this</span></div><div data-v-40a8e85d><span class="comment" data-v-40a8e85d>//而物件的this是外層 //window</span></div><div data-v-40a8e85d></div></div><div data-v-40a8e85d><span class="brackets" data-v-40a8e85d>},</span></div></div></div></div><div data-v-40a8e85d><span class="brackets" data-v-40a8e85d>}</span></div><br data-v-40a8e85d><br data-v-40a8e85d><div data-v-40a8e85d><span class="function" data-v-40a8e85d>const </span><span class="word" data-v-40a8e85d>btn</span> <span class="then" data-v-40a8e85d>=</span><span class="word" data-v-40a8e85d>document.querySelector</span><span class="brackets" data-v-40a8e85d>(</span> <span class="src" data-v-40a8e85d>&quot;.btn&quot;</span><span class="brackets" data-v-40a8e85d>)</span></div><span class="comment" data-v-40a8e85d>//普通函數指DOM對象</span><div data-v-40a8e85d><span class="word" data-v-40a8e85d>btn.addEventListener</span><span class="brackets" data-v-40a8e85d>(</span> <span class="src" data-v-40a8e85d>&quot;click&quot;,</span><span class="function" data-v-40a8e85d>function</span><span class="brackets" data-v-40a8e85d>(){</span></div><div class="pTwo" data-v-40a8e85d><span class="word" data-v-40a8e85d>console.</span><span class="variable" data-v-40a8e85d>log</span> <span class="brackets" data-v-40a8e85d>(</span><span class="then" data-v-40a8e85d>this</span> <span class="brackets" data-v-40a8e85d>)</span><span class="comment" data-v-40a8e85d>// btn</span></div><div class="brackets" data-v-40a8e85d>}</div><div data-v-40a8e85d><span class="comment" data-v-40a8e85d>// 箭頭函數 此時 this 指向 window</span></div><div data-v-40a8e85d><span class="word" data-v-40a8e85d>btn.addEventListener</span><span class="brackets" data-v-40a8e85d>(</span> <span class="src" data-v-40a8e85d>&quot;click&quot;,</span><span class="brackets" data-v-40a8e85d>()</span><span class="function" data-v-40a8e85d>=&gt; </span><span class="brackets" data-v-40a8e85d>{</span></div><div class="pTwo" data-v-40a8e85d><span class="word" data-v-40a8e85d>console.</span><span class="variable" data-v-40a8e85d>log</span> <span class="brackets" data-v-40a8e85d>(</span><span class="then" data-v-40a8e85d>this</span> <span class="brackets" data-v-40a8e85d>)</span><span class="comment" data-v-40a8e85d>// window</span></div><div class="brackets" data-v-40a8e85d>})</div><br data-v-40a8e85d><br data-v-40a8e85d><p data-v-40a8e85d>原型對象時</p><br data-v-40a8e85d><div data-v-40a8e85d><span class="function" data-v-40a8e85d>function </span><span class="brackets" data-v-40a8e85d>(){}</span></div><div data-v-40a8e85d><span class="word" data-v-40a8e85d>Person.prototype.sayHi</span><span class="then" data-v-40a8e85d>=</span> <span class="brackets" data-v-40a8e85d>()</span><span class="function" data-v-40a8e85d>=&gt;</span> <span class="brackets" data-v-40a8e85d>{</span></div><div class="padTwo VSL" data-v-40a8e85d><span class="word" data-v-40a8e85d>console.</span><span class="variable" data-v-40a8e85d>log</span> <span class="brackets" data-v-40a8e85d>(</span><span class="src" data-v-40a8e85d>&quot;hi&quot;</span> <span class="brackets" data-v-40a8e85d>)</span><div data-v-40a8e85d><span class="word" data-v-40a8e85d>console.</span><span class="variable" data-v-40a8e85d>log</span><span class="brackets" data-v-40a8e85d>(</span> <span class="then" data-v-40a8e85d>this</span><span class="brackets" data-v-40a8e85d>)</span><span class="comment" data-v-40a8e85d>//window</span></div><div data-v-40a8e85d></div></div><div data-v-40a8e85d><span class="brackets" data-v-40a8e85d>}</span></div><div data-v-40a8e85d><span class="comment" data-v-40a8e85d>//構造函數&amp;原型對象裡的this都指向實例</span></div><div data-v-40a8e85d><span class="function" data-v-40a8e85d>const </span> <span class="word" data-v-40a8e85d>p1</span><span class="then" data-v-40a8e85d>=</span> <span class="then" data-v-40a8e85d>new </span><span class="brackets" data-v-40a8e85d>Person()</span><span class="comment" data-v-40a8e85d>//this不指向p1了</span></div></div><p class="fz28" data-v-40a8e85d>總結</p><p class="fz28" data-v-40a8e85d>1. 函數內不存在 this , 沿用上一級的</p><p class="fz28" data-v-40a8e85d>2. 不適用 . . &gt; 構造函數 . 原型函數 . dom 事件函數</p><p class="fz28" data-v-40a8e85d>3. 適用 . . &gt; 需要用上層 this 的地方</p><div id="threetips007" class="articleCardTitle cor36 fz34" data-v-40a8e85d> 7.7 改變 this --- call() </div><br data-v-40a8e85d><p class="fz28" data-v-40a8e85d> 使用 call 方法 <span class="spo cor36" data-v-40a8e85d> 調用函數 </span> , 同時 指定 被調用 函數中的 <span class="spo cor36" data-v-40a8e85d> this 的值 </span></p><div class="bgcVS" data-v-40a8e85d><div data-v-40a8e85d><span class="function" data-v-40a8e85d>const </span><span class="word" data-v-40a8e85d>obj</span> <span class="then" data-v-40a8e85d>=</span><span class="brackets" data-v-40a8e85d>{</span> <span class="word" data-v-40a8e85d>name:</span><span class="src" data-v-40a8e85d>&quot;wayne&quot;</span> <span class="brackets" data-v-40a8e85d>}</span></div><div data-v-40a8e85d><span class="function" data-v-40a8e85d>function </span><span class="word" data-v-40a8e85d>fn</span> <span class="brackets" data-v-40a8e85d>(){</span></div><div class="padTwo VSL" data-v-40a8e85d><span class="word" data-v-40a8e85d>console.</span><span class="variable" data-v-40a8e85d>log</span> <span class="brackets" data-v-40a8e85d>(</span><span class="then" data-v-40a8e85d>this</span> <span class="brackets" data-v-40a8e85d>)</span><span class="comment" data-v-40a8e85d>//window</span><div data-v-40a8e85d></div></div><div data-v-40a8e85d><span class="brackets" data-v-40a8e85d>}</span></div><div data-v-40a8e85d><span class="comment" data-v-40a8e85d>//1.調用函數</span></div><div data-v-40a8e85d><span class="comment" data-v-40a8e85d>//2.改變this指向</span></div><div data-v-40a8e85d><span class="word" data-v-40a8e85d>fn</span> <span class="brackets" data-v-40a8e85d>()</span></div><div data-v-40a8e85d><span class="word" data-v-40a8e85d>fn</span> <span class="variable" data-v-40a8e85d>.call</span><span class="brackets" data-v-40a8e85d>()</span><span class="comment" data-v-40a8e85d>//只調用</span></div><div data-v-40a8e85d><span class="word" data-v-40a8e85d>fn</span> <span class="variable" data-v-40a8e85d>.call</span><span class="brackets" data-v-40a8e85d>(</span> <span class="word" data-v-40a8e85d>obj</span><span class="brackets" data-v-40a8e85d>)</span><span class="comment" data-v-40a8e85d>//打印了obj//代表改變了this指向</span></div><div data-v-40a8e85d><span class="comment" data-v-40a8e85d>// 3. 返回值: 本身在調用函數, 所以返回值就是函數的返回值</span></div><br data-v-40a8e85d><div data-v-40a8e85d><span class="function" data-v-40a8e85d>function </span><span class="word" data-v-40a8e85d>fn</span><span class="brackets" data-v-40a8e85d>(</span> <span class="word" data-v-40a8e85d>x,y</span><span class="brackets" data-v-40a8e85d>){</span></div><div class="padTwo VSL" data-v-40a8e85d><span class="word" data-v-40a8e85d>console.</span><span class="variable" data-v-40a8e85d>log</span> <span class="brackets" data-v-40a8e85d>(</span><span class="then" data-v-40a8e85d>this</span> <span class="brackets" data-v-40a8e85d>)</span><span class="comment" data-v-40a8e85d>//window</span><div data-v-40a8e85d><span class="word" data-v-40a8e85d>console.</span><span class="variable" data-v-40a8e85d>log</span><span class="brackets" data-v-40a8e85d>(</span> <span class="word" data-v-40a8e85d>x</span><span class="then" data-v-40a8e85d>+</span> <span class="word" data-v-40a8e85d>y</span><span class="brackets" data-v-40a8e85d>)</span> <span class="comment" data-v-40a8e85d>//3</span></div><div data-v-40a8e85d></div></div><div data-v-40a8e85d><span class="brackets" data-v-40a8e85d>}</span></div><div data-v-40a8e85d><span class="word" data-v-40a8e85d>fn</span> <span class="variable" data-v-40a8e85d>.call</span><span class="brackets" data-v-40a8e85d>(</span> <span class="word" data-v-40a8e85d>obj,</span><span class="number" data-v-40a8e85d>1,2</span> <span class="brackets" data-v-40a8e85d>)</span></div></div><div id="threetips008" class="articleCardTitle cor36 fz34" data-v-40a8e85d> 7.8 改變 this --- apply() </div><p class="fz28" data-v-40a8e85d> 使用 apply 方法 <span class="spo cor36" data-v-40a8e85d> 調用函數 </span> , 同時 指定 被調用 函數中的 <span class="spo cor36" data-v-40a8e85d> this 的值 </span></p><div class="bgcVS" data-v-40a8e85d><div data-v-40a8e85d><span class="function" data-v-40a8e85d>const </span><span class="word" data-v-40a8e85d>obj</span> <span class="then" data-v-40a8e85d>=</span><span class="brackets" data-v-40a8e85d>{</span> <span class="word" data-v-40a8e85d>name:</span><span class="src" data-v-40a8e85d>&quot;wayne&quot;</span> <span class="brackets" data-v-40a8e85d>}</span></div><div data-v-40a8e85d><span class="function" data-v-40a8e85d>function </span><span class="word" data-v-40a8e85d>fn</span> <span class="brackets" data-v-40a8e85d>(){</span></div><div class="padTwo VSL" data-v-40a8e85d><span class="word" data-v-40a8e85d>console.</span><span class="variable" data-v-40a8e85d>log</span> <span class="brackets" data-v-40a8e85d>(</span><span class="then" data-v-40a8e85d>this</span> <span class="brackets" data-v-40a8e85d>)</span><span class="comment" data-v-40a8e85d>//window</span><div data-v-40a8e85d></div></div><div data-v-40a8e85d><span class="brackets" data-v-40a8e85d>}</span></div><div data-v-40a8e85d><span class="comment" data-v-40a8e85d>//1.調用函數</span></div><div data-v-40a8e85d><span class="comment" data-v-40a8e85d>//2.改變this指向</span></div><div data-v-40a8e85d><span class="word" data-v-40a8e85d>fn</span> <span class="variable" data-v-40a8e85d>.apply</span><span class="brackets" data-v-40a8e85d>(</span> <span class="word" data-v-40a8e85d>obj</span><span class="brackets" data-v-40a8e85d>)</span></div><br data-v-40a8e85d><div data-v-40a8e85d><span class="function" data-v-40a8e85d>function </span><span class="word" data-v-40a8e85d>fn</span> <span class="brackets" data-v-40a8e85d>(</span><span class="word" data-v-40a8e85d>x,y</span> <span class="brackets" data-v-40a8e85d>){</span></div><div class="padTwo VSL" data-v-40a8e85d><span class="word" data-v-40a8e85d>console.</span><span class="variable" data-v-40a8e85d>log</span> <span class="brackets" data-v-40a8e85d>(</span><span class="then" data-v-40a8e85d>this</span> <span class="brackets" data-v-40a8e85d>)</span><span class="comment" data-v-40a8e85d>//window</span><div data-v-40a8e85d><span class="word" data-v-40a8e85d>console.</span><span class="variable" data-v-40a8e85d>log</span><span class="brackets" data-v-40a8e85d>(</span> <span class="word" data-v-40a8e85d>x+y</span><span class="brackets" data-v-40a8e85d>)</span></div><div data-v-40a8e85d></div></div><div data-v-40a8e85d><span class="brackets" data-v-40a8e85d>}</span></div><div data-v-40a8e85d><span class="word" data-v-40a8e85d>fn</span> <span class="word" data-v-40a8e85d>.</span><span class="variable" data-v-40a8e85d>apply</span><span class="brackets" data-v-40a8e85d>(</span> <span class="word" data-v-40a8e85d>obj, </span><span class="brackets" data-v-40a8e85d>[</span> <span class="number" data-v-40a8e85d>1, 2 </span><span class="brackets" data-v-40a8e85d>])</span></div><div data-v-40a8e85d><span class="comment" data-v-40a8e85d>// 3. 返回值: 本身在調用函數, 所以返回值就是函數的返回值</span></div><div data-v-40a8e85d><span class="comment" data-v-40a8e85d>//使用場景:用Math.max()求數組最大值</span></div><br data-v-40a8e85d><div data-v-40a8e85d><span class="function" data-v-40a8e85d>const </span><span class="variable" data-v-40a8e85d>max</span> <span class="then" data-v-40a8e85d>=</span><span class="word" data-v-40a8e85d>Math</span><span class="variable" data-v-40a8e85d>.max</span><span class="brackets" data-v-40a8e85d>(</span> <span class="number" data-v-40a8e85d>1,2,3</span><span class="brackets" data-v-40a8e85d>)</span></div><div data-v-40a8e85d><span class="word" data-v-40a8e85d>console.</span><span class="variable" data-v-40a8e85d>log</span> <span class="brackets" data-v-40a8e85d>(</span><span class="variable" data-v-40a8e85d>max</span> <span class="brackets" data-v-40a8e85d>)</span></div><br data-v-40a8e85d><div data-v-40a8e85d><span class="function" data-v-40a8e85d>const </span><span class="variable" data-v-40a8e85d>max</span> <span class="then" data-v-40a8e85d>=</span><span class="word" data-v-40a8e85d>Math</span><span class="variable" data-v-40a8e85d>.max.apply</span><span class="brackets" data-v-40a8e85d>(</span> <span class="word" data-v-40a8e85d>Math,</span><span class="brackets" data-v-40a8e85d>[</span> <span class="number" data-v-40a8e85d>1,2,3</span><span class="brackets" data-v-40a8e85d>])</span></div><div data-v-40a8e85d><span class="word" data-v-40a8e85d>console.</span><span class="variable" data-v-40a8e85d>log</span> <span class="brackets" data-v-40a8e85d>(</span><span class="variable" data-v-40a8e85d>max</span> <span class="brackets" data-v-40a8e85d>)</span></div><br data-v-40a8e85d><div data-v-40a8e85d><span class="function" data-v-40a8e85d>const </span><span class="word" data-v-40a8e85d>arr</span> <span class="then" data-v-40a8e85d>=</span><span class="brackets" data-v-40a8e85d>[</span><span class="number" data-v-40a8e85d>100,44,77</span><span class="brackets" data-v-40a8e85d>]</span></div><div data-v-40a8e85d><span class="function" data-v-40a8e85d>const </span><span class="variable" data-v-40a8e85d>max</span> <span class="then" data-v-40a8e85d>=</span><span class="word" data-v-40a8e85d>Math</span><span class="variable" data-v-40a8e85d>.max.apply</span><span class="brackets" data-v-40a8e85d>(</span><span class="word" data-v-40a8e85d>Math,arr</span> <span class="brackets" data-v-40a8e85d>)</span></div><div data-v-40a8e85d><span class="function" data-v-40a8e85d>const </span><span class="variable" data-v-40a8e85d>min</span> <span class="then" data-v-40a8e85d>=</span><span class="word" data-v-40a8e85d>Math</span><span class="variable" data-v-40a8e85d>.max.apply</span><span class="brackets" data-v-40a8e85d>(</span><span class="word" data-v-40a8e85d>Math,arr</span> <span class="brackets" data-v-40a8e85d>)</span></div><div data-v-40a8e85d><span class="function" data-v-40a8e85d>const </span><span class="variable" data-v-40a8e85d>min</span> <span class="then" data-v-40a8e85d>=</span><span class="word" data-v-40a8e85d>Math</span><span class="variable" data-v-40a8e85d>.max.apply</span><span class="brackets" data-v-40a8e85d>(</span><span class="word" data-v-40a8e85d>null,arr</span> <span class="brackets" data-v-40a8e85d>)</span><span class="comment" data-v-40a8e85d>//this指向用null不改變也可以</span></div><div data-v-40a8e85d><span class="word" data-v-40a8e85d>console.</span><span class="variable" data-v-40a8e85d>log</span> <span class="brackets" data-v-40a8e85d>(</span><span class="variable" data-v-40a8e85d>max</span> <span class="brackets" data-v-40a8e85d>)</span></div><br data-v-40a8e85d><br data-v-40a8e85d><p data-v-40a8e85d>求數組最大值</p><p data-v-40a8e85d>1.for循環</p><p data-v-40a8e85d>2.apply(要綁定的this,[數組])</p><p data-v-40a8e85d>3.console.log(Math.max(...arr))</p></div><p class="fz28" data-v-40a8e85d>call &amp; apply</p><p class="fz28" data-v-40a8e85d>都能調用函數 , 改變 this 指向</p><p class="fz28" data-v-40a8e85d>差在 參數不一樣 , apply 傳遞的 必須是 數組</p><div id="threetips009" class="articleCardTitle cor36 fz34" data-v-40a8e85d> 7.9 改變 this --- bind() </div><div class="bgcVS" data-v-40a8e85d><div data-v-40a8e85d><span class="function" data-v-40a8e85d>const </span><span class="word" data-v-40a8e85d>obj</span> <span class="then" data-v-40a8e85d>=</span><span class="brackets" data-v-40a8e85d>{</span> <span class="word" data-v-40a8e85d>name:</span><span class="src" data-v-40a8e85d>&quot;wayne&quot;</span> <span class="brackets" data-v-40a8e85d>}</span></div><div data-v-40a8e85d><span class="function" data-v-40a8e85d>function </span><span class="word" data-v-40a8e85d>fn</span> <span class="brackets" data-v-40a8e85d>(){</span></div><div class="padTwo VSL" data-v-40a8e85d><span class="word" data-v-40a8e85d>console.</span><span class="variable" data-v-40a8e85d>log</span> <span class="brackets" data-v-40a8e85d>(</span><span class="then" data-v-40a8e85d>this</span> <span class="brackets" data-v-40a8e85d>)</span><div data-v-40a8e85d></div></div><div data-v-40a8e85d><span class="brackets" data-v-40a8e85d>}</span></div><div data-v-40a8e85d><span class="comment" data-v-40a8e85d>//1.bind不調用函數</span></div><div data-v-40a8e85d><span class="comment" data-v-40a8e85d>//2.能改變this指向</span></div><div data-v-40a8e85d><span class="word" data-v-40a8e85d>fn</span><span class="variable" data-v-40a8e85d>.bind</span><span class="brackets" data-v-40a8e85d>(</span> <span class="word" data-v-40a8e85d>obj</span><span class="brackets" data-v-40a8e85d>)</span></div><div data-v-40a8e85d><span class="comment" data-v-40a8e85d>//3.返回值:返回 已改變this後 的函數</span></div><div data-v-40a8e85d><span class="function" data-v-40a8e85d>const </span><span class="word" data-v-40a8e85d>fun</span> <span class="then" data-v-40a8e85d>=</span><span class="word" data-v-40a8e85d>fn</span><span class="variable" data-v-40a8e85d>.bind</span><span class="brackets" data-v-40a8e85d>(</span> <span class="word" data-v-40a8e85d>obj</span><span class="brackets" data-v-40a8e85d>)</span></div><div data-v-40a8e85d><span class="word" data-v-40a8e85d>console.</span><span class="variable" data-v-40a8e85d>log</span><span class="brackets" data-v-40a8e85d>(</span><span class="word" data-v-40a8e85d>fun</span><span class="brackets" data-v-40a8e85d>)</span></div><div data-v-40a8e85d><span class="word" data-v-40a8e85d>fun</span><span class="brackets" data-v-40a8e85d>()</span></div><br data-v-40a8e85d><br data-v-40a8e85d><p data-v-40a8e85d>場景: 改變定時器內的 this 指向</p><br data-v-40a8e85d><p data-v-40a8e85d>需求: 有一個按鈕 , 點擊後禁用 , 2 秒後開啟</p><br data-v-40a8e85d><div data-v-40a8e85d><span class="then" data-v-40a8e85d>＜</span> <span class="number" data-v-40a8e85d>button</span><span class="then" data-v-40a8e85d>&gt;</span> <span class="word" data-v-40a8e85d>發送信息</span><span class="then" data-v-40a8e85d>＜/</span> <span class="number" data-v-40a8e85d>button</span><span class="then" data-v-40a8e85d>&gt;</span></div><div data-v-40a8e85d><span class="function" data-v-40a8e85d>const </span><span class="word" data-v-40a8e85d>btn</span> <span class="then" data-v-40a8e85d>=</span><span class="word" data-v-40a8e85d>document</span><span class="variable" data-v-40a8e85d>.querySelector</span><span class="brackets" data-v-40a8e85d>(</span> <span class="src" data-v-40a8e85d>&quot;button&quot;</span><span class="brackets" data-v-40a8e85d>)</span></div><div data-v-40a8e85d><span class="word" data-v-40a8e85d>btn</span><span class="variable" data-v-40a8e85d>.addEventListener</span><span class="brackets" data-v-40a8e85d>(</span> <span class="src" data-v-40a8e85d>&quot;click&quot;</span><span class="then" data-v-40a8e85d>,</span><span class="function" data-v-40a8e85d>function </span><span class="brackets" data-v-40a8e85d>() { </span><span class="comment" data-v-40a8e85d> //回調</span></div><div class="padTwo VSL" data-v-40a8e85d><span class="then" data-v-40a8e85d>this</span><span class="variable" data-v-40a8e85d>.disabled</span><span class="then" data-v-40a8e85d>=</span> <span class="number" data-v-40a8e85d>true</span><span class="comment" data-v-40a8e85d>//這樣btn改名btn111也可以</span><div data-v-40a8e85d></div></div><div class="padTwo VSL" data-v-40a8e85d><span class="variable" data-v-40a8e85d>setTimeout</span><span class="brackets" data-v-40a8e85d>(</span><span class="function" data-v-40a8e85d>function </span><span class="brackets" data-v-40a8e85d>(){</span><div data-v-40a8e85d><div class="padTwo VSL" data-v-40a8e85d><span class="then" data-v-40a8e85d>this</span><span class="variable" data-v-40a8e85d>.disabled</span><span class="then" data-v-40a8e85d>=</span> <span class="number" data-v-40a8e85d>false</span><div data-v-40a8e85d></div></div></div><div data-v-40a8e85d><span class="brackets" data-v-40a8e85d>},</span><span class="number" data-v-40a8e85d>2000</span> <span class="brackets" data-v-40a8e85d>)</span></div></div><div data-v-40a8e85d><span class="brackets" data-v-40a8e85d>})</span></div><br data-v-40a8e85d><p data-v-40a8e85d>出問題, setTimeout 裡面的 this 指向 window</p><br data-v-40a8e85d><div data-v-40a8e85d><span class="then" data-v-40a8e85d>＜</span> <span class="number" data-v-40a8e85d>button</span><span class="then" data-v-40a8e85d>&gt;</span> <span class="word" data-v-40a8e85d>發送信息</span><span class="then" data-v-40a8e85d>＜/</span> <span class="number" data-v-40a8e85d>button</span><span class="then" data-v-40a8e85d>&gt;</span></div><div data-v-40a8e85d><span class="function" data-v-40a8e85d>const </span><span class="word" data-v-40a8e85d>btn</span> <span class="then" data-v-40a8e85d>=</span><span class="word" data-v-40a8e85d>document</span><span class="variable" data-v-40a8e85d>.querySelector</span><span class="brackets" data-v-40a8e85d>(</span> <span class="src" data-v-40a8e85d>&quot;button&quot;</span><span class="brackets" data-v-40a8e85d>)</span></div><div data-v-40a8e85d><span class="word" data-v-40a8e85d>btn</span><span class="variable" data-v-40a8e85d>.addEventListener</span><span class="brackets" data-v-40a8e85d>(</span> <span class="src" data-v-40a8e85d>&quot;click&quot;</span><span class="then" data-v-40a8e85d>,</span><span class="function" data-v-40a8e85d>function </span><span class="brackets" data-v-40a8e85d>() { </span><span class="comment" data-v-40a8e85d> //回調</span></div><div class="padTwo VSL" data-v-40a8e85d><span class="then" data-v-40a8e85d>this</span><span class="variable" data-v-40a8e85d>.disabled</span><span class="then" data-v-40a8e85d>=</span> <span class="number" data-v-40a8e85d>true</span><span class="comment" data-v-40a8e85d>//這樣btn改名btn111也可以</span><div data-v-40a8e85d></div></div><div class="padTwo VSL" data-v-40a8e85d><span class="variable" data-v-40a8e85d>setTimeout</span><span class="brackets" data-v-40a8e85d>(</span><span class="function" data-v-40a8e85d>function </span><span class="brackets" data-v-40a8e85d>(){</span><div data-v-40a8e85d><div class="padTwo VSL" data-v-40a8e85d><span class="then" data-v-40a8e85d>btn</span><span class="variable" data-v-40a8e85d>.disabled</span><span class="then" data-v-40a8e85d>=</span> <span class="number" data-v-40a8e85d>false</span><div data-v-40a8e85d></div></div></div><div data-v-40a8e85d><span class="brackets" data-v-40a8e85d>},</span><span class="number" data-v-40a8e85d>2000</span> <span class="brackets" data-v-40a8e85d>)</span></div></div><div data-v-40a8e85d><span class="brackets" data-v-40a8e85d>})</span></div><br data-v-40a8e85d><br data-v-40a8e85d><div data-v-40a8e85d><span class="then" data-v-40a8e85d>＜</span> <span class="number" data-v-40a8e85d>button</span><span class="then" data-v-40a8e85d>&gt;</span> <span class="word" data-v-40a8e85d>發送信息</span><span class="then" data-v-40a8e85d>＜/</span> <span class="number" data-v-40a8e85d>button</span><span class="then" data-v-40a8e85d>&gt;</span></div><div data-v-40a8e85d><span class="function" data-v-40a8e85d>const </span><span class="word" data-v-40a8e85d>btn</span> <span class="then" data-v-40a8e85d>=</span><span class="word" data-v-40a8e85d>document</span><span class="variable" data-v-40a8e85d>.querySelector</span><span class="brackets" data-v-40a8e85d>(</span> <span class="src" data-v-40a8e85d>&quot;button&quot;</span><span class="brackets" data-v-40a8e85d>)</span></div><div data-v-40a8e85d><span class="word" data-v-40a8e85d>btn</span><span class="variable" data-v-40a8e85d>.addEventListener</span><span class="brackets" data-v-40a8e85d>(</span> <span class="src" data-v-40a8e85d>&quot;click&quot;</span><span class="then" data-v-40a8e85d>,</span><span class="function" data-v-40a8e85d>function </span><span class="brackets" data-v-40a8e85d>() { </span><span class="comment" data-v-40a8e85d> //回調</span></div><div class="padTwo VSL" data-v-40a8e85d><span class="then" data-v-40a8e85d>this</span><span class="variable" data-v-40a8e85d>.disabled</span><span class="then" data-v-40a8e85d>=</span> <span class="number" data-v-40a8e85d>true</span><span class="comment" data-v-40a8e85d>//這樣btn改名btn111也可以</span><div data-v-40a8e85d></div></div><div class="padTwo VSL" data-v-40a8e85d><span class="variable" data-v-40a8e85d>setTimeout</span><span class="brackets" data-v-40a8e85d>(</span><span class="function" data-v-40a8e85d>function </span><span class="brackets" data-v-40a8e85d>(){</span><div data-v-40a8e85d><div class="padTwo VSL" data-v-40a8e85d><div data-v-40a8e85d><span class="comment" data-v-40a8e85d>//在這個普通函數裡面,我們要this由原來的window改為btn</span></div><span class="then" data-v-40a8e85d>this</span><span class="variable" data-v-40a8e85d>.disabled</span><span class="then" data-v-40a8e85d>=</span> <span class="number" data-v-40a8e85d>false</span><div data-v-40a8e85d></div></div></div><div data-v-40a8e85d><span class="brackets" data-v-40a8e85d>}</span><span class="variable" data-v-40a8e85d>.bind</span><span class="brackets" data-v-40a8e85d>( btn ), </span><span class="number" data-v-40a8e85d>2000</span> <span class="brackets" data-v-40a8e85d>)</span></div></div><div data-v-40a8e85d><span class="brackets" data-v-40a8e85d>})</span></div><br data-v-40a8e85d><hr data-v-40a8e85d><div data-v-40a8e85d><img style="width:100%;" src="'+gf+'" data-v-40a8e85d></div><hr data-v-40a8e85d><br data-v-40a8e85d><div data-v-40a8e85d><span class="then" data-v-40a8e85d>＜</span> <span class="number" data-v-40a8e85d>button</span><span class="then" data-v-40a8e85d>&gt;</span> <span class="word" data-v-40a8e85d>發送信息</span><span class="then" data-v-40a8e85d>＜/</span> <span class="number" data-v-40a8e85d>button</span><span class="then" data-v-40a8e85d>&gt;</span></div><div data-v-40a8e85d><span class="function" data-v-40a8e85d>const </span><span class="word" data-v-40a8e85d>btn</span> <span class="then" data-v-40a8e85d>=</span><span class="word" data-v-40a8e85d>document</span><span class="variable" data-v-40a8e85d>.querySelector</span><span class="brackets" data-v-40a8e85d>(</span> <span class="src" data-v-40a8e85d>&quot;button&quot;</span><span class="brackets" data-v-40a8e85d>)</span></div><div data-v-40a8e85d><span class="word" data-v-40a8e85d>btn</span><span class="variable" data-v-40a8e85d>.addEventListener</span><span class="brackets" data-v-40a8e85d>(</span> <span class="src" data-v-40a8e85d>&quot;click&quot;</span><span class="then" data-v-40a8e85d>,</span><span class="function" data-v-40a8e85d>function </span><span class="brackets" data-v-40a8e85d>() { </span><span class="comment" data-v-40a8e85d> //回調</span></div><div class="padTwo VSL" data-v-40a8e85d><span class="then" data-v-40a8e85d>this</span><span class="variable" data-v-40a8e85d>.disabled</span><span class="then" data-v-40a8e85d>=</span> <span class="number" data-v-40a8e85d>true</span><span class="comment" data-v-40a8e85d>//這樣btn改名btn111也可以</span><div data-v-40a8e85d></div></div><div class="padTwo VSL" data-v-40a8e85d><span class="variable" data-v-40a8e85d>setTimeout</span><span class="brackets" data-v-40a8e85d>(</span><span class="function" data-v-40a8e85d>function </span><span class="brackets" data-v-40a8e85d>(){</span><div data-v-40a8e85d><div class="padTwo VSL" data-v-40a8e85d><div data-v-40a8e85d><span class="comment" data-v-40a8e85d>//在這個普通函數裡面,我們要this由原來的window改為btn</span></div><span class="then" data-v-40a8e85d>this</span><span class="variable" data-v-40a8e85d>.disabled</span><span class="then" data-v-40a8e85d>=</span> <span class="number" data-v-40a8e85d>false</span><div data-v-40a8e85d></div></div></div><div data-v-40a8e85d><span class="brackets" data-v-40a8e85d>}</span><span class="variable" data-v-40a8e85d>.bind</span><span class="brackets" data-v-40a8e85d>(</span> <span class="then" data-v-40a8e85d>this</span><span class="brackets" data-v-40a8e85d>),</span><span class="number" data-v-40a8e85d>2000</span> <span class="brackets" data-v-40a8e85d>)</span></div></div><div data-v-40a8e85d><span class="brackets" data-v-40a8e85d>})</span></div><br data-v-40a8e85d></div><p class="fz28" data-v-40a8e85d>call &amp; apply &amp; bind</p><p class="fz28" data-v-40a8e85d>相同:</p><p class="fz28" data-v-40a8e85d>都可以改變函數內部的 this 指向</p><br data-v-40a8e85d><p class="fz28" data-v-40a8e85d>區別:</p><p class="fz28" data-v-40a8e85d> call &amp; apply 會 調用函數 , 並改變函數內部 this 指向 </p><br data-v-40a8e85d><p class="fz28" data-v-40a8e85d> call &amp; apply 傳遞的參數不一樣 , call (aru1 , aru2) apply ([數組]) </p><br data-v-40a8e85d><p class="fz28" data-v-40a8e85d>bind 不會調用 , 會改變 this 指向</p><br data-v-40a8e85d><p class="fz28" data-v-40a8e85d>場景:</p><p class="fz28" data-v-40a8e85d>call 調用 並 傳遞 參數</p><br data-v-40a8e85d><p class="fz28" data-v-40a8e85d>apply 並用 並 傳遞 數組</p><br data-v-40a8e85d><p class="fz28" data-v-40a8e85d> bind 不調用 , 但想改 this 指向 ex 改定時器內部 this 指向 </p><br data-v-40a8e85d><br data-v-40a8e85d><br data-v-40a8e85d><div id="threetips010" class="articleCardTitle cor36 fz34" data-v-40a8e85d> 7.10 防抖 debounce </div><p class="fz28" data-v-40a8e85d>單位時間內 , 頻繁觸發事件 , 只執行最後一次</p><br data-v-40a8e85d><p class="fz28" data-v-40a8e85d>放技能 , 只要被打斷要重施放</p><br data-v-40a8e85d><p class="fz28" data-v-40a8e85d>場景</p><p class="fz28" data-v-40a8e85d> 搜尋框輸入 , 只需要用戶 最後一次輸入完 , 在發送請求 </p><div class="bgcVS" data-v-40a8e85d><div data-v-40a8e85d><span class="then" data-v-40a8e85d>＜</span> <span class="number" data-v-40a8e85d>input </span><span class="word" data-v-40a8e85d>type</span> <span class="then" data-v-40a8e85d>=</span><span class="src" data-v-40a8e85d>&quot;text&quot;</span> <span class="then" data-v-40a8e85d>&gt;</span></div><div data-v-40a8e85d><span class="function" data-v-40a8e85d>let </span><span class="word" data-v-40a8e85d>oInput</span> <span class="then" data-v-40a8e85d>=</span><span class="word" data-v-40a8e85d>document</span><span class="variable" data-v-40a8e85d>.querySelector</span><span class="brackets" data-v-40a8e85d>(</span> <span class="src" data-v-40a8e85d>&quot;input&quot;</span><span class="brackets" data-v-40a8e85d>)</span></div><div data-v-40a8e85d><span class="function" data-v-40a8e85d>let </span> <span class="word" data-v-40a8e85d>time</span><span class="then" data-v-40a8e85d>=</span> <span class="then" data-v-40a8e85d>null</span></div><div data-v-40a8e85d><span class="word" data-v-40a8e85d>oInput</span><span class="variable" data-v-40a8e85d>.oninput</span><span class="then" data-v-40a8e85d>=</span><span class="function" data-v-40a8e85d>function </span><span class="brackets" data-v-40a8e85d>(){</span></div><div class="padTwo VSL" data-v-40a8e85d><span class="word" data-v-40a8e85d>console</span><span class="variable" data-v-40a8e85d>.log</span><span class="brackets" data-v-40a8e85d>(</span> <span class="then" data-v-40a8e85d>this</span><span class="word" data-v-40a8e85d>.value</span> <span class="brackets" data-v-40a8e85d>)</span><div data-v-40a8e85d></div></div><div data-v-40a8e85d><span class="brackets" data-v-40a8e85d>}</span></div><br data-v-40a8e85d><div data-v-40a8e85d><span class="word" data-v-40a8e85d>oInput</span><span class="variable" data-v-40a8e85d>.oninput</span><span class="then" data-v-40a8e85d>=</span><span class="function" data-v-40a8e85d>function </span><span class="brackets" data-v-40a8e85d>(){</span></div><div class="padTwo VSL" data-v-40a8e85d><span class="then" data-v-40a8e85d>if</span> <span class="brackets" data-v-40a8e85d>(</span><span class="word" data-v-40a8e85d>time</span> <span class="then" data-v-40a8e85d>!==null</span><span class="brackets" data-v-40a8e85d>){</span><div data-v-40a8e85d></div><div class="padTwo VSL" data-v-40a8e85d><span class="word" data-v-40a8e85d>clearTimeout</span><span class="brackets" data-v-40a8e85d>(</span> <span class="word" data-v-40a8e85d>t</span><span class="brackets" data-v-40a8e85d>)</span><div data-v-40a8e85d></div></div><div data-v-40a8e85d><span class="brackets" data-v-40a8e85d>}</span></div><div data-v-40a8e85d><span class="word" data-v-40a8e85d>time</span> <span class="then" data-v-40a8e85d>=</span><span class="variable" data-v-40a8e85d>setTimeout</span><span class="brackets" data-v-40a8e85d>(()</span><span class="function" data-v-40a8e85d>=&gt; </span><span class="brackets" data-v-40a8e85d>{</span><div class="padTwo VSL" data-v-40a8e85d><span class="word" data-v-40a8e85d>console</span><span class="variable" data-v-40a8e85d>.log</span><span class="brackets" data-v-40a8e85d>(</span><span class="then" data-v-40a8e85d>this</span><span class="word" data-v-40a8e85d>.value</span><span class="brackets" data-v-40a8e85d>)</span></div><div data-v-40a8e85d><span class="brackets" data-v-40a8e85d>},</span><span class="number" data-v-40a8e85d>1000</span><span class="brackets" data-v-40a8e85d>)</span></div></div></div><div data-v-40a8e85d><span class="brackets" data-v-40a8e85d>}</span></div><br data-v-40a8e85d><p data-v-40a8e85d>用閉包優化結構</p><div class="dis" data-v-40a8e85d><div class="w100" data-v-40a8e85d><div data-v-40a8e85d><span class="word" data-v-40a8e85d>oInput</span><span class="variable" data-v-40a8e85d>.oninput</span><span class="then" data-v-40a8e85d>=</span><span class="word" data-v-40a8e85d>debounce</span><span class="brackets" data-v-40a8e85d>()</span></div><div data-v-40a8e85d><span class="function" data-v-40a8e85d>function </span><span class="word" data-v-40a8e85d>debounce</span><span class="brackets" data-v-40a8e85d>(){</span></div><div class="padTwo VSL" data-v-40a8e85d><span class="function" data-v-40a8e85d>let </span><span class="word" data-v-40a8e85d>time</span> <span class="then" data-v-40a8e85d>=</span><span class="then" data-v-40a8e85d>null</span><div data-v-40a8e85d></div><span class="then" data-v-40a8e85d>return </span><span class="function" data-v-40a8e85d>function </span><span class="brackets" data-v-40a8e85d>(){</span><div data-v-40a8e85d></div><div class="padTwo VSL" data-v-40a8e85d><span class="then" data-v-40a8e85d>if</span><span class="brackets" data-v-40a8e85d>(</span><span class="word" data-v-40a8e85d>time</span><span class="then" data-v-40a8e85d>!==null</span><span class="brackets" data-v-40a8e85d>){</span><div data-v-40a8e85d></div><div class="padTwo VSL" data-v-40a8e85d><span class="word" data-v-40a8e85d>clearTimeout</span><span class="brackets" data-v-40a8e85d>(</span><span class="word" data-v-40a8e85d>t</span><span class="brackets" data-v-40a8e85d>)</span><div data-v-40a8e85d></div></div><div data-v-40a8e85d><span class="brackets" data-v-40a8e85d>}</span></div><div data-v-40a8e85d><span class="word" data-v-40a8e85d>time</span><span class="then" data-v-40a8e85d>=</span><span class="variable" data-v-40a8e85d>setTimeout</span><span class="brackets" data-v-40a8e85d>(()</span><span class="function" data-v-40a8e85d>=&gt; </span><span class="brackets" data-v-40a8e85d>{</span><div class="padTwo VSL" data-v-40a8e85d><span class="word" data-v-40a8e85d>console</span><span class="variable" data-v-40a8e85d>.log</span><span class="brackets" data-v-40a8e85d>(</span><span class="then" data-v-40a8e85d>this</span><span class="word" data-v-40a8e85d>.value</span><span class="brackets" data-v-40a8e85d>)</span></div><div data-v-40a8e85d><span class="brackets" data-v-40a8e85d>},</span><span class="number" data-v-40a8e85d>1000</span><span class="brackets" data-v-40a8e85d>)</span></div></div></div><div data-v-40a8e85d><span class="brackets" data-v-40a8e85d>}</span></div></div><div data-v-40a8e85d><span class="brackets" data-v-40a8e85d>}</span></div></div><div class="w100" data-v-40a8e85d><div data-v-40a8e85d><span class="word" data-v-40a8e85d>oInput</span><span class="variable" data-v-40a8e85d>.oninput</span><span class="then" data-v-40a8e85d>=</span><span class="word" data-v-40a8e85d>debounce</span><span class="brackets" data-v-40a8e85d>(</span><span class="variable" data-v-40a8e85d>function</span><span class="brackets" data-v-40a8e85d>(){</span></div><div class="padTwo VSL" data-v-40a8e85d><span class="word" data-v-40a8e85d>console</span><span class="variable" data-v-40a8e85d>.log</span><span class="brackets" data-v-40a8e85d>(</span><span class="then" data-v-40a8e85d>this</span><span class="word" data-v-40a8e85d>.value</span><span class="brackets" data-v-40a8e85d>)</span><div data-v-40a8e85d></div></div><div data-v-40a8e85d><span class="brackets" data-v-40a8e85d>},</span><span class="number" data-v-40a8e85d>1000</span><span class="brackets" data-v-40a8e85d>)</span></div><div data-v-40a8e85d><span class="function" data-v-40a8e85d>function </span><span class="word" data-v-40a8e85d>debounce</span><span class="brackets" data-v-40a8e85d>(</span><span class="word" data-v-40a8e85d>fn,delay</span><span class="brackets" data-v-40a8e85d>){</span></div><div class="padTwo VSL" data-v-40a8e85d><span class="function" data-v-40a8e85d>let </span><span class="word" data-v-40a8e85d>time</span> <span class="then" data-v-40a8e85d>=</span><span class="then" data-v-40a8e85d>null</span><div data-v-40a8e85d></div><span class="then" data-v-40a8e85d>return </span><span class="function" data-v-40a8e85d>function </span><span class="brackets" data-v-40a8e85d>(){</span><div data-v-40a8e85d></div><div class="padTwo VSL" data-v-40a8e85d><span class="then" data-v-40a8e85d>if</span><span class="brackets" data-v-40a8e85d>(</span><span class="word" data-v-40a8e85d>time</span><span class="then" data-v-40a8e85d>!==null</span><span class="brackets" data-v-40a8e85d>){</span><div data-v-40a8e85d></div><div class="padTwo VSL" data-v-40a8e85d><span class="word" data-v-40a8e85d>clearTimeout</span><span class="brackets" data-v-40a8e85d>(</span><span class="word" data-v-40a8e85d>t</span><span class="brackets" data-v-40a8e85d>)</span><div data-v-40a8e85d></div></div><div data-v-40a8e85d><span class="brackets" data-v-40a8e85d>}</span></div><div data-v-40a8e85d><span class="word" data-v-40a8e85d>time</span><span class="then" data-v-40a8e85d>=</span><span class="variable" data-v-40a8e85d>setTimeout</span><span class="brackets" data-v-40a8e85d>(()</span><span class="function" data-v-40a8e85d>=&gt; </span><span class="brackets" data-v-40a8e85d>{</span><div class="padTwo VSL" data-v-40a8e85d><span class="variable" data-v-40a8e85d>fn</span><span class="brackets" data-v-40a8e85d>()</span></div><div data-v-40a8e85d><span class="brackets" data-v-40a8e85d>},</span><span class="number" data-v-40a8e85d>delay</span><span class="brackets" data-v-40a8e85d>)</span></div></div></div><div data-v-40a8e85d><span class="brackets" data-v-40a8e85d>}</span></div></div><div data-v-40a8e85d><span class="brackets" data-v-40a8e85d>}</span></div><p data-v-40a8e85d>測試發現輸出 undefined</p></div></div><div class="dis" data-v-40a8e85d><div class="w100" data-v-40a8e85d><div data-v-40a8e85d><span class="word" data-v-40a8e85d>oInput</span><span class="variable" data-v-40a8e85d>.oninput</span><span class="then" data-v-40a8e85d>=</span><span class="word" data-v-40a8e85d>debounce</span><span class="brackets" data-v-40a8e85d>(</span><span class="variable" data-v-40a8e85d>function</span><span class="brackets" data-v-40a8e85d>(){</span></div><div class="padTwo VSL" data-v-40a8e85d><span class="word" data-v-40a8e85d>console</span><span class="variable" data-v-40a8e85d>.log</span><span class="brackets" data-v-40a8e85d>(</span><span class="then" data-v-40a8e85d>this</span><span class="brackets" data-v-40a8e85d>) </span><span class="comment" data-v-40a8e85d>//發現this指向window</span><div data-v-40a8e85d></div></div><div data-v-40a8e85d><span class="brackets" data-v-40a8e85d>},</span><span class="number" data-v-40a8e85d>1000</span><span class="brackets" data-v-40a8e85d>)</span></div><div data-v-40a8e85d><span class="function" data-v-40a8e85d>function </span><span class="word" data-v-40a8e85d>debounce</span><span class="brackets" data-v-40a8e85d>(</span><span class="word" data-v-40a8e85d>fn,delay</span><span class="brackets" data-v-40a8e85d>){</span></div><div class="padTwo VSL" data-v-40a8e85d><div data-v-40a8e85d><span class="comment" data-v-40a8e85d>//console.log(this)</span></div><span class="function" data-v-40a8e85d>let </span><span class="word" data-v-40a8e85d>time</span> <span class="then" data-v-40a8e85d>=</span><span class="then" data-v-40a8e85d>null</span><div data-v-40a8e85d></div><span class="then" data-v-40a8e85d>return </span><span class="function" data-v-40a8e85d>function </span><span class="brackets" data-v-40a8e85d>(){</span><div data-v-40a8e85d></div><div class="padTwo VSL" data-v-40a8e85d><span class="then" data-v-40a8e85d>if</span><span class="brackets" data-v-40a8e85d>(</span><span class="word" data-v-40a8e85d>time</span><span class="then" data-v-40a8e85d>!==null</span><span class="brackets" data-v-40a8e85d>){</span><div data-v-40a8e85d></div><div class="padTwo VSL" data-v-40a8e85d><span class="word" data-v-40a8e85d>clearTimeout</span><span class="brackets" data-v-40a8e85d>(</span><span class="word" data-v-40a8e85d>t</span><span class="brackets" data-v-40a8e85d>)</span><div data-v-40a8e85d></div></div><div data-v-40a8e85d><span class="brackets" data-v-40a8e85d>}</span></div><div data-v-40a8e85d><span class="word" data-v-40a8e85d>time</span><span class="then" data-v-40a8e85d>=</span><span class="variable" data-v-40a8e85d>setTimeout</span><span class="brackets" data-v-40a8e85d>(()</span><span class="function" data-v-40a8e85d>=&gt; </span><span class="brackets" data-v-40a8e85d>{</span><div class="padTwo VSL" data-v-40a8e85d><div data-v-40a8e85d><span class="comment" data-v-40a8e85d>//console.log(this) //這邊才指向input對象</span></div><span class="variable" data-v-40a8e85d>fn</span><span class="brackets" data-v-40a8e85d>()</span></div><div data-v-40a8e85d><span class="brackets" data-v-40a8e85d>},</span><span class="number" data-v-40a8e85d>delay</span><span class="brackets" data-v-40a8e85d>)</span></div></div></div><div data-v-40a8e85d><span class="brackets" data-v-40a8e85d>}</span></div></div><div data-v-40a8e85d><span class="brackets" data-v-40a8e85d>}</span></div><p data-v-40a8e85d>雖然這裡執行debounce這個函數</p><p data-v-40a8e85d>但返回的是內部這個函數(return..)</p><p data-v-40a8e85d>相當於onInput=右邊</p><p data-v-40a8e85d>這裡掛者的是內部返回的這個函數</p><p data-v-40a8e85d>所以內部這個函數的this指向</p><p data-v-40a8e85d>才是這個input對象</p></div><div class="w100" data-v-40a8e85d><br data-v-40a8e85d><br data-v-40a8e85d><br data-v-40a8e85d><div data-v-40a8e85d><span class="word" data-v-40a8e85d>oInput</span><span class="variable" data-v-40a8e85d>.oninput</span><span class="then" data-v-40a8e85d>=</span><span class="word" data-v-40a8e85d>debounce</span><span class="brackets" data-v-40a8e85d>(</span><span class="variable" data-v-40a8e85d>function</span><span class="brackets" data-v-40a8e85d>(){</span></div><div class="padTwo VSL" data-v-40a8e85d><span class="word" data-v-40a8e85d>console</span><span class="variable" data-v-40a8e85d>.log</span><span class="brackets" data-v-40a8e85d>(</span><span class="then" data-v-40a8e85d>this</span><span class="brackets" data-v-40a8e85d>) </span><div data-v-40a8e85d></div></div><div data-v-40a8e85d><span class="brackets" data-v-40a8e85d>},</span><span class="number" data-v-40a8e85d>1000</span><span class="brackets" data-v-40a8e85d>)</span></div><div data-v-40a8e85d><span class="function" data-v-40a8e85d>function </span><span class="word" data-v-40a8e85d>debounce</span><span class="brackets" data-v-40a8e85d>(</span><span class="word" data-v-40a8e85d>fn,delay</span><span class="brackets" data-v-40a8e85d>){</span></div><div class="padTwo VSL" data-v-40a8e85d><div data-v-40a8e85d><span class="comment" data-v-40a8e85d>//console.log(this)</span></div><span class="function" data-v-40a8e85d>let </span><span class="word" data-v-40a8e85d>time</span> <span class="then" data-v-40a8e85d>=</span><span class="then" data-v-40a8e85d>null</span><div data-v-40a8e85d></div><span class="then" data-v-40a8e85d>return </span><span class="function" data-v-40a8e85d>function </span><span class="brackets" data-v-40a8e85d>(){</span><div data-v-40a8e85d></div><div class="padTwo VSL" data-v-40a8e85d><span class="then" data-v-40a8e85d>if</span><span class="brackets" data-v-40a8e85d>(</span><span class="word" data-v-40a8e85d>time</span><span class="then" data-v-40a8e85d>!==null</span><span class="brackets" data-v-40a8e85d>){</span><div data-v-40a8e85d></div><div class="padTwo VSL" data-v-40a8e85d><span class="word" data-v-40a8e85d>clearTimeout</span><span class="brackets" data-v-40a8e85d>(</span><span class="word" data-v-40a8e85d>t</span><span class="brackets" data-v-40a8e85d>)</span><div data-v-40a8e85d></div></div><div data-v-40a8e85d><span class="brackets" data-v-40a8e85d>}</span></div><div data-v-40a8e85d><span class="word" data-v-40a8e85d>time</span><span class="then" data-v-40a8e85d>=</span><span class="variable" data-v-40a8e85d>setTimeout</span><span class="brackets" data-v-40a8e85d>(()</span><span class="function" data-v-40a8e85d>=&gt; </span><span class="brackets" data-v-40a8e85d>{</span><div class="padTwo VSL" data-v-40a8e85d><span class="variable" data-v-40a8e85d>fn</span><span class="number" data-v-40a8e85d>.call</span><span class="brackets" data-v-40a8e85d>(</span><span class="then" data-v-40a8e85d>this</span><span class="brackets" data-v-40a8e85d>)</span><span class="brackets" data-v-40a8e85d>()</span></div><div data-v-40a8e85d><span class="brackets" data-v-40a8e85d>},</span><span class="number" data-v-40a8e85d>delay</span><span class="brackets" data-v-40a8e85d>)</span></div></div></div><div data-v-40a8e85d><span class="brackets" data-v-40a8e85d>}</span></div></div><div data-v-40a8e85d><span class="brackets" data-v-40a8e85d>}</span></div></div></div></div><div id="threetips011" class="articleCardTitle cor36 fz34" data-v-40a8e85d> 7.11 節流 throttle </div><p class="fz28" data-v-40a8e85d>單位時間內 , 頻繁觸發事件 , 執行一次</p><br data-v-40a8e85d><p class="fz28" data-v-40a8e85d>技能施放完 等待的 cd 時間</p><br data-v-40a8e85d><p class="fz28" data-v-40a8e85d>場景</p><p class="fz28" data-v-40a8e85d>滾動條</p><div class="bgcVS" data-v-40a8e85d><div data-v-40a8e85d><span class="word" data-v-40a8e85d>window</span><span class="word" data-v-40a8e85d>.onscroll</span> <span class="then" data-v-40a8e85d>=</span><span class="function" data-v-40a8e85d>function </span><span class="brackets" data-v-40a8e85d>(){</span></div><div class="padTwo VSL" data-v-40a8e85d><span class="variable" data-v-40a8e85d>alert</span><span class="brackets" data-v-40a8e85d>(</span> <span class="src" data-v-40a8e85d>&quot;廣告&quot;</span><span class="brackets" data-v-40a8e85d>)</span><div data-v-40a8e85d></div></div><div data-v-40a8e85d><span class="brackets" data-v-40a8e85d>}</span></div><br data-v-40a8e85d><br data-v-40a8e85d><br data-v-40a8e85d><div data-v-40a8e85d><span class="word" data-v-40a8e85d>window</span><span class="variable" data-v-40a8e85d>.onscroll</span><span class="then" data-v-40a8e85d>=</span> <span class="word" data-v-40a8e85d>throttle</span><span class="brackets" data-v-40a8e85d>(</span><span class="function" data-v-40a8e85d>function </span><span class="brackets" data-v-40a8e85d>(){</span></div><div class="padTwo VSL" data-v-40a8e85d><span class="variable" data-v-40a8e85d>alert</span><span class="brackets" data-v-40a8e85d>(</span> <span class="src" data-v-40a8e85d>&quot;廣告&quot;</span><span class="brackets" data-v-40a8e85d>)</span><div data-v-40a8e85d></div></div><div data-v-40a8e85d><span class="brackets" data-v-40a8e85d>},</span> <span class="number" data-v-40a8e85d>2000</span><span class="brackets" data-v-40a8e85d>)</span></div><div data-v-40a8e85d><span class="function" data-v-40a8e85d>function </span><span class="word" data-v-40a8e85d>throttle</span><span class="brackets" data-v-40a8e85d>(</span><span class="word" data-v-40a8e85d>fn,delay</span><span class="brackets" data-v-40a8e85d>){</span></div><div class="padTwo VSL" data-v-40a8e85d><span class="function" data-v-40a8e85d>let </span> <span class="word" data-v-40a8e85d>time</span><span class="then" data-v-40a8e85d>=</span> <span class="number" data-v-40a8e85d>true</span><div data-v-40a8e85d></div><span class="then" data-v-40a8e85d>return </span><span class="function" data-v-40a8e85d>function </span><span class="brackets" data-v-40a8e85d>(){</span><div data-v-40a8e85d></div><div class="padTwo VSL" data-v-40a8e85d><span class="then" data-v-40a8e85d>if</span> <span class="brackets" data-v-40a8e85d>(</span><span class="word" data-v-40a8e85d>time</span> <span class="brackets" data-v-40a8e85d>){</span><div data-v-40a8e85d></div><div class="padTwo VSL" data-v-40a8e85d><span class="variable" data-v-40a8e85d>setTimeout</span><span class="brackets" data-v-40a8e85d>(()</span><span class="function" data-v-40a8e85d>=&gt;</span><span class="brackets" data-v-40a8e85d>{</span><div data-v-40a8e85d></div><div class="padTwo VSL" data-v-40a8e85d><span class="word" data-v-40a8e85d>fn</span><span class="variable" data-v-40a8e85d>.call</span><span class="brackets" data-v-40a8e85d>(</span><span class="then" data-v-40a8e85d>this</span><span class="brackets" data-v-40a8e85d>) </span><span class="comment" data-v-40a8e85d>// 綁在 window 有沒有 call 都可以</span><div data-v-40a8e85d><span class="word" data-v-40a8e85d>time</span><span class="then" data-v-40a8e85d>=</span><span class="number" data-v-40a8e85d>true</span></div><div data-v-40a8e85d></div></div><div data-v-40a8e85d><span class="brackets" data-v-40a8e85d>},</span><span class="word" data-v-40a8e85d>delay</span><span class="brackets" data-v-40a8e85d>)</span></div></div><div data-v-40a8e85d><span class="brackets" data-v-40a8e85d>}</span></div><div data-v-40a8e85d><span class="word" data-v-40a8e85d>time</span> <span class="then" data-v-40a8e85d>=</span><span class="number" data-v-40a8e85d>false</span></div></div><div data-v-40a8e85d><span class="brackets" data-v-40a8e85d>}</span></div></div><div data-v-40a8e85d><span class="brackets" data-v-40a8e85d>}</span></div></div><p class="fz28" data-v-40a8e85d></p><p class="fz28" data-v-40a8e85d></p><p class="fz28" data-v-40a8e85d></p><p class="fz28" data-v-40a8e85d></p><p class="fz28" data-v-40a8e85d></p>',103),Vf=Sv(()=>v("div",{class:"toTopButton"},[v("div",{class:"disCen"},"___"),v("div",{class:"disCen"},"▲")],-1)),Nf=[Vf],Of=Sv(()=>v("div",{class:"toBotButton"},[v("div",{class:"disCen"},"▼"),v("div",{class:"disCen"},"￣")],-1)),$f=[Of],Ef={__name:"JsPageThreeSeven",setup(a){const s=ua(!1);window.addEventListener("scroll",function(){s.value=window.scrollY>0});function d(){window.scrollTo({top:0,left:0,behavior:"smooth"})}function n(){window.scrollTo({top:999999,left:0,behavior:"smooth"})}function t(c){window.scrollTo({top:document.getElementById(`${c}`).offsetTop,behavior:"smooth"})}return(c,e)=>{const l=za("P");return da(),ca(Q,null,[v("section",null,[v("div",Tf,[v("div",_f,[v("div",zf,[v("div",{onClick:e[0]||(e[0]=p=>t("threetips001")),class:"leftNavText"},"淺拷貝"),v("div",{onClick:e[1]||(e[1]=p=>t("threetips002")),class:"leftNavText"},"深拷貝"),v("div",{onClick:e[2]||(e[2]=p=>t("threetips003")),class:"leftNavText"},"lodash"),v("div",{onClick:e[3]||(e[3]=p=>t("threetips004")),class:"leftNavText"},"JSON"),v("div",{onClick:e[4]||(e[4]=p=>t("threetips005")),class:"leftNavText"}," 異常處理 "),v("div",{onClick:e[5]||(e[5]=p=>t("threetips006")),class:"leftNavText"},"this"),v("div",{onClick:e[6]||(e[6]=p=>t("threetips007")),class:"leftNavText"},"call"),v("div",{onClick:e[7]||(e[7]=p=>t("threetips008")),class:"leftNavText"},"apply"),v("div",{onClick:e[8]||(e[8]=p=>t("threetips009")),class:"leftNavText"},"bind"),v("div",{onClick:e[9]||(e[9]=p=>t("threetips010")),class:"leftNavText"},"防抖"),v("div",{onClick:e[10]||(e[10]=p=>t("threetips011")),class:"leftNavText"},"節流")])])]),v("div",Sf,[v("div",qf,[v("div",yf,[Cf,v("div",xf,[Lf,T(l,null,{default:C(()=>[fa("2. 輸出當前時間可用 new Date().toLocaleString()")]),_:1}),jf]),Pf])])])]),v("div",null,[X(T(W,{name:"fade",tag:"div"},{default:C(()=>[v("div",{onClick:d,class:"toTop"},Nf)]),_:1},512),[[Y,s.value]]),X(T(W,{name:"fade",tag:"div"},{default:C(()=>[v("div",{onClick:n,class:"toBot"},$f)]),_:1},512),[[Y,s.value]])])],64)}}},Af=ra(Ef,[["__scopeId","data-v-40a8e85d"]]);const qv=a=>(ma("data-v-65448df5"),a=a(),ha(),a),Mf={class:"leftNav"},Ff={class:"leftNavContainer"},If={class:"leftNavLayout"},Rf=U('<div class="Main" data-v-65448df5><div class="mainContainer" data-v-65448df5><div class="mainLayout" data-v-65448df5><br data-v-65448df5><br data-v-65448df5><p class="fz28" data-v-65448df5>總分總</p><p class="fz28" data-v-65448df5>1.要講哪個知識點</p><p class="fz28" data-v-65448df5>2.細講</p><p class="fz28" data-v-65448df5>3.總結</p><br data-v-65448df5><br data-v-65448df5><div id="threedom001" class="articleCardTitle cor36 fz34" data-v-65448df5> 8.1 事件流 </div><p class="fz28" data-v-65448df5>事件流</p><p class="fz28" data-v-65448df5>指事件完整執行過程中的流動路徑</p><br data-v-65448df5><br data-v-65448df5><div class="fz30" data-v-65448df5> 1 <span class="cor17" data-v-65448df5>. . . </span><span class="cor36 pad10 bor" data-v-65448df5> Document </span><span class="cor17" data-v-65448df5> . . . </span> 7 </div><div class="fz30" data-v-65448df5><span class="cor17" data-v-65448df5>. . . </span> ↘ <span class="cor17" data-v-65448df5>. . . . . . </span> | <span class="cor17" data-v-65448df5>. . . . . . . . . . </span> ↖ <span class="cor17" data-v-65448df5>. . </span> 冒泡階段 由下往上 </div><div class="fz30" data-v-65448df5><span class="cor17" data-v-65448df5>. . . . . </span>2 <span class="cor17" data-v-65448df5>. . </span><span class="cor36 pad10 bor" data-v-65448df5> Element html </span><span class="cor17" data-v-65448df5> . . . </span> 6 </div><div class="fz30" data-v-65448df5><span class="cor17" data-v-65448df5>. . . . . . . </span> ↘ <span class="cor17" data-v-65448df5>. . . . . . </span> | <span class="cor17" data-v-65448df5>. . . . . . . . . . </span> ↖ </div><div class="fz30" data-v-65448df5> 捕獲階段 <span class="cor17" data-v-65448df5>. . </span> 3 <span class="cor17" data-v-65448df5>. . </span><span class="cor36 pad10 bor" data-v-65448df5> Element body </span><span class="cor17" data-v-65448df5> . . . </span> 5 </div><div class="fz30" data-v-65448df5> 由上往下 <span class="cor17" data-v-65448df5> . . . . </span> ↘ <span class="cor17" data-v-65448df5>. . . . . . . . </span> | <span class="cor17" data-v-65448df5>. . . . . . . . . . </span> ↖ </div><div class="fz30" data-v-65448df5><span class="cor17" data-v-65448df5>. . . . . . . . . . . . . . </span> ↘ <span class="cor17" data-v-65448df5>. . . . </span><span class="cor36 pad10 bor" data-v-65448df5> Element div </span><span class="cor17" data-v-65448df5> . . . </span> 4 </div><div class="fz30" data-v-65448df5><span class="cor17" data-v-65448df5>. . . . . . . . . . . . . . . .</span> ↘ → → → → → → ↗ </div><p class="fz28" data-v-65448df5>說明</p><p class="fz28" data-v-65448df5> 假設頁面裡有 div , 當觸發事件時 , 經歷 &quot;捕獲階段&quot; &amp; &quot;冒泡階段&quot; </p><p class="fz28" data-v-65448df5>捕獲 -&gt; 父到子</p><p class="fz28" data-v-65448df5>冒泡 -&gt; 子到父</p><br data-v-65448df5><p class="fz28" data-v-65448df5>實際開發 冒泡為主</p><br data-v-65448df5><br data-v-65448df5><p class="fz34 cor36" data-v-65448df5>事件捕獲</p><p class="fz28" data-v-65448df5> 從 DOM 的 根元素 開始去執行 對應的 事件 ( 從裡到外 ) </p><a class="fz28" href="https://codepen.io/wayne23123/pen/gOZbBRw" data-v-65448df5>DEMO @codepen</a><p class="fz34 cor36" data-v-65448df5>事件冒泡</p><p class="fz28" data-v-65448df5> 當一個元素被觸發 , 同樣的事件將會在該元素的所有祖先元素中 依次被觸發。 </p><p class="fz28" data-v-65448df5>這過程為冒泡。</p><br data-v-65448df5><p class="fz28" data-v-65448df5> 當一元素觸發事件後 , 會 依次 向上調用 所有 父級元素的 同名事件 </p><a class="fz28" href="https://codepen.io/wayne23123/pen/gOZbBRw" data-v-65448df5>DEMO @codepen</a><br data-v-65448df5><p class="fz34 cor36" data-v-65448df5>阻止冒泡</p><p class="fz28" data-v-65448df5>默認有冒泡模式存在 , 容易導致 事件影像到 父元素</p><br data-v-65448df5><p class="fz28" data-v-65448df5>需求:</p><p class="fz28" data-v-65448df5>想把事件限制在當前元素 , 需要 阻止 事件 冒泡</p><br data-v-65448df5><p class="fz28" data-v-65448df5>前提:</p><p class="fz28" data-v-65448df5>阻止事件冒泡 需要拿到 事件對象</p><br data-v-65448df5><div class="spo fz30" data-v-65448df5><span class="number" data-v-65448df5>事件對象</span><span class="variable" data-v-65448df5>.stopPropagation</span><span class="brackets" data-v-65448df5>()</span></div><a class="fz28" href="https://codepen.io/wayne23123/pen/RwENeBG" data-v-65448df5>DEMO @codepen</a><br data-v-65448df5><br data-v-65448df5><p class="fz28" data-v-65448df5>阻止默認行為:</p><p class="fz28" data-v-65448df5>阻止表單提交</p><p class="fz28" data-v-65448df5>阻止連接跳轉</p><div class="bgcVS" data-v-65448df5><div data-v-65448df5><span class="function" data-v-65448df5>const </span><span class="word" data-v-65448df5>form</span> <span class="then" data-v-65448df5>=</span><span class="word" data-v-65448df5>document</span><span class="variable" data-v-65448df5>.querySelector</span><span class="brackets" data-v-65448df5>(</span> <span class="src" data-v-65448df5>&quot;form&quot;</span><span class="brackets" data-v-65448df5>)</span></div><div data-v-65448df5><span class="word" data-v-65448df5>form</span><span class="variable" data-v-65448df5>.addEventListener</span><span class="brackets" data-v-65448df5>(</span> <span class="src" data-v-65448df5>&quot;submit&quot;</span><span class="then" data-v-65448df5>,</span><span class="function" data-v-65448df5>function </span><span class="brackets" data-v-65448df5>(</span> <span class="word" data-v-65448df5>e</span><span class="brackets" data-v-65448df5>){</span></div><div class="padTwo VSL" data-v-65448df5><span class="comment" data-v-65448df5>//阻止默認提交行為</span><div data-v-65448df5><span class="word" data-v-65448df5>e.preventDefault</span><span class="brackets" data-v-65448df5>()</span></div><div data-v-65448df5></div></div><div data-v-65448df5><span class="brackets" data-v-65448df5>})</span></div><br data-v-65448df5><div data-v-65448df5><span class="function" data-v-65448df5>const </span> <span class="word" data-v-65448df5>a</span><span class="then" data-v-65448df5>=</span> <span class="word" data-v-65448df5>document</span><span class="variable" data-v-65448df5>.querySelector</span><span class="brackets" data-v-65448df5>(</span> <span class="src" data-v-65448df5>&quot;a&quot;</span><span class="brackets" data-v-65448df5>)</span></div><div data-v-65448df5><span class="word" data-v-65448df5>a</span><span class="variable" data-v-65448df5>.addEventListener</span><span class="brackets" data-v-65448df5>(</span> <span class="src" data-v-65448df5>&quot;click&quot;</span><span class="then" data-v-65448df5>,</span><span class="function" data-v-65448df5>function </span><span class="brackets" data-v-65448df5>(</span> <span class="word" data-v-65448df5>e</span><span class="brackets" data-v-65448df5>){</span></div><div class="padTwo VSL" data-v-65448df5><span class="comment" data-v-65448df5>//阻止默認提交行為</span><div data-v-65448df5><span class="word" data-v-65448df5>e.preventDefault</span><span class="brackets" data-v-65448df5>()</span></div><div data-v-65448df5></div></div><div data-v-65448df5><span class="brackets" data-v-65448df5>})</span></div><br data-v-65448df5></div><p class="fz34 cor36" data-v-65448df5>解綁事件</p><div class="bgcVS" data-v-65448df5><div data-v-65448df5><span class="then" data-v-65448df5>＜</span> <span class="number" data-v-65448df5>button</span><span class="then" data-v-65448df5>&gt;</span> <span class="word" data-v-65448df5>test</span><span class="then" data-v-65448df5>＜/</span> <span class="number" data-v-65448df5>button</span><span class="then" data-v-65448df5>&gt;</span></div><div data-v-65448df5><span class="function" data-v-65448df5>const </span><span class="word" data-v-65448df5>btn</span> <span class="then" data-v-65448df5>=</span><span class="word" data-v-65448df5>documnet</span><span class="variable" data-v-65448df5>.querySelector</span><span class="brackets" data-v-65448df5>(</span> <span class="src" data-v-65448df5>&quot;button&quot;</span><span class="brackets" data-v-65448df5>)</span></div><div data-v-65448df5><span class="word" data-v-65448df5>btn</span><span class="variable" data-v-65448df5>.onclick</span><span class="then" data-v-65448df5>=</span> <span class="then" data-v-65448df5>null</span></div><div class="padTwo VSL" data-v-65448df5><span class="word" data-v-65448df5>alert</span> <span class="brackets" data-v-65448df5>(</span><span class="src" data-v-65448df5>&quot;點擊了&quot;</span> <span class="brackets" data-v-65448df5>)</span><div data-v-65448df5></div></div><div data-v-65448df5><span class="brackets" data-v-65448df5>}</span></div><div data-v-65448df5><span class="comment" data-v-65448df5>//L0事件移除解綁</span></div><div data-v-65448df5><span class="word" data-v-65448df5>btn</span><span class="variable" data-v-65448df5>.onclick</span><span class="then" data-v-65448df5>=</span> <span class="then" data-v-65448df5>null</span></div><br data-v-65448df5><br data-v-65448df5><p data-v-65448df5>addEventListener 解綁方式</p><div data-v-65448df5><span class="comment" data-v-65448df5>//L2事件移除解綁</span></div><div data-v-65448df5><span class="function" data-v-65448df5>function </span><span class="word" data-v-65448df5>fn</span> <span class="brackets" data-v-65448df5>(){</span></div><div class="padTwo VSL" data-v-65448df5><span class="word" data-v-65448df5>alert</span> <span class="brackets" data-v-65448df5>(</span><span class="src" data-v-65448df5>&quot;點擊了&quot;</span> <span class="brackets" data-v-65448df5>)</span><div data-v-65448df5></div></div><div data-v-65448df5><span class="brackets" data-v-65448df5>}</span></div><div data-v-65448df5><span class="word" data-v-65448df5>btn</span><span class="variable" data-v-65448df5>.addEventListener</span><span class="brackets" data-v-65448df5>(</span> <span class="src" data-v-65448df5>&quot;click&quot;</span><span class="then" data-v-65448df5>,</span> <span class="word" data-v-65448df5>fn</span><span class="brackets" data-v-65448df5>) </span><span class="comment" data-v-65448df5>//這些回調函數不用(),setTimeout也是</span></div><div data-v-65448df5><span class="word" data-v-65448df5>btn</span><span class="variable" data-v-65448df5>.removeEventListener</span><span class="brackets" data-v-65448df5>(</span> <span class="src" data-v-65448df5>&quot;click&quot;</span><span class="then" data-v-65448df5>,</span> <span class="word" data-v-65448df5>fn</span><span class="brackets" data-v-65448df5>) </span></div><br data-v-65448df5><p data-v-65448df5>匿名函數 無法解綁</p></div><p class="fz28" data-v-65448df5>鼠標經過</p><p class="fz28" data-v-65448df5>mouseover &amp; mouseout 有冒泡效果</p><p class="fz28" data-v-65448df5>mouseenter &amp; mouseleave 沒冒泡 (推薦)</p><div id="threedom002" class="articleCardTitle cor36 fz34" data-v-65448df5> 8.2 事件委託 </div><p class="fz28" data-v-65448df5>利用 事件流的 特徵 解決一些開發需求</p><br data-v-65448df5><p class="fz28" data-v-65448df5>原理:</p><p class="fz28" data-v-65448df5> 給 父元素 註冊事件 , 當觸發子元素時 , 會冒泡到 父元素 , 觸發父元素的事件 </p><br data-v-65448df5><p class="fz28" data-v-65448df5>優點:</p><p class="fz28" data-v-65448df5>減少 註冊次數 , 提高程序性能</p><div class="bgcVS" data-v-65448df5><p data-v-65448df5>以前</p><div data-v-65448df5><span class="then" data-v-65448df5>＜</span> <span class="number" data-v-65448df5>ul</span><span class="then" data-v-65448df5>&gt;</span></div><div class="padTwo VSL" data-v-65448df5><span class="then" data-v-65448df5>＜</span> <span class="number" data-v-65448df5>li</span><span class="then" data-v-65448df5>&gt;</span> <span class="word" data-v-65448df5>第1個孩子</span><span class="then" data-v-65448df5>＜/</span> <span class="number" data-v-65448df5>li</span><span class="then" data-v-65448df5>&gt;</span><div data-v-65448df5></div></div><div class="padTwo VSL" data-v-65448df5><span class="then" data-v-65448df5>＜</span> <span class="number" data-v-65448df5>li</span><span class="then" data-v-65448df5>&gt;</span> <span class="word" data-v-65448df5>第2個孩子</span><span class="then" data-v-65448df5>＜/</span> <span class="number" data-v-65448df5>li</span><span class="then" data-v-65448df5>&gt;</span><div data-v-65448df5></div></div><div class="padTwo VSL" data-v-65448df5><span class="then" data-v-65448df5>＜</span> <span class="number" data-v-65448df5>li</span><span class="then" data-v-65448df5>&gt;</span> <span class="word" data-v-65448df5>第3個孩子</span><span class="then" data-v-65448df5>＜/</span> <span class="number" data-v-65448df5>li</span><span class="then" data-v-65448df5>&gt;</span><div data-v-65448df5></div></div><div data-v-65448df5><span class="then" data-v-65448df5>＜/</span> <span class="number" data-v-65448df5>ul</span><span class="then" data-v-65448df5>&gt;</span></div><div data-v-65448df5><span class="function" data-v-65448df5>const </span><span class="word" data-v-65448df5>lis</span> <span class="then" data-v-65448df5>=</span><span class="word" data-v-65448df5>document</span><span class="variable" data-v-65448df5>.querySelectorAll</span><span class="brackets" data-v-65448df5>(</span> <span class="src" data-v-65448df5>&quot;ul li&quot;</span><span class="brackets" data-v-65448df5>)</span></div><div data-v-65448df5><span class="then" data-v-65448df5>for </span> <span class="brackets" data-v-65448df5>(</span><span class="function" data-v-65448df5>let </span> <span class="word" data-v-65448df5>i</span><span class="then" data-v-65448df5>=</span> <span class="number" data-v-65448df5>0</span><span class="then" data-v-65448df5>;</span> <span class="word" data-v-65448df5>i</span><span class="then" data-v-65448df5>＜</span> <span class="word" data-v-65448df5>lis</span><span class="variable" data-v-65448df5>.length</span> <span class="then" data-v-65448df5>;</span><span class="word" data-v-65448df5>i</span> <span class="then" data-v-65448df5>++</span><span class="brackets" data-v-65448df5>){</span></div><div class="padTwo VSL" data-v-65448df5><span class="word" data-v-65448df5>lis</span> <span class="brackets" data-v-65448df5>[</span><span class="word" data-v-65448df5>i</span> <span class="brackets" data-v-65448df5>]</span><span class="word" data-v-65448df5>.addEventListner</span><span class="brackets" data-v-65448df5>(</span> <span class="src" data-v-65448df5>&quot;click&quot;</span><span class="then" data-v-65448df5>,</span><span class="function" data-v-65448df5>function </span><span class="brackets" data-v-65448df5>(){</span><div class="padTwo VSL" data-v-65448df5><span class="variable" data-v-65448df5>alert</span><span class="brackets" data-v-65448df5>(</span><span class="src" data-v-65448df5>&quot;點擊了&quot;</span><span class="brackets" data-v-65448df5>)</span><div data-v-65448df5></div></div><div data-v-65448df5></div><div data-v-65448df5><span class="brackets" data-v-65448df5>})</span></div></div><div data-v-65448df5><span class="brackets" data-v-65448df5>}</span></div><br data-v-65448df5><br data-v-65448df5><p data-v-65448df5>事件委託</p><div data-v-65448df5><span class="then" data-v-65448df5>＜</span> <span class="number" data-v-65448df5>ul</span><span class="then" data-v-65448df5>&gt;</span></div><div class="padTwo VSL" data-v-65448df5><span class="then" data-v-65448df5>＜</span> <span class="number" data-v-65448df5>li</span><span class="then" data-v-65448df5>&gt;</span> <span class="word" data-v-65448df5>第1個孩子</span><span class="then" data-v-65448df5>＜/</span> <span class="number" data-v-65448df5>li</span><span class="then" data-v-65448df5>&gt;</span><div data-v-65448df5></div></div><div class="padTwo VSL" data-v-65448df5><span class="then" data-v-65448df5>＜</span> <span class="number" data-v-65448df5>li</span><span class="then" data-v-65448df5>&gt;</span> <span class="word" data-v-65448df5>第2個孩子</span><span class="then" data-v-65448df5>＜/</span> <span class="number" data-v-65448df5>li</span><span class="then" data-v-65448df5>&gt;</span><div data-v-65448df5></div></div><div class="padTwo VSL" data-v-65448df5><span class="then" data-v-65448df5>＜</span> <span class="number" data-v-65448df5>li</span><span class="then" data-v-65448df5>&gt;</span> <span class="word" data-v-65448df5>第3個孩子</span><span class="then" data-v-65448df5>＜/</span> <span class="number" data-v-65448df5>li</span><span class="then" data-v-65448df5>&gt;</span><div data-v-65448df5></div></div><div class="padTwo VSL" data-v-65448df5><span class="then" data-v-65448df5>＜</span> <span class="number" data-v-65448df5>p</span><span class="then" data-v-65448df5>&gt;</span> <span class="word" data-v-65448df5>我不要變色</span><span class="then" data-v-65448df5>＜/</span> <span class="number" data-v-65448df5>P</span><span class="then" data-v-65448df5>&gt;</span><div data-v-65448df5></div></div><div data-v-65448df5><span class="then" data-v-65448df5>＜/</span> <span class="number" data-v-65448df5>ul</span><span class="then" data-v-65448df5>&gt;</span></div><div data-v-65448df5><span class="function" data-v-65448df5>const </span> <span class="word" data-v-65448df5>ul</span><span class="then" data-v-65448df5>=</span> <span class="word" data-v-65448df5>document</span><span class="variable" data-v-65448df5>.querySelector</span><span class="brackets" data-v-65448df5>(</span> <span class="src" data-v-65448df5>&quot;ul&quot;</span><span class="brackets" data-v-65448df5>)</span></div><div data-v-65448df5><span class="word" data-v-65448df5>ul</span><span class="variable" data-v-65448df5>.addEventListener</span><span class="brackets" data-v-65448df5>(</span> <span class="src" data-v-65448df5>&quot;click&quot;</span><span class="then" data-v-65448df5>,</span><span class="function" data-v-65448df5>function </span><span class="brackets" data-v-65448df5>(</span><span class="word" data-v-65448df5>e</span><span class="brackets" data-v-65448df5>){</span></div><div class="padTwo VSL" data-v-65448df5><span class="word" data-v-65448df5>alert</span> <span class="brackets" data-v-65448df5>(</span><span class="src" data-v-65448df5>&quot;點擊了&quot;</span> <span class="brackets" data-v-65448df5>)</span><div data-v-65448df5><span class="then" data-v-65448df5>this</span><span class="word" data-v-65448df5>.style.color</span><span class="then" data-v-65448df5>=</span> <span class="src" data-v-65448df5>&quot;red&quot;</span><span class="comment" data-v-65448df5>//發現red給父ul,全變色了</span></div><div data-v-65448df5><span class="comment" data-v-65448df5>//要知道你點了哪個元素</span></div><div data-v-65448df5><span class="word" data-v-65448df5>console</span><span class="word" data-v-65448df5>.log</span> <span class="brackets" data-v-65448df5>(</span><span class="word" data-v-65448df5>e</span> <span class="brackets" data-v-65448df5>) </span><span class="comment" data-v-65448df5>// 找 e.target 發現 li</span></div><div data-v-65448df5><span class="comment" data-v-65448df5>//console.log(e.target)//就是我們點擊的那個對象</span></div><div data-v-65448df5><span class="word" data-v-65448df5>e.target.style.color</span><span class="then" data-v-65448df5>=</span> <span class="src" data-v-65448df5>&quot;red&quot;</span></div><div data-v-65448df5><span class="comment" data-v-65448df5>//處理p不變色</span></div><div data-v-65448df5><span class="then" data-v-65448df5>if</span> <span class="brackets" data-v-65448df5>(</span><span class="word" data-v-65448df5>e.target.tagName</span><span class="then" data-v-65448df5>===</span> <span class="src" data-v-65448df5>&quot;LI&quot;</span><span class="brackets" data-v-65448df5>){</span></div><div data-v-65448df5></div><div class="padTwo VSL" data-v-65448df5><span class="word" data-v-65448df5>e.target.style.color</span><span class="then" data-v-65448df5>=</span> <span class="src" data-v-65448df5>&quot;red&quot;</span><div data-v-65448df5></div></div><div data-v-65448df5><span class="brackets" data-v-65448df5>}</span></div></div><div data-v-65448df5><span class="brackets" data-v-65448df5>})</span></div></div><p class="fz28" data-v-65448df5>事件委託好處?</p><p class="fz28" data-v-65448df5>減少註冊次數 , 提高程序性能</p><br data-v-65448df5><p class="fz28" data-v-65448df5>委託誰?</p><p class="fz28" data-v-65448df5>父元素</p><br data-v-65448df5><p class="fz28" data-v-65448df5>如何找真正觸發元素?</p><p class="fz28" data-v-65448df5>事件對象.target.tagName</p><div id="threedom002" class="articleCardTitle cor36 fz34" data-v-65448df5> 8.3 其他事件 </div><p class="fz28" data-v-65448df5>事件名: load</p><p class="fz28" data-v-65448df5>監聽頁面所有資源加載完畢</p><div class="bgcVS" data-v-65448df5><div data-v-65448df5><span class="comment" data-v-65448df5>//等待頁面所有資源加載完畢,就回去執行回調函數</span></div><div data-v-65448df5><span class="word" data-v-65448df5>window</span><span class="variable" data-v-65448df5>.addEventListener</span><span class="brackets" data-v-65448df5>(</span> <span class="src" data-v-65448df5>&quot;load&quot;</span><span class="then" data-v-65448df5>,</span><span class="function" data-v-65448df5>function </span><span class="brackets" data-v-65448df5>(){</span></div><div class="padTwo VSL" data-v-65448df5><span class="comment" data-v-65448df5>//執行操作</span><div data-v-65448df5></div></div><div data-v-65448df5><span class="brackets" data-v-65448df5>})</span></div><br data-v-65448df5><p data-v-65448df5>也可以針對某資源綁定 load 事件 ex圖片加載完再執行</p><div data-v-65448df5><span class="word" data-v-65448df5>img</span><span class="variable" data-v-65448df5>.addEventListener</span><span class="brackets" data-v-65448df5>(</span> <span class="src" data-v-65448df5>&quot;load&quot;</span><span class="then" data-v-65448df5>,</span><span class="function" data-v-65448df5>function </span><span class="brackets" data-v-65448df5>(){}</span></div></div><p class="fz28" data-v-65448df5>事件名: DOMContentLoaded</p><p class="fz28" data-v-65448df5> 當初使的 HTML 文檔加載解析完後 , DOMContentLoaded 事件觸發 </p><br data-v-65448df5><p class="fz28" data-v-65448df5>不用等 圖片.. ( 比 load 快 )</p><div class="bgcVS" data-v-65448df5><div data-v-65448df5><span class="word" data-v-65448df5>document</span><span class="variable" data-v-65448df5>.addEventListener</span><span class="brackets" data-v-65448df5>(</span><span class="src" data-v-65448df5>&quot;DOMContentLoaded&quot;</span><span class="then" data-v-65448df5>,</span><span class="function" data-v-65448df5>function </span><span class="brackets" data-v-65448df5>(){</span></div><div class="padTwo VSL" data-v-65448df5><span class="comment" data-v-65448df5>//執行操作</span><div data-v-65448df5></div></div><div data-v-65448df5><span class="brackets" data-v-65448df5>})</span></div></div><p class="fz28" data-v-65448df5>事件名: scroll</p><p class="fz28" data-v-65448df5>監聽整個頁面滾動</p><br data-v-65448df5><a class="fz28" href="https://juejin.cn/post/7056751654854459406" data-v-65448df5> @掘金</a><a class="fz28" href="https://stackoverflow.com/questions/21064101/understanding-offsetwidth-clientwidth-scrollwidth-and-height-respectively" data-v-65448df5> @stack overflow</a><a class="fz28" href="https://www.runoob.com/jsref/prop-element-scrollwidth.html" data-v-65448df5> @菜鳥教程</a><div class="bgcVS" data-v-65448df5><div data-v-65448df5><span class="word" data-v-65448df5>window</span><span class="variable" data-v-65448df5>.addEventListener</span><span class="brackets" data-v-65448df5>(</span> <span class="src" data-v-65448df5>&quot;scroll&quot;</span><span class="then" data-v-65448df5>,</span><span class="function" data-v-65448df5>function </span><span class="brackets" data-v-65448df5>(){</span></div><div class="padTwo VSL" data-v-65448df5><span class="word" data-v-65448df5>console</span><span class="variable" data-v-65448df5>.log</span><span class="brackets" data-v-65448df5>(</span> <span class="src" data-v-65448df5>&quot;滾動&quot;</span><span class="brackets" data-v-65448df5>)</span><div data-v-65448df5><span class="function" data-v-65448df5>const </span><span class="word" data-v-65448df5>n</span> <span class="then" data-v-65448df5>=</span><span class="word" data-v-65448df5>document</span><span class="variable" data-v-65448df5>.documentElement.scrollTop</span></div><div data-v-65448df5><span class="then" data-v-65448df5>if</span> <span class="brackets" data-v-65448df5>(</span><span class="word" data-v-65448df5>n</span> <span class="then" data-v-65448df5>&gt;=</span><span class="number" data-v-65448df5>100</span> <span class="brackets" data-v-65448df5>){</span></div><div data-v-65448df5></div><div class="padTwo VSL" data-v-65448df5><span class="word" data-v-65448df5>console</span><span class="variable" data-v-65448df5>.log</span><span class="brackets" data-v-65448df5>(</span><span class="src" data-v-65448df5>&quot;距離頂部100px&quot;</span><span class="brackets" data-v-65448df5>)</span><div data-v-65448df5></div></div><div data-v-65448df5><span class="brackets" data-v-65448df5>}</span></div></div><div data-v-65448df5><span class="brackets" data-v-65448df5>})</span></div><br data-v-65448df5><p data-v-65448df5>也可以給元素添加</p></div><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5>事件名:</p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><p class="fz28" data-v-65448df5></p><br data-v-65448df5><br data-v-65448df5></div></div></div>',1),Hf=qv(()=>v("div",{class:"toTopButton"},[v("div",{class:"disCen"},"___"),v("div",{class:"disCen"},"▲")],-1)),Bf=[Hf],Jf=qv(()=>v("div",{class:"toBotButton"},[v("div",{class:"disCen"},"▼"),v("div",{class:"disCen"},"￣")],-1)),Df=[Jf],Wf={__name:"JsPageThreeEight",setup(a){const s=ua(!1);window.addEventListener("scroll",function(){s.value=window.scrollY>0});function d(){window.scrollTo({top:0,left:0,behavior:"smooth"})}function n(){window.scrollTo({top:999999,left:0,behavior:"smooth"})}function t(c){window.scrollTo({top:document.getElementById(`${c}`).offsetTop,behavior:"smooth"})}return(c,e)=>(da(),ca(Q,null,[v("section",null,[v("div",Mf,[v("div",Ff,[v("div",If,[v("div",{onClick:e[0]||(e[0]=l=>t("threedom001")),class:"leftNavText"},"事件流"),v("div",{onClick:e[1]||(e[1]=l=>t("threedom002")),class:"leftNavText"},"事件委託")])])]),Rf]),v("div",null,[X(T(W,{name:"fade",tag:"div"},{default:C(()=>[v("div",{onClick:d,class:"toTop"},Bf)]),_:1},512),[[Y,s.value]]),X(T(W,{name:"fade",tag:"div"},{default:C(()=>[v("div",{onClick:n,class:"toBot"},Df)]),_:1},512),[[Y,s.value]])])],64))}},Uf=ra(Wf,[["__scopeId","data-v-65448df5"]]),Kf="/vue-learn-js/assets/jsmission002-997d86a5.jpg";const yv=a=>(ma("data-v-20f4e892"),a=a(),ha(),a),Xf={class:"leftNav"},Yf={class:"leftNavContainer"},Gf={class:"leftNavLayout"},Qf=U('<div class="Main" data-v-20f4e892><div class="mainContainer" data-v-20f4e892><div class="mainLayout" data-v-20f4e892><br data-v-20f4e892><br data-v-20f4e892><p class="fz28" data-v-20f4e892>總分總</p><p class="fz28" data-v-20f4e892>1.要講哪個知識點</p><p class="fz28" data-v-20f4e892>2.細講</p><p class="fz28" data-v-20f4e892>3.總結</p><br data-v-20f4e892><br data-v-20f4e892><div id="threeajax001" class="articleCardTitle cor36 fz34" data-v-20f4e892> 9.1 AJAX </div><p class="fz28" data-v-20f4e892> AJAX 是 &quot;Asynchronous JavaScript and XML&quot;（非同步 JavaScript 和 XML）的縮寫 </p><br data-v-20f4e892><p class="fz28" data-v-20f4e892>是 使用 XMLHttpRequest 對象 與 服務器 通信</p><br data-v-20f4e892><br data-v-20f4e892><p class="fz28" data-v-20f4e892>AJAX 是 瀏覽器 與 服務器 進行 數據通信 的技術</p><p class="fz28" data-v-20f4e892> 可以在 不刷新頁面 情況下 與 服務器通信 , 交換數據 , 更新頁面 </p><div id="threeajax002" class="articleCardTitle cor36 fz34" data-v-20f4e892> 9.2 xhr , axios , fetch 基本介紹 </div><div class="bgcVS" data-v-20f4e892><div data-v-20f4e892><span class="comment" data-v-20f4e892>//原生AJAX get</span></div><div data-v-20f4e892><span class="function" data-v-20f4e892>const </span><span class="word" data-v-20f4e892>xhr</span> <span class="then" data-v-20f4e892>=</span><span class="then" data-v-20f4e892>new </span><span class="brackets" data-v-20f4e892>XMLHttpRequest</span><span class="brackets" data-v-20f4e892>()</span></div><div data-v-20f4e892><span class="word" data-v-20f4e892>xhr</span> <span class="variable" data-v-20f4e892>.open</span><span class="brackets" data-v-20f4e892>(</span> <span class="src" data-v-20f4e892>&quot;GET&quot;</span><span class="then" data-v-20f4e892>,</span> <span class="src" data-v-20f4e892>&quot;這裡放url&quot;</span><span class="brackets" data-v-20f4e892>) </span><span class="comment" data-v-20f4e892>//url後可接請求參數?name=wayne&amp;age=18</span></div><div data-v-20f4e892><span class="word" data-v-20f4e892>xhr</span> <span class="variable" data-v-20f4e892>.send</span><span class="brackets" data-v-20f4e892>()</span></div><div data-v-20f4e892><span class="word" data-v-20f4e892>xhr</span><span class="variable" data-v-20f4e892>.onreadystatechange</span><span class="then" data-v-20f4e892>=</span><span class="function" data-v-20f4e892>function </span><span class="brackets" data-v-20f4e892>(){</span></div><div class="padTwo VSL" data-v-20f4e892><span class="then" data-v-20f4e892>if</span> <span class="brackets" data-v-20f4e892>(</span><span class="word" data-v-20f4e892>xhr</span><span class="word" data-v-20f4e892>.readyState</span><span class="then" data-v-20f4e892>===</span><span class="word" data-v-20f4e892>XMLHttpRequest.DONE</span><span class="then" data-v-20f4e892>&amp;&amp;</span> <span class="word" data-v-20f4e892>xhr.status</span><span class="then" data-v-20f4e892>===</span> <span class="number" data-v-20f4e892>200</span><span class="brackets" data-v-20f4e892>){</span><div data-v-20f4e892></div><div class="padTwo VSL" data-v-20f4e892><span class="word" data-v-20f4e892>console</span><span class="variable" data-v-20f4e892>.log</span><span class="brackets" data-v-20f4e892>(</span><span class="word" data-v-20f4e892>xhr.responseText</span><span class="brackets" data-v-20f4e892>)</span><div data-v-20f4e892><span class="word" data-v-20f4e892>console</span><span class="variable" data-v-20f4e892>.log</span><span class="brackets" data-v-20f4e892>(</span><span class="brackets" data-v-20f4e892>JSON</span><span class="variable" data-v-20f4e892>.parse</span><span class="brackets" data-v-20f4e892>(</span><span class="word" data-v-20f4e892>xhr.responseText</span><span class="brackets" data-v-20f4e892>))</span></div><div data-v-20f4e892></div></div><div data-v-20f4e892><span class="brackets" data-v-20f4e892>}</span></div></div><div data-v-20f4e892><span class="brackets" data-v-20f4e892>}</span></div><br data-v-20f4e892><div data-v-20f4e892><span class="comment" data-v-20f4e892>//原生AJAX post</span></div><div data-v-20f4e892><span class="function" data-v-20f4e892>const </span><span class="word" data-v-20f4e892>xhr</span> <span class="then" data-v-20f4e892>=</span><span class="then" data-v-20f4e892>new </span><span class="brackets" data-v-20f4e892>XMLHttpRequest</span><span class="brackets" data-v-20f4e892>()</span></div><div data-v-20f4e892><span class="word" data-v-20f4e892>xhr</span> <span class="variable" data-v-20f4e892>.open</span><span class="brackets" data-v-20f4e892>(</span> <span class="src" data-v-20f4e892>&quot;POST&quot;</span><span class="then" data-v-20f4e892>,</span> <span class="src" data-v-20f4e892>&quot;這裡放url&quot;</span><span class="brackets" data-v-20f4e892>) </span></div><div data-v-20f4e892><span class="word" data-v-20f4e892>xhr</span><span class="word" data-v-20f4e892>.setRequestHeader</span><span class="brackets" data-v-20f4e892>(</span><span class="src" data-v-20f4e892>&quot;Content-Type&quot;</span><span class="then" data-v-20f4e892>,</span><span class="src" data-v-20f4e892>&quot;application/x-www-form-urlencoded&quot;</span><span class="brackets" data-v-20f4e892>)</span></div><div data-v-20f4e892><span class="word" data-v-20f4e892>xhr</span> <span class="variable" data-v-20f4e892>.send</span><span class="brackets" data-v-20f4e892>(</span><span class="src" data-v-20f4e892>&quot;name=wayne&amp;age=18&quot;</span><span class="brackets" data-v-20f4e892>)</span></div><div data-v-20f4e892><span class="word" data-v-20f4e892>xhr</span><span class="variable" data-v-20f4e892>.onreadystatechange</span><span class="then" data-v-20f4e892>=</span><span class="function" data-v-20f4e892>function </span><span class="brackets" data-v-20f4e892>(){</span></div><div class="padTwo VSL" data-v-20f4e892><span class="then" data-v-20f4e892>if</span> <span class="brackets" data-v-20f4e892>(</span><span class="word" data-v-20f4e892>xhr</span><span class="word" data-v-20f4e892>.readyState</span><span class="then" data-v-20f4e892>===</span><span class="word" data-v-20f4e892>XMLHttpRequest.DONE</span><span class="then" data-v-20f4e892>&amp;&amp;</span> <span class="word" data-v-20f4e892>xhr.status</span><span class="then" data-v-20f4e892>===</span> <span class="number" data-v-20f4e892>200</span><span class="brackets" data-v-20f4e892>){</span><div data-v-20f4e892></div><div class="padTwo VSL" data-v-20f4e892><span class="word" data-v-20f4e892>console</span><span class="variable" data-v-20f4e892>.log</span><span class="brackets" data-v-20f4e892>(</span><span class="word" data-v-20f4e892>xhr.responseText</span><span class="brackets" data-v-20f4e892>)</span><div data-v-20f4e892><span class="word" data-v-20f4e892>console</span><span class="variable" data-v-20f4e892>.log</span><span class="brackets" data-v-20f4e892>(</span><span class="brackets" data-v-20f4e892>JSON</span><span class="variable" data-v-20f4e892>.parse</span><span class="brackets" data-v-20f4e892>(</span><span class="word" data-v-20f4e892>xhr.responseText</span><span class="brackets" data-v-20f4e892>))</span></div><div data-v-20f4e892></div></div><div data-v-20f4e892><span class="brackets" data-v-20f4e892>}</span></div></div><div data-v-20f4e892><span class="brackets" data-v-20f4e892>}</span></div><br data-v-20f4e892><br data-v-20f4e892><div data-v-20f4e892><span class="comment" data-v-20f4e892>//axios get</span></div><div data-v-20f4e892><span class="then" data-v-20f4e892>＜</span> <span class="number" data-v-20f4e892>script </span><span class="function" data-v-20f4e892>src</span> <span class="then" data-v-20f4e892>=</span><span class="src" data-v-20f4e892>&quot;axios.min.js&quot;</span><span class="then" data-v-20f4e892>&gt;＜/ </span><span class="number" data-v-20f4e892>script </span> <span class="then" data-v-20f4e892>&gt;</span></div><br data-v-20f4e892><div data-v-20f4e892><span class="variable" data-v-20f4e892>axios</span><span class="variable" data-v-20f4e892>.get</span><span class="brackets" data-v-20f4e892>(</span><span class="src" data-v-20f4e892>&quot;這裡放url&quot;</span><span class="brackets" data-v-20f4e892>)</span></div><br data-v-20f4e892><div data-v-20f4e892><span class="comment" data-v-20f4e892>//async + axios</span></div><div data-v-20f4e892><span class="function" data-v-20f4e892>async </span><span class="brackets" data-v-20f4e892>() </span><span class="function" data-v-20f4e892>=&gt; </span> <span class="brackets" data-v-20f4e892>{</span></div><div class="padTwo VSL" data-v-20f4e892><span class="function" data-v-20f4e892>const </span><span class="word" data-v-20f4e892>res</span> <span class="then" data-v-20f4e892>=</span><span class="then" data-v-20f4e892>await </span><span class="variable" data-v-20f4e892>axios</span><span class="variable" data-v-20f4e892>.get</span><span class="brackets" data-v-20f4e892>(</span><span class="src" data-v-20f4e892>&quot;這裡放url可帶請求參數?name=wayne&amp;age=18&quot;</span><span class="brackets" data-v-20f4e892>)</span><div data-v-20f4e892><span class="word" data-v-20f4e892>console</span><span class="variable" data-v-20f4e892>.log</span><span class="brackets" data-v-20f4e892>(</span><span class="word" data-v-20f4e892>res.data</span><span class="brackets" data-v-20f4e892>)</span></div><div data-v-20f4e892></div></div><div data-v-20f4e892><span class="brackets" data-v-20f4e892>}</span></div><br data-v-20f4e892><div data-v-20f4e892><span class="comment" data-v-20f4e892>//請求參數可以寫在params</span></div><div data-v-20f4e892><span class="function" data-v-20f4e892>async </span><span class="brackets" data-v-20f4e892>() </span><span class="function" data-v-20f4e892>=&gt; </span> <span class="brackets" data-v-20f4e892>{</span></div><div class="padTwo VSL" data-v-20f4e892><span class="function" data-v-20f4e892>const </span><span class="word" data-v-20f4e892>res</span> <span class="then" data-v-20f4e892>=</span><span class="then" data-v-20f4e892>await </span><span class="variable" data-v-20f4e892>axios</span><span class="variable" data-v-20f4e892>.get</span><span class="brackets" data-v-20f4e892>(</span><span class="src" data-v-20f4e892>&quot;這裡放url&quot;</span> <span class="then" data-v-20f4e892>,</span><span class="brackets" data-v-20f4e892>{</span><div data-v-20f4e892></div><div class="padTwo VSL" data-v-20f4e892><span class="word" data-v-20f4e892>params:</span><span class="brackets" data-v-20f4e892>{</span><div data-v-20f4e892></div><div class="padTwo VSL" data-v-20f4e892><span class="word" data-v-20f4e892>name:</span><span class="src" data-v-20f4e892>&quot;wayne&quot;</span> <span class="then" data-v-20f4e892>,</span><div data-v-20f4e892><span class="word" data-v-20f4e892>age:</span><span class="number" data-v-20f4e892>18</span></div><div data-v-20f4e892></div></div><div data-v-20f4e892><span class="brackets" data-v-20f4e892>}</span></div></div><div data-v-20f4e892><span class="brackets" data-v-20f4e892>})</span></div><div data-v-20f4e892><span class="word" data-v-20f4e892>console</span><span class="variable" data-v-20f4e892>.log</span><span class="brackets" data-v-20f4e892>(</span><span class="word" data-v-20f4e892>res.data</span><span class="brackets" data-v-20f4e892>)</span></div></div><div data-v-20f4e892><span class="brackets" data-v-20f4e892>}</span></div><br data-v-20f4e892><div data-v-20f4e892><span class="comment" data-v-20f4e892>//axios post</span></div><div data-v-20f4e892><span class="function" data-v-20f4e892>async </span><span class="brackets" data-v-20f4e892>() </span><span class="function" data-v-20f4e892>=&gt; </span> <span class="brackets" data-v-20f4e892>{</span></div><div class="padTwo VSL" data-v-20f4e892><span class="function" data-v-20f4e892>const </span><span class="word" data-v-20f4e892>res</span> <span class="then" data-v-20f4e892>=</span><span class="then" data-v-20f4e892>await </span><span class="variable" data-v-20f4e892>axios</span><span class="variable" data-v-20f4e892>.post</span><span class="brackets" data-v-20f4e892>(</span><span class="src" data-v-20f4e892>&quot;這裡放url&quot;</span> <span class="then" data-v-20f4e892>,</span><span class="brackets" data-v-20f4e892>{</span><div data-v-20f4e892></div><div class="padTwo VSL" data-v-20f4e892><span class="word" data-v-20f4e892>name:</span><span class="src" data-v-20f4e892>&quot;wayne&quot;</span> <span class="then" data-v-20f4e892>,</span><div data-v-20f4e892><span class="word" data-v-20f4e892>age:</span><span class="number" data-v-20f4e892>18</span></div></div><div data-v-20f4e892><span class="brackets" data-v-20f4e892>})</span></div><div data-v-20f4e892><span class="word" data-v-20f4e892>console</span><span class="variable" data-v-20f4e892>.log</span><span class="brackets" data-v-20f4e892>(</span><span class="word" data-v-20f4e892>res.data</span><span class="brackets" data-v-20f4e892>)</span></div></div><div data-v-20f4e892><span class="brackets" data-v-20f4e892>}</span></div><br data-v-20f4e892><div data-v-20f4e892><span class="comment" data-v-20f4e892>//axios 請求攔截器</span></div><div data-v-20f4e892><span class="function" data-v-20f4e892>async </span><span class="brackets" data-v-20f4e892>() </span><span class="function" data-v-20f4e892>=&gt; </span> <span class="brackets" data-v-20f4e892>{</span></div><div class="padTwo VSL" data-v-20f4e892><div data-v-20f4e892><span class="comment" data-v-20f4e892>//只要發送請求 都會經過請求攔截器 處理</span></div><div data-v-20f4e892><span class="variable" data-v-20f4e892>axios.interceptors.request.use</span><span class="brackets" data-v-20f4e892>(</span><span class="word" data-v-20f4e892>config</span><span class="function" data-v-20f4e892>=&gt; </span><span class="brackets" data-v-20f4e892>{</span></div><div class="padTwo VSL" data-v-20f4e892><span class="word" data-v-20f4e892>console</span><span class="variable" data-v-20f4e892>.log</span><span class="brackets" data-v-20f4e892>(</span><span class="src" data-v-20f4e892>&quot;發送了請求&quot;</span><span class="brackets" data-v-20f4e892>)</span><div data-v-20f4e892><span class="then" data-v-20f4e892>return </span><span class="word" data-v-20f4e892>config</span></div><div data-v-20f4e892></div></div><div data-v-20f4e892><span class="brackets" data-v-20f4e892>})</span></div><br data-v-20f4e892><div data-v-20f4e892><span class="comment" data-v-20f4e892>//響應攔截器</span></div><div data-v-20f4e892><span class="variable" data-v-20f4e892>axios.interceptors.response,use</span><span class="brackets" data-v-20f4e892>(</span> <span class="word" data-v-20f4e892>res</span><span class="function" data-v-20f4e892>=&gt; </span><span class="brackets" data-v-20f4e892>{</span></div><div class="padTwo VSL" data-v-20f4e892><span class="then" data-v-20f4e892>return </span> <span class="word" data-v-20f4e892>res</span><div data-v-20f4e892></div></div><div data-v-20f4e892><span class="brackets" data-v-20f4e892>})</span></div><span class="function" data-v-20f4e892>const </span><span class="word" data-v-20f4e892>res</span> <span class="then" data-v-20f4e892>=</span><span class="then" data-v-20f4e892>await </span><span class="variable" data-v-20f4e892>axios</span><span class="variable" data-v-20f4e892>.get</span><span class="brackets" data-v-20f4e892>(</span><span class="src" data-v-20f4e892>&quot;這裡放url可帶請求參數?name=wayne&amp;age=18&quot;</span><span class="brackets" data-v-20f4e892>)</span><div data-v-20f4e892><span class="word" data-v-20f4e892>console</span><span class="variable" data-v-20f4e892>.log</span><span class="brackets" data-v-20f4e892>(</span><span class="word" data-v-20f4e892>res.data</span><span class="brackets" data-v-20f4e892>)</span></div><div data-v-20f4e892></div></div><div data-v-20f4e892><span class="brackets" data-v-20f4e892>}</span></div><br data-v-20f4e892><div data-v-20f4e892><span class="comment" data-v-20f4e892>//fetch 返回一個 promise</span></div><div data-v-20f4e892><span class="variable" data-v-20f4e892>fetch</span><span class="brackets" data-v-20f4e892>(</span><span class="src" data-v-20f4e892>&quot;這裡放url可帶請求參數?name=wayne&amp;age=18&quot;</span><span class="brackets" data-v-20f4e892>)</span></div><div class="padTwo VSL" data-v-20f4e892><span class="variable" data-v-20f4e892>.then</span><span class="brackets" data-v-20f4e892>(</span> <span class="word" data-v-20f4e892>res</span><span class="function" data-v-20f4e892>=&gt; </span> <span class="brackets" data-v-20f4e892>{</span><div data-v-20f4e892></div><div class="padTwo VSL" data-v-20f4e892><span class="then" data-v-20f4e892>if</span> <span class="brackets" data-v-20f4e892>(</span><span class="word" data-v-20f4e892>res</span> <span class="variable" data-v-20f4e892>.ok</span><span class="brackets" data-v-20f4e892>){</span><div data-v-20f4e892></div><div class="padTwo VSL" data-v-20f4e892><span class="then" data-v-20f4e892>return </span><span class="word" data-v-20f4e892>res</span><span class="variable" data-v-20f4e892>.json</span><span class="brackets" data-v-20f4e892>()</span></div><div data-v-20f4e892><span class="brackets" data-v-20f4e892>}</span></div></div><div data-v-20f4e892><span class="brackets" data-v-20f4e892>})</span></div><div data-v-20f4e892><span class="variable" data-v-20f4e892>.then</span><span class="brackets" data-v-20f4e892>(</span> <span class="word" data-v-20f4e892>data</span><span class="function" data-v-20f4e892>=&gt; </span><span class="brackets" data-v-20f4e892>{</span></div><div class="padTwo VSL" data-v-20f4e892><span class="word" data-v-20f4e892>console</span><span class="variable" data-v-20f4e892>.log</span><span class="brackets" data-v-20f4e892>(</span> <span class="word" data-v-20f4e892>data</span><span class="brackets" data-v-20f4e892>)</span><div data-v-20f4e892></div></div><div data-v-20f4e892><span class="brackets" data-v-20f4e892>})</span></div><br data-v-20f4e892></div><div data-v-20f4e892><span class="comment" data-v-20f4e892>//fetch 做 post</span></div><div data-v-20f4e892><span class="variable" data-v-20f4e892>fetch</span><span class="brackets" data-v-20f4e892>(</span><span class="src" data-v-20f4e892>&quot;這裡放url&quot;</span><span class="brackets" data-v-20f4e892>, {</span></div><div class="padTwo VSL" data-v-20f4e892><div data-v-20f4e892><span class="word" data-v-20f4e892>method:</span><span class="src" data-v-20f4e892>&quot;POST&quot;</span> <span class="then" data-v-20f4e892>,</span></div><div data-v-20f4e892><span class="word" data-v-20f4e892>headers: </span><span class="brackets" data-v-20f4e892>{</span></div><div class="padTwo VSL" data-v-20f4e892><span class="src" data-v-20f4e892>&quot;Content-Type&quot;</span><span class="then" data-v-20f4e892>: </span><span class="src" data-v-20f4e892>&quot;application/json&quot;</span><div data-v-20f4e892></div></div><div data-v-20f4e892><span class="brackets" data-v-20f4e892>},</span></div><div data-v-20f4e892><span class="word" data-v-20f4e892>body:</span><span class="brackets" data-v-20f4e892>JSON</span><span class="variable" data-v-20f4e892>.stringify</span><span class="brackets" data-v-20f4e892>({</span></div><div class="padTwo VSL" data-v-20f4e892><span class="word" data-v-20f4e892>name:</span><span class="src" data-v-20f4e892>&quot;wayne&quot;</span> <span class="then" data-v-20f4e892>,</span><div data-v-20f4e892><span class="word" data-v-20f4e892>age:</span><span class="number" data-v-20f4e892>18</span></div><div data-v-20f4e892></div></div><div data-v-20f4e892><span class="brackets" data-v-20f4e892>})</span></div></div><div data-v-20f4e892><span class="brackets" data-v-20f4e892>})</span></div><br data-v-20f4e892><div class="padTwo VSL" data-v-20f4e892><span class="variable" data-v-20f4e892>.then</span><span class="brackets" data-v-20f4e892>(</span> <span class="word" data-v-20f4e892>res</span><span class="function" data-v-20f4e892>=&gt; </span><span class="brackets" data-v-20f4e892>{</span><div data-v-20f4e892></div><div class="padTwo VSL" data-v-20f4e892><span class="then" data-v-20f4e892>if</span> <span class="brackets" data-v-20f4e892>(</span><span class="word" data-v-20f4e892>res</span><span class="variable" data-v-20f4e892>.ok</span><span class="brackets" data-v-20f4e892>){</span><div data-v-20f4e892></div><div class="padTwo VSL" data-v-20f4e892><span class="then" data-v-20f4e892>return </span><span class="word" data-v-20f4e892>res</span><span class="variable" data-v-20f4e892>.json</span><span class="brackets" data-v-20f4e892>()</span></div><div data-v-20f4e892><span class="brackets" data-v-20f4e892>}</span></div></div><div data-v-20f4e892><span class="brackets" data-v-20f4e892>})</span></div><div data-v-20f4e892><span class="variable" data-v-20f4e892>.then</span><span class="brackets" data-v-20f4e892>(</span> <span class="word" data-v-20f4e892>data</span><span class="function" data-v-20f4e892>=&gt; </span><span class="brackets" data-v-20f4e892>{</span></div><div class="padTwo VSL" data-v-20f4e892><span class="word" data-v-20f4e892>console</span><span class="variable" data-v-20f4e892>.log</span><span class="brackets" data-v-20f4e892>(</span> <span class="word" data-v-20f4e892>data</span><span class="brackets" data-v-20f4e892>)</span><div data-v-20f4e892></div></div><div data-v-20f4e892><span class="brackets" data-v-20f4e892>})</span></div></div></div><div id="threeajax003" class="articleCardTitle cor36 fz34" data-v-20f4e892> 9.3 axios </div><a class="fz28" href="https://www.axios-http.cn/" data-v-20f4e892>@ axios</a><div class="bgcVS" data-v-20f4e892><div data-v-20f4e892><span class="then" data-v-20f4e892>＜</span> <span class="number" data-v-20f4e892>script</span><span class="word" data-v-20f4e892></span> <span class="word" data-v-20f4e892>src</span><span class="then" data-v-20f4e892>=</span><span class="src" data-v-20f4e892>&quot;https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js&quot;</span><span class="then" data-v-20f4e892>&gt;＜/ </span><span class="number" data-v-20f4e892>script</span> <span class="then" data-v-20f4e892>&gt;</span></div><div data-v-20f4e892><span class="variable" data-v-20f4e892>axios</span><span class="brackets" data-v-20f4e892>({</span></div><div class="padTwo VSL" data-v-20f4e892><span class="word" data-v-20f4e892>url:</span><span class="src" data-v-20f4e892>&quot;https://randomuser.me/api/&quot;</span><div data-v-20f4e892></div></div><div data-v-20f4e892><span class="brackets" data-v-20f4e892>})</span><span class="variable" data-v-20f4e892>.then</span><span class="brackets" data-v-20f4e892>( ( </span><span class="word" data-v-20f4e892>result </span> <span class="brackets" data-v-20f4e892>)</span><span class="function" data-v-20f4e892>=&gt;</span> <span class="brackets" data-v-20f4e892>{</span></div><div class="padTwo VSL" data-v-20f4e892><span class="word" data-v-20f4e892>console.</span><span class="variable" data-v-20f4e892>log</span> <span class="brackets" data-v-20f4e892>(</span><span class="word" data-v-20f4e892>result</span> <span class="brackets" data-v-20f4e892>)</span><div data-v-20f4e892></div></div><div data-v-20f4e892><span class="brackets" data-v-20f4e892>})</span></div></div><p class="fz28" data-v-20f4e892>什麼是 URL</p><p class="fz28" data-v-20f4e892>統一資源定位符 , 簡稱 網址 , 用於訪問 網路上 資源</p><br data-v-20f4e892><div data-v-20f4e892><span class="number fz30" data-v-20f4e892>http://</span><span class="variable fz30" data-v-20f4e892>randomuser.me</span><span class="src fz30" data-v-20f4e892>/api/</span></div><div data-v-20f4e892><span class="number fz30" data-v-20f4e892>協議</span><span class="cor17" data-v-20f4e892>......</span><span class="variable fz30" data-v-20f4e892>域名</span><span class="cor17" data-v-20f4e892>..................</span><span class="src fz30" data-v-20f4e892>資源路徑</span></div><br data-v-20f4e892><br data-v-20f4e892><p class="fz28" data-v-20f4e892>http 協議</p><p class="fz28" data-v-20f4e892> 超文本傳輸協議 , 規定瀏覽器和服務器之間傳輸數據的格式 </p><br data-v-20f4e892><br data-v-20f4e892><p class="fz28" data-v-20f4e892>域名</p><p class="fz28" data-v-20f4e892>標記服務器在互聯網中方位</p><br data-v-20f4e892><br data-v-20f4e892><p class="fz28" data-v-20f4e892>URL 查詢參數</p><p class="fz28" data-v-20f4e892> 瀏覽器 提供給 服務器的 額外訊息 , 讓 服務器 返回 瀏覽器 想要的 數據 </p><p class="fz28" data-v-20f4e892> http//test.com/test/test<span class="number" data-v-20f4e892>?參數名1=值1&amp;參數名2=值2</span></p><div class="bgcVS" data-v-20f4e892><p data-v-20f4e892>axios 查詢參數</p><p data-v-20f4e892>axios 會把參數名和值 , 拼接到 url?參數名=值</p><div data-v-20f4e892><span class="variable" data-v-20f4e892>axios</span><span class="brackets" data-v-20f4e892>({</span></div><div class="padTwo VSL" data-v-20f4e892><span class="word" data-v-20f4e892>url:</span><span class="src" data-v-20f4e892>&quot;https://randomuser.me/api/&quot;</span><div data-v-20f4e892></div></div><div class="padTwo VSL" data-v-20f4e892><span class="word" data-v-20f4e892>params:</span> <span class="brackets" data-v-20f4e892>{</span><div data-v-20f4e892><div class="padTwo VSL" data-v-20f4e892><span class="word" data-v-20f4e892>參數名:值</span><div data-v-20f4e892></div></div><div data-v-20f4e892><span class="brackets" data-v-20f4e892>}</span></div></div></div><div data-v-20f4e892><span class="brackets" data-v-20f4e892>})</span><span class="variable" data-v-20f4e892>.then</span><span class="brackets" data-v-20f4e892>( ( </span><span class="word" data-v-20f4e892>result </span> <span class="brackets" data-v-20f4e892>)</span><span class="function" data-v-20f4e892>=&gt;</span> <span class="brackets" data-v-20f4e892>{</span></div><div class="padTwo VSL" data-v-20f4e892><span class="word" data-v-20f4e892>console.</span><span class="variable" data-v-20f4e892>log</span> <span class="brackets" data-v-20f4e892>(</span><span class="word" data-v-20f4e892>result</span> <span class="brackets" data-v-20f4e892>)</span><div data-v-20f4e892></div></div><div data-v-20f4e892><span class="brackets" data-v-20f4e892>})</span></div></div><p class="fz28" data-v-20f4e892>請求方法: 對服務器資源 , 要執行的操作</p><p class="fz28" data-v-20f4e892>GET _ 獲取數據</p><p class="fz28" data-v-20f4e892>POST _ 提交數據</p><p class="fz28" data-v-20f4e892>PUT _ 修改數據 ( 全部 )</p><p class="fz28" data-v-20f4e892>DELETE _ 刪除數據</p><p class="fz28" data-v-20f4e892>PATCH _ 修改數據 ( 部分 )</p><div class="bgcVS" data-v-20f4e892><p data-v-20f4e892>axios 請求數據 + 查詢參數</p><p data-v-20f4e892>axios 會把參數名和值 , 拼接到 url?參數名=值</p><div data-v-20f4e892><span class="variable" data-v-20f4e892>axios</span><span class="brackets" data-v-20f4e892>({</span></div><div class="padTwo VSL" data-v-20f4e892><span class="word" data-v-20f4e892>url:</span><span class="src" data-v-20f4e892>&quot;https://randomuser.me/api/&quot;</span><div data-v-20f4e892></div></div><div class="padTwo VSL" data-v-20f4e892><div data-v-20f4e892><span class="word" data-v-20f4e892>method:</span><span class="src" data-v-20f4e892>&quot;請求方法&quot;</span></div><span class="word" data-v-20f4e892>params:</span> <span class="brackets" data-v-20f4e892>{</span><div data-v-20f4e892><div class="padTwo VSL" data-v-20f4e892><span class="word" data-v-20f4e892>參數名:值</span><div data-v-20f4e892></div></div><div data-v-20f4e892><span class="brackets" data-v-20f4e892>}</span></div></div></div><div data-v-20f4e892><span class="brackets" data-v-20f4e892>})</span><span class="variable" data-v-20f4e892>.then</span><span class="brackets" data-v-20f4e892>( ( </span><span class="word" data-v-20f4e892>result </span> <span class="brackets" data-v-20f4e892>)</span><span class="function" data-v-20f4e892>=&gt;</span> <span class="brackets" data-v-20f4e892>{</span></div><div class="padTwo VSL" data-v-20f4e892><span class="word" data-v-20f4e892>console.</span><span class="variable" data-v-20f4e892>log</span> <span class="brackets" data-v-20f4e892>(</span><span class="word" data-v-20f4e892>result</span> <span class="brackets" data-v-20f4e892>)</span><div data-v-20f4e892></div></div><div data-v-20f4e892><span class="brackets" data-v-20f4e892>})</span></div><br data-v-20f4e892><p data-v-20f4e892>axios 提交數據到服務器</p><br data-v-20f4e892><div data-v-20f4e892><span class="then" data-v-20f4e892>＜</span> <span class="number" data-v-20f4e892>button </span><span class="function" data-v-20f4e892>class </span> <span class="then" data-v-20f4e892>=</span><span class="src" data-v-20f4e892>&quot;btn&quot;</span> <span class="then" data-v-20f4e892>&gt;</span><span class="word" data-v-20f4e892>註冊</span> <span class="then" data-v-20f4e892>＜/</span><span class="number" data-v-20f4e892>button</span> <span class="then" data-v-20f4e892>&gt;</span></div><div data-v-20f4e892><span class="word" data-v-20f4e892>document</span><span class="variable" data-v-20f4e892>.querySelector</span><span class="brackets" data-v-20f4e892>(</span> <span class="src" data-v-20f4e892>&quot;.btn&quot;</span><span class="brackets" data-v-20f4e892>)</span><span class="word" data-v-20f4e892>.addEventListener</span><span class="brackets" data-v-20f4e892>(</span> <span class="src" data-v-20f4e892>&quot;click&quot;</span><span class="then" data-v-20f4e892>,</span> <span class="brackets" data-v-20f4e892>()</span><span class="function" data-v-20f4e892>=&gt;</span> <span class="brackets" data-v-20f4e892>{</span></div><div class="padTwo VSL" data-v-20f4e892><span class="variable" data-v-20f4e892>axios</span><span class="brackets" data-v-20f4e892>({</span><div data-v-20f4e892><div class="padTwo VSL" data-v-20f4e892><span class="word" data-v-20f4e892>url:</span> <span class="src" data-v-20f4e892>&quot;&quot;,</span><div data-v-20f4e892><span class="word" data-v-20f4e892>method:</span><span class="src" data-v-20f4e892>&quot;post&quot;, </span><span class="comment" data-v-20f4e892>// 提交數據</span></div><div data-v-20f4e892><span class="word" data-v-20f4e892>data:</span><span class="brackets" data-v-20f4e892>{</span></div><div class="padTwo VSL" data-v-20f4e892><div data-v-20f4e892><div data-v-20f4e892><span class="word" data-v-20f4e892>username:</span><span class="src" data-v-20f4e892>&quot;&quot;,</span></div><div data-v-20f4e892><span class="word" data-v-20f4e892>password:</span><span class="src" data-v-20f4e892>&quot;&quot;</span></div></div></div><div data-v-20f4e892><span class="brackets" data-v-20f4e892>}</span></div></div></div></div><div class="padTwo VSL" data-v-20f4e892><span class="brackets" data-v-20f4e892>})</span><span class="variable" data-v-20f4e892>.then</span><span class="brackets" data-v-20f4e892>((</span> <span class="word" data-v-20f4e892>result</span><span class="brackets" data-v-20f4e892>)</span> <span class="function" data-v-20f4e892>=&gt;</span><span class="brackets" data-v-20f4e892>{</span><div data-v-20f4e892><div class="padTwo VSL" data-v-20f4e892><span class="word" data-v-20f4e892>console.</span><span class="variable" data-v-20f4e892>log</span><span class="brackets" data-v-20f4e892>(</span><span class="word" data-v-20f4e892>result</span><span class="brackets" data-v-20f4e892>)</span><div data-v-20f4e892></div></div><div data-v-20f4e892><span class="brackets" data-v-20f4e892>})</span></div></div></div><div data-v-20f4e892><span class="brackets" data-v-20f4e892>})</span></div><br data-v-20f4e892><p data-v-20f4e892>axios 錯誤處理</p><p data-v-20f4e892> 在 then 方法後面 , 調用 catch 方法 , 傳入 回掉函數 並定義 形參 </p><br data-v-20f4e892><p data-v-20f4e892></p><br data-v-20f4e892><div data-v-20f4e892><span class="then" data-v-20f4e892>＜</span> <span class="number" data-v-20f4e892>button </span><span class="function" data-v-20f4e892>class </span> <span class="then" data-v-20f4e892>=</span><span class="src" data-v-20f4e892>&quot;btn&quot;</span> <span class="then" data-v-20f4e892>&gt;</span><span class="word" data-v-20f4e892>註冊</span> <span class="then" data-v-20f4e892>＜/</span><span class="number" data-v-20f4e892>button</span> <span class="then" data-v-20f4e892>&gt;</span></div><div data-v-20f4e892><span class="word" data-v-20f4e892>document</span><span class="variable" data-v-20f4e892>.querySelector</span><span class="brackets" data-v-20f4e892>(</span> <span class="src" data-v-20f4e892>&quot;.btn&quot;</span><span class="brackets" data-v-20f4e892>)</span><span class="word" data-v-20f4e892>.addEventListener</span><span class="brackets" data-v-20f4e892>(</span> <span class="src" data-v-20f4e892>&quot;click&quot;</span><span class="then" data-v-20f4e892>,</span> <span class="brackets" data-v-20f4e892>()</span><span class="function" data-v-20f4e892>=&gt;</span> <span class="brackets" data-v-20f4e892>{</span></div><div class="padTwo VSL" data-v-20f4e892><span class="variable" data-v-20f4e892>axios</span><span class="brackets" data-v-20f4e892>({</span><div data-v-20f4e892><div class="padTwo VSL" data-v-20f4e892><span class="word" data-v-20f4e892>url:</span> <span class="src" data-v-20f4e892>&quot;&quot;,</span><div data-v-20f4e892><span class="word" data-v-20f4e892>method:</span><span class="src" data-v-20f4e892>&quot;post&quot;,</span><span class="comment" data-v-20f4e892>// 提交數據</span></div><div data-v-20f4e892><span class="word" data-v-20f4e892>data:</span><span class="brackets" data-v-20f4e892>{</span></div><div class="padTwo VSL" data-v-20f4e892><div data-v-20f4e892><div data-v-20f4e892><span class="word" data-v-20f4e892>username:</span><span class="src" data-v-20f4e892>&quot;&quot;,</span></div><div data-v-20f4e892><span class="word" data-v-20f4e892>password:</span><span class="src" data-v-20f4e892>&quot;&quot;</span></div></div></div><div data-v-20f4e892><span class="brackets" data-v-20f4e892>}</span></div></div></div></div><div class="padTwo VSL" data-v-20f4e892><span class="brackets" data-v-20f4e892>})</span><span class="variable" data-v-20f4e892>.then</span><span class="brackets" data-v-20f4e892>((</span> <span class="word" data-v-20f4e892>result</span><span class="brackets" data-v-20f4e892>)</span> <span class="function" data-v-20f4e892>=&gt;</span><span class="brackets" data-v-20f4e892>{</span><div data-v-20f4e892><div class="padTwo VSL" data-v-20f4e892><span class="word" data-v-20f4e892>console.</span><span class="variable" data-v-20f4e892>log</span><span class="brackets" data-v-20f4e892>(</span><span class="word" data-v-20f4e892>result</span><span class="brackets" data-v-20f4e892>)</span><div data-v-20f4e892></div></div><div data-v-20f4e892><span class="brackets" data-v-20f4e892>})</span><span class="variable" data-v-20f4e892>.catch</span><span class="brackets" data-v-20f4e892>( ( </span><span class="variable" data-v-20f4e892>error </span><span class="brackets" data-v-20f4e892>)</span><span class="function" data-v-20f4e892>=&gt;</span><span class="brackets" data-v-20f4e892>{</span></div><div class="padTwo VSL" data-v-20f4e892><span class="comment" data-v-20f4e892>//處理報錯訊息</span><div data-v-20f4e892><span class="word" data-v-20f4e892>console</span><span class="word" data-v-20f4e892>.log</span><span class="brackets" data-v-20f4e892>(</span><span class="variable" data-v-20f4e892>error</span><span class="brackets" data-v-20f4e892>)</span></div><div data-v-20f4e892></div></div><div data-v-20f4e892><span class="brackets" data-v-20f4e892>})</span></div></div></div><div data-v-20f4e892><span class="brackets" data-v-20f4e892>})</span></div><br data-v-20f4e892></div><p class="fz28" data-v-20f4e892>HTTP 協議 請求報文</p><p class="fz28" data-v-20f4e892> 請求報文: 瀏覽器 按照 HTTP 協議要求的格式 , 發給 服務器 的內容 </p><br data-v-20f4e892><p class="fz28" data-v-20f4e892>1 | POST http://test.com/URL網址... HTTP/1.1</p><p class="fz28" data-v-20f4e892>2 | ...</p><p class="fz28" data-v-20f4e892>3 | ...</p><p class="fz28" data-v-20f4e892>4 | ...</p><p class="fz28" data-v-20f4e892>5 | ...</p><p class="fz28" data-v-20f4e892>6 | ...</p><p class="fz28" data-v-20f4e892>7 | Content-Type : application/json</p><p class="fz28" data-v-20f4e892>8 | ...</p><p class="fz28" data-v-20f4e892>9 | ...</p><p class="fz28" data-v-20f4e892>10| ...</p><p class="fz28" data-v-20f4e892>11| ...</p><p class="fz28" data-v-20f4e892>12|</p><p class="fz28" data-v-20f4e892>13| { &quot;username&quot;:&quot;admin&quot;,&quot;password&quot;:&quot;123465&quot; }</p><br data-v-20f4e892><br data-v-20f4e892><p class="fz28" data-v-20f4e892>請求報文 4 部分</p><p class="fz28" data-v-20f4e892>1. 請求行: 請求方法 , URL , 協議</p><p class="fz28" data-v-20f4e892> 2. 請求頭: 以鍵值對的格式攜帶的附加訊息 ex Content-Type </p><p class="fz28" data-v-20f4e892>3. 空行: 分割請求頭 , 空行之後是發送給服務器的資源</p><p class="fz28" data-v-20f4e892>4. 請求體: 發送的資源</p><br data-v-20f4e892><br data-v-20f4e892><p class="fz28" data-v-20f4e892>HTTP 協議 響應報文</p><p class="fz28" data-v-20f4e892> 響應報文: 服務器 按照 HTP 協議要求的格式 , 返回給 瀏覽器 的內容 </p><br data-v-20f4e892><br data-v-20f4e892><p class="fz28" data-v-20f4e892>響應報文 4 部分</p><p class="fz28" data-v-20f4e892>1. 響應行: 協議 , HTTP 響應狀態碼 , 狀態訊息</p><p class="fz28" data-v-20f4e892> 2. 響應頭: 以鍵值對的格式攜帶的附加訊息 ex Content-Type </p><p class="fz28" data-v-20f4e892>3. 空行: 分割響應頭 , 空行之後是服務器返回的資源</p><p class="fz28" data-v-20f4e892>4. 請求體: 返回的資源</p><br data-v-20f4e892><br data-v-20f4e892><p class="fz28" data-v-20f4e892>1 | HTTP/1.1 400 Bad Request</p><p class="fz28" data-v-20f4e892>2 | ...</p><p class="fz28" data-v-20f4e892>3 | ...</p><p class="fz28" data-v-20f4e892>4 | Content-Type: application/json</p><p class="fz28" data-v-20f4e892>5 | ...</p><p class="fz28" data-v-20f4e892>6 | ...</p><p class="fz28" data-v-20f4e892>7 | ...</p><p class="fz28" data-v-20f4e892>8 | ...</p><p class="fz28" data-v-20f4e892>9 | ...</p><p class="fz28" data-v-20f4e892>10| ...</p><p class="fz28" data-v-20f4e892>11| ...</p><p class="fz28" data-v-20f4e892>12| ...</p><p class="fz28" data-v-20f4e892>13| ...</p><p class="fz28" data-v-20f4e892>14| ...</p><p class="fz28" data-v-20f4e892>15|</p><p class="fz28" data-v-20f4e892>16| {&quot;code&quot;:123456,&quot;message&quot;:&quot;test&quot;}</p><br data-v-20f4e892><br data-v-20f4e892><p class="fz28" data-v-20f4e892>HTTP 響應狀態碼</p><p class="fz28" data-v-20f4e892>1XX ... 訊息</p><p class="fz28" data-v-20f4e892>2XX ... 成功</p><p class="fz28" data-v-20f4e892>3XX ... 重定向</p><p class="fz28" data-v-20f4e892>4XX ... 客戶端錯誤</p><p class="fz28" data-v-20f4e892>5XX ... 服務端錯誤</p><br data-v-20f4e892><br data-v-20f4e892><p class="fz28" data-v-20f4e892>404 服務器找不到資源</p><br data-v-20f4e892><br data-v-20f4e892><p class="fz28" data-v-20f4e892>接口文檔</p><p class="fz28" data-v-20f4e892> 接口: 使用 AJAX 和 服務器通訊時 , 使用的 URL , 請求方法 , 參數 </p><br data-v-20f4e892><br data-v-20f4e892><p class="fz28" data-v-20f4e892>XMLHttpRequest</p><p class="fz28" data-v-20f4e892>1. 創建 XMLHttpRequest 對象</p><p class="fz28" data-v-20f4e892>2. 配 請求方法 &amp; url</p><p class="fz28" data-v-20f4e892>3. 監聽 loadend 接收響應結果</p><p class="fz28" data-v-20f4e892>4. 發請求</p><div class="bgcVS" data-v-20f4e892><div data-v-20f4e892><span class="function" data-v-20f4e892>const </span><span class="word" data-v-20f4e892>xhr</span> <span class="then" data-v-20f4e892>=</span><span class="then" data-v-20f4e892>new </span><span class="word" data-v-20f4e892>XMLHttpRequest</span><span class="brackets" data-v-20f4e892>()</span></div><div data-v-20f4e892><span class="word" data-v-20f4e892>xhr</span> <span class="variable" data-v-20f4e892>.open</span><span class="brackets" data-v-20f4e892>(</span><span class="src" data-v-20f4e892>&quot;請求方法&quot;,&quot;請求url網址&quot;</span><span class="brackets" data-v-20f4e892>)</span></div><div data-v-20f4e892><span class="word" data-v-20f4e892>xhr</span><span class="variable" data-v-20f4e892>.addEventListener</span><span class="brackets" data-v-20f4e892>(</span><span class="src" data-v-20f4e892>&quot;loadend&quot;</span> <span class="then" data-v-20f4e892>,</span><span class="brackets" data-v-20f4e892>()</span> <span class="function" data-v-20f4e892>=&gt;</span><span class="brackets" data-v-20f4e892>{</span></div><div class="padTwo VSL" data-v-20f4e892><span class="word" data-v-20f4e892>console.</span><span class="variable" data-v-20f4e892>log</span> <span class="brackets" data-v-20f4e892>(</span><span class="word" data-v-20f4e892>xhr.response</span><span class="brackets" data-v-20f4e892>)</span><span class="comment" data-v-20f4e892>//響應結果</span><div data-v-20f4e892><span class="function" data-v-20f4e892>const </span><span class="word" data-v-20f4e892>data</span> <span class="then" data-v-20f4e892>=</span><span class="brackets" data-v-20f4e892>JSON</span><span class="variable" data-v-20f4e892>.parse</span><span class="brackets" data-v-20f4e892>(</span><span class="word" data-v-20f4e892>xhr.response</span><span class="brackets" data-v-20f4e892>)</span></div><div data-v-20f4e892><span class="word" data-v-20f4e892>console.</span><span class="variable" data-v-20f4e892>log</span><span class="brackets" data-v-20f4e892>(</span> <span class="word" data-v-20f4e892>data</span><span class="brackets" data-v-20f4e892>)</span></div><div data-v-20f4e892></div></div><div data-v-20f4e892><span class="brackets" data-v-20f4e892>})</span></div><div data-v-20f4e892><span class="word" data-v-20f4e892>xhr</span> <span class="variable" data-v-20f4e892>.send</span><span class="brackets" data-v-20f4e892>()</span></div></div><div id="threeajax004" class="articleCardTitle cor36 fz34" data-v-20f4e892> 9.4 Promise 3 狀態 pending . . . fullfilled . . . rejected </div><p class="fz28" data-v-20f4e892>pending 待定: 初始狀態</p><p class="fz28" data-v-20f4e892>fullfilled 兌現: 操作成功</p><p class="fz28" data-v-20f4e892>rejected 拒絕: 操作失敗</p><br data-v-20f4e892><br data-v-20f4e892><p class="fz28" data-v-20f4e892>Promise 狀態 一但 兌現 / 拒絕 就 無法再改變</p><br data-v-20f4e892><div class="bgcVS" data-v-20f4e892><div data-v-20f4e892><span class="comment" data-v-20f4e892>//1.創建Promise對象(pending-待定狀態)</span></div><div data-v-20f4e892><span class="function" data-v-20f4e892>const </span> <span class="word" data-v-20f4e892>p</span><span class="then" data-v-20f4e892>=</span> <span class="then" data-v-20f4e892>new </span><span class="brackets" data-v-20f4e892>Promise</span><span class="brackets" data-v-20f4e892>((</span><span class="word" data-v-20f4e892>resolve,reject</span><span class="brackets" data-v-20f4e892>)</span> <span class="function" data-v-20f4e892>=&gt;</span><span class="brackets" data-v-20f4e892>{</span></div><div class="padTwo VSL" data-v-20f4e892><span class="word" data-v-20f4e892>console.</span><span class="variable" data-v-20f4e892>log</span> <span class="brackets" data-v-20f4e892>(</span><span class="src" data-v-20f4e892>&quot;Promise對象創建時,這裡的代碼都會執行了&quot;</span><span class="brackets" data-v-20f4e892>)</span><div data-v-20f4e892></div><div data-v-20f4e892><span class="comment" data-v-20f4e892>//2.執行異步代碼</span></div><div data-v-20f4e892><span class="variable" data-v-20f4e892>setTimeout</span><span class="brackets" data-v-20f4e892>(()</span><span class="function" data-v-20f4e892>=&gt;</span> <span class="brackets" data-v-20f4e892>{</span></div><div class="padTwo VSL" data-v-20f4e892><span class="comment" data-v-20f4e892>//resolve(調用時fullfilled狀態) . . &gt; then()</span><div data-v-20f4e892><span class="variable" data-v-20f4e892>resolve</span><span class="brackets" data-v-20f4e892>(</span><span class="src" data-v-20f4e892>&quot;模擬AJAX-成功結果&quot;</span><span class="brackets" data-v-20f4e892>)</span></div><div data-v-20f4e892><span class="comment" data-v-20f4e892>//reject(調用時rejected狀態) . . &gt; catch()</span></div><div data-v-20f4e892><span class="variable" data-v-20f4e892>reject</span><span class="brackets" data-v-20f4e892>(</span><span class="then" data-v-20f4e892>new </span><span class="word" data-v-20f4e892>Error</span><span class="brackets" data-v-20f4e892>(</span><span class="src" data-v-20f4e892>&quot;模擬AJAX請求-失敗結果&quot;</span><span class="brackets" data-v-20f4e892>))</span></div><div data-v-20f4e892></div></div><div data-v-20f4e892><span class="brackets" data-v-20f4e892>},</span><span class="number" data-v-20f4e892>2000</span> <span class="brackets" data-v-20f4e892>)</span></div></div><div data-v-20f4e892><span class="brackets" data-v-20f4e892>})</span></div><div data-v-20f4e892><span class="comment" data-v-20f4e892>//3.獲取結果</span></div><div data-v-20f4e892><span class="word" data-v-20f4e892>p</span><span class="variable" data-v-20f4e892>.then</span><span class="brackets" data-v-20f4e892>(</span> <span class="word" data-v-20f4e892>result</span><span class="function" data-v-20f4e892>=&gt;</span> <span class="brackets" data-v-20f4e892>{</span></div><div class="padTwo VSL" data-v-20f4e892><span class="word" data-v-20f4e892>console.</span><span class="variable" data-v-20f4e892>log</span> <span class="brackets" data-v-20f4e892>(</span><span class="word" data-v-20f4e892>result</span> <span class="brackets" data-v-20f4e892>)</span><div data-v-20f4e892></div></div><div data-v-20f4e892><span class="brackets" data-v-20f4e892>})</span><span class="variable" data-v-20f4e892>.catch</span><span class="brackets" data-v-20f4e892>(</span><span class="variable" data-v-20f4e892>error</span><span class="function" data-v-20f4e892>=&gt;</span> <span class="brackets" data-v-20f4e892>{</span></div><div class="padTwo VSL" data-v-20f4e892><span class="word" data-v-20f4e892>console.</span><span class="variable" data-v-20f4e892>log</span> <span class="brackets" data-v-20f4e892>(</span><span class="variable" data-v-20f4e892>error</span><span class="brackets" data-v-20f4e892>)</span><div data-v-20f4e892></div></div><div data-v-20f4e892><span class="brackets" data-v-20f4e892>})</span></div></div><p class="fz28" data-v-20f4e892>xhr + Promise</p><div class="bgcVS" data-v-20f4e892><div data-v-20f4e892><span class="then" data-v-20f4e892>＜</span> <span class="number" data-v-20f4e892>div </span><span class="function" data-v-20f4e892>class </span> <span class="then" data-v-20f4e892>=</span><span class="src" data-v-20f4e892>&quot;showData&quot;</span><span class="then" data-v-20f4e892>&gt;＜/ </span> <span class="number" data-v-20f4e892>div </span><span class="then" data-v-20f4e892>&gt;</span></div><div data-v-20f4e892><span class="comment" data-v-20f4e892>//1.創建Promise對象</span></div><div data-v-20f4e892><span class="function" data-v-20f4e892>const </span> <span class="word" data-v-20f4e892>p</span><span class="then" data-v-20f4e892>=</span> <span class="then" data-v-20f4e892>new </span><span class="brackets" data-v-20f4e892>Promise</span><span class="brackets" data-v-20f4e892>((</span><span class="variable" data-v-20f4e892>resolve,reject</span><span class="brackets" data-v-20f4e892>)</span> <span class="function" data-v-20f4e892>=&gt;</span><span class="brackets" data-v-20f4e892>{</span></div><div class="padTwo VSL" data-v-20f4e892><span class="comment" data-v-20f4e892>//2.執行xhr異步獲取資料</span><div data-v-20f4e892><span class="function" data-v-20f4e892>const </span><span class="word" data-v-20f4e892>xhr</span> <span class="then" data-v-20f4e892>=</span><span class="then" data-v-20f4e892>new </span><span class="word" data-v-20f4e892>XMLHttpRequest</span><span class="brackets" data-v-20f4e892>()</span></div><div data-v-20f4e892><span class="word" data-v-20f4e892>xhr</span><span class="variable" data-v-20f4e892>.open</span><span class="brackets" data-v-20f4e892>(</span><span class="src" data-v-20f4e892>&quot;GET&quot;,&quot;放URL&quot;</span><span class="brackets" data-v-20f4e892>)</span></div><div data-v-20f4e892><span class="word" data-v-20f4e892>xhr</span><span class="variable" data-v-20f4e892>.addEventListener</span><span class="brackets" data-v-20f4e892>(</span><span class="src" data-v-20f4e892>&quot;loadend&quot;</span> <span class="then" data-v-20f4e892>,</span><span class="brackets" data-v-20f4e892>()</span><span class="function" data-v-20f4e892>=&gt;</span> <span class="brackets" data-v-20f4e892>{</span></div><div data-v-20f4e892></div><div class="padTwo VSL" data-v-20f4e892><span class="comment" data-v-20f4e892>//xhr判斷響應碼,2xx成功</span><div data-v-20f4e892><span class="then" data-v-20f4e892>if</span> <span class="brackets" data-v-20f4e892>(</span><span class="word" data-v-20f4e892>xhr.status</span><span class="then" data-v-20f4e892>&gt;=</span> <span class="number" data-v-20f4e892>200</span><span class="word" data-v-20f4e892>&amp;&amp;</span><span class="word" data-v-20f4e892>xhr.status</span><span class="then" data-v-20f4e892>＜</span> <span class="number" data-v-20f4e892>300</span><span class="brackets" data-v-20f4e892>){</span></div><div data-v-20f4e892></div><div class="padTwo VSL" data-v-20f4e892><span class="variable" data-v-20f4e892>resolve</span><span class="brackets" data-v-20f4e892>(</span><span class="brackets" data-v-20f4e892>JSON</span><span class="variable" data-v-20f4e892>.parse</span><span class="brackets" data-v-20f4e892>(</span><span class="word" data-v-20f4e892>xhr.response</span><span class="brackets" data-v-20f4e892>))</span><div data-v-20f4e892></div></div><div data-v-20f4e892><span class="brackets" data-v-20f4e892>}</span><span class="then" data-v-20f4e892>else </span><span class="brackets" data-v-20f4e892>{</span></div><div class="padTwo VSL" data-v-20f4e892><span class="variable" data-v-20f4e892>reject</span><span class="brackets" data-v-20f4e892>(</span><span class="then" data-v-20f4e892>new </span><span class="word" data-v-20f4e892>Error</span><span class="brackets" data-v-20f4e892>(</span><span class="word" data-v-20f4e892>xhr.response</span><span class="brackets" data-v-20f4e892>))</span><div data-v-20f4e892></div></div><div data-v-20f4e892><span class="brackets" data-v-20f4e892>}</span></div></div><div data-v-20f4e892><span class="brackets" data-v-20f4e892>})</span></div><div data-v-20f4e892><span class="word" data-v-20f4e892>xhr</span><span class="variable" data-v-20f4e892>.send</span><span class="brackets" data-v-20f4e892>()</span></div></div><div data-v-20f4e892><span class="brackets" data-v-20f4e892>})</span></div><div data-v-20f4e892><span class="comment" data-v-20f4e892>//3.成功執行then,失敗執行catch</span></div><div data-v-20f4e892><span class="word" data-v-20f4e892>p</span> <span class="variable" data-v-20f4e892>.then</span><span class="brackets" data-v-20f4e892>(</span> <span class="word" data-v-20f4e892>result</span><span class="function" data-v-20f4e892>=&gt;</span> <span class="brackets" data-v-20f4e892>{</span></div><div class="padTwo VSL" data-v-20f4e892><span class="word" data-v-20f4e892>console</span><span class="variable" data-v-20f4e892>.log</span><span class="brackets" data-v-20f4e892>(</span> <span class="word" data-v-20f4e892>result</span><span class="brackets" data-v-20f4e892>)</span><div data-v-20f4e892><span class="word" data-v-20f4e892>document</span><span class="variable" data-v-20f4e892>.querySelector</span><span class="brackets" data-v-20f4e892>(</span><span class="src" data-v-20f4e892>&quot;.showData&quot;</span><span class="brackets" data-v-20f4e892>)</span><span class="variable" data-v-20f4e892>.innerHTML</span><span class="then" data-v-20f4e892>=</span> <span class="word" data-v-20f4e892>result</span></div><div data-v-20f4e892></div></div><div data-v-20f4e892><span class="brackets" data-v-20f4e892>})</span><span class="variable" data-v-20f4e892>.catch</span><span class="brackets" data-v-20f4e892>(</span><span class="variable" data-v-20f4e892>error</span><span class="function" data-v-20f4e892>=&gt;</span> <span class="brackets" data-v-20f4e892>{</span></div><div class="padTwo VSL" data-v-20f4e892><span class="word" data-v-20f4e892>console</span><span class="variable" data-v-20f4e892>.log</span><span class="brackets" data-v-20f4e892>(</span><span class="variable" data-v-20f4e892>error</span><span class="brackets" data-v-20f4e892>)</span><div data-v-20f4e892></div></div><div data-v-20f4e892><span class="brackets" data-v-20f4e892>})</span></div></div><p class="fz28" data-v-20f4e892>模仿 axios 封裝 xhr + Promise</p><div class="bgcVS" data-v-20f4e892><div data-v-20f4e892><span class="then" data-v-20f4e892>＜</span> <span class="number" data-v-20f4e892>div </span><span class="function" data-v-20f4e892>class </span> <span class="then" data-v-20f4e892>=</span><span class="src" data-v-20f4e892>&quot;showData&quot;</span><span class="then" data-v-20f4e892>&gt;＜/ </span> <span class="number" data-v-20f4e892>div </span><span class="then" data-v-20f4e892>&gt;</span></div><div data-v-20f4e892><span class="function" data-v-20f4e892>function </span><span class="word" data-v-20f4e892>myAxios</span> <span class="brackets" data-v-20f4e892>(</span><span class="word" data-v-20f4e892>config</span> <span class="brackets" data-v-20f4e892>){</span></div><div class="padTwo VSL" data-v-20f4e892><span class="then" data-v-20f4e892>return </span> <span class="then" data-v-20f4e892>new </span><span class="brackets" data-v-20f4e892>Promise</span><span class="brackets" data-v-20f4e892>((</span><span class="variable" data-v-20f4e892>resolve,reject</span><span class="brackets" data-v-20f4e892>)</span> <span class="function" data-v-20f4e892>=&gt;</span><span class="brackets" data-v-20f4e892>{</span><div data-v-20f4e892></div><div class="padTwo VSL" data-v-20f4e892><span class="comment" data-v-20f4e892>//2.發起xhr,默認請求方法GET</span><div data-v-20f4e892><span class="function" data-v-20f4e892>const </span><span class="word" data-v-20f4e892>xhr</span> <span class="then" data-v-20f4e892>=</span><span class="then" data-v-20f4e892>new </span><span class="word" data-v-20f4e892>XMLHttpRequest</span><span class="brackets" data-v-20f4e892>()</span></div><div data-v-20f4e892><span class="word" data-v-20f4e892>xhr</span><span class="variable" data-v-20f4e892>.open</span><span class="brackets" data-v-20f4e892>(</span><span class="word" data-v-20f4e892>config.method </span><span class="then" data-v-20f4e892>||</span> <span class="src" data-v-20f4e892>&quot;GET&quot;</span><span class="then" data-v-20f4e892>,</span><span class="word" data-v-20f4e892>config.url</span><span class="brackets" data-v-20f4e892>)</span></div><div data-v-20f4e892><span class="word" data-v-20f4e892>xhr</span><span class="variable" data-v-20f4e892>.addEventListener</span><span class="brackets" data-v-20f4e892>(</span><span class="src" data-v-20f4e892>&quot;loadend&quot;</span> <span class="then" data-v-20f4e892>,</span><span class="brackets" data-v-20f4e892>()</span><span class="function" data-v-20f4e892>=&gt;</span><span class="brackets" data-v-20f4e892>{</span></div><div data-v-20f4e892></div><div class="padTwo VSL" data-v-20f4e892><span class="comment" data-v-20f4e892>//xhr判斷響應碼,2xx成功</span><div data-v-20f4e892><span class="then" data-v-20f4e892>if</span> <span class="brackets" data-v-20f4e892>(</span><span class="word" data-v-20f4e892>xhr.status</span><span class="then" data-v-20f4e892>&gt;=</span> <span class="number" data-v-20f4e892>200</span><span class="then" data-v-20f4e892>&amp;&amp; </span><span class="word" data-v-20f4e892>xhr.status</span><span class="then" data-v-20f4e892>＜</span> <span class="number" data-v-20f4e892>300</span><span class="brackets" data-v-20f4e892>){</span></div><div data-v-20f4e892></div><div class="padTwo VSL" data-v-20f4e892><span class="variable" data-v-20f4e892>resolve</span><span class="brackets" data-v-20f4e892>(</span><span class="brackets" data-v-20f4e892>JSON</span><span class="variable" data-v-20f4e892>.parse</span><span class="brackets" data-v-20f4e892>(</span><span class="word" data-v-20f4e892>xhr.response</span><span class="brackets" data-v-20f4e892>))</span><div data-v-20f4e892></div></div><div data-v-20f4e892><span class="brackets" data-v-20f4e892>}</span><span class="then" data-v-20f4e892>else </span><span class="brackets" data-v-20f4e892>{</span></div><div class="padTwo VSL" data-v-20f4e892><span class="variable" data-v-20f4e892>reject</span><span class="brackets" data-v-20f4e892>(</span><span class="then" data-v-20f4e892>new </span><span class="word" data-v-20f4e892>Error</span><span class="brackets" data-v-20f4e892>(</span><span class="word" data-v-20f4e892>xhr.response</span><span class="brackets" data-v-20f4e892>))</span><div data-v-20f4e892></div></div><div data-v-20f4e892><span class="brackets" data-v-20f4e892>}</span></div></div><div data-v-20f4e892><span class="brackets" data-v-20f4e892>})</span></div><div data-v-20f4e892><span class="word" data-v-20f4e892>xhr</span><span class="variable" data-v-20f4e892>.send</span><span class="brackets" data-v-20f4e892>()</span></div></div><div data-v-20f4e892><span class="brackets" data-v-20f4e892>})</span></div></div><div data-v-20f4e892><span class="brackets" data-v-20f4e892>}</span></div><div data-v-20f4e892><span class="comment" data-v-20f4e892>//3.成功執行then,失敗執行catch</span></div><div data-v-20f4e892><span class="word" data-v-20f4e892>myAxios</span> <span class="brackets" data-v-20f4e892>({</span></div><div class="padTwo VSL" data-v-20f4e892><span class="word" data-v-20f4e892>url:</span> <span class="src" data-v-20f4e892>&quot;放網址&quot;</span><div data-v-20f4e892></div></div><div data-v-20f4e892><span class="brackets" data-v-20f4e892>})</span><span class="variable" data-v-20f4e892>.then</span><span class="brackets" data-v-20f4e892>(</span> <span class="word" data-v-20f4e892>result</span><span class="function" data-v-20f4e892>=&gt;</span> <span class="brackets" data-v-20f4e892>{</span></div><div class="padTwo VSL" data-v-20f4e892><span class="word" data-v-20f4e892>console</span><span class="variable" data-v-20f4e892>.log</span><span class="brackets" data-v-20f4e892>(</span> <span class="word" data-v-20f4e892>result</span><span class="brackets" data-v-20f4e892>)</span><div data-v-20f4e892><span class="word" data-v-20f4e892>document</span><span class="variable" data-v-20f4e892>.querySelector</span><span class="brackets" data-v-20f4e892>(</span><span class="src" data-v-20f4e892>&quot;.showData&quot;</span><span class="brackets" data-v-20f4e892>)</span><span class="variable" data-v-20f4e892>.innerHTML</span><span class="then" data-v-20f4e892>=</span> <span class="word" data-v-20f4e892>result</span></div><div data-v-20f4e892></div></div><div data-v-20f4e892><span class="brackets" data-v-20f4e892>})</span><span class="variable" data-v-20f4e892>.catch</span><span class="brackets" data-v-20f4e892>(</span><span class="variable" data-v-20f4e892>error</span><span class="function" data-v-20f4e892>=&gt;</span> <span class="brackets" data-v-20f4e892>{</span></div><div class="padTwo VSL" data-v-20f4e892><span class="word" data-v-20f4e892>console</span><span class="variable" data-v-20f4e892>.log</span><span class="brackets" data-v-20f4e892>(</span><span class="variable" data-v-20f4e892>error</span><span class="brackets" data-v-20f4e892>)</span><div data-v-20f4e892><span class="word" data-v-20f4e892>document</span><span class="variable" data-v-20f4e892>.querySelector</span><span class="brackets" data-v-20f4e892>(</span><span class="src" data-v-20f4e892>&quot;.showData&quot;</span><span class="brackets" data-v-20f4e892>)</span><span class="variable" data-v-20f4e892>.innerHTML</span><span class="then" data-v-20f4e892>=</span><span class="word" data-v-20f4e892>error.message</span></div><div data-v-20f4e892></div></div><div data-v-20f4e892><span class="brackets" data-v-20f4e892>})</span></div></div><p class="fz28" data-v-20f4e892>同步</p><p class="fz28" data-v-20f4e892>逐行執行 , 原地等待結果後 , 才繼續向下執行</p><br data-v-20f4e892><p class="fz28" data-v-20f4e892>異步</p><p class="fz28" data-v-20f4e892> 調用後耗時 , 不阻塞代碼執行 , 將來完成後觸發 回調函數 </p><br data-v-20f4e892><p class="fz28" data-v-20f4e892>JS哪些是異步?</p><p class="fz28" data-v-20f4e892>setTimeout / setInterval</p><p class="fz28" data-v-20f4e892>事件</p><p class="fz28" data-v-20f4e892>AJAX</p><br data-v-20f4e892><p class="fz28" data-v-20f4e892>異步如何接收結果?</p><p class="fz28" data-v-20f4e892>回調函數接收</p><br data-v-20f4e892><br data-v-20f4e892><p class="fz28" data-v-20f4e892>回調地獄 . . . 回調函數嵌套問題</p><p class="fz28" data-v-20f4e892>setTimeout(function () {</p><p class="fz28 pTwo" data-v-20f4e892>console.log(111);</p><p class="fz28 pTwo" data-v-20f4e892>setTimeout(function () {</p><p class="fz28 pFou" data-v-20f4e892>console.log(222);</p><p class="fz28 pFou" data-v-20f4e892>setTimeout(function () {</p><p class="fz28 pSix" data-v-20f4e892>console.log(333);</p><p class="fz28 pFou" data-v-20f4e892>}, 1000)</p><p class="fz28 pTwo" data-v-20f4e892>}, 2000)</p><p class="fz28" data-v-20f4e892>}, 3000)</p><br data-v-20f4e892><br data-v-20f4e892><p class="fz28" data-v-20f4e892>Promise 鏈式調用</p><br data-v-20f4e892><div data-v-20f4e892><span class="pad20 bor fz30" data-v-20f4e892>new Promise()</span> ➔ <span class="pad20 bor fz30" data-v-20f4e892>.then( 回調函數 )</span> ➔ <span class="pad20 bor fz30" data-v-20f4e892>新的 Promise 對象</span></div><br data-v-20f4e892><div class="fz30" data-v-20f4e892><span class="cor17" data-v-20f4e892>. . . . . . . . . . . . . . . . . . . . .</span> ↘ 回調函數中 , return 的結果 ↗ </div><div class="bgcVS" data-v-20f4e892><div data-v-20f4e892><span class="function" data-v-20f4e892>const </span> <span class="word" data-v-20f4e892>p</span><span class="then" data-v-20f4e892>= new </span><span class="brackets" data-v-20f4e892>Promise (( </span><span class="variable" data-v-20f4e892>resolve,reject</span><span class="brackets" data-v-20f4e892>)</span> <span class="function" data-v-20f4e892>=&gt;</span><span class="brackets" data-v-20f4e892>{</span></div><div class="padTwo VSL" data-v-20f4e892><span class="variable" data-v-20f4e892>setTimeout</span><span class="brackets" data-v-20f4e892>(()</span><span class="function" data-v-20f4e892>=&gt;</span> <span class="brackets" data-v-20f4e892>{</span><div class="padTwo VSL" data-v-20f4e892><span class="variable" data-v-20f4e892>resolve</span><span class="brackets" data-v-20f4e892>(</span><span class="src" data-v-20f4e892>&quot;獲取的資料&quot;</span><span class="brackets" data-v-20f4e892>)</span><div data-v-20f4e892></div></div><div data-v-20f4e892></div><div data-v-20f4e892><span class="brackets" data-v-20f4e892>},</span><span class="number" data-v-20f4e892>2000</span><span class="brackets" data-v-20f4e892>)</span></div></div><div data-v-20f4e892><span class="brackets" data-v-20f4e892>})</span></div><div data-v-20f4e892><span class="word" data-v-20f4e892>p</span> <span class="variable" data-v-20f4e892>.then</span><span class="brackets" data-v-20f4e892>(</span> <span class="word" data-v-20f4e892>result</span><span class="function" data-v-20f4e892>=&gt;</span> <span class="brackets" data-v-20f4e892>{</span></div><div class="padTwo VSL" data-v-20f4e892><span class="word" data-v-20f4e892>console</span><span class="variable" data-v-20f4e892>.log</span><span class="brackets" data-v-20f4e892>(</span> <span class="word" data-v-20f4e892>result</span><span class="brackets" data-v-20f4e892>) </span><span class="comment" data-v-20f4e892>// 2 秒後打印 &quot;獲取的資料&quot;</span><div data-v-20f4e892></div></div><div data-v-20f4e892><span class="brackets" data-v-20f4e892>})</span></div><div data-v-20f4e892><span class="comment" data-v-20f4e892>//promise調用then後在原地等結果</span></div><div data-v-20f4e892><span class="comment" data-v-20f4e892>//返回一個全新的promise對象</span></div><div data-v-20f4e892><span class="comment" data-v-20f4e892>//const p2 接收</span></div><div data-v-20f4e892><span class="function" data-v-20f4e892>const </span> <span class="word" data-v-20f4e892>p2</span><span class="then" data-v-20f4e892>=</span> <span class="word" data-v-20f4e892>p</span><span class="variable" data-v-20f4e892>.then</span><span class="brackets" data-v-20f4e892>(</span> <span class="word" data-v-20f4e892>result</span><span class="function" data-v-20f4e892>=&gt;</span> <span class="brackets" data-v-20f4e892>{</span></div><div class="padTwo VSL" data-v-20f4e892><span class="word" data-v-20f4e892>console</span><span class="variable" data-v-20f4e892>.log</span><span class="brackets" data-v-20f4e892>(</span> <span class="word" data-v-20f4e892>result</span><span class="brackets" data-v-20f4e892>) </span><span class="comment" data-v-20f4e892>// 2 秒後打印 &quot;獲取的資料&quot;</span><div data-v-20f4e892><span class="comment" data-v-20f4e892>//創建Promise對象,模擬再發出請求</span></div><div data-v-20f4e892><span class="comment" data-v-20f4e892>// return promise 對象最終狀態和結果, 影響到新的 Promise 對象 // p2</span></div><div data-v-20f4e892><span class="then" data-v-20f4e892>return new </span><span class="brackets" data-v-20f4e892>Promise (( </span><span class="variable" data-v-20f4e892>resolve,reject</span><span class="brackets" data-v-20f4e892>)</span><span class="function" data-v-20f4e892>=&gt;</span> <span class="brackets" data-v-20f4e892>{</span></div><div class="padTwo VSL" data-v-20f4e892><span class="variable" data-v-20f4e892>setTimeout</span><span class="brackets" data-v-20f4e892>(()</span><span class="function" data-v-20f4e892>=&gt;</span> <span class="brackets" data-v-20f4e892>{</span><div class="padTwo VSL" data-v-20f4e892><span class="variable" data-v-20f4e892>resolve</span><span class="brackets" data-v-20f4e892>(</span><span class="word" data-v-20f4e892>result</span> <span class="then" data-v-20f4e892>+</span><span class="src" data-v-20f4e892>&quot;加上模擬另一次AJAX網路請求&quot;</span><span class="brackets" data-v-20f4e892>)</span><div data-v-20f4e892></div></div><div data-v-20f4e892><span class="brackets" data-v-20f4e892>},</span><span class="number" data-v-20f4e892>2000</span><span class="brackets" data-v-20f4e892>)</span><div data-v-20f4e892></div></div><div data-v-20f4e892></div></div><div data-v-20f4e892><span class="brackets" data-v-20f4e892>})</span></div><div data-v-20f4e892></div></div><div data-v-20f4e892><span class="brackets" data-v-20f4e892>})</span></div><div data-v-20f4e892><span class="word" data-v-20f4e892>console</span><span class="variable" data-v-20f4e892>.log</span><span class="brackets" data-v-20f4e892>(</span> <span class="word" data-v-20f4e892>p2</span><span class="then" data-v-20f4e892>===</span> <span class="word" data-v-20f4e892>p</span><span class="brackets" data-v-20f4e892>)</span><span class="comment" data-v-20f4e892>// 打印 false // 證明 p2 是全新的 promise</span></div><div data-v-20f4e892><span class="comment" data-v-20f4e892>// promise 物件保存在內存地址 // false 證明不在同一個地址</span></div><br data-v-20f4e892><div data-v-20f4e892><span class="comment" data-v-20f4e892>//獲取最終結果</span></div><div data-v-20f4e892><span class="word" data-v-20f4e892>p2</span> <span class="variable" data-v-20f4e892>.then</span><span class="brackets" data-v-20f4e892>(</span> <span class="word" data-v-20f4e892>result</span><span class="function" data-v-20f4e892>=&gt;</span> <span class="brackets" data-v-20f4e892>{</span></div><div class="padTwo VSL" data-v-20f4e892><span class="word" data-v-20f4e892>console</span><span class="variable" data-v-20f4e892>.log</span><span class="brackets" data-v-20f4e892>(</span> <span class="word" data-v-20f4e892>result</span><span class="brackets" data-v-20f4e892>)</span><div data-v-20f4e892></div></div><div data-v-20f4e892><span class="brackets" data-v-20f4e892>})</span></div></div><p class="fz28" data-v-20f4e892>1. 什麼是 Promise 鏈式調用?</p><p class="fz28" data-v-20f4e892> 使用 then 函數返回新 Promise 物件特性 , 一直串聯下去 </p><br data-v-20f4e892><p class="fz28" data-v-20f4e892>2. then 回調函數中 , return 的值 會傳到 哪裡?</p><p class="fz28" data-v-20f4e892>傳給 then 函數生成的 新 Promise 物件</p><br data-v-20f4e892><p class="fz28" data-v-20f4e892>3. Promise 鏈式調用有什麼用?</p><p class="fz28" data-v-20f4e892>解決 回調嵌套 問題</p><div id="threeajax005" class="articleCardTitle cor36 fz34" data-v-20f4e892> 9.5 async await </div><p class="fz28" data-v-20f4e892> async await 讓我們更簡潔方式寫出基於 Promise 的異步行為 , </p><p class="fz28" data-v-20f4e892>而無須鏈式調用 promise</p><br data-v-20f4e892><p class="fz28 cor36" data-v-20f4e892>概念:</p><p class="fz28" data-v-20f4e892>在 async 函數內 , 用 await 關鍵字 取代 then 函數 ,</p><p class="fz28" data-v-20f4e892><span class="spo cor36" data-v-20f4e892> 等待 </span> 獲取 Promise 對象成功狀態的結果值 </p><div class="bgcVS" data-v-20f4e892><div data-v-20f4e892><span class="function" data-v-20f4e892>async function </span><span class="word" data-v-20f4e892>getData</span><span class="brackets" data-v-20f4e892>(){</span></div><div class="padTwo VSL" data-v-20f4e892><span class="variable" data-v-20f4e892>try</span> <span class="brackets" data-v-20f4e892>{</span><div data-v-20f4e892></div></div><div class="padTwo VSL" data-v-20f4e892><span class="comment" data-v-20f4e892>//axios在原地返回一個promise對象</span><div data-v-20f4e892><span class="comment" data-v-20f4e892>//await後面接Promise物件&quot;成功狀態&quot;結果值</span></div><div data-v-20f4e892><span class="function" data-v-20f4e892>const </span><span class="word" data-v-20f4e892>pObj</span> <span class="then" data-v-20f4e892>=</span><span class="then" data-v-20f4e892>await </span><span class="variable" data-v-20f4e892>axios</span><span class="brackets" data-v-20f4e892>({</span> <span class="word" data-v-20f4e892>url:</span><span class="src" data-v-20f4e892>&quot;https://randomuser.me/api/&quot;</span><span class="brackets" data-v-20f4e892>})</span></div><div data-v-20f4e892><span class="word" data-v-20f4e892>console</span><span class="variable" data-v-20f4e892>.log</span><span class="brackets" data-v-20f4e892>(</span> <span class="word" data-v-20f4e892>pObj</span><span class="brackets" data-v-20f4e892>)</span></div><div data-v-20f4e892><span class="function" data-v-20f4e892>const </span><span class="word" data-v-20f4e892>name</span> <span class="then" data-v-20f4e892>=</span><span class="word" data-v-20f4e892>pObj.results</span><span class="brackets" data-v-20f4e892>[</span> <span class="number" data-v-20f4e892>0</span><span class="brackets" data-v-20f4e892>]</span> <span class="word" data-v-20f4e892>.name</span></div><div data-v-20f4e892></div></div><div data-v-20f4e892><span class="brackets" data-v-20f4e892>}</span></div><div data-v-20f4e892><span class="word" data-v-20f4e892>getData</span> <span class="brackets" data-v-20f4e892>()</span></div></div><p class="fz28" data-v-20f4e892>async await 捕獲錯誤</p><div class="bgcVS" data-v-20f4e892><div data-v-20f4e892><span class="function" data-v-20f4e892>async function </span><span class="word" data-v-20f4e892>getData</span><span class="brackets" data-v-20f4e892>(){</span></div><div class="padTwo VSL" data-v-20f4e892><div data-v-20f4e892><span class="comment" data-v-20f4e892>//try只要某行發生錯誤,以下就不執行,往catch執行</span></div><div data-v-20f4e892><span class="variable" data-v-20f4e892>try</span><span class="brackets" data-v-20f4e892>{</span></div><div class="padTwo VSL" data-v-20f4e892><span class="comment" data-v-20f4e892>//axios在原地返回一個promise對象</span><div data-v-20f4e892><span class="comment" data-v-20f4e892>//await後面接Promise物件&quot;成功狀態&quot;結果值</span></div><div data-v-20f4e892><span class="function" data-v-20f4e892>const </span><span class="word" data-v-20f4e892>pObj</span> <span class="then" data-v-20f4e892>=</span><span class="then" data-v-20f4e892>await </span><span class="variable" data-v-20f4e892>axios</span><span class="brackets" data-v-20f4e892>({</span><span class="word" data-v-20f4e892>url:</span><span class="src" data-v-20f4e892>&quot;https://randomuser.me/api/&quot;</span><span class="brackets" data-v-20f4e892>})</span></div><div data-v-20f4e892><span class="word" data-v-20f4e892>console</span><span class="variable" data-v-20f4e892>.log</span><span class="brackets" data-v-20f4e892>(</span> <span class="word" data-v-20f4e892>pObj</span><span class="brackets" data-v-20f4e892>)</span></div><div data-v-20f4e892><span class="function" data-v-20f4e892>const </span><span class="word" data-v-20f4e892>name</span> <span class="then" data-v-20f4e892>=</span><span class="word" data-v-20f4e892>pObj.results</span><span class="brackets" data-v-20f4e892>[</span> <span class="number" data-v-20f4e892>0</span><span class="brackets" data-v-20f4e892>]</span><span class="word" data-v-20f4e892>.name</span></div><div data-v-20f4e892></div></div><div data-v-20f4e892><span class="brackets" data-v-20f4e892>}</span><span class="variable" data-v-20f4e892>catch</span><span class="brackets" data-v-20f4e892>(</span><span class="variable" data-v-20f4e892>error</span><span class="brackets" data-v-20f4e892>){</span></div><div class="padTwo VSL" data-v-20f4e892><span class="word" data-v-20f4e892>console</span><span class="variable" data-v-20f4e892>.dir</span><span class="brackets" data-v-20f4e892>(</span><span class="variable" data-v-20f4e892>error</span><span class="brackets" data-v-20f4e892>)</span><div data-v-20f4e892></div></div><div data-v-20f4e892><span class="brackets" data-v-20f4e892>}</span></div></div><div data-v-20f4e892><span class="brackets" data-v-20f4e892>}</span></div><div data-v-20f4e892><span class="word" data-v-20f4e892>getData</span> <span class="brackets" data-v-20f4e892>()</span></div></div><div id="threeajax006" class="articleCardTitle cor36 fz34" data-v-20f4e892> 9.6 事件循環 EventLoop </div><p class="fz28" data-v-20f4e892> JS 是單線呈 (逐行執行代碼) , 為了 耗時代碼 不阻塞其他代碼 , 設計了事件循環 </p><br data-v-20f4e892><p class="fz28" data-v-20f4e892> 事件循環負責執行代碼 、 收集 、 處理事件 、 執行隊列中子任務 </p><div class="dis" data-v-20f4e892><div class="bgcVS w100" data-v-20f4e892><div data-v-20f4e892><span class="word" data-v-20f4e892>console</span><span class="variable" data-v-20f4e892>.log</span><span class="brackets" data-v-20f4e892>(</span> <span class="number" data-v-20f4e892>1</span><span class="brackets" data-v-20f4e892>)</span></div><br data-v-20f4e892><div data-v-20f4e892><span class="variable" data-v-20f4e892>setTimeout</span><span class="brackets" data-v-20f4e892>(()</span><span class="function" data-v-20f4e892>=&gt;</span> <span class="brackets" data-v-20f4e892>{</span></div><div class="padTwo VSL" data-v-20f4e892><span class="word" data-v-20f4e892>console</span><span class="variable" data-v-20f4e892>.log</span><span class="brackets" data-v-20f4e892>(</span> <span class="number" data-v-20f4e892>2</span><span class="brackets" data-v-20f4e892>)</span><div data-v-20f4e892></div></div><div data-v-20f4e892><span class="brackets" data-v-20f4e892>},</span> <span class="number" data-v-20f4e892>0</span><span class="brackets" data-v-20f4e892>)</span></div><br data-v-20f4e892><div data-v-20f4e892><span class="word" data-v-20f4e892>console</span><span class="variable" data-v-20f4e892>.log</span><span class="brackets" data-v-20f4e892>(</span> <span class="number" data-v-20f4e892>3</span><span class="brackets" data-v-20f4e892>)</span></div><br data-v-20f4e892><div data-v-20f4e892><span class="variable" data-v-20f4e892>setTimeout</span><span class="brackets" data-v-20f4e892>(()</span><span class="function" data-v-20f4e892>=&gt;</span> <span class="brackets" data-v-20f4e892>{</span></div><div class="padTwo VSL" data-v-20f4e892><span class="word" data-v-20f4e892>console</span><span class="variable" data-v-20f4e892>.log</span><span class="brackets" data-v-20f4e892>(</span> <span class="number" data-v-20f4e892>4</span><span class="brackets" data-v-20f4e892>)</span><div data-v-20f4e892></div></div><div data-v-20f4e892><span class="brackets" data-v-20f4e892>},</span><span class="number" data-v-20f4e892>2000</span><span class="brackets" data-v-20f4e892>)</span></div><br data-v-20f4e892><div data-v-20f4e892><span class="word" data-v-20f4e892>console</span><span class="variable" data-v-20f4e892>.log</span><span class="brackets" data-v-20f4e892>(</span> <span class="number" data-v-20f4e892>5</span><span class="brackets" data-v-20f4e892>)</span></div><br data-v-20f4e892><p data-v-20f4e892>控制台打印: 1 3 5 2 4</p></div><span class="cor17" data-v-20f4e892>____</span><div class="bgcVS cor36" data-v-20f4e892><div data-v-20f4e892>調用棧</div></div><span class="cor17" data-v-20f4e892>____</span><div class="w100" data-v-20f4e892><div class="bgcVS" data-v-20f4e892><p class="cor36" data-v-20f4e892>宿主環境(瀏覽器)</p><br data-v-20f4e892><p data-v-20f4e892>放耗時異步代碼</p><div data-v-20f4e892><span class="variable" data-v-20f4e892>setTimeout</span><span class="brackets" data-v-20f4e892>(()</span><span class="function" data-v-20f4e892>=&gt;</span><span class="brackets" data-v-20f4e892>{</span></div><div class="padTwo VSL" data-v-20f4e892><span class="word" data-v-20f4e892>console</span><span class="variable" data-v-20f4e892>.log</span><span class="brackets" data-v-20f4e892>(</span><span class="number" data-v-20f4e892>2</span><span class="brackets" data-v-20f4e892>)</span><div data-v-20f4e892></div></div><div data-v-20f4e892><span class="brackets" data-v-20f4e892>},</span><span class="number" data-v-20f4e892>0</span><span class="brackets" data-v-20f4e892>)</span></div><div data-v-20f4e892><span class="variable" data-v-20f4e892>setTimeout</span><span class="brackets" data-v-20f4e892>(()</span><span class="function" data-v-20f4e892>=&gt;</span><span class="brackets" data-v-20f4e892>{</span></div><div class="padTwo VSL" data-v-20f4e892><span class="word" data-v-20f4e892>console</span><span class="variable" data-v-20f4e892>.log</span><span class="brackets" data-v-20f4e892>(</span><span class="number" data-v-20f4e892>4</span><span class="brackets" data-v-20f4e892>)</span><div data-v-20f4e892></div></div><div data-v-20f4e892><span class="brackets" data-v-20f4e892>},</span><span class="number" data-v-20f4e892>2000</span><span class="brackets" data-v-20f4e892>)</span></div></div><div class="bgcVS" data-v-20f4e892><p class="cor36" data-v-20f4e892>任務隊列</p><br data-v-20f4e892><p data-v-20f4e892>回調放這邊排隊</p><br data-v-20f4e892><p data-v-20f4e892>調用棧空閒時,</p><p data-v-20f4e892>循環查找隊列執行</p></div></div></div><p class="fz28" data-v-20f4e892>1. 什麼是 事件循環?</p><p class="fz28" data-v-20f4e892> 執行代碼 和 收集異步任務 , 在調用棧 空閒時 , 反覆調用 任務隊列裡 回調函數 執行機制 </p><br data-v-20f4e892><p class="fz28" data-v-20f4e892>2. 為什麼要事件循環?</p><p class="fz28" data-v-20f4e892>JS 單線呈 , 為了 不阻塞 JS 引擎</p><br data-v-20f4e892><p class="fz28" data-v-20f4e892>3. JS 代碼怎麼執行?</p><p class="fz28" data-v-20f4e892>執行 同步代碼 , 遇到異步 交給 宿主瀏覽器環境執行</p><p class="fz28" data-v-20f4e892>異步有結果後 , 把回調函數 放入 任務隊列排隊</p><p class="fz28" data-v-20f4e892>當 調用棧 空閒時 , 反覆調用 任務隊列裡 的回調函數</p><div id="threeajax007" class="articleCardTitle cor36 fz34" data-v-20f4e892> 9.7 宏任務 微任務 </div><p class="fz28" data-v-20f4e892>ES6 引入 Promise物件 , 讓 JS 引擎可發起異步任務</p><br data-v-20f4e892><p class="fz28" data-v-20f4e892>宏任務: 由 瀏覽器環境執行的 異步代碼</p><br data-v-20f4e892><p class="fz28" data-v-20f4e892>微任務: 由 JS 引擎環境執行的 異步代碼</p><br data-v-20f4e892><br data-v-20f4e892><br data-v-20f4e892><table data-v-20f4e892><tr data-v-20f4e892><th data-v-20f4e892><div class="pad20 fz36" data-v-20f4e892>宏任務</div></th><th data-v-20f4e892><div class="pad20 fz36" data-v-20f4e892>執行環境</div></th><th data-v-20f4e892><div class="pad20 fz36" data-v-20f4e892>微任務</div></th><th data-v-20f4e892><div class="pad20 fz36" data-v-20f4e892>執行環境</div></th></tr><tr data-v-20f4e892><td data-v-20f4e892><div class="pad20 fz30" data-v-20f4e892>JS腳本 (script)</div></td><td data-v-20f4e892><div class="pad20 fz30" data-v-20f4e892>瀏覽器</div></td><td data-v-20f4e892><div class="pad20 fz30" data-v-20f4e892> Promise物件<span class="cor36" data-v-20f4e892>.then</span></div></td><td data-v-20f4e892><div class="pad20 fz30" data-v-20f4e892>JS引擎</div></td></tr><tr data-v-20f4e892><td data-v-20f4e892><div class="padL20 fz30" data-v-20f4e892>setTimeout</div><div class="padL20 fz30" data-v-20f4e892>setInterval</div></td><td data-v-20f4e892><div class="pad20 fz30" data-v-20f4e892>瀏覽器</div></td><td data-v-20f4e892><div class="pad20" data-v-20f4e892></div></td><td data-v-20f4e892><div class="pad20" data-v-20f4e892></div></td></tr><tr data-v-20f4e892><td data-v-20f4e892><div class="pad20 fz30" data-v-20f4e892>AJAX請求完成事件</div></td><td data-v-20f4e892><div class="pad20 fz30" data-v-20f4e892>瀏覽器</div></td><td data-v-20f4e892><div class="pad20" data-v-20f4e892></div></td><td data-v-20f4e892><div class="pad20" data-v-20f4e892></div></td></tr><tr data-v-20f4e892><td data-v-20f4e892><div class="pad20 fz30" data-v-20f4e892>用戶交互事件</div></td><td data-v-20f4e892><div class="pad20 fz30" data-v-20f4e892>瀏覽器</div></td><td data-v-20f4e892><div class="pad20" data-v-20f4e892></div></td><td data-v-20f4e892><div class="pad20" data-v-20f4e892></div></td></tr></table><div class="dis" data-v-20f4e892><div class="bgcVS w100" data-v-20f4e892><div data-v-20f4e892><span class="then" data-v-20f4e892>＜</span><span class="number" data-v-20f4e892>script </span> <span class="then" data-v-20f4e892>&gt;</span></div><div data-v-20f4e892><span class="word" data-v-20f4e892>console</span><span class="variable" data-v-20f4e892>.log</span><span class="brackets" data-v-20f4e892>(</span> <span class="number" data-v-20f4e892>1</span><span class="brackets" data-v-20f4e892>)</span></div><br data-v-20f4e892><div data-v-20f4e892><span class="variable" data-v-20f4e892>setTimeout</span><span class="brackets" data-v-20f4e892>(()</span><span class="function" data-v-20f4e892>=&gt;</span> <span class="brackets" data-v-20f4e892>{</span></div><div class="padTwo VSL" data-v-20f4e892><span class="word" data-v-20f4e892>console</span><span class="variable" data-v-20f4e892>.log</span><span class="brackets" data-v-20f4e892>(</span> <span class="number" data-v-20f4e892>2</span><span class="brackets" data-v-20f4e892>)</span><div data-v-20f4e892></div></div><div data-v-20f4e892><span class="brackets" data-v-20f4e892>},</span> <span class="number" data-v-20f4e892>0</span><span class="brackets" data-v-20f4e892>)</span></div><br data-v-20f4e892><div data-v-20f4e892><span class="function" data-v-20f4e892>const </span><span class="word" data-v-20f4e892>p</span> <span class="then" data-v-20f4e892>= new </span><span class="brackets" data-v-20f4e892>Promise</span><span class="brackets" data-v-20f4e892>((</span><span class="variable" data-v-20f4e892>resolve,reject</span><span class="brackets" data-v-20f4e892>)</span><span class="function" data-v-20f4e892>=&gt;</span> <span class="brackets" data-v-20f4e892>{</span></div><div class="padTwo VSL" data-v-20f4e892><span class="word" data-v-20f4e892>console</span><span class="variable" data-v-20f4e892>.log</span><span class="brackets" data-v-20f4e892>(</span> <span class="number" data-v-20f4e892>2</span><span class="brackets" data-v-20f4e892>)</span><div data-v-20f4e892><span class="variable" data-v-20f4e892>resolve</span><span class="brackets" data-v-20f4e892>(</span> <span class="number" data-v-20f4e892>4</span><span class="brackets" data-v-20f4e892>)</span></div><div data-v-20f4e892></div></div><div data-v-20f4e892><span class="brackets" data-v-20f4e892>})</span></div><br data-v-20f4e892><div data-v-20f4e892><span class="word" data-v-20f4e892>p</span> <span class="variable" data-v-20f4e892>.then</span><span class="brackets" data-v-20f4e892>(</span><span class="word" data-v-20f4e892>result</span><span class="function" data-v-20f4e892>=&gt;</span> <span class="brackets" data-v-20f4e892>{</span></div><div class="padTwo VSL" data-v-20f4e892><span class="word" data-v-20f4e892>console</span><span class="variable" data-v-20f4e892>.log</span><span class="brackets" data-v-20f4e892>(</span><span class="word" data-v-20f4e892>result</span> <span class="brackets" data-v-20f4e892>)</span><div data-v-20f4e892></div></div><div data-v-20f4e892><span class="brackets" data-v-20f4e892>})</span></div><br data-v-20f4e892><div data-v-20f4e892><span class="word" data-v-20f4e892>console</span><span class="variable" data-v-20f4e892>.log</span><span class="brackets" data-v-20f4e892>(</span> <span class="number" data-v-20f4e892>5</span><span class="brackets" data-v-20f4e892>)</span></div><div data-v-20f4e892><span class="then" data-v-20f4e892>＜/</span><span class="number" data-v-20f4e892>script </span> <span class="then" data-v-20f4e892>&gt;</span></div><br data-v-20f4e892><p data-v-20f4e892>控制台打印: 1 3 5</p><br data-v-20f4e892><p data-v-20f4e892>現在調用棧空閒</p><p data-v-20f4e892>宏&amp;微 執行哪個?</p><p class="cor36" data-v-20f4e892>優先 微</p><p data-v-20f4e892>直到 微隊列 清空</p><p data-v-20f4e892>再執行 宏</p></div><span class="cor29" data-v-20f4e892>_</span><div class="bgcVS cor36" data-v-20f4e892><div data-v-20f4e892>調用棧</div></div><span class="cor29" data-v-20f4e892>_</span><div class="w100" data-v-20f4e892><div class="bgcVS" data-v-20f4e892><div class="cor36" data-v-20f4e892>宿主環境(瀏覽器)</div><div data-v-20f4e892><span class="variable" data-v-20f4e892>setTimeout</span><span class="brackets" data-v-20f4e892>(()</span><span class="function" data-v-20f4e892>=&gt;</span><span class="brackets" data-v-20f4e892>{</span></div><div class="padTwo VSL" data-v-20f4e892><span class="word" data-v-20f4e892>console</span><span class="variable" data-v-20f4e892>.log</span><span class="brackets" data-v-20f4e892>(</span> <span class="number" data-v-20f4e892>2</span><span class="brackets" data-v-20f4e892>)</span><div data-v-20f4e892></div></div><div data-v-20f4e892><span class="brackets" data-v-20f4e892>},</span> <span class="number" data-v-20f4e892>0</span><span class="brackets" data-v-20f4e892>)</span></div></div><div class="bgcVS" data-v-20f4e892><div class="cor36" data-v-20f4e892><span class="spoGra" data-v-20f4e892> 宏任務隊列 </span></div><div data-v-20f4e892><span class="brackets" data-v-20f4e892>()</span><span class="function" data-v-20f4e892>=&gt;</span><span class="brackets" data-v-20f4e892>{</span></div><div class="padTwo VSL" data-v-20f4e892><span class="word" data-v-20f4e892>console</span><span class="variable" data-v-20f4e892>.log</span><span class="brackets" data-v-20f4e892>(</span> <span class="number" data-v-20f4e892>2</span><span class="brackets" data-v-20f4e892>)</span><div data-v-20f4e892></div></div><div data-v-20f4e892><span class="brackets" data-v-20f4e892>}</span></div></div><div class="bgcVS" data-v-20f4e892><div class="cor36" data-v-20f4e892><span class="spoGra" data-v-20f4e892> 微任務隊列 </span></div><div data-v-20f4e892><span class="word" data-v-20f4e892>result</span><span class="function" data-v-20f4e892>=&gt;</span><span class="brackets" data-v-20f4e892>{</span></div><div class="padTwo VSL" data-v-20f4e892><span class="word" data-v-20f4e892>console</span><span class="variable" data-v-20f4e892>.log</span><span class="brackets" data-v-20f4e892>(</span><span class="word" data-v-20f4e892>result</span><span class="brackets" data-v-20f4e892>)</span><div data-v-20f4e892></div></div><div data-v-20f4e892><span class="brackets" data-v-20f4e892>}</span></div></div></div></div><p class="fz28" data-v-20f4e892>1. 什麼是宏任務?</p><p class="fz28" data-v-20f4e892>瀏覽器執行的 異步代碼</p><br data-v-20f4e892><p class="fz28" data-v-20f4e892>JS腳本 (script)</p><p class="fz28" data-v-20f4e892>setTimeout</p><p class="fz28" data-v-20f4e892>AJAX請求完成事件</p><p class="fz28" data-v-20f4e892>用戶交互事件</p><br data-v-20f4e892><p class="fz28" data-v-20f4e892>2. 什麼是微任務?</p><p class="fz28" data-v-20f4e892>JS 引擎執行的 異步代碼</p><br data-v-20f4e892><p class="fz28" data-v-20f4e892>Promise物件.then() 的回調</p><br data-v-20f4e892><p class="fz28" data-v-20f4e892>3. JS 代碼如何執行?</p><p class="fz28" data-v-20f4e892>執行第一個 script 腳本事件 宏任務 , 裡面 同步代碼</p><br data-v-20f4e892><p class="fz28" data-v-20f4e892> 遇到 宏任務 / 微任務 交給 宿主環境 , 有 結果 回調函數 進入 對應 隊列 </p><br data-v-20f4e892><p class="fz28" data-v-20f4e892> 當執行棧 空閒時 , 清空 微任務隊列 , 再執行 下一個 宏任務 </p><div class="bgcVS" data-v-20f4e892><div data-v-20f4e892><span class="word" data-v-20f4e892>console</span><span class="variable" data-v-20f4e892>.log</span><span class="brackets" data-v-20f4e892>(</span> <span class="number" data-v-20f4e892>1</span><span class="brackets" data-v-20f4e892>)</span></div><br data-v-20f4e892><div data-v-20f4e892><span class="variable" data-v-20f4e892>setTimeout</span><span class="brackets" data-v-20f4e892>(()</span><span class="function" data-v-20f4e892>=&gt;</span> <span class="brackets" data-v-20f4e892>{</span></div><div class="padTwo VSL" data-v-20f4e892><span class="word" data-v-20f4e892>console</span><span class="variable" data-v-20f4e892>.log</span><span class="brackets" data-v-20f4e892>(</span> <span class="number" data-v-20f4e892>2</span><span class="brackets" data-v-20f4e892>)</span><div data-v-20f4e892><span class="function" data-v-20f4e892>const </span><span class="number" data-v-20f4e892>p </span> <span class="then" data-v-20f4e892>= new </span><span class="brackets" data-v-20f4e892>Promise</span><span class="brackets" data-v-20f4e892>(</span><span class="variable" data-v-20f4e892>resolve</span><span class="function" data-v-20f4e892>=&gt;</span><span class="variable" data-v-20f4e892>resolve</span><span class="brackets" data-v-20f4e892>(</span> <span class="number" data-v-20f4e892>3</span><span class="brackets" data-v-20f4e892>))</span></div><div data-v-20f4e892><span class="number" data-v-20f4e892>p </span><span class="variable" data-v-20f4e892>.then</span><span class="brackets" data-v-20f4e892>(</span><span class="word" data-v-20f4e892>result</span><span class="function" data-v-20f4e892>=&gt;</span><span class="word" data-v-20f4e892>console</span><span class="variable" data-v-20f4e892>.log</span><span class="brackets" data-v-20f4e892>(</span><span class="word" data-v-20f4e892>result</span><span class="brackets" data-v-20f4e892>))</span></div><div data-v-20f4e892></div></div><div data-v-20f4e892><span class="brackets" data-v-20f4e892>},</span> <span class="number" data-v-20f4e892>0</span><span class="brackets" data-v-20f4e892>)</span></div><br data-v-20f4e892><div data-v-20f4e892><span class="function" data-v-20f4e892>const </span><span class="number" data-v-20f4e892>p </span> <span class="then" data-v-20f4e892>= new </span><span class="brackets" data-v-20f4e892>Promise</span><span class="brackets" data-v-20f4e892>(</span><span class="variable" data-v-20f4e892>resolve</span><span class="function" data-v-20f4e892>=&gt;</span> <span class="brackets" data-v-20f4e892>{</span></div><div class="padTwo VSL" data-v-20f4e892><span class="variable" data-v-20f4e892>setTimeout</span><span class="brackets" data-v-20f4e892>(()</span><span class="function" data-v-20f4e892>=&gt;</span> <span class="brackets" data-v-20f4e892>{</span><div data-v-20f4e892></div><div class="padTwo VSL" data-v-20f4e892><span class="word" data-v-20f4e892>console</span><span class="variable" data-v-20f4e892>.log</span><span class="brackets" data-v-20f4e892>(</span> <span class="number" data-v-20f4e892>4</span><span class="brackets" data-v-20f4e892>)</span><div data-v-20f4e892></div></div><div data-v-20f4e892><span class="brackets" data-v-20f4e892>},</span> <span class="number" data-v-20f4e892>0</span><span class="brackets" data-v-20f4e892>)</span></div><div data-v-20f4e892><span class="variable" data-v-20f4e892>resolve</span><span class="brackets" data-v-20f4e892>(</span> <span class="number" data-v-20f4e892>5</span><span class="brackets" data-v-20f4e892>)</span></div></div><div data-v-20f4e892><span class="brackets" data-v-20f4e892>})</span></div><br data-v-20f4e892><div data-v-20f4e892><span class="number" data-v-20f4e892>p </span><span class="variable" data-v-20f4e892>.then</span><span class="brackets" data-v-20f4e892>(</span> <span class="word" data-v-20f4e892>result</span><span class="function" data-v-20f4e892>=&gt;</span><span class="word" data-v-20f4e892>console</span><span class="variable" data-v-20f4e892>.log</span><span class="brackets" data-v-20f4e892>(</span> <span class="word" data-v-20f4e892>result</span><span class="brackets" data-v-20f4e892>))</span></div><br data-v-20f4e892><div data-v-20f4e892><span class="function" data-v-20f4e892>const </span> <span class="word" data-v-20f4e892>p2</span><span class="then" data-v-20f4e892>= new </span><span class="brackets" data-v-20f4e892>Promise</span><span class="brackets" data-v-20f4e892>(</span><span class="variable" data-v-20f4e892>resolve</span><span class="function" data-v-20f4e892>=&gt;</span><span class="variable" data-v-20f4e892>resolve</span><span class="brackets" data-v-20f4e892>(</span> <span class="number" data-v-20f4e892>6</span><span class="brackets" data-v-20f4e892>))</span></div><br data-v-20f4e892><div data-v-20f4e892><span class="word" data-v-20f4e892>p2</span> <span class="variable" data-v-20f4e892>.then</span><span class="brackets" data-v-20f4e892>(</span> <span class="word" data-v-20f4e892>result</span><span class="function" data-v-20f4e892>=&gt;</span><span class="word" data-v-20f4e892>console</span><span class="variable" data-v-20f4e892>.log</span><span class="brackets" data-v-20f4e892>(</span> <span class="word" data-v-20f4e892>result</span><span class="brackets" data-v-20f4e892>))</span></div><br data-v-20f4e892><div data-v-20f4e892><span class="word" data-v-20f4e892>console</span><span class="variable" data-v-20f4e892>.log</span><span class="brackets" data-v-20f4e892>(</span> <span class="number" data-v-20f4e892>7</span><span class="brackets" data-v-20f4e892>)</span></div></div><p class="fz28" data-v-20f4e892> setTimeout ... 宏任務 ... 交給瀏覽器...... 發現 時間到 0...推入宏任務列隊 </p><br data-v-20f4e892><p class="fz28" data-v-20f4e892> new Promise ... 同步 ... 放調用棧 ... resolve立刻執行 ... setTimout放宿主環境 ... 發現倒數0,放進宏任務隊列 </p><br data-v-20f4e892><p class="fz28" data-v-20f4e892> p 調用的 then 方法 同步 ... then 裡面異步 ... 只有當 promise 狀態改變後 , 才把 then 裡面回調推入到 微任務隊列 </p><br data-v-20f4e892><div data-v-20f4e892><img class="w100" src="'+Kf+'" data-v-20f4e892></div><br data-v-20f4e892><p class="fz28" data-v-20f4e892>然後 清空微任務隊列</p><p class="fz28" data-v-20f4e892>再執行 宏任務 1.</p><p class="fz28" data-v-20f4e892>resolve 改變 promise 狀態</p><p class="fz28" data-v-20f4e892>.then(裡面的回調推入微任務)</p><br data-v-20f4e892><p class="fz28" data-v-20f4e892>!! 先執行微任務 !!</p><br data-v-20f4e892><br data-v-20f4e892><br data-v-20f4e892><p class="fz36 cor36" data-v-20f4e892>Promise.all</p><p class="fz28" data-v-20f4e892> 合併多個 Promise 對象 , 等待所有 <span class="spo cor36" data-v-20f4e892>同時成功完成</span> or 某一個失敗 , 後續處理 </p><br data-v-20f4e892><div class="dis" data-v-20f4e892><div class="bor pad20" data-v-20f4e892><br data-v-20f4e892><br data-v-20f4e892><div data-v-20f4e892><span class="bor pad20 fz28" data-v-20f4e892>new Peomise()</span></div><br data-v-20f4e892><br data-v-20f4e892><div data-v-20f4e892><span class="bor pad20 fz28" data-v-20f4e892>new Peomise()</span></div><br data-v-20f4e892><br data-v-20f4e892><div data-v-20f4e892><span class="bor pad20 fz28" data-v-20f4e892>new Peomise()</span></div><br data-v-20f4e892><br data-v-20f4e892></div><div class="pad20" data-v-20f4e892><div data-v-20f4e892><br data-v-20f4e892><br data-v-20f4e892><span class="fz28" data-v-20f4e892>..&gt;</span></div></div><div class="pad20" data-v-20f4e892><div class="bor disInl pad20" data-v-20f4e892><span class="fz28" data-v-20f4e892>新的</span><br data-v-20f4e892><span class="fz28" data-v-20f4e892>Promise</span><br data-v-20f4e892><span class="fz28" data-v-20f4e892>對象</span></div></div><div class="pad20" data-v-20f4e892><div data-v-20f4e892><span class="fz28" data-v-20f4e892>所有 ..&gt;</span></div><div data-v-20f4e892><span class="fz28" data-v-20f4e892>Promise</span></div><div data-v-20f4e892><span class="fz28" data-v-20f4e892>都成功</span></div><br data-v-20f4e892><div data-v-20f4e892><span class="fz28" data-v-20f4e892>任一個 ..&gt;</span></div><div data-v-20f4e892><span class="fz28" data-v-20f4e892>Promise</span></div><div data-v-20f4e892><span class="fz28" data-v-20f4e892>失敗</span></div></div><div class="pad20" data-v-20f4e892><div data-v-20f4e892><span class="bor pad20 fz28" data-v-20f4e892>.then(回調函數)</span></div><br data-v-20f4e892><br data-v-20f4e892><br data-v-20f4e892><br data-v-20f4e892><br data-v-20f4e892><br data-v-20f4e892><div data-v-20f4e892><span class="bor pad20 fz28" data-v-20f4e892>.catch(回調函數)</span></div><br data-v-20f4e892></div></div><br data-v-20f4e892><div class="bgcVS" data-v-20f4e892><div data-v-20f4e892><span class="function" data-v-20f4e892>const </span><span class="number" data-v-20f4e892>p </span> <span class="then" data-v-20f4e892>=</span><span class="brackets" data-v-20f4e892>Promise</span><span class="variable" data-v-20f4e892>.all</span><span class="brackets" data-v-20f4e892>([</span><span class="word" data-v-20f4e892>Promise對象,Promise對象,...</span><span class="brackets" data-v-20f4e892>])</span></div><div data-v-20f4e892><span class="number" data-v-20f4e892>p </span><span class="variable" data-v-20f4e892>.then</span><span class="brackets" data-v-20f4e892>(</span> <span class="word" data-v-20f4e892>result</span><span class="function" data-v-20f4e892>=&gt;</span> <span class="brackets" data-v-20f4e892>{</span></div><div class="padTwo VSL" data-v-20f4e892><span class="comment" data-v-20f4e892>//result結果:[Promise對象成功結果,Promise對象成功結果,...]</span><div data-v-20f4e892></div></div><div data-v-20f4e892><span class="brackets" data-v-20f4e892>})</span><span class="variable" data-v-20f4e892>.catch</span><span class="brackets" data-v-20f4e892>(</span><span class="variable" data-v-20f4e892>error</span><span class="function" data-v-20f4e892>=&gt;</span> <span class="brackets" data-v-20f4e892>{</span></div><div class="padTwo VSL" data-v-20f4e892><span class="comment" data-v-20f4e892>//第一個失敗的Promise對象,拋出的異常</span><div data-v-20f4e892></div></div><div data-v-20f4e892><span class="brackets" data-v-20f4e892>})</span></div></div><div class="bgcVS" data-v-20f4e892><div data-v-20f4e892><span class="then" data-v-20f4e892>＜</span> <span class="number" data-v-20f4e892>ul </span><span class="function" data-v-20f4e892>class </span> <span class="then" data-v-20f4e892>=</span><span class="src" data-v-20f4e892>&quot;my-ul&quot;</span> <span class="word" data-v-20f4e892>&gt;＜</span><span class="number" data-v-20f4e892>ul</span> <span class="then" data-v-20f4e892>&gt;</span></div><br data-v-20f4e892><div data-v-20f4e892><span class="function" data-v-20f4e892>const </span><span class="brackets" data-v-20f4e892>bjPromise</span><span class="then" data-v-20f4e892>=</span><span class="variable" data-v-20f4e892>axios</span><span class="brackets" data-v-20f4e892>({</span> <span class="word" data-v-20f4e892>url:</span><span class="src" data-v-20f4e892>&quot;api/weather&quot;</span><span class="word" data-v-20f4e892>,params:</span><span class="brackets" data-v-20f4e892>{</span> <span class="word" data-v-20f4e892>city:</span><span class="src" data-v-20f4e892>&quot;110100&quot;</span><span class="brackets" data-v-20f4e892>}})</span></div><div data-v-20f4e892><span class="function" data-v-20f4e892>const </span><span class="brackets" data-v-20f4e892>shPromise</span><span class="then" data-v-20f4e892>=</span><span class="variable" data-v-20f4e892>axios</span><span class="brackets" data-v-20f4e892>({</span> <span class="word" data-v-20f4e892>url:</span><span class="src" data-v-20f4e892>&quot;api/weather&quot;</span><span class="word" data-v-20f4e892>,params:</span><span class="brackets" data-v-20f4e892>{</span> <span class="word" data-v-20f4e892>city:</span><span class="src" data-v-20f4e892>&quot;310100&quot;</span><span class="brackets" data-v-20f4e892>}})</span></div><div data-v-20f4e892><span class="function" data-v-20f4e892>const </span><span class="brackets" data-v-20f4e892>gzPromise</span><span class="then" data-v-20f4e892>=</span><span class="variable" data-v-20f4e892>axios</span><span class="brackets" data-v-20f4e892>({</span> <span class="word" data-v-20f4e892>url:</span><span class="src" data-v-20f4e892>&quot;api/weather&quot;</span><span class="word" data-v-20f4e892>,params:</span><span class="brackets" data-v-20f4e892>{</span> <span class="word" data-v-20f4e892>city:</span><span class="src" data-v-20f4e892>&quot;440100&quot;</span><span class="brackets" data-v-20f4e892>}})</span></div><div data-v-20f4e892><span class="function" data-v-20f4e892>const </span><span class="brackets" data-v-20f4e892>szPromise</span><span class="then" data-v-20f4e892>=</span><span class="variable" data-v-20f4e892>axios</span><span class="brackets" data-v-20f4e892>({</span> <span class="word" data-v-20f4e892>url:</span><span class="src" data-v-20f4e892>&quot;api/weather&quot;</span><span class="word" data-v-20f4e892>,params:</span><span class="brackets" data-v-20f4e892>{</span> <span class="word" data-v-20f4e892>city:</span><span class="src" data-v-20f4e892>&quot;440300&quot;</span><span class="brackets" data-v-20f4e892>}})</span></div><br data-v-20f4e892><p data-v-20f4e892> 思想: 把 city 編碼 放到數組裡 , 遍歷 數組裡 每個城市編碼 , 創建一個 axios 請求 </p><br data-v-20f4e892><div data-v-20f4e892><span class="comment" data-v-20f4e892>//Peomise.all合併多個Promise對象</span></div><div data-v-20f4e892><span class="function" data-v-20f4e892>const </span><span class="number" data-v-20f4e892>p </span> <span class="then" data-v-20f4e892>=</span><span class="brackets" data-v-20f4e892>Promise</span><span class="variable" data-v-20f4e892>.all</span><span class="brackets" data-v-20f4e892>([</span><span class="word" data-v-20f4e892>bjPromise,shPromise,gzPromise,szPromise</span><span class="brackets" data-v-20f4e892>])</span></div><div data-v-20f4e892><span class="number" data-v-20f4e892>p </span><span class="variable" data-v-20f4e892>.then</span><span class="brackets" data-v-20f4e892>(</span> <span class="word" data-v-20f4e892>result</span><span class="function" data-v-20f4e892>=&gt;</span> <span class="brackets" data-v-20f4e892>{</span></div><div class="padTwo VSL" data-v-20f4e892><span class="word" data-v-20f4e892>console</span><span class="variable" data-v-20f4e892>.log</span><span class="brackets" data-v-20f4e892>(</span> <span class="word" data-v-20f4e892>result</span><span class="brackets" data-v-20f4e892>)</span><div data-v-20f4e892></div><br data-v-20f4e892><div data-v-20f4e892><span class="function" data-v-20f4e892>const </span><span class="word" data-v-20f4e892>htmlStr</span> <span class="then" data-v-20f4e892>=</span><span class="word" data-v-20f4e892>result</span><span class="variable" data-v-20f4e892>.map</span><span class="brackets" data-v-20f4e892>(</span> <span class="word" data-v-20f4e892>item</span><span class="function" data-v-20f4e892>=&gt;</span> <span class="brackets" data-v-20f4e892>{</span></div><div class="padTwo VSL" data-v-20f4e892><span class="then" data-v-20f4e892>return </span><span class="src" data-v-20f4e892>`＜li&gt;</span> <span class="then" data-v-20f4e892>${</span><span class="word" data-v-20f4e892>item.data.data.area</span><span class="then" data-v-20f4e892>}</span> <span class="word" data-v-20f4e892>---</span><span class="then" data-v-20f4e892>${</span><span class="word" data-v-20f4e892>item.data.data.weather</span><span class="then" data-v-20f4e892>}</span> <span class="src" data-v-20f4e892>＜/li&gt;`</span><div data-v-20f4e892></div></div><div data-v-20f4e892><span class="brackets" data-v-20f4e892>})</span><span class="variable" data-v-20f4e892>.join</span><span class="brackets" data-v-20f4e892>(</span> <span class="then" data-v-20f4e892>&#39;&#39;</span><span class="brackets" data-v-20f4e892>)</span></div><div data-v-20f4e892><span class="word" data-v-20f4e892>document</span><span class="variable" data-v-20f4e892>.querySelector</span><span class="brackets" data-v-20f4e892>(</span><span class="src" data-v-20f4e892>&quot;.my-ul&quot;</span><span class="brackets" data-v-20f4e892>)</span><span class="variable" data-v-20f4e892>.innerHTML</span><span class="then" data-v-20f4e892>=</span> <span class="word" data-v-20f4e892>htmlStr</span></div><br data-v-20f4e892></div><div data-v-20f4e892><span class="brackets" data-v-20f4e892>})</span><span class="variable" data-v-20f4e892>.catch</span><span class="brackets" data-v-20f4e892>(</span><span class="variable" data-v-20f4e892>error</span><span class="function" data-v-20f4e892>=&gt;</span> <span class="brackets" data-v-20f4e892>{</span></div><div class="padTwo VSL" data-v-20f4e892><span class="word" data-v-20f4e892>console</span><span class="variable" data-v-20f4e892>.dir</span><span class="brackets" data-v-20f4e892>(</span><span class="variable" data-v-20f4e892>error</span><span class="brackets" data-v-20f4e892>)</span><div data-v-20f4e892></div></div><div data-v-20f4e892><span class="brackets" data-v-20f4e892>})</span></div></div><p class="fz28" data-v-20f4e892></p><p class="fz28" data-v-20f4e892></p><p class="fz28" data-v-20f4e892></p><p class="fz28" data-v-20f4e892></p><p class="fz28" data-v-20f4e892></p><p class="fz28" data-v-20f4e892></p><p class="fz28" data-v-20f4e892></p><p class="fz28" data-v-20f4e892></p><p class="fz28" data-v-20f4e892></p><p class="fz28" data-v-20f4e892></p><p class="fz28" data-v-20f4e892></p><p class="fz28" data-v-20f4e892></p><p class="fz28" data-v-20f4e892></p><p class="fz28" data-v-20f4e892></p><p class="fz28" data-v-20f4e892></p><p class="fz28" data-v-20f4e892></p><p class="fz28" data-v-20f4e892></p><p class="fz28" data-v-20f4e892></p><p class="fz28" data-v-20f4e892></p><p class="fz28" data-v-20f4e892></p><p class="fz28" data-v-20f4e892></p><p class="fz28" data-v-20f4e892></p><p class="fz28" data-v-20f4e892></p><p class="fz28" data-v-20f4e892></p><p class="fz28" data-v-20f4e892></p><p class="fz28" data-v-20f4e892></p><p class="fz28" data-v-20f4e892></p><p class="fz28" data-v-20f4e892></p><p class="fz28" data-v-20f4e892></p><p class="fz28" data-v-20f4e892></p><p class="fz28" data-v-20f4e892></p><p class="fz28" data-v-20f4e892></p><p class="fz28" data-v-20f4e892></p><p class="fz28" data-v-20f4e892></p><p class="fz28" data-v-20f4e892></p><p class="fz28" data-v-20f4e892></p><p class="fz28" data-v-20f4e892></p><p class="fz28" data-v-20f4e892></p><p class="fz28" data-v-20f4e892></p><p class="fz28" data-v-20f4e892></p><p class="fz28" data-v-20f4e892></p><p class="fz28" data-v-20f4e892></p><p class="fz28" data-v-20f4e892></p><p class="fz28" data-v-20f4e892></p><p class="fz28" data-v-20f4e892></p><p class="fz28" data-v-20f4e892></p><p class="fz28" data-v-20f4e892></p><p class="fz28" data-v-20f4e892></p><p class="fz28" data-v-20f4e892></p><p class="fz28" data-v-20f4e892></p><p class="fz28" data-v-20f4e892></p><p class="fz28" data-v-20f4e892></p><p class="fz28" data-v-20f4e892></p><p class="fz28" data-v-20f4e892></p><p class="fz28" data-v-20f4e892></p><p class="fz28" data-v-20f4e892></p><p class="fz28" data-v-20f4e892></p><p class="fz28" data-v-20f4e892></p><p class="fz28" data-v-20f4e892></p><p class="fz28" data-v-20f4e892></p><p class="fz28" data-v-20f4e892></p><p class="fz28" data-v-20f4e892></p><p class="fz28" data-v-20f4e892></p><p class="fz28" data-v-20f4e892></p><p class="fz28" data-v-20f4e892></p><p class="fz28" data-v-20f4e892></p><p class="fz28" data-v-20f4e892></p><p class="fz28" data-v-20f4e892></p><p class="fz28" data-v-20f4e892></p><p class="fz28" data-v-20f4e892></p><p class="fz28" data-v-20f4e892></p><p class="fz28" data-v-20f4e892></p><p class="fz28" data-v-20f4e892></p><p class="fz28" data-v-20f4e892></p><p class="fz28" data-v-20f4e892></p><p class="fz28" data-v-20f4e892></p><p class="fz28" data-v-20f4e892></p><p class="fz28" data-v-20f4e892></p><p class="fz28" data-v-20f4e892></p><p class="fz28" data-v-20f4e892></p><p class="fz28" data-v-20f4e892></p><p class="fz28" data-v-20f4e892></p><p class="fz28" data-v-20f4e892></p><p class="fz28" data-v-20f4e892></p><p class="fz28" data-v-20f4e892></p><p class="fz28" data-v-20f4e892></p><p class="fz28" data-v-20f4e892></p><p class="fz28" data-v-20f4e892></p><p class="fz28" data-v-20f4e892></p><p class="fz28" data-v-20f4e892></p><p class="fz28" data-v-20f4e892></p><p class="fz28" data-v-20f4e892></p><p class="fz28" data-v-20f4e892></p><p class="fz28" data-v-20f4e892></p><p class="fz28" data-v-20f4e892></p><p class="fz28" data-v-20f4e892></p><p class="fz28" data-v-20f4e892></p><p class="fz28" data-v-20f4e892></p></div></div></div>',1),Zf=yv(()=>v("div",{class:"toTopButton"},[v("div",{class:"disCen"},"___"),v("div",{class:"disCen"},"▲")],-1)),a0=[Zf],s0=yv(()=>v("div",{class:"toBotButton"},[v("div",{class:"disCen"},"▼"),v("div",{class:"disCen"},"￣")],-1)),d0=[s0],t0={__name:"JsPageThreeNine",setup(a){const s=ua(!1);window.addEventListener("scroll",function(){s.value=window.scrollY>0});function d(){window.scrollTo({top:0,left:0,behavior:"smooth"})}function n(){window.scrollTo({top:999999,left:0,behavior:"smooth"})}function t(c){window.scrollTo({top:document.getElementById(`${c}`).offsetTop,behavior:"smooth"})}return(c,e)=>(da(),ca(Q,null,[v("section",null,[v("div",Xf,[v("div",Yf,[v("div",Gf,[v("div",{onClick:e[0]||(e[0]=l=>t("threeajax001")),class:"leftNavText"},"AJAX"),v("div",{onClick:e[1]||(e[1]=l=>t("threeajax002")),class:"leftNavText"}," xhr.axios.fetch "),v("div",{onClick:e[2]||(e[2]=l=>t("threeajax003")),class:"leftNavText"},"axios"),v("div",{onClick:e[3]||(e[3]=l=>t("threeajax004")),class:"leftNavText"}," Promise狀態 "),v("div",{onClick:e[4]||(e[4]=l=>t("threeajax005")),class:"leftNavText"}," async await "),v("div",{onClick:e[5]||(e[5]=l=>t("threeajax006")),class:"leftNavText"}," 事件循環 "),v("div",{onClick:e[6]||(e[6]=l=>t("threeajax007")),class:"leftNavText"}," 宏任務微任務 ")])])]),Qf]),v("div",null,[X(T(W,{name:"fade",tag:"div"},{default:C(()=>[v("div",{onClick:d,class:"toTop"},a0)]),_:1},512),[[Y,s.value]]),X(T(W,{name:"fade",tag:"div"},{default:C(()=>[v("div",{onClick:n,class:"toBot"},d0)]),_:1},512),[[Y,s.value]])])],64))}},n0=ra(t0,[["__scopeId","data-v-20f4e892"]]),e0=v2({history:zl("/vue-learn-js/"),routes:[{path:"/",component:A2,children:[{path:"",component:se},{path:"about",component:w8},{path:"http",component:N8},{path:"html",component:B8},{path:"css",component:W8,children:[{path:"",component:li},{path:"pagetwo",component:wi}]},{path:"js",component:ki,children:[{path:"jsnote",component:Bi},{path:"jspractice",component:Wi,children:[{path:"",component:nr},{path:"two",component:rr},{path:"three",component:hr}]},{path:"",component:xr,children:[{path:"",component:Mr},{path:"function",component:bo},{path:"destructuringassignment",component:So},{path:"method",component:Uo},{path:"object",component:cf},{path:"prototype",component:kf},{path:"tips",component:Af},{path:"dom",component:Uf},{path:"ajax",component:n0}]}]}]},{path:"/:pathMatch(.*)*",component:se}],scrollBehavior(){return{top:0}}}),Gt=sl(p2);Gt.use(el());Gt.use(e0);Gt.mount("#app");
