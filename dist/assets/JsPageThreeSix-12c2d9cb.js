import{e as f,o as m,c as k,a,h as c,v as l,b as o,w as r,T as e,F as u,f as h,p as z,d as y}from"./index-2e4f8d1f.js";import{_}from"./_plugin-vue_export-helper-c27b6911.js";const P="/vue-learn-js/assets/object001-1817e630.jpg",i=n=>(z("data-v-758206d3"),n=n(),y(),n),T={class:"leftNav"},g={class:"leftNavContainer"},S={class:"leftNavLayout"},V=h('<div class="Main" data-v-758206d3><div class="mainContainer" data-v-758206d3><div class="mainLayout" data-v-758206d3><br data-v-758206d3><br data-v-758206d3><p class="fz28" data-v-758206d3>總分總</p><p class="fz28" data-v-758206d3>1.要講哪個知識點</p><p class="fz28" data-v-758206d3>2.細講</p><p class="fz28" data-v-758206d3>3.總結</p><br data-v-758206d3><br data-v-758206d3><div id="threeprototype001" class="articleCardTitle cor36 fz34" data-v-758206d3> 6.1 編程思想 </div><p class="fz28" data-v-758206d3><span class="cor36" data-v-758206d3> 面相過程 </span><span class="cor17" data-v-758206d3> . . . </span><span class="cor36" data-v-758206d3> 函數導向 </span><span class="cor17" data-v-758206d3> . . . </span><span class="cor36" data-v-758206d3>functional programming </span></p><p class="fz28" data-v-758206d3> 分析解決問題所需要的步驟, 然後用函數把這些步驟一步一步實現, 使用時再一個一個的依次調用 </p><br data-v-758206d3><br data-v-758206d3><br data-v-758206d3><p class="fz28" data-v-758206d3><span class="cor36" data-v-758206d3> 面相對象 </span><span class="cor17" data-v-758206d3> . . . </span><span class="cor36" data-v-758206d3> 物件導向 OOP </span><span class="cor17" data-v-758206d3> . . . </span><span class="cor36" data-v-758206d3>Object-oriented programming </span></p><p class="fz28" data-v-758206d3>每一個物件都是功能中心, 有明確分工</p><p class="fz28" data-v-758206d3></p><br data-v-758206d3><br data-v-758206d3><p class="fz28 cor36" data-v-758206d3># 3 特性</p><p class="fz28" data-v-758206d3> 封裝 <span class="cor17" data-v-758206d3> . . . . . . </span> 我一點開關 就 掃地 </p><p class="fz28" data-v-758206d3></p><br data-v-758206d3><p class="fz28" data-v-758206d3> 繼承 <span class="cor17" data-v-758206d3> . . . . . . </span> 掃地機 繼承 拖拉機 接口 </p><p class="fz28" data-v-758206d3></p><br data-v-758206d3><p class="fz28" data-v-758206d3> 多態 <span class="cor17" data-v-758206d3> . . . . . . </span> 多功能 平時掃地 天熱變風扇 </p><p class="fz28" data-v-758206d3></p><br data-v-758206d3><p class="fz28" data-v-758206d3> 重用 <span class="cor17" data-v-758206d3> . . . . . . </span> 沒用額外動力, 重複用發動機 </p><p class="fz28" data-v-758206d3> 低耦合 <span class="cor17" data-v-758206d3> . . . . . . </span> 掃把壞了拿下來換新的 不影響別的 </p><br data-v-758206d3><br data-v-758206d3><div class="dis spaAro" data-v-758206d3><div data-v-758206d3><p class="fz28 cor36" data-v-758206d3>函數導向編程</p><p class="fz28 cor36" data-v-758206d3># 優</p><p class="fz28" data-v-758206d3>性能比 物件導向高 , 適合跟硬件聯繫很緊密的東西</p><br data-v-758206d3><p class="fz28 cor36" data-v-758206d3># 缺</p><p class="fz28" data-v-758206d3>沒有物件導向易維護 , 易復用 , 易擴展</p></div><div data-v-758206d3><p class="fz28 cor36" data-v-758206d3>物件導向編程</p><p class="fz28 cor36" data-v-758206d3># 優</p><p class="fz28" data-v-758206d3>易維護 , 易復用 , 易擴展</p><p class="fz28" data-v-758206d3> 有封裝 , 繼承 , 多態 , 可設計出 低耦合 的系統 , 系統更靈活、易維護 </p><br data-v-758206d3><p class="fz28 cor36" data-v-758206d3># 缺</p><p class="fz28" data-v-758206d3>性能比 物件導向低</p></div></div><br data-v-758206d3><div id="threeprototype002" class="articleCardTitle cor36 fz34" data-v-758206d3> 6.2 構造函數 </div><div data-v-758206d3><span class="cor36 fz28" data-v-758206d3>封裝 </span><span class="cor17" data-v-758206d3> . . . . . </span><span class="fz28" data-v-758206d3>JS 透過 構造函數 實現 封裝</span></div><br data-v-758206d3><p class="fz28" data-v-758206d3>構造函數很好用 , 但是 存在 浪費 內存 問題</p><div class="bgcVS" data-v-758206d3><p data-v-758206d3>創建 構造函數</p><br data-v-758206d3><div class="disCen" data-v-758206d3><img style="width:100%;" src="'+P+'" data-v-758206d3></div><br data-v-758206d3><p class="fz28" data-v-758206d3>如果我創建 200 個物件</p><p class="fz28" data-v-758206d3>堆 放了 200 個 function</p><p class="fz28" data-v-758206d3>浪費 內存</p></div><div class="articleCardTitle cor36 fz34" data-v-758206d3>6. 原型</div><p class="fz28" data-v-758206d3>解決構造函數 浪費內存問題</p><br data-v-758206d3><p class="fz28" data-v-758206d3> 1. 構造函數 通過原型 分配的函數 是 所有對象 所共享的 </p><br data-v-758206d3><p class="fz28" data-v-758206d3> 2. JS 規定 每個 構造函數 都有一個 prototype 屬性, 指向另一個對象, 也稱為原型對象 </p><br data-v-758206d3><p class="fz28" data-v-758206d3> 3. 這個對象 可以 掛載函數, 對象 實例化 不會 多次創建原型上函數, 節約內存 </p><br data-v-758206d3><p class="fz28" data-v-758206d3> 4. 可以把 不變的方法 直接定義在 prototype 對象上 , 這樣所有對象 的實例 就可以共享這些方法 </p><br data-v-758206d3><p class="fz28" data-v-758206d3>5. 構造函數和原型對象中的 this 都指向 實例化的對象</p><div class="bgcVS" data-v-758206d3><div data-v-758206d3><span class="function" data-v-758206d3>function </span><span class="word" data-v-758206d3>Person</span> <span class="brackets" data-v-758206d3>(</span><span class="word" data-v-758206d3>uname,number</span><span class="brackets" data-v-758206d3>){</span></div><div class="pTwo VSL" data-v-758206d3><span class="comment" data-v-758206d3>// this.name=uname</span></div><div class="pTwo VSL" data-v-758206d3><span class="then" data-v-758206d3>this</span><span class="word" data-v-758206d3>.uname</span> <span class="then" data-v-758206d3>=</span><span class="word" data-v-758206d3>uname</span></div><div class="pTwo VSL" data-v-758206d3><span class="comment" data-v-758206d3>//物件的屬性 . . . 形參</span></div><div class="pTwo VSL" data-v-758206d3><span class="then" data-v-758206d3>this</span> <span class="word" data-v-758206d3>.number</span><span class="then" data-v-758206d3>=</span> <span class="word" data-v-758206d3>number</span></div><div class="pTwo VSL" data-v-758206d3><span class="then" data-v-758206d3>this.</span> <span class="word" data-v-758206d3>sayHi</span><span class="then" data-v-758206d3>=</span><span class="function" data-v-758206d3>function </span><span class="brackets" data-v-758206d3>(){</span></div><div class="pFou VSL" data-v-758206d3><span class="word" data-v-758206d3>console.</span><span class="variable" data-v-758206d3>log</span> <span class="brackets" data-v-758206d3>(</span><span class="src" data-v-758206d3>&quot;hi&quot;</span> <span class="brackets" data-v-758206d3>)</span></div><div class="pTwo VSL" data-v-758206d3><span class="brackets" data-v-758206d3>}</span></div><div class="brackets" data-v-758206d3>}</div><div data-v-758206d3><span class="word" data-v-758206d3>console.</span><span class="variable" data-v-758206d3>log</span> <span class="brackets" data-v-758206d3>(</span><span class="then" data-v-758206d3>new </span> <span class="word" data-v-758206d3>Person</span><span class="brackets" data-v-758206d3>(</span><span class="src" data-v-758206d3>&quot;wayne&quot;,</span> <span class="number" data-v-758206d3>123</span><span class="brackets" data-v-758206d3>))</span></div><br data-v-758206d3><div data-v-758206d3><span class="function" data-v-758206d3>const </span><span class="word" data-v-758206d3>p</span><span class="then" data-v-758206d3>= new </span><span class="word" data-v-758206d3>Person</span> <span class="brackets" data-v-758206d3>(</span><span class="src" data-v-758206d3>&quot;wayne&quot;,</span> <span class="number" data-v-758206d3>6</span><span class="brackets" data-v-758206d3>)</span></div><div data-v-758206d3><span class="function" data-v-758206d3>const </span> <span class="word" data-v-758206d3>j</span><span class="then" data-v-758206d3>=</span> <span class="then" data-v-758206d3>new </span><span class="word" data-v-758206d3>Person</span> <span class="brackets" data-v-758206d3>(</span><span class="src" data-v-758206d3>&quot;jack&quot;,</span> <span class="number" data-v-758206d3>9</span><span class="brackets" data-v-758206d3>)</span></div><br data-v-758206d3><span class="comment" data-v-758206d3>//dir 打印對象形式</span><div data-v-758206d3><span class="word" data-v-758206d3>console.</span><span class="variable" data-v-758206d3>dir</span> <span class="brackets" data-v-758206d3>(</span><span class="brackets" data-v-758206d3>Person</span> <span class="then" data-v-758206d3>.</span><span class="word" data-v-758206d3>prototype</span><span class="brackets" data-v-758206d3>) </span><span class="comment" data-v-758206d3>//寫法是屬性 返回是物件</span></div><br data-v-758206d3><br data-v-758206d3><div data-v-758206d3><span class="comment" data-v-758206d3>公共屬性寫到 構造函數</span></div><div data-v-758206d3><span class="function" data-v-758206d3>function </span><span class="word" data-v-758206d3>Person</span> <span class="brackets" data-v-758206d3>(</span><span class="word" data-v-758206d3>uname,number</span><span class="brackets" data-v-758206d3>){</span></div><div class="pTwo VSL" data-v-758206d3><span class="then" data-v-758206d3>this</span><span class="word" data-v-758206d3>.uname</span> <span class="then" data-v-758206d3>=</span><span class="word" data-v-758206d3>uname</span></div><div class="pTwo VSL" data-v-758206d3><span class="then" data-v-758206d3>this</span> <span class="word" data-v-758206d3>.number</span><span class="then" data-v-758206d3>=</span> <span class="word" data-v-758206d3>number</span></div><div class="brackets" data-v-758206d3>}</div><br data-v-758206d3><div data-v-758206d3><span class="comment" data-v-758206d3>公共方法寫到 原型object</span></div><div data-v-758206d3><span class="brackets" data-v-758206d3>Person</span><span class="word" data-v-758206d3>.prototype.sayHi</span><span class="then" data-v-758206d3>=</span><span class="function" data-v-758206d3>function </span><span class="brackets" data-v-758206d3>(){</span></div><div class="pTwo" data-v-758206d3><span class="word" data-v-758206d3>console.</span><span class="variable" data-v-758206d3>log</span> <span class="brackets" data-v-758206d3>(</span><span class="src" data-v-758206d3>&quot;hi&quot;</span> <span class="brackets" data-v-758206d3>)</span></div><div data-v-758206d3><span class="brackets" data-v-758206d3>}</span></div><br data-v-758206d3><div data-v-758206d3><span class="function" data-v-758206d3>const </span><span class="word" data-v-758206d3>p</span><span class="then" data-v-758206d3>= new </span><span class="word" data-v-758206d3>Person</span> <span class="brackets" data-v-758206d3>(</span><span class="src" data-v-758206d3>&quot;wayne&quot;,</span> <span class="number" data-v-758206d3>6</span><span class="brackets" data-v-758206d3>)</span></div><div data-v-758206d3><span class="function" data-v-758206d3>const </span> <span class="word" data-v-758206d3>j</span><span class="then" data-v-758206d3>=</span> <span class="then" data-v-758206d3>new </span><span class="word" data-v-758206d3>Person</span> <span class="brackets" data-v-758206d3>(</span><span class="src" data-v-758206d3>&quot;jack&quot;,</span> <span class="number" data-v-758206d3>9</span><span class="brackets" data-v-758206d3>)</span></div><br data-v-758206d3><div data-v-758206d3><span class="word" data-v-758206d3>p.sayHi</span> <span class="brackets" data-v-758206d3>()</span></div><br data-v-758206d3><div data-v-758206d3><span class="word" data-v-758206d3>console.</span><span class="variable" data-v-758206d3>log</span> <span class="brackets" data-v-758206d3>(</span><span class="word" data-v-758206d3>p.sayHi</span> <span class="then" data-v-758206d3>===</span><span class="word" data-v-758206d3>j.sayHi</span> <span class="brackets" data-v-758206d3>)</span><span class="comment" data-v-758206d3>//true</span></div></div><p class="fz28 cor36" data-v-758206d3># 原型是什麼?</p><p class="fz28" data-v-758206d3>一個對象, 也稱 原型對象</p><br data-v-758206d3><p class="fz28 cor36" data-v-758206d3># 原型做什麼?</p><p class="fz28" data-v-758206d3>共享方法</p><br data-v-758206d3><p class="fz28 cor36" data-v-758206d3># 構造函數 &amp; 原型 this 指向誰?</p><p class="fz28" data-v-758206d3>實例化的對象</p><div class="bgcVS" data-v-758206d3><p class="fz28" data-v-758206d3> 我只要一調用 函數 觸發 this 把這個 this 保存下來 賦值給 let </p><div data-v-758206d3><span class="function" data-v-758206d3>let </span> <span class="word" data-v-758206d3>that</span></div><div data-v-758206d3><span class="function" data-v-758206d3>function </span><span class="word" data-v-758206d3>Person</span> <span class="brackets" data-v-758206d3>(</span><span class="word" data-v-758206d3>uname</span><span class="brackets" data-v-758206d3>){</span></div><div class="pTwo VSL" data-v-758206d3><span class="word" data-v-758206d3>console.</span><span class="variable" data-v-758206d3>log</span> <span class="brackets" data-v-758206d3>(</span><span class="then" data-v-758206d3>this</span> <span class="brackets" data-v-758206d3>)</span><span class="comment" data-v-758206d3>//Person看不出來this指向誰</span></div><div class="pTwo VSL" data-v-758206d3><span class="word" data-v-758206d3>that</span> <span class="then" data-v-758206d3>=</span><span class="then" data-v-758206d3>this</span></div><div class="pTwo VSL" data-v-758206d3><span class="then" data-v-758206d3>this</span><span class="word" data-v-758206d3>.uname</span> <span class="then" data-v-758206d3>=</span><span class="word" data-v-758206d3>uname</span></div><div class="brackets" data-v-758206d3>}</div><br data-v-758206d3><div data-v-758206d3><span class="comment" data-v-758206d3>1.實例對象是 p</span></div><div data-v-758206d3><span class="function" data-v-758206d3>const </span> <span class="word" data-v-758206d3>p</span><span class="then" data-v-758206d3>=</span> <span class="then" data-v-758206d3>new </span><span class="word" data-v-758206d3>Person</span> <span class="brackets" data-v-758206d3>(</span><span class="src" data-v-758206d3>&quot;wayne&quot;</span> <span class="brackets" data-v-758206d3>)</span></div><div data-v-758206d3><span class="word" data-v-758206d3>console.</span><span class="variable" data-v-758206d3>log</span> <span class="brackets" data-v-758206d3>(</span><span class="word" data-v-758206d3>that</span> <span class="then" data-v-758206d3>===</span><span class="word" data-v-758206d3>p</span> <span class="brackets" data-v-758206d3>)</span></div><div class="comment" data-v-758206d3>如果相等 那this 就是 p</div><div class="comment" data-v-758206d3>// true // 構造函數 this 指向 p</div><br data-v-758206d3><div data-v-758206d3><span class="function" data-v-758206d3>let </span> <span class="word" data-v-758206d3>that2</span></div><span class="comment" data-v-758206d3>// 原型對象裡面的函數this指向的是實例對象 p</span><div data-v-758206d3><span class="brackets" data-v-758206d3>Person</span><span class="word" data-v-758206d3>.prototype.sayHi</span><span class="then" data-v-758206d3>=</span><span class="function" data-v-758206d3>function </span><span class="brackets" data-v-758206d3>(){</span></div><div class="pTwo VSL" data-v-758206d3><span class="word" data-v-758206d3>that2</span> <span class="then" data-v-758206d3>=</span><span class="then" data-v-758206d3>this</span></div><div class="pTwo VSL" data-v-758206d3><span class="word" data-v-758206d3>console.</span><span class="variable" data-v-758206d3>log</span> <span class="brackets" data-v-758206d3>(</span><span class="src" data-v-758206d3>&quot;hi&quot;</span> <span class="brackets" data-v-758206d3>)</span></div><div data-v-758206d3><span class="brackets" data-v-758206d3>}</span></div><div data-v-758206d3><span class="word" data-v-758206d3>p.</span> <span class="variable" data-v-758206d3>sing</span><span class="brackets" data-v-758206d3>()</span></div><div class="comment" data-v-758206d3>this 指向 函數的 調用者 就是 p</div><br data-v-758206d3><div data-v-758206d3><span class="word" data-v-758206d3>console.</span><span class="variable" data-v-758206d3>log</span> <span class="brackets" data-v-758206d3>(</span><span class="word" data-v-758206d3>that</span> <span class="then" data-v-758206d3>===</span><span class="word" data-v-758206d3>p</span> <span class="brackets" data-v-758206d3>)</span><span class="comment" data-v-758206d3>// true</span></div></div><p class="fz28" data-v-758206d3>結論</p><p class="fz28" data-v-758206d3>構造函數 和 原型對象中的 this 都指向 實例化的對象</p><br data-v-758206d3><br data-v-758206d3><p class="fz34 cor36" data-v-758206d3># 給數組擴展方法</p><p class="fz28" data-v-758206d3>reduce 是累計器</p><p class="fz28" data-v-758206d3>定義一個 arr.sum() 返回累加結果</p><div class="bgcVS" data-v-758206d3><div data-v-758206d3><span class="function" data-v-758206d3>const </span><span class="word" data-v-758206d3>arr</span> <span class="then" data-v-758206d3>=</span><span class="brackets" data-v-758206d3>[</span> <span class="number" data-v-758206d3>1,2,3</span><span class="brackets" data-v-758206d3>]</span></div><div data-v-758206d3><span class="brackets" data-v-758206d3>Array</span><span class="word" data-v-758206d3>.prototype.</span><span class="variable" data-v-758206d3>max</span> <span class="then" data-v-758206d3>=</span><span class="function" data-v-758206d3>function </span><span class="brackets" data-v-758206d3>(){</span></div><div class="pTwo" data-v-758206d3><span class="then" data-v-758206d3>return </span><span class="brackets" data-v-758206d3>Math</span><span class="word" data-v-758206d3>.</span><span class="variable" data-v-758206d3>max</span> <span class="brackets" data-v-758206d3>(</span><span class="word" data-v-758206d3>...</span><span class="then" data-v-758206d3>this</span><span class="brackets" data-v-758206d3>)</span></div><div class="pTwo" data-v-758206d3><span class="comment" data-v-758206d3>// 原型對象裡面的函數this指向的是實例對象 arr</span></div><div data-v-758206d3><span class="brackets" data-v-758206d3>}</span></div><div data-v-758206d3><span class="word" data-v-758206d3>console.</span><span class="variable" data-v-758206d3>log</span> <span class="brackets" data-v-758206d3>(</span><span class="word" data-v-758206d3>arr.</span> <span class="word" data-v-758206d3>max</span><span class="brackets" data-v-758206d3>())</span></div><br data-v-758206d3><div data-v-758206d3><span class="brackets" data-v-758206d3>Array</span><span class="word" data-v-758206d3>.prototype.</span><span class="variable" data-v-758206d3>sum</span> <span class="then" data-v-758206d3>=</span><span class="function" data-v-758206d3>function </span><span class="brackets" data-v-758206d3>(){</span></div><div class="pTwo VSL" data-v-758206d3><span class="then" data-v-758206d3>return </span> <span class="then" data-v-758206d3>this</span><span class="variable" data-v-758206d3>.reduce</span><span class="brackets" data-v-758206d3>((</span><span class="word" data-v-758206d3>prev,item</span><span class="brackets" data-v-758206d3>)</span> <span class="function" data-v-758206d3>=&gt;</span><span class="word" data-v-758206d3>prev</span> <span class="then" data-v-758206d3>+</span><span class="word" data-v-758206d3>item,</span> <span class="number" data-v-758206d3>0</span><span class="brackets" data-v-758206d3>)</span></div><div data-v-758206d3><span class="brackets" data-v-758206d3>}</span></div><div data-v-758206d3><span class="word" data-v-758206d3>console.</span><span class="variable" data-v-758206d3>log</span><span class="brackets" data-v-758206d3>([</span> <span class="word" data-v-758206d3>1,2,3</span><span class="brackets" data-v-758206d3>]</span><span class="variable" data-v-758206d3>.sum</span><span class="brackets" data-v-758206d3>())</span></div></div><div id="threeprototype003" class="articleCardTitle cor36 fz34" data-v-758206d3> 6.3 constructor </div><p class="fz28" data-v-758206d3>在哪裡?</p><p class="fz28" data-v-758206d3>每個 原型對象 裡面都有 constructor 屬性</p><br data-v-758206d3><p class="fz28" data-v-758206d3>做什麼?</p><p class="fz28" data-v-758206d3>該屬性 指向 該原型對象的 構造函數</p><br data-v-758206d3><div class="bgcVS" data-v-758206d3><div data-v-758206d3><span class="function" data-v-758206d3>function </span><span class="word" data-v-758206d3>Person</span> <span class="brackets" data-v-758206d3>(){</span></div><div data-v-758206d3><span class="brackets" data-v-758206d3>}</span></div><div data-v-758206d3><span class="function" data-v-758206d3>const </span> <span class="word" data-v-758206d3>p</span><span class="then" data-v-758206d3>=</span> <span class="then" data-v-758206d3>new </span><span class="word" data-v-758206d3>Person</span> <span class="brackets" data-v-758206d3>()</span></div><div data-v-758206d3><span class="word" data-v-758206d3>console.</span><span class="variable" data-v-758206d3>log</span> <span class="brackets" data-v-758206d3>(</span><span class="brackets" data-v-758206d3>Person</span><span class="word" data-v-758206d3>.prototype</span><span class="brackets" data-v-758206d3>)</span></div><div data-v-758206d3><span class="comment" data-v-758206d3>// 得到構造函數裡面的原型對象</span></div><div data-v-758206d3><span class="comment" data-v-758206d3>// F12 展開這個對象看到 constructor</span></div><div data-v-758206d3><span class="comment" data-v-758206d3>// 只要是原型對象 裡面 默認都有 constructor 屬性</span></div><div data-v-758206d3><span class="comment" data-v-758206d3>// 做什麼?</span></div><div data-v-758206d3><span class="comment" data-v-758206d3>// 發現 指向 Person</span></div><div data-v-758206d3><span class="comment" data-v-758206d3>// 指向 構造函數</span></div><br data-v-758206d3><div data-v-758206d3><span class="word" data-v-758206d3>console.</span><span class="variable" data-v-758206d3>log</span> <span class="brackets" data-v-758206d3>(</span><span class="word" data-v-758206d3>Person.prototype.constructor</span><span class="then" data-v-758206d3>===</span> <span class="word" data-v-758206d3>Person</span><span class="brackets" data-v-758206d3>)</span><span class="comment" data-v-758206d3>//true</span></div><br data-v-758206d3><div data-v-758206d3><span class="function" data-v-758206d3>function </span><span class="word" data-v-758206d3>Person</span> <span class="brackets" data-v-758206d3>(){</span></div><div data-v-758206d3><span class="brackets" data-v-758206d3>}</span></div><div data-v-758206d3><span class="comment" data-v-758206d3>// Person.prototype.say = function(){</span></div><div class="pTwo" data-v-758206d3><span class="comment" data-v-758206d3>// console.log(&quot;hi&quot;)</span></div><div data-v-758206d3><span class="comment" data-v-758206d3>}</span></div><div data-v-758206d3><span class="comment" data-v-758206d3>// Person.prototype.walk = function(){</span></div><div class="pTwo" data-v-758206d3><span class="comment" data-v-758206d3>// console.log(&quot;walk&quot;)</span></div><div data-v-758206d3><span class="comment" data-v-758206d3>}</span></div><br data-v-758206d3><div data-v-758206d3><span class="word" data-v-758206d3>console.</span><span class="variable" data-v-758206d3>log</span> <span class="brackets" data-v-758206d3>(</span><span class="brackets" data-v-758206d3>Person</span><span class="word" data-v-758206d3>.prototype</span><span class="brackets" data-v-758206d3>) </span><span class="comment" data-v-758206d3>// 有 constructor</span></div><div data-v-758206d3><span class="brackets" data-v-758206d3>Person</span><span class="word" data-v-758206d3>.prototype</span> <span class="then" data-v-758206d3>=</span><span class="brackets" data-v-758206d3>{</span></div><div class="padTwo VSL" data-v-758206d3><div data-v-758206d3><span class="word" data-v-758206d3>sing:</span><span class="function" data-v-758206d3>function </span><span class="brackets" data-v-758206d3>(){</span></div><div class="padTwo VSL" data-v-758206d3><span class="word" data-v-758206d3>console.</span><span class="variable" data-v-758206d3>log</span><span class="brackets" data-v-758206d3>(</span> <span class="src" data-v-758206d3>&quot;hi&quot;</span><span class="brackets" data-v-758206d3>)</span></div><div data-v-758206d3><span class="brackets" data-v-758206d3>},</span></div><div data-v-758206d3><span class="word" data-v-758206d3>walk:</span><span class="function" data-v-758206d3>function </span><span class="brackets" data-v-758206d3>(){</span></div><div class="padTwo VSL" data-v-758206d3><div data-v-758206d3></div><span class="word" data-v-758206d3>console.</span><span class="variable" data-v-758206d3>log</span><span class="brackets" data-v-758206d3>(</span><span class="word" data-v-758206d3>&quot;walk&quot;</span> <span class="brackets" data-v-758206d3>)</span></div><div data-v-758206d3><span class="brackets" data-v-758206d3>},</span></div></div><div data-v-758206d3><span class="brackets" data-v-758206d3>}</span></div><br data-v-758206d3><div data-v-758206d3><span class="word" data-v-758206d3>console.</span><span class="variable" data-v-758206d3>log</span> <span class="brackets" data-v-758206d3>(</span><span class="brackets" data-v-758206d3>Person</span><span class="word" data-v-758206d3>.prototype</span><span class="brackets" data-v-758206d3>) </span><span class="comment" data-v-758206d3>// constructor 不見了</span></div><br data-v-758206d3><p data-v-758206d3>我一定要 constructor 指向父親</p><br data-v-758206d3><div data-v-758206d3><span class="brackets" data-v-758206d3>Person</span><span class="word" data-v-758206d3>.prototype</span> <span class="then" data-v-758206d3>=</span><span class="brackets" data-v-758206d3>{</span></div><div class="padTwo VSL" data-v-758206d3><div data-v-758206d3><span class="comment" data-v-758206d3>// 重新指回創造這個原型對象的 </span></div><div data-v-758206d3><span class="word" data-v-758206d3>constructor:</span><span class="brackets" data-v-758206d3>Person,</span></div><div data-v-758206d3><span class="word" data-v-758206d3>sing:</span><span class="function" data-v-758206d3>function </span><span class="brackets" data-v-758206d3>(){</span></div><div class="padTwo VSL" data-v-758206d3><span class="word" data-v-758206d3>console.</span><span class="variable" data-v-758206d3>log</span><span class="brackets" data-v-758206d3>(</span> <span class="src" data-v-758206d3>&quot;hi&quot;</span><span class="brackets" data-v-758206d3>)</span></div><div data-v-758206d3><span class="brackets" data-v-758206d3>},</span></div><div data-v-758206d3><span class="word" data-v-758206d3>walk:</span><span class="function" data-v-758206d3>function </span><span class="brackets" data-v-758206d3>(){</span></div><div class="padTwo VSL" data-v-758206d3><div data-v-758206d3></div><span class="word" data-v-758206d3>console.</span><span class="variable" data-v-758206d3>log</span><span class="brackets" data-v-758206d3>(</span><span class="word" data-v-758206d3>&quot;walk&quot;</span> <span class="brackets" data-v-758206d3>)</span></div><div data-v-758206d3><span class="brackets" data-v-758206d3>},</span></div></div><div data-v-758206d3><span class="brackets" data-v-758206d3>}</span></div><br data-v-758206d3></div><p class="fz28" data-v-758206d3>思考</p><br data-v-758206d3><div class="fz28" data-v-758206d3><span class="bor pad204" data-v-758206d3>構造函數</span> → <span class="bor pad204" data-v-758206d3> 原型 prototype 共享屬性方法 </span></div><br data-v-758206d3><div class="fz28" data-v-758206d3><span class="cor17" data-v-758206d3> . . . </span> ↓</div><br data-v-758206d3><div class="fz28" data-v-758206d3><span class="bor pad204" data-v-758206d3>實例對象 new Person()</span></div><br data-v-758206d3><br data-v-758206d3><br data-v-758206d3><p class="fz28" data-v-758206d3>為什麼 實例對象 可以訪問 原型的 方法?</p><div id="threeprototype004" class="articleCardTitle cor36 fz34" data-v-758206d3> 6.4 對象原型 </div><p class="fz28" data-v-758206d3> 對象都會有一個屬性 __proto__ 指向 構造函數的 prototype 原型對象 </p><br data-v-758206d3><br data-v-758206d3><br data-v-758206d3><div class="fz28" data-v-758206d3><span class="bor pad204" data-v-758206d3>構造函數</span> → <span class="bor pad204" data-v-758206d3> 原型 prototype 共享屬性方法 </span></div><br data-v-758206d3><div class="fz28" data-v-758206d3><span class="cor17" data-v-758206d3> . . . </span> ↓ <span class="cor17" data-v-758206d3> . . . . . . . . . . . . . . . . </span> ↗ __proto__ </div><br data-v-758206d3><div class="fz28" data-v-758206d3><span class="bor pad204" data-v-758206d3>實例對象 new Person()</span></div><div class="bgcVS" data-v-758206d3><div data-v-758206d3><span class="function" data-v-758206d3>function </span><span class="word" data-v-758206d3>Person</span><span class="brackets" data-v-758206d3>(){}</span></div><div data-v-758206d3><span class="function" data-v-758206d3>const </span> <span class="word" data-v-758206d3>p</span><span class="then" data-v-758206d3>=</span> <span class="then" data-v-758206d3>new </span><span class="word" data-v-758206d3>Person</span> <span class="brackets" data-v-758206d3>()</span></div><div data-v-758206d3><span class="word" data-v-758206d3>console.</span><span class="variable" data-v-758206d3>log</span> <span class="brackets" data-v-758206d3>(</span><span class="word" data-v-758206d3>p</span> <span class="brackets" data-v-758206d3>)</span></div><div class="comment" data-v-758206d3>// person 物件裡面展開有一個 __proto__</div><br data-v-758206d3><span class="comment" data-v-758206d3>//對象原型__proto__指向 該構造函數的原型對象</span><div data-v-758206d3><span class="word" data-v-758206d3>console.</span><span class="variable" data-v-758206d3>log</span> <span class="brackets" data-v-758206d3>(</span><span class="word" data-v-758206d3>p.__proto__</span><span class="then" data-v-758206d3>===</span><span class="word" data-v-758206d3>p.prototype</span><span class="brackets" data-v-758206d3>) </span><span class="comment" data-v-758206d3>// true</span></div><br data-v-758206d3><div data-v-758206d3><span class="comment" data-v-758206d3>// 對象原型裡面有 constructor 指向 構造函數 Person</span></div><div data-v-758206d3><span class="word" data-v-758206d3>console.</span><span class="variable" data-v-758206d3>log</span> <span class="brackets" data-v-758206d3>(</span><span class="word" data-v-758206d3>p.__proto__</span><span class="brackets" data-v-758206d3>)</span></div><div data-v-758206d3><span class="word" data-v-758206d3>console.</span><span class="variable" data-v-758206d3>log</span> <span class="brackets" data-v-758206d3>(</span><span class="word" data-v-758206d3>p.__proto__.constructor</span><span class="then" data-v-758206d3>===</span> <span class="word" data-v-758206d3>Person</span><span class="brackets" data-v-758206d3>) </span><span class="comment" data-v-758206d3>// true</span></div></div><p class="fz28" data-v-758206d3>注意</p><p class="fz28" data-v-758206d3>__proto__ 是 js 非標準屬性</p><p class="fz28" data-v-758206d3>[[Prototype]] 和 __proto__ 意義相同</p><p class="fz28" data-v-758206d3>用來表明當前實例對象指向哪個原型對象 prototype</p><p class="fz28" data-v-758206d3> __proto__ 對象原型裡面也有一個 constructor 屬性, 指向創建該實例對象的構造函數 </p><br data-v-758206d3><br data-v-758206d3><br data-v-758206d3><br data-v-758206d3><br data-v-758206d3><br data-v-758206d3><p class="fz40" data-v-758206d3>對象原型 指向 原型對象</p><br data-v-758206d3><br data-v-758206d3><br data-v-758206d3><br data-v-758206d3><br data-v-758206d3><br data-v-758206d3><div class="fz28" data-v-758206d3><span class="bor pad204" data-v-758206d3>. . . 構造函數</span> → ← constructor <span class="bor pad204" data-v-758206d3> 原型 prototype 共享屬性方法 </span></div><br data-v-758206d3><div class="fz28" data-v-758206d3><span class="cor17" data-v-758206d3> . . . . . . . . . </span> ↓ </div><br data-v-758206d3><div class="fz28" data-v-758206d3> constructor ↑ <span class="cor17" data-v-758206d3> . . . . . . . . . . . </span> ↗ __proto__ 也是 [[Prototype]] </div><br data-v-758206d3><div class="fz28" data-v-758206d3><span class="bor pad204" data-v-758206d3>實例對象 new Person()</span></div><br data-v-758206d3><br data-v-758206d3><br data-v-758206d3><p class="fz28 cor36" data-v-758206d3># 結論</p><p class="fz28 cor36" data-v-758206d3>prototype 是什麼?</p><p class="fz28" data-v-758206d3>原型</p><br data-v-758206d3><p class="fz28 cor36" data-v-758206d3>哪裡來?</p><p class="fz28" data-v-758206d3>構造函數 都自動有</p><br data-v-758206d3><p class="fz28 cor36" data-v-758206d3>constructor 在哪裡?</p><p class="fz28" data-v-758206d3>prototype 原型 和 對象原型 __proto__ 都有</p><br data-v-758206d3><p class="fz28 cor36" data-v-758206d3>做什麼?</p><p class="fz28" data-v-758206d3>指向 創建 實例對象的 構造函數</p><br data-v-758206d3><p class="fz28" data-v-758206d3>指向 創建 原型的 構造函數</p><br data-v-758206d3><br data-v-758206d3><p class="fz28 cor36" data-v-758206d3>__proto__在哪裡?</p><p class="fz28" data-v-758206d3>實例對象裡面</p><br data-v-758206d3><p class="fz28 cor36" data-v-758206d3>指向誰?</p><p class="fz28" data-v-758206d3>對象原型 指向 原型對象</p><br data-v-758206d3><div id="threeprototype005" class="articleCardTitle cor36 fz34" data-v-758206d3> 6.5 原型繼承 </div><div class="bgcVS" data-v-758206d3><div data-v-758206d3><span class="function" data-v-758206d3>function </span><span class="word" data-v-758206d3>Man</span> <span class="brackets" data-v-758206d3>(){</span></div><div class="padTwo VSL" data-v-758206d3><span class="then" data-v-758206d3>this</span> <span class="word" data-v-758206d3>.eyes</span><span class="then" data-v-758206d3>=</span> <span class="number" data-v-758206d3>2</span><div data-v-758206d3></div></div><div data-v-758206d3><span class="brackets" data-v-758206d3>}</span></div><div data-v-758206d3><span class="function" data-v-758206d3>function </span><span class="word" data-v-758206d3>Woman</span> <span class="brackets" data-v-758206d3>(){</span></div><div class="padTwo VSL" data-v-758206d3><span class="then" data-v-758206d3>this</span> <span class="word" data-v-758206d3>.eyes</span><span class="then" data-v-758206d3>=</span> <span class="number" data-v-758206d3>2</span><div data-v-758206d3></div></div><div data-v-758206d3><span class="brackets" data-v-758206d3>}</span></div><div data-v-758206d3><span class="comment" data-v-758206d3>// 想要繼承 Person , 公共的部分放到原型上 , 就是原型繼承</span></div><br data-v-758206d3><br data-v-758206d3><div data-v-758206d3><span class="function" data-v-758206d3>const </span><span class="word" data-v-758206d3>Person</span> <span class="then" data-v-758206d3>=</span><span class="brackets" data-v-758206d3>{</span></div><div class="padTwo VSL" data-v-758206d3><span class="word" data-v-758206d3>eyes:</span> <span class="number" data-v-758206d3>2,</span><div data-v-758206d3></div></div><div data-v-758206d3><span class="brackets" data-v-758206d3>}</span></div><div data-v-758206d3><span class="function" data-v-758206d3>function </span><span class="word" data-v-758206d3>Man</span> <span class="brackets" data-v-758206d3>(){}</span></div><br data-v-758206d3><div class="comment" data-v-758206d3>// Man 通過原型來繼承 Person</div><div data-v-758206d3><span class="word" data-v-758206d3>Man.prototype</span><span class="then" data-v-758206d3>=</span> <span class="brackets" data-v-758206d3>Person</span></div><br data-v-758206d3><div data-v-758206d3><span class="word" data-v-758206d3>console.</span><span class="variable" data-v-758206d3>log</span> <span class="brackets" data-v-758206d3>(</span><span class="word" data-v-758206d3>Man.prototype</span><span class="brackets" data-v-758206d3>)</span><span class="comment" data-v-758206d3>//看有沒有constructor</span></div><div class="comment" data-v-758206d3>// 沒有 , 因為 Person 是 物件 形式</div><div class="comment" data-v-758206d3>// 直接進行覆蓋 , 覆蓋完後指不回來了</div><br data-v-758206d3><br data-v-758206d3><div class="comment" data-v-758206d3>// Man 通過原型來繼承 Person</div><div data-v-758206d3><span class="word" data-v-758206d3>Man.prototype</span><span class="then" data-v-758206d3>=</span> <span class="brackets" data-v-758206d3>Person</span></div><br data-v-758206d3><div data-v-758206d3><span class="number" data-v-758206d3>!指回原來的構造函數! . . . constructor</span></div><br data-v-758206d3><div data-v-758206d3><span class="word" data-v-758206d3>Man.prototype.</span><span class="function" data-v-758206d3>constructor</span><span class="then" data-v-758206d3>=</span> <span class="word" data-v-758206d3>Man</span></div><div data-v-758206d3><span class="word" data-v-758206d3>console.</span><span class="variable" data-v-758206d3>log</span> <span class="brackets" data-v-758206d3>(</span><span class="word" data-v-758206d3>Man.prototype</span><span class="brackets" data-v-758206d3>)</span><span class="comment" data-v-758206d3>//有constructor</span></div><br data-v-758206d3><br data-v-758206d3><br data-v-758206d3><br data-v-758206d3><div data-v-758206d3><span class="function" data-v-758206d3>function </span><span class="word" data-v-758206d3>Woman</span> <span class="brackets" data-v-758206d3>(){}</span></div><div data-v-758206d3><span class="word" data-v-758206d3>Woman.prototype</span><span class="then" data-v-758206d3>=</span> <span class="brackets" data-v-758206d3>Person</span></div><div data-v-758206d3><span class="word" data-v-758206d3>Woman.prototype.</span><span class="function" data-v-758206d3>constructor</span><span class="then" data-v-758206d3>=</span> <span class="word" data-v-758206d3>Woman</span></div><div data-v-758206d3><span class="function" data-v-758206d3>const </span> <span class="word" data-v-758206d3>p</span><span class="then" data-v-758206d3>=</span> <span class="then" data-v-758206d3>new </span><span class="word" data-v-758206d3>Woman</span> <span class="brackets" data-v-758206d3>()</span></div><div data-v-758206d3><span class="word" data-v-758206d3>console.</span><span class="variable" data-v-758206d3>log</span> <span class="brackets" data-v-758206d3>(</span><span class="word" data-v-758206d3>p</span> <span class="brackets" data-v-758206d3>)</span><span class="comment" data-v-758206d3>//看到constructor指回Person</span></div><br data-v-758206d3><br data-v-758206d3><br data-v-758206d3><br data-v-758206d3><p data-v-758206d3># 我除了繼承 父 的屬性 還想添加方法</p><br data-v-758206d3><div data-v-758206d3><span class="word" data-v-758206d3>Woman.prototype.</span><span class="variable" data-v-758206d3>baby</span> <span class="then" data-v-758206d3>=</span><span class="function" data-v-758206d3>function </span><span class="brackets" data-v-758206d3>(){</span></div><div class="padTwo VSL" data-v-758206d3><span class="word" data-v-758206d3>console.</span><span class="variable" data-v-758206d3>log</span> <span class="brackets" data-v-758206d3>(</span><span class="word" data-v-758206d3>&quot;baby&quot;</span> <span class="brackets" data-v-758206d3>)</span><div data-v-758206d3></div></div><div data-v-758206d3><span class="brackets" data-v-758206d3>}</span></div><br data-v-758206d3><div data-v-758206d3><span class="function" data-v-758206d3>const </span><span class="word" data-v-758206d3>red</span> <span class="then" data-v-758206d3>=</span><span class="then" data-v-758206d3>new </span><span class="brackets" data-v-758206d3>Woman</span><span class="brackets" data-v-758206d3>()</span></div><div data-v-758206d3><span class="word" data-v-758206d3>console.</span><span class="variable" data-v-758206d3>log</span> <span class="brackets" data-v-758206d3>(</span><span class="word" data-v-758206d3>red</span> <span class="brackets" data-v-758206d3>)</span><span class="comment" data-v-758206d3>//看[[Prototype]]看到有baby方法</span></div><br data-v-758206d3><div data-v-758206d3><span class="comment" data-v-758206d3>// 我想 Man 沒有添加 baby 方法</span></div><div data-v-758206d3><span class="function" data-v-758206d3>const </span><span class="word" data-v-758206d3>wayne</span> <span class="then" data-v-758206d3>=</span><span class="then" data-v-758206d3>new </span> <span class="brackets" data-v-758206d3>Man</span><span class="brackets" data-v-758206d3>()</span></div><div data-v-758206d3><span class="word" data-v-758206d3>console.</span><span class="variable" data-v-758206d3>log</span> <span class="brackets" data-v-758206d3>(</span><span class="word" data-v-758206d3>wayne</span> <span class="brackets" data-v-758206d3>)</span></div><div data-v-758206d3><span class="comment" data-v-758206d3>// 看 [[Prototype]] 也有 baby 方法</span></div><br data-v-758206d3><p data-v-758206d3># 為什麼?</p><p data-v-758206d3>因為他們 2 個的 原型 都是 繼承 Person</p><br data-v-758206d3><br data-v-758206d3><div class="dis" data-v-758206d3><div data-v-758206d3><br data-v-758206d3><div data-v-758206d3><span class="word" data-v-758206d3>Woman.prototype</span><span class="then" data-v-758206d3>=</span><span class="brackets" data-v-758206d3>Person</span></div><br data-v-758206d3><div data-v-758206d3><span class="word" data-v-758206d3>Man.prototype</span><span class="then" data-v-758206d3>=</span><span class="brackets" data-v-758206d3>Person</span></div></div><div class="padL20" data-v-758206d3> 棧 <div data-v-758206d3>→0x1111→</div><br data-v-758206d3><div data-v-758206d3>→0x2222↗</div></div><div class="padL20" data-v-758206d3> 堆 <div data-v-758206d3><span class="function" data-v-758206d3>const </span><span class="word" data-v-758206d3>Person</span> <span class="then" data-v-758206d3>=</span><span class="brackets" data-v-758206d3>{</span></div><div class="padTwo VSL" data-v-758206d3><span class="word" data-v-758206d3>eyes:</span> <span class="number" data-v-758206d3>2,</span><div data-v-758206d3></div></div><div class="padTwo VSL" data-v-758206d3><span class="word" data-v-758206d3>baby:</span><span class="function" data-v-758206d3>function </span><span class="brackets" data-v-758206d3>(){}</span><div data-v-758206d3></div></div><div data-v-758206d3><span class="brackets" data-v-758206d3>}</span></div><br data-v-758206d3><br data-v-758206d3><br data-v-758206d3></div></div><p data-v-758206d3># 我要 Woman &amp; Man 不互相影響 . . . &gt; 給他們不同的對象</p><br data-v-758206d3><div data-v-758206d3><span class="function" data-v-758206d3>const </span><span class="word" data-v-758206d3>Person1</span> <span class="then" data-v-758206d3>=</span><span class="brackets" data-v-758206d3>{</span></div><div class="padTwo VSL" data-v-758206d3><span class="word" data-v-758206d3>eyes:</span> <span class="number" data-v-758206d3>2,</span><div data-v-758206d3></div></div><div data-v-758206d3><span class="brackets" data-v-758206d3>}</span></div><div data-v-758206d3><span class="function" data-v-758206d3>const </span><span class="word" data-v-758206d3>Person2</span> <span class="then" data-v-758206d3>=</span><span class="brackets" data-v-758206d3>{</span></div><div class="padTwo VSL" data-v-758206d3><span class="word" data-v-758206d3>eyes:</span> <span class="number" data-v-758206d3>2,</span><div data-v-758206d3></div></div><div data-v-758206d3><span class="brackets" data-v-758206d3>}</span></div><br data-v-758206d3><div data-v-758206d3><span class="word" data-v-758206d3>Woman.prototype</span><span class="then" data-v-758206d3>=</span><span class="brackets" data-v-758206d3>Person1</span></div><div data-v-758206d3><span class="word" data-v-758206d3>Man.prototype</span><span class="then" data-v-758206d3>=</span><span class="brackets" data-v-758206d3>Person2</span></div><br data-v-758206d3><br data-v-758206d3><p data-v-758206d3># 我要 內容一樣 但是 物件 結構不一樣 . . . &gt; 構造函數</p><p data-v-758206d3># 構造函數 new 出來的對象 結構一樣 , 但是 對象 不一樣</p><br data-v-758206d3><div class="comment" data-v-758206d3>//const Person1 = { eyes:2 }</div><div class="comment" data-v-758206d3>//const Person2 = { eyes:2 }</div><div data-v-758206d3><span class="function" data-v-758206d3>function </span><span class="brackets" data-v-758206d3>Person</span><span class="brackets" data-v-758206d3>(){</span></div><div class="padTwo VSL" data-v-758206d3><span class="then" data-v-758206d3>this.</span> <span class="word" data-v-758206d3>eyes</span><span class="then" data-v-758206d3>=</span> <span class="number" data-v-758206d3>2</span><div data-v-758206d3></div></div><div data-v-758206d3><span class="brackets" data-v-758206d3>}</span></div><div data-v-758206d3><span class="word" data-v-758206d3>Woman.prototype</span><span class="then" data-v-758206d3>=</span> <span class="then" data-v-758206d3>new </span><span class="brackets" data-v-758206d3>Person</span><span class="brackets" data-v-758206d3>()</span></div><div class="comment" data-v-758206d3>// new Person 新增一個物件</div><div class="comment" data-v-758206d3>// 這個物件就是 我們寫的 結構 eyes:2</div><div data-v-758206d3><span class="word" data-v-758206d3>Man.prototype</span><span class="then" data-v-758206d3>=</span> <span class="then" data-v-758206d3>new </span><span class="brackets" data-v-758206d3>Person</span><span class="brackets" data-v-758206d3>()</span></div><div class="comment" data-v-758206d3>// new Person 又 新增一個物件</div><div class="comment" data-v-758206d3> // 這個物件 結構一樣 內容一樣 這 2 個 物件 不一樣 </div><br data-v-758206d3><div data-v-758206d3><span class="word" data-v-758206d3>Woman.prototype.</span><span class="variable" data-v-758206d3>baby</span> <span class="then" data-v-758206d3>=</span><span class="function" data-v-758206d3>function </span><span class="brackets" data-v-758206d3>(){</span></div><div class="padTwo VSL" data-v-758206d3><span class="word" data-v-758206d3>console.</span><span class="variable" data-v-758206d3>log</span> <span class="brackets" data-v-758206d3>(</span><span class="src" data-v-758206d3>&quot;baby&quot;</span> <span class="brackets" data-v-758206d3>)</span><div data-v-758206d3></div></div><div data-v-758206d3><span class="brackets" data-v-758206d3>}</span></div><br data-v-758206d3><p data-v-758206d3># 以上 原型繼承</p><p data-v-758206d3> 需求: Man Woman 不要用同一個物件, 但不同物件裡面包含相同屬性和方法 </p><p data-v-758206d3>用: 構造函數</p><p data-v-758206d3>new 每次都會創建一個新物件</p><br data-v-758206d3><br data-v-758206d3><br data-v-758206d3><br data-v-758206d3><p data-v-758206d3>1. 換成 構造函數</p><p data-v-758206d3>2. prototype 不再是物件名了, 用 new Person 的方法</p><br data-v-758206d3><br data-v-758206d3><br data-v-758206d3><br data-v-758206d3><p data-v-758206d3>父構造函數 (父類) . . . 子構造函數 (子類)</p><p data-v-758206d3>function Person(){} 父構造函數</p><p data-v-758206d3>Woman 子構造函數</p><br data-v-758206d3><p data-v-758206d3>子類的原型 = new 父類</p><div data-v-758206d3><span class="word" data-v-758206d3>Woman.prototype</span><span class="then" data-v-758206d3>=</span> <span class="then" data-v-758206d3>new </span><span class="brackets" data-v-758206d3>Person</span><span class="brackets" data-v-758206d3>()</span></div><br data-v-758206d3><br data-v-758206d3><p data-v-758206d3>JS 繼承很多方法</p><p data-v-758206d3>Java 用 class 類</p><p data-v-758206d3>後面 JS 引入 class</p></div><div id="threeprototype006" class="articleCardTitle cor36 fz34" data-v-758206d3> 6.6 原型鏈 </div><p class="fz28" data-v-758206d3>作用域鏈 一層一層 查找 變量在哪個作用域</p><p class="fz28" data-v-758206d3>原型鏈 查找 原型</p><div class="bgcVS" data-v-758206d3><div class="fz28" data-v-758206d3><span class="cor29" data-v-758206d3>. . . </span><span class="bor pad204" data-v-758206d3> 構造函數</span> → ← constructor <span class="bor pad204" data-v-758206d3> 原型 prototype 共享屬性方法 </span></div><div class="fz28" data-v-758206d3><span class="cor29" data-v-758206d3> . . . . . . . . . </span> ↓ </div><div class="fz28" data-v-758206d3> constructor ↑ <span class="cor29" data-v-758206d3> . . . . . . . . . . . </span> ↗ __proto__ 也是 [[Prototype]] </div><div class="fz28 pad20 disInl bor" data-v-758206d3><span class="" data-v-758206d3>實例對象 new Person()</span></div><br data-v-758206d3><br data-v-758206d3><br data-v-758206d3><br data-v-758206d3><br data-v-758206d3><br data-v-758206d3><div class="fz28" data-v-758206d3><span class="cor29" data-v-758206d3>. . . </span><span class="bor pad204" data-v-758206d3> Person</span> → ← constructor <span class="bor pad204" data-v-758206d3> Person.prototype </span></div><div class="fz28" data-v-758206d3><span class="cor29" data-v-758206d3> . . . . . . . . . </span> ↓ </div><div class="fz28" data-v-758206d3> constructor ↑ <span class="cor29" data-v-758206d3> . . . . . . . . . . . </span> ↗ __proto__ </div><div class="fz28" data-v-758206d3><div class="disInl bor pad20" data-v-758206d3><span data-v-758206d3>實例對象 new Person()</span><br data-v-758206d3><span data-v-758206d3>p</span><br data-v-758206d3><span data-v-758206d3>p.__proto__</span></div></div><br data-v-758206d3><div data-v-758206d3><span class="word" data-v-758206d3>console.</span><span class="variable" data-v-758206d3>log</span> <span class="brackets" data-v-758206d3>(</span><span class="word" data-v-758206d3>p.__proto__</span><span class="then" data-v-758206d3>===</span><span class="word" data-v-758206d3>Person.prototype</span><span class="brackets" data-v-758206d3>)</span><span class="comment" data-v-758206d3>//true</span></div><div data-v-758206d3><span class="word" data-v-758206d3>console.</span><span class="variable" data-v-758206d3>log</span> <span class="brackets" data-v-758206d3>(</span><span class="word" data-v-758206d3>Person.prototype</span><span class="brackets" data-v-758206d3>) </span><span class="comment" data-v-758206d3>// 發現裡面也有[[Prototype]]</span></div><div data-v-758206d3><span class="comment" data-v-758206d3>//原型對象也是對象, 只要是對象 都有 __proto__</span></div><div data-v-758206d3><span class="comment" data-v-758206d3>// 他指向誰?</span></div><div data-v-758206d3><span class="comment" data-v-758206d3>// 指向 object</span></div><div data-v-758206d3><span class="word" data-v-758206d3>console.</span><span class="variable" data-v-758206d3>log</span> <span class="brackets" data-v-758206d3>(</span><span class="word" data-v-758206d3>Person.prototype.__proto__</span><span class="brackets" data-v-758206d3>)</span></div><div data-v-758206d3><span class="comment" data-v-758206d3>// 這個 __proto__ 指向誰?</span></div><div data-v-758206d3><span class="comment" data-v-758206d3>// 對象原型 指向 原型對象</span></div><br data-v-758206d3><div data-v-758206d3><span class="comment" data-v-758206d3>// 而 Person.prototype 屬於原型對象</span></div><div data-v-758206d3><span class="comment" data-v-758206d3>// 原型對象裡面有一個對象原型</span></div><div data-v-758206d3><span class="comment" data-v-758206d3>// 這個 對象原型 指向 原型對象</span></div><br data-v-758206d3><div data-v-758206d3><span class="comment" data-v-758206d3>// 那他 指向 誰的 原型對象?</span></div><br data-v-758206d3><br data-v-758206d3><p data-v-758206d3>構造函數 Object</p><div data-v-758206d3><span class="function" data-v-758206d3>function </span><span class="brackets" data-v-758206d3>Object</span><span class="brackets" data-v-758206d3>(){}</span></div><p data-v-758206d3>構造函數 就有 原型對象</p><br data-v-758206d3><div data-v-758206d3><span class="word" data-v-758206d3>console.</span><span class="variable" data-v-758206d3>log</span> <span class="brackets" data-v-758206d3>(</span><span class="word" data-v-758206d3>object</span> <span class="brackets" data-v-758206d3>)</span><span class="comment" data-v-758206d3>//是Object(){[native code]}</span></div><div data-v-758206d3><span class="word" data-v-758206d3>console.</span><span class="variable" data-v-758206d3>log</span> <span class="brackets" data-v-758206d3>(</span><span class="word" data-v-758206d3>object.prototype</span><span class="brackets" data-v-758206d3>)</span><span class="comment" data-v-758206d3>//</span></div><br data-v-758206d3><p data-v-758206d3>原型鏈</p><div class="fz28" data-v-758206d3><span class="cor29" data-v-758206d3> . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . </span><div class="disInl bor pad20" data-v-758206d3><span data-v-758206d3>null</span></div></div><div class="fz28" data-v-758206d3><span class="cor29" data-v-758206d3> . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .</span> ↗ __proto__ </div><br data-v-758206d3><div class="fz28" data-v-758206d3><span class="cor29" data-v-758206d3>. . . . . . . . . . . </span><span class="bor pad204" data-v-758206d3> Object</span> → ← Object.constructor <div class="disInl bor pad20" data-v-758206d3><span data-v-758206d3>Object.prototype</span><br data-v-758206d3><span data-v-758206d3>Object.prototype.__proto__</span></div></div><br data-v-758206d3><div class="fz28" data-v-758206d3><span class="cor29" data-v-758206d3> . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .</span> ↗ __proto__ </div><br data-v-758206d3><div class="fz28" data-v-758206d3><span class="cor29" data-v-758206d3>. . . </span><span class="bor pad204" data-v-758206d3> Person</span> → ← constructor <div class="disInl bor pad20" data-v-758206d3><span data-v-758206d3> Person.prototype </span><br data-v-758206d3><span data-v-758206d3>Person.prototype.__proto__</span></div></div><div class="fz28" data-v-758206d3><span class="cor29" data-v-758206d3> . . . . . . . . . </span> ↓ </div><div class="fz28" data-v-758206d3> constructor ↑ <span class="cor29" data-v-758206d3> . . . . . . . . . . . </span> ↗ __proto__ </div><div class="fz28" data-v-758206d3><div class="disInl bor pad20" data-v-758206d3><span data-v-758206d3>實例對象 new Person()</span><br data-v-758206d3><span data-v-758206d3>p</span><br data-v-758206d3><span data-v-758206d3>p.__proto__</span></div></div><br data-v-758206d3><div data-v-758206d3><span class="word" data-v-758206d3>console.</span><span class="variable" data-v-758206d3>log</span> <span class="brackets" data-v-758206d3>(</span><span class="word" data-v-758206d3>Person.prototype.__proto__</span><span class="then" data-v-758206d3>===</span><span class="brackets" data-v-758206d3>Object</span><span class="word" data-v-758206d3>.prototype</span><span class="brackets" data-v-758206d3>) </span><span class="comment" data-v-758206d3>// true</span></div><div data-v-758206d3><span class="word" data-v-758206d3>console.</span><span class="variable" data-v-758206d3>log</span> <span class="brackets" data-v-758206d3>(</span><span class="brackets" data-v-758206d3>Object</span><span class="word" data-v-758206d3>.prototype.__proto__</span><span class="brackets" data-v-758206d3>) </span><span class="comment" data-v-758206d3>// null</span></div></div><p class="fz28 cor36" data-v-758206d3>原型鏈</p><p class="fz28" data-v-758206d3> 基於 原型對象 的 繼承 使得不同 構造函數的 原型對象 關聯在一起, 並且這種關聯的關係是一種 鏈狀的結構 </p><p class="fz28" data-v-758206d3>1. 只要是 物件 就有 __proto__</p><p class="fz28" data-v-758206d3> 2. 只要是 原型對象 裡面就有 constructor 指向 創造我的 構造函數 </p><br data-v-758206d3><br data-v-758206d3><p class="fz28 cor36" data-v-758206d3>原型鏈 查找規則</p><p class="fz28" data-v-758206d3> 1. 當訪問一個物件的屬性&amp;方法 , 先找 物件自身 有沒有 該屬性 </p><p class="fz28" data-v-758206d3> 2. 沒有 . . &gt; 找 它的 原型 ( __proto__ 指向的 prototype 原型對象 ) </p><p class="fz28" data-v-758206d3> 3. 沒有 . . &gt; 找 原型對象的原型 ( Object 的原型對象 ) </p><p class="fz28" data-v-758206d3>4. 依此類推 一直找到 Object 為止 ( null )</p><br data-v-758206d3><br data-v-758206d3><p class="fz28" data-v-758206d3> : 首先任何物件都會有屬於它的隱藏屬性下滑線proto屬性, 這個隱藏屬性就會指向它的構造函數的prototype, 這時我們就可以說這個物件的原型就是它的構造函數的prototype, 這就是原型, 然後原型鏈就是比如A的原型是B, B的原型是C, 這樣一條像鏈式的就稱為原型鏈 </p><br data-v-758206d3><p class="fz28" data-v-758206d3> :定義一個物件A,它的原型的地址對應著object.prototype,object.prototype它的原型又會到了null 這樣一條像鏈式的就稱為原型鏈 </p><br data-v-758206d3><p class="fz28 cor36" data-v-758206d3>instanceof</p><p class="fz28" data-v-758206d3> 可用 instanceof 檢測構造函數的 prototype 屬性是否出現在某個實例對象的原型鏈上 </p><p class="fz28" data-v-758206d3>他 屬不屬於 另外一個 構造函數</p><div class="bgcVS" data-v-758206d3><div data-v-758206d3><span class="function" data-v-758206d3>function </span><span class="word" data-v-758206d3>Person</span><span class="brackets" data-v-758206d3>(){}</span></div><div data-v-758206d3><span class="function" data-v-758206d3>const </span> <span class="word" data-v-758206d3>p</span><span class="then" data-v-758206d3>=</span> <span class="then" data-v-758206d3>new </span><span class="word" data-v-758206d3>Person</span> <span class="brackets" data-v-758206d3>()</span></div><div data-v-758206d3><span class="word" data-v-758206d3>console.</span><span class="variable" data-v-758206d3>log</span> <span class="brackets" data-v-758206d3>(</span><span class="word" data-v-758206d3>p</span> <span class="word" data-v-758206d3>instanceof </span><span class="brackets" data-v-758206d3>Person</span><span class="brackets" data-v-758206d3>) </span><span class="comment" data-v-758206d3>// true</span></div><div data-v-758206d3><span class="word" data-v-758206d3>console.</span><span class="variable" data-v-758206d3>log</span> <span class="brackets" data-v-758206d3>(</span><span class="word" data-v-758206d3>p</span> <span class="word" data-v-758206d3>instanceof </span><span class="brackets" data-v-758206d3>Object</span><span class="brackets" data-v-758206d3>) </span><span class="comment" data-v-758206d3>// true</span></div><div data-v-758206d3><span class="word" data-v-758206d3>console.</span><span class="variable" data-v-758206d3>log</span> <span class="brackets" data-v-758206d3>(</span><span class="word" data-v-758206d3>p </span> <span class="word" data-v-758206d3>instanceof </span><span class="brackets" data-v-758206d3>Array</span><span class="brackets" data-v-758206d3>) </span><span class="comment" data-v-758206d3>// false</span></div><div data-v-758206d3><span class="word" data-v-758206d3>console.</span><span class="variable" data-v-758206d3>log</span> <span class="brackets" data-v-758206d3>(</span><span class="brackets" data-v-758206d3>Array </span><span class="word" data-v-758206d3>instanceof </span><span class="brackets" data-v-758206d3>Object</span><span class="brackets" data-v-758206d3>)</span><span class="comment" data-v-758206d3>//true</span></div><br data-v-758206d3><p data-v-758206d3>萬物皆物件</p></div><div id="threeprototype007" class="articleCardTitle cor36 fz34" data-v-758206d3> 6.7 class </div><div class="bgcVS" data-v-758206d3><p data-v-758206d3>過去, 函數有兩種調用方法</p><br data-v-758206d3><div data-v-758206d3><span class="function" data-v-758206d3>function </span><span class="word" data-v-758206d3>A</span> <span class="brackets" data-v-758206d3>(){}</span></div><div data-v-758206d3><span class="word" data-v-758206d3>A</span> <span class="brackets" data-v-758206d3>()</span><span class="comment" data-v-758206d3>//直接調用</span></div><div data-v-758206d3><span class="then" data-v-758206d3>new </span> <span class="word" data-v-758206d3>A</span><span class="brackets" data-v-758206d3>()</span><span class="comment" data-v-758206d3>//做為構造函數調用</span></div><br data-v-758206d3><p data-v-758206d3>這種做法無法從定義上明確函數用途 , ES6 構造函數</p><br data-v-758206d3><div data-v-758206d3><span class="comment" data-v-758206d3>//舊的寫法</span></div><div data-v-758206d3><span class="function" data-v-758206d3>function </span><span class="word" data-v-758206d3>User</span> <span class="brackets" data-v-758206d3>(</span><span class="word" data-v-758206d3>firstName,lastName</span><span class="brackets" data-v-758206d3>){</span></div><div class="padTwo VSL" data-v-758206d3><span class="then" data-v-758206d3>this</span><span class="word" data-v-758206d3>.firstName</span> <span class="then" data-v-758206d3>=</span><span class="word" data-v-758206d3>firstName;</span><div data-v-758206d3><span class="then" data-v-758206d3>this</span><span class="word" data-v-758206d3>.lastName</span> <span class="then" data-v-758206d3>=</span><span class="word" data-v-758206d3>lastName;</span></div><div data-v-758206d3><span class="then" data-v-758206d3>this</span><span class="word" data-v-758206d3>.fullName</span> <span class="then" data-v-758206d3>=</span><span class="src" data-v-758206d3>`${</span><span class="word" data-v-758206d3>firstName</span><span class="src" data-v-758206d3>} ${</span><span class="word" data-v-758206d3>lastName</span> <span class="src" data-v-758206d3>}`</span></div><div data-v-758206d3></div></div><div data-v-758206d3><span class="brackets" data-v-758206d3>}</span></div><div data-v-758206d3><span class="comment" data-v-758206d3>//靜態方法</span></div><div data-v-758206d3><span class="word" data-v-758206d3>User.isUser</span> <span class="then" data-v-758206d3>=</span><span class="function" data-v-758206d3>function </span><span class="brackets" data-v-758206d3>(</span> <span class="word" data-v-758206d3>u</span><span class="brackets" data-v-758206d3>){</span></div><div class="padTwo VSL" data-v-758206d3><span class="then" data-v-758206d3>return !! </span> <span class="word" data-v-758206d3>u </span><span class="then" data-v-758206d3>&amp;&amp; !! </span><span class="word" data-v-758206d3>u.fullName</span><div data-v-758206d3></div></div><div data-v-758206d3><span class="brackets" data-v-758206d3>}</span></div><div data-v-758206d3><span class="comment" data-v-758206d3>//調用靜態方法</span></div><div data-v-758206d3><span class="word" data-v-758206d3>User.isUser</span><span class="brackets" data-v-758206d3>(</span> <span class="word" data-v-758206d3>xxx</span><span class="brackets" data-v-758206d3>)</span></div><div data-v-758206d3><span class="comment" data-v-758206d3>//原型方法 (也叫 實例方法)</span></div><div data-v-758206d3><span class="word" data-v-758206d3>User.prototype.sayHi</span><span class="then" data-v-758206d3>=</span><span class="function" data-v-758206d3>function </span><span class="brackets" data-v-758206d3>(){</span></div><div class="padTwo VSL" data-v-758206d3><span class="word" data-v-758206d3>console</span><span class="variable" data-v-758206d3>.log</span><span class="brackets" data-v-758206d3>(</span> <span class="src" data-v-758206d3>`Hi, </span><span class="then" data-v-758206d3>${</span> <span class="then" data-v-758206d3>this</span><span class="word" data-v-758206d3>.fullName</span> <span class="src" data-v-758206d3>}`</span><span class="word" data-v-758206d3></span> <span class="brackets" data-v-758206d3>)</span><div data-v-758206d3></div></div><div data-v-758206d3><span class="brackets" data-v-758206d3>}</span></div><div data-v-758206d3><span class="comment" data-v-758206d3>//調用原型方法 (實例方法)</span></div><div data-v-758206d3><span class="function" data-v-758206d3>const </span> <span class="word" data-v-758206d3>u</span><span class="then" data-v-758206d3>=</span> <span class="then" data-v-758206d3>new </span><span class="word" data-v-758206d3>User</span> <span class="brackets" data-v-758206d3>()</span></div><div data-v-758206d3><span class="word" data-v-758206d3>u.sayHi</span> <span class="brackets" data-v-758206d3>()</span></div><br data-v-758206d3><br data-v-758206d3><p data-v-758206d3>es6 之後建議寫法 class 效果一樣</p><br data-v-758206d3><div data-v-758206d3><span class="function" data-v-758206d3>class </span><span class="word" data-v-758206d3>User</span> <span class="brackets" data-v-758206d3>{</span></div><div class="padTwo VSL" data-v-758206d3><div data-v-758206d3><span class="comment" data-v-758206d3>//constructor表示他的構造器</span></div><span class="function" data-v-758206d3>constructor</span><span class="brackets" data-v-758206d3>(</span><span class="word" data-v-758206d3>firstName,lastName</span><span class="brackets" data-v-758206d3>){</span><div data-v-758206d3></div><div class="padTwo VSL" data-v-758206d3><span class="then" data-v-758206d3>this</span><span class="word" data-v-758206d3>.firstName</span><span class="then" data-v-758206d3>=</span> <span class="word" data-v-758206d3>firstName;</span><div data-v-758206d3><span class="then" data-v-758206d3>this</span><span class="word" data-v-758206d3>.lastName</span><span class="then" data-v-758206d3>=</span><span class="word" data-v-758206d3>lastName;</span></div><div data-v-758206d3><span class="then" data-v-758206d3>this</span><span class="word" data-v-758206d3>.fullName</span><span class="then" data-v-758206d3>=</span> <span class="src" data-v-758206d3>`${ </span><span class="word" data-v-758206d3>firstName </span><span class="src" data-v-758206d3>} ${</span><span class="word" data-v-758206d3>lastName </span><span class="src" data-v-758206d3>}`;</span></div><div data-v-758206d3></div></div><div data-v-758206d3><span class="brackets" data-v-758206d3>}</span></div><div data-v-758206d3><span class="comment" data-v-758206d3>//通過關鍵字static表示靜態方法</span></div><div data-v-758206d3><span class="word" data-v-758206d3>static</span><span class="word" data-v-758206d3>isUser</span><span class="brackets" data-v-758206d3>(</span> <span class="word" data-v-758206d3>u</span><span class="brackets" data-v-758206d3>){</span></div><div class="padTwo VSL" data-v-758206d3><span class="then" data-v-758206d3>return !!</span><span class="word" data-v-758206d3>u </span> <span class="then" data-v-758206d3>&amp;&amp; !!</span><span class="word" data-v-758206d3>u.fullName</span><div data-v-758206d3></div></div><div data-v-758206d3><span class="brackets" data-v-758206d3>}</span></div><div data-v-758206d3><span class="word" data-v-758206d3>sayHi</span><span class="brackets" data-v-758206d3>(){</span></div><div class="padTwo VSL" data-v-758206d3><span class="word" data-v-758206d3>console</span><span class="variable" data-v-758206d3>.log</span><span class="brackets" data-v-758206d3>(</span> <span class="src" data-v-758206d3>`Hi, </span><span class="then" data-v-758206d3>${</span> <span class="then" data-v-758206d3>this</span><span class="word" data-v-758206d3>.fullName</span> <span class="src" data-v-758206d3>}`</span><span class="word" data-v-758206d3></span> <span class="brackets" data-v-758206d3>)</span><div data-v-758206d3></div></div><div data-v-758206d3><span class="brackets" data-v-758206d3>}</span></div></div><div data-v-758206d3><span class="brackets" data-v-758206d3>}</span></div><br data-v-758206d3><br data-v-758206d3><p data-v-758206d3>範例2 繼承</p><br data-v-758206d3><div data-v-758206d3><span class="function" data-v-758206d3>function </span><span class="word" data-v-758206d3>Animal</span> <span class="brackets" data-v-758206d3>(</span><span class="word" data-v-758206d3>type,name</span><span class="brackets" data-v-758206d3>){</span></div><div class="padTwo VSL" data-v-758206d3><span class="then" data-v-758206d3>this</span> <span class="word" data-v-758206d3>.type</span><span class="then" data-v-758206d3>=</span> <span class="word" data-v-758206d3>type;</span><div data-v-758206d3><span class="then" data-v-758206d3>this</span> <span class="word" data-v-758206d3>.name</span><span class="then" data-v-758206d3>=</span> <span class="word" data-v-758206d3>name;</span></div><div data-v-758206d3></div></div><div data-v-758206d3><span class="brackets" data-v-758206d3>}</span></div><br data-v-758206d3><div data-v-758206d3><span class="word" data-v-758206d3>Animal.prototype.intro</span><span class="then" data-v-758206d3>=</span><span class="function" data-v-758206d3>function </span><span class="brackets" data-v-758206d3>(){</span></div><div class="padTwo VSL" data-v-758206d3><span class="word" data-v-758206d3>console</span><span class="variable" data-v-758206d3>.log</span><span class="brackets" data-v-758206d3>(</span> <span class="src" data-v-758206d3>`I am ${</span><span class="then" data-v-758206d3>this</span> <span class="word" data-v-758206d3>.type</span><span class="src" data-v-758206d3>},name: ${</span><span class="then" data-v-758206d3>this</span> <span class="word" data-v-758206d3>.name</span><span class="src" data-v-758206d3>)`</span> <span class="brackets" data-v-758206d3>)</span><div data-v-758206d3></div></div><div data-v-758206d3><span class="brackets" data-v-758206d3>}</span></div><br data-v-758206d3><div data-v-758206d3><span class="function" data-v-758206d3>function </span><span class="word" data-v-758206d3>Human</span> <span class="brackets" data-v-758206d3>(</span><span class="word" data-v-758206d3>name</span> <span class="brackets" data-v-758206d3>){</span></div><div class="padTwo VSL" data-v-758206d3><span class="word" data-v-758206d3>Animal</span><span class="variable" data-v-758206d3>.call</span><span class="brackets" data-v-758206d3>(</span> <span class="then" data-v-758206d3>this</span><span class="then" data-v-758206d3>,</span> <span class="word" data-v-758206d3>&quot;人&quot;,</span><span class="word" data-v-758206d3>name</span> <span class="brackets" data-v-758206d3>);</span><div data-v-758206d3></div></div><div data-v-758206d3><span class="brackets" data-v-758206d3>}</span></div><br data-v-758206d3><div data-v-758206d3><span class="comment" data-v-758206d3>//設置繼承關係</span></div><div data-v-758206d3><span class="word" data-v-758206d3>Human.prototype</span><span class="then" data-v-758206d3>=</span> <span class="brackets" data-v-758206d3>Object</span><span class="word" data-v-758206d3>.create</span> <span class="brackets" data-v-758206d3>(</span><span class="word" data-v-758206d3>Animal.prototype</span><span class="brackets" data-v-758206d3>);</span></div><br data-v-758206d3><div data-v-758206d3><span class="comment" data-v-758206d3>//新的方式 //繼承 子構造函數 &amp; 父構造函數</span></div><div data-v-758206d3><span class="function" data-v-758206d3>class </span><span class="word" data-v-758206d3>Animal</span> <span class="brackets" data-v-758206d3>{ </span><span class="comment" data-v-758206d3>//父類</span></div><div class="padTwo VSL" data-v-758206d3><span class="function" data-v-758206d3>constructor</span><span class="brackets" data-v-758206d3>(</span><span class="word" data-v-758206d3>type,name</span><span class="brackets" data-v-758206d3>){</span><div data-v-758206d3></div><div class="padTwo VSL" data-v-758206d3><span class="then" data-v-758206d3>this</span> <span class="word" data-v-758206d3>.type</span><span class="then" data-v-758206d3>=</span> <span class="word" data-v-758206d3>type;</span><div data-v-758206d3><span class="then" data-v-758206d3>this</span><span class="word" data-v-758206d3>.name</span> <span class="then" data-v-758206d3>=</span><span class="word" data-v-758206d3>name;</span></div><div data-v-758206d3></div></div><div data-v-758206d3><span class="brackets" data-v-758206d3>}</span></div><br data-v-758206d3><div data-v-758206d3><span class="word" data-v-758206d3>intro</span><span class="brackets" data-v-758206d3>(){</span></div><div class="padTwo VSL" data-v-758206d3><span class="word" data-v-758206d3>console</span><span class="variable" data-v-758206d3>.log</span><span class="brackets" data-v-758206d3>(</span><span class="src" data-v-758206d3>`I am ${</span><span class="then" data-v-758206d3>this</span> <span class="word" data-v-758206d3>.type</span><span class="src" data-v-758206d3>},name: ${</span><span class="then" data-v-758206d3>this</span> <span class="word" data-v-758206d3>.name</span><span class="src" data-v-758206d3>)`</span> <span class="brackets" data-v-758206d3>)</span><div data-v-758206d3></div></div><div data-v-758206d3><span class="brackets" data-v-758206d3>}</span></div></div><div data-v-758206d3><span class="brackets" data-v-758206d3>}</span></div><br data-v-758206d3><div data-v-758206d3><span class="function" data-v-758206d3>class </span><span class="word" data-v-758206d3>Human </span><span class="function" data-v-758206d3>extends </span><span class="word" data-v-758206d3>Animal</span> <span class="brackets" data-v-758206d3>{ </span><span class="comment" data-v-758206d3>//extends 子類 去繼承 父類</span></div><div class="padTwo VSL" data-v-758206d3><span class="function" data-v-758206d3>constructor</span><span class="brackets" data-v-758206d3>(</span> <span class="word" data-v-758206d3>name</span><span class="brackets" data-v-758206d3>){</span><div data-v-758206d3></div><div class="padTwo VSL" data-v-758206d3><span class="function" data-v-758206d3>super </span><span class="brackets" data-v-758206d3>(</span> <span class="src" data-v-758206d3>&quot;人&quot;</span><span class="then" data-v-758206d3>,</span> <span class="word" data-v-758206d3>name</span><span class="brackets" data-v-758206d3>);</span><div data-v-758206d3></div></div><div data-v-758206d3><span class="brackets" data-v-758206d3>}</span></div></div><div data-v-758206d3><span class="brackets" data-v-758206d3>}</span></div></div><div id="threeprototype008" class="articleCardTitle cor36 fz34" data-v-758206d3> 6.8 繼承總結 </div><p class="fz28" data-v-758206d3>原型鏈繼承</p><p class="fz28" data-v-758206d3>構造函數繼承</p><p class="fz28" data-v-758206d3>組合繼承</p><p class="fz28" data-v-758206d3>寄生組合繼承</p><br data-v-758206d3><br data-v-758206d3><div class="bgcVS" data-v-758206d3><p class="cor36" data-v-758206d3>原型鏈</p><div data-v-758206d3><span class="function" data-v-758206d3>function </span><span class="word" data-v-758206d3>Person</span> <span class="brackets" data-v-758206d3>(</span><span class="word" data-v-758206d3>name</span> <span class="brackets" data-v-758206d3>){</span></div><div class="padTwo VSL" data-v-758206d3><span class="then" data-v-758206d3>this</span> <span class="word" data-v-758206d3>.name</span><span class="then" data-v-758206d3>=</span> <span class="word" data-v-758206d3>name</span><div data-v-758206d3></div></div><div data-v-758206d3><span class="brackets" data-v-758206d3>}</span></div><br data-v-758206d3><div data-v-758206d3><span class="word" data-v-758206d3>Person</span><span class="variable" data-v-758206d3>.prototype.sayHi</span><span class="then" data-v-758206d3>=</span><span class="function" data-v-758206d3>function </span><span class="brackets" data-v-758206d3>(){</span></div><div class="padTwo VSL" data-v-758206d3><span class="word" data-v-758206d3>console</span><span class="variable" data-v-758206d3>.log</span><span class="brackets" data-v-758206d3>(</span> <span class="word" data-v-758206d3>&quot;Hi,</span><span class="word" data-v-758206d3>my</span> <span class="word" data-v-758206d3>name</span><span class="word" data-v-758206d3>is &quot;</span> <span class="then" data-v-758206d3>+</span><span class="then" data-v-758206d3>this</span> <span class="word" data-v-758206d3>.name</span><span class="brackets" data-v-758206d3>)</span><div data-v-758206d3></div></div><div data-v-758206d3><span class="brackets" data-v-758206d3>}</span></div><br data-v-758206d3><div data-v-758206d3><span class="function" data-v-758206d3>let </span><span class="word" data-v-758206d3>person1</span><span class="then" data-v-758206d3>= new </span> <span class="word" data-v-758206d3>Person</span><span class="brackets" data-v-758206d3>(</span> <span class="src" data-v-758206d3>&quot;wayne&quot;</span><span class="brackets" data-v-758206d3>)</span></div><div data-v-758206d3><span class="function" data-v-758206d3>let </span><span class="word" data-v-758206d3>person2</span><span class="then" data-v-758206d3>= new </span> <span class="word" data-v-758206d3>Person</span><span class="brackets" data-v-758206d3>(</span> <span class="src" data-v-758206d3>&quot;jack&quot;</span><span class="brackets" data-v-758206d3>)</span></div><br data-v-758206d3><div data-v-758206d3><span class="word" data-v-758206d3>person1</span><span class="word" data-v-758206d3>.sayHi</span> <span class="brackets" data-v-758206d3>()</span><span class="comment" data-v-758206d3>//&quot;Hi,my name is wayne&quot;</span></div><div data-v-758206d3><span class="word" data-v-758206d3>person2</span><span class="word" data-v-758206d3>.sayHi</span> <span class="brackets" data-v-758206d3>()</span><span class="comment" data-v-758206d3>//&quot;Hi,my name is jack&quot;</span></div><p data-v-758206d3>有一個構造函數 Person</p><p data-v-758206d3>這 構造函數上 有 prototype 屬性</p><p data-v-758206d3>屬性上 添加 sayHi 方法</p><p data-v-758206d3>通過 Person() 這個構造函數 new 出來 兩個 實例</p><p data-v-758206d3>在 構造函數 Person() 內部 沒定義 方法</p><p data-v-758206d3>但 可以調用 person1 的 satHi 方法</p><p data-v-758206d3>這就是原型鏈作用</p><p data-v-758206d3>當我們 通過 new 創建 person1 物件時</p><p data-v-758206d3>persno1 物件本身 沒 sayHi() 方法</p><p data-v-758206d3>當調用他的 sayHi() 方法時</p><p data-v-758206d3>他會先在 物件本身 找</p><p data-v-758206d3> 沒有的話 會在 person1 的 構造函數 Person() 的 prototype 上尋找 sayHi() 方法 </p><p data-v-758206d3>小結:</p><p data-v-758206d3>構造函數的 prototype 屬性的作用</p><p data-v-758206d3>是當 實例對象 調用某個 方法or屬性時</p><p data-v-758206d3>如果在 實例對象本身上 找不到</p><p data-v-758206d3>就會去 他的 構造函數的 prototype 身上找</p><p data-v-758206d3>總結:</p><p data-v-758206d3>每個構造函數都有一個原型對象 prototype</p><p data-v-758206d3>每個實例對象 包含一個 指向 原型對象的指針 __proto__</p><p data-v-758206d3>每當代碼讀取 實例的 某屬性時</p><p data-v-758206d3>會先在 實例上搜索這個屬性</p><p data-v-758206d3>沒找到則 搜索 原型對象</p><br data-v-758206d3><br data-v-758206d3><p class="cor36" data-v-758206d3>原型鏈繼承</p><div data-v-758206d3><span class="comment" data-v-758206d3>//定義父類</span></div><div data-v-758206d3><span class="function" data-v-758206d3>function </span><span class="word" data-v-758206d3>Parent</span> <span class="brackets" data-v-758206d3>(){</span></div><div class="padTwo VSL" data-v-758206d3><span class="then" data-v-758206d3>this</span> <span class="word" data-v-758206d3>.name</span><span class="then" data-v-758206d3>=</span> <span class="src" data-v-758206d3>&quot;parent&quot;</span><div data-v-758206d3></div></div><div data-v-758206d3><span class="brackets" data-v-758206d3>}</span></div><br data-v-758206d3><div data-v-758206d3><span class="comment" data-v-758206d3>//在父類的原型上定義方法</span></div><div data-v-758206d3><span class="word" data-v-758206d3>Parent</span><span class="variable" data-v-758206d3>.prototype.getName</span><span class="then" data-v-758206d3>=</span><span class="function" data-v-758206d3>function </span><span class="brackets" data-v-758206d3>(){</span></div><div class="padTwo VSL" data-v-758206d3><span class="then" data-v-758206d3>return </span> <span class="then" data-v-758206d3>this</span><span class="word" data-v-758206d3>.name</span><div data-v-758206d3></div></div><div data-v-758206d3><span class="brackets" data-v-758206d3>}</span></div><br data-v-758206d3><div data-v-758206d3><span class="comment" data-v-758206d3>//定義子類</span></div><div data-v-758206d3><span class="function" data-v-758206d3>function </span><span class="word" data-v-758206d3>Cild</span> <span class="brackets" data-v-758206d3>(){</span></div><div class="padTwo VSL" data-v-758206d3><span class="then" data-v-758206d3>this</span> <span class="word" data-v-758206d3>.name</span><span class="then" data-v-758206d3>=</span> <span class="src" data-v-758206d3>&quot;child&quot;</span><div data-v-758206d3></div></div><div data-v-758206d3><span class="brackets" data-v-758206d3>}</span></div><br data-v-758206d3><div data-v-758206d3><span class="comment" data-v-758206d3>//關鍵-&gt;子類繼承父類,實現原型鏈繼承</span></div><div data-v-758206d3><span class="word" data-v-758206d3>Child</span><span class="variable" data-v-758206d3>.prototype</span><span class="then" data-v-758206d3>= new </span> <span class="word" data-v-758206d3>Parent</span><span class="brackets" data-v-758206d3>()</span></div><br data-v-758206d3><div data-v-758206d3><span class="comment" data-v-758206d3>//實例化子類</span></div><div data-v-758206d3><span class="function" data-v-758206d3>let </span><span class="word" data-v-758206d3>child</span> <span class="then" data-v-758206d3>= new </span><span class="word" data-v-758206d3>Child</span> <span class="brackets" data-v-758206d3>()</span></div><br data-v-758206d3><div data-v-758206d3><span class="comment" data-v-758206d3>//測試</span></div><div data-v-758206d3><span class="word" data-v-758206d3>console</span><span class="variable" data-v-758206d3>.log</span><span class="brackets" data-v-758206d3>(</span> <span class="word" data-v-758206d3>child1</span><span class="variable" data-v-758206d3>.getName</span><span class="brackets" data-v-758206d3>())</span></div><p data-v-758206d3>child1 是透過 Child 構造函數 實例化 對象</p><p data-v-758206d3>當調用 child1 getName() 方法</p><p data-v-758206d3></p><p data-v-758206d3></p><p data-v-758206d3></p><p data-v-758206d3></p><p data-v-758206d3></p><p data-v-758206d3></p><p data-v-758206d3></p><p data-v-758206d3></p><p data-v-758206d3></p><p data-v-758206d3></p><p data-v-758206d3></p><p data-v-758206d3></p><p data-v-758206d3></p><p data-v-758206d3></p><p data-v-758206d3></p><p data-v-758206d3></p><p data-v-758206d3></p><p data-v-758206d3></p><p data-v-758206d3></p><p data-v-758206d3></p><p data-v-758206d3></p><p data-v-758206d3></p><p data-v-758206d3></p><p data-v-758206d3></p><p data-v-758206d3></p><p data-v-758206d3></p><p data-v-758206d3></p><p data-v-758206d3></p><p data-v-758206d3></p><p data-v-758206d3></p></div><p class="fz28" data-v-758206d3></p><p class="fz28" data-v-758206d3></p><p class="fz28" data-v-758206d3></p><p class="fz28" data-v-758206d3></p><p class="fz28" data-v-758206d3></p><p class="fz28" data-v-758206d3></p><p class="fz28" data-v-758206d3></p><p class="fz28" data-v-758206d3></p><p class="fz28" data-v-758206d3></p><p class="fz28" data-v-758206d3></p><p class="fz28" data-v-758206d3></p><p class="fz28" data-v-758206d3></p><p class="fz28" data-v-758206d3></p><p class="fz28" data-v-758206d3></p><p class="fz28" data-v-758206d3></p><p class="fz28" data-v-758206d3></p><p class="fz28" data-v-758206d3></p><p class="fz28" data-v-758206d3></p><p class="fz28" data-v-758206d3></p><p class="fz28" data-v-758206d3></p><p class="fz28" data-v-758206d3></p><p class="fz28" data-v-758206d3></p><p class="fz28" data-v-758206d3></p><p class="fz28" data-v-758206d3></p><p class="fz28" data-v-758206d3></p><p class="fz28" data-v-758206d3></p><p class="fz28" data-v-758206d3></p><p class="fz28" data-v-758206d3></p><p class="fz28" data-v-758206d3></p><p class="fz28" data-v-758206d3></p><p class="fz28" data-v-758206d3></p><p class="fz28" data-v-758206d3></p><p class="fz28" data-v-758206d3></p><p class="fz28" data-v-758206d3></p><p class="fz28" data-v-758206d3></p><p class="fz28" data-v-758206d3></p><p class="fz28" data-v-758206d3></p><p class="fz28" data-v-758206d3></p><p class="fz28" data-v-758206d3></p><p class="fz28" data-v-758206d3></p><p class="fz28" data-v-758206d3></p><p class="fz28" data-v-758206d3></p><p class="fz28" data-v-758206d3></p><p class="fz28" data-v-758206d3></p><p class="fz28" data-v-758206d3></p><p class="fz28" data-v-758206d3></p><p class="fz28" data-v-758206d3></p><p class="fz28" data-v-758206d3></p><p class="fz28" data-v-758206d3></p><p class="fz28" data-v-758206d3></p><p class="fz28" data-v-758206d3></p><p class="fz28" data-v-758206d3></p><p class="fz28" data-v-758206d3></p><p class="fz28" data-v-758206d3></p><p class="fz28" data-v-758206d3></p><p class="fz28" data-v-758206d3></p><p class="fz28" data-v-758206d3></p><p class="fz28" data-v-758206d3></p><p class="fz28" data-v-758206d3></p><p class="fz28" data-v-758206d3></p><p class="fz28" data-v-758206d3></p><p class="fz28" data-v-758206d3></p><p class="fz28" data-v-758206d3></p><p class="fz28" data-v-758206d3></p><p class="fz28" data-v-758206d3></p><p class="fz28" data-v-758206d3></p><p class="fz28" data-v-758206d3></p><p class="fz28" data-v-758206d3></p><p class="fz28" data-v-758206d3></p><p class="fz28" data-v-758206d3></p><p class="fz28" data-v-758206d3></p><p class="fz28" data-v-758206d3></p><p class="fz28" data-v-758206d3></p><p class="fz28" data-v-758206d3></p><p class="fz28" data-v-758206d3></p><p class="fz28" data-v-758206d3></p><p class="fz28" data-v-758206d3></p><p class="fz28" data-v-758206d3></p><p class="fz28" data-v-758206d3></p><p class="fz28" data-v-758206d3></p><p class="fz28" data-v-758206d3></p><p class="fz28" data-v-758206d3></p></div></div></div>',1),L=i(()=>a("div",{class:"toTopButton"},[a("div",{class:"disCen"},"___"),a("div",{class:"disCen"},"▲")],-1)),q=[L],N=i(()=>a("div",{class:"toBotButton"},[a("div",{class:"disCen"},"▼"),a("div",{class:"disCen"},"￣")],-1)),j=[N],C={__name:"JsPageThreeSix",setup(n){const p=f(!1);window.addEventListener("scroll",function(){p.value=window.scrollY>0});function b(){window.scrollTo({top:0,left:0,behavior:"smooth"})}function w(){window.scrollTo({top:999999,left:0,behavior:"smooth"})}function d(v){window.scrollTo({top:document.getElementById(`${v}`).offsetTop,behavior:"smooth"})}return(v,s)=>(m(),k(u,null,[a("section",null,[a("div",T,[a("div",g,[a("div",S,[a("div",{onClick:s[0]||(s[0]=t=>d("threeprototype001")),class:"leftNavText"}," 物件導向 "),a("div",{onClick:s[1]||(s[1]=t=>d("threeprototype002")),class:"leftNavText"}," 構造函數 "),a("div",{onClick:s[2]||(s[2]=t=>d("threeprototype003")),class:"leftNavText"}," constructor "),a("div",{onClick:s[3]||(s[3]=t=>d("threeprototype004")),class:"leftNavText"}," 對象原型 "),a("div",{onClick:s[4]||(s[4]=t=>d("threeprototype005")),class:"leftNavText"}," 原型繼承 "),a("div",{onClick:s[5]||(s[5]=t=>d("threeprototype006")),class:"leftNavText"}," 原型鏈 "),a("div",{onClick:s[6]||(s[6]=t=>d("threeprototype007")),class:"leftNavText"}," class "),a("div",{onClick:s[7]||(s[7]=t=>d("threeprototype008")),class:"leftNavText"}," 繼承總結 ")])])]),V]),a("div",null,[c(o(e,{name:"fade",tag:"div"},{default:r(()=>[a("div",{onClick:b,class:"toTop"},q)]),_:1},512),[[l,p.value]]),c(o(e,{name:"fade",tag:"div"},{default:r(()=>[a("div",{onClick:w,class:"toBot"},j)]),_:1},512),[[l,p.value]])])],64))}},M=_(C,[["__scopeId","data-v-758206d3"]]);export{M as default};
