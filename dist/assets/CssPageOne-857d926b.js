import{e as w,r as g,o as k,c as m,a,b as p,w as f,i as T,h as c,v as r,T as i,F as S,f as l,p as C,d as x}from"./index-2e4f8d1f.js";import{_ as O}from"./_plugin-vue_export-helper-c27b6911.js";const F="/vue-learn-js/assets/cssbox001-91b4c462.png",e=t=>(C("data-v-ebd4f92b"),t=t(),x(),t),q={class:"leftNav"},y={class:"leftNavContainer"},N={class:"leftNavLayout"},_=e(()=>a("br",null,null,-1)),$={class:"Main"},B={class:"mainContainer"},V={class:"mainLayout"},I=l('<br data-v-ebd4f92b><br data-v-ebd4f92b><p class="cor36" data-v-ebd4f92b>CSS3有哪些新屬性?</p><p data-v-ebd4f92b>flex transform translation animation 陰影 圓角</p><br data-v-ebd4f92b><br data-v-ebd4f92b><div id="cssOne001" class="articleCardTitle cor36" data-v-ebd4f92b> [ CSS ] ≫ CSS有幾個單位px,rem,em,vw分別是怎樣? </div><p data-v-ebd4f92b>px是一個像素 . . . 絕對單位長度</p><br data-v-ebd4f92b><br data-v-ebd4f92b><p class="pFou" data-v-ebd4f92b>像素 是 顯示器上 給我們呈現畫面的 像素</p><br data-v-ebd4f92b><p data-v-ebd4f92b>rem是 相對 根元素 (html) 字體大小進行計算的 . . . 相對單位</p><br data-v-ebd4f92b><p class="pFou" data-v-ebd4f92b>瀏覽器 默認字體大小 16px , 一般 1 rem = 16 px</p><br data-v-ebd4f92b><br data-v-ebd4f92b><p data-v-ebd4f92b>em 相對 當前元素 字體大小 來計算</p><br data-v-ebd4f92b><p class="pFou" data-v-ebd4f92b>有人說 相對於 父元素</p><br data-v-ebd4f92b><p class="pFou" data-v-ebd4f92b>因為 font-size 這屬性 可以被繼承</p><br data-v-ebd4f92b><p class="pFou" data-v-ebd4f92b>所以 父元素 字體大小 會影響 子元素 字體大小</p><br data-v-ebd4f92b><p class="pFou" data-v-ebd4f92b>子元素 如果沒有 自己的 font-size</p><br data-v-ebd4f92b><p class="pFou" data-v-ebd4f92b>那子元素的 font-size 會繼承 父元素</p><br data-v-ebd4f92b><p class="pFou" data-v-ebd4f92b>此時 1 em 就會被認為 相對於 父元素 字體大小計算</p><br data-v-ebd4f92b><br data-v-ebd4f92b><p data-v-ebd4f92b>vw相對於設備視口的寬度</p><br data-v-ebd4f92b><br data-v-ebd4f92b><p class="cor36" data-v-ebd4f92b># 像素是絕對的單位嗎?</p><p data-v-ebd4f92b>像素是由操作系統和硬件決定的</p><br data-v-ebd4f92b><p data-v-ebd4f92b>一般來說硬件的象素是改變不了的</p><br data-v-ebd4f92b><p data-v-ebd4f92b>但是操作系統可以說你這個硬件我 2 個象素做 1 個象素用</p><br data-v-ebd4f92b><br data-v-ebd4f92b><p class="cor36" data-v-ebd4f92b># vw的v</p><p data-v-ebd4f92b>viewport視口, 眼睛所能瀏覽到的區域</p><br data-v-ebd4f92b><p class="cor36" data-v-ebd4f92b># 視口是窗口嗎?</p><p data-v-ebd4f92b>不是,如果窗口裡面有一個內嵌窗口, 這個viewport會變成指內嵌窗口</p><br data-v-ebd4f92b><br data-v-ebd4f92b><div id="cssOne014" class="articleCardTitle cor36" data-v-ebd4f92b> [ CSS ] ≫ link &amp; @import </div><p data-v-ebd4f92b>都是引入外部 CSS 的方式</p><br data-v-ebd4f92b><br data-v-ebd4f92b><p data-v-ebd4f92b>1.</p><p data-v-ebd4f92b>link 是 HTML 提供的標籤</p><br data-v-ebd4f92b><p data-v-ebd4f92b> @import 是 CSS 提供語法 /p&gt; <br data-v-ebd4f92b><br data-v-ebd4f92b></p><p data-v-ebd4f92b>2.加載順</p><p data-v-ebd4f92b>加載頁面時 link 標籤引入 CSS 可同時加載</p><br data-v-ebd4f92b><p data-v-ebd4f92b>@import 只會在頁面加載完畢後 才被加載</p><br data-v-ebd4f92b><br data-v-ebd4f92b><p data-v-ebd4f92b>3.</p><p data-v-ebd4f92b>link 支持使用 JS 控制 DOM 去改變樣式 (插入link標籤)</p><br data-v-ebd4f92b><p data-v-ebd4f92b>@import 不支持</p><br data-v-ebd4f92b><br data-v-ebd4f92b><div id="cssOne002" class="articleCardTitle cor36" data-v-ebd4f92b> [ CSS ] ≫ position 的值和作用? </div><p data-v-ebd4f92b>static . relative . absolute . fixed</p><br data-v-ebd4f92b><p class="cor36" data-v-ebd4f92b>static</p><p class="pTwo" data-v-ebd4f92b> 它是文檔流布局, 有行內元素和塊元素, 塊元素有一行接一行這種, 行內元素就是橫著直到一行待不下就到第二行 </p><br data-v-ebd4f92b><p class="cor36" data-v-ebd4f92b>relative</p><p class="pTwo" data-v-ebd4f92b>元素仍在文檔流, 占用正常文檔流位置</p><p class="pTwo" data-v-ebd4f92b>relative 相對於 自身 進行定位</p><br data-v-ebd4f92b><p class="cor36" data-v-ebd4f92b>absolute</p><p class="pTwo" data-v-ebd4f92b>將元素偏離文檔流, 不占用正常文檔流位置</p><br data-v-ebd4f92b><p class="pTwo" data-v-ebd4f92b> 若沒有指定基準元素的話，預設以 body 元素(整個視窗)為基準 </p><p class="pTwo" data-v-ebd4f92b> absolute 元素的父元素 有 相對 或 絕對 定位 的元素的話 </p><p class="pTwo" data-v-ebd4f92b> absolute 元素相對於父元素 的 padding 左上角進行定位 </p><br data-v-ebd4f92b><p class="cor36" data-v-ebd4f92b>fixed</p><p class="pTwo" data-v-ebd4f92b>將元素偏離文檔流, 不占用正常文檔流位置</p><p class="pTwo" data-v-ebd4f92b>相對於 body 定位</p><br data-v-ebd4f92b><br data-v-ebd4f92b><p class="cor36" data-v-ebd4f92b>sticky</p><p class="pTwo" data-v-ebd4f92b> 和 fixed 很像，差在 sticky 會佔住原本版面的空間，和 sticky 的預設 width 是 100 % (滿版) </p><br data-v-ebd4f92b><p class="pTw" data-v-ebd4f92b> 被 fixed 的區塊會被固定在指定位置，並且覆蓋網頁中內容 </p><p class="pTw" data-v-ebd4f92b> 而 sticky 會讓原本網頁的內容推到下面，不會讓 sticky 擋住原有的文字。 </p><br data-v-ebd4f92b><br data-v-ebd4f92b><div id="cssOne012" class="articleCardTitle cor36" data-v-ebd4f92b> [ CSS ] ≫ display的值? </div><h3 data-v-ebd4f92b>none . 隱藏元素</h3><br data-v-ebd4f92b><br data-v-ebd4f92b><h3 data-v-ebd4f92b>block . 把某元素 轉成 塊元素</h3><br data-v-ebd4f92b><br data-v-ebd4f92b><h3 data-v-ebd4f92b>inline . 把某元素 轉成 內聯元素</h3><br data-v-ebd4f92b><br data-v-ebd4f92b><h3 data-v-ebd4f92b>inline-block . 把某元素 轉成 行內塊元素</h3><br data-v-ebd4f92b><br data-v-ebd4f92b><h3 data-v-ebd4f92b>flex . 彈性盒子</h3><br data-v-ebd4f92b><br data-v-ebd4f92b><h3 data-v-ebd4f92b></h3><br data-v-ebd4f92b><br data-v-ebd4f92b><h3 data-v-ebd4f92b>塊元素</h3><p data-v-ebd4f92b> ＜div&gt; . ＜p&gt; . ＜h1&gt; . ＜ul&gt; . ＜table&gt; 獨佔一行, 頁面中垂直排列, 可以設置寬高 和 內外邊距可控 </p><br data-v-ebd4f92b><h3 data-v-ebd4f92b>行內元素</h3><p data-v-ebd4f92b> ＜span&gt; . ＜a&gt; . ＜img&gt; . ＜input&gt; 默認同行排列, 寬高由內容決定, 不能設置寬高 </p><br data-v-ebd4f92b><h3 data-v-ebd4f92b>行內塊元素</h3><p data-v-ebd4f92b>display:inline-block 不獨佔一行, 可以設置寬高</p><br data-v-ebd4f92b><div id="cssOne003" class="articleCardTitle cor36" data-v-ebd4f92b> [ CSS ] ≫ 盒模型?區別? </div><p data-v-ebd4f92b>分為content-box和border-box</p><p data-v-ebd4f92b>區別在於width指定寬度不同</p><p data-v-ebd4f92b>content-box的寬度是內容的寬度</p><p data-v-ebd4f92b>border-box的寬度是內容寬度加上padding加上border</p><br data-v-ebd4f92b><br data-v-ebd4f92b><div class="disCen" data-v-ebd4f92b><img style="max-width:500px;" src="'+F+'" alt="" data-v-ebd4f92b></div><br data-v-ebd4f92b><br data-v-ebd4f92b><p class="cor36" data-v-ebd4f92b>#　一般用哪種?為什麼?</p><p data-v-ebd4f92b>border-box</p><p data-v-ebd4f92b> 因為你改變大小時,那個盒子總大小不會變 ; 子元素會繼承父元素寬度 content-box 寬度比你預想的要寬 用borderbox比較方便不用做額外計算 </p><br data-v-ebd4f92b><br data-v-ebd4f92b><p class="cor36" data-v-ebd4f92b> # *{box-sizing:border-box}偽元素會被影響到嗎?為什麼? </p><p data-v-ebd4f92b>不會, 因為*就選不到偽元素, *:before *:after</p><br data-v-ebd4f92b><br data-v-ebd4f92b><div id="cssOne004" class="articleCardTitle cor36" data-v-ebd4f92b> [ CSS ] ≫ BFC是什麼 </div><p data-v-ebd4f92b>塊級格式化上下文</p><p data-v-ebd4f92b>當前元素把他所有子元素包起來,不受外部影響</p><p data-v-ebd4f92b> 在一個BFC中，塊狀盒子與行盒（行盒由一行中所有的內聯元素所組成）都會垂直地沿著其父元素的邊框排列。 </p><br data-v-ebd4f92b><br data-v-ebd4f92b><p class="cor36" data-v-ebd4f92b># 為什麼要觸發BFC?</p><p data-v-ebd4f92b>阻止margin重叠 . 解决高度塌陷问题 . 消除浮動</p><br data-v-ebd4f92b><br data-v-ebd4f92b><p class="cor36" data-v-ebd4f92b># BFC怎麼觸發?</p><p data-v-ebd4f92b>overflow 的值非 visable . . . 一般用 overflow hidden</p><p data-v-ebd4f92b>display 的值為 inline-block</p><p data-v-ebd4f92b>position 的值為 absolute 或 fixed</p><p data-v-ebd4f92b>float 的值非 none</p><br data-v-ebd4f92b><br data-v-ebd4f92b><p class="cor36" data-v-ebd4f92b># margin外邊距重疊? or 外邊距合併?</p><p data-v-ebd4f92b> 塊級元素的上外邊距和下外邊距有時會合併（或折疊）為一個外邊距，其大小取其中的最大者。 </p><br data-v-ebd4f92b><p data-v-ebd4f92b> 假設一個div元素在上面，另一個div元素在下面，下面外邊距為20px，上面外邊距為30px，他們之間的邊距會取最大值30px。 </p><br data-v-ebd4f92b><br data-v-ebd4f92b><p class="cor36" data-v-ebd4f92b># 高度塌陷問題?</p><p data-v-ebd4f92b> 父元素没有設定大小（或不設定高度），子元素浮動，子元素會跳出父元素的邊界（脫離文檔流）當父元素的高度為auto時，父元素的高度直接為0。 </p><br data-v-ebd4f92b><p class="vor36" data-v-ebd4f92b>解決:</p><p class="pFou" data-v-ebd4f92b>1.父元素設定固定高度。</p><p class="pFou" data-v-ebd4f92b>2.父元素設定overflow:hidden屬性。</p><p class="pFou" data-v-ebd4f92b>3.在父元素末尾添加一個空元素並設定為清除浮動。</p><p class="pFou" data-v-ebd4f92b>4.使用after偽元素來清除浮動。</p><br data-v-ebd4f92b><br data-v-ebd4f92b><p class="cor36" data-v-ebd4f92b># 清除浮動有哪些方式?</p><p data-v-ebd4f92b>1.觸發BFC</p><p data-v-ebd4f92b> 2.後面加一個after偽類, content設為空, display設為block, 然後加一個clear:both, 現在我一般用FLEX沒怎麼用浮動 </p><br data-v-ebd4f92b><br data-v-ebd4f92b><div id="cssOne005" class="articleCardTitle cor36" data-v-ebd4f92b> [ CSS ] ≫ CSS選擇器優先級和權重? </div><span data-v-ebd4f92b><a href="https://ithelp.ithome.com.tw/articles/10243699" data-v-ebd4f92b>資料來源: 選擇器表 @iT邦幫忙 Eudora</a></span><div data-v-ebd4f92b></div><br data-v-ebd4f92b><p data-v-ebd4f92b> !import &gt; 內聯樣式 &gt; id 選擇器 &gt; 類選擇器 &gt; 標籤選擇器 &gt; 通配符選擇器 </p><br data-v-ebd4f92b><p class="cor36" data-v-ebd4f92b>CSS 權重計算:</p><p data-v-ebd4f92b>1.第一等: 內聯樣式 權重 1000</p><br data-v-ebd4f92b><p data-v-ebd4f92b>2.第二等: ID選擇器 權重 100</p><br data-v-ebd4f92b><p data-v-ebd4f92b>3.第三等: 類,屬性,偽類選擇器 權重 10</p><br data-v-ebd4f92b><p data-v-ebd4f92b>4.第四等: 標籤選擇器,偽元素選擇器 權重 1</p><br data-v-ebd4f92b><p data-v-ebd4f92b>5.第五等: 通配符選擇器 權重 0</p><br data-v-ebd4f92b><br data-v-ebd4f92b><p class="cor36" data-v-ebd4f92b># 選擇器在解析在匹配的時候從左邊開始還是右邊開始?</p><p class="cor36" data-v-ebd4f92b> or # 假設我的選擇器是 a b c,目標是找到所有c,那瀏覽器是先去找到所有的c還是先找所有的a? </p><br data-v-ebd4f92b><p data-v-ebd4f92b>瀏覽器會從右到左解析CSS選擇器</p><p data-v-ebd4f92b>∕span -&gt; ∕div -&gt; html</p><br data-v-ebd4f92b><p data-v-ebd4f92b>從c找到a,右往左找</p><br data-v-ebd4f92b><br data-v-ebd4f92b>',211),L=e(()=>a("span",null,"性能問題,假設從左往右會先找到很多a,可能99%沒用,沒必要找",-1)),E=l('<br data-v-ebd4f92b><br data-v-ebd4f92b><p class="cor36" data-v-ebd4f92b>想選擇一個標籤的下一子層?</p><p data-v-ebd4f92b>標籤 右鍵頭 再加一個標籤</p><br data-v-ebd4f92b><div class="dis spa" data-v-ebd4f92b><div data-v-ebd4f92b>elA &gt; elB</div><div data-v-ebd4f92b>A 的下一子層 的所有 B (不含子子層)</div><div data-v-ebd4f92b>article &gt; h2</div></div><br data-v-ebd4f92b><br data-v-ebd4f92b><p class="cor36" data-v-ebd4f92b> # CSS選擇器,我想選擇一個標籤的下一個標籤用什麼選擇器? </p><p data-v-ebd4f92b>加號選擇器</p><br data-v-ebd4f92b><div class="dis spa" data-v-ebd4f92b><div data-v-ebd4f92b>elA + elB</div><div data-v-ebd4f92b>緊接在 A 後面的 B (同輩)</div><div data-v-ebd4f92b>h1 + p</div></div><br data-v-ebd4f92b><br data-v-ebd4f92b><p class="cor36" data-v-ebd4f92b># 如果要找到所有name,x開頭的標籤,能找到嗎?</p><p data-v-ebd4f92b>屬性選擇器 加 上間號 等於</p><br data-v-ebd4f92b><div class="dis spa" data-v-ebd4f92b><div data-v-ebd4f92b>X[ attr ^= val ]</div><div data-v-ebd4f92b>有___屬性且屬性值&quot;開頭&quot;為___的 X</div><div data-v-ebd4f92b>a[src^=&quot;https&quot;]</div></div><br data-v-ebd4f92b><br data-v-ebd4f92b><p class="cor36" data-v-ebd4f92b> # jQuery選擇器怎麼實現的?IE可以.a或.b但不支持.a .b你怎麼實現查找$(&quot;.a .b&quot;)查找過程? </p><p data-v-ebd4f92b> 先把選擇器做正則解析, 發現它的層級關係, 遍歷所有元素, 看它是否滿足這個關係 </p><br data-v-ebd4f92b><br data-v-ebd4f92b><div id="cssOne006" class="articleCardTitle cor36" data-v-ebd4f92b> [ CSS ] ≫ 水平垂直置中? </div><div data-v-ebd4f92b>(margin 0 auto 前提是 child 要設寬)</div><div data-v-ebd4f92b>(margin auto前提是當前元素是絕對定位)</div><div data-v-ebd4f92b> (translate前提是先做了絕對定位, 距離負元素 let 50% top50% 再translate(-50%, -50%)) </div><br data-v-ebd4f92b><div data-v-ebd4f92b>1.知不知寬高 . 水平or垂直</div><br data-v-ebd4f92b><h3 class="cor36" data-v-ebd4f92b>塊級元素居中布局</h3><p class="cor36" data-v-ebd4f92b>水平居中</p><p class="pFou" data-v-ebd4f92b>知道寬：margin: 0 auto;</p><p class="pFou" data-v-ebd4f92b>不知寬</p><br data-v-ebd4f92b><p class="cor36" data-v-ebd4f92b>垂直居中</p><p class="pFou" data-v-ebd4f92b> position: absolute 設置 left、top、margin-left、margin-to (定高) </p><p class="pFou" data-v-ebd4f92b>position: fixed 設置 margin: auto (定高)</p><p class="pFou" data-v-ebd4f92b>display: table-cell</p><p class="pFou" data-v-ebd4f92b>transform: translate(x, y)</p><p class="pFou" data-v-ebd4f92b>flex (不定高，不定寬) ie11 ↑</p><p class="pFou" data-v-ebd4f92b>grid (不定高，不定寬)，兼容性相對比較差 ie10 ↑</p><br data-v-ebd4f92b><h3 class="cor36" data-v-ebd4f92b>內聯元素居中布局</h3><p class="cor36" data-v-ebd4f92b>水平居中</p><p class="pFou" data-v-ebd4f92b>行內元素父元素下可設置：text-align: center</p><p class="pFou" data-v-ebd4f92b> flex布局設置父元素：display: flex; justify-content: center </p><br data-v-ebd4f92b><p class="cor36" data-v-ebd4f92b>垂直居中</p><p class="pFou" data-v-ebd4f92b>單行文本父元素確認高度：height === line-height</p><br data-v-ebd4f92b><br data-v-ebd4f92b><br data-v-ebd4f92b><br data-v-ebd4f92b><h3 class="cor36" data-v-ebd4f92b>塊級元素居中布局</h3><br data-v-ebd4f92b><p data-v-ebd4f92b>flex 彈性盒子布局 (主軸垂直 , 交叉軸水平)</p><p data-v-ebd4f92b> justify-content: center會使flex容器下的所有flex項目全部水平居中。 </p><p data-v-ebd4f92b>缺點? _ IE8以下不能用</p><br data-v-ebd4f92b><div class="bgcVS" data-v-ebd4f92b><div data-v-ebd4f92b><span class="then" data-v-ebd4f92b>＜</span> <span class="number" data-v-ebd4f92b>div </span><span class="function" data-v-ebd4f92b>class </span> <span class="then" data-v-ebd4f92b>= &quot;</span><span class="word" data-v-ebd4f92b>parent</span><span class="then" data-v-ebd4f92b>&quot;</span> <span class="then" data-v-ebd4f92b>&gt;</span></div><div class="pTwo" data-v-ebd4f92b><span class="then" data-v-ebd4f92b>＜</span> <span class="number" data-v-ebd4f92b>div </span><span class="function" data-v-ebd4f92b>class </span> <span class="then" data-v-ebd4f92b>=&quot;</span><span class="word" data-v-ebd4f92b>child</span> <span class="then" data-v-ebd4f92b>&quot;&gt;＜/ </span><span class="number" data-v-ebd4f92b>div </span> <span class="then" data-v-ebd4f92b>&gt;</span></div><div data-v-ebd4f92b><span class="then" data-v-ebd4f92b>＜ </span> <span class="number" data-v-ebd4f92b>div </span><span class="then" data-v-ebd4f92b>&gt;</span></div><div class="brackets" data-v-ebd4f92b>.parent {</div><div class="brackets pTwo" data-v-ebd4f92b>display: flex;</div><div class="brackets pTwo" data-v-ebd4f92b>justify-content: center;</div><div class="brackets pTwo" data-v-ebd4f92b>align-items: center;</div><div class="brackets" data-v-ebd4f92b>}</div></div><br data-v-ebd4f92b><br data-v-ebd4f92b><p data-v-ebd4f92b>flex 格線佈局布局</p><br data-v-ebd4f92b><div class="bgcVS" data-v-ebd4f92b><div data-v-ebd4f92b><span class="then" data-v-ebd4f92b>＜</span> <span class="number" data-v-ebd4f92b>div </span><span class="function" data-v-ebd4f92b>class </span> <span class="then" data-v-ebd4f92b>= &quot;</span><span class="word" data-v-ebd4f92b>parent</span><span class="then" data-v-ebd4f92b>&quot;</span> <span class="then" data-v-ebd4f92b>&gt;</span></div><div class="pTwo" data-v-ebd4f92b><span class="then" data-v-ebd4f92b>＜</span> <span class="number" data-v-ebd4f92b>div </span><span class="function" data-v-ebd4f92b>class </span> <span class="then" data-v-ebd4f92b>=&quot;</span><span class="word" data-v-ebd4f92b>child</span> <span class="then" data-v-ebd4f92b>&quot;&gt;＜/ </span><span class="number" data-v-ebd4f92b>div </span> <span class="then" data-v-ebd4f92b>&gt;</span></div><div data-v-ebd4f92b><span class="then" data-v-ebd4f92b>＜ </span> <span class="number" data-v-ebd4f92b>div </span><span class="then" data-v-ebd4f92b>&gt;</span></div><div class="brackets" data-v-ebd4f92b>.parent {</div><div class="brackets pTwo" data-v-ebd4f92b>display: grid;</div><div class="brackets" data-v-ebd4f92b>}</div><div class="brackets" data-v-ebd4f92b>.child {</div><div class="brackets pTwo" data-v-ebd4f92b>justify-self: center;</div><div class="brackets pTwo" data-v-ebd4f92b>align-self: center;</div><div class="brackets" data-v-ebd4f92b>}</div></div><br data-v-ebd4f92b><br data-v-ebd4f92b><br data-v-ebd4f92b><p data-v-ebd4f92b>absolute + transform translate ( -50% , -50% )</p><p data-v-ebd4f92b>絕對定位，這個方法不需要子元素固定寬高</p><br data-v-ebd4f92b><p data-v-ebd4f92b> : 可以用transform實現, 給他子絕對父相對定位, 給子top百分之50 left百分之50, 然後transform translate負的百分之50 實現垂直居中, </p><br data-v-ebd4f92b><p class="cor36" data-v-ebd4f92b>你說的絕對定位方法有沒有副作用?</p><p data-v-ebd4f92b>(fix定位會被transform屏蔽掉)</p><p data-v-ebd4f92b> 它的位置的中點會相對於原來的位置有偏移,它以前相對於窗口定位,它現在相對於父元素定位 </p><br data-v-ebd4f92b><div class="bgcVS" data-v-ebd4f92b><div data-v-ebd4f92b><span class="then" data-v-ebd4f92b>＜</span> <span class="number" data-v-ebd4f92b>div </span><span class="function" data-v-ebd4f92b>class </span> <span class="then" data-v-ebd4f92b>= &quot;</span><span class="word" data-v-ebd4f92b>parent</span><span class="then" data-v-ebd4f92b>&quot;</span> <span class="then" data-v-ebd4f92b>&gt;</span></div><div class="pTwo" data-v-ebd4f92b><span class="then" data-v-ebd4f92b>＜</span> <span class="number" data-v-ebd4f92b>div </span><span class="function" data-v-ebd4f92b>class </span> <span class="then" data-v-ebd4f92b>=&quot;</span><span class="word" data-v-ebd4f92b>child</span> <span class="then" data-v-ebd4f92b>&quot;&gt;＜/ </span><span class="number" data-v-ebd4f92b>div </span> <span class="then" data-v-ebd4f92b>&gt;</span></div><div data-v-ebd4f92b><span class="then" data-v-ebd4f92b>＜ </span> <span class="number" data-v-ebd4f92b>div </span><span class="then" data-v-ebd4f92b>&gt;</span></div><div class="brackets" data-v-ebd4f92b>.parent {</div><div class="brackets pTwo" data-v-ebd4f92b>position: relative;</div><div class="brackets" data-v-ebd4f92b>}</div><div class="brackets" data-v-ebd4f92b>.child {</div><div class="brackets pTwo" data-v-ebd4f92b>position: absolute;</div><div class="brackets pTwo" data-v-ebd4f92b>top: 50%;</div><div class="brackets pTwo" data-v-ebd4f92b>left: 50%;</div><div class="brackets pTwo" data-v-ebd4f92b>transform: translate(-50%, -50%);</div><div class="brackets" data-v-ebd4f92b>}</div></div><br data-v-ebd4f92b><br data-v-ebd4f92b><p data-v-ebd4f92b>margin: 0 auto . . . <span class="cor36" data-v-ebd4f92b>(知道子元素寬)</span></p><p data-v-ebd4f92b>只有 <span class="cor36" data-v-ebd4f92b>非絕對定位 </span> 的元素才有效</p><p data-v-ebd4f92b>絕對定位指: absolute . fixed . sticky</p><p class="comment" data-v-ebd4f92b>img/input/button等自帶寬，可不設</p><br data-v-ebd4f92b><p data-v-ebd4f92b>: 如果知道它的寬度的話, 可用margin 0 auto來實現</p><br data-v-ebd4f92b><div class="bgcVS" data-v-ebd4f92b><div data-v-ebd4f92b><span class="then" data-v-ebd4f92b>＜</span> <span class="number" data-v-ebd4f92b>div </span><span class="function" data-v-ebd4f92b>class </span> <span class="then" data-v-ebd4f92b>= &quot;</span><span class="word" data-v-ebd4f92b>parent</span><span class="then" data-v-ebd4f92b>&quot;</span> <span class="then" data-v-ebd4f92b>&gt;</span></div><div class="pTwo" data-v-ebd4f92b><span class="then" data-v-ebd4f92b>＜</span> <span class="number" data-v-ebd4f92b>div </span><span class="function" data-v-ebd4f92b>class </span> <span class="then" data-v-ebd4f92b>=&quot;</span><span class="word" data-v-ebd4f92b>child</span> <span class="then" data-v-ebd4f92b>&quot;&gt;＜/ </span><span class="number" data-v-ebd4f92b>div </span> <span class="then" data-v-ebd4f92b>&gt;</span></div><div data-v-ebd4f92b><span class="then" data-v-ebd4f92b>＜ </span> <span class="number" data-v-ebd4f92b>div </span><span class="then" data-v-ebd4f92b>&gt;</span></div><div class="brackets" data-v-ebd4f92b>.child {</div><div class="comment pTwo" data-v-ebd4f92b>/* 必須設定 box 的寬 */</div><div class="brackets pTwo" data-v-ebd4f92b>width: 100px;</div><div class="brackets pTwo" data-v-ebd4f92b>margin: 0 auto;</div><div class="brackets" data-v-ebd4f92b>}</div></div><br data-v-ebd4f92b><br data-v-ebd4f92b><p class="cor36" data-v-ebd4f92b># 父子高度都不確定但確實有值如何實現垂直居中?</p><br data-v-ebd4f92b><p data-v-ebd4f92b> margin: auto . . . <span class="cor36" data-v-ebd4f92b>(1.需要父元素高 2.子元素寬高 3.父相對子絕對)</span></p><p data-v-ebd4f92b>缺點: 不兼容ie</p><br data-v-ebd4f92b><p data-v-ebd4f92b>: 在子CSS屬性上加上下左右值為0 然後加上margin auto,</p><br data-v-ebd4f92b><div class="bgcVS" data-v-ebd4f92b><div data-v-ebd4f92b><span class="then" data-v-ebd4f92b>＜</span> <span class="number" data-v-ebd4f92b>div </span><span class="function" data-v-ebd4f92b>class </span> <span class="then" data-v-ebd4f92b>= &quot;</span><span class="word" data-v-ebd4f92b>parent</span><span class="then" data-v-ebd4f92b>&quot;</span> <span class="then" data-v-ebd4f92b>&gt;</span></div><div class="pTwo" data-v-ebd4f92b><span class="then" data-v-ebd4f92b>＜</span> <span class="number" data-v-ebd4f92b>div </span><span class="function" data-v-ebd4f92b>class </span> <span class="then" data-v-ebd4f92b>=&quot;</span><span class="word" data-v-ebd4f92b>child</span> <span class="then" data-v-ebd4f92b>&quot;&gt;＜/ </span><span class="number" data-v-ebd4f92b>div </span> <span class="then" data-v-ebd4f92b>&gt;</span></div><div data-v-ebd4f92b><span class="then" data-v-ebd4f92b>＜ </span> <span class="number" data-v-ebd4f92b>div </span><span class="then" data-v-ebd4f92b>&gt;</span></div><div class="brackets" data-v-ebd4f92b>.parent {</div><div class="brackets pTwo" data-v-ebd4f92b>position: relative;</div><div class="brackets pTwo" data-v-ebd4f92b>height: 300px;</div><div class="brackets" data-v-ebd4f92b>}</div><div class="brackets" data-v-ebd4f92b>.child {</div><div class="brackets pTwo" data-v-ebd4f92b>width: 100px;</div><div class="brackets pTwo" data-v-ebd4f92b>height: 100px;</div><div class="brackets pTwo" data-v-ebd4f92b>position: absolute;</div><div class="brackets pTwo" data-v-ebd4f92b>top: 0;</div><div class="brackets pTwo" data-v-ebd4f92b>left: 0;</div><div class="brackets pTwo" data-v-ebd4f92b>right: 0;</div><div class="brackets pTwo" data-v-ebd4f92b>bottom: 0;</div><div class="brackets pTwo" data-v-ebd4f92b>margin: auto;</div><div class="brackets" data-v-ebd4f92b>}</div></div><br data-v-ebd4f92b><br data-v-ebd4f92b><h3 class="cor36" data-v-ebd4f92b>內聯元素水平居中</h3><p data-v-ebd4f92b> text-align: center 可以使行內級元素和行內塊級元素在父元素中水平居中。 </p><p data-v-ebd4f92b> 父元素下的所有行級元素，包含子元素以及孫子元素，都相對於自己的父元素水平居中。 </p><br data-v-ebd4f92b><div class="bgcVS" data-v-ebd4f92b><div data-v-ebd4f92b><span class="then" data-v-ebd4f92b>＜</span> <span class="number" data-v-ebd4f92b>div </span><span class="function" data-v-ebd4f92b>class </span> <span class="then" data-v-ebd4f92b>= &quot;</span><span class="word" data-v-ebd4f92b>parent</span><span class="then" data-v-ebd4f92b>&quot;</span> <span class="then" data-v-ebd4f92b>&gt;</span></div><div class="pTwo" data-v-ebd4f92b><span class="then" data-v-ebd4f92b>＜</span> <span class="number" data-v-ebd4f92b>span </span><span class="function" data-v-ebd4f92b>class </span> <span class="then" data-v-ebd4f92b>=&quot;</span><span class="word" data-v-ebd4f92b>child</span> <span class="then" data-v-ebd4f92b>&quot;&gt;＜/ </span><span class="number" data-v-ebd4f92b>div </span> <span class="then" data-v-ebd4f92b>&gt;</span></div><div data-v-ebd4f92b><span class="then" data-v-ebd4f92b>＜ </span> <span class="number" data-v-ebd4f92b>div </span><span class="then" data-v-ebd4f92b>&gt;</span></div><div class="brackets" data-v-ebd4f92b>.parent {</div><div class="brackets pTwo" data-v-ebd4f92b>width: 300px;</div><div class="brackets pTwo" data-v-ebd4f92b>height: 300px;</div><div class="brackets pTwo" data-v-ebd4f92b>text-align: center;</div><div class="brackets" data-v-ebd4f92b>}</div><div class="brackets" data-v-ebd4f92b>.child {</div><div class="brackets pTwo" data-v-ebd4f92b>width: 100px;</div><div class="brackets pTwo" data-v-ebd4f92b>height: 100px;</div><div class="brackets" data-v-ebd4f92b>}</div></div><br data-v-ebd4f92b><br data-v-ebd4f92b><h3 class="cor36" data-v-ebd4f92b>內聯元素垂直居中</h3><p data-v-ebd4f92b>子元素 line-heignt 設跟父元素一樣高度</p><br data-v-ebd4f92b><div class="bgcVS" data-v-ebd4f92b><div data-v-ebd4f92b><span class="then" data-v-ebd4f92b>＜</span> <span class="number" data-v-ebd4f92b>div </span><span class="function" data-v-ebd4f92b>class </span> <span class="then" data-v-ebd4f92b>= &quot;</span><span class="word" data-v-ebd4f92b>parent</span><span class="then" data-v-ebd4f92b>&quot;</span> <span class="then" data-v-ebd4f92b>&gt;</span></div><div class="pTwo" data-v-ebd4f92b><span class="then" data-v-ebd4f92b>＜</span> <span class="number" data-v-ebd4f92b>span </span><span class="function" data-v-ebd4f92b>class </span> <span class="then" data-v-ebd4f92b>=&quot;</span><span class="word" data-v-ebd4f92b>child</span> <span class="then" data-v-ebd4f92b>&quot;&gt;＜/ </span><span class="number" data-v-ebd4f92b>div </span> <span class="then" data-v-ebd4f92b>&gt;</span></div><div data-v-ebd4f92b><span class="then" data-v-ebd4f92b>＜ </span> <span class="number" data-v-ebd4f92b>div </span><span class="then" data-v-ebd4f92b>&gt;</span></div><div class="brackets" data-v-ebd4f92b>.parent {</div><div class="brackets pTwo" data-v-ebd4f92b>width: 300px;</div><div class="brackets pTwo" data-v-ebd4f92b>height: 300px;</div><div class="brackets" data-v-ebd4f92b>}</div><div class="brackets" data-v-ebd4f92b>.child {</div><div class="brackets pTwo" data-v-ebd4f92b>width: 100px;</div><div class="brackets pTwo" data-v-ebd4f92b>line-heignt:父元素的高度;</div><div class="brackets" data-v-ebd4f92b>}</div></div><br data-v-ebd4f92b><br data-v-ebd4f92b><div id="cssOne007" class="articleCardTitle cor36" data-v-ebd4f92b> [ CSS ] ≫ CSS有哪些常見的布局方法? </div><span data-v-ebd4f92b><a href="https://ithelp.ithome.com.tw/articles/10208741" data-v-ebd4f92b>資料來源: Flex 空間分配 @iT邦幫忙 Lai</a></span><div data-v-ebd4f92b></div><br data-v-ebd4f92b><p data-v-ebd4f92b>FLEX GRID</p><br data-v-ebd4f92b><br data-v-ebd4f92b><p class="cor36" data-v-ebd4f92b>實現一個左中右三欄布局,不能用FLEX,GRID怎麼做?</p><p data-v-ebd4f92b>定位 float table</p><br data-v-ebd4f92b><br data-v-ebd4f92b><p class="cor36" data-v-ebd4f92b>Flex 布局用在什麼情況下比較合適?</p><p data-v-ebd4f92b>用於線性布局, 水平或垂直</p><br data-v-ebd4f92b><br data-v-ebd4f92b><p class="cor36" data-v-ebd4f92b>Grid 布局用在什麼情況下比較合適?</p><p data-v-ebd4f92b>用於線性布局,水平或垂直</p><br data-v-ebd4f92b><br data-v-ebd4f92b><p class="cor36" data-v-ebd4f92b>做一個左中右的布局用FLEX怎麼做?</p><p data-v-ebd4f92b>可以直接給父元素加display:flex 子元素加space:between</p><br data-v-ebd4f92b><br data-v-ebd4f92b><p class="cor36" data-v-ebd4f92b>不夠寬自然會收縮,有哪些元素會收縮?</p><p data-v-ebd4f92b>它會等比例收縮</p><br data-v-ebd4f92b><br data-v-ebd4f92b><p class="cor36" data-v-ebd4f92b>如果我希望它不等比例收縮呢?比如中間不縮左右縮呢?</p><p data-v-ebd4f92b>中間的設 flex-shrink 0</p><p data-v-ebd4f92b>兩邊默認的shrink是 1</p><br data-v-ebd4f92b><br data-v-ebd4f92b><p class="cor36" data-v-ebd4f92b> 如果希望左邊固定寬100px右邊固定寬200px中間自由收縮怎麼做? </p><p data-v-ebd4f92b>左邊寬100右邊寬200</p><br data-v-ebd4f92b><br data-v-ebd4f92b><p class="cor36" data-v-ebd4f92b>寫了寬度之後shrink怎麼寫?</p><p data-v-ebd4f92b>左右0 中間寫1</p><br data-v-ebd4f92b><br data-v-ebd4f92b><p class="cor36" data-v-ebd4f92b>那左中右grow怎麼寫?</p><p data-v-ebd4f92b>左右grow0 中間1</p><br data-v-ebd4f92b><br data-v-ebd4f92b><p class="cor36" data-v-ebd4f92b>grid一般用來做甚麼樣的布局?怎麼用?</p><p data-v-ebd4f92b>網格 屏幕做四個相等的 用行列布局骨架</p><br data-v-ebd4f92b><br data-v-ebd4f92b><div id="cssOne008" class="articleCardTitle cor36" data-v-ebd4f92b> [ CSS ] ≫ CSS動畫有哪些屬性? </div><p data-v-ebd4f92b>transition</p><p data-v-ebd4f92b>@keyframe</p><p data-v-ebd4f92b>animation</p><br data-v-ebd4f92b><br data-v-ebd4f92b><p class="cor36" data-v-ebd4f92b> transition怎麼實現動畫的,例如你怎麼把一個東西從左移到右? </p><p data-v-ebd4f92b>先自訂一個初始的位置, 比如你觸發點擊事件</p><p data-v-ebd4f92b> 點擊讓它移動100px, 用transition優化它中間過度的動畫, 寫 all 0.25秒 </p><br data-v-ebd4f92b><br data-v-ebd4f92b><p class="cor36" data-v-ebd4f92b> 你用transition加了從開始到結束的動畫,這動畫可以是線性也可以非線性也可以緩動的,你能舉幾個例子嗎?線性是用什麼值? </p><p data-v-ebd4f92b>transition-timing-function</p><p data-v-ebd4f92b>預設ease緩入中間快緩出</p><p data-v-ebd4f92b>linear均速</p><p data-v-ebd4f92b>ease-in 緩入</p><p data-v-ebd4f92b>ease-out 緩出</p><br data-v-ebd4f92b><br data-v-ebd4f92b><p class="cor36" data-v-ebd4f92b> 你做旋轉時,它默認從那裡開始旋轉?從哪個基點開始旋轉? </p><p data-v-ebd4f92b>中心點, 可以設定transform-origin 改變 例如 top left 到左上角</p><br data-v-ebd4f92b><br data-v-ebd4f92b><p class="cor36" data-v-ebd4f92b> animation我如果希望它撥放完了再繼續撥無限撥怎麼做? </p><p data-v-ebd4f92b>animation-iteration-count 設定 infinite</p><br data-v-ebd4f92b><br data-v-ebd4f92b><div id="cssOne015" class="articleCardTitle cor36" data-v-ebd4f92b> [ CSS ] ≫ 偽類 偽元素? </div><p class="cor36" data-v-ebd4f92b>:偽類</p><br data-v-ebd4f92b><br data-v-ebd4f92b><p data-v-ebd4f92b>當我們 希望樣式在 某些特定狀態下 才被呈現到 指定的 元素時</p><br data-v-ebd4f92b><br data-v-ebd4f92b><p data-v-ebd4f92b>就是 當某元素狀態改變時 , 我們期待給這元素添加一些特殊效果</p><br data-v-ebd4f92b><br data-v-ebd4f92b><p data-v-ebd4f92b>:hover 懸浮在某元素上時 , 期望該元素要顯示的樣式</p><br data-v-ebd4f92b><br data-v-ebd4f92b><p class="cor36" data-v-ebd4f92b>::偽元素</p><br data-v-ebd4f92b><br data-v-ebd4f92b><p data-v-ebd4f92b>創建一些不在文檔樹中的元素 , 並為其添加樣式</p><br data-v-ebd4f92b><br data-v-ebd4f92b><p data-v-ebd4f92b>要注意 偽元素樣式裡 必須要給 content 屬性</p><br data-v-ebd4f92b><br data-v-ebd4f92b><p data-v-ebd4f92b>::before 在一個元素前增加一些文本 , 並對文本添加樣式</p><br data-v-ebd4f92b><br data-v-ebd4f92b><p class="cor36" data-v-ebd4f92b>小結:</p><p data-v-ebd4f92b>偽類 操作對象 是 文檔樹中 已有的元素</p><br data-v-ebd4f92b><br data-v-ebd4f92b><p data-v-ebd4f92b>偽元素 創建文檔樹 以外的元素 並添加樣式</p><br data-v-ebd4f92b><br data-v-ebd4f92b><div id="cssOne011" class="articleCardTitle cor36" data-v-ebd4f92b> [ CSS ] ≫ 隱藏元素的方法? </div><h3 data-v-ebd4f92b>display: none</h3><p data-v-ebd4f92b>元素在 頁面上消失 , 不佔空間 . . . 重排 重繪</p><br data-v-ebd4f92b><br data-v-ebd4f92b><h3 data-v-ebd4f92b>opacity: 0</h3><p data-v-ebd4f92b>設置元素透明度 0 , 元素不可見 , 佔空間</p><br data-v-ebd4f92b><br data-v-ebd4f92b><h3 data-v-ebd4f92b>visbility: hidden</h3><p data-v-ebd4f92b>讓 元素消失 , 佔位置 . . . 重繪</p><br data-v-ebd4f92b><br data-v-ebd4f92b><h3 data-v-ebd4f92b>position: absolute</h3><br data-v-ebd4f92b><br data-v-ebd4f92b><div id="cssOne010" class="articleCardTitle cor36" data-v-ebd4f92b> [ css ] ≫ 什麼是重排(回流)和重繪?如何避免 </div><h2 data-v-ebd4f92b>重繪不一定重排，重排一定重繪</h2><br data-v-ebd4f92b><br data-v-ebd4f92b><h3 class="cor36" data-v-ebd4f92b># 重排(回流)（reflow）是什麼:</h3><p data-v-ebd4f92b>布局引擎會根據所有的樣式計算出盒模型在頁面上的位置 &amp; 大小</p><br data-v-ebd4f92b><p data-v-ebd4f92b>當瀏覽器偵測到頁面的佈局發生變化時，就需要進行回退並重新渲染。</p><br data-v-ebd4f92b><p class="cor36" data-v-ebd4f92b># 觸發重排(回流)條件：</p><p data-v-ebd4f92b>1.頁面第一次渲染（初始化）</p><p data-v-ebd4f92b>2.DOM樹節點的增刪或移動</p><p data-v-ebd4f92b>3.DOM元素的幾何屬性變化</p><p class="pFou" data-v-ebd4f92b>寬度（width）</p><p class="pFou" data-v-ebd4f92b>高度（height）</p><p class="pFou" data-v-ebd4f92b>內邊距（padding）</p><p class="pFou" data-v-ebd4f92b>邊框（border）等</p><p class="pFou" data-v-ebd4f92b>外邊距（margin）</p><p class="pFou" data-v-ebd4f92b>左偏移（left）</p><p class="pFou" data-v-ebd4f92b>上偏移（top）</p><br data-v-ebd4f92b><p data-v-ebd4f92b>4.瀏覽器窗口大小改變（resize）</p><p data-v-ebd4f92b>獲取元素的某些屬性，如offset系列、scroll系列和client系列屬性。</p><br data-v-ebd4f92b><p class="cor36" data-v-ebd4f92b># 重排(回流)過程</p><p data-v-ebd4f92b> 劉覽器會從根節點＜html&gt;元素 開始進行遞歸，逐個計算所有節點的幾何尺寸和位置，以確定是渲染樹的一部分發生變化還是整個渲染樹需要重新渲染。 </p><br data-v-ebd4f92b><br data-v-ebd4f92b><h3 class="cor36" data-v-ebd4f92b># 重繪（repaint）是什麼:</h3><p data-v-ebd4f92b> 計算好盒模型的 位置 大小 其他屬性後 , 瀏覽器根據每個盒模型的 特性 進行 繪製瀏覽器的渲染機制 </p><br data-v-ebd4f92b><p data-v-ebd4f92b> 當我們改變某個元素的背景色、文字顏色、邊框顏色等屬性時，屏幕的一部分需要重繪，但是元素的幾何尺寸和位置沒有發生改變。重繪過程不涉及布局的計算，只是重新繪製已有的元素。 </p><br data-v-ebd4f92b><p class="cor36" data-v-ebd4f92b># 觸發重繪條件:</p><p data-v-ebd4f92b> 1.重排(回流)必會引起重繪，因為回流的過程中可能會改變元素的樣式屬性，需要重新繪製已有的元素。 </p><p data-v-ebd4f92b>2.背景色、文字顏色、字體等的改變會觸發重繪。</p><p class="pTwo" data-v-ebd4f92b> 注意 字體大小發生變化時，將觸發回流而非僅重繪。(會影響元素的佈局) </p><br data-v-ebd4f92b><p class="cor36" data-v-ebd4f92b># 重繪過程</p><p data-v-ebd4f92b> 沒有導致 DOM 元素的幾何屬性（寬度、高度、位置）發生變化，因此元素的位置信息不需要更新，從而省去了佈局（layout）的過程。 </p><br data-v-ebd4f92b><br data-v-ebd4f92b><h2 class="cor36" data-v-ebd4f92b># 如何避免重排(回流).重繪?</h2><p data-v-ebd4f92b>1.集中改變樣式: ex 用 class 集中改變</p><br data-v-ebd4f92b><p data-v-ebd4f92b>2.用 transform 做變形和位移，可以減少重排(回流)的次數。</p><br data-v-ebd4f92b><p data-v-ebd4f92b> 3.將需要多次修改的 DOM 元素設置為 display:none，操作完成後再顯示。 </p><br data-v-ebd4f92b><p data-v-ebd4f92b>4.避免多次讀取某些屬性</p><br data-v-ebd4f92b><p data-v-ebd4f92b>5.絕對定位將複雜的節點脫離文檔流中，形成新的 Render Layer。</p><br data-v-ebd4f92b><p data-v-ebd4f92b> 6.使用 DocumentFragment 將需要多次修改的 DOM 元素緩存起來，最後一次性添加到真實的 DOM 中進行渲染。 </p><br data-v-ebd4f92b><br data-v-ebd4f92b><div id="cssOne013" class="articleCardTitle cor36" data-v-ebd4f92b> [ CSS ] ≫ CSS 的那些屬性 可以繼承? </div><p data-v-ebd4f92b>css 3 特性 : 繼承 、 層疊 、 優先級</p><br data-v-ebd4f92b><br data-v-ebd4f92b><p class="cor36" data-v-ebd4f92b>子元素 可繼承 父元素 樣式</p><div id="" class="articleCardTitle cor36" data-v-ebd4f92b>[ CSS ] ≫</div><p data-v-ebd4f92b>1. 字體 fonst . . . 顏色 大小</p><br data-v-ebd4f92b><br data-v-ebd4f92b><p data-v-ebd4f92b>2. 文本 line-height</p><br data-v-ebd4f92b><br data-v-ebd4f92b><p data-v-ebd4f92b>3. 元素可見性 visbility: hidden</p><br data-v-ebd4f92b><br data-v-ebd4f92b><p data-v-ebd4f92b>4. 表格布局的屬性 border-spacing</p><br data-v-ebd4f92b><br data-v-ebd4f92b><p data-v-ebd4f92b>5. 列表屬性 list-style</p><br data-v-ebd4f92b><br data-v-ebd4f92b><div id="cssOne013" class="articleCardTitle cor36" data-v-ebd4f92b> [ CSS ] ≫ 預處理器? </div><p class="cor36" data-v-ebd4f92b>SCSS相比於CSS有那些好處?</p><p data-v-ebd4f92b>它可以在寫語法時層層包裹, 可以用變量</p><br data-v-ebd4f92b><br data-v-ebd4f92b><p class="cor36" data-v-ebd4f92b>SASS 、 LESS</p><p data-v-ebd4f92b>變量 、 函數 、 混入</p><br data-v-ebd4f92b><br data-v-ebd4f92b><div id="cssOne009" class="articleCardTitle cor36" data-v-ebd4f92b> [ CSS ] ≫ 畫三角形的方法? </div><div data-v-ebd4f92b><span data-v-ebd4f92b><a href="https://codepen.io/wayne23123/pen/QWJdjVJ?editors=1100" data-v-ebd4f92b>@codePen demo</a></span></div><p data-v-ebd4f92b>1.</p><p data-v-ebd4f92b>用border, 給四個邊距, 然後給三個透明</p><br data-v-ebd4f92b><p data-v-ebd4f92b>2.</p><p data-v-ebd4f92b>用2個div做, 第一個div做正方形, 然後旋轉90度變成菱形,</p><p data-v-ebd4f92b> 另一個div做為父容器把他的上面百分之50顯示, 下面百分之50 overflow:hidden起來 </p><div id="cssOne016" class="articleCardTitle cor36" data-v-ebd4f92b> [ CSS ] ≫ 白屏時間 首屏時間 一樣嗎? 區別? </div><p class="cor36" data-v-ebd4f92b>白屏時間:</p><p data-v-ebd4f92b>指用戶輸入內容 enter 到瀏覽器出現第一個字符</p><br data-v-ebd4f92b><p data-v-ebd4f92b>開始顯示內容的時間</p><br data-v-ebd4f92b><p data-v-ebd4f92b>白屏 = 頁面開始展示時間 - 開始請求時間</p><br data-v-ebd4f92b><p class="cor36" data-v-ebd4f92b>首屏時間:</p><p data-v-ebd4f92b>瀏覽器響應用戶輸入 地址 到 首屏內容 全部渲染 完成的時間</p><br data-v-ebd4f92b><br data-v-ebd4f92b><div id="cssOne017" class="articleCardTitle cor36" data-v-ebd4f92b> [ CSS ] ≫ 圖片懶加載 </div><p data-v-ebd4f92b>在頁面中 有很多圖片時 , 加載圖片需要 一定時間</p><br data-v-ebd4f92b><p data-v-ebd4f92b>可以 優先加載 可視區域的 內容 , 其他 等進入可視區域 再加載</p><br data-v-ebd4f92b><p data-v-ebd4f92b>1.加載</p><p data-v-ebd4f92b>圖片進入可視區域前 先不給 src 賦值</p><br data-v-ebd4f92b><p data-v-ebd4f92b>進入可視區域 再給 src 賦上地址值</p><br data-v-ebd4f92b><p data-v-ebd4f92b>2.判斷是否進入</p><p data-v-ebd4f92b>通過 IntersectionObserver API 實現</p><br data-v-ebd4f92b><p data-v-ebd4f92b>這個 API 可以觀察元素是否可見</p><br data-v-ebd4f92b><p data-v-ebd4f92b>可見指 目標元素 與 視口 是否產生 交叉區</p><div class="bgcVS" data-v-ebd4f92b><div data-v-ebd4f92b><span class="function" data-v-ebd4f92b>const </span><span class="word" data-v-ebd4f92b>observer</span><span class="then" data-v-ebd4f92b>= new </span><span class="word" data-v-ebd4f92b>IntersectionObserver</span><span class="brackets" data-v-ebd4f92b>(</span> <span class="cor36" data-v-ebd4f92b>回調</span><span class="brackets" data-v-ebd4f92b>)</span></div><p data-v-ebd4f92b>裡面回調觸發 2 次 , 目標元素看見 觸發 , 目標看不見 觸發</p><br data-v-ebd4f92b><br data-v-ebd4f92b><div data-v-ebd4f92b><span class="then" data-v-ebd4f92b>＜</span> <span class="number" data-v-ebd4f92b>img </span><span class="word" data-v-ebd4f92b>data-src</span> <span class="then" data-v-ebd4f92b>=</span><span class="src" data-v-ebd4f92b>&quot;test.jpg&quot;</span> <span class="then" data-v-ebd4f92b>&gt;</span></div><br data-v-ebd4f92b><div data-v-ebd4f92b><span class="function" data-v-ebd4f92b>const </span><span class="word" data-v-ebd4f92b>images</span> <span class="then" data-v-ebd4f92b>=</span><span class="word" data-v-ebd4f92b>document</span><span class="variable" data-v-ebd4f92b>.querySelectorAll</span><span class="brackets" data-v-ebd4f92b>(</span> <span class="src" data-v-ebd4f92b>&quot;img&quot;</span><span class="brackets" data-v-ebd4f92b>)</span></div><br data-v-ebd4f92b><div data-v-ebd4f92b><span class="function" data-v-ebd4f92b>const </span><span class="word" data-v-ebd4f92b>callback</span> <span class="then" data-v-ebd4f92b>=</span><span class="word" data-v-ebd4f92b>entries</span><span class="function" data-v-ebd4f92b>=&gt; </span> <span class="brackets" data-v-ebd4f92b>{</span></div><div class="padTwo VSL" data-v-ebd4f92b><span class="word" data-v-ebd4f92b>entries</span><span class="variable" data-v-ebd4f92b>.forEach</span><span class="brackets" data-v-ebd4f92b>(</span> <span class="word" data-v-ebd4f92b>entry</span><span class="function" data-v-ebd4f92b>=&gt; </span> <span class="brackets" data-v-ebd4f92b>{</span><div data-v-ebd4f92b></div><div class="padTwo VSL" data-v-ebd4f92b><span class="then" data-v-ebd4f92b>if</span> <span class="brackets" data-v-ebd4f92b>(</span><span class="word" data-v-ebd4f92b>entry</span><span class="variable" data-v-ebd4f92b>.isIntersecting</span><span class="brackets" data-v-ebd4f92b>){</span><div data-v-ebd4f92b></div><div class="padTwo VSL" data-v-ebd4f92b><span class="function" data-v-ebd4f92b>const </span><span class="word" data-v-ebd4f92b>image</span> <span class="then" data-v-ebd4f92b>=</span><span class="word" data-v-ebd4f92b>entry</span><span class="variable" data-v-ebd4f92b>.target</span><div data-v-ebd4f92b><span class="function" data-v-ebd4f92b>const </span><span class="word" data-v-ebd4f92b>data_src</span><span class="then" data-v-ebd4f92b>=</span> <span class="word" data-v-ebd4f92b>image</span><span class="variable" data-v-ebd4f92b>.getAttribute</span><span class="brackets" data-v-ebd4f92b>(</span><span class="src" data-v-ebd4f92b>&quot;data-src&quot;</span><span class="brackets" data-v-ebd4f92b>)</span></div><div data-v-ebd4f92b><span class="word" data-v-ebd4f92b>image</span><span class="variable" data-v-ebd4f92b>.setAttribute</span><span class="brackets" data-v-ebd4f92b>(</span><span class="src" data-v-ebd4f92b>&quot;src&quot;</span> <span class="then" data-v-ebd4f92b>,</span><span class="word" data-v-ebd4f92b>data_src</span><span class="brackets" data-v-ebd4f92b>)</span></div><div data-v-ebd4f92b><span class="word" data-v-ebd4f92b>observer</span><span class="variable" data-v-ebd4f92b>.unobserve</span><span class="brackets" data-v-ebd4f92b>(</span><span class="word" data-v-ebd4f92b>image</span><span class="brackets" data-v-ebd4f92b>)</span></div><div data-v-ebd4f92b><span class="word" data-v-ebd4f92b>console</span><span class="variable" data-v-ebd4f92b>.log</span><span class="brackets" data-v-ebd4f92b>(</span><span class="src" data-v-ebd4f92b>&quot;觸發&quot;</span><span class="brackets" data-v-ebd4f92b>)</span></div><div data-v-ebd4f92b></div></div><div data-v-ebd4f92b><span class="brackets" data-v-ebd4f92b>}</span></div></div><div data-v-ebd4f92b><span class="brackets" data-v-ebd4f92b>})</span></div></div><div data-v-ebd4f92b><span class="brackets" data-v-ebd4f92b>}</span></div><br data-v-ebd4f92b><div data-v-ebd4f92b><span class="function" data-v-ebd4f92b>const </span><span class="word" data-v-ebd4f92b>observer</span><span class="then" data-v-ebd4f92b>= new </span><span class="word" data-v-ebd4f92b>IntersectionObserver</span><span class="brackets" data-v-ebd4f92b>(</span><span class="word" data-v-ebd4f92b>callback</span> <span class="brackets" data-v-ebd4f92b>)</span></div><br data-v-ebd4f92b><div data-v-ebd4f92b><span class="word" data-v-ebd4f92b>images</span><span class="variable" data-v-ebd4f92b>.forEach</span><span class="brackets" data-v-ebd4f92b>(</span> <span class="word" data-v-ebd4f92b>image</span><span class="function" data-v-ebd4f92b>=&gt; </span> <span class="brackets" data-v-ebd4f92b>{</span></div><div class="padTwo VSL" data-v-ebd4f92b><span class="word" data-v-ebd4f92b>observer</span><span class="variable" data-v-ebd4f92b>.observe</span><span class="brackets" data-v-ebd4f92b>(</span> <span class="word" data-v-ebd4f92b>image</span><span class="brackets" data-v-ebd4f92b>)</span><div data-v-ebd4f92b></div></div><div data-v-ebd4f92b><span class="brackets" data-v-ebd4f92b>})</span></div></div><br data-v-ebd4f92b><h2 class="articleCardTitle cor36" data-v-ebd4f92b> [ CSS ] ≫ 如何讓google瀏覽器支持小字體? </h2><p data-v-ebd4f92b>google 最小字體支持12px,想要更小用 transform: scale(0.5)</p><br data-v-ebd4f92b><br data-v-ebd4f92b><h2 class="articleCardTitle cor36" data-v-ebd4f92b>[ CSS ] ≫ Sass 和 SCSS ?</h2><p data-v-ebd4f92b> 語法書寫方式不同，Sass是以嚴格的縮進式語法規則來書寫，不帶大括號({})和分號(;)，而SCSS的語法書寫和我們的CSS語法書寫方式非常類似 </p><br data-v-ebd4f92b><p data-v-ebd4f92b></p><br data-v-ebd4f92b><p class="cor36" data-v-ebd4f92b></p><p data-v-ebd4f92b></p><br data-v-ebd4f92b><br data-v-ebd4f92b><p class="cor36" data-v-ebd4f92b></p><p data-v-ebd4f92b></p><br data-v-ebd4f92b><br data-v-ebd4f92b><div id="" class="articleCardTitle cor36" data-v-ebd4f92b>[ CSS ] ≫</div><p data-v-ebd4f92b></p><br data-v-ebd4f92b><br data-v-ebd4f92b>',383),D=e(()=>a("div",{class:"toTopButton"},[a("div",{class:"disCen"},"___"),a("div",{class:"disCen"},"▲")],-1)),A=[D],M=e(()=>a("div",{class:"toBotButton"},[a("div",{class:"disCen"},"▼"),a("div",{class:"disCen"},"￣")],-1)),j=[M],X={__name:"CssPageOne",setup(t){const v=w(!1);window.addEventListener("scroll",function(){v.value=window.scrollY>0});function o(){window.scrollTo({top:0,left:0,behavior:"smooth"})}function u(){window.scrollTo({top:999999,left:0,behavior:"smooth"})}function b(n){window.scrollTo({top:document.getElementById(`${n}`).offsetTop,behavior:"smooth"})}return(n,d)=>{const h=g("spen");return k(),m(S,null,[a("section",null,[a("div",q,[a("div",y,[a("div",N,[_,a("div",{onClick:d[0]||(d[0]=s=>b("cssOne001")),class:"leftNavText"}," px,rem,em,vw "),a("div",{onClick:d[1]||(d[1]=s=>b("cssOne014")),class:"leftNavText"}," link&@import "),a("div",{onClick:d[2]||(d[2]=s=>b("cssOne002")),class:"leftNavText"},"position"),a("div",{onClick:d[3]||(d[3]=s=>b("cssOne012")),class:"leftNavText"},"display"),a("div",{onClick:d[4]||(d[4]=s=>b("cssOne003")),class:"leftNavText"},"盒模型"),a("div",{onClick:d[5]||(d[5]=s=>b("cssOne004")),class:"leftNavText"},"BFC"),a("div",{onClick:d[6]||(d[6]=s=>b("cssOne005")),class:"leftNavText"}," 選擇器優先級 "),a("div",{onClick:d[7]||(d[7]=s=>b("cssOne006")),class:"leftNavText"}," 水平垂直置中 "),a("div",{onClick:d[8]||(d[8]=s=>b("cssOne007")),class:"leftNavText"},"布局"),a("div",{onClick:d[9]||(d[9]=s=>b("cssOne008")),class:"leftNavText"},"動畫"),a("div",{onClick:d[10]||(d[10]=s=>b("cssOne015")),class:"leftNavText"}," 偽類&偽元素 "),a("div",{onClick:d[11]||(d[11]=s=>b("cssOne011")),class:"leftNavText"}," 隱藏元素的方法 "),a("div",{onClick:d[12]||(d[12]=s=>b("cssOne010")),class:"leftNavText"},"重繪回流"),a("div",{onClick:d[13]||(d[13]=s=>b("cssOne013")),class:"leftNavText"}," 那些屬性可繼承 "),a("div",{onClick:d[14]||(d[14]=s=>b("cssOne009")),class:"leftNavText"},"三角形"),a("div",{onClick:d[15]||(d[15]=s=>b("cssOne016")),class:"leftNavText"}," 白屏首屏時間 "),a("div",{onClick:d[16]||(d[16]=s=>b("cssOne017")),class:"leftNavText"},"圖片懶加載"),a("div",{onClick:d[17]||(d[17]=s=>b("cssOne0")),class:"leftNavText"})])])]),a("div",$,[a("div",B,[a("div",V,[I,a("p",null,[p(h,{class:"cor36"},{default:f(()=>[T("因為: ")]),_:1}),L]),E])])])]),a("div",null,[c(p(i,{name:"fade",tag:"div"},{default:f(()=>[a("div",{onClick:o,class:"toTop"},A)]),_:1},512),[[r,v.value]]),c(p(i,{name:"fade",tag:"div"},{default:f(()=>[a("div",{onClick:u,class:"toBot"},j)]),_:1},512),[[r,v.value]])])],64)}}},R=O(X,[["__scopeId","data-v-ebd4f92b"]]);export{R as default};
