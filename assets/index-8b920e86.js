(function(){const s=document.createElement("link").relList;if(s&&s.supports&&s.supports("modulepreload"))return;for(const c of document.querySelectorAll('link[rel="modulepreload"]'))t(c);new MutationObserver(c=>{for(const e of c)if(e.type==="childList")for(const n of e.addedNodes)n.tagName==="LINK"&&n.rel==="modulepreload"&&t(n)}).observe(document,{childList:!0,subtree:!0});function d(c){const e={};return c.integrity&&(e.integrity=c.integrity),c.referrerPolicy&&(e.referrerPolicy=c.referrerPolicy),c.crossOrigin==="use-credentials"?e.credentials="include":c.crossOrigin==="anonymous"?e.credentials="omit":e.credentials="same-origin",e}function t(c){if(c.ep)return;c.ep=!0;const e=d(c);fetch(c.href,e)}})();function Cc(a,s){const d=Object.create(null),t=a.split(",");for(let c=0;c<t.length;c++)d[t[c]]=!0;return s?c=>!!d[c.toLowerCase()]:c=>!!d[c]}const oa={},Fs=[],Da=()=>{},Cv=()=>!1,xv=/^on[^a-z]/,Vd=a=>xv.test(a),xc=a=>a.startsWith("onUpdate:"),_a=Object.assign,Lc=(a,s)=>{const d=a.indexOf(s);d>-1&&a.splice(d,1)},Lv=Object.prototype.hasOwnProperty,G=(a,s)=>Lv.call(a,s),R=Array.isArray,Is=a=>$d(a)==="[object Map]",sn=a=>$d(a)==="[object Set]",B=a=>typeof a=="function",qa=a=>typeof a=="string",jc=a=>typeof a=="symbol",ma=a=>a!==null&&typeof a=="object",dn=a=>ma(a)&&B(a.then)&&B(a.catch),cn=Object.prototype.toString,$d=a=>cn.call(a),jv=a=>$d(a).slice(8,-1),tn=a=>$d(a)==="[object Object]",Pc=a=>qa(a)&&a!=="NaN"&&a[0]!=="-"&&""+parseInt(a,10)===a,Td=Cc(",key,ref,ref_for,ref_key,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted"),Od=a=>{const s=Object.create(null);return d=>s[d]||(s[d]=a(d))},Pv=/-(\w)/g,Za=Od(a=>a.replace(Pv,(s,d)=>d?d.toUpperCase():"")),Nv=/\B([A-Z])/g,Us=Od(a=>a.replace(Nv,"-$1").toLowerCase()),Ed=Od(a=>a.charAt(0).toUpperCase()+a.slice(1)),Qd=Od(a=>a?`on${Ed(a)}`:""),ed=(a,s)=>!Object.is(a,s),Zd=(a,s)=>{for(let d=0;d<a.length;d++)a[d](s)},Cd=(a,s,d)=>{Object.defineProperty(a,s,{configurable:!0,enumerable:!1,value:d})},Vv=a=>{const s=parseFloat(a);return isNaN(s)?a:s},$v=a=>{const s=qa(a)?Number(a):NaN;return isNaN(s)?a:s};let st;const lc=()=>st||(st=typeof globalThis<"u"?globalThis:typeof self<"u"?self:typeof window<"u"?window:typeof global<"u"?global:{});function Nc(a){if(R(a)){const s={};for(let d=0;d<a.length;d++){const t=a[d],c=qa(t)?Mv(t):Nc(t);if(c)for(const e in c)s[e]=c[e]}return s}else{if(qa(a))return a;if(ma(a))return a}}const Ov=/;(?![^(]*\))/g,Ev=/:([^]+)/,Av=/\/\*[^]*?\*\//g;function Mv(a){const s={};return a.replace(Av,"").split(Ov).forEach(d=>{if(d){const t=d.split(Ev);t.length>1&&(s[t[0].trim()]=t[1].trim())}}),s}function Ad(a){let s="";if(qa(a))s=a;else if(R(a))for(let d=0;d<a.length;d++){const t=Ad(a[d]);t&&(s+=t+" ")}else if(ma(a))for(const d in a)a[d]&&(s+=d+" ");return s.trim()}const Fv="itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly",Iv=Cc(Fv);function nn(a){return!!a||a===""}const Rv=a=>qa(a)?a:a==null?"":R(a)||ma(a)&&(a.toString===cn||!B(a.toString))?JSON.stringify(a,vn,2):String(a),vn=(a,s)=>s&&s.__v_isRef?vn(a,s.value):Is(s)?{[`Map(${s.size})`]:[...s.entries()].reduce((d,[t,c])=>(d[`${t} =>`]=c,d),{})}:sn(s)?{[`Set(${s.size})`]:[...s.values()]}:ma(s)&&!R(s)&&!tn(s)?String(s):s;let Ra;class en{constructor(s=!1){this.detached=s,this._active=!0,this.effects=[],this.cleanups=[],this.parent=Ra,!s&&Ra&&(this.index=(Ra.scopes||(Ra.scopes=[])).push(this)-1)}get active(){return this._active}run(s){if(this._active){const d=Ra;try{return Ra=this,s()}finally{Ra=d}}}on(){Ra=this}off(){Ra=this.parent}stop(s){if(this._active){let d,t;for(d=0,t=this.effects.length;d<t;d++)this.effects[d].stop();for(d=0,t=this.cleanups.length;d<t;d++)this.cleanups[d]();if(this.scopes)for(d=0,t=this.scopes.length;d<t;d++)this.scopes[d].stop(!0);if(!this.detached&&this.parent&&!s){const c=this.parent.scopes.pop();c&&c!==this&&(this.parent.scopes[this.index]=c,c.index=this.index)}this.parent=void 0,this._active=!1}}}function Hv(a){return new en(a)}function Bv(a,s=Ra){s&&s.active&&s.effects.push(a)}function Jv(){return Ra}const Vc=a=>{const s=new Set(a);return s.w=0,s.n=0,s},pn=a=>(a.w&hs)>0,ln=a=>(a.n&hs)>0,Dv=({deps:a})=>{if(a.length)for(let s=0;s<a.length;s++)a[s].w|=hs},Wv=a=>{const{deps:s}=a;if(s.length){let d=0;for(let t=0;t<s.length;t++){const c=s[t];pn(c)&&!ln(c)?c.delete(a):s[d++]=c,c.w&=~hs,c.n&=~hs}s.length=d}},bc=new WeakMap;let sd=0,hs=1;const ic=30;let Ha;const Ps=Symbol(""),rc=Symbol("");class $c{constructor(s,d=null,t){this.fn=s,this.scheduler=d,this.active=!0,this.deps=[],this.parent=void 0,Bv(this,t)}run(){if(!this.active)return this.fn();let s=Ha,d=ms;for(;s;){if(s===this)return;s=s.parent}try{return this.parent=Ha,Ha=this,ms=!0,hs=1<<++sd,sd<=ic?Dv(this):dt(this),this.fn()}finally{sd<=ic&&Wv(this),hs=1<<--sd,Ha=this.parent,ms=d,this.parent=void 0,this.deferStop&&this.stop()}}stop(){Ha===this?this.deferStop=!0:this.active&&(dt(this),this.onStop&&this.onStop(),this.active=!1)}}function dt(a){const{deps:s}=a;if(s.length){for(let d=0;d<s.length;d++)s[d].delete(a);s.length=0}}let ms=!0;const bn=[];function Ks(){bn.push(ms),ms=!1}function Xs(){const a=bn.pop();ms=a===void 0?!0:a}function Oa(a,s,d){if(ms&&Ha){let t=bc.get(a);t||bc.set(a,t=new Map);let c=t.get(d);c||t.set(d,c=Vc()),rn(c)}}function rn(a,s){let d=!1;sd<=ic?ln(a)||(a.n|=hs,d=!pn(a)):d=!a.has(Ha),d&&(a.add(Ha),Ha.deps.push(a))}function vs(a,s,d,t,c,e){const n=bc.get(a);if(!n)return;let l=[];if(s==="clear")l=[...n.values()];else if(d==="length"&&R(a)){const p=Number(t);n.forEach((i,r)=>{(r==="length"||r>=p)&&l.push(i)})}else switch(d!==void 0&&l.push(n.get(d)),s){case"add":R(a)?Pc(d)&&l.push(n.get("length")):(l.push(n.get(Ps)),Is(a)&&l.push(n.get(rc)));break;case"delete":R(a)||(l.push(n.get(Ps)),Is(a)&&l.push(n.get(rc)));break;case"set":Is(a)&&l.push(n.get(Ps));break}if(l.length===1)l[0]&&fc(l[0]);else{const p=[];for(const i of l)i&&p.push(...i);fc(Vc(p))}}function fc(a,s){const d=R(a)?a:[...a];for(const t of d)t.computed&&ct(t);for(const t of d)t.computed||ct(t)}function ct(a,s){(a!==Ha||a.allowRecurse)&&(a.scheduler?a.scheduler():a.run())}const Uv=Cc("__proto__,__v_isRef,__isVue"),fn=new Set(Object.getOwnPropertyNames(Symbol).filter(a=>a!=="arguments"&&a!=="caller").map(a=>Symbol[a]).filter(jc)),Kv=Oc(),Xv=Oc(!1,!0),Yv=Oc(!0),tt=Gv();function Gv(){const a={};return["includes","indexOf","lastIndexOf"].forEach(s=>{a[s]=function(...d){const t=Z(this);for(let e=0,n=this.length;e<n;e++)Oa(t,"get",e+"");const c=t[s](...d);return c===-1||c===!1?t[s](...d.map(Z)):c}}),["push","pop","shift","unshift","splice"].forEach(s=>{a[s]=function(...d){Ks();const t=Z(this)[s].apply(this,d);return Xs(),t}}),a}function Qv(a){const s=Z(this);return Oa(s,"has",a),s.hasOwnProperty(a)}function Oc(a=!1,s=!1){return function(t,c,e){if(c==="__v_isReactive")return!a;if(c==="__v_isReadonly")return a;if(c==="__v_isShallow")return s;if(c==="__v_raw"&&e===(a?s?oe:hn:s?wn:mn).get(t))return t;const n=R(t);if(!a){if(n&&G(tt,c))return Reflect.get(tt,c,e);if(c==="hasOwnProperty")return Qv}const l=Reflect.get(t,c,e);return(jc(c)?fn.has(c):Uv(c))||(a||Oa(t,"get",c),s)?l:ja(l)?n&&Pc(c)?l:l.value:ma(l)?a?gn(l):Fd(l):l}}const Zv=on(),ae=on(!0);function on(a=!1){return function(d,t,c,e){let n=d[t];if(Bs(n)&&ja(n)&&!ja(c))return!1;if(!a&&(!xd(c)&&!Bs(c)&&(n=Z(n),c=Z(c)),!R(d)&&ja(n)&&!ja(c)))return n.value=c,!0;const l=R(d)&&Pc(t)?Number(t)<d.length:G(d,t),p=Reflect.set(d,t,c,e);return d===Z(e)&&(l?ed(c,n)&&vs(d,"set",t,c):vs(d,"add",t,c)),p}}function se(a,s){const d=G(a,s);a[s];const t=Reflect.deleteProperty(a,s);return t&&d&&vs(a,"delete",s,void 0),t}function de(a,s){const d=Reflect.has(a,s);return(!jc(s)||!fn.has(s))&&Oa(a,"has",s),d}function ce(a){return Oa(a,"iterate",R(a)?"length":Ps),Reflect.ownKeys(a)}const un={get:Kv,set:Zv,deleteProperty:se,has:de,ownKeys:ce},te={get:Yv,set(a,s){return!0},deleteProperty(a,s){return!0}},ne=_a({},un,{get:Xv,set:ae}),Ec=a=>a,Md=a=>Reflect.getPrototypeOf(a);function ud(a,s,d=!1,t=!1){a=a.__v_raw;const c=Z(a),e=Z(s);d||(s!==e&&Oa(c,"get",s),Oa(c,"get",e));const{has:n}=Md(c),l=t?Ec:d?Ic:pd;if(n.call(c,s))return l(a.get(s));if(n.call(c,e))return l(a.get(e));a!==c&&a.get(s)}function md(a,s=!1){const d=this.__v_raw,t=Z(d),c=Z(a);return s||(a!==c&&Oa(t,"has",a),Oa(t,"has",c)),a===c?d.has(a):d.has(a)||d.has(c)}function wd(a,s=!1){return a=a.__v_raw,!s&&Oa(Z(a),"iterate",Ps),Reflect.get(a,"size",a)}function nt(a){a=Z(a);const s=Z(this);return Md(s).has.call(s,a)||(s.add(a),vs(s,"add",a,a)),this}function vt(a,s){s=Z(s);const d=Z(this),{has:t,get:c}=Md(d);let e=t.call(d,a);e||(a=Z(a),e=t.call(d,a));const n=c.call(d,a);return d.set(a,s),e?ed(s,n)&&vs(d,"set",a,s):vs(d,"add",a,s),this}function et(a){const s=Z(this),{has:d,get:t}=Md(s);let c=d.call(s,a);c||(a=Z(a),c=d.call(s,a)),t&&t.call(s,a);const e=s.delete(a);return c&&vs(s,"delete",a,void 0),e}function pt(){const a=Z(this),s=a.size!==0,d=a.clear();return s&&vs(a,"clear",void 0,void 0),d}function hd(a,s){return function(t,c){const e=this,n=e.__v_raw,l=Z(n),p=s?Ec:a?Ic:pd;return!a&&Oa(l,"iterate",Ps),n.forEach((i,r)=>t.call(c,p(i),p(r),e))}}function kd(a,s,d){return function(...t){const c=this.__v_raw,e=Z(c),n=Is(e),l=a==="entries"||a===Symbol.iterator&&n,p=a==="keys"&&n,i=c[a](...t),r=d?Ec:s?Ic:pd;return!s&&Oa(e,"iterate",p?rc:Ps),{next(){const{value:o,done:m}=i.next();return m?{value:o,done:m}:{value:l?[r(o[0]),r(o[1])]:r(o),done:m}},[Symbol.iterator](){return this}}}}function bs(a){return function(...s){return a==="delete"?!1:this}}function ve(){const a={get(e){return ud(this,e)},get size(){return wd(this)},has:md,add:nt,set:vt,delete:et,clear:pt,forEach:hd(!1,!1)},s={get(e){return ud(this,e,!1,!0)},get size(){return wd(this)},has:md,add:nt,set:vt,delete:et,clear:pt,forEach:hd(!1,!0)},d={get(e){return ud(this,e,!0)},get size(){return wd(this,!0)},has(e){return md.call(this,e,!0)},add:bs("add"),set:bs("set"),delete:bs("delete"),clear:bs("clear"),forEach:hd(!0,!1)},t={get(e){return ud(this,e,!0,!0)},get size(){return wd(this,!0)},has(e){return md.call(this,e,!0)},add:bs("add"),set:bs("set"),delete:bs("delete"),clear:bs("clear"),forEach:hd(!0,!0)};return["keys","values","entries",Symbol.iterator].forEach(e=>{a[e]=kd(e,!1,!1),d[e]=kd(e,!0,!1),s[e]=kd(e,!1,!0),t[e]=kd(e,!0,!0)}),[a,d,s,t]}const[ee,pe,le,be]=ve();function Ac(a,s){const d=s?a?be:le:a?pe:ee;return(t,c,e)=>c==="__v_isReactive"?!a:c==="__v_isReadonly"?a:c==="__v_raw"?t:Reflect.get(G(d,c)&&c in t?d:t,c,e)}const ie={get:Ac(!1,!1)},re={get:Ac(!1,!0)},fe={get:Ac(!0,!1)},mn=new WeakMap,wn=new WeakMap,hn=new WeakMap,oe=new WeakMap;function ue(a){switch(a){case"Object":case"Array":return 1;case"Map":case"Set":case"WeakMap":case"WeakSet":return 2;default:return 0}}function me(a){return a.__v_skip||!Object.isExtensible(a)?0:ue(jv(a))}function Fd(a){return Bs(a)?a:Mc(a,!1,un,ie,mn)}function kn(a){return Mc(a,!1,ne,re,wn)}function gn(a){return Mc(a,!0,te,fe,hn)}function Mc(a,s,d,t,c){if(!ma(a)||a.__v_raw&&!(s&&a.__v_isReactive))return a;const e=c.get(a);if(e)return e;const n=me(a);if(n===0)return a;const l=new Proxy(a,n===2?t:d);return c.set(a,l),l}function Rs(a){return Bs(a)?Rs(a.__v_raw):!!(a&&a.__v_isReactive)}function Bs(a){return!!(a&&a.__v_isReadonly)}function xd(a){return!!(a&&a.__v_isShallow)}function Tn(a){return Rs(a)||Bs(a)}function Z(a){const s=a&&a.__v_raw;return s?Z(s):a}function Fc(a){return Cd(a,"__v_skip",!0),a}const pd=a=>ma(a)?Fd(a):a,Ic=a=>ma(a)?gn(a):a;function _n(a){ms&&Ha&&(a=Z(a),rn(a.dep||(a.dep=Vc())))}function zn(a,s){a=Z(a);const d=a.dep;d&&fc(d)}function ja(a){return!!(a&&a.__v_isRef===!0)}function ua(a){return Sn(a,!1)}function we(a){return Sn(a,!0)}function Sn(a,s){return ja(a)?a:new he(a,s)}class he{constructor(s,d){this.__v_isShallow=d,this.dep=void 0,this.__v_isRef=!0,this._rawValue=d?s:Z(s),this._value=d?s:pd(s)}get value(){return _n(this),this._value}set value(s){const d=this.__v_isShallow||xd(s)||Bs(s);s=d?s:Z(s),ed(s,this._rawValue)&&(this._rawValue=s,this._value=d?s:pd(s),zn(this))}}function Ns(a){return ja(a)?a.value:a}const ke={get:(a,s,d)=>Ns(Reflect.get(a,s,d)),set:(a,s,d,t)=>{const c=a[s];return ja(c)&&!ja(d)?(c.value=d,!0):Reflect.set(a,s,d,t)}};function qn(a){return Rs(a)?a:new Proxy(a,ke)}class ge{constructor(s,d,t,c){this._setter=d,this.dep=void 0,this.__v_isRef=!0,this.__v_isReadonly=!1,this._dirty=!0,this.effect=new $c(s,()=>{this._dirty||(this._dirty=!0,zn(this))}),this.effect.computed=this,this.effect.active=this._cacheable=!c,this.__v_isReadonly=t}get value(){const s=Z(this);return _n(s),(s._dirty||!s._cacheable)&&(s._dirty=!1,s._value=s.effect.run()),s._value}set value(s){this._setter(s)}}function Te(a,s,d=!1){let t,c;const e=B(a);return e?(t=a,c=Da):(t=a.get,c=a.set),new ge(t,c,e||!c,d)}function ws(a,s,d,t){let c;try{c=t?a(...t):a()}catch(e){Id(e,s,d)}return c}function Fa(a,s,d,t){if(B(a)){const e=ws(a,s,d,t);return e&&dn(e)&&e.catch(n=>{Id(n,s,d)}),e}const c=[];for(let e=0;e<a.length;e++)c.push(Fa(a[e],s,d,t));return c}function Id(a,s,d,t=!0){const c=s?s.vnode:null;if(s){let e=s.parent;const n=s.proxy,l=d;for(;e;){const i=e.ec;if(i){for(let r=0;r<i.length;r++)if(i[r](a,n,l)===!1)return}e=e.parent}const p=s.appContext.config.errorHandler;if(p){ws(p,null,10,[a,n,l]);return}}_e(a,d,c,t)}function _e(a,s,d,t=!0){console.error(a)}let ld=!1,oc=!1;const La=[];let Qa=0;const Hs=[];let ts=null,Cs=0;const yn=Promise.resolve();let Rc=null;function Cn(a){const s=Rc||yn;return a?s.then(this?a.bind(this):a):s}function ze(a){let s=Qa+1,d=La.length;for(;s<d;){const t=s+d>>>1;bd(La[t])<a?s=t+1:d=t}return s}function Hc(a){(!La.length||!La.includes(a,ld&&a.allowRecurse?Qa+1:Qa))&&(a.id==null?La.push(a):La.splice(ze(a.id),0,a),xn())}function xn(){!ld&&!oc&&(oc=!0,Rc=yn.then(jn))}function Se(a){const s=La.indexOf(a);s>Qa&&La.splice(s,1)}function qe(a){R(a)?Hs.push(...a):(!ts||!ts.includes(a,a.allowRecurse?Cs+1:Cs))&&Hs.push(a),xn()}function lt(a,s=ld?Qa+1:0){for(;s<La.length;s++){const d=La[s];d&&d.pre&&(La.splice(s,1),s--,d())}}function Ln(a){if(Hs.length){const s=[...new Set(Hs)];if(Hs.length=0,ts){ts.push(...s);return}for(ts=s,ts.sort((d,t)=>bd(d)-bd(t)),Cs=0;Cs<ts.length;Cs++)ts[Cs]();ts=null,Cs=0}}const bd=a=>a.id==null?1/0:a.id,ye=(a,s)=>{const d=bd(a)-bd(s);if(d===0){if(a.pre&&!s.pre)return-1;if(s.pre&&!a.pre)return 1}return d};function jn(a){oc=!1,ld=!0,La.sort(ye);const s=Da;try{for(Qa=0;Qa<La.length;Qa++){const d=La[Qa];d&&d.active!==!1&&ws(d,null,14)}}finally{Qa=0,La.length=0,Ln(),ld=!1,Rc=null,(La.length||Hs.length)&&jn()}}function Ce(a,s,...d){if(a.isUnmounted)return;const t=a.vnode.props||oa;let c=d;const e=s.startsWith("update:"),n=e&&s.slice(7);if(n&&n in t){const r=`${n==="modelValue"?"model":n}Modifiers`,{number:o,trim:m}=t[r]||oa;m&&(c=d.map(g=>qa(g)?g.trim():g)),o&&(c=d.map(Vv))}let l,p=t[l=Qd(s)]||t[l=Qd(Za(s))];!p&&e&&(p=t[l=Qd(Us(s))]),p&&Fa(p,a,6,c);const i=t[l+"Once"];if(i){if(!a.emitted)a.emitted={};else if(a.emitted[l])return;a.emitted[l]=!0,Fa(i,a,6,c)}}function Pn(a,s,d=!1){const t=s.emitsCache,c=t.get(a);if(c!==void 0)return c;const e=a.emits;let n={},l=!1;if(!B(a)){const p=i=>{const r=Pn(i,s,!0);r&&(l=!0,_a(n,r))};!d&&s.mixins.length&&s.mixins.forEach(p),a.extends&&p(a.extends),a.mixins&&a.mixins.forEach(p)}return!e&&!l?(ma(a)&&t.set(a,null),null):(R(e)?e.forEach(p=>n[p]=null):_a(n,e),ma(a)&&t.set(a,n),n)}function Rd(a,s){return!a||!Vd(s)?!1:(s=s.slice(2).replace(/Once$/,""),G(a,s[0].toLowerCase()+s.slice(1))||G(a,Us(s))||G(a,s))}let Aa=null,Hd=null;function Ld(a){const s=Aa;return Aa=a,Hd=a&&a.type.__scopeId||null,s}function wa(a){Hd=a}function ha(){Hd=null}function C(a,s=Aa,d){if(!s||a._n)return a;const t=(...c)=>{t._d&&Tt(-1);const e=Ld(s);let n;try{n=a(...c)}finally{Ld(e),t._d&&Tt(1)}return n};return t._n=!0,t._c=!0,t._d=!0,t}function ac(a){const{type:s,vnode:d,proxy:t,withProxy:c,props:e,propsOptions:[n],slots:l,attrs:p,emit:i,render:r,renderCache:o,data:m,setupState:g,ctx:L,inheritAttrs:j}=a;let I,V;const E=Ld(a);try{if(d.shapeFlag&4){const $=c||t;I=Ga(r.call($,$,o,e,g,m,L)),V=p}else{const $=s;I=Ga($.length>1?$(e,{attrs:p,slots:l,emit:i}):$(e,null)),V=s.props?p:xe(p)}}catch($){td.length=0,Id($,a,1),I=T(Wa)}let D=I;if(V&&j!==!1){const $=Object.keys(V),{shapeFlag:la}=D;$.length&&la&7&&(n&&$.some(xc)&&(V=Le(V,n)),D=ks(D,V))}return d.dirs&&(D=ks(D),D.dirs=D.dirs?D.dirs.concat(d.dirs):d.dirs),d.transition&&(D.transition=d.transition),I=D,Ld(E),I}const xe=a=>{let s;for(const d in a)(d==="class"||d==="style"||Vd(d))&&((s||(s={}))[d]=a[d]);return s},Le=(a,s)=>{const d={};for(const t in a)(!xc(t)||!(t.slice(9)in s))&&(d[t]=a[t]);return d};function je(a,s,d){const{props:t,children:c,component:e}=a,{props:n,children:l,patchFlag:p}=s,i=e.emitsOptions;if(s.dirs||s.transition)return!0;if(d&&p>=0){if(p&1024)return!0;if(p&16)return t?bt(t,n,i):!!n;if(p&8){const r=s.dynamicProps;for(let o=0;o<r.length;o++){const m=r[o];if(n[m]!==t[m]&&!Rd(i,m))return!0}}}else return(c||l)&&(!l||!l.$stable)?!0:t===n?!1:t?n?bt(t,n,i):!0:!!n;return!1}function bt(a,s,d){const t=Object.keys(s);if(t.length!==Object.keys(a).length)return!0;for(let c=0;c<t.length;c++){const e=t[c];if(s[e]!==a[e]&&!Rd(d,e))return!0}return!1}function Pe({vnode:a,parent:s},d){for(;s&&s.subTree===a;)(a=s.vnode).el=d,s=s.parent}const Ne=a=>a.__isSuspense;function Ve(a,s){s&&s.pendingBranch?R(a)?s.effects.push(...a):s.effects.push(a):qe(a)}const gd={};function _d(a,s,d){return Nn(a,s,d)}function Nn(a,s,{immediate:d,deep:t,flush:c,onTrack:e,onTrigger:n}=oa){var l;const p=Jv()===((l=ya)==null?void 0:l.scope)?ya:null;let i,r=!1,o=!1;if(ja(a)?(i=()=>a.value,r=xd(a)):Rs(a)?(i=()=>a,t=!0):R(a)?(o=!0,r=a.some($=>Rs($)||xd($)),i=()=>a.map($=>{if(ja($))return $.value;if(Rs($))return js($);if(B($))return ws($,p,2)})):B(a)?s?i=()=>ws(a,p,2):i=()=>{if(!(p&&p.isUnmounted))return m&&m(),Fa(a,p,3,[g])}:i=Da,s&&t){const $=i;i=()=>js($())}let m,g=$=>{m=E.onStop=()=>{ws($,p,4)}},L;if(rd)if(g=Da,s?d&&Fa(s,p,3,[i(),o?[]:void 0,g]):i(),c==="sync"){const $=Lp();L=$.__watcherHandles||($.__watcherHandles=[])}else return Da;let j=o?new Array(a.length).fill(gd):gd;const I=()=>{if(E.active)if(s){const $=E.run();(t||r||(o?$.some((la,ga)=>ed(la,j[ga])):ed($,j)))&&(m&&m(),Fa(s,p,3,[$,j===gd?void 0:o&&j[0]===gd?[]:j,g]),j=$)}else E.run()};I.allowRecurse=!!s;let V;c==="sync"?V=I:c==="post"?V=()=>$a(I,p&&p.suspense):(I.pre=!0,p&&(I.id=p.uid),V=()=>Hc(I));const E=new $c(i,V);s?d?I():j=E.run():c==="post"?$a(E.run.bind(E),p&&p.suspense):E.run();const D=()=>{E.stop(),p&&p.scope&&Lc(p.scope.effects,E)};return L&&L.push(D),D}function $e(a,s,d){const t=this.proxy,c=qa(a)?a.includes(".")?Vn(t,a):()=>t[a]:a.bind(t,t);let e;B(s)?e=s:(e=s.handler,d=s);const n=ya;Js(this);const l=Nn(c,e.bind(t),d);return n?Js(n):Vs(),l}function Vn(a,s){const d=s.split(".");return()=>{let t=a;for(let c=0;c<d.length&&t;c++)t=t[d[c]];return t}}function js(a,s){if(!ma(a)||a.__v_skip||(s=s||new Set,s.has(a)))return a;if(s.add(a),ja(a))js(a.value,s);else if(R(a))for(let d=0;d<a.length;d++)js(a[d],s);else if(sn(a)||Is(a))a.forEach(d=>{js(d,s)});else if(tn(a))for(const d in a)js(a[d],s);return a}function X(a,s){const d=Aa;if(d===null)return a;const t=Ud(d)||d.proxy,c=a.dirs||(a.dirs=[]);for(let e=0;e<s.length;e++){let[n,l,p,i=oa]=s[e];n&&(B(n)&&(n={mounted:n,updated:n}),n.deep&&js(l),c.push({dir:n,instance:t,value:l,oldValue:void 0,arg:p,modifiers:i}))}return a}function zs(a,s,d,t){const c=a.dirs,e=s&&s.dirs;for(let n=0;n<c.length;n++){const l=c[n];e&&(l.oldValue=e[n].value);let p=l.dir[t];p&&(Ks(),Fa(p,d,8,[a.el,l,a,s]),Xs())}}function Oe(){const a={isMounted:!1,isLeaving:!1,isUnmounting:!1,leavingVNodes:new Map};return Fn(()=>{a.isMounted=!0}),In(()=>{a.isUnmounting=!0}),a}const Ma=[Function,Array],$n={mode:String,appear:Boolean,persisted:Boolean,onBeforeEnter:Ma,onEnter:Ma,onAfterEnter:Ma,onEnterCancelled:Ma,onBeforeLeave:Ma,onLeave:Ma,onAfterLeave:Ma,onLeaveCancelled:Ma,onBeforeAppear:Ma,onAppear:Ma,onAfterAppear:Ma,onAppearCancelled:Ma},Ee={name:"BaseTransition",props:$n,setup(a,{slots:s}){const d=Tp(),t=Oe();let c;return()=>{const e=s.default&&En(s.default(),!0);if(!e||!e.length)return;let n=e[0];if(e.length>1){for(const j of e)if(j.type!==Wa){n=j;break}}const l=Z(a),{mode:p}=l;if(t.isLeaving)return sc(n);const i=it(n);if(!i)return sc(n);const r=uc(i,l,t,d);mc(i,r);const o=d.subTree,m=o&&it(o);let g=!1;const{getTransitionKey:L}=i.type;if(L){const j=L();c===void 0?c=j:j!==c&&(c=j,g=!0)}if(m&&m.type!==Wa&&(!xs(i,m)||g)){const j=uc(m,l,t,d);if(mc(m,j),p==="out-in")return t.isLeaving=!0,j.afterLeave=()=>{t.isLeaving=!1,d.update.active!==!1&&d.update()},sc(n);p==="in-out"&&i.type!==Wa&&(j.delayLeave=(I,V,E)=>{const D=On(t,m);D[String(m.key)]=m,I._leaveCb=()=>{V(),I._leaveCb=void 0,delete r.delayedLeave},r.delayedLeave=E})}return n}}},Ae=Ee;function On(a,s){const{leavingVNodes:d}=a;let t=d.get(s.type);return t||(t=Object.create(null),d.set(s.type,t)),t}function uc(a,s,d,t){const{appear:c,mode:e,persisted:n=!1,onBeforeEnter:l,onEnter:p,onAfterEnter:i,onEnterCancelled:r,onBeforeLeave:o,onLeave:m,onAfterLeave:g,onLeaveCancelled:L,onBeforeAppear:j,onAppear:I,onAfterAppear:V,onAppearCancelled:E}=s,D=String(a.key),$=On(d,a),la=(J,ra)=>{J&&Fa(J,t,9,ra)},ga=(J,ra)=>{const na=ra[1];la(J,ra),R(J)?J.every(Sa=>Sa.length<=1)&&na():J.length<=1&&na()},Ca={mode:e,persisted:n,beforeEnter(J){let ra=l;if(!d.isMounted)if(c)ra=j||l;else return;J._leaveCb&&J._leaveCb(!0);const na=$[D];na&&xs(a,na)&&na.el._leaveCb&&na.el._leaveCb(),la(ra,[J])},enter(J){let ra=p,na=i,Sa=r;if(!d.isMounted)if(c)ra=I||p,na=V||i,Sa=E||r;else return;let O=!1;const ca=J._enterCb=Pa=>{O||(O=!0,Pa?la(Sa,[J]):la(na,[J]),Ca.delayedLeave&&Ca.delayedLeave(),J._enterCb=void 0)};ra?ga(ra,[J,ca]):ca()},leave(J,ra){const na=String(a.key);if(J._enterCb&&J._enterCb(!0),d.isUnmounting)return ra();la(o,[J]);let Sa=!1;const O=J._leaveCb=ca=>{Sa||(Sa=!0,ra(),ca?la(L,[J]):la(g,[J]),J._leaveCb=void 0,$[na]===a&&delete $[na])};$[na]=a,m?ga(m,[J,O]):O()},clone(J){return uc(J,s,d,t)}};return Ca}function sc(a){if(Bd(a))return a=ks(a),a.children=null,a}function it(a){return Bd(a)?a.children?a.children[0]:void 0:a}function mc(a,s){a.shapeFlag&6&&a.component?mc(a.component.subTree,s):a.shapeFlag&128?(a.ssContent.transition=s.clone(a.ssContent),a.ssFallback.transition=s.clone(a.ssFallback)):a.transition=s}function En(a,s=!1,d){let t=[],c=0;for(let e=0;e<a.length;e++){let n=a[e];const l=d==null?n.key:String(d)+String(n.key!=null?n.key:e);n.type===Q?(n.patchFlag&128&&c++,t=t.concat(En(n.children,s,l))):(s||n.type!==Wa)&&t.push(l!=null?ks(n,{key:l}):n)}if(c>1)for(let e=0;e<t.length;e++)t[e].patchFlag=-2;return t}function An(a,s){return B(a)?(()=>_a({name:a.name},s,{setup:a}))():a}const zd=a=>!!a.type.__asyncLoader,Bd=a=>a.type.__isKeepAlive;function Me(a,s){Mn(a,"a",s)}function Fe(a,s){Mn(a,"da",s)}function Mn(a,s,d=ya){const t=a.__wdc||(a.__wdc=()=>{let c=d;for(;c;){if(c.isDeactivated)return;c=c.parent}return a()});if(Jd(s,t,d),d){let c=d.parent;for(;c&&c.parent;)Bd(c.parent.vnode)&&Ie(t,s,d,c),c=c.parent}}function Ie(a,s,d,t){const c=Jd(s,a,t,!0);Rn(()=>{Lc(t[s],c)},d)}function Jd(a,s,d=ya,t=!1){if(d){const c=d[a]||(d[a]=[]),e=s.__weh||(s.__weh=(...n)=>{if(d.isUnmounted)return;Ks(),Js(d);const l=Fa(s,d,a,n);return Vs(),Xs(),l});return t?c.unshift(e):c.push(e),e}}const es=a=>(s,d=ya)=>(!rd||a==="sp")&&Jd(a,(...t)=>s(...t),d),Re=es("bm"),Fn=es("m"),He=es("bu"),Be=es("u"),In=es("bum"),Rn=es("um"),Je=es("sp"),De=es("rtg"),We=es("rtc");function Ue(a,s=ya){Jd("ec",a,s)}const Hn="components";function za(a,s){return Xe(Hn,a,!0,s)||a}const Ke=Symbol.for("v-ndc");function Xe(a,s,d=!0,t=!1){const c=Aa||ya;if(c){const e=c.type;if(a===Hn){const l=yp(e,!1);if(l&&(l===s||l===Za(s)||l===Ed(Za(s))))return e}const n=rt(c[a]||e[a],s)||rt(c.appContext[a],s);return!n&&t?e:n}}function rt(a,s){return a&&(a[s]||a[Za(s)]||a[Ed(Za(s))])}const wc=a=>a?av(a)?Ud(a)||a.proxy:wc(a.parent):null,cd=_a(Object.create(null),{$:a=>a,$el:a=>a.vnode.el,$data:a=>a.data,$props:a=>a.props,$attrs:a=>a.attrs,$slots:a=>a.slots,$refs:a=>a.refs,$parent:a=>wc(a.parent),$root:a=>wc(a.root),$emit:a=>a.emit,$options:a=>Bc(a),$forceUpdate:a=>a.f||(a.f=()=>Hc(a.update)),$nextTick:a=>a.n||(a.n=Cn.bind(a.proxy)),$watch:a=>$e.bind(a)}),dc=(a,s)=>a!==oa&&!a.__isScriptSetup&&G(a,s),Ye={get({_:a},s){const{ctx:d,setupState:t,data:c,props:e,accessCache:n,type:l,appContext:p}=a;let i;if(s[0]!=="$"){const g=n[s];if(g!==void 0)switch(g){case 1:return t[s];case 2:return c[s];case 4:return d[s];case 3:return e[s]}else{if(dc(t,s))return n[s]=1,t[s];if(c!==oa&&G(c,s))return n[s]=2,c[s];if((i=a.propsOptions[0])&&G(i,s))return n[s]=3,e[s];if(d!==oa&&G(d,s))return n[s]=4,d[s];hc&&(n[s]=0)}}const r=cd[s];let o,m;if(r)return s==="$attrs"&&Oa(a,"get",s),r(a);if((o=l.__cssModules)&&(o=o[s]))return o;if(d!==oa&&G(d,s))return n[s]=4,d[s];if(m=p.config.globalProperties,G(m,s))return m[s]},set({_:a},s,d){const{data:t,setupState:c,ctx:e}=a;return dc(c,s)?(c[s]=d,!0):t!==oa&&G(t,s)?(t[s]=d,!0):G(a.props,s)||s[0]==="$"&&s.slice(1)in a?!1:(e[s]=d,!0)},has({_:{data:a,setupState:s,accessCache:d,ctx:t,appContext:c,propsOptions:e}},n){let l;return!!d[n]||a!==oa&&G(a,n)||dc(s,n)||(l=e[0])&&G(l,n)||G(t,n)||G(cd,n)||G(c.config.globalProperties,n)},defineProperty(a,s,d){return d.get!=null?a._.accessCache[s]=0:G(d,"value")&&this.set(a,s,d.value,null),Reflect.defineProperty(a,s,d)}};function ft(a){return R(a)?a.reduce((s,d)=>(s[d]=null,s),{}):a}let hc=!0;function Ge(a){const s=Bc(a),d=a.proxy,t=a.ctx;hc=!1,s.beforeCreate&&ot(s.beforeCreate,a,"bc");const{data:c,computed:e,methods:n,watch:l,provide:p,inject:i,created:r,beforeMount:o,mounted:m,beforeUpdate:g,updated:L,activated:j,deactivated:I,beforeDestroy:V,beforeUnmount:E,destroyed:D,unmounted:$,render:la,renderTracked:ga,renderTriggered:Ca,errorCaptured:J,serverPrefetch:ra,expose:na,inheritAttrs:Sa,components:O,directives:ca,filters:Pa}=s;if(i&&Qe(i,t,null),n)for(const pa in n){const aa=n[pa];B(aa)&&(t[pa]=aa.bind(d))}if(c){const pa=c.call(d,d);ma(pa)&&(a.data=Fd(pa))}if(hc=!0,e)for(const pa in e){const aa=e[pa],ds=B(aa)?aa.bind(d,d):B(aa.get)?aa.get.bind(d,d):Da,ls=!B(aa)&&B(aa.set)?aa.set.bind(d):Da,Ka=Ba({get:ds,set:ls});Object.defineProperty(t,pa,{enumerable:!0,configurable:!0,get:()=>Ka.value,set:Va=>Ka.value=Va})}if(l)for(const pa in l)Bn(l[pa],t,d,pa);if(p){const pa=B(p)?p.call(d):p;Reflect.ownKeys(pa).forEach(aa=>{Sd(aa,pa[aa])})}r&&ot(r,a,"c");function ka(pa,aa){R(aa)?aa.forEach(ds=>pa(ds.bind(d))):aa&&pa(aa.bind(d))}if(ka(Re,o),ka(Fn,m),ka(He,g),ka(Be,L),ka(Me,j),ka(Fe,I),ka(Ue,J),ka(We,ga),ka(De,Ca),ka(In,E),ka(Rn,$),ka(Je,ra),R(na))if(na.length){const pa=a.exposed||(a.exposed={});na.forEach(aa=>{Object.defineProperty(pa,aa,{get:()=>d[aa],set:ds=>d[aa]=ds})})}else a.exposed||(a.exposed={});la&&a.render===Da&&(a.render=la),Sa!=null&&(a.inheritAttrs=Sa),O&&(a.components=O),ca&&(a.directives=ca)}function Qe(a,s,d=Da){R(a)&&(a=kc(a));for(const t in a){const c=a[t];let e;ma(c)?"default"in c?e=ns(c.from||t,c.default,!0):e=ns(c.from||t):e=ns(c),ja(e)?Object.defineProperty(s,t,{enumerable:!0,configurable:!0,get:()=>e.value,set:n=>e.value=n}):s[t]=e}}function ot(a,s,d){Fa(R(a)?a.map(t=>t.bind(s.proxy)):a.bind(s.proxy),s,d)}function Bn(a,s,d,t){const c=t.includes(".")?Vn(d,t):()=>d[t];if(qa(a)){const e=s[a];B(e)&&_d(c,e)}else if(B(a))_d(c,a.bind(d));else if(ma(a))if(R(a))a.forEach(e=>Bn(e,s,d,t));else{const e=B(a.handler)?a.handler.bind(d):s[a.handler];B(e)&&_d(c,e,a)}}function Bc(a){const s=a.type,{mixins:d,extends:t}=s,{mixins:c,optionsCache:e,config:{optionMergeStrategies:n}}=a.appContext,l=e.get(s);let p;return l?p=l:!c.length&&!d&&!t?p=s:(p={},c.length&&c.forEach(i=>jd(p,i,n,!0)),jd(p,s,n)),ma(s)&&e.set(s,p),p}function jd(a,s,d,t=!1){const{mixins:c,extends:e}=s;e&&jd(a,e,d,!0),c&&c.forEach(n=>jd(a,n,d,!0));for(const n in s)if(!(t&&n==="expose")){const l=Ze[n]||d&&d[n];a[n]=l?l(a[n],s[n]):s[n]}return a}const Ze={data:ut,props:mt,emits:mt,methods:dd,computed:dd,beforeCreate:Na,created:Na,beforeMount:Na,mounted:Na,beforeUpdate:Na,updated:Na,beforeDestroy:Na,beforeUnmount:Na,destroyed:Na,unmounted:Na,activated:Na,deactivated:Na,errorCaptured:Na,serverPrefetch:Na,components:dd,directives:dd,watch:sp,provide:ut,inject:ap};function ut(a,s){return s?a?function(){return _a(B(a)?a.call(this,this):a,B(s)?s.call(this,this):s)}:s:a}function ap(a,s){return dd(kc(a),kc(s))}function kc(a){if(R(a)){const s={};for(let d=0;d<a.length;d++)s[a[d]]=a[d];return s}return a}function Na(a,s){return a?[...new Set([].concat(a,s))]:s}function dd(a,s){return a?_a(Object.create(null),a,s):s}function mt(a,s){return a?R(a)&&R(s)?[...new Set([...a,...s])]:_a(Object.create(null),ft(a),ft(s??{})):s}function sp(a,s){if(!a)return s;if(!s)return a;const d=_a(Object.create(null),a);for(const t in s)d[t]=Na(a[t],s[t]);return d}function Jn(){return{app:null,config:{isNativeTag:Cv,performance:!1,globalProperties:{},optionMergeStrategies:{},errorHandler:void 0,warnHandler:void 0,compilerOptions:{}},mixins:[],components:{},directives:{},provides:Object.create(null),optionsCache:new WeakMap,propsCache:new WeakMap,emitsCache:new WeakMap}}let dp=0;function cp(a,s){return function(t,c=null){B(t)||(t=_a({},t)),c!=null&&!ma(c)&&(c=null);const e=Jn(),n=new Set;let l=!1;const p=e.app={_uid:dp++,_component:t,_props:c,_container:null,_context:e,_instance:null,version:jp,get config(){return e.config},set config(i){},use(i,...r){return n.has(i)||(i&&B(i.install)?(n.add(i),i.install(p,...r)):B(i)&&(n.add(i),i(p,...r))),p},mixin(i){return e.mixins.includes(i)||e.mixins.push(i),p},component(i,r){return r?(e.components[i]=r,p):e.components[i]},directive(i,r){return r?(e.directives[i]=r,p):e.directives[i]},mount(i,r,o){if(!l){const m=T(t,c);return m.appContext=e,r&&s?s(m,i):a(m,i,o),l=!0,p._container=i,i.__vue_app__=p,Ud(m.component)||m.component.proxy}},unmount(){l&&(a(null,p._container),delete p._container.__vue_app__)},provide(i,r){return e.provides[i]=r,p},runWithContext(i){Pd=p;try{return i()}finally{Pd=null}}};return p}}let Pd=null;function Sd(a,s){if(ya){let d=ya.provides;const t=ya.parent&&ya.parent.provides;t===d&&(d=ya.provides=Object.create(t)),d[a]=s}}function ns(a,s,d=!1){const t=ya||Aa;if(t||Pd){const c=t?t.parent==null?t.vnode.appContext&&t.vnode.appContext.provides:t.parent.provides:Pd._context.provides;if(c&&a in c)return c[a];if(arguments.length>1)return d&&B(s)?s.call(t&&t.proxy):s}}function tp(a,s,d,t=!1){const c={},e={};Cd(e,Wd,1),a.propsDefaults=Object.create(null),Dn(a,s,c,e);for(const n in a.propsOptions[0])n in c||(c[n]=void 0);d?a.props=t?c:kn(c):a.type.props?a.props=c:a.props=e,a.attrs=e}function np(a,s,d,t){const{props:c,attrs:e,vnode:{patchFlag:n}}=a,l=Z(c),[p]=a.propsOptions;let i=!1;if((t||n>0)&&!(n&16)){if(n&8){const r=a.vnode.dynamicProps;for(let o=0;o<r.length;o++){let m=r[o];if(Rd(a.emitsOptions,m))continue;const g=s[m];if(p)if(G(e,m))g!==e[m]&&(e[m]=g,i=!0);else{const L=Za(m);c[L]=gc(p,l,L,g,a,!1)}else g!==e[m]&&(e[m]=g,i=!0)}}}else{Dn(a,s,c,e)&&(i=!0);let r;for(const o in l)(!s||!G(s,o)&&((r=Us(o))===o||!G(s,r)))&&(p?d&&(d[o]!==void 0||d[r]!==void 0)&&(c[o]=gc(p,l,o,void 0,a,!0)):delete c[o]);if(e!==l)for(const o in e)(!s||!G(s,o))&&(delete e[o],i=!0)}i&&vs(a,"set","$attrs")}function Dn(a,s,d,t){const[c,e]=a.propsOptions;let n=!1,l;if(s)for(let p in s){if(Td(p))continue;const i=s[p];let r;c&&G(c,r=Za(p))?!e||!e.includes(r)?d[r]=i:(l||(l={}))[r]=i:Rd(a.emitsOptions,p)||(!(p in t)||i!==t[p])&&(t[p]=i,n=!0)}if(e){const p=Z(d),i=l||oa;for(let r=0;r<e.length;r++){const o=e[r];d[o]=gc(c,p,o,i[o],a,!G(i,o))}}return n}function gc(a,s,d,t,c,e){const n=a[d];if(n!=null){const l=G(n,"default");if(l&&t===void 0){const p=n.default;if(n.type!==Function&&!n.skipFactory&&B(p)){const{propsDefaults:i}=c;d in i?t=i[d]:(Js(c),t=i[d]=p.call(null,s),Vs())}else t=p}n[0]&&(e&&!l?t=!1:n[1]&&(t===""||t===Us(d))&&(t=!0))}return t}function Wn(a,s,d=!1){const t=s.propsCache,c=t.get(a);if(c)return c;const e=a.props,n={},l=[];let p=!1;if(!B(a)){const r=o=>{p=!0;const[m,g]=Wn(o,s,!0);_a(n,m),g&&l.push(...g)};!d&&s.mixins.length&&s.mixins.forEach(r),a.extends&&r(a.extends),a.mixins&&a.mixins.forEach(r)}if(!e&&!p)return ma(a)&&t.set(a,Fs),Fs;if(R(e))for(let r=0;r<e.length;r++){const o=Za(e[r]);wt(o)&&(n[o]=oa)}else if(e)for(const r in e){const o=Za(r);if(wt(o)){const m=e[r],g=n[o]=R(m)||B(m)?{type:m}:_a({},m);if(g){const L=gt(Boolean,g.type),j=gt(String,g.type);g[0]=L>-1,g[1]=j<0||L<j,(L>-1||G(g,"default"))&&l.push(o)}}}const i=[n,l];return ma(a)&&t.set(a,i),i}function wt(a){return a[0]!=="$"}function ht(a){const s=a&&a.toString().match(/^\s*(function|class) (\w+)/);return s?s[2]:a===null?"null":""}function kt(a,s){return ht(a)===ht(s)}function gt(a,s){return R(s)?s.findIndex(d=>kt(d,a)):B(s)&&kt(s,a)?0:-1}const Un=a=>a[0]==="_"||a==="$stable",Jc=a=>R(a)?a.map(Ga):[Ga(a)],vp=(a,s,d)=>{if(s._n)return s;const t=C((...c)=>Jc(s(...c)),d);return t._c=!1,t},Kn=(a,s,d)=>{const t=a._ctx;for(const c in a){if(Un(c))continue;const e=a[c];if(B(e))s[c]=vp(c,e,t);else if(e!=null){const n=Jc(e);s[c]=()=>n}}},Xn=(a,s)=>{const d=Jc(s);a.slots.default=()=>d},ep=(a,s)=>{if(a.vnode.shapeFlag&32){const d=s._;d?(a.slots=Z(s),Cd(s,"_",d)):Kn(s,a.slots={})}else a.slots={},s&&Xn(a,s);Cd(a.slots,Wd,1)},pp=(a,s,d)=>{const{vnode:t,slots:c}=a;let e=!0,n=oa;if(t.shapeFlag&32){const l=s._;l?d&&l===1?e=!1:(_a(c,s),!d&&l===1&&delete c._):(e=!s.$stable,Kn(s,c)),n=s}else s&&(Xn(a,s),n={default:1});if(e)for(const l in c)!Un(l)&&!(l in n)&&delete c[l]};function Tc(a,s,d,t,c=!1){if(R(a)){a.forEach((m,g)=>Tc(m,s&&(R(s)?s[g]:s),d,t,c));return}if(zd(t)&&!c)return;const e=t.shapeFlag&4?Ud(t.component)||t.component.proxy:t.el,n=c?null:e,{i:l,r:p}=a,i=s&&s.r,r=l.refs===oa?l.refs={}:l.refs,o=l.setupState;if(i!=null&&i!==p&&(qa(i)?(r[i]=null,G(o,i)&&(o[i]=null)):ja(i)&&(i.value=null)),B(p))ws(p,l,12,[n,r]);else{const m=qa(p),g=ja(p);if(m||g){const L=()=>{if(a.f){const j=m?G(o,p)?o[p]:r[p]:p.value;c?R(j)&&Lc(j,e):R(j)?j.includes(e)||j.push(e):m?(r[p]=[e],G(o,p)&&(o[p]=r[p])):(p.value=[e],a.k&&(r[a.k]=p.value))}else m?(r[p]=n,G(o,p)&&(o[p]=n)):g&&(p.value=n,a.k&&(r[a.k]=n))};n?(L.id=-1,$a(L,d)):L()}}}const $a=Ve;function lp(a){return bp(a)}function bp(a,s){const d=lc();d.__VUE__=!0;const{insert:t,remove:c,patchProp:e,createElement:n,createText:l,createComment:p,setText:i,setElementText:r,parentNode:o,nextSibling:m,setScopeId:g=Da,insertStaticContent:L}=a,j=(b,f,u,w=null,k=null,_=null,x=!1,S=null,q=!!f.dynamicChildren)=>{if(b===f)return;b&&!xs(b,f)&&(w=h(b),Va(b,k,_,!0),b=null),f.patchFlag===-2&&(q=!1,f.dynamicChildren=null);const{type:z,ref:M,shapeFlag:N}=f;switch(z){case Dd:I(b,f,u,w);break;case Wa:V(b,f,u,w);break;case qd:b==null&&E(f,u,w,x);break;case Q:O(b,f,u,w,k,_,x,S,q);break;default:N&1?la(b,f,u,w,k,_,x,S,q):N&6?ca(b,f,u,w,k,_,x,S,q):(N&64||N&128)&&z.process(b,f,u,w,k,_,x,S,q,y)}M!=null&&k&&Tc(M,b&&b.ref,_,f||b,!f)},I=(b,f,u,w)=>{if(b==null)t(f.el=l(f.children),u,w);else{const k=f.el=b.el;f.children!==b.children&&i(k,f.children)}},V=(b,f,u,w)=>{b==null?t(f.el=p(f.children||""),u,w):f.el=b.el},E=(b,f,u,w)=>{[b.el,b.anchor]=L(b.children,f,u,w,b.el,b.anchor)},D=({el:b,anchor:f},u,w)=>{let k;for(;b&&b!==f;)k=m(b),t(b,u,w),b=k;t(f,u,w)},$=({el:b,anchor:f})=>{let u;for(;b&&b!==f;)u=m(b),c(b),b=u;c(f)},la=(b,f,u,w,k,_,x,S,q)=>{x=x||f.type==="svg",b==null?ga(f,u,w,k,_,x,S,q):ra(b,f,k,_,x,S,q)},ga=(b,f,u,w,k,_,x,S)=>{let q,z;const{type:M,props:N,shapeFlag:F,transition:H,dirs:K}=b;if(q=b.el=n(b.type,_,N&&N.is,N),F&8?r(q,b.children):F&16&&J(b.children,q,null,w,k,_&&M!=="foreignObject",x,S),K&&zs(b,null,w,"created"),Ca(q,b,b.scopeId,x,w),N){for(const va in N)va!=="value"&&!Td(va)&&e(q,va,null,N[va],_,b.children,w,k,xa);"value"in N&&e(q,"value",null,N.value),(z=N.onVnodeBeforeMount)&&Ya(z,w,b)}K&&zs(b,null,w,"beforeMount");const ba=(!k||k&&!k.pendingBranch)&&H&&!H.persisted;ba&&H.beforeEnter(q),t(q,f,u),((z=N&&N.onVnodeMounted)||ba||K)&&$a(()=>{z&&Ya(z,w,b),ba&&H.enter(q),K&&zs(b,null,w,"mounted")},k)},Ca=(b,f,u,w,k)=>{if(u&&g(b,u),w)for(let _=0;_<w.length;_++)g(b,w[_]);if(k){let _=k.subTree;if(f===_){const x=k.vnode;Ca(b,x,x.scopeId,x.slotScopeIds,k.parent)}}},J=(b,f,u,w,k,_,x,S,q=0)=>{for(let z=q;z<b.length;z++){const M=b[z]=S?os(b[z]):Ga(b[z]);j(null,M,f,u,w,k,_,x,S)}},ra=(b,f,u,w,k,_,x)=>{const S=f.el=b.el;let{patchFlag:q,dynamicChildren:z,dirs:M}=f;q|=b.patchFlag&16;const N=b.props||oa,F=f.props||oa;let H;u&&Ss(u,!1),(H=F.onVnodeBeforeUpdate)&&Ya(H,u,f,b),M&&zs(f,b,u,"beforeUpdate"),u&&Ss(u,!0);const K=k&&f.type!=="foreignObject";if(z?na(b.dynamicChildren,z,S,u,w,K,_):x||aa(b,f,S,null,u,w,K,_,!1),q>0){if(q&16)Sa(S,f,N,F,u,w,k);else if(q&2&&N.class!==F.class&&e(S,"class",null,F.class,k),q&4&&e(S,"style",N.style,F.style,k),q&8){const ba=f.dynamicProps;for(let va=0;va<ba.length;va++){const Ta=ba[va],Ia=N[Ta],Es=F[Ta];(Es!==Ia||Ta==="value")&&e(S,Ta,Ia,Es,k,b.children,u,w,xa)}}q&1&&b.children!==f.children&&r(S,f.children)}else!x&&z==null&&Sa(S,f,N,F,u,w,k);((H=F.onVnodeUpdated)||M)&&$a(()=>{H&&Ya(H,u,f,b),M&&zs(f,b,u,"updated")},w)},na=(b,f,u,w,k,_,x)=>{for(let S=0;S<f.length;S++){const q=b[S],z=f[S],M=q.el&&(q.type===Q||!xs(q,z)||q.shapeFlag&70)?o(q.el):u;j(q,z,M,null,w,k,_,x,!0)}},Sa=(b,f,u,w,k,_,x)=>{if(u!==w){if(u!==oa)for(const S in u)!Td(S)&&!(S in w)&&e(b,S,u[S],null,x,f.children,k,_,xa);for(const S in w){if(Td(S))continue;const q=w[S],z=u[S];q!==z&&S!=="value"&&e(b,S,z,q,x,f.children,k,_,xa)}"value"in w&&e(b,"value",u.value,w.value)}},O=(b,f,u,w,k,_,x,S,q)=>{const z=f.el=b?b.el:l(""),M=f.anchor=b?b.anchor:l("");let{patchFlag:N,dynamicChildren:F,slotScopeIds:H}=f;H&&(S=S?S.concat(H):H),b==null?(t(z,u,w),t(M,u,w),J(f.children,u,M,k,_,x,S,q)):N>0&&N&64&&F&&b.dynamicChildren?(na(b.dynamicChildren,F,u,k,_,x,S),(f.key!=null||k&&f===k.subTree)&&Yn(b,f,!0)):aa(b,f,u,M,k,_,x,S,q)},ca=(b,f,u,w,k,_,x,S,q)=>{f.slotScopeIds=S,b==null?f.shapeFlag&512?k.ctx.activate(f,u,w,x,q):Pa(f,u,w,k,_,x,q):ss(b,f,q)},Pa=(b,f,u,w,k,_,x)=>{const S=b.component=gp(b,w,k);if(Bd(b)&&(S.ctx.renderer=y),_p(S),S.asyncDep){if(k&&k.registerDep(S,ka),!b.el){const q=S.subTree=T(Wa);V(null,q,f,u)}return}ka(S,b,f,u,k,_,x)},ss=(b,f,u)=>{const w=f.component=b.component;if(je(b,f,u))if(w.asyncDep&&!w.asyncResolved){pa(w,f,u);return}else w.next=f,Se(w.update),w.update();else f.el=b.el,w.vnode=f},ka=(b,f,u,w,k,_,x)=>{const S=()=>{if(b.isMounted){let{next:M,bu:N,u:F,parent:H,vnode:K}=b,ba=M,va;Ss(b,!1),M?(M.el=K.el,pa(b,M,x)):M=K,N&&Zd(N),(va=M.props&&M.props.onVnodeBeforeUpdate)&&Ya(va,H,M,K),Ss(b,!0);const Ta=ac(b),Ia=b.subTree;b.subTree=Ta,j(Ia,Ta,o(Ia.el),h(Ia),b,k,_),M.el=Ta.el,ba===null&&Pe(b,Ta.el),F&&$a(F,k),(va=M.props&&M.props.onVnodeUpdated)&&$a(()=>Ya(va,H,M,K),k)}else{let M;const{el:N,props:F}=f,{bm:H,m:K,parent:ba}=b,va=zd(f);if(Ss(b,!1),H&&Zd(H),!va&&(M=F&&F.onVnodeBeforeMount)&&Ya(M,ba,f),Ss(b,!0),N&&sa){const Ta=()=>{b.subTree=ac(b),sa(N,b.subTree,b,k,null)};va?f.type.__asyncLoader().then(()=>!b.isUnmounted&&Ta()):Ta()}else{const Ta=b.subTree=ac(b);j(null,Ta,u,w,b,k,_),f.el=Ta.el}if(K&&$a(K,k),!va&&(M=F&&F.onVnodeMounted)){const Ta=f;$a(()=>Ya(M,ba,Ta),k)}(f.shapeFlag&256||ba&&zd(ba.vnode)&&ba.vnode.shapeFlag&256)&&b.a&&$a(b.a,k),b.isMounted=!0,f=u=w=null}},q=b.effect=new $c(S,()=>Hc(z),b.scope),z=b.update=()=>q.run();z.id=b.uid,Ss(b,!0),z()},pa=(b,f,u)=>{f.component=b;const w=b.vnode.props;b.vnode=f,b.next=null,np(b,f.props,w,u),pp(b,f.children,u),Ks(),lt(),Xs()},aa=(b,f,u,w,k,_,x,S,q=!1)=>{const z=b&&b.children,M=b?b.shapeFlag:0,N=f.children,{patchFlag:F,shapeFlag:H}=f;if(F>0){if(F&128){ls(z,N,u,w,k,_,x,S,q);return}else if(F&256){ds(z,N,u,w,k,_,x,S,q);return}}H&8?(M&16&&xa(z,k,_),N!==z&&r(u,N)):M&16?H&16?ls(z,N,u,w,k,_,x,S,q):xa(z,k,_,!0):(M&8&&r(u,""),H&16&&J(N,u,w,k,_,x,S,q))},ds=(b,f,u,w,k,_,x,S,q)=>{b=b||Fs,f=f||Fs;const z=b.length,M=f.length,N=Math.min(z,M);let F;for(F=0;F<N;F++){const H=f[F]=q?os(f[F]):Ga(f[F]);j(b[F],H,u,null,k,_,x,S,q)}z>M?xa(b,k,_,!0,!1,N):J(f,u,w,k,_,x,S,q,N)},ls=(b,f,u,w,k,_,x,S,q)=>{let z=0;const M=f.length;let N=b.length-1,F=M-1;for(;z<=N&&z<=F;){const H=b[z],K=f[z]=q?os(f[z]):Ga(f[z]);if(xs(H,K))j(H,K,u,null,k,_,x,S,q);else break;z++}for(;z<=N&&z<=F;){const H=b[N],K=f[F]=q?os(f[F]):Ga(f[F]);if(xs(H,K))j(H,K,u,null,k,_,x,S,q);else break;N--,F--}if(z>N){if(z<=F){const H=F+1,K=H<M?f[H].el:w;for(;z<=F;)j(null,f[z]=q?os(f[z]):Ga(f[z]),u,K,k,_,x,S,q),z++}}else if(z>F)for(;z<=N;)Va(b[z],k,_,!0),z++;else{const H=z,K=z,ba=new Map;for(z=K;z<=F;z++){const Ea=f[z]=q?os(f[z]):Ga(f[z]);Ea.key!=null&&ba.set(Ea.key,z)}let va,Ta=0;const Ia=F-K+1;let Es=!1,Qc=0;const Gs=new Array(Ia);for(z=0;z<Ia;z++)Gs[z]=0;for(z=H;z<=N;z++){const Ea=b[z];if(Ta>=Ia){Va(Ea,k,_,!0);continue}let Xa;if(Ea.key!=null)Xa=ba.get(Ea.key);else for(va=K;va<=F;va++)if(Gs[va-K]===0&&xs(Ea,f[va])){Xa=va;break}Xa===void 0?Va(Ea,k,_,!0):(Gs[Xa-K]=z+1,Xa>=Qc?Qc=Xa:Es=!0,j(Ea,f[Xa],u,null,k,_,x,S,q),Ta++)}const Zc=Es?ip(Gs):Fs;for(va=Zc.length-1,z=Ia-1;z>=0;z--){const Ea=K+z,Xa=f[Ea],at=Ea+1<M?f[Ea+1].el:w;Gs[z]===0?j(null,Xa,u,at,k,_,x,S,q):Es&&(va<0||z!==Zc[va]?Ka(Xa,u,at,2):va--)}}},Ka=(b,f,u,w,k=null)=>{const{el:_,type:x,transition:S,children:q,shapeFlag:z}=b;if(z&6){Ka(b.component.subTree,f,u,w);return}if(z&128){b.suspense.move(f,u,w);return}if(z&64){x.move(b,f,u,y);return}if(x===Q){t(_,f,u);for(let N=0;N<q.length;N++)Ka(q[N],f,u,w);t(b.anchor,f,u);return}if(x===qd){D(b,f,u);return}if(w!==2&&z&1&&S)if(w===0)S.beforeEnter(_),t(_,f,u),$a(()=>S.enter(_),k);else{const{leave:N,delayLeave:F,afterLeave:H}=S,K=()=>t(_,f,u),ba=()=>{N(_,()=>{K(),H&&H()})};F?F(_,K,ba):ba()}else t(_,f,u)},Va=(b,f,u,w=!1,k=!1)=>{const{type:_,props:x,ref:S,children:q,dynamicChildren:z,shapeFlag:M,patchFlag:N,dirs:F}=b;if(S!=null&&Tc(S,null,u,b,!0),M&256){f.ctx.deactivate(b);return}const H=M&1&&F,K=!zd(b);let ba;if(K&&(ba=x&&x.onVnodeBeforeUnmount)&&Ya(ba,f,b),M&6)od(b.component,u,w);else{if(M&128){b.suspense.unmount(u,w);return}H&&zs(b,null,f,"beforeUnmount"),M&64?b.type.remove(b,f,u,k,y,w):z&&(_!==Q||N>0&&N&64)?xa(z,f,u,!1,!0):(_===Q&&N&384||!k&&M&16)&&xa(q,f,u),w&&$s(b)}(K&&(ba=x&&x.onVnodeUnmounted)||H)&&$a(()=>{ba&&Ya(ba,f,b),H&&zs(b,null,f,"unmounted")},u)},$s=b=>{const{type:f,el:u,anchor:w,transition:k}=b;if(f===Q){Os(u,w);return}if(f===qd){$(b);return}const _=()=>{c(u),k&&!k.persisted&&k.afterLeave&&k.afterLeave()};if(b.shapeFlag&1&&k&&!k.persisted){const{leave:x,delayLeave:S}=k,q=()=>x(u,_);S?S(b.el,_,q):q()}else _()},Os=(b,f)=>{let u;for(;b!==f;)u=m(b),c(b),b=u;c(f)},od=(b,f,u)=>{const{bum:w,scope:k,update:_,subTree:x,um:S}=b;w&&Zd(w),k.stop(),_&&(_.active=!1,Va(x,b,f,u)),S&&$a(S,f),$a(()=>{b.isUnmounted=!0},f),f&&f.pendingBranch&&!f.isUnmounted&&b.asyncDep&&!b.asyncResolved&&b.suspenseId===f.pendingId&&(f.deps--,f.deps===0&&f.resolve())},xa=(b,f,u,w=!1,k=!1,_=0)=>{for(let x=_;x<b.length;x++)Va(b[x],f,u,w,k)},h=b=>b.shapeFlag&6?h(b.component.subTree):b.shapeFlag&128?b.suspense.next():m(b.anchor||b.el),P=(b,f,u)=>{b==null?f._vnode&&Va(f._vnode,null,null,!0):j(f._vnode||null,b,f,null,null,null,u),lt(),Ln(),f._vnode=b},y={p:j,um:Va,m:Ka,r:$s,mt:Pa,mc:J,pc:aa,pbc:na,n:h,o:a};let A,sa;return s&&([A,sa]=s(y)),{render:P,hydrate:A,createApp:cp(P,A)}}function Ss({effect:a,update:s},d){a.allowRecurse=s.allowRecurse=d}function Yn(a,s,d=!1){const t=a.children,c=s.children;if(R(t)&&R(c))for(let e=0;e<t.length;e++){const n=t[e];let l=c[e];l.shapeFlag&1&&!l.dynamicChildren&&((l.patchFlag<=0||l.patchFlag===32)&&(l=c[e]=os(c[e]),l.el=n.el),d||Yn(n,l)),l.type===Dd&&(l.el=n.el)}}function ip(a){const s=a.slice(),d=[0];let t,c,e,n,l;const p=a.length;for(t=0;t<p;t++){const i=a[t];if(i!==0){if(c=d[d.length-1],a[c]<i){s[t]=c,d.push(t);continue}for(e=0,n=d.length-1;e<n;)l=e+n>>1,a[d[l]]<i?e=l+1:n=l;i<a[d[e]]&&(e>0&&(s[t]=d[e-1]),d[e]=t)}}for(e=d.length,n=d[e-1];e-- >0;)d[e]=n,n=s[n];return d}const rp=a=>a.__isTeleport,Q=Symbol.for("v-fgt"),Dd=Symbol.for("v-txt"),Wa=Symbol.for("v-cmt"),qd=Symbol.for("v-stc"),td=[];let Ja=null;function da(a=!1){td.push(Ja=a?null:[])}function fp(){td.pop(),Ja=td[td.length-1]||null}let id=1;function Tt(a){id+=a}function Gn(a){return a.dynamicChildren=id>0?Ja||Fs:null,fp(),id>0&&Ja&&Ja.push(a),a}function ea(a,s,d,t,c,e){return Gn(v(a,s,d,t,c,e,!0))}function Qn(a,s,d,t,c){return Gn(T(a,s,d,t,c,!0))}function _c(a){return a?a.__v_isVNode===!0:!1}function xs(a,s){return a.type===s.type&&a.key===s.key}const Wd="__vInternal",Zn=({key:a})=>a??null,yd=({ref:a,ref_key:s,ref_for:d})=>(typeof a=="number"&&(a=""+a),a!=null?qa(a)||ja(a)||B(a)?{i:Aa,r:a,k:s,f:!!d}:a:null);function v(a,s=null,d=null,t=0,c=null,e=a===Q?0:1,n=!1,l=!1){const p={__v_isVNode:!0,__v_skip:!0,type:a,props:s,key:s&&Zn(s),ref:s&&yd(s),scopeId:Hd,slotScopeIds:null,children:d,component:null,suspense:null,ssContent:null,ssFallback:null,dirs:null,transition:null,el:null,anchor:null,target:null,targetAnchor:null,staticCount:0,shapeFlag:e,patchFlag:t,dynamicProps:c,dynamicChildren:null,appContext:null,ctx:Aa};return l?(Dc(p,d),e&128&&a.normalize(p)):d&&(p.shapeFlag|=qa(d)?8:16),id>0&&!n&&Ja&&(p.patchFlag>0||e&6)&&p.patchFlag!==32&&Ja.push(p),p}const T=op;function op(a,s=null,d=null,t=0,c=null,e=!1){if((!a||a===Ke)&&(a=Wa),_c(a)){const l=ks(a,s,!0);return d&&Dc(l,d),id>0&&!e&&Ja&&(l.shapeFlag&6?Ja[Ja.indexOf(a)]=l:Ja.push(l)),l.patchFlag|=-2,l}if(Cp(a)&&(a=a.__vccOpts),s){s=up(s);let{class:l,style:p}=s;l&&!qa(l)&&(s.class=Ad(l)),ma(p)&&(Tn(p)&&!R(p)&&(p=_a({},p)),s.style=Nc(p))}const n=qa(a)?1:Ne(a)?128:rp(a)?64:ma(a)?4:B(a)?2:0;return v(a,s,d,t,c,n,e,!0)}function up(a){return a?Tn(a)||Wd in a?_a({},a):a:null}function ks(a,s,d=!1){const{props:t,ref:c,patchFlag:e,children:n}=a,l=s?wp(t||{},s):t;return{__v_isVNode:!0,__v_skip:!0,type:a.type,props:l,key:l&&Zn(l),ref:s&&s.ref?d&&c?R(c)?c.concat(yd(s)):[c,yd(s)]:yd(s):c,scopeId:a.scopeId,slotScopeIds:a.slotScopeIds,children:n,target:a.target,targetAnchor:a.targetAnchor,staticCount:a.staticCount,shapeFlag:a.shapeFlag,patchFlag:s&&a.type!==Q?e===-1?16:e|16:e,dynamicProps:a.dynamicProps,dynamicChildren:a.dynamicChildren,appContext:a.appContext,dirs:a.dirs,transition:a.transition,component:a.component,suspense:a.suspense,ssContent:a.ssContent&&ks(a.ssContent),ssFallback:a.ssFallback&&ks(a.ssFallback),el:a.el,anchor:a.anchor,ctx:a.ctx,ce:a.ce}}function fa(a=" ",s=0){return T(Dd,null,a,s)}function U(a,s){const d=T(qd,null,a);return d.staticCount=s,d}function mp(a="",s=!1){return s?(da(),Qn(Wa,null,a)):T(Wa,null,a)}function Ga(a){return a==null||typeof a=="boolean"?T(Wa):R(a)?T(Q,null,a.slice()):typeof a=="object"?os(a):T(Dd,null,String(a))}function os(a){return a.el===null&&a.patchFlag!==-1||a.memo?a:ks(a)}function Dc(a,s){let d=0;const{shapeFlag:t}=a;if(s==null)s=null;else if(R(s))d=16;else if(typeof s=="object")if(t&65){const c=s.default;c&&(c._c&&(c._d=!1),Dc(a,c()),c._c&&(c._d=!0));return}else{d=32;const c=s._;!c&&!(Wd in s)?s._ctx=Aa:c===3&&Aa&&(Aa.slots._===1?s._=1:(s._=2,a.patchFlag|=1024))}else B(s)?(s={default:s,_ctx:Aa},d=32):(s=String(s),t&64?(d=16,s=[fa(s)]):d=8);a.children=s,a.shapeFlag|=d}function wp(...a){const s={};for(let d=0;d<a.length;d++){const t=a[d];for(const c in t)if(c==="class")s.class!==t.class&&(s.class=Ad([s.class,t.class]));else if(c==="style")s.style=Nc([s.style,t.style]);else if(Vd(c)){const e=s[c],n=t[c];n&&e!==n&&!(R(e)&&e.includes(n))&&(s[c]=e?[].concat(e,n):n)}else c!==""&&(s[c]=t[c])}return s}function Ya(a,s,d,t=null){Fa(a,s,7,[d,t])}const hp=Jn();let kp=0;function gp(a,s,d){const t=a.type,c=(s?s.appContext:a.appContext)||hp,e={uid:kp++,vnode:a,type:t,parent:s,appContext:c,root:null,next:null,subTree:null,effect:null,update:null,scope:new en(!0),render:null,proxy:null,exposed:null,exposeProxy:null,withProxy:null,provides:s?s.provides:Object.create(c.provides),accessCache:null,renderCache:[],components:null,directives:null,propsOptions:Wn(t,c),emitsOptions:Pn(t,c),emit:null,emitted:null,propsDefaults:oa,inheritAttrs:t.inheritAttrs,ctx:oa,data:oa,props:oa,attrs:oa,slots:oa,refs:oa,setupState:oa,setupContext:null,attrsProxy:null,slotsProxy:null,suspense:d,suspenseId:d?d.pendingId:0,asyncDep:null,asyncResolved:!1,isMounted:!1,isUnmounted:!1,isDeactivated:!1,bc:null,c:null,bm:null,m:null,bu:null,u:null,um:null,bum:null,da:null,a:null,rtg:null,rtc:null,ec:null,sp:null};return e.ctx={_:e},e.root=s?s.root:e,e.emit=Ce.bind(null,e),a.ce&&a.ce(e),e}let ya=null;const Tp=()=>ya||Aa;let Wc,As,_t="__VUE_INSTANCE_SETTERS__";(As=lc()[_t])||(As=lc()[_t]=[]),As.push(a=>ya=a),Wc=a=>{As.length>1?As.forEach(s=>s(a)):As[0](a)};const Js=a=>{Wc(a),a.scope.on()},Vs=()=>{ya&&ya.scope.off(),Wc(null)};function av(a){return a.vnode.shapeFlag&4}let rd=!1;function _p(a,s=!1){rd=s;const{props:d,children:t}=a.vnode,c=av(a);tp(a,d,c,s),ep(a,t);const e=c?zp(a,s):void 0;return rd=!1,e}function zp(a,s){const d=a.type;a.accessCache=Object.create(null),a.proxy=Fc(new Proxy(a.ctx,Ye));const{setup:t}=d;if(t){const c=a.setupContext=t.length>1?qp(a):null;Js(a),Ks();const e=ws(t,a,0,[a.props,c]);if(Xs(),Vs(),dn(e)){if(e.then(Vs,Vs),s)return e.then(n=>{zt(a,n,s)}).catch(n=>{Id(n,a,0)});a.asyncDep=e}else zt(a,e,s)}else sv(a,s)}function zt(a,s,d){B(s)?a.type.__ssrInlineRender?a.ssrRender=s:a.render=s:ma(s)&&(a.setupState=qn(s)),sv(a,d)}let St;function sv(a,s,d){const t=a.type;if(!a.render){if(!s&&St&&!t.render){const c=t.template||Bc(a).template;if(c){const{isCustomElement:e,compilerOptions:n}=a.appContext.config,{delimiters:l,compilerOptions:p}=t,i=_a(_a({isCustomElement:e,delimiters:l},n),p);t.render=St(c,i)}}a.render=t.render||Da}Js(a),Ks(),Ge(a),Xs(),Vs()}function Sp(a){return a.attrsProxy||(a.attrsProxy=new Proxy(a.attrs,{get(s,d){return Oa(a,"get","$attrs"),s[d]}}))}function qp(a){const s=d=>{a.exposed=d||{}};return{get attrs(){return Sp(a)},slots:a.slots,emit:a.emit,expose:s}}function Ud(a){if(a.exposed)return a.exposeProxy||(a.exposeProxy=new Proxy(qn(Fc(a.exposed)),{get(s,d){if(d in s)return s[d];if(d in cd)return cd[d](a)},has(s,d){return d in s||d in cd}}))}function yp(a,s=!0){return B(a)?a.displayName||a.name:a.name||s&&a.__name}function Cp(a){return B(a)&&"__vccOpts"in a}const Ba=(a,s)=>Te(a,s,rd);function Uc(a,s,d){const t=arguments.length;return t===2?ma(s)&&!R(s)?_c(s)?T(a,null,[s]):T(a,s):T(a,null,s):(t>3?d=Array.prototype.slice.call(arguments,2):t===3&&_c(d)&&(d=[d]),T(a,s,d))}const xp=Symbol.for("v-scx"),Lp=()=>ns(xp),jp="3.3.4",Pp="http://www.w3.org/2000/svg",Ls=typeof document<"u"?document:null,qt=Ls&&Ls.createElement("template"),Np={insert:(a,s,d)=>{s.insertBefore(a,d||null)},remove:a=>{const s=a.parentNode;s&&s.removeChild(a)},createElement:(a,s,d,t)=>{const c=s?Ls.createElementNS(Pp,a):Ls.createElement(a,d?{is:d}:void 0);return a==="select"&&t&&t.multiple!=null&&c.setAttribute("multiple",t.multiple),c},createText:a=>Ls.createTextNode(a),createComment:a=>Ls.createComment(a),setText:(a,s)=>{a.nodeValue=s},setElementText:(a,s)=>{a.textContent=s},parentNode:a=>a.parentNode,nextSibling:a=>a.nextSibling,querySelector:a=>Ls.querySelector(a),setScopeId(a,s){a.setAttribute(s,"")},insertStaticContent(a,s,d,t,c,e){const n=d?d.previousSibling:s.lastChild;if(c&&(c===e||c.nextSibling))for(;s.insertBefore(c.cloneNode(!0),d),!(c===e||!(c=c.nextSibling)););else{qt.innerHTML=t?`<svg>${a}</svg>`:a;const l=qt.content;if(t){const p=l.firstChild;for(;p.firstChild;)l.appendChild(p.firstChild);l.removeChild(p)}s.insertBefore(l,d)}return[n?n.nextSibling:s.firstChild,d?d.previousSibling:s.lastChild]}};function Vp(a,s,d){const t=a._vtc;t&&(s=(s?[s,...t]:[...t]).join(" ")),s==null?a.removeAttribute("class"):d?a.setAttribute("class",s):a.className=s}function $p(a,s,d){const t=a.style,c=qa(d);if(d&&!c){if(s&&!qa(s))for(const e in s)d[e]==null&&zc(t,e,"");for(const e in d)zc(t,e,d[e])}else{const e=t.display;c?s!==d&&(t.cssText=d):s&&a.removeAttribute("style"),"_vod"in a&&(t.display=e)}}const yt=/\s*!important$/;function zc(a,s,d){if(R(d))d.forEach(t=>zc(a,s,t));else if(d==null&&(d=""),s.startsWith("--"))a.setProperty(s,d);else{const t=Op(a,s);yt.test(d)?a.setProperty(Us(t),d.replace(yt,""),"important"):a[t]=d}}const Ct=["Webkit","Moz","ms"],cc={};function Op(a,s){const d=cc[s];if(d)return d;let t=Za(s);if(t!=="filter"&&t in a)return cc[s]=t;t=Ed(t);for(let c=0;c<Ct.length;c++){const e=Ct[c]+t;if(e in a)return cc[s]=e}return s}const xt="http://www.w3.org/1999/xlink";function Ep(a,s,d,t,c){if(t&&s.startsWith("xlink:"))d==null?a.removeAttributeNS(xt,s.slice(6,s.length)):a.setAttributeNS(xt,s,d);else{const e=Iv(s);d==null||e&&!nn(d)?a.removeAttribute(s):a.setAttribute(s,e?"":d)}}function Ap(a,s,d,t,c,e,n){if(s==="innerHTML"||s==="textContent"){t&&n(t,c,e),a[s]=d??"";return}const l=a.tagName;if(s==="value"&&l!=="PROGRESS"&&!l.includes("-")){a._value=d;const i=l==="OPTION"?a.getAttribute("value"):a.value,r=d??"";i!==r&&(a.value=r),d==null&&a.removeAttribute(s);return}let p=!1;if(d===""||d==null){const i=typeof a[s];i==="boolean"?d=nn(d):d==null&&i==="string"?(d="",p=!0):i==="number"&&(d=0,p=!0)}try{a[s]=d}catch{}p&&a.removeAttribute(s)}function Mp(a,s,d,t){a.addEventListener(s,d,t)}function Fp(a,s,d,t){a.removeEventListener(s,d,t)}function Ip(a,s,d,t,c=null){const e=a._vei||(a._vei={}),n=e[s];if(t&&n)n.value=t;else{const[l,p]=Rp(s);if(t){const i=e[s]=Jp(t,c);Mp(a,l,i,p)}else n&&(Fp(a,l,n,p),e[s]=void 0)}}const Lt=/(?:Once|Passive|Capture)$/;function Rp(a){let s;if(Lt.test(a)){s={};let t;for(;t=a.match(Lt);)a=a.slice(0,a.length-t[0].length),s[t[0].toLowerCase()]=!0}return[a[2]===":"?a.slice(3):Us(a.slice(2)),s]}let tc=0;const Hp=Promise.resolve(),Bp=()=>tc||(Hp.then(()=>tc=0),tc=Date.now());function Jp(a,s){const d=t=>{if(!t._vts)t._vts=Date.now();else if(t._vts<=d.attached)return;Fa(Dp(t,d.value),s,5,[t])};return d.value=a,d.attached=Bp(),d}function Dp(a,s){if(R(s)){const d=a.stopImmediatePropagation;return a.stopImmediatePropagation=()=>{d.call(a),a._stopped=!0},s.map(t=>c=>!c._stopped&&t&&t(c))}else return s}const jt=/^on[a-z]/,Wp=(a,s,d,t,c=!1,e,n,l,p)=>{s==="class"?Vp(a,t,c):s==="style"?$p(a,d,t):Vd(s)?xc(s)||Ip(a,s,d,t,n):(s[0]==="."?(s=s.slice(1),!0):s[0]==="^"?(s=s.slice(1),!1):Up(a,s,t,c))?Ap(a,s,t,e,n,l,p):(s==="true-value"?a._trueValue=t:s==="false-value"&&(a._falseValue=t),Ep(a,s,t,c))};function Up(a,s,d,t){return t?!!(s==="innerHTML"||s==="textContent"||s in a&&jt.test(s)&&B(d)):s==="spellcheck"||s==="draggable"||s==="translate"||s==="form"||s==="list"&&a.tagName==="INPUT"||s==="type"&&a.tagName==="TEXTAREA"||jt.test(s)&&qa(d)?!1:s in a}const is="transition",Qs="animation",W=(a,{slots:s})=>Uc(Ae,Kp(a),s);W.displayName="Transition";const dv={name:String,type:String,css:{type:Boolean,default:!0},duration:[String,Number,Object],enterFromClass:String,enterActiveClass:String,enterToClass:String,appearFromClass:String,appearActiveClass:String,appearToClass:String,leaveFromClass:String,leaveActiveClass:String,leaveToClass:String};W.props=_a({},$n,dv);const qs=(a,s=[])=>{R(a)?a.forEach(d=>d(...s)):a&&a(...s)},Pt=a=>a?R(a)?a.some(s=>s.length>1):a.length>1:!1;function Kp(a){const s={};for(const O in a)O in dv||(s[O]=a[O]);if(a.css===!1)return s;const{name:d="v",type:t,duration:c,enterFromClass:e=`${d}-enter-from`,enterActiveClass:n=`${d}-enter-active`,enterToClass:l=`${d}-enter-to`,appearFromClass:p=e,appearActiveClass:i=n,appearToClass:r=l,leaveFromClass:o=`${d}-leave-from`,leaveActiveClass:m=`${d}-leave-active`,leaveToClass:g=`${d}-leave-to`}=a,L=Xp(c),j=L&&L[0],I=L&&L[1],{onBeforeEnter:V,onEnter:E,onEnterCancelled:D,onLeave:$,onLeaveCancelled:la,onBeforeAppear:ga=V,onAppear:Ca=E,onAppearCancelled:J=D}=s,ra=(O,ca,Pa)=>{ys(O,ca?r:l),ys(O,ca?i:n),Pa&&Pa()},na=(O,ca)=>{O._isLeaving=!1,ys(O,o),ys(O,g),ys(O,m),ca&&ca()},Sa=O=>(ca,Pa)=>{const ss=O?Ca:E,ka=()=>ra(ca,O,Pa);qs(ss,[ca,ka]),Nt(()=>{ys(ca,O?p:e),rs(ca,O?r:l),Pt(ss)||Vt(ca,t,j,ka)})};return _a(s,{onBeforeEnter(O){qs(V,[O]),rs(O,e),rs(O,n)},onBeforeAppear(O){qs(ga,[O]),rs(O,p),rs(O,i)},onEnter:Sa(!1),onAppear:Sa(!0),onLeave(O,ca){O._isLeaving=!0;const Pa=()=>na(O,ca);rs(O,o),Qp(),rs(O,m),Nt(()=>{O._isLeaving&&(ys(O,o),rs(O,g),Pt($)||Vt(O,t,I,Pa))}),qs($,[O,Pa])},onEnterCancelled(O){ra(O,!1),qs(D,[O])},onAppearCancelled(O){ra(O,!0),qs(J,[O])},onLeaveCancelled(O){na(O),qs(la,[O])}})}function Xp(a){if(a==null)return null;if(ma(a))return[nc(a.enter),nc(a.leave)];{const s=nc(a);return[s,s]}}function nc(a){return $v(a)}function rs(a,s){s.split(/\s+/).forEach(d=>d&&a.classList.add(d)),(a._vtc||(a._vtc=new Set)).add(s)}function ys(a,s){s.split(/\s+/).forEach(t=>t&&a.classList.remove(t));const{_vtc:d}=a;d&&(d.delete(s),d.size||(a._vtc=void 0))}function Nt(a){requestAnimationFrame(()=>{requestAnimationFrame(a)})}let Yp=0;function Vt(a,s,d,t){const c=a._endId=++Yp,e=()=>{c===a._endId&&t()};if(d)return setTimeout(e,d);const{type:n,timeout:l,propCount:p}=Gp(a,s);if(!n)return t();const i=n+"end";let r=0;const o=()=>{a.removeEventListener(i,m),e()},m=g=>{g.target===a&&++r>=p&&o()};setTimeout(()=>{r<p&&o()},l+1),a.addEventListener(i,m)}function Gp(a,s){const d=window.getComputedStyle(a),t=L=>(d[L]||"").split(", "),c=t(`${is}Delay`),e=t(`${is}Duration`),n=$t(c,e),l=t(`${Qs}Delay`),p=t(`${Qs}Duration`),i=$t(l,p);let r=null,o=0,m=0;s===is?n>0&&(r=is,o=n,m=e.length):s===Qs?i>0&&(r=Qs,o=i,m=p.length):(o=Math.max(n,i),r=o>0?n>i?is:Qs:null,m=r?r===is?e.length:p.length:0);const g=r===is&&/\b(transform|all)(,|$)/.test(t(`${is}Property`).toString());return{type:r,timeout:o,propCount:m,hasTransform:g}}function $t(a,s){for(;a.length<s.length;)a=a.concat(a);return Math.max(...s.map((d,t)=>Ot(d)+Ot(a[t])))}function Ot(a){return Number(a.slice(0,-1).replace(",","."))*1e3}function Qp(){return document.body.offsetHeight}const Y={beforeMount(a,{value:s},{transition:d}){a._vod=a.style.display==="none"?"":a.style.display,d&&s?d.beforeEnter(a):Zs(a,s)},mounted(a,{value:s},{transition:d}){d&&s&&d.enter(a)},updated(a,{value:s,oldValue:d},{transition:t}){!s!=!d&&(t?s?(t.beforeEnter(a),Zs(a,!0),t.enter(a)):t.leave(a,()=>{Zs(a,!1)}):Zs(a,s))},beforeUnmount(a,{value:s}){Zs(a,s)}};function Zs(a,s){a.style.display=s?a._vod:"none"}const Zp=_a({patchProp:Wp},Np);let Et;function al(){return Et||(Et=lp(Zp))}const sl=(...a)=>{const s=al().createApp(...a),{mount:d}=s;return s.mount=t=>{const c=dl(t);if(!c)return;const e=s._component;!B(e)&&!e.render&&!e.template&&(e.template=c.innerHTML),c.innerHTML="";const n=d(c,!1,c instanceof SVGElement);return c instanceof Element&&(c.removeAttribute("v-cloak"),c.setAttribute("data-v-app","")),n},s};function dl(a){return qa(a)?document.querySelector(a):a}var cl=!1;/*!
 * pinia v2.1.6
 * (c) 2023 Eduardo San Martin Morote
 * @license MIT
 */const tl=Symbol();var At;(function(a){a.direct="direct",a.patchObject="patch object",a.patchFunction="patch function"})(At||(At={}));function nl(){const a=Hv(!0),s=a.run(()=>ua({}));let d=[],t=[];const c=Fc({install(e){c._a=e,e.provide(tl,c),e.config.globalProperties.$pinia=c,t.forEach(n=>d.push(n)),t=[]},use(e){return!this._a&&!cl?t.push(e):d.push(e),this},_p:d,_a:null,_e:a,_s:new Map,state:s});return c}/*!
  * vue-router v4.2.4
  * (c) 2023 Eduardo San Martin Morote
  * @license MIT
  */const Ms=typeof window<"u";function vl(a){return a.__esModule||a[Symbol.toStringTag]==="Module"}const ta=Object.assign;function vc(a,s){const d={};for(const t in s){const c=s[t];d[t]=Ua(c)?c.map(a):a(c)}return d}const nd=()=>{},Ua=Array.isArray,el=/\/$/,pl=a=>a.replace(el,"");function ec(a,s,d="/"){let t,c={},e="",n="";const l=s.indexOf("#");let p=s.indexOf("?");return l<p&&l>=0&&(p=-1),p>-1&&(t=s.slice(0,p),e=s.slice(p+1,l>-1?l:s.length),c=a(e)),l>-1&&(t=t||s.slice(0,l),n=s.slice(l,s.length)),t=rl(t??s,d),{fullPath:t+(e&&"?")+e+n,path:t,query:c,hash:n}}function ll(a,s){const d=s.query?a(s.query):"";return s.path+(d&&"?")+d+(s.hash||"")}function Mt(a,s){return!s||!a.toLowerCase().startsWith(s.toLowerCase())?a:a.slice(s.length)||"/"}function bl(a,s,d){const t=s.matched.length-1,c=d.matched.length-1;return t>-1&&t===c&&Ds(s.matched[t],d.matched[c])&&cv(s.params,d.params)&&a(s.query)===a(d.query)&&s.hash===d.hash}function Ds(a,s){return(a.aliasOf||a)===(s.aliasOf||s)}function cv(a,s){if(Object.keys(a).length!==Object.keys(s).length)return!1;for(const d in a)if(!il(a[d],s[d]))return!1;return!0}function il(a,s){return Ua(a)?Ft(a,s):Ua(s)?Ft(s,a):a===s}function Ft(a,s){return Ua(s)?a.length===s.length&&a.every((d,t)=>d===s[t]):a.length===1&&a[0]===s}function rl(a,s){if(a.startsWith("/"))return a;if(!a)return s;const d=s.split("/"),t=a.split("/"),c=t[t.length-1];(c===".."||c===".")&&t.push("");let e=d.length-1,n,l;for(n=0;n<t.length;n++)if(l=t[n],l!==".")if(l==="..")e>1&&e--;else break;return d.slice(0,e).join("/")+"/"+t.slice(n-(n===t.length?1:0)).join("/")}var fd;(function(a){a.pop="pop",a.push="push"})(fd||(fd={}));var vd;(function(a){a.back="back",a.forward="forward",a.unknown=""})(vd||(vd={}));function fl(a){if(!a)if(Ms){const s=document.querySelector("base");a=s&&s.getAttribute("href")||"/",a=a.replace(/^\w+:\/\/[^\/]+/,"")}else a="/";return a[0]!=="/"&&a[0]!=="#"&&(a="/"+a),pl(a)}const ol=/^[^#]+#/;function ul(a,s){return a.replace(ol,"#")+s}function ml(a,s){const d=document.documentElement.getBoundingClientRect(),t=a.getBoundingClientRect();return{behavior:s.behavior,left:t.left-d.left-(s.left||0),top:t.top-d.top-(s.top||0)}}const Kd=()=>({left:window.pageXOffset,top:window.pageYOffset});function wl(a){let s;if("el"in a){const d=a.el,t=typeof d=="string"&&d.startsWith("#"),c=typeof d=="string"?t?document.getElementById(d.slice(1)):document.querySelector(d):d;if(!c)return;s=ml(c,a)}else s=a;"scrollBehavior"in document.documentElement.style?window.scrollTo(s):window.scrollTo(s.left!=null?s.left:window.pageXOffset,s.top!=null?s.top:window.pageYOffset)}function It(a,s){return(history.state?history.state.position-s:-1)+a}const Sc=new Map;function hl(a,s){Sc.set(a,s)}function kl(a){const s=Sc.get(a);return Sc.delete(a),s}let gl=()=>location.protocol+"//"+location.host;function tv(a,s){const{pathname:d,search:t,hash:c}=s,e=a.indexOf("#");if(e>-1){let l=c.includes(a.slice(e))?a.slice(e).length:1,p=c.slice(l);return p[0]!=="/"&&(p="/"+p),Mt(p,"")}return Mt(d,a)+t+c}function Tl(a,s,d,t){let c=[],e=[],n=null;const l=({state:m})=>{const g=tv(a,location),L=d.value,j=s.value;let I=0;if(m){if(d.value=g,s.value=m,n&&n===L){n=null;return}I=j?m.position-j.position:0}else t(g);c.forEach(V=>{V(d.value,L,{delta:I,type:fd.pop,direction:I?I>0?vd.forward:vd.back:vd.unknown})})};function p(){n=d.value}function i(m){c.push(m);const g=()=>{const L=c.indexOf(m);L>-1&&c.splice(L,1)};return e.push(g),g}function r(){const{history:m}=window;m.state&&m.replaceState(ta({},m.state,{scroll:Kd()}),"")}function o(){for(const m of e)m();e=[],window.removeEventListener("popstate",l),window.removeEventListener("beforeunload",r)}return window.addEventListener("popstate",l),window.addEventListener("beforeunload",r,{passive:!0}),{pauseListeners:p,listen:i,destroy:o}}function Rt(a,s,d,t=!1,c=!1){return{back:a,current:s,forward:d,replaced:t,position:window.history.length,scroll:c?Kd():null}}function _l(a){const{history:s,location:d}=window,t={value:tv(a,d)},c={value:s.state};c.value||e(t.value,{back:null,current:t.value,forward:null,position:s.length-1,replaced:!0,scroll:null},!0);function e(p,i,r){const o=a.indexOf("#"),m=o>-1?(d.host&&document.querySelector("base")?a:a.slice(o))+p:gl()+a+p;try{s[r?"replaceState":"pushState"](i,"",m),c.value=i}catch(g){console.error(g),d[r?"replace":"assign"](m)}}function n(p,i){const r=ta({},s.state,Rt(c.value.back,p,c.value.forward,!0),i,{position:c.value.position});e(p,r,!0),t.value=p}function l(p,i){const r=ta({},c.value,s.state,{forward:p,scroll:Kd()});e(r.current,r,!0);const o=ta({},Rt(t.value,p,null),{position:r.position+1},i);e(p,o,!1),t.value=p}return{location:t,state:c,push:l,replace:n}}function zl(a){a=fl(a);const s=_l(a),d=Tl(a,s.state,s.location,s.replace);function t(e,n=!0){n||d.pauseListeners(),history.go(e)}const c=ta({location:"",base:a,go:t,createHref:ul.bind(null,a)},s,d);return Object.defineProperty(c,"location",{enumerable:!0,get:()=>s.location.value}),Object.defineProperty(c,"state",{enumerable:!0,get:()=>s.state.value}),c}function Sl(a){return typeof a=="string"||a&&typeof a=="object"}function nv(a){return typeof a=="string"||typeof a=="symbol"}const fs={path:"/",name:void 0,params:{},query:{},hash:"",fullPath:"/",matched:[],meta:{},redirectedFrom:void 0},vv=Symbol("");var Ht;(function(a){a[a.aborted=4]="aborted",a[a.cancelled=8]="cancelled",a[a.duplicated=16]="duplicated"})(Ht||(Ht={}));function Ws(a,s){return ta(new Error,{type:a,[vv]:!0},s)}function cs(a,s){return a instanceof Error&&vv in a&&(s==null||!!(a.type&s))}const Bt="[^/]+?",ql={sensitive:!1,strict:!1,start:!0,end:!0},yl=/[.+*?^${}()[\]/\\]/g;function Cl(a,s){const d=ta({},ql,s),t=[];let c=d.start?"^":"";const e=[];for(const i of a){const r=i.length?[]:[90];d.strict&&!i.length&&(c+="/");for(let o=0;o<i.length;o++){const m=i[o];let g=40+(d.sensitive?.25:0);if(m.type===0)o||(c+="/"),c+=m.value.replace(yl,"\\$&"),g+=40;else if(m.type===1){const{value:L,repeatable:j,optional:I,regexp:V}=m;e.push({name:L,repeatable:j,optional:I});const E=V||Bt;if(E!==Bt){g+=10;try{new RegExp(`(${E})`)}catch($){throw new Error(`Invalid custom RegExp for param "${L}" (${E}): `+$.message)}}let D=j?`((?:${E})(?:/(?:${E}))*)`:`(${E})`;o||(D=I&&i.length<2?`(?:/${D})`:"/"+D),I&&(D+="?"),c+=D,g+=20,I&&(g+=-8),j&&(g+=-20),E===".*"&&(g+=-50)}r.push(g)}t.push(r)}if(d.strict&&d.end){const i=t.length-1;t[i][t[i].length-1]+=.7000000000000001}d.strict||(c+="/?"),d.end?c+="$":d.strict&&(c+="(?:/|$)");const n=new RegExp(c,d.sensitive?"":"i");function l(i){const r=i.match(n),o={};if(!r)return null;for(let m=1;m<r.length;m++){const g=r[m]||"",L=e[m-1];o[L.name]=g&&L.repeatable?g.split("/"):g}return o}function p(i){let r="",o=!1;for(const m of a){(!o||!r.endsWith("/"))&&(r+="/"),o=!1;for(const g of m)if(g.type===0)r+=g.value;else if(g.type===1){const{value:L,repeatable:j,optional:I}=g,V=L in i?i[L]:"";if(Ua(V)&&!j)throw new Error(`Provided param "${L}" is an array but it is not repeatable (* or + modifiers)`);const E=Ua(V)?V.join("/"):V;if(!E)if(I)m.length<2&&(r.endsWith("/")?r=r.slice(0,-1):o=!0);else throw new Error(`Missing required param "${L}"`);r+=E}}return r||"/"}return{re:n,score:t,keys:e,parse:l,stringify:p}}function xl(a,s){let d=0;for(;d<a.length&&d<s.length;){const t=s[d]-a[d];if(t)return t;d++}return a.length<s.length?a.length===1&&a[0]===40+40?-1:1:a.length>s.length?s.length===1&&s[0]===40+40?1:-1:0}function Ll(a,s){let d=0;const t=a.score,c=s.score;for(;d<t.length&&d<c.length;){const e=xl(t[d],c[d]);if(e)return e;d++}if(Math.abs(c.length-t.length)===1){if(Jt(t))return 1;if(Jt(c))return-1}return c.length-t.length}function Jt(a){const s=a[a.length-1];return a.length>0&&s[s.length-1]<0}const jl={type:0,value:""},Pl=/[a-zA-Z0-9_]/;function Nl(a){if(!a)return[[]];if(a==="/")return[[jl]];if(!a.startsWith("/"))throw new Error(`Invalid path "${a}"`);function s(g){throw new Error(`ERR (${d})/"${i}": ${g}`)}let d=0,t=d;const c=[];let e;function n(){e&&c.push(e),e=[]}let l=0,p,i="",r="";function o(){i&&(d===0?e.push({type:0,value:i}):d===1||d===2||d===3?(e.length>1&&(p==="*"||p==="+")&&s(`A repeatable param (${i}) must be alone in its segment. eg: '/:ids+.`),e.push({type:1,value:i,regexp:r,repeatable:p==="*"||p==="+",optional:p==="*"||p==="?"})):s("Invalid state to consume buffer"),i="")}function m(){i+=p}for(;l<a.length;){if(p=a[l++],p==="\\"&&d!==2){t=d,d=4;continue}switch(d){case 0:p==="/"?(i&&o(),n()):p===":"?(o(),d=1):m();break;case 4:m(),d=t;break;case 1:p==="("?d=2:Pl.test(p)?m():(o(),d=0,p!=="*"&&p!=="?"&&p!=="+"&&l--);break;case 2:p===")"?r[r.length-1]=="\\"?r=r.slice(0,-1)+p:d=3:r+=p;break;case 3:o(),d=0,p!=="*"&&p!=="?"&&p!=="+"&&l--,r="";break;default:s("Unknown state");break}}return d===2&&s(`Unfinished custom RegExp for param "${i}"`),o(),n(),c}function Vl(a,s,d){const t=Cl(Nl(a.path),d),c=ta(t,{record:a,parent:s,children:[],alias:[]});return s&&!c.record.aliasOf==!s.record.aliasOf&&s.children.push(c),c}function $l(a,s){const d=[],t=new Map;s=Ut({strict:!1,end:!0,sensitive:!1},s);function c(r){return t.get(r)}function e(r,o,m){const g=!m,L=Ol(r);L.aliasOf=m&&m.record;const j=Ut(s,r),I=[L];if("alias"in r){const D=typeof r.alias=="string"?[r.alias]:r.alias;for(const $ of D)I.push(ta({},L,{components:m?m.record.components:L.components,path:$,aliasOf:m?m.record:L}))}let V,E;for(const D of I){const{path:$}=D;if(o&&$[0]!=="/"){const la=o.record.path,ga=la[la.length-1]==="/"?"":"/";D.path=o.record.path+($&&ga+$)}if(V=Vl(D,o,j),m?m.alias.push(V):(E=E||V,E!==V&&E.alias.push(V),g&&r.name&&!Wt(V)&&n(r.name)),L.children){const la=L.children;for(let ga=0;ga<la.length;ga++)e(la[ga],V,m&&m.children[ga])}m=m||V,(V.record.components&&Object.keys(V.record.components).length||V.record.name||V.record.redirect)&&p(V)}return E?()=>{n(E)}:nd}function n(r){if(nv(r)){const o=t.get(r);o&&(t.delete(r),d.splice(d.indexOf(o),1),o.children.forEach(n),o.alias.forEach(n))}else{const o=d.indexOf(r);o>-1&&(d.splice(o,1),r.record.name&&t.delete(r.record.name),r.children.forEach(n),r.alias.forEach(n))}}function l(){return d}function p(r){let o=0;for(;o<d.length&&Ll(r,d[o])>=0&&(r.record.path!==d[o].record.path||!ev(r,d[o]));)o++;d.splice(o,0,r),r.record.name&&!Wt(r)&&t.set(r.record.name,r)}function i(r,o){let m,g={},L,j;if("name"in r&&r.name){if(m=t.get(r.name),!m)throw Ws(1,{location:r});j=m.record.name,g=ta(Dt(o.params,m.keys.filter(E=>!E.optional).map(E=>E.name)),r.params&&Dt(r.params,m.keys.map(E=>E.name))),L=m.stringify(g)}else if("path"in r)L=r.path,m=d.find(E=>E.re.test(L)),m&&(g=m.parse(L),j=m.record.name);else{if(m=o.name?t.get(o.name):d.find(E=>E.re.test(o.path)),!m)throw Ws(1,{location:r,currentLocation:o});j=m.record.name,g=ta({},o.params,r.params),L=m.stringify(g)}const I=[];let V=m;for(;V;)I.unshift(V.record),V=V.parent;return{name:j,path:L,params:g,matched:I,meta:Al(I)}}return a.forEach(r=>e(r)),{addRoute:e,resolve:i,removeRoute:n,getRoutes:l,getRecordMatcher:c}}function Dt(a,s){const d={};for(const t of s)t in a&&(d[t]=a[t]);return d}function Ol(a){return{path:a.path,redirect:a.redirect,name:a.name,meta:a.meta||{},aliasOf:void 0,beforeEnter:a.beforeEnter,props:El(a),children:a.children||[],instances:{},leaveGuards:new Set,updateGuards:new Set,enterCallbacks:{},components:"components"in a?a.components||null:a.component&&{default:a.component}}}function El(a){const s={},d=a.props||!1;if("component"in a)s.default=d;else for(const t in a.components)s[t]=typeof d=="object"?d[t]:d;return s}function Wt(a){for(;a;){if(a.record.aliasOf)return!0;a=a.parent}return!1}function Al(a){return a.reduce((s,d)=>ta(s,d.meta),{})}function Ut(a,s){const d={};for(const t in a)d[t]=t in s?s[t]:a[t];return d}function ev(a,s){return s.children.some(d=>d===a||ev(a,d))}const pv=/#/g,Ml=/&/g,Fl=/\//g,Il=/=/g,Rl=/\?/g,lv=/\+/g,Hl=/%5B/g,Bl=/%5D/g,bv=/%5E/g,Jl=/%60/g,iv=/%7B/g,Dl=/%7C/g,rv=/%7D/g,Wl=/%20/g;function Kc(a){return encodeURI(""+a).replace(Dl,"|").replace(Hl,"[").replace(Bl,"]")}function Ul(a){return Kc(a).replace(iv,"{").replace(rv,"}").replace(bv,"^")}function qc(a){return Kc(a).replace(lv,"%2B").replace(Wl,"+").replace(pv,"%23").replace(Ml,"%26").replace(Jl,"`").replace(iv,"{").replace(rv,"}").replace(bv,"^")}function Kl(a){return qc(a).replace(Il,"%3D")}function Xl(a){return Kc(a).replace(pv,"%23").replace(Rl,"%3F")}function Yl(a){return a==null?"":Xl(a).replace(Fl,"%2F")}function Nd(a){try{return decodeURIComponent(""+a)}catch{}return""+a}function Gl(a){const s={};if(a===""||a==="?")return s;const t=(a[0]==="?"?a.slice(1):a).split("&");for(let c=0;c<t.length;++c){const e=t[c].replace(lv," "),n=e.indexOf("="),l=Nd(n<0?e:e.slice(0,n)),p=n<0?null:Nd(e.slice(n+1));if(l in s){let i=s[l];Ua(i)||(i=s[l]=[i]),i.push(p)}else s[l]=p}return s}function Kt(a){let s="";for(let d in a){const t=a[d];if(d=Kl(d),t==null){t!==void 0&&(s+=(s.length?"&":"")+d);continue}(Ua(t)?t.map(e=>e&&qc(e)):[t&&qc(t)]).forEach(e=>{e!==void 0&&(s+=(s.length?"&":"")+d,e!=null&&(s+="="+e))})}return s}function Ql(a){const s={};for(const d in a){const t=a[d];t!==void 0&&(s[d]=Ua(t)?t.map(c=>c==null?null:""+c):t==null?t:""+t)}return s}const Zl=Symbol(""),Xt=Symbol(""),Xc=Symbol(""),fv=Symbol(""),yc=Symbol("");function ad(){let a=[];function s(t){return a.push(t),()=>{const c=a.indexOf(t);c>-1&&a.splice(c,1)}}function d(){a=[]}return{add:s,list:()=>a.slice(),reset:d}}function us(a,s,d,t,c){const e=t&&(t.enterCallbacks[c]=t.enterCallbacks[c]||[]);return()=>new Promise((n,l)=>{const p=o=>{o===!1?l(Ws(4,{from:d,to:s})):o instanceof Error?l(o):Sl(o)?l(Ws(2,{from:s,to:o})):(e&&t.enterCallbacks[c]===e&&typeof o=="function"&&e.push(o),n())},i=a.call(t&&t.instances[c],s,d,p);let r=Promise.resolve(i);a.length<3&&(r=r.then(p)),r.catch(o=>l(o))})}function pc(a,s,d,t){const c=[];for(const e of a)for(const n in e.components){let l=e.components[n];if(!(s!=="beforeRouteEnter"&&!e.instances[n]))if(ab(l)){const i=(l.__vccOpts||l)[s];i&&c.push(us(i,d,t,e,n))}else{let p=l();c.push(()=>p.then(i=>{if(!i)return Promise.reject(new Error(`Couldn't resolve component "${n}" at "${e.path}"`));const r=vl(i)?i.default:i;e.components[n]=r;const m=(r.__vccOpts||r)[s];return m&&us(m,d,t,e,n)()}))}}return c}function ab(a){return typeof a=="object"||"displayName"in a||"props"in a||"__vccOpts"in a}function Yt(a){const s=ns(Xc),d=ns(fv),t=Ba(()=>s.resolve(Ns(a.to))),c=Ba(()=>{const{matched:p}=t.value,{length:i}=p,r=p[i-1],o=d.matched;if(!r||!o.length)return-1;const m=o.findIndex(Ds.bind(null,r));if(m>-1)return m;const g=Gt(p[i-2]);return i>1&&Gt(r)===g&&o[o.length-1].path!==g?o.findIndex(Ds.bind(null,p[i-2])):m}),e=Ba(()=>c.value>-1&&tb(d.params,t.value.params)),n=Ba(()=>c.value>-1&&c.value===d.matched.length-1&&cv(d.params,t.value.params));function l(p={}){return cb(p)?s[Ns(a.replace)?"replace":"push"](Ns(a.to)).catch(nd):Promise.resolve()}return{route:t,href:Ba(()=>t.value.href),isActive:e,isExactActive:n,navigate:l}}const sb=An({name:"RouterLink",compatConfig:{MODE:3},props:{to:{type:[String,Object],required:!0},replace:Boolean,activeClass:String,exactActiveClass:String,custom:Boolean,ariaCurrentValue:{type:String,default:"page"}},useLink:Yt,setup(a,{slots:s}){const d=Fd(Yt(a)),{options:t}=ns(Xc),c=Ba(()=>({[Qt(a.activeClass,t.linkActiveClass,"router-link-active")]:d.isActive,[Qt(a.exactActiveClass,t.linkExactActiveClass,"router-link-exact-active")]:d.isExactActive}));return()=>{const e=s.default&&s.default(d);return a.custom?e:Uc("a",{"aria-current":d.isExactActive?a.ariaCurrentValue:null,href:d.href,onClick:d.navigate,class:c.value},e)}}}),db=sb;function cb(a){if(!(a.metaKey||a.altKey||a.ctrlKey||a.shiftKey)&&!a.defaultPrevented&&!(a.button!==void 0&&a.button!==0)){if(a.currentTarget&&a.currentTarget.getAttribute){const s=a.currentTarget.getAttribute("target");if(/\b_blank\b/i.test(s))return}return a.preventDefault&&a.preventDefault(),!0}}function tb(a,s){for(const d in s){const t=s[d],c=a[d];if(typeof t=="string"){if(t!==c)return!1}else if(!Ua(c)||c.length!==t.length||t.some((e,n)=>e!==c[n]))return!1}return!0}function Gt(a){return a?a.aliasOf?a.aliasOf.path:a.path:""}const Qt=(a,s,d)=>a??s??d,nb=An({name:"RouterView",inheritAttrs:!1,props:{name:{type:String,default:"default"},route:Object},compatConfig:{MODE:3},setup(a,{attrs:s,slots:d}){const t=ns(yc),c=Ba(()=>a.route||t.value),e=ns(Xt,0),n=Ba(()=>{let i=Ns(e);const{matched:r}=c.value;let o;for(;(o=r[i])&&!o.components;)i++;return i}),l=Ba(()=>c.value.matched[n.value]);Sd(Xt,Ba(()=>n.value+1)),Sd(Zl,l),Sd(yc,c);const p=ua();return _d(()=>[p.value,l.value,a.name],([i,r,o],[m,g,L])=>{r&&(r.instances[o]=i,g&&g!==r&&i&&i===m&&(r.leaveGuards.size||(r.leaveGuards=g.leaveGuards),r.updateGuards.size||(r.updateGuards=g.updateGuards))),i&&r&&(!g||!Ds(r,g)||!m)&&(r.enterCallbacks[o]||[]).forEach(j=>j(i))},{flush:"post"}),()=>{const i=c.value,r=a.name,o=l.value,m=o&&o.components[r];if(!m)return Zt(d.default,{Component:m,route:i});const g=o.props[r],L=g?g===!0?i.params:typeof g=="function"?g(i):g:null,I=Uc(m,ta({},L,s,{onVnodeUnmounted:V=>{V.component.isUnmounted&&(o.instances[r]=null)},ref:p}));return Zt(d.default,{Component:I,route:i})||I}}});function Zt(a,s){if(!a)return null;const d=a(s);return d.length===1?d[0]:d}const ov=nb;function vb(a){const s=$l(a.routes,a),d=a.parseQuery||Gl,t=a.stringifyQuery||Kt,c=a.history,e=ad(),n=ad(),l=ad(),p=we(fs);let i=fs;Ms&&a.scrollBehavior&&"scrollRestoration"in history&&(history.scrollRestoration="manual");const r=vc.bind(null,h=>""+h),o=vc.bind(null,Yl),m=vc.bind(null,Nd);function g(h,P){let y,A;return nv(h)?(y=s.getRecordMatcher(h),A=P):A=h,s.addRoute(A,y)}function L(h){const P=s.getRecordMatcher(h);P&&s.removeRoute(P)}function j(){return s.getRoutes().map(h=>h.record)}function I(h){return!!s.getRecordMatcher(h)}function V(h,P){if(P=ta({},P||p.value),typeof h=="string"){const u=ec(d,h,P.path),w=s.resolve({path:u.path},P),k=c.createHref(u.fullPath);return ta(u,w,{params:m(w.params),hash:Nd(u.hash),redirectedFrom:void 0,href:k})}let y;if("path"in h)y=ta({},h,{path:ec(d,h.path,P.path).path});else{const u=ta({},h.params);for(const w in u)u[w]==null&&delete u[w];y=ta({},h,{params:o(u)}),P.params=o(P.params)}const A=s.resolve(y,P),sa=h.hash||"";A.params=r(m(A.params));const b=ll(t,ta({},h,{hash:Ul(sa),path:A.path})),f=c.createHref(b);return ta({fullPath:b,hash:sa,query:t===Kt?Ql(h.query):h.query||{}},A,{redirectedFrom:void 0,href:f})}function E(h){return typeof h=="string"?ec(d,h,p.value.path):ta({},h)}function D(h,P){if(i!==h)return Ws(8,{from:P,to:h})}function $(h){return Ca(h)}function la(h){return $(ta(E(h),{replace:!0}))}function ga(h){const P=h.matched[h.matched.length-1];if(P&&P.redirect){const{redirect:y}=P;let A=typeof y=="function"?y(h):y;return typeof A=="string"&&(A=A.includes("?")||A.includes("#")?A=E(A):{path:A},A.params={}),ta({query:h.query,hash:h.hash,params:"path"in A?{}:h.params},A)}}function Ca(h,P){const y=i=V(h),A=p.value,sa=h.state,b=h.force,f=h.replace===!0,u=ga(y);if(u)return Ca(ta(E(u),{state:typeof u=="object"?ta({},sa,u.state):sa,force:b,replace:f}),P||y);const w=y;w.redirectedFrom=P;let k;return!b&&bl(t,A,y)&&(k=Ws(16,{to:w,from:A}),Ka(A,A,!0,!1)),(k?Promise.resolve(k):na(w,A)).catch(_=>cs(_)?cs(_,2)?_:ls(_):aa(_,w,A)).then(_=>{if(_){if(cs(_,2))return Ca(ta({replace:f},E(_.to),{state:typeof _.to=="object"?ta({},sa,_.to.state):sa,force:b}),P||w)}else _=O(w,A,!0,f,sa);return Sa(w,A,_),_})}function J(h,P){const y=D(h,P);return y?Promise.reject(y):Promise.resolve()}function ra(h){const P=Os.values().next().value;return P&&typeof P.runWithContext=="function"?P.runWithContext(h):h()}function na(h,P){let y;const[A,sa,b]=eb(h,P);y=pc(A.reverse(),"beforeRouteLeave",h,P);for(const u of A)u.leaveGuards.forEach(w=>{y.push(us(w,h,P))});const f=J.bind(null,h,P);return y.push(f),xa(y).then(()=>{y=[];for(const u of e.list())y.push(us(u,h,P));return y.push(f),xa(y)}).then(()=>{y=pc(sa,"beforeRouteUpdate",h,P);for(const u of sa)u.updateGuards.forEach(w=>{y.push(us(w,h,P))});return y.push(f),xa(y)}).then(()=>{y=[];for(const u of b)if(u.beforeEnter)if(Ua(u.beforeEnter))for(const w of u.beforeEnter)y.push(us(w,h,P));else y.push(us(u.beforeEnter,h,P));return y.push(f),xa(y)}).then(()=>(h.matched.forEach(u=>u.enterCallbacks={}),y=pc(b,"beforeRouteEnter",h,P),y.push(f),xa(y))).then(()=>{y=[];for(const u of n.list())y.push(us(u,h,P));return y.push(f),xa(y)}).catch(u=>cs(u,8)?u:Promise.reject(u))}function Sa(h,P,y){l.list().forEach(A=>ra(()=>A(h,P,y)))}function O(h,P,y,A,sa){const b=D(h,P);if(b)return b;const f=P===fs,u=Ms?history.state:{};y&&(A||f?c.replace(h.fullPath,ta({scroll:f&&u&&u.scroll},sa)):c.push(h.fullPath,sa)),p.value=h,Ka(h,P,y,f),ls()}let ca;function Pa(){ca||(ca=c.listen((h,P,y)=>{if(!od.listening)return;const A=V(h),sa=ga(A);if(sa){Ca(ta(sa,{replace:!0}),A).catch(nd);return}i=A;const b=p.value;Ms&&hl(It(b.fullPath,y.delta),Kd()),na(A,b).catch(f=>cs(f,12)?f:cs(f,2)?(Ca(f.to,A).then(u=>{cs(u,20)&&!y.delta&&y.type===fd.pop&&c.go(-1,!1)}).catch(nd),Promise.reject()):(y.delta&&c.go(-y.delta,!1),aa(f,A,b))).then(f=>{f=f||O(A,b,!1),f&&(y.delta&&!cs(f,8)?c.go(-y.delta,!1):y.type===fd.pop&&cs(f,20)&&c.go(-1,!1)),Sa(A,b,f)}).catch(nd)}))}let ss=ad(),ka=ad(),pa;function aa(h,P,y){ls(h);const A=ka.list();return A.length?A.forEach(sa=>sa(h,P,y)):console.error(h),Promise.reject(h)}function ds(){return pa&&p.value!==fs?Promise.resolve():new Promise((h,P)=>{ss.add([h,P])})}function ls(h){return pa||(pa=!h,Pa(),ss.list().forEach(([P,y])=>h?y(h):P()),ss.reset()),h}function Ka(h,P,y,A){const{scrollBehavior:sa}=a;if(!Ms||!sa)return Promise.resolve();const b=!y&&kl(It(h.fullPath,0))||(A||!y)&&history.state&&history.state.scroll||null;return Cn().then(()=>sa(h,P,b)).then(f=>f&&wl(f)).catch(f=>aa(f,h,P))}const Va=h=>c.go(h);let $s;const Os=new Set,od={currentRoute:p,listening:!0,addRoute:g,removeRoute:L,hasRoute:I,getRoutes:j,resolve:V,options:a,push:$,replace:la,go:Va,back:()=>Va(-1),forward:()=>Va(1),beforeEach:e.add,beforeResolve:n.add,afterEach:l.add,onError:ka.add,isReady:ds,install(h){const P=this;h.component("RouterLink",db),h.component("RouterView",ov),h.config.globalProperties.$router=P,Object.defineProperty(h.config.globalProperties,"$route",{enumerable:!0,get:()=>Ns(p)}),Ms&&!$s&&p.value===fs&&($s=!0,$(c.location).catch(sa=>{}));const y={};for(const sa in fs)Object.defineProperty(y,sa,{get:()=>p.value[sa],enumerable:!0});h.provide(Xc,P),h.provide(fv,kn(y)),h.provide(yc,p);const A=h.unmount;Os.add(h),h.unmount=function(){Os.delete(h),Os.size<1&&(i=fs,ca&&ca(),ca=null,p.value=fs,$s=!1,pa=!1),A()}}};function xa(h){return h.reduce((P,y)=>P.then(()=>ra(y)),Promise.resolve())}return od}function eb(a,s){const d=[],t=[],c=[],e=Math.max(s.matched.length,a.matched.length);for(let n=0;n<e;n++){const l=s.matched[n];l&&(a.matched.find(i=>Ds(i,l))?t.push(l):d.push(l));const p=a.matched[n];p&&(s.matched.find(i=>Ds(i,p))||c.push(p))}return[d,t,c]}const pb={__name:"App",setup(a){return(s,d)=>(da(),Qn(Ns(ov)))}},uv="/vue-learn-js/assets/title-4942f50e.svg";const ia=(a,s)=>{const d=a.__vccOpts||a;for(const[t,c]of s)d[t]=c;return d},lb={},gs=a=>(wa("data-v-c41a158b"),a=a(),ha(),a),bb={class:""},ib=gs(()=>v("div",{class:"svg imgLayout"},[v("img",{src:uv,alt:""})],-1)),rb=gs(()=>v("input",{type:"checkbox",id:"nav_check",hidden:""},null,-1)),fb=gs(()=>v("div",{class:"liPad"},"關於",-1)),ob=gs(()=>v("div",{class:"liPad"},"Web",-1)),ub=gs(()=>v("div",{class:"liPad"},"Html",-1)),mb=gs(()=>v("div",{class:"liPad"},"CSS",-1)),wb=gs(()=>v("div",{class:"liPad"},"JavaScript",-1)),hb=gs(()=>v("label",{for:"nav_check",class:"hamburger"},[v("div"),v("div"),v("div")],-1));function kb(a,s){const d=za("router-link"),t=za("RouterLink");return da(),ea("header",null,[v("div",bb,[T(d,{to:"/"},{default:C(()=>[ib]),_:1})]),rb,v("nav",null,[v("ul",null,[v("li",null,[T(d,{to:"/about"},{default:C(()=>[fb]),_:1})]),v("li",null,[T(d,{to:"/http"},{default:C(()=>[ob]),_:1})]),v("li",null,[T(d,{to:"/html"},{default:C(()=>[ub]),_:1})]),v("li",null,[T(d,{to:"/css"},{default:C(()=>[mb]),_:1})]),v("li",null,[T(t,{to:"/js"},{default:C(()=>[wb]),_:1})])])]),hb])}const gb=ia(lb,[["render",kb],["__scopeId","data-v-c41a158b"]]);const Ts=a=>(wa("data-v-bdf2cdba"),a=a(),ha(),a),Tb={class:""},_b=Ts(()=>v("div",{class:"svg imgLayout"},[v("img",{src:uv,alt:""})],-1)),zb=Ts(()=>v("input",{type:"checkbox",id:"nav_check",hidden:""},null,-1)),Sb=Ts(()=>v("div",{class:"liPad"},"關於",-1)),qb=Ts(()=>v("div",{class:"liPad"},"Web",-1)),yb=Ts(()=>v("div",{class:"liPad"},"Html",-1)),Cb=Ts(()=>v("div",{class:"liPad"},"CSS",-1)),xb=Ts(()=>v("div",{class:"liPad"},"JavaScript",-1)),Lb=Ts(()=>v("label",{for:"nav_check",class:"hamburger"},[v("div"),v("div"),v("div")],-1)),jb={__name:"NavBarFixed",setup(a){const s=ua(!0);return window.addEventListener("scroll",function(){s.value=window.scrollY}),(d,t)=>{const c=za("router-link");return da(),ea("header",{class:Ad({show:s.value>0})},[v("div",Tb,[T(c,{to:"/"},{default:C(()=>[_b]),_:1})]),zb,v("nav",null,[v("ul",null,[v("li",null,[T(c,{to:"/about"},{default:C(()=>[Sb]),_:1})]),v("li",null,[T(c,{to:"/http"},{default:C(()=>[qb]),_:1})]),v("li",null,[T(c,{to:"/html"},{default:C(()=>[yb]),_:1})]),v("li",null,[T(c,{to:"/css"},{default:C(()=>[Cb]),_:1})]),v("li",null,[T(c,{to:"/js"},{default:C(()=>[xb]),_:1})])])]),Lb],2)}}},Pb=ia(jb,[["__scopeId","data-v-bdf2cdba"]]);const Nb=a=>(wa("data-v-f70b9b6e"),a=a(),ha(),a),Vb={class:"showTimeDiv"},$b=Nb(()=>v("footer",null," Copyright © 2023 Wayne Lu ",-1)),Ob={__name:"Footer",setup(a){const s=ua("");return setInterval(function(){let t=new Date;s.value=`${t.getMonth()+1} / ${t.getDate()} _ ${t.getHours()} : ${t.getMinutes()}`},2e3),(()=>{let t=new Date;s.value=`${t.getMonth()+1} / ${t.getDate()} _  ${t.getHours()} : ${t.getMinutes()}`})(),(t,c)=>(da(),ea(Q,null,[v("div",Vb,[v("div",null,Rv(s.value),1)]),$b],64))}},Eb=ia(Ob,[["__scopeId","data-v-f70b9b6e"]]),Ab={__name:"Layout",setup(a){return(s,d)=>{const t=za("RouterView");return da(),ea(Q,null,[T(Pb),T(gb),T(t),T(Eb)],64)}}},Mb="/vue-learn-js/assets/wss-1b257452.svg";const Fb={},ps=a=>(wa("data-v-873b931f"),a=a(),ha(),a),Ib=ps(()=>v("div",{class:"sectionHolder"},null,-1)),Rb=ps(()=>v("div",{class:"sectionHolder"},null,-1)),Hb={class:"disCen title"},Bb={class:"titleCard"},Jb={class:"titleCardLeft"},Db=ps(()=>v("h1",null,"Wayne's Blog",-1)),Wb=ps(()=>v("h1",null,"前端學習筆記",-1)),Ub=ps(()=>v("h3",null,"記錄一些關於前端學習的筆記",-1)),Kb=ps(()=>v("br",null,null,-1)),Xb={class:"btnContainer"},Yb=ps(()=>v("div",{class:"btnL btn-background-slideL"}," 快速開始 ",-1)),Gb=ps(()=>v("div",null,[v("a",{href:"https://github.com/wayne23123"},[v("div",{class:"btnR btn-background-slideR"},"View on GitHub")])],-1)),Qb={class:"titleCardRight"},Zb=ps(()=>v("div",{class:"cardRightImgLayout svg"},[v("img",{src:Mb,alt:""})],-1)),ai=U('<div class="fourCard" data-v-873b931f><div class="fourCardContainer" data-v-873b931f><div class="cardContainer" data-v-873b931f><div class="card" data-v-873b931f><div class="cardLayout" data-v-873b931f><div class="cardTop disCen" data-v-873b931f><span class="cardTopBGC" data-v-873b931f>💡</span></div><h3 class="corTitle disCen" data-v-873b931f>About Me</h3><p class="corText" data-v-873b931f> Hi, I&#39;m Wayne Lu, <br data-v-873b931f> a passionate frontend developer from Taiwan. </p></div></div></div><div class="cardContainer" data-v-873b931f><div class="card" data-v-873b931f><div class="cardLayout" data-v-873b931f><div class="cardTop disCen" data-v-873b931f><span class="cardTopBGC" data-v-873b931f>💻</span></div><h3 class="corTitle disCen" data-v-873b931f>Languages</h3><p class="corText" data-v-873b931f>JavaScript</p></div></div></div><div class="cardContainer" data-v-873b931f><div class="card" data-v-873b931f><div class="cardLayout" data-v-873b931f><div class="cardTop disCen" data-v-873b931f><span class="cardTopBGC" data-v-873b931f>📚</span></div><h3 class="corTitle disCen" data-v-873b931f>Frontend Skills</h3><p class="corText" data-v-873b931f>Vue</p></div></div></div><div class="cardContainer" data-v-873b931f><div class="card" data-v-873b931f><div class="cardLayout" data-v-873b931f><div class="cardTop disCen" data-v-873b931f><span class="cardTopBGC" data-v-873b931f>🛠️</span></div><h3 class="corTitle disCen" data-v-873b931f>Tools</h3><p class="corText" data-v-873b931f>Vite、Webpack</p></div></div></div></div></div>',1);function si(a,s){const d=za("router-link");return da(),ea("section",null,[Ib,Rb,v("div",Hb,[v("div",Bb,[v("div",Jb,[Db,Wb,Ub,Kb,v("div",Xb,[v("div",null,[T(d,{to:"/js"},{default:C(()=>[Yb]),_:1})]),Gb])]),v("div",Qb,[T(d,{to:"/"},{default:C(()=>[Zb]),_:1})])])]),ai])}const an=ia(Fb,[["render",si],["__scopeId","data-v-873b931f"]]);const Ys=a=>(wa("data-v-244e3012"),a=a(),ha(),a),di=Ys(()=>v("div",{class:"sectionHolderNav"},null,-1)),ci={class:"aboutContainer disCen"},ti={class:"aboutLayout"},ni=U('<br data-v-244e3012><h3 class="cor36" data-v-244e3012># 關於此筆記</h3><p data-v-244e3012>Wayne Lu 的學習筆記。</p><br data-v-244e3012><hr data-v-244e3012><br data-v-244e3012><h3 class="cor36" data-v-244e3012># 都記錄些什麼?</h3><p data-v-244e3012>此筆記主要記錄一些關於前端學習的筆記。</p><br data-v-244e3012><hr data-v-244e3012><br data-v-244e3012><h3 class="cor36" data-v-244e3012># 康乃爾筆記法</h3><p data-v-244e3012>兩欄筆記法</p><p class="pFou" data-v-244e3012>1. 左邊關鍵字</p><p class="pFou" data-v-244e3012>2. 右邊筆記</p><p class="pFou" data-v-244e3012>3. 下面總結</p><br data-v-244e3012><a href="https://zh.wikipedia.org/zh-tw/%E5%BA%B7%E5%A5%88%E5%B0%94%E7%AC%94%E8%AE%B0%E6%B3%95" data-v-244e3012>康乃爾筆記法 @wiki</a><br data-v-244e3012><p class="comment" data-v-244e3012> 大腦中地標 -&gt; 記憶宮殿 -&gt; 透過小紙條or圖 -&gt; 記憶點(畫表情) </p><br data-v-244e3012><hr data-v-244e3012><br data-v-244e3012><h3 class="cor36" data-v-244e3012># 費曼學習法</h3><p data-v-244e3012>1. 把它教給一個小孩子</p><p data-v-244e3012>2. 回顧教學過程(ex腳本,他不懂腳本要再解釋)</p><p data-v-244e3012>3. 將語言條理化,簡化</p><p data-v-244e3012>4. 把它教給一個大人</p><br data-v-244e3012><a href="https://www.youtube.com/watch?v=gcbCXqjicu0" data-v-244e3012>費曼學習法：快速掌握新知識 @youtube 好葉</a><br data-v-244e3012><a href="https://www.youtube.com/watch?v=iFSVMuBDMws" data-v-244e3012>大腦喜歡這樣學 @youtube 超級歪</a><br data-v-244e3012><hr data-v-244e3012><br data-v-244e3012><h3 class="cor36" data-v-244e3012># 工作中如何使用 Git</h3><br data-v-244e3012><a href="https://juejin.cn/post/7165654391511318559" data-v-244e3012> 工作中如何使用 Git @掘金 沐华 </a><br data-v-244e3012><hr data-v-244e3012><br data-v-244e3012><h3 class="cor36" data-v-244e3012># 連續跑步一年變化</h3><a href="https://www.bilibili.com/video/BV1Gk4y1V7oy/?spm_id_from=333.999.0.0" data-v-244e3012> 連續跑步一年變化 @bilibili 李白尼的猜想 </a><br data-v-244e3012><a href="https://www.youtube.com/watch?v=Po91wXp_hYE&amp;t=763s" data-v-244e3012>空腹才是最强的良藥 @youtube Fox面</a><br data-v-244e3012><a href="https://www.youtube.com/watch?v=s73WwmWVqBg" data-v-244e3012>為什麼要睡覺 @youtube 文森說書 </a><br data-v-244e3012><a href="https://www.youtube.com/watch?v=3QHjv-vOlDU&amp;t=440s" data-v-244e3012>天才和平庸的差距，是如何區分的 @youtubr 心河擺渡</a><br data-v-244e3012><a href="https://www.youtube.com/watch?v=w3PIS7a7IKI" data-v-244e3012>智能陷阱，如何操控我們的生活? @youtubr 心河擺渡</a><br data-v-244e3012><a href="https://www.youtube.com/watch?v=oeybQjreWhU" data-v-244e3012>貧窮的本質 @youtube 艾倫的悅讀空間</a><br data-v-244e3012><a href="https://www.youtube.com/watch?v=wcBHHyK9ig8" data-v-244e3012>一流的人如何保持巔峰 @youtube 文森說書</a><br data-v-244e3012><a href="https://www.youtube.com/watch?v=XS_D1n3fD54" data-v-244e3012>總有一天你會懂 @youtube 文森說書</a><br data-v-244e3012><a href="https://www.youtube.com/watch?v=qrj2DcdGCPs&amp;t=39s" data-v-244e3012>真正的快樂處方 @youtube 文森說書</a><br data-v-244e3012>',60),vi={key:0},ei=Ys(()=>v("hr",null,null,-1)),pi=Ys(()=>v("br",null,null,-1)),li=Ys(()=>v("p",null,"Http . . . 超文本傳輸協定",-1)),bi=[ei,pi,li],ii=Ys(()=>v("div",{class:"toTopButton"},[v("div",{class:"disCen"},"___"),v("div",{class:"disCen"},"▲")],-1)),ri=[ii],fi=Ys(()=>v("div",{class:"toBotButton"},[v("div",{class:"disCen"},"▼"),v("div",{class:"disCen"},"￣")],-1)),oi=[fi],ui={__name:"AboutPage",setup(a){const s=ua(!1);window.addEventListener("scroll",function(){s.value=window.scrollY>0});function d(){window.scrollTo({top:0,left:0,behavior:"smooth"})}function t(){window.scrollTo({top:999999,left:0,behavior:"smooth"})}const c=ua(!1);function e(){c.value=!0}return(n,l)=>(da(),ea(Q,null,[di,v("section",null,[v("div",ci,[v("div",null,[v("div",ti,[ni,v("div",{onClick:l[0]||(l[0]=p=>e()),style:{color:"#171717"}},"test"),c.value?(da(),ea("div",vi,bi)):mp("",!0)])])])]),v("div",null,[X(T(W,{name:"fade",tag:"div"},{default:C(()=>[v("div",{onClick:d,class:"toTop"},ri)]),_:1},512),[[Y,s.value]]),X(T(W,{name:"fade",tag:"div"},{default:C(()=>[v("div",{onClick:t,class:"toBot"},oi)]),_:1},512),[[Y,s.value]])])],64))}},mi=ia(ui,[["__scopeId","data-v-244e3012"]]),wi="/vue-learn-js/assets/render003-702d2c0e.png",hi="/vue-learn-js/assets/render004-6e9437a2.png";const Yc=a=>(wa("data-v-c94603c9"),a=a(),ha(),a),ki={class:"leftNav"},gi={class:"leftNavContainer"},Ti={class:"leftNavLayout"},_i={class:"Main"},zi={class:"mainContainer"},Si={class:"mainLayout"},qi=U('<div id="web001" class="articleCardTitle cor36" data-v-c94603c9> [ Web筆記 ] ≫ 瀏覽器內核,主要組成部分 </div><p data-v-c94603c9>主要分成 2 部分:</p><p class="cor36" data-v-c94603c9>渲染引擎:</p><br data-v-c94603c9><p class="pTwo" data-v-c94603c9> 負責取得網頁內容 ( HTML . XML . 圖片 )，整理訊息 ( 加入 CSS ) ，計算網頁顯示方式，然後輸出至顯示器。 </p><p class="cor36" data-v-c94603c9>JS 引擎:</p><br data-v-c94603c9><p class="pTwo" data-v-c94603c9> 解析和執行網頁中的 JavaScript 代碼，實現網頁的動態效果和交互功能。 </p><br data-v-c94603c9><p data-v-c94603c9>瀏覽器內核可以理解為排版引擎</p><br data-v-c94603c9><h3 class="cor36" data-v-c94603c9>WebKit</h3><p data-v-c94603c9>代表作品是 Safari、舊版 Chrome</p><br data-v-c94603c9><h3 class="cor36" data-v-c94603c9>Blink</h3><p data-v-c94603c9>代表作品是 Chrome、Opera</p><br data-v-c94603c9><h3 class="cor36" data-v-c94603c9>Trident</h3><p data-v-c94603c9>代表作品是IE</p><br data-v-c94603c9><h3 class="cor36" data-v-c94603c9>Gecko</h3><p data-v-c94603c9>代表作品是Firefox</p><br data-v-c94603c9><br data-v-c94603c9><h3 class="articleCardTitle cor36" data-v-c94603c9># 瀏覽器主要組成部分</h3><p data-v-c94603c9>1.使用者介面： 包括位址列、前進/後退/重新整理/書籤等按鈕</p><p data-v-c94603c9>2.瀏覽器引擎： 在使用者介面與呈現引擎之間傳遞指令</p><p data-v-c94603c9>3.渲染引擎： 用於繪製請求的內容</p><p data-v-c94603c9> 4.網路： 用於完成網路調用，例如 HTTP 請求，具有跨平台的介面，可以在不同平台上運作 </p><p data-v-c94603c9>5.JavaScript 解譯器： 用於解析執行 JavaScript 程式碼</p><p data-v-c94603c9> 6.使用者介面後端： 用於繪製基本的視窗元件，例如組合框和視窗，底層使用作業系統的使用者介面 </p><p data-v-c94603c9> 7.資料儲存： 屬於持久層，瀏覽器在硬碟中儲存各種類似 Cookie 的資料，HTML5 定義了 Web Database 技術，這是一種輕量級完整的客戶端儲存技術。 </p><br data-v-c94603c9><br data-v-c94603c9><h1 id="web002" class="articleCardTitle cor36" data-v-c94603c9> [ Web筆記 ] ≫ 瀏覽器輸入網址後按下 enter 會發生什麼 ? </h1><p data-v-c94603c9>首先進行 DNS 域名解析, 再來與服務器三次握手建立 TCP 連結,</p><p data-v-c94603c9>然後發送 http 請求, 然後服務器處理請求</p><p data-v-c94603c9>服務器返回響應結果, 然後四次揮手關閉 TCP 連結</p><p data-v-c94603c9>然後瀏覽器解析 HTML 文本, 最後瀏覽器布局渲染頁面</p><br data-v-c94603c9><p data-v-c94603c9>1.瀏覽器接受 URL 開啟網路請求線程 (進程 &gt; 線程)</p><p data-v-c94603c9> 2.瀏覽器通過 DNS 服務器得到域名的 IP位置, 向 IP 地址 建立連接(TCP3次握手) 後發送http請求 </p><p data-v-c94603c9>3.服務器返回響應結果, 然後四次揮手關閉TCP連結</p><p data-v-c94603c9>4.瀏覽器渲染進程解析 HTML 文本， 構建 DOM 樹</p><p data-v-c94603c9> 5.解析 HTML 時, 如果遇到 內連樣式 或 CSS 文本, 則下載並構建樣式規則, 如果遇到 JS 腳本, 則下載執行腳本 </p><p data-v-c94603c9>6.DOM 樹和 CSSOM 構建完成之後, 渲染線程將 2 者合併成渲染樹</p><p data-v-c94603c9>7.渲染進程開始對渲染樹進行布局, 生成布局樹 (layout tree)</p><p data-v-c94603c9>8.渲染樹對布局樹進行繪製, 生成繪製紀錄</p><br data-v-c94603c9><br data-v-c94603c9><div class="disCen" data-v-c94603c9><img src="'+wi+'" style="max-width:500px;" alt="" data-v-c94603c9></div><div class="disCen" data-v-c94603c9><img src="'+hi+'" style="max-width:500px;" alt="" data-v-c94603c9></div><br data-v-c94603c9><br data-v-c94603c9><h3 class="articleCardTitle cor36" data-v-c94603c9># CSS 會阻塞 DOM 嗎?</h3><p data-v-c94603c9>CSS 不會阻塞 DOM 解析，會阻塞 DOM 渲染</p><p data-v-c94603c9>CSS 會阻塞 JS 執行，不會阻塞 JS 文件下載</p><br data-v-c94603c9><p data-v-c94603c9>DOM 樹和 CSSOM 樹都加載完 才渲染 render 樹</p><p data-v-c94603c9>CSS 文件會先加載執行完 再執行 JS 文件</p><br data-v-c94603c9><p class="cor36" data-v-c94603c9># 避免 FOUC 白屏</p><p data-v-c94603c9> CSS 檔案放置在 HTML 文檔的 head 標籤中 ,確保在頁面渲染前加載並應用CSS樣式。 </p><p data-v-c94603c9>避免使用 JavaScript 動態加載 CSS 檔案</p><p data-v-c94603c9> 樣式預加載技術，如 preload 或 prefetch，提前加載 CSS 檔案以減少延遲。 </p><br data-v-c94603c9><br data-v-c94603c9><h3 class="articleCardTitle cor36" data-v-c94603c9># JS 會阻塞頁面嗎?</h3><p data-v-c94603c9>JS 會阻塞 DOM 解析，建議將 JS 文件放在 HTML 最下面</p><p data-v-c94603c9> 瀏覽器在解析 HTML 時，如果遇到 ＜script&gt;，會先下載、解析完這些 JavaScript 檔案，再往下繼續解析 HTML 其他內容。 </p><br data-v-c94603c9><p data-v-c94603c9>defer和async的差別?</p><p data-v-c94603c9>async 下載完就直接執行。</p><p data-v-c94603c9>defer 等到瀏覽器解析完 HTML 後執行。</p><br data-v-c94603c9><br data-v-c94603c9><h3 class="articleCardTitle cor36" data-v-c94603c9># 解析 HTML</h3><p data-v-c94603c9> HTML是逐行解析的，瀏覽器的渲染引擎會將HTML文檔解析並轉換為DOM節點。 </p><p data-v-c94603c9>將標記 （Tokens） 解析成物件</p><p data-v-c94603c9>將物件組合成一個DOM樹</p><br data-v-c94603c9><br data-v-c94603c9><h3 class="articleCardTitle cor36" data-v-c94603c9># 解析 CSS</h3><p data-v-c94603c9>瀏覽器會從右到左解析CSS選擇器</p><p data-v-c94603c9>∕span -&gt; ∕div -&gt; html</p><br data-v-c94603c9><br data-v-c94603c9>',87),yi=Yc(()=>v("span",null,"性能問題,假設從左往右會先找到很多a,可能99%沒用,沒必要找",-1)),Ci=U('<br data-v-c94603c9><br data-v-c94603c9><h3 class="articleCardTitle cor36" data-v-c94603c9># JavaScript 解析的流程</h3><p data-v-c94603c9> 1.瀏覽器創建 Document 物件並開始解析 HTML 文件。解析器將解析到的元素和文本節點添加到文件中，此時 document.readyState 屬性為 &quot;loading&quot;。 </p><br data-v-c94603c9><p data-v-c94603c9> 2.HTML 解析器遇到沒有 async 和 defer 屬性的 script 標籤時，將它們添加到文件中並開始執行內部或外部腳本。這些腳本將同步執行，解析器在腳本下載和執行期間會暫停解析。因此，可以使用 document.write() 方法將文本插入到輸入流中。同步腳本通常用於定義函數和註冊事件處理程序，它們可以遍歷和操作腳本之前的文件內容。 </p><br data-v-c94603c9><p data-v-c94603c9> 3.當解析器遇到設置了 async 屬性的 script 標籤時，它會開始下載該腳本並繼續解析文件。這些腳本將在下載完成後盡快執行，但解析器不會等待它們的下載。異步腳本禁止使用 document.write()，它們可以訪問其所在的 script 標籤以及之前的文件元素。 </p><br data-v-c94603c9><p data-v-c94603c9> 4.所有設置了 defer 屬性的腳本將按照它們在文件中出現的順序執行。延遲腳本能夠訪問完整的文件樹，但禁止使用 document.write()。 </p><br data-v-c94603c9><p data-v-c94603c9> 5.當文件上的所有延遲腳本執行完成時，瀏覽器將在 Document 物件上觸發 DOMContentLoaded 事件。這表示文件的 DOM 結構已完全構建，可以進行操作。 </p><br data-v-c94603c9><p data-v-c94603c9> 6.等待其他內容加載完成並且所有異步腳本執行完成後，document.readyState 屬性變為 &quot;complete&quot;，此時 window 物件觸發 load 事件。這表示整個文件和相關資源已經加載完成。 </p><br data-v-c94603c9><br data-v-c94603c9><h3 class="articleCardTitle cor36" data-v-c94603c9># ip地址怎麼找?</h3><p data-v-c94603c9>ip 地址從 DNS 域名服務器裡 存儲的地址本 找出來的</p><br data-v-c94603c9><p data-v-c94603c9>之前 訪問過該網站的話 從本機 緩存數據裡找</p><br data-v-c94603c9><p data-v-c94603c9>如果找不到 就從路由器設置的 電信服務商提供的 DNS 服務器中找</p><br data-v-c94603c9><p data-v-c94603c9>再找不到 就從網站域名提供的 服務商提供的 DNS 服務器找</p><br data-v-c94603c9><br data-v-c94603c9><br data-v-c94603c9><p class="cor36" data-v-c94603c9> TCP 是一種要求資料正確性的傳輸方式， 這表示它需要一些特殊機制， 來確保傳輸的數據不會出錯。 </p><br data-v-c94603c9><a href="https://zh.wikipedia.org/wiki/%E4%BC%A0%E8%BE%93%E6%8E%A7%E5%88%B6%E5%8D%8F%E8%AE%AE" data-v-c94603c9>傳輸控制協定 @wiki</a><br data-v-c94603c9><h3 class="articleCardTitle cor36" data-v-c94603c9> # 三次握手 -&gt; 與 WEB 服務器建立連接 -&gt; 確認雙方都能接收,發送正常 </h3><br data-v-c94603c9><p data-v-c94603c9>第一次握手： 客戶端發送 SYN 數據包,服務端收到</p><br data-v-c94603c9><p data-v-c94603c9>第二次握手： 服務端回復 SYN 和 ACK 數據包,客戶端收到</p><br data-v-c94603c9><p data-v-c94603c9> 第三次握手： 客戶端 檢查接收數據包正確後 發送 ACK 數據包,服務端收到,連接建立成功 </p><br data-v-c94603c9><br data-v-c94603c9><p data-v-c94603c9> 第一次握手：客戶端向伺服器發送一個帶有 SYN 標誌位為1的數據包，同時隨機生成一個初始序列號（Seq = J）作為起始序列號。客戶端表示希望建立連接。 </p><p data-v-c94603c9> 第二次握手：伺服器收到客戶端的請求後，回復一個帶有 SYN 和 ACK 標誌位為1的數據包，確認連接請求，同時生成自己的序列號（Seq = K），同時將客戶端的序列號加1作為確認號（Ack = J + 1）。伺服器表示接受客戶端的連接請求並發送確認信息。 </p><p data-v-c94603c9> 第三次握手：客戶端收到伺服器的確認信息後，檢查確認號是否正確（Ack = K + 1），如果正確，則發送一個帶有 ACK 標誌位為1的數據包，將伺服器的序列號加1作為確認號（Ack = K + 1），表示客戶端接受伺服器的確認信息。伺服器收到客戶端的確認信息後，連接建立成功。 </p><br data-v-c94603c9><br data-v-c94603c9><br data-v-c94603c9><p data-v-c94603c9>序列號（seq，32位元長）:</p><p class="pFou" data-v-c94603c9> 如果含有同步化旗標（SYN），則此為最初的序列號；第一個資料位元的序列碼為本序列號加一。 </p><p class="pFou" data-v-c94603c9> 如果沒有同步化旗標（SYN），則此為第一個資料位元的序列碼。 </p><br data-v-c94603c9><p data-v-c94603c9>確認號（ack，32位元長）:</p><p class="pFou" data-v-c94603c9> 期望收到的資料的開始序列號。也即已經收到的資料的位元組長度加1。 </p><br data-v-c94603c9><p data-v-c94603c9>標誌符（9位元長）:</p><p class="pFou" data-v-c94603c9> SYN: 為1表示這是連接請求或是連接接受請求，用於建立連接和使順序號同步 </p><p class="pFou" data-v-c94603c9>FIN: 為1表示傳送方沒有資料要傳輸了，要求釋放連接。</p><br data-v-c94603c9><br data-v-c94603c9><p class="cor36" data-v-c94603c9>內容傳輸：</p><p data-v-c94603c9>確認封包機制： 接收端接收到包時, 要回傳確認信息給 發送端</p><p data-v-c94603c9>逾時與重送： 如果接收端 一直無返回確認信息，發送端 會重發一次</p><br data-v-c94603c9><br data-v-c94603c9><p class="articleCardTitle cor36" data-v-c94603c9># 4次揮手</p><p data-v-c94603c9> 客戶端發送一個 FIN Seq = M（FIN置位，序號為M） 封包，用來關閉客戶端到伺服器端的資料傳送。 </p><br data-v-c94603c9><p data-v-c94603c9> 伺服器端收到這個 FIN ，它回送一個 ACK ，確認序號 Ack 為收到的序號 M+1。 </p><br data-v-c94603c9><p data-v-c94603c9>伺服器端關閉與客戶端的連接，發送一個 FIN Seq = N 給客戶端。</p><br data-v-c94603c9><p data-v-c94603c9>客戶端回覆 ACK 報文確認，確認序號 Ack 為收到的序號 N+1。</p><br data-v-c94603c9><br data-v-c94603c9><br data-v-c94603c9><p class="cor36" data-v-c94603c9># 為什麼建立是 3 次，關閉是 4 次</p><p data-v-c94603c9>因為服務端在 LISTEN 狀態下, 收到建立連接請求的 SYN 報文後，</p><br data-v-c94603c9><p data-v-c94603c9>把 ACK 和 SYN 放在一個報文裡發送給客戶端。</p><br data-v-c94603c9><p data-v-c94603c9>而關閉連接時, 收到對方的 FIN 報文時</p><br data-v-c94603c9><p data-v-c94603c9>僅表示對方不再發送數據但還是能發送數據</p><br data-v-c94603c9><p data-v-c94603c9>己方是否現在關閉發送數據通道, 需要上層應用來決定</p><br data-v-c94603c9><p data-v-c94603c9>因此己方 ACK 和 FIN 分開發送</p><br data-v-c94603c9><br data-v-c94603c9><h3 class="articleCardTitle cor36" data-v-c94603c9># 什麼是SYN Flood攻擊?</h3><p data-v-c94603c9>SYNflood 利用 TCP 協議缺陷, 發送大量偽造 TCP 請求</p><br data-v-c94603c9><p data-v-c94603c9>請求連接的第一個握手包 (SYN), 服務器回應第二個握手包 (SYN+ACK)</p><br data-v-c94603c9><p data-v-c94603c9>因為偽造IP 對方不會收到包且不會回應第三個握手包</p><br data-v-c94603c9><p data-v-c94603c9> 導致服務器保持大量 SYN_RECE 為半連結, 且會默認 5 次回應第二個握手包, </p><br data-v-c94603c9><p data-v-c94603c9>大量惡意 SYN 佔滿未完成連接列隊,導致正常業務連不進來</p><br data-v-c94603c9><br data-v-c94603c9><h3 class="articleCardTitle cor36" data-v-c94603c9># SYNflood怎麼檢測?</h3><p data-v-c94603c9>在服務器上看到大量半連接狀態時, 特別是源 ip 位置是隨機的</p><br data-v-c94603c9><br data-v-c94603c9><h3 class="articleCardTitle cor36" data-v-c94603c9># SYNflood攻擊怎麼解決?</h3><p data-v-c94603c9>1.縮短超時 SYN Timeout</p><p data-v-c94603c9>2.增加最大半連接數</p><p data-v-c94603c9> 3.SYN cookie 技術(收到 SYN 報文不直接 TCP 分配資源,先打開半套的套接字) </p><br data-v-c94603c9><br data-v-c94603c9><h3 id="web003" class="articleCardTitle cor36" data-v-c94603c9> [ Web筆記 ] ≫ http協議? </h3><div data-v-c94603c9><span data-v-c94603c9><a href="https://www.runoob.com/http/http-tutorial.html" data-v-c94603c9>http協議 @菜鳥教程 </a></span></div><br data-v-c94603c9><p data-v-c94603c9>超文本傳輸協定 . . . (Hypertext Transfer Protocol)</p><br data-v-c94603c9><p data-v-c94603c9>他是基於 TCP 默認 80 端口的一個 應用層協議</p><br data-v-c94603c9><p data-v-c94603c9>用於 從全球資訊網 傳輸資源 到本地瀏覽器 的傳輸協議</p><br data-v-c94603c9><p data-v-c94603c9>主要是用來規定 客戶端 和服務器端 的數據傳輸格式</p><br data-v-c94603c9><p data-v-c94603c9>所以 HTTP 是一個標準和規範</p><br data-v-c94603c9><p data-v-c94603c9>每一個 HTTP 連接包括 請求消息 和響應消息 2 部分</p><br data-v-c94603c9><p data-v-c94603c9>請求報文包括 , 請求行, 請求頭, 空行, 請求體</p><br data-v-c94603c9><p data-v-c94603c9>響應報文包括 , 響應行, 響應頭, 空行, 請求體,</p><br data-v-c94603c9><br data-v-c94603c9><h3 class="articleCardTitle cor36" data-v-c94603c9> # http協議包括請求和響應,你能說一個請求完整內容嗎? </h3><p data-v-c94603c9>第一部分:第一行第一個字是get, 然後是url, http協議版本</p><p data-v-c94603c9>第二部分:content-type:</p><p data-v-c94603c9>第三部分:enter2</p><p data-v-c94603c9>第四部份:body a=1&amp;a=2</p><br data-v-c94603c9><br data-v-c94603c9><h3 class="articleCardTitle cor36" data-v-c94603c9># content-type內容怎麼寫?</h3><p data-v-c94603c9>JSON的話是application斜槓json</p><br data-v-c94603c9><br data-v-c94603c9><h3 class="articleCardTitle cor36" data-v-c94603c9># http和https差別?(443端口)</h3><p data-v-c94603c9>http協議傳輸的數據都是未加密的, 因此用http傳輸隱私的訊息不安全</p><br data-v-c94603c9><p data-v-c94603c9>為了保證這些隱私數據能加密傳輸, 就誕生HTTPS 所以比http協議安全</p><br data-v-c94603c9><p data-v-c94603c9> https由tls加http協議構建的, 可以進行加密傳輸, 身分認證的網路協議 </p><br data-v-c94603c9><p data-v-c94603c9>所以比http協議安全</p><br data-v-c94603c9><p data-v-c94603c9>https有兩個作用</p><br data-v-c94603c9><p data-v-c94603c9>1.可以建立一個訊息安全通道, 用來保證數據傳輸的安全性</p><br data-v-c94603c9><p data-v-c94603c9>2.確認網站的真實性</p><br data-v-c94603c9><p data-v-c94603c9>http和https差別</p><br data-v-c94603c9><p data-v-c94603c9>1.http不用證書,https需要申請ca證書</p><br data-v-c94603c9><p data-v-c94603c9> 2.http下的訊息明文傳輸, 而https由tls加http協議構建的可進行加密傳輸身分認證的網路協議, 可以防止傳輸內容被竊取竄改 </p><br data-v-c94603c9><p data-v-c94603c9> 3.http和https使用不同的連接方式, 所以端口不一樣http(80), https(443) </p><br data-v-c94603c9><br data-v-c94603c9><h1 class="articleCardTitle cor36" data-v-c94603c9># SSL怎麼做?</h1><p data-v-c94603c9>客戶端發送請求連接的請求給伺服器，請求中包含一個 SSL</p><br data-v-c94603c9><p data-v-c94603c9> 版本號以及所支持的加密算法。伺服器收到客戶端的請求後，將自己的 SSL 證書發送給客戶端。 </p><br data-v-c94603c9><p data-v-c94603c9>證書中包含伺服器的公鑰、伺服器的名稱以及證書的頒發機構等信息。</p><br data-v-c94603c9><p data-v-c94603c9> 客戶端收到伺服器的 SSL 證書後，會對證書進行驗證，包括證書的頒發機構是否可信、證書中的伺服器名稱是否和請求的伺服器名稱匹配等。 </p><br data-v-c94603c9><p data-v-c94603c9> 客戶端驗證通過後，生成一個隨機數，使用伺服器的公鑰進行加密，並將加密後的隨機數發送給伺服器。 </p><br data-v-c94603c9><p data-v-c94603c9> 伺服器收到客戶端發送的加密隨機數後，使用自己的私鑰進行解密，得到客戶端的隨機數。 </p><br data-v-c94603c9><p data-v-c94603c9> 伺服器和客戶端分別使用這兩個隨機數來生成對稱加密算法所需的密鑰。 </p><br data-v-c94603c9><p data-v-c94603c9>這個密鑰只有伺服器和客戶端才知道，可以保證數據傳輸的安全性。</p><br data-v-c94603c9><p data-v-c94603c9> 客戶端和伺服器之間的數據傳輸會使用對稱加密算法來加密和解密，以保證傳輸的安全性。 </p><h1 class="articleCardTitle cor36" data-v-c94603c9># GET和POST的區別?</h1><p data-v-c94603c9>1.get請求的參數是放在url裡面的, 而post請求參數放在請求體裡面的</p><p data-v-c94603c9>2.get請求可以被瀏覽器緩存 ,post請求不能被緩存</p><p data-v-c94603c9> 3.get請求因為放在url裡面, 而url長度是受限的, 最大2048字符, post長度沒有限制 </p><p data-v-c94603c9> 4.get放在url裡面, 安全性比較差, post請求參數放在body裡面安全性比較好 </p><p data-v-c94603c9> 5.get請求可以通過瀏覽器直接訪問, 支持刷新後退, post請求不能直接被瀏覽器訪問, 刷新後數據需要重新傳送 </p><br data-v-c94603c9><br data-v-c94603c9><h1 class="articleCardTitle cor36" data-v-c94603c9># POST 和 PUT?</h1><p data-v-c94603c9>1.兩者都可以 用來新增資源， 但 PUT 比較像 覆蓋或替代資源</p><p data-v-c94603c9>2.PUT 會指定要覆蓋掉哪個資源， POST 不用</p><p data-v-c94603c9> 3.假設資料庫不能有重複資料的話，用 POST 新增多個可能會報錯，但 PUT 不會，因為它只是不停的 對某個資源 進行覆蓋而已 </p><br data-v-c94603c9><br data-v-c94603c9><h3 class="articleCardTitle cor36" data-v-c94603c9># 強緩存和弱緩存?</h3><p data-v-c94603c9> 瀏覽器緩存是瀏覽器在本地磁碟對使用者最近請求過的文件進行存儲，當訪問者再次訪問同一頁面時，瀏覽器就可以直接從本地磁碟載入文件。 </p><p data-v-c94603c9>分 強緩存（也稱本地緩存） &amp; 協商緩存（也稱弱緩存）</p><br data-v-c94603c9><br data-v-c94603c9><p class="cor36" data-v-c94603c9>強緩存</p><p data-v-c94603c9>首先在http1.1時,他會在它的上面會有一個 catch crtl 頭</p><br data-v-c94603c9><p data-v-c94603c9>裡面可能加上 max age 假設他是 3600, 也就是在這一個小時內</p><br data-v-c94603c9><p data-v-c94603c9>再去訪問這個東西的時候, 它不會再去發請求, 它會從硬碟上去讀取</p><br data-v-c94603c9><p data-v-c94603c9>因為他已經緩存下來了, 同時它會再給他配置一個 etag</p><br data-v-c94603c9><p data-v-c94603c9>這個 etag 是它的特徵值, 可能它特徵值是 AAA</p><br data-v-c94603c9><p data-v-c94603c9>等到期3600過了之後也就到期了</p><br data-v-c94603c9><br data-v-c94603c9><p class="cor36" data-v-c94603c9>這裡涉及到協商緩存</p><br data-v-c94603c9><p data-v-c94603c9>就是它會去跟他協商, 然後發請求去協商</p><br data-v-c94603c9><p data-v-c94603c9>這時候可能會發一個 if 開頭的響應頭</p><br data-v-c94603c9><p data-v-c94603c9> 把那個特徵值帶上也就是剛剛說道的 AAA, 然後去看他是否需要繼續給它存著, </p><br data-v-c94603c9><p data-v-c94603c9>還是要改變這個文件, 它可能會返回 200 或 304, 如果返回 200</p><br data-v-c94603c9><p data-v-c94603c9>不僅返回 200 還會附帶 body,就是會把新的內容給它, 如果返回 304</p><br data-v-c94603c9><p data-v-c94603c9>304 這個狀態碼代表未修改繼續用, 那就不需要新的返回</p><br data-v-c94603c9><br data-v-c94603c9><h3 class="articleCardTitle cor36" data-v-c94603c9># HTTP狀態碼和其含義</h3><p data-v-c94603c9>1xx（資訊性狀態碼）：表示請求已被接收，正在處理。</p><br data-v-c94603c9><div class="pTwo" data-v-c94603c9> 100 Continue： 繼續，在發送 POST 請求時，已發送了 http header 之後伺服器將返回此訊息，表示確認，之後發送具體參數訊息 </div><br data-v-c94603c9><p data-v-c94603c9>2xx（成功狀態碼）：表示請求已成功被伺服器接收、理解和處理。</p><br data-v-c94603c9><div class="pTwo" data-v-c94603c9>200 OK：請求已成功，伺服器正常返回請求的內容。</div><br data-v-c94603c9><div class="pTwo" data-v-c94603c9> 201 Created：請求已成功並在伺服器上創建了新的資源。 </div><br data-v-c94603c9><div class="pTwo" data-v-c94603c9>202 Accepted：伺服器已接受請求，但尚未處理。</div><br data-v-c94603c9><p data-v-c94603c9> 3xx（重新導向狀態碼）：表示客戶端需要採取進一步操作才能完成請求。 </p><br data-v-c94603c9><div class="pTwo" data-v-c94603c9> 301 Moved Permanently：請求的資源已永久移動到新位置。 </div><br data-v-c94603c9><div class="pTwo" data-v-c94603c9>302 Found：請求的資源已臨時移動到新位置。</div><br data-v-c94603c9><div class="pTwo" data-v-c94603c9> 304 Not Modified：客戶端的快取資源是最新的，可以直接使用。 </div><br data-v-c94603c9><p data-v-c94603c9>4xx（客戶端錯誤狀態碼）：表示客戶端發起的請求有錯誤或無法完成。</p><br data-v-c94603c9><div class="pTwo" data-v-c94603c9> 400 Bad Request：請求語法錯誤，伺服器無法理解。 </div><br data-v-c94603c9><div class="pTwo" data-v-c94603c9>401 Unauthorized：請求需要用戶驗證。</div><br data-v-c94603c9><div class="pTwo" data-v-c94603c9>403 Forbidden：禁止訪問。</div><br data-v-c94603c9><div class="pTwo" data-v-c94603c9>404 Not Found：請求的資源不存在。</div><br data-v-c94603c9><p data-v-c94603c9>5xx（伺服器錯誤狀態碼）：表示伺服器在處理請求時發生了錯誤。</p><br data-v-c94603c9><div class="pTwo" data-v-c94603c9> 500 Internal Server Error：伺服器遇到了一個未知的錯誤。 </div><br data-v-c94603c9><div class="pTwo" data-v-c94603c9> 503 Service Unavailable：伺服器暫時無法處理請求，可能是由於過載或維護。 </div><br data-v-c94603c9><br data-v-c94603c9><h1 id="web004" class="articleCardTitle cor36" data-v-c94603c9> [ Web筆記 ] ≫ 描述Cookies、sessionStorage和localStorage的區別 </h1><p data-v-c94603c9> localStorage是本地存儲 cookie是服務器下發給瀏覽器的一串字串, 用來驗證的 </p><br data-v-c94603c9><p class="cor36" data-v-c94603c9>用的時候有什麼不一樣?</p><p data-v-c94603c9> cookie用來存sectionID local裡面儲存形式是字串,紀錄用戶本地操作或記錄數據 </p><br data-v-c94603c9><p class="cor36" data-v-c94603c9>localStorage sessionStorage區別?</p><p data-v-c94603c9> session是會話,當頁面關閉會清空 localStorage不會過期, 沒有過期時間, 除非用戶手動清除緩存 </p><br data-v-c94603c9><br data-v-c94603c9><br data-v-c94603c9><br data-v-c94603c9><p data-v-c94603c9> cookie是網站為了標識使用者身份而儲存在使用者本地終端（Client Side）上的數據（通常經過加密）。 </p><p data-v-c94603c9> cookie數據始終在同源的HTTP請求中攜帶（即使不需要），在瀏覽器和伺服器之間來回傳遞。 </p><p data-v-c94603c9> sessionStorage和localStorage不會自動將數據發送給伺服器，僅在本地保存。 </p><br data-v-c94603c9><h3 data-v-c94603c9>儲存容量：</h3><p data-v-c94603c9>cookie數據大小不能超過4KB。</p><p data-v-c94603c9> sessionStorage和localStorage雖然也有儲存大小的限制，但比cookie大得多，可以達到5MB或更大。 </p><br data-v-c94603c9><h3 data-v-c94603c9>生命週期： (有效時間)</h3><p data-v-c94603c9>cookie 需要設置有效時間，過期後 cookie 銷毀。</p><p data-v-c94603c9>localStorage 除非主動刪除數據，否則永久存在。</p><p data-v-c94603c9>sessionStorage 頁面關閉後刪除。</p><br data-v-c94603c9><h3 data-v-c94603c9>儲存形式:</h3><p data-v-c94603c9>三者都是字串類型</p><p data-v-c94603c9>複雜對象 可用 json 的 stringify 和 parse</p><br data-v-c94603c9><p data-v-c94603c9>JSON.stringify() 將字串轉成 JSON</p><p data-v-c94603c9>JSON.parse() 將 JSON 轉成字串</p><br data-v-c94603c9><h3 data-v-c94603c9>安全性:</h3><p data-v-c94603c9>cookie 請求時一般會攜帶在 header 中</p><p data-v-c94603c9>localStorage、sessionStorage 請求時不會攜帶</p><br data-v-c94603c9><br data-v-c94603c9><h1 id="web005" class="articleCardTitle cor36" data-v-c94603c9> [ Web筆記 ] ≫ 什麼是同源策略,不同源會怎樣? </h1><p data-v-c94603c9> 瀏覽器給出的一個規定,規定說2個URL他的域名,端口,協議都相同, 就是同源 </p><br data-v-c94603c9><p data-v-c94603c9>不同源的話, 比如運行在一個URL上的腳本, 如果它發出的請求</p><br data-v-c94603c9><p data-v-c94603c9> 請求的目標和它所運行的環境不同源, 就會受到同源策略不准你發這個請求 </p><br data-v-c94603c9><br data-v-c94603c9><h1 class="articleCardTitle" data-v-c94603c9># 跨域是什麼?</h1><p data-v-c94603c9>就是域名,端口, 協議如果不一樣,</p><p data-v-c94603c9> 瀏覽器會進行跨域報錯, 使用別人的服務時可能遇到, 遇到的話要做跨域 </p><br data-v-c94603c9><br data-v-c94603c9><div data-v-c94603c9>|......不跨域會怎樣? 不跨域的話訪問不到,沒有權限</div><div data-v-c94603c9>|.........用什麼方式訪問會提示沒有權限? AJAX會訪問不到</div><div data-v-c94603c9>|............我現在從A域名向B域名發get請求會發出去嗎? 會</div><div data-v-c94603c9>|...............B服務器會得到我的請求嗎? 會</div><div data-v-c94603c9>|..................得到之後會給我返回一個響應嗎? 會</div><div data-v-c94603c9> |.....................我唯獨什麼拿不到? JS拿不到他的 response </div><div data-v-c94603c9> |........................誰弄得為什麼拿不到? 瀏覽器, 為了安全起見 </div><div data-v-c94603c9> |...........................要跨越這個限制怎麼做? 兼容IE用JSONP, 不用就用CROS </div><br data-v-c94603c9><br data-v-c94603c9><h1 id="" class="articleCardTitle" data-v-c94603c9># 解決跨域問題:</h1><h3 class="cor36" data-v-c94603c9>JSONP</h3><p data-v-c94603c9>利用script標籤不受同源策略的影響, 前端先動態創立一個script標籤,</p><p data-v-c94603c9>然後給script設置src, 然後src裡面的目標是請求的目標,</p><p data-v-c94603c9> 通常和後端約定說一個回調函數的名字, 通常可以設callback function來告訴後端說我前端回調函數寫這個, </p><p data-v-c94603c9> 然後後端給你返回一個script, script裡面相當於調用你前端寫的callback function </p><p data-v-c94603c9> 然後callback function後端會給你傳一個數據, 你就可以從callback function裡提取這個數據出來 </p><br data-v-c94603c9><br data-v-c94603c9><div data-v-c94603c9>|...JSONP放在請求裡的參數怎麼寫? callback</div><div data-v-c94603c9>|......callback等於什麼? _ 等於參數名</div><div data-v-c94603c9> |.........參數名怎麼構造? _ 通過固定字串加上一個隨機數來確保那個函數名是唯一的 </div><div data-v-c94603c9> |............那我可以監聽它的成功失敗或獲取狀態碼嗎? 不算完全可以, 可以監聽script.onload 可能只會在200時觸發, 其他狀態碼不一定觸發 ,失敗有一個onerrpr 但具體是什麼錯誤是不確定的 </div><br data-v-c94603c9><br data-v-c94603c9><p class="cor36" data-v-c94603c9>如果發POST可能嗎?</p><p data-v-c94603c9>不可能,因為它只能 GET 文件</p><br data-v-c94603c9><br data-v-c94603c9><p class="cor36" data-v-c94603c9>如果我想要獲取狀態碼可能嗎?</p><p data-v-c94603c9> 不可能,如果 404 的話你的回掉函數根本進不來, 前端就沒有感知到 404 </p><br data-v-c94603c9><br data-v-c94603c9><p data-v-c94603c9>優: 兼容性較好, 兼容 IE 用 JSONP, 不用就用 CROS</p><br data-v-c94603c9><br data-v-c94603c9><p class="cor36" data-v-c94603c9>JSONP 的缺點:</p><p class="pTwo" data-v-c94603c9>1. 他只能用 get 請求</p><br data-v-c94603c9><p class="pTwo" data-v-c94603c9> 2-1. 這個 get 無論如何一定會帶上 cookie,這樣的話你就沒辦法限制誰能用 JSONP, 不像 CORS 指定域名使用數據? </p><p class="pSix" data-v-c94603c9>會導致數據被你不希望的源請求到</p><p class="pEig" data-v-c94603c9>解決? _ 做refer較驗</p><br data-v-c94603c9><p class="pTwo" data-v-c94603c9>2-2. A和B可以JSONP,別的網站C也可以JSONP怎麼辦?</p><p class="pSix" data-v-c94603c9> 通過請求頭request字段裡的 refer 來判斷他是C網站來屏蔽 </p><br data-v-c94603c9><p class="pTwo" data-v-c94603c9>2-3. 我能防止別有用心的人調用這個JSONP嗎?</p><p class="pSix" data-v-c94603c9>可以,加一些較驗參數在JS的後面的參數裡面</p><p class="pSix" data-v-c94603c9>1.refer檢查,請求頭 request header 裡面 refer</p><p class="pSix" data-v-c94603c9> 2.把當前域名的cookieID做一個哈希, 哈希後的值放到 JSONP 的後面就可以防止其他網站有效請求 </p><p class="pEig" data-v-c94603c9>(其他網站偽造不了,因為它拿不到cookie)</p><p class="pEig" data-v-c94603c9> (只有你要請求的域名是子域名行,如果完全不相同你自己也拿不到cookie) </p><br data-v-c94603c9><br data-v-c94603c9><h3 class="cor36" data-v-c94603c9>CORS . . . Cross-Origin Resource Sharing</h3><p data-v-c94603c9>2 種請求:</p><p class="cor36" data-v-c94603c9>CORS簡單請求?</p><p data-v-c94603c9>在後端設置響應頭 Access-Control-Allow-Origin 建立一個白名單</p><br data-v-c94603c9><br data-v-c94603c9><p class="cor36" data-v-c94603c9>CORS複雜請求兩次請求都在做什麼?</p><p data-v-c94603c9>第一次它會去 find options請求, 問服務器準不準我發POST請求,</p><p data-v-c94603c9> 如果你返回的 methods裡面有 POST 那就是準, 返回沒有POST就是不准, (需要後端做配合) </p><p data-v-c94603c9>也就是瀏覽器不一定會允許你發 POST 請求,</p><p data-v-c94603c9>你發POST被服務器阻止就發不出去了,</p><p class="comment" data-v-c94603c9> 但簡單請求是一定可以發出去的(它不會問服務器允不允許簡單請求) </p><br data-v-c94603c9><br data-v-c94603c9><p class="cor36" data-v-c94603c9>為什麼 CORS 要分簡單請求和複雜請求?</p><p data-v-c94603c9>POST 比較危險</p><br data-v-c94603c9><br data-v-c94603c9><div data-v-c94603c9>代理怎麼做跨域? 後端配一台 NGINX 服務器</div><br data-v-c94603c9><br data-v-c94603c9><div data-v-c94603c9>|...如果想提取url中的參數,然後把參數變成物件怎麼做?</div><div data-v-c94603c9> |......路徑是/xxx?a=1&amp;b=2,要得到{a:1 , b:2}怎麼做? _ 正則做一個匹配 </div><div data-v-c94603c9>|......url裡面遇到錨點#怎麼處理?</div><div data-v-c94603c9>|.........#號算不算查詢字串的一部分? _ 不算</div><div data-v-c94603c9> |...unicode和utf8區別?(分清子符集和編碼) _ unicode是一個字符集, 它世界所有文字做編碼, utf8是對unicode的計算機編碼 </div><div data-v-c94603c9>|...英文文檔? react beta</div><div data-v-c94603c9>|...如果JS API不知道用法你去哪看? MDN</div><div data-v-c94603c9>|...JS規範文檔英文? ecmascript</div><div data-v-c94603c9>|...規範文檔的英文? specification</div><div data-v-c94603c9>|...grapQL? 前端自己寫自己要的字段,然後後端一次性發過來</div><br data-v-c94603c9><br data-v-c94603c9><h1 class="articleCardTitle cor36" data-v-c94603c9># 網站開發流程?</h1><p data-v-c94603c9> 首先產品經理提出想做的網站是什麼, 前後端討論定一下對應API格式, 訂好規則後前端根據UI給的設計圖把頁面做出來, 測試再根據我們的代碼進行測試, 測試完打包上線 </p><br data-v-c94603c9><br data-v-c94603c9><h1 id="web006" class="articleCardTitle cor36" data-v-c94603c9> [ Web筆記 ] ≫ 腳本攻擊XSS,請求偽造CSRF </h1><h3 class="articleCardTitle" data-v-c94603c9> 跨站腳本攻擊（XSS）Cross-site request forgery </h3><p data-v-c94603c9> 攻擊者在網頁中注入惡意腳本，並將該腳本傳送給其他使用者的瀏覽器執行。 </p><br data-v-c94603c9><br data-v-c94603c9><p data-v-c94603c9>防止XSS攻擊:</p><p data-v-c94603c9>開發者應該適當地驗證和過濾使用者的輸入。</p><br data-v-c94603c9><br data-v-c94603c9><h3 class="articleCardTitle" data-v-c94603c9> 跨站請求偽造（CSRF）Cross-site request forgery </h3><p data-v-c94603c9> 攻擊者誘導使用者到第三方網站, 在第三方網站中, 向被攻擊網站發送跨站請求。 </p><br data-v-c94603c9><p data-v-c94603c9>利用受害者在被攻擊網站已獲取的註冊憑證, 繞過後台用戶驗證,</p><br data-v-c94603c9><p data-v-c94603c9>冒充用戶對被攻擊網站執行操作。</p><br data-v-c94603c9><br data-v-c94603c9><p data-v-c94603c9>防止CSRF攻擊:</p><p data-v-c94603c9> 檢查和驗證請求的來源、實施隨機生成的驗證碼（CSRF令牌）和同源政策等。 </p><br data-v-c94603c9><br data-v-c94603c9><h1 id="web007" class="articleCardTitle cor36" data-v-c94603c9> [ Web筆記 ] ≫ 如何進行網站性能優化 ? </h1><p data-v-c94603c9>加載方面:</p><div class="pTwo" data-v-c94603c9>1. 減少 http 請求 ( Spriter精靈圖 , 文件合併 )</div><div class="pTwo" data-v-c94603c9> 2. 減小文件大小 ( 資源壓縮 , 圖片壓縮 , 代碼壓縮 ) </div><div class="pTwo" data-v-c94603c9>3. CDN ( 第三方庫 , 大文件 , 大圖 )</div><div class="pTwo" data-v-c94603c9>4. SSR 服務端渲染 , 預渲染</div><div class="pTwo" data-v-c94603c9>5. 懶加載</div><div class="pTwo" data-v-c94603c9>6. 分包</div><br data-v-c94603c9><p data-v-c94603c9>性能方面:</p><div class="pTwo" data-v-c94603c9> 減少 DOM 操作 , 有操作量很大的 DOM 可以用 文檔碎片 </div><br data-v-c94603c9><p data-v-c94603c9>CSS 方面:</p><div class="pTwo" data-v-c94603c9>1. 將樣式表放在頁面頂部</div><div class="pTwo" data-v-c94603c9>2. 不使用 CSS 表達式</div><div class="pTwo" data-v-c94603c9>3. 使用 ＜link&gt; 不使用 @import</div><br data-v-c94603c9><p data-v-c94603c9>JS 方面:</p><div class="pTwo" data-v-c94603c9>1. 將 JS 腳本放在頁面底部</div><div class="pTwo" data-v-c94603c9>2. 將 JS 和 CSS 從外部引入</div><div class="pTwo" data-v-c94603c9>3. 壓縮 JS 和 CSS</div><div class="pTwo" data-v-c94603c9>4. 刪除不需要的腳本</div><div class="pTwo" data-v-c94603c9>5. 減少 DOM 訪問</div><br data-v-c94603c9><p data-v-c94603c9>圖片方面:</p><div class="pTwo" data-v-c94603c9>1. 壓縮圖片 tinyJPG</div><div class="pTwo" data-v-c94603c9>2. Spriter精靈圖</div><div class="pTwo" data-v-c94603c9>3. 不要在 HTML 中拉伸圖片</div><br data-v-c94603c9><br data-v-c94603c9><h1 class="articleCardTitle" data-v-c94603c9>有用過那些前端性能優化的方法 ?</h1><p data-v-c94603c9> 1. 減少 http 請求次數 =&gt; Spriter精靈圖 , JS &amp; CSS 代碼壓縮 , 圖片壓縮工具來減小圖片大小 , 網頁 <a href="https://zh.wikipedia.org/wiki/Gzip" class="cor36" data-v-c94603c9>GZIP @WIKI</a> , 引用 CDN 庫 </p><p data-v-c94603c9>2. 用 innerHTML 代替 DOM 操作 , 減少 DOM 操作次數 , 來優化 JS</p><p data-v-c94603c9>3. 當需要設置的樣式很多時用 className 而不是直接操作 style</p><p data-v-c94603c9>4. 圖片預加載 , 將樣式表放在頂部 , 將 script 放在底部</p><p data-v-c94603c9> 5. 避免在主佈局中用 table 標籤 , 因為 table 要等其中內容完全下載之後才會顯示出來 ( 比 div + css 慢 ) </p><br data-v-c94603c9><br data-v-c94603c9><h1 class="articleCardTitle" data-v-c94603c9>前端性能優化最佳實踐 ?</h1><p data-v-c94603c9> PageSpeed：PageSpeed是由Google開發的工具，用於評估網頁的性能。它通過分析網頁的載入速度、渲染性能、資源優化等指標，給出性能優化建議和分數評級。PageSpeed的評分基於一系列規則和最佳實踐，根據網頁的優化程度給出具體的優化建議，幫助開發人員改進網頁的性能。 </p><br data-v-c94603c9><p data-v-c94603c9> YSlow：YSlow是由Yahoo開發的網頁性能評估工具，它也用於評估網頁的性能和優化建議。YSlow根據一系列的規則和性能指標，對網頁的載入速度、緩存設置、JavaScript和CSS優化等進行分析和評估。它提供了類似於PageSpeed的性能分數和建議，幫助開發人員了解和改善網頁的性能表現。 </p><br data-v-c94603c9><br data-v-c94603c9><h1 class="articleCardTitle" data-v-c94603c9>最後甚麼是性能優化</h1><p data-v-c94603c9>1. 頁面加載性能 -&gt; 加載時間 , 用戶體驗</p><p data-v-c94603c9>2. 動畫與操作性能 -&gt; 是否流暢不卡頓</p><div class="pTwo" data-v-c94603c9>用 translate 和 定位 比較不會卡頓</div><div class="pTwo" data-v-c94603c9> translate 是脫離正常文檔流 , 所以移動不會影響上方&amp;下方元素 </div><div class="pTwo" data-v-c94603c9>所以不用重新渲染 DOM</div><p data-v-c94603c9>3. 內存佔用 -&gt; 內存佔用過大導致瀏覽器崩潰</p><div class="pTwo" data-v-c94603c9>直播內存超出瀏覽器上限 , 導致卡頓</div><p data-v-c94603c9>4. 電量消耗 -&gt; 遊戲方面</p><br data-v-c94603c9><p data-v-c94603c9>那些不是性能優化 ?</p><p data-v-c94603c9>1. while 循環快 還是 for 循環快 ?</p><p data-v-c94603c9>2. |0 比 Math.floor 快</p><p data-v-c94603c9>3. 三元運算符 比 if else 快</p><p data-v-c94603c9>這些是執行效率</p><br data-v-c94603c9><br data-v-c94603c9><h1 id="web008" class="articleCardTitle" data-v-c94603c9> [ Web筆記 ] ≫ 如何進行渲染優化 ? </h1><p data-v-c94603c9>1.不使用 iframe</p><p class="pTwo" data-v-c94603c9>iframe 會阻塞主頁面的 onload 事件</p><p class="pTwo" data-v-c94603c9> iframe 和主頁面共享連接池，瀏覽器對相同域的連接有限制，因而影響頁面的併行加載。 </p><br data-v-c94603c9><p data-v-c94603c9> 2.不使用 gif 來實現 loading 效果 ( 降低 CPU 消耗 而提升渲染性能) </p><br data-v-c94603c9><p data-v-c94603c9>3.用 CSS 代替 JS 動畫 ( 避免重新繪排 )</p><br data-v-c94603c9><p data-v-c94603c9> 4.小圖用 base64 位編碼，以減少網路請求。 (不建議大圖 =&gt; 較消耗CPU) </p><br data-v-c94603c9><p data-v-c94603c9> 5.不把 style 和 script 都放在頭部，才不會阻塞頁面。(Renderer進程中JS線程和渲染線程互斥) </p><br data-v-c94603c9><p data-v-c94603c9>6.避免在 href 和 src 中用空值。(link . script . img)</p><p class="pTwo" data-v-c94603c9> 瀏覽器會嘗試解析這些標籤並發起對應的網路請求，即使他為空值也會發起。 </p><br data-v-c94603c9><p data-v-c94603c9>7.用 className 而不是直接操作 style</p><br data-v-c94603c9><p data-v-c94603c9>8.用 innerHTML 代替 DOM 操作次數 來優化 JS。</p><br data-v-c94603c9><p data-v-c94603c9> 9.前端用變數保存 AJAX 請求結果，並操作客戶端變數來減少請求次數。 </p><br data-v-c94603c9><p data-v-c94603c9>10.圖片預加載 , 網頁 Gzip , CDN 庫 , data 緩存 , 圖片服務器</p><br data-v-c94603c9><br data-v-c94603c9><h3 id="web009" class="articleCardTitle cor36" data-v-c94603c9> [ Web筆記 ] ≫ OSI七層模型 </h3><p data-v-c94603c9> 1.物理層利用傳輸介質為數據鏈路層提供物理連接，實現比特流的透明傳輸。 </p><br data-v-c94603c9><p data-v-c94603c9> 2.數據鏈路層在物理層提供的比特流的基礎上，通過差錯控制、流量控制方法，使有差錯的物理線路變為無差錯的數據鏈路。 </p><br data-v-c94603c9><p data-v-c94603c9>3.網絡層向傳輸層提供最基本的端到端的數據傳輸服務。</p><br data-v-c94603c9><p data-v-c94603c9> 4.數據鏈路層向用戶提供可靠的端到端的差錯和流量控制，保證報文的正確傳輸，同時向高層屏蔽下層數據通信的細節，即向用戶透明地傳送報文。 </p><br data-v-c94603c9><p data-v-c94603c9> 5.會話層組織和協調兩個會話進程之間的通信，並對數據交換進行管理。 </p><br data-v-c94603c9><p data-v-c94603c9> 6.表示層處理用戶信息的表示問題，如編碼、數據格式轉換和加密解密等。 </p><br data-v-c94603c9><p data-v-c94603c9> 7.應用層直接向用戶提供服務，完成用戶希望在網絡上完成的各種工作。 </p><br data-v-c94603c9><br data-v-c94603c9><h3 class="articleCardTitle cor36" data-v-c94603c9># 五層網絡協議</h3><p data-v-c94603c9>1.應用層（DNS，HTTP）：域名解析為IP並發送HTTP請求</p><p data-v-c94603c9>2.傳輸層（TCP，UDP）：建立TCP連接（三次握手）</p><p data-v-c94603c9>3.網路層（IP，ARP）：IP尋址</p><p data-v-c94603c9>4.數據鏈路層（PPP）：封裝成幀</p><p data-v-c94603c9> 5.物理層（利用物理介質傳輸比特流）：物理傳輸（通過雙絞線、電磁波等各種介質） </p><br data-v-c94603c9><br data-v-c94603c9><h3 id="web010" class="articleCardTitle cor36" data-v-c94603c9> [ Web筆記 ] ≫ DOMContentLoaded和load的差別? </h3><p data-v-c94603c9>DOMContentLoaded:</p><p data-v-c94603c9>瀏覽器已完全加載 HTML 並構建 DOM 樹，</p><p data-v-c94603c9>但像 ＜img&gt; 和樣式表之類的外部資源 可能尚未加載完成。</p><br data-v-c94603c9><p data-v-c94603c9>load：</p><p data-v-c94603c9>瀏覽器已完全加載 HTML ，還加載完成所有外部資源 。</p><br data-v-c94603c9><p data-v-c94603c9>beforeunload 是在網頁被卸載「之前」觸發</p><p data-v-c94603c9>unload 是在網頁被卸載「之後」觸發</p><br data-v-c94603c9><br data-v-c94603c9><h1 id="web011" class="articleCardTitle cor36" data-v-c94603c9> [ Web筆記 ] ≫ 瀏覽器垃圾回收機制 </h1><p data-v-c94603c9>垃圾回收是一種自動的記憶體管理機制。</p><p data-v-c94603c9>當電腦上的動態記憶體不再需要時，就應該予以釋放。</p><br data-v-c94603c9><p data-v-c94603c9> 自動的意思是瀏覽器可以自動幫助我們回收記憶體垃圾，但並不代表我們不用關心記憶體管理，如果操作不當，JavaScript中仍然會出現記憶 </p><br data-v-c94603c9><br data-v-c94603c9><h3 class="articleCardTitle" data-v-c94603c9>標記清除</h3><p data-v-c94603c9> JavaScript 中有一個全域物件， 在固定的時間間隔內， 垃圾回收器會從這個全域物件開始， </p><br data-v-c94603c9><p data-v-c94603c9>尋找所有從這個全域物件開始引用的物件， 再找這些物件引用的物件</p><br data-v-c94603c9><p data-v-c94603c9> 對這些活躍的物件進行標記， 這是標記階段。 清除階段就是清除那些沒有被標記的物件。 </p><br data-v-c94603c9><br data-v-c94603c9><p data-v-c94603c9>問題: 在整理之後，內存空間是不連續的，即出現了內存碎片。</p><br data-v-c94603c9><br data-v-c94603c9><h3 data-v-c94603c9>標記整理：</h3><p data-v-c94603c9> 標記階段與標記清除法沒什麼區別， 只是標記結束後， 標記整理法會將存活的物件向內存的一邊移動， 最後清理掉邊界內存。 </p><br data-v-c94603c9><br data-v-c94603c9><h3 class="articleCardTitle" data-v-c94603c9>引用記數</h3><p data-v-c94603c9>跟蹤紀錄每個值被引用次數。</p><br data-v-c94603c9><br data-v-c94603c9><h3 class="articleCardTitle" data-v-c94603c9> 在瀏覽器中，不同類型的變量在何時釋放內存？ </h3><p data-v-c94603c9>引用類型: 當它們不再被引用時，由V8自動回收。</p><br data-v-c94603c9><p data-v-c94603c9>基本類型:</p><p data-v-c94603c9>如果處於閉包的情況下，只有在閉包沒有引用時，V8才會回收它們。</p><p data-v-c94603c9>如果不是閉包的情況，則在等待V8進行新生代切換時回收。</p><br data-v-c94603c9><br data-v-c94603c9><h3 class="articleCardTitle" data-v-c94603c9>內存洩漏</h3><p data-v-c94603c9>內存洩漏指任何對象在不再擁有之後它仍然存在</p><br data-v-c94603c9><p data-v-c94603c9>1.閉包使用不當</p><p data-v-c94603c9>2.setTimeout 的第一個参數用字串</p><br data-v-c94603c9><br data-v-c94603c9><p data-v-c94603c9> 循環引用：當兩個或多個物件相互引用，並且沒有被其他物件引用時，它們將無法被垃圾回收。 </p><p data-v-c94603c9> 未釋放資源：使用了需要手動釋放的資源，如檔案處理器、資料庫連線或網路連線，在不再需要時沒有正確釋放這些資源。 </p><p data-v-c94603c9> 定時器和回呼函式： 在使用定時器或回呼函式時，沒有正確清理或取消這些定時器或回呼函式，導致它們仍然保留在內存中。 </p><p data-v-c94603c9> 快取導致： 過度使用快取，將大量物件存儲在快取中，並且沒有適當的清理策略。 </p><br data-v-c94603c9><br data-v-c94603c9><p data-v-c94603c9>解決:</p><p data-v-c94603c9> 解除引用：當不再需要某個物件時，將其引用設置為null，使垃圾回收器能夠回收該物件佔用的內存空間。 </p><p data-v-c94603c9> 關閉資源：對於使用了需要手動釋放的資源，如檔案處理器或資料庫連線，確保在使用完畢後進行正確的關閉和釋放。 </p><p data-v-c94603c9> 取消定時器和回呼函式：在使用定時器或註冊回呼函式時，確保在不再需要時及時取消定時器或移除回呼函式，避免它們繼續佔用內存空間。 </p><p data-v-c94603c9> 合理管理快取：對於使用快取的情況，確保採用適當的清理策略，定期清除不再需要的快取物件，避免過度佔用內存。 </p><p data-v-c94603c9> 注意作用域和生命週期：確保物件的作用域和生命週期符合需求，避免長時間持有物件的引用，及時釋放不再需要的物件。 </p><p data-v-c94603c9>使用內存管理工具和效能分析工具：借助工具進行內存泄漏</p><br data-v-c94603c9><br data-v-c94603c9><h1 id="web012" class="articleCardTitle cor36" data-v-c94603c9> [ Web筆記 ] ≫ 前端需要注意哪些SEO </h1><p data-v-c94603c9>1.合理的title、description、keywords標籤</p><div class="pTwo" data-v-c94603c9>＜title &gt;網頁標題＜/title &gt;</div><div class="pTwo" data-v-c94603c9> ＜meta name=&quot;description&quot; content=&quot;網站內容概述&quot;&gt; </div><div class="pTwo" data-v-c94603c9> ＜meta name=&quot;keywords&quot; content=&quot;SEO,metatag,html&quot;&gt;曾經是SEO優化最重要的根據,但現在不參考keywords來決定SEO排名了 </div><br data-v-c94603c9><p data-v-c94603c9>2.語義化的HTML代碼, 可以讓搜索引擎更容易理解網頁的結構和內容</p><p data-v-c94603c9> 3.重要內容HTML代碼放在最前面： 搜索引擎抓取HTML的順序是從上到下，有些搜索引擎對抓取長度有限制。將重要的內容放在HTML的前面，確保重要內容一定會被抓取。 </p><p data-v-c94603c9>4.重要內容不要用JavaScript輸出： 爬蟲不會執行JavaScript獲得內容</p><p data-v-c94603c9>5.少使用iframe： 搜索引擎通常不會抓取iframe中的內容</p><p data-v-c94603c9> 6.非裝飾性圖片加上 alt 屬性: 當圖片無法加載時會顯示該描述，也可供讀屏器讀取圖片內容。 </p><p data-v-c94603c9>7.提高網站速度： 網站速度是搜索引擎排序的一個重要指標</p><div class="pTwo" data-v-c94603c9>壓縮圖片</div><div class="pTwo" data-v-c94603c9>瀏覽器緩存</div><div class="pTwo" data-v-c94603c9>最小化 CSS 和 JavaScript</div><div class="pTwo" data-v-c94603c9>使用 CDN 庫</div><div class="pTwo" data-v-c94603c9>優化代碼</div><div class="pTwo" data-v-c94603c9>避免重定向</div><div class="pTwo" data-v-c94603c9>壓縮頁面</div><div class="pTwo" data-v-c94603c9>使用快速的主機服務器</div><div class="pTwo" data-v-c94603c9>非同步載入資源</div><div class="pTwo" data-v-c94603c9>使用快取機制</div><br data-v-c94603c9><br data-v-c94603c9><h1 id="web013" class="articleCardTitle cor36" data-v-c94603c9> [ Web筆記 ] ≫ WEB標準 &amp; W3C標準 </h1><p data-v-c94603c9>WEB 標準不是某一個標準，是一系列的集合</p><p data-v-c94603c9>WEB 標準: 結構 . 表現 . 行為</p><p data-v-c94603c9>結構(Structure):</p><p class="pTwo" data-v-c94603c9>指 body 裡面寫的標籤 =&gt; HTML 標籤組成</p><br data-v-c94603c9><p data-v-c94603c9>表現(Presentation)</p><p class="pTwo" data-v-c94603c9>指豐富 HTML 標籤樣式， 由 CSS 樣式組成</p><br data-v-c94603c9><p data-v-c94603c9>行為(Behavior)</p><p class="pTwo" data-v-c94603c9>指頁面和用戶交互，由 JS 組成</p><p class="pTwo" data-v-c94603c9>標準包括: DOM . ECMAScript</p><br data-v-c94603c9><p data-v-c94603c9>W3C對於WEB標準提出了規範化的要求：</p><p data-v-c94603c9>1.標籤字母要小寫。</p><p data-v-c94603c9>2.標籤要閉合。</p><p data-v-c94603c9>3.標籤不允許隨意嵌套。</p><p data-v-c94603c9> 4.儘量用外部連結 CSS樣式表 和 JS 腳本，使結構、表現、行為分離，符合規範。能提高頁面渲染速度，提升使用者體驗。 </p><p class="comment" data-v-c94603c9> 5.儘量減少使用行內樣式表，實現結構與表現的分離。 </p><p class="comment" data-v-c94603c9> 6.標籤的id和class等屬性命名應具有語意，更有利於SEO（搜尋引擎優化），並使代碼易於維護。 </p><br data-v-c94603c9><br data-v-c94603c9><h1 id="web014" class="articleCardTitle cor36" data-v-c94603c9> [ Web筆記 ] ≫ 描述漸進增強和優雅降級之間的不同? </h1><p data-v-c94603c9>漸進增強（Progressive Enhancement）:</p><p data-v-c94603c9> 針對低版本瀏覽器進行構建頁面，保證最基本的功能，然後再針對高級瀏覽器進行效果、互動等改進和追加功能，以達到更好的使用者體驗。 </p><br data-v-c94603c9><p data-v-c94603c9>優雅降級（Graceful Degradation）:</p><p data-v-c94603c9>一開始就構建完整的功能，然後再針對低版本瀏覽器進行兼容。</p><br data-v-c94603c9><br data-v-c94603c9><p data-v-c94603c9> 區別：優雅降級是從複雜的現狀開始，並試圖減少使用者體驗的供給，而漸進增強則是從一個非常基礎的、能夠起作用的版本開始，並不斷擴充，以適應未來環境的需求。降級（功能衰減）意味著往回看；而漸進增強則意味著朝前看，同時保證其根基處於安全地帶。 </p><br data-v-c94603c9><br data-v-c94603c9><h1 id="web015" class="articleCardTitle cor36" data-v-c94603c9> [ Web筆記 ] ≫ 製作網頁用的圖片格式有哪些? </h1><p data-v-c94603c9>Webp . jpeg . gif . svg . Apng</p><br data-v-c94603c9><p data-v-c94603c9>WebP 格式:</p><p data-v-c94603c9>由 Google 開發的一種圖像格式。圖片壓縮體積約只有 JPEG 的 2/3。</p><p data-v-c94603c9>在質量相同情況下， WebP 比 JPEG 小 40%。</p><br data-v-c94603c9><p data-v-c94603c9> Apng: “Animated Portable Network Graphics” 可以實現 png 格式的動態圖片效果。 </p><br data-v-c94603c9><br data-v-c94603c9><h1 id="web016" class="articleCardTitle cor36" data-v-c94603c9> [ Web筆記 ] ≫ 大型網站有大量圖片，加載很慢，有哪些方法能優化這些圖片加載，提升用戶體驗? </h1><p data-v-c94603c9>圖片懶加載:</p><p data-v-c94603c9> 在頁面上的未被看見的區域添加滾動條事件的技術，判斷圖片與瀏覽器頂部的距離和頁面的距離，如果前者小於後者，則優先加載該圖片。 </p><br data-v-c94603c9><p data-v-c94603c9>預加載:</p><p data-v-c94603c9> 如果為幻燈片，可以使用圖片預加載技術，先下載當前展示圖片的前一張和後一張圖片。 </p><br data-v-c94603c9><p data-v-c94603c9> 如果圖片是CSS圖片，可以使用 CSS Sprite、SVG Sprite、Iconfont、Base64等技術 </p><br data-v-c94603c9><p data-v-c94603c9> 如果圖片過大，可以使用特殊編碼的圖片。在加載時，首先加載壓縮程度極高的縮略圖，以提高用戶體驗。 </p><br data-v-c94603c9><p data-v-c94603c9> 如果圖片展示區域小於圖片的實際大小，可以在伺服器端根據業務需求先進行圖片壓縮，使圖片壓縮後的大小與展示一致。 </p><br data-v-c94603c9><br data-v-c94603c9><h1 id="web017" class="articleCardTitle cor36" data-v-c94603c9> [ Web筆記 ] ≫ Web 開發中會話跟蹤的方法有哪些? </h1><p data-v-c94603c9>1.會話</p><p class="pTwo" data-v-c94603c9> 用戶打開瀏覽器，訪問 Web 服務器的資源，會話建立，直到有一方斷開連結，會話結束。 </p><p class="pTwo" data-v-c94603c9>一次會話中可以包含多次請求和響應</p><br data-v-c94603c9><p data-v-c94603c9>2.會話跟蹤</p><p class="pTwo" data-v-c94603c9> 一種維護瀏覽器狀態的方法，服務器需要識別多次請求是否來自於同一瀏覽器，以便於在同一次會話中的多次請求間共享數據。 </p><br data-v-c94603c9><p data-v-c94603c9>一次會話中的多次請求間共享數據 =&gt; 購物車 . 登陸 . 驗證碼</p><br data-v-c94603c9><p data-v-c94603c9> 3.客戶端和伺服器用HTTP協議是無狀態的 =&gt; 伺服器不知道多次請求中，那些來自同一瀏覽器 </p><p class="pTwo" data-v-c94603c9> 每次瀏覽器向伺服器發請求時，伺服器都將該請求視為新的請求 </p><p class="pTwo" data-v-c94603c9>所以需要會話跟蹤</p><p data-v-c94603c9>Cookie 和 Seccion 都是來完成一次會話內多次請求間數據共享</p><p data-v-c94603c9>存取位置: Cookie 數據存在客戶端 ， Session 數據存在伺服器</p><p data-v-c94603c9>安全性: Cookie 不安全 ， Session 安全</p><p data-v-c94603c9>數據大小: Cookie 4KB ， Session 無大小限制</p><p data-v-c94603c9>儲存時間: Cookie 可以長期存取 ， Session 默認 30 min</p><p data-v-c94603c9>伺服器: Cookie 不佔伺服器資源 ， Session 佔用 伺服器資源</p><br data-v-c94603c9><p data-v-c94603c9>1.客戶端會話跟蹤技術 Cookie</p><p data-v-c94603c9>把數據存在客戶端瀏覽器</p><br data-v-c94603c9><p data-v-c94603c9>2.服務端會話跟蹤技術 Session</p><p data-v-c94603c9>把數據存在服務端</p><br data-v-c94603c9><p data-v-c94603c9>3.URL重寫</p><p data-v-c94603c9>URL重寫是一種在URL中嵌入會話ID的方法。</p><br data-v-c94603c9><p data-v-c94603c9>4.隱藏表單字段</p><p data-v-c94603c9> 在HTML表單中，可以添加一個隱藏的字段來存儲會話ID。該字段在每次表單提交時一同發送到服務器，以維護會話狀態。 </p><br data-v-c94603c9><p data-v-c94603c9>5.ip地址</p><p data-v-c94603c9> 伺服器可以記錄使用者的IP地址，並將其與其他會話標識符（如Cookie或會話ID）相關聯。這樣，即使會話標識符發生變化（如Cookie被刪除），伺服器仍然可以根據IP地址來識別使用者並恢復其會話狀態。 </p><br data-v-c94603c9><br data-v-c94603c9><br data-v-c94603c9><br data-v-c94603c9><p data-v-c94603c9> HTTP協議如果是有狀態，每一次後邊請求要攜帶前一次請求所有的數據，會導致後邊數據大，而後邊請求速度慢。 </p><br data-v-c94603c9><br data-v-c94603c9><h1 id="web018" class="articleCardTitle cor36" data-v-c94603c9> [ Web筆記 ] ≫ CDN為什麼利用多個域名來存取網站資源更有效? </h1><p data-v-c94603c9>內容傳遞網路（英語：Content Delivery Network，縮寫：CDN）</p><p data-v-c94603c9> 指一種透過網際網路互相連接的電腦網路系統，利用最靠近每位使用者的伺服器，更快、更可靠地將音樂、圖片、影片、應用程式及其他檔案傳送給使用者，來提供高效能、可擴展性及低成本的網路內容傳遞給使用者。 </p><br data-v-c94603c9><br data-v-c94603c9><p data-v-c94603c9>CDN和緩存:</p><p data-v-c94603c9> 使用多個域名還可以更好地與 內容分發網絡（CDN） 和緩存系統配合使用。 </p><p data-v-c94603c9> CDN可以將網站資源分佈在全球各地的伺服器上，通過使用多個域名，可以更好地與CDN緩存機制配合，提供更快速的內容傳輸和加載。 </p><br data-v-c94603c9><br data-v-c94603c9><br data-v-c94603c9><p data-v-c94603c9>1.突破瀏覽器並發限制：</p><p data-v-c94603c9>瀏覽器對同一域名下的並發請求數量有限制。</p><p data-v-c94603c9> 通過使用CDN，可以將頁面資源分佈在多個CDN伺服器上，使瀏覽器可以同時從多個域名下載資源，從而提高並發性能。 </p><br data-v-c94603c9><p data-v-c94603c9>2.節省Cookie帶寬：</p><p data-v-c94603c9> Cookie是在客戶端和伺服器之間傳輸的小型資料文件，用於存儲會話信息和使用者偏好等。 </p><p data-v-c94603c9> CDN緩存靜態資源時，可以避免將Cookie傳輸到CDN伺服器，從而減少帶寬消耗，提高傳輸效率。 </p><br data-v-c94603c9><p data-v-c94603c9>3.節省主域名的連接數，優化頁面響應速度：</p><p data-v-c94603c9>瀏覽器對同一域名下的並發連接數有限制。</p><p data-v-c94603c9> 使用CDN時，可以將靜態資源（如圖片、CSS和JavaScript文件）分發到CDN伺服器上，從而減輕主域名的負載，提高頁面的響應速度和性能。 </p><br data-v-c94603c9><p data-v-c94603c9>4.防止不必要的安全問題：</p><p data-v-c94603c9> 通過使用CDN，可以將靜態資源從主伺服器分離出來，減少直接與主伺服器進行交互的機會。 </p><p data-v-c94603c9>這有助於防止潛在的攻擊和安全問題，提高網站的安全性。</p><br data-v-c94603c9><br data-v-c94603c9>',759),xi=Yc(()=>v("div",{class:"toTopButton"},[v("div",{class:"disCen"},"___"),v("div",{class:"disCen"},"▲")],-1)),Li=[xi],ji=Yc(()=>v("div",{class:"toBotButton"},[v("div",{class:"disCen"},"▼"),v("div",{class:"disCen"},"￣￣")],-1)),Pi=[ji],Ni={__name:"WebPage",setup(a){const s=ua(!1);window.addEventListener("scroll",function(){s.value=window.scrollY>0});function d(){window.scrollTo({top:0,left:0,behavior:"smooth"})}function t(){window.scrollTo({top:999999,left:0,behavior:"smooth"})}function c(e){window.scrollTo({top:document.getElementById(`${e}`).offsetTop,behavior:"smooth"})}return(e,n)=>{const l=za("spen");return da(),ea(Q,null,[v("section",null,[v("div",ki,[v("div",gi,[v("div",Ti,[v("div",{class:"leftNavText",onClick:n[0]||(n[0]=p=>c("web001"))}," 瀏覽器內核,主要組成部分 "),v("div",{class:"leftNavText",onClick:n[1]||(n[1]=p=>c("web002"))}," 瀏覽器輸入網址後按下enter "),v("div",{class:"leftNavText",onClick:n[2]||(n[2]=p=>c("web003"))},"http協議"),v("div",{class:"leftNavText",onClick:n[3]||(n[3]=p=>c("web004"))}," Cookies.localStorage "),v("div",{class:"leftNavText",onClick:n[4]||(n[4]=p=>c("web005"))}," 什麼是同源策略,不同源會怎樣 "),v("div",{class:"leftNavText",onClick:n[5]||(n[5]=p=>c("web006"))}," 腳本攻擊XSS,請求偽造CSRF "),v("div",{class:"leftNavText",onClick:n[6]||(n[6]=p=>c("web007"))}," 如何進行網站性能優化 "),v("div",{class:"leftNavText",onClick:n[7]||(n[7]=p=>c("web008"))}," 如何進行渲染優化 "),v("div",{class:"leftNavText",onClick:n[8]||(n[8]=p=>c("web009"))},"OSI七層模型"),v("div",{class:"leftNavText",onClick:n[9]||(n[9]=p=>c("web010"))}," DOMContentLoaded和load "),v("div",{class:"leftNavText",onClick:n[10]||(n[10]=p=>c("web011"))}," 瀏覽器垃圾回收機制 "),v("div",{class:"leftNavText",onClick:n[11]||(n[11]=p=>c("web012"))}," 前端需要注意哪些SEO "),v("div",{class:"leftNavText",onClick:n[12]||(n[12]=p=>c("web013"))}," WEB標準&W3C標準 "),v("div",{class:"leftNavText",onClick:n[13]||(n[13]=p=>c("web014"))}," 漸進增強和優雅降級 "),v("div",{class:"leftNavText",onClick:n[14]||(n[14]=p=>c("web015"))}," 製作網頁用的圖片格式 "),v("div",{class:"leftNavText",onClick:n[15]||(n[15]=p=>c("web016"))}," 大型網站有大量圖片 "),v("div",{class:"leftNavText",onClick:n[16]||(n[16]=p=>c("web017"))}," Web開發中會話跟蹤 "),v("div",{class:"leftNavText",onClick:n[17]||(n[17]=p=>c("web018"))}," CDN多個域名存網站資源 ")])])]),v("div",_i,[v("div",zi,[v("div",Si,[qi,v("p",null,[T(l,{class:"cor36"},{default:C(()=>[fa("因為: ")]),_:1}),yi]),Ci])])])]),v("div",null,[X(T(W,{name:"fade",tag:"div"},{default:C(()=>[v("div",{onClick:d,class:"toTop"},Li)]),_:1},512),[[Y,s.value]]),X(T(W,{name:"fade",tag:"div"},{default:C(()=>[v("div",{onClick:t,class:"toBot"},Pi)]),_:1},512),[[Y,s.value]])])],64)}}},Vi=ia(Ni,[["__scopeId","data-v-c94603c9"]]);const mv=a=>(wa("data-v-974b37d7"),a=a(),ha(),a),$i={class:"leftNav"},Oi={class:"leftNavContainer"},Ei={class:"leftNavLayout"},Ai=U('<div class="Main" data-v-974b37d7><div class="mainContainer" data-v-974b37d7><h1 id="html001" class="articleCardTitle cor36" data-v-974b37d7> [ Html ] ≫ 塊級元素和行內元素的差別? </h1><h3 data-v-974b37d7>塊元素有哪些?</h3><p data-v-974b37d7> ＜div&gt; . ＜p&gt; . ＜h1&gt; . ＜ul&gt; . ＜table&gt; 獨佔一行, 頁面中垂直排列, 可以設置寬高 和 內外邊距可控 </p><br data-v-974b37d7><h3 data-v-974b37d7>行內元素有哪些?</h3><p data-v-974b37d7> ＜span&gt; . ＜a&gt; . ＜img&gt; . ＜input&gt; 默認同行排列, 寬高由內容決定, 不能設置寬高 </p><br data-v-974b37d7><h3 data-v-974b37d7>行內塊元素特點?</h3><p data-v-974b37d7>display:inline-block 不獨佔一行, 可以設置寬高</p><br data-v-974b37d7><p data-v-974b37d7>空元素: 指沒有內容或結束標籤的HTML元素。</p><p data-v-974b37d7>＜br&gt; . ＜hr&gt; . ＜img&gt; . ＜input&gt; . ＜link&gt; . ＜meta&gt;</p><br data-v-974b37d7><br data-v-974b37d7><p data-v-974b37d7>行內元素如何轉塊元素?</p><p data-v-974b37d7>css display inline block</p><br data-v-974b37d7><br data-v-974b37d7><h2 class="articleCardTitle cor36" data-v-974b37d7> 頁面導入樣式,使用@import和link差異? </h2><p data-v-974b37d7> link支持早於import, 兼容性link比import好, 先加載的是link標籤, 後加載@import </p><br data-v-974b37d7><br data-v-974b37d7><h2 class="articleCardTitle" data-v-974b37d7>src 和 href 差別?</h2><p data-v-974b37d7>相同點:</p><p class="pFou" data-v-974b37d7>都可以加載外部文件</p><br data-v-974b37d7><br data-v-974b37d7><h3 data-v-974b37d7>差別:</h3><p class="pFou" data-v-974b37d7> herf 用在 link , a ; 而 src 用在 img , style , script </p><br data-v-974b37d7><h3 class="pFou" data-v-974b37d7> 瀏覽器遇到 href 會並行下載資源, 且不會停止對當前文檔的處理。 </h3><br data-v-974b37d7><h3 class="pFou" data-v-974b37d7> 瀏覽器遇到 src 會暫停其他資源的下載和處理, 直到該資源加載 或 執行完畢。 </h3><br data-v-974b37d7><br data-v-974b37d7><h1 class="articleCardTitle cor36" data-v-974b37d7> ＜img&gt; 元素的 title 屬性和 alt 屬性有甚麼不同? </h1><p data-v-974b37d7> alt 屬性是必需的，它提供了對於圖像的描述。當圖像無法加載時， alt 屬性的值會顯示在圖像的位置，也可供螢幕閱讀器讀取圖像內容。 </p><br data-v-974b37d7><p data-v-974b37d7> title 屬性提供了對圖像的附加說明。當滑鼠懸停在圖像上時，會顯示 title 屬性的值作為工具提示。 </p><br data-v-974b37d7><br data-v-974b37d7><h1 id="html002" class="articleCardTitle cor36" data-v-974b37d7> [ Html ] ≫ html5有哪些新特性 </h1><p data-v-974b37d7>1. 語意化標籤: header footer nav aside article section</p><p data-v-974b37d7>2. 影片 和 音源 支持: audio video 標籤</p><p data-v-974b37d7> 3. 畫布 canvas 元素允許通過JavaScript動態繪制圖形、動畫和圖像, 失量圖 svg </p><p data-v-974b37d7>4. 本地儲存 localStorage , seesionStorage</p><p data-v-974b37d7> 5. 語意化表單 ，如＜input type=&quot;email&quot;&gt;、＜input type=&quot;url&quot;&gt;、＜input type=&quot;date&quot;&gt;等，使表單的輸入和驗證更加簡化和語義化。 </p><p data-v-974b37d7>6. web worker</p><br data-v-974b37d7><br data-v-974b37d7><h1 class="articleCardTitle cor36" data-v-974b37d7>語義化的理解?</h1><p data-v-974b37d7>HTML語意化就是的 編寫方式, 包括header nav footer標籤</p><p data-v-974b37d7>讓頁面結構更加清晰, 更容易去維護開發</p><p data-v-974b37d7>更容易SEO搜尋引擎優化</p><br data-v-974b37d7><br data-v-974b37d7><h1 id="html003" class="articleCardTitle cor36" data-v-974b37d7> [ Html ] ≫ 那些操作可以提升SEO? </h1><p data-v-974b37d7>可以在header裡面的meta這一章節加上description網頁的描述</p><p data-v-974b37d7>再來可以加上keyword網頁關鍵字</p><p data-v-974b37d7>h1標籤要寫好</p><p data-v-974b37d7> 每個頁面的標籤要寫的符合聯結的東西, 比如你跳轉到一個頁面叫A, 你跳轉的鏈結的文字必須符合那個頁面的內容, </p><br data-v-974b37d7><br data-v-974b37d7><h2 class="articleCardTitle cor36" data-v-974b37d7>canvas能幹嘛?</h2><p data-v-974b37d7>畫圖的 畫2D為主</p><br data-v-974b37d7><br data-v-974b37d7><h2 class="articleCardTitle cor36" data-v-974b37d7>canvas它畫的是偽圖還是失量圖?</h2><p data-v-974b37d7>位圖(有像素操作), SVG才是失量圖</p><br data-v-974b37d7><br data-v-974b37d7><h2 class="articleCardTitle cor36" data-v-974b37d7>canvas支持鼠標事件嗎?</h2><p data-v-974b37d7>不支持</p><br data-v-974b37d7><br data-v-974b37d7><h2 class="articleCardTitle cor36" data-v-974b37d7>canvas和svg區別?</h2><p data-v-974b37d7>1.一個是位圖一個是失量圖</p><p data-v-974b37d7>2.一個是用畫筆一個用標籤,畫筆直接畫,標籤進行累加</p><p data-v-974b37d7>3.SVG可以進行類似CSS樣式,canvas只能全靠自己畫不能用css</p><br data-v-974b37d7><br data-v-974b37d7><h2 class="articleCardTitle cor36" data-v-974b37d7>canvas 要用的話怎麼獲取API?</h2><p data-v-974b37d7>1.獲取canvas dom元素</p><p data-v-974b37d7>2.用dom方法,一開始可以用getContext設2D或3D,</p><p data-v-974b37d7>3.設好後可以用繪畫API, fillStyle之類的</p><br data-v-974b37d7><br data-v-974b37d7><h2 class="articleCardTitle cor36" data-v-974b37d7>失量圖是什麼?</h2><p data-v-974b37d7> 失量圖是不管放大多少倍, 都沒有鋸齒的一種圖形, 因為它保存的不是色彩值, 而是曲線的座標 </p><br data-v-974b37d7><br data-v-974b37d7><h2 class="articleCardTitle cor36" data-v-974b37d7>位圖是什麼?</h2><p data-v-974b37d7>每個像素用RGB來表示</p><br data-v-974b37d7><br data-v-974b37d7><h2 class="articleCardTitle cor36" data-v-974b37d7>svg標籤可以任意嵌套嗎?</h2><p data-v-974b37d7>不可以, 一個svg裡面有單獨的p,g,路徑之類的</p><p data-v-974b37d7>g可以分組式嵌套</p><br data-v-974b37d7><br data-v-974b37d7><h2 class="articleCardTitle cor36" data-v-974b37d7>svg標籤和DOM標籤的區別?</h2><p data-v-974b37d7>svg不可以嵌套,除了g, DOM大部分可以任意嵌套</p><br data-v-974b37d7><br data-v-974b37d7><h2 class="articleCardTitle cor36" data-v-974b37d7> 如果繪畫的量很大,一般用svg還是canvas? </h2><p data-v-974b37d7> canvas, svg相當於是一種DOM元素, 操作有性能問題, 小量圖再用svg更方便一點 </p><br data-v-974b37d7><br data-v-974b37d7><h2 class="articleCardTitle" data-v-974b37d7>3. canvas 的常用 api 有哪些</h2><div data-v-974b37d7><a class="comment svgs" href="https://developer.mozilla.org/zh-TW/docs/Web/API/Canvas_API" data-v-974b37d7>canvas @MDN</a></div><p data-v-974b37d7>getContext: 返回一個指定 canvas 的繪畫環境對象</p><p data-v-974b37d7>beginPath: 開始繪製</p><p data-v-974b37d7>moveTo: 移動畫筆位置</p><p data-v-974b37d7>lineTo: 用來繪畫線段</p><p data-v-974b37d7>stroke: 用來實施繪製的操作</p><p data-v-974b37d7>lineStyle: 設置線段的樣式</p><p data-v-974b37d7>closePath: 結束繪製</p><br data-v-974b37d7><br data-v-974b37d7><h2 class="articleCardTitle cor36" data-v-974b37d7>HTML5 和 H5的區別?</h2><p data-v-974b37d7>H5是手機端顯示的頁面</p><p data-v-974b37d7> HTML5是前端標準化技術的平台, 它提供很多強大功能, 比如再頁面上顯示視屏video標籤, 音屏audio標籤, 網頁中存儲數據 local sessionStorage, 畫2D.3D圖形canvas, 音屏解析, 操作文件, 所有新推出的網頁API都屬於HTML5範圍, 甚至CSS3都屬於HTML5的一部分 </p><br data-v-974b37d7><br data-v-974b37d7><h1 id="html004" class="articleCardTitle cor36" data-v-974b37d7> [ Html ] ≫ Doctype作用?嚴格模式和混雜模式如何區分?他們有何意義? </h1><p data-v-974b37d7> ＜!Doctype&gt;（文件類型聲明）位於文檔中最前面，在＜html&gt;標籤之前。它告訴瀏覽器的解析器用哪個HTML版本的規範來解析網頁。 </p><br data-v-974b37d7><p data-v-974b37d7>嚴格模式：</p><p data-v-974b37d7> 瀏覽器會按照HTML規範的嚴格要求解析和渲染網頁，可以確保網頁在不同瀏覽器之間的一致性。 </p><p data-v-974b37d7>在HTML文檔開頭的Doctype聲明如＜!DOCTYPE html&gt;，則會進入嚴格模式。</p><br data-v-974b37d7><p data-v-974b37d7>混雜模式：</p><p data-v-974b37d7> 瀏覽器以一種向後兼容的方式解析和渲染網頁，以支持舊版本的HTML規範和非標準的HTML代碼。可能導致瀏覽器之間的解析差異。 </p><p data-v-974b37d7> HTML文檔開頭沒有正確的Doctype聲明或使用了過時的Doctype聲明，瀏覽器會進入混雜模式。 </p><br data-v-974b37d7><br data-v-974b37d7><p data-v-974b37d7> 嚴格模式和混雜模式的意義在於幫助開發者確保網頁在各種瀏覽器中的一致性和可靠性。嚴格模式遵循HTML規範，提供了更好的標準支持和更嚴格的錯誤檢查，有助於開發更可靠、易於維護的網頁。而混雜模式則提供了向後兼容的特性，以支持舊版本的網頁和非標準的HTML代碼，但容易導致瀏覽器之間的解析差異和不確定性。因此，建議使用嚴格模式並正確聲明Doctype，以確保網頁的良好兼容性和可靠性。 </p><br data-v-974b37d7><br data-v-974b37d7><h1 class="articleCardTitle cor36" data-v-974b37d7> [ Html ] ≫ HTML全局属性(global attribute)有哪些? </h1><p data-v-974b37d7>1.class：為元素指定一個或多個類名，用於樣式和 JavaScript 操作。</p><p data-v-974b37d7>2.id：為元素指定唯一的標識符。</p><p data-v-974b37d7>3.style：用於內聯樣式，用於指定元素的樣式規則。</p><p data-v-974b37d7>4.title：用於提供關於元素的額外信息。</p><p data-v-974b37d7>5.lang：用於指定元素的語言。</p><p data-v-974b37d7>6.data-*：用於自定義數據屬性，可以存儲與元素相關的自定義數據。</p><p data-v-974b37d7>7.draggable：指定元素是否可拖動。</p><p data-v-974b37d7>8.hidden：指定元素是否隱藏。</p><br data-v-974b37d7><br data-v-974b37d7><h1 class="articleCardTitle" data-v-974b37d7> [ Html ] ≫ 如何在頁面上實現一個圓形的可點擊區域 </h1><div data-v-974b37d7><a class="comment svgs" href="https://codepen.io/wayne23123/pen/jOQBdZr?editors=1010" data-v-974b37d7>作品DEMO: 在頁面上實現一個圓形可點擊區域</a></div><br data-v-974b37d7><br data-v-974b37d7><h1 class="articleCardTitle" data-v-974b37d7>怎樣處理 移動端 1px 被渲染成 2px?</h1><p data-v-974b37d7> 2倍屏 =&gt; 移動設備螢幕尺寸沒有變化，但螢幕分辨率卻提高一倍 ( 同大小螢幕像素多一倍 ) </p><br data-v-974b37d7><p data-v-974b37d7>局部處理:</p><p data-v-974b37d7>meta 標籤中的 viewport 屬性， initial-scale 設為 1</p><p data-v-974b37d7>rem 照設計稿走 ， 利用 transform: scale(0.5) 縮小</p><br data-v-974b37d7><p data-v-974b37d7>全局處理:</p><p data-v-974b37d7>meta 標籤中的 viewport 屬性， initial-scale 設為 0.5</p><p data-v-974b37d7>rem 照設計稿走</p><br data-v-974b37d7><br data-v-974b37d7><h1 id="" class="articleCardTitle cor36" data-v-974b37d7> [ Html ] ≫ div+css 布局 比 table 布局有甚麼優點? </h1><p data-v-974b37d7>div+css:</p><p data-v-974b37d7> 頁面加載速度更快，結構化清晰。(他一邊加載一邊呈現，至少基本網頁結構可以很快呈現) </p><p data-v-974b37d7>div 布局符合 W3C 標準 =&gt; 做到了 結構 表現 行為 分離</p><p data-v-974b37d7>有利 SEO</p><br data-v-974b37d7><p data-v-974b37d7>table:</p><p data-v-974b37d7> 如果 table 嵌套層數太多，可能導致頁面一直出不來。(table 布局要等到全部 table 加載完，再呈現頁面) </p><br data-v-974b37d7><br data-v-974b37d7><h1 id="" class="articleCardTitle" data-v-974b37d7> [ Html ] ≫ iframe（內嵌框架）有哪些缺點? </h1><p data-v-974b37d7>1.iframe的載入確實會阻塞主頁面的onload事件。</p><p class="pTwo" data-v-974b37d7> 當頁面中包含一個或多個iframe元素時，當iframe開始載入和渲染內容時，主頁面的onload事件將被延遲到所有的iframe載入完成後才觸發。 </p><br data-v-974b37d7><p data-v-974b37d7>2.搜索引擎無法解讀這種頁面，不利 SEO。</p><br data-v-974b37d7><p data-v-974b37d7> 3.iframe 和主頁面共享連接池，而瀏覽器對相同域的連接有限制，所以會影響頁面的併行加載 </p><br data-v-974b37d7><br data-v-974b37d7><p data-v-974b37d7> 使用 JS 動態給 iframe 添加 src 屬性值可以避免 阻塞主頁面的onload事件 和 和主頁面共享連接池 </p><br data-v-974b37d7><p data-v-974b37d7>1.在主頁面的 onload 事件觸發後再用 JS 給 iframe 添加 src 屬性</p><p data-v-974b37d7> 2.在主頁面加載完成後 用 JS 給 iframe 添加 src 屬性 可以減少對連接池的佔用，提高頁面並行加載能力。 </p><br data-v-974b37d7><br data-v-974b37d7><h1 id="" class="articleCardTitle" data-v-974b37d7> [ Html ] ≫ XHTML（可擴展超文本標記語言）和HTML（超文本標記語言）區別? </h1><p data-v-974b37d7>1.XHTML 元素必須正確嵌套</p><p data-v-974b37d7>2.XHTML 標籤必須閉合</p><p data-v-974b37d7>3.XHTML 元素必須</p><p data-v-974b37d7>4.XHTML 標籤名小寫</p><p data-v-974b37d7>5.XHTML 必須有根元素 -&gt; ＜html&gt;</p><br data-v-974b37d7><p data-v-974b37d7>語法要求：</p><p class="pTwo" data-v-974b37d7> HTML語法相對寬鬆，不強制要求標籤閉合，標籤名可以使用大寫或小寫。 </p><p class="pTwo" data-v-974b37d7> XHTML採用XML語法，要求所有標籤必須閉合，並且標籤名必須使用小寫。 </p><br data-v-974b37d7><p data-v-974b37d7>兼容性：</p><p class="pTwo" data-v-974b37d7> HTML對於各大瀏覽器的兼容性相對較差，特別是對於IE瀏覽器而言。網頁開發者需要具備較高的HTML編寫技巧，否則容易出現兼容性問題。 </p><p class="pTwo" data-v-974b37d7> XHTML則能夠有效處理各大瀏覽器的兼容性問題，因為XHTML的語法要求較為嚴謹。如果習慣於鬆散的HTML編寫方式，轉向XHTML可能需要一些適應的時間。XHTML結合了部分XML的強大功能和大部分HTML的簡單特性。 </p><br data-v-974b37d7><br data-v-974b37d7><h1 id="" class="articleCardTitle cor36" data-v-974b37d7> [ Html ] ≫ ＜meta name=&quot;viewport&quot;&gt; </h1><div class="bgcVS" data-v-974b37d7><div data-v-974b37d7><span class="then" data-v-974b37d7></span><span class="number" data-v-974b37d7>meta </span><span class="function" data-v-974b37d7>name</span><span class="then" data-v-974b37d7>=&quot;</span><span class="src" data-v-974b37d7>viewport</span><span class="then" data-v-974b37d7>&quot;</span><span class="function" data-v-974b37d7>content</span><span class="then" data-v-974b37d7>=&quot;</span><span class="src" data-v-974b37d7>width=device-width,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0,user-scalable=no</span><span class="then" data-v-974b37d7>&quot; /&gt;</span></div><br data-v-974b37d7><div class="comment" data-v-974b37d7> // width 設置viewport寬度，可以是正整數或字符串&#39;device-width&#39; </div><br data-v-974b37d7><div class="comment" data-v-974b37d7>// device-width 設備寬度</div><br data-v-974b37d7><div class="comment" data-v-974b37d7> // height 設置viewport高度，一般設置寬度後，高度會自動解析，可以不設置 </div><br data-v-974b37d7><div class="comment" data-v-974b37d7> // initial-scale 默認縮放比例（初始縮放比例），為一個數字，可以帶小數 </div><br data-v-974b37d7><div class="comment" data-v-974b37d7> // minimum-scale 允許用戶最小縮放比例，為一個數字，可以帶小數 </div><br data-v-974b37d7><div class="comment" data-v-974b37d7> // maximum-scale 允許用戶最大縮放比例，為一個數字，可以帶小數 </div><br data-v-974b37d7><div class="comment" data-v-974b37d7>// user-scalable 是否允許手動縮放</div><br data-v-974b37d7><br data-v-974b37d7></div><br data-v-974b37d7><br data-v-974b37d7><h2 class="articleCardTitle" data-v-974b37d7>4. web worker 有甚麼作用?應用場景?</h2><div data-v-974b37d7><a class="comment svgs" href="https://developer.mozilla.org/zh-TW/docs/Web/API/Web_Workers_API/Using_web_workers" data-v-974b37d7>web worker @MDN</a></div><p data-v-974b37d7>新開一個子線程, 且子線程的操作不受線程影響</p><p data-v-974b37d7>用於大數據處理 或 耗費時間長的操作</p><br data-v-974b37d7><br data-v-974b37d7><h1 id="" class="articleCardTitle cor36" data-v-974b37d7> [ Html ] ≫ html5 的離線儲存 </h1><p data-v-974b37d7> 當使用者沒有與網際網路連接時，可以正常訪問網站或應用程式；當使用者與網際網路連接時，則會更新使用者機器上的快取檔案。 </p><br data-v-974b37d7><p data-v-974b37d7> 工作原理：HTML5的離線儲存是建立在一個名為「.appcache」的快取機制上（並非儲存技術）。透過這個檔案中的解析清單，網站的資源可以被離線儲存。當網路處於離線狀態時，瀏覽器會使用這些已儲存的資源來顯示網頁。 </p><br data-v-974b37d7><p data-v-974b37d7>使用方法：</p><p class="pTwo" data-v-974b37d7> 1.在網頁的標頭中加入「manifest」屬性，例如：＜html manifest=&quot;cache.manifest&quot;&gt;＜/html&gt; </p><p class="pTwo" data-v-974b37d7> 2.創建一個「cache.manifest」檔案，並在其中編寫離線儲存的資源清單。 </p><p class="pTwo" data-v-974b37d7> 3.在需要實現離線儲存的地方，可以使用「window.applicationCache」對離線儲存進行操作。例如，可以通過檢查「applicationCache.status」來確定快取的狀態，並根據需要更新或讀取快取的資源。 </p><br data-v-974b37d7><br data-v-974b37d7></div></div>',1),Mi=mv(()=>v("div",{class:"toTopButton"},[v("div",{class:"disCen"},"___"),v("div",{class:"disCen"},"▲")],-1)),Fi=[Mi],Ii=mv(()=>v("div",{class:"toBotButton"},[v("div",{class:"disCen"},"▼"),v("div",{class:"disCen"},"￣")],-1)),Ri=[Ii],Hi={__name:"HtmlPage",setup(a){const s=ua(!1);window.addEventListener("scroll",function(){s.value=window.scrollY>0});function d(){window.scrollTo({top:0,left:0,behavior:"smooth"})}function t(){window.scrollTo({top:999999,left:0,behavior:"smooth"})}function c(e){window.scrollTo({top:document.getElementById(`${e}`).offsetTop,behavior:"smooth"})}return(e,n)=>(da(),ea(Q,null,[v("section",null,[v("div",$i,[v("div",Oi,[v("div",Ei,[v("div",{onClick:n[0]||(n[0]=l=>c("html001")),class:"leftNavText"}," 塊級元素和行內元素的差別 "),v("div",{onClick:n[1]||(n[1]=l=>c("html002")),class:"leftNavText"},"html5新特性"),v("div",{onClick:n[2]||(n[2]=l=>c("html003")),class:"leftNavText"}," 那些操作可以提升SEO "),v("div",{onClick:n[3]||(n[3]=l=>c("html004")),class:"leftNavText"}," Doctype作用,嚴格模式和混雜模式 ")])])]),Ai]),v("div",null,[X(T(W,{name:"fade",tag:"div"},{default:C(()=>[v("div",{onClick:d,class:"toTop"},Fi)]),_:1},512),[[Y,s.value]]),X(T(W,{name:"fade",tag:"div"},{default:C(()=>[v("div",{onClick:t,class:"toBot"},Ri)]),_:1},512),[[Y,s.value]])])],64))}},Bi=ia(Hi,[["__scopeId","data-v-974b37d7"]]);const Ji={};function Di(a,s){const d=za("RouterLink"),t=za("RouterView");return da(),ea(Q,null,[v("div",null,[v("ul",null,[v("li",null,[T(d,{to:"/css"},{default:C(()=>[fa("主文章")]),_:1})]),v("li",null,[T(d,{to:"/css/pagetwo"},{default:C(()=>[fa("練習題")]),_:1})])])]),T(t)],64)}const Wi=ia(Ji,[["render",Di],["__scopeId","data-v-d95abd7b"]]),Ui="/vue-learn-js/assets/cssbox001-91b4c462.png";const Xd=a=>(wa("data-v-bd1d4074"),a=a(),ha(),a),Ki={class:"leftNav"},Xi={class:"leftNavContainer"},Yi={class:"leftNavLayout"},Gi=Xd(()=>v("br",null,null,-1)),Qi={class:"Main"},Zi={class:"mainContainer"},a9={class:"mainLayout"},s9=U('<br data-v-bd1d4074><br data-v-bd1d4074><p class="cor36" data-v-bd1d4074>SCSS相比於CSS有那些好處?</p><p data-v-bd1d4074>它可以在寫語法時層層包裹, 可以用變量</p><br data-v-bd1d4074><br data-v-bd1d4074><p class="cor36" data-v-bd1d4074>CSS3有哪些新屬性?</p><p data-v-bd1d4074>flex transform translation animation 陰影 圓角</p><br data-v-bd1d4074><br data-v-bd1d4074><div id="cssOne001" class="articleCardTitle cor36" data-v-bd1d4074> [ CSS ] ≫ CSS有幾個單位px,rem,em,vw分別是怎樣? </div><p data-v-bd1d4074>px是一個像素</p><p data-v-bd1d4074>rem是根據根元素(html)</p><p data-v-bd1d4074>em當前節點字體大小的倍數</p><p data-v-bd1d4074>vw相對於設備視口的寬度</p><br data-v-bd1d4074><br data-v-bd1d4074><p class="cor36" data-v-bd1d4074># 像素是絕對的單位嗎?</p><p data-v-bd1d4074>像素是由操作系統和硬件決定的</p><p data-v-bd1d4074>一般來說硬件的象素是改變不了的</p><p data-v-bd1d4074>但是操作系統可以說你這個硬件我 2 個象素做 1 個象素用</p><br data-v-bd1d4074><br data-v-bd1d4074><p class="cor36" data-v-bd1d4074># vw的v</p><p data-v-bd1d4074>viewport視口, 眼睛所能瀏覽到的區域</p><br data-v-bd1d4074><p class="cor36" data-v-bd1d4074># 視口是窗口嗎?</p><p data-v-bd1d4074>不是,如果窗口裡面有一個內嵌窗口, 這個viewport會變成指內嵌窗口</p><br data-v-bd1d4074><br data-v-bd1d4074><div id="cssOne002" class="articleCardTitle cor36" data-v-bd1d4074> [ CSS ] ≫ position 的值和作用? </div><p data-v-bd1d4074>static . relative . absolute . fixed</p><br data-v-bd1d4074><p class="cor36" data-v-bd1d4074>static</p><p class="pTwo" data-v-bd1d4074> 它是文檔流布局, 有行內元素和塊元素, 塊元素有一行接一行這種, 行內元素就是橫著直到一行待不下就到第二行 </p><br data-v-bd1d4074><p class="cor36" data-v-bd1d4074>relative</p><p class="pTwo" data-v-bd1d4074>將元素偏離文檔流, 但占用正常文檔流位置</p><p class="pTwo" data-v-bd1d4074>relative 相對於 自身 進行定位</p><br data-v-bd1d4074><p class="cor36" data-v-bd1d4074>absolute</p><p class="pTwo" data-v-bd1d4074>將元素偏離文檔流, 不占用正常文檔流位置</p><br data-v-bd1d4074><p class="pTwo" data-v-bd1d4074> 若沒有指定基準元素的話，預設以 body 元素(整個視窗)為基準 </p><p class="pTwo" data-v-bd1d4074> absolute 元素的父元素 有 相對 或 絕對 定位 的元素的話 </p><p class="pTwo" data-v-bd1d4074> absolute 元素相對於父元素 的 padding 左上角進行定位 </p><br data-v-bd1d4074><p class="cor36" data-v-bd1d4074>fixed</p><p class="pTwo" data-v-bd1d4074>將元素偏離文檔流, 不占用正常文檔流位置</p><p class="pTwo" data-v-bd1d4074>相對於 body 定位</p><br data-v-bd1d4074><br data-v-bd1d4074><p class="cor36" data-v-bd1d4074>sticky</p><p class="pTwo" data-v-bd1d4074> 和 fixed 很像，差在 sticky 會佔住原本版面的空間，和 sticky 的預設 width 是 100 % (滿版) </p><br data-v-bd1d4074><p class="pTw" data-v-bd1d4074> 被 fixed 的區塊會被固定在指定位置，並且覆蓋網頁中內容 </p><p class="pTw" data-v-bd1d4074> 而 sticky 會讓原本網頁的內容推到下面，不會讓 sticky 擋住原有的文字。 </p><br data-v-bd1d4074><br data-v-bd1d4074><div id="cssOne003" class="articleCardTitle cor36" data-v-bd1d4074> [ CSS ] ≫ 盒模型?區別? </div><p data-v-bd1d4074>分為content-box和border-box</p><p data-v-bd1d4074>區別在於width指定寬度不同</p><p data-v-bd1d4074>content-box的寬度是內容的寬度</p><p data-v-bd1d4074>border-box的寬度是內容寬度加上padding加上border</p><br data-v-bd1d4074><br data-v-bd1d4074><div class="disCen" data-v-bd1d4074><img style="max-width:500px;" src="'+Ui+'" alt="" data-v-bd1d4074></div><br data-v-bd1d4074><br data-v-bd1d4074><p class="cor36" data-v-bd1d4074>#　一般用哪種?為什麼?</p><p data-v-bd1d4074>border-box</p><p data-v-bd1d4074> 因為你改變大小時,那個盒子總大小不會變 ; 子元素會繼承父元素寬度 content-box 寬度比你預想的要寬 用borderbox比較方便不用做額外計算 </p><br data-v-bd1d4074><br data-v-bd1d4074><p class="cor36" data-v-bd1d4074> # *{box-sizing:border-box}偽元素會被影響到嗎?為什麼? </p><p data-v-bd1d4074>不會, 因為*就選不到偽元素, *:before *:after</p><br data-v-bd1d4074><br data-v-bd1d4074><div id="cssOne004" class="articleCardTitle cor36" data-v-bd1d4074> [ CSS ] ≫ BFC是什麼 </div><p data-v-bd1d4074>塊級格式化上下文</p><p data-v-bd1d4074>當前元素把他所有子元素包起來,不受外部影響</p><p data-v-bd1d4074> 在一個BFC中，塊狀盒子與行盒（行盒由一行中所有的內聯元素所組成）都會垂直地沿著其父元素的邊框排列。 </p><br data-v-bd1d4074><br data-v-bd1d4074><p class="cor36" data-v-bd1d4074># 為什麼要觸發BFC?</p><p data-v-bd1d4074>阻止margin重叠 . 解决高度塌陷问题 . 消除浮動</p><br data-v-bd1d4074><br data-v-bd1d4074><p class="cor36" data-v-bd1d4074># BFC怎麼觸發?</p><p data-v-bd1d4074>overflow 的值非 visable . . . 一般用 overflow hidden</p><p data-v-bd1d4074>display 的值為 inline-block</p><p data-v-bd1d4074>position 的值為 absolute 或 fixed</p><p data-v-bd1d4074>float 的值非 none</p><br data-v-bd1d4074><br data-v-bd1d4074><p class="cor36" data-v-bd1d4074># margin外邊距重疊? or 外邊距合併?</p><p data-v-bd1d4074> 塊級元素的上外邊距和下外邊距有時會合併（或折疊）為一個外邊距，其大小取其中的最大者。 </p><br data-v-bd1d4074><p data-v-bd1d4074> 假設一個div元素在上面，另一個div元素在下面，下面外邊距為20px，上面外邊距為30px，他們之間的邊距會取最大值30px。 </p><br data-v-bd1d4074><br data-v-bd1d4074><p class="cor36" data-v-bd1d4074># 高度塌陷問題?</p><p data-v-bd1d4074> 父元素没有設定大小（或不設定高度），子元素浮動，子元素會跳出父元素的邊界（脫離文檔流）當父元素的高度為auto時，父元素的高度直接為0。 </p><br data-v-bd1d4074><p class="vor36" data-v-bd1d4074>解決:</p><p class="pFou" data-v-bd1d4074>1.父元素設定固定高度。</p><p class="pFou" data-v-bd1d4074>2.父元素設定overflow:hidden屬性。</p><p class="pFou" data-v-bd1d4074>3.在父元素末尾添加一個空元素並設定為清除浮動。</p><p class="pFou" data-v-bd1d4074>4.使用after偽元素來清除浮動。</p><br data-v-bd1d4074><br data-v-bd1d4074><p class="cor36" data-v-bd1d4074># 清除浮動有哪些方式?</p><p data-v-bd1d4074>1.觸發BFC</p><p data-v-bd1d4074> 2.後面加一個after偽類, content設為空, display設為block, 然後加一個clear:both, 現在我一般用FLEX沒怎麼用浮動 </p><br data-v-bd1d4074><br data-v-bd1d4074><div id="cssOne005" class="articleCardTitle cor36" data-v-bd1d4074> [ CSS ] ≫ CSS選擇器優先級和權重? </div><span data-v-bd1d4074><a href="https://ithelp.ithome.com.tw/articles/10243699" data-v-bd1d4074>資料來源: 選擇器表 @iT邦幫忙 Eudora</a></span><div data-v-bd1d4074></div><br data-v-bd1d4074><p data-v-bd1d4074> !import &gt; 內聯樣式 &gt; id 選擇器 &gt; 類選擇器 &gt; 標籤選擇器 &gt; 通配符選擇器 </p><br data-v-bd1d4074><p class="cor36" data-v-bd1d4074>CSS 權重計算:</p><p data-v-bd1d4074>1.第一等: 內聯樣式 權重 1000</p><br data-v-bd1d4074><p data-v-bd1d4074>2.第二等: ID選擇器 權重 100</p><br data-v-bd1d4074><p data-v-bd1d4074>3.第三等: 類,屬性,偽類選擇器 權重 10</p><br data-v-bd1d4074><p data-v-bd1d4074>4.第四等: 標籤選擇器,偽元素選擇器 權重 1</p><br data-v-bd1d4074><p data-v-bd1d4074>5.第五等: 通配符選擇器 權重 0</p><br data-v-bd1d4074><br data-v-bd1d4074><p class="cor36" data-v-bd1d4074># 選擇器在解析在匹配的時候從左邊開始還是右邊開始?</p><p class="cor36" data-v-bd1d4074> or # 假設我的選擇器是 a b c,目標是找到所有c,那瀏覽器是先去找到所有的c還是先找所有的a? </p><br data-v-bd1d4074><p data-v-bd1d4074>瀏覽器會從右到左解析CSS選擇器</p><p data-v-bd1d4074>∕span -&gt; ∕div -&gt; html</p><br data-v-bd1d4074><p data-v-bd1d4074>從c找到a,右往左找</p><br data-v-bd1d4074><br data-v-bd1d4074>',143),d9=Xd(()=>v("span",null,"性能問題,假設從左往右會先找到很多a,可能99%沒用,沒必要找",-1)),c9=U('<br data-v-bd1d4074><br data-v-bd1d4074><p class="cor36" data-v-bd1d4074>想選擇一個標籤的下一子層?</p><p data-v-bd1d4074>標籤 右鍵頭 再加一個標籤</p><br data-v-bd1d4074><div class="dis spa" data-v-bd1d4074><div data-v-bd1d4074>elA &gt; elB</div><div data-v-bd1d4074>A 的下一子層 的所有 B (不含子子層)</div><div data-v-bd1d4074>article &gt; h2</div></div><br data-v-bd1d4074><br data-v-bd1d4074><p class="cor36" data-v-bd1d4074> # CSS選擇器,我想選擇一個標籤的下一個標籤用什麼選擇器? </p><p data-v-bd1d4074>加號選擇器</p><br data-v-bd1d4074><div class="dis spa" data-v-bd1d4074><div data-v-bd1d4074>elA + elB</div><div data-v-bd1d4074>緊接在 A 後面的 B (同輩)</div><div data-v-bd1d4074>h1 + p</div></div><br data-v-bd1d4074><br data-v-bd1d4074><p class="cor36" data-v-bd1d4074># 如果要找到所有name,x開頭的標籤,能找到嗎?</p><p data-v-bd1d4074>屬性選擇器 加 上間號 等於</p><br data-v-bd1d4074><div class="dis spa" data-v-bd1d4074><div data-v-bd1d4074>X[ attr ^= val ]</div><div data-v-bd1d4074>有___屬性且屬性值&quot;開頭&quot;為___的 X</div><div data-v-bd1d4074>a[src^=&quot;https&quot;]</div></div><br data-v-bd1d4074><br data-v-bd1d4074><p class="cor36" data-v-bd1d4074> # jQuery選擇器怎麼實現的?IE可以.a或.b但不支持.a .b你怎麼實現查找$(&quot;.a .b&quot;)查找過程? </p><p data-v-bd1d4074> 先把選擇器做正則解析, 發現它的層級關係, 遍歷所有元素, 看它是否滿足這個關係 </p><br data-v-bd1d4074><br data-v-bd1d4074><div id="cssOne006" class="articleCardTitle cor36" data-v-bd1d4074> [ CSS ] ≫ 水平垂直置中? </div><div data-v-bd1d4074>(margin 0 auto 前提是 child 要設寬)</div><div data-v-bd1d4074>(margin auto前提是當前元素是絕對定位)</div><div data-v-bd1d4074> (translate前提是先做了絕對定位, 距離負元素 let 50% top50% 再translate(-50%, -50%)) </div><br data-v-bd1d4074><div data-v-bd1d4074>1.知不知寬高 . 水平or垂直</div><br data-v-bd1d4074><h3 class="cor36" data-v-bd1d4074>塊級元素居中布局</h3><p class="cor36" data-v-bd1d4074>水平居中</p><p class="pFou" data-v-bd1d4074>知道寬：margin: 0 auto;</p><p class="pFou" data-v-bd1d4074>不知寬</p><br data-v-bd1d4074><p class="cor36" data-v-bd1d4074>垂直居中</p><p class="pFou" data-v-bd1d4074> position: absolute 設置 left、top、margin-left、margin-to (定高) </p><p class="pFou" data-v-bd1d4074>position: fixed 設置 margin: auto (定高)</p><p class="pFou" data-v-bd1d4074>display: table-cell</p><p class="pFou" data-v-bd1d4074>transform: translate(x, y)</p><p class="pFou" data-v-bd1d4074>flex (不定高，不定寬) ie11 ↑</p><p class="pFou" data-v-bd1d4074>grid (不定高，不定寬)，兼容性相對比較差 ie10 ↑</p><br data-v-bd1d4074><h3 class="cor36" data-v-bd1d4074>內聯元素居中布局</h3><p class="cor36" data-v-bd1d4074>水平居中</p><p class="pFou" data-v-bd1d4074>行內元素父元素下可設置：text-align: center</p><p class="pFou" data-v-bd1d4074> flex布局設置父元素：display: flex; justify-content: center </p><br data-v-bd1d4074><p class="cor36" data-v-bd1d4074>垂直居中</p><p class="pFou" data-v-bd1d4074>單行文本父元素確認高度：height === line-height</p><br data-v-bd1d4074><br data-v-bd1d4074><br data-v-bd1d4074><br data-v-bd1d4074><h3 class="cor36" data-v-bd1d4074>塊級元素居中布局</h3><br data-v-bd1d4074><p data-v-bd1d4074>flex 彈性盒子布局 (主軸垂直 , 交叉軸水平)</p><p data-v-bd1d4074> justify-content: center會使flex容器下的所有flex項目全部水平居中。 </p><p data-v-bd1d4074>缺點? _ IE8以下不能用</p><br data-v-bd1d4074><div class="bgcVS" data-v-bd1d4074><div data-v-bd1d4074><span class="then" data-v-bd1d4074>＜</span> <span class="number" data-v-bd1d4074>div </span><span class="function" data-v-bd1d4074>class </span> <span class="then" data-v-bd1d4074>= &quot;</span><span class="word" data-v-bd1d4074>parent</span><span class="then" data-v-bd1d4074>&quot;</span> <span class="then" data-v-bd1d4074>&gt;</span></div><div class="pTwo" data-v-bd1d4074><span class="then" data-v-bd1d4074>＜</span> <span class="number" data-v-bd1d4074>div </span><span class="function" data-v-bd1d4074>class </span> <span class="then" data-v-bd1d4074>=&quot;</span><span class="word" data-v-bd1d4074>child</span> <span class="then" data-v-bd1d4074>&quot;&gt;＜/ </span><span class="number" data-v-bd1d4074>div </span> <span class="then" data-v-bd1d4074>&gt;</span></div><div data-v-bd1d4074><span class="then" data-v-bd1d4074>＜ </span> <span class="number" data-v-bd1d4074>div </span><span class="then" data-v-bd1d4074>&gt;</span></div><div class="brackets" data-v-bd1d4074>.parent {</div><div class="brackets pTwo" data-v-bd1d4074>display: flex;</div><div class="brackets pTwo" data-v-bd1d4074>justify-content: center;</div><div class="brackets pTwo" data-v-bd1d4074>align-items: center;</div><div class="brackets" data-v-bd1d4074>}</div></div><br data-v-bd1d4074><br data-v-bd1d4074><p data-v-bd1d4074>flex 格線佈局布局</p><br data-v-bd1d4074><div class="bgcVS" data-v-bd1d4074><div data-v-bd1d4074><span class="then" data-v-bd1d4074>＜</span> <span class="number" data-v-bd1d4074>div </span><span class="function" data-v-bd1d4074>class </span> <span class="then" data-v-bd1d4074>= &quot;</span><span class="word" data-v-bd1d4074>parent</span><span class="then" data-v-bd1d4074>&quot;</span> <span class="then" data-v-bd1d4074>&gt;</span></div><div class="pTwo" data-v-bd1d4074><span class="then" data-v-bd1d4074>＜</span> <span class="number" data-v-bd1d4074>div </span><span class="function" data-v-bd1d4074>class </span> <span class="then" data-v-bd1d4074>=&quot;</span><span class="word" data-v-bd1d4074>child</span> <span class="then" data-v-bd1d4074>&quot;&gt;＜/ </span><span class="number" data-v-bd1d4074>div </span> <span class="then" data-v-bd1d4074>&gt;</span></div><div data-v-bd1d4074><span class="then" data-v-bd1d4074>＜ </span> <span class="number" data-v-bd1d4074>div </span><span class="then" data-v-bd1d4074>&gt;</span></div><div class="brackets" data-v-bd1d4074>.parent {</div><div class="brackets pTwo" data-v-bd1d4074>display: grid;</div><div class="brackets" data-v-bd1d4074>}</div><div class="brackets" data-v-bd1d4074>.child {</div><div class="brackets pTwo" data-v-bd1d4074>justify-self: center;</div><div class="brackets pTwo" data-v-bd1d4074>align-self: center;</div><div class="brackets" data-v-bd1d4074>}</div></div><br data-v-bd1d4074><br data-v-bd1d4074><br data-v-bd1d4074><p data-v-bd1d4074>absolute + transform translate ( -50% , -50% )</p><p data-v-bd1d4074>絕對定位，這個方法不需要子元素固定寬高</p><br data-v-bd1d4074><p data-v-bd1d4074> : 可以用transform實現, 給他子絕對父相對定位, 給子top百分之50 left百分之50, 然後transform translate負的百分之50 實現垂直居中, </p><br data-v-bd1d4074><p class="cor36" data-v-bd1d4074>你說的絕對定位方法有沒有副作用?</p><p data-v-bd1d4074>(fix定位會被transform屏蔽掉)</p><p data-v-bd1d4074> 它的位置的中點會相對於原來的位置有偏移,它以前相對於窗口定位,它現在相對於父元素定位 </p><br data-v-bd1d4074><div class="bgcVS" data-v-bd1d4074><div data-v-bd1d4074><span class="then" data-v-bd1d4074>＜</span> <span class="number" data-v-bd1d4074>div </span><span class="function" data-v-bd1d4074>class </span> <span class="then" data-v-bd1d4074>= &quot;</span><span class="word" data-v-bd1d4074>parent</span><span class="then" data-v-bd1d4074>&quot;</span> <span class="then" data-v-bd1d4074>&gt;</span></div><div class="pTwo" data-v-bd1d4074><span class="then" data-v-bd1d4074>＜</span> <span class="number" data-v-bd1d4074>div </span><span class="function" data-v-bd1d4074>class </span> <span class="then" data-v-bd1d4074>=&quot;</span><span class="word" data-v-bd1d4074>child</span> <span class="then" data-v-bd1d4074>&quot;&gt;＜/ </span><span class="number" data-v-bd1d4074>div </span> <span class="then" data-v-bd1d4074>&gt;</span></div><div data-v-bd1d4074><span class="then" data-v-bd1d4074>＜ </span> <span class="number" data-v-bd1d4074>div </span><span class="then" data-v-bd1d4074>&gt;</span></div><div class="brackets" data-v-bd1d4074>.parent {</div><div class="brackets pTwo" data-v-bd1d4074>position: relative;</div><div class="brackets" data-v-bd1d4074>}</div><div class="brackets" data-v-bd1d4074>.child {</div><div class="brackets pTwo" data-v-bd1d4074>position: absolute;</div><div class="brackets pTwo" data-v-bd1d4074>top: 50%;</div><div class="brackets pTwo" data-v-bd1d4074>left: 50%;</div><div class="brackets pTwo" data-v-bd1d4074>transform: translate(-50%, -50%);</div><div class="brackets" data-v-bd1d4074>}</div></div><br data-v-bd1d4074><br data-v-bd1d4074><p data-v-bd1d4074>margin: 0 auto . . . <span class="cor36" data-v-bd1d4074>(知道子元素寬)</span></p><p data-v-bd1d4074>只有 <span class="cor36" data-v-bd1d4074>非絕對定位 </span> 的元素才有效</p><p data-v-bd1d4074>絕對定位指: absolute . fixed . sticky</p><p class="comment" data-v-bd1d4074>img/input/button等自帶寬，可不設</p><br data-v-bd1d4074><p data-v-bd1d4074>: 如果知道它的寬度的話, 可用margin 0 auto來實現</p><br data-v-bd1d4074><div class="bgcVS" data-v-bd1d4074><div data-v-bd1d4074><span class="then" data-v-bd1d4074>＜</span> <span class="number" data-v-bd1d4074>div </span><span class="function" data-v-bd1d4074>class </span> <span class="then" data-v-bd1d4074>= &quot;</span><span class="word" data-v-bd1d4074>parent</span><span class="then" data-v-bd1d4074>&quot;</span> <span class="then" data-v-bd1d4074>&gt;</span></div><div class="pTwo" data-v-bd1d4074><span class="then" data-v-bd1d4074>＜</span> <span class="number" data-v-bd1d4074>div </span><span class="function" data-v-bd1d4074>class </span> <span class="then" data-v-bd1d4074>=&quot;</span><span class="word" data-v-bd1d4074>child</span> <span class="then" data-v-bd1d4074>&quot;&gt;＜/ </span><span class="number" data-v-bd1d4074>div </span> <span class="then" data-v-bd1d4074>&gt;</span></div><div data-v-bd1d4074><span class="then" data-v-bd1d4074>＜ </span> <span class="number" data-v-bd1d4074>div </span><span class="then" data-v-bd1d4074>&gt;</span></div><div class="brackets" data-v-bd1d4074>.child {</div><div class="comment pTwo" data-v-bd1d4074>/* 必須設定 box 的寬 */</div><div class="brackets pTwo" data-v-bd1d4074>width: 100px;</div><div class="brackets pTwo" data-v-bd1d4074>margin: 0 auto;</div><div class="brackets" data-v-bd1d4074>}</div></div><br data-v-bd1d4074><br data-v-bd1d4074><p class="cor36" data-v-bd1d4074># 父子高度都不確定但確實有值如何實現垂直居中?</p><br data-v-bd1d4074><p data-v-bd1d4074> margin: auto . . . <span class="cor36" data-v-bd1d4074>(1.需要父元素高 2.子元素寬高 3.父相對子絕對)</span></p><p data-v-bd1d4074>缺點: 不兼容ie</p><br data-v-bd1d4074><p data-v-bd1d4074>: 在子CSS屬性上加上下左右值為0 然後加上margin auto,</p><br data-v-bd1d4074><div class="bgcVS" data-v-bd1d4074><div data-v-bd1d4074><span class="then" data-v-bd1d4074>＜</span> <span class="number" data-v-bd1d4074>div </span><span class="function" data-v-bd1d4074>class </span> <span class="then" data-v-bd1d4074>= &quot;</span><span class="word" data-v-bd1d4074>parent</span><span class="then" data-v-bd1d4074>&quot;</span> <span class="then" data-v-bd1d4074>&gt;</span></div><div class="pTwo" data-v-bd1d4074><span class="then" data-v-bd1d4074>＜</span> <span class="number" data-v-bd1d4074>div </span><span class="function" data-v-bd1d4074>class </span> <span class="then" data-v-bd1d4074>=&quot;</span><span class="word" data-v-bd1d4074>child</span> <span class="then" data-v-bd1d4074>&quot;&gt;＜/ </span><span class="number" data-v-bd1d4074>div </span> <span class="then" data-v-bd1d4074>&gt;</span></div><div data-v-bd1d4074><span class="then" data-v-bd1d4074>＜ </span> <span class="number" data-v-bd1d4074>div </span><span class="then" data-v-bd1d4074>&gt;</span></div><div class="brackets" data-v-bd1d4074>.parent {</div><div class="brackets pTwo" data-v-bd1d4074>position: relative;</div><div class="brackets pTwo" data-v-bd1d4074>height: 300px;</div><div class="brackets" data-v-bd1d4074>}</div><div class="brackets" data-v-bd1d4074>.child {</div><div class="brackets pTwo" data-v-bd1d4074>width: 100px;</div><div class="brackets pTwo" data-v-bd1d4074>height: 100px;</div><div class="brackets pTwo" data-v-bd1d4074>position: absolute;</div><div class="brackets pTwo" data-v-bd1d4074>top: 0;</div><div class="brackets pTwo" data-v-bd1d4074>left: 0;</div><div class="brackets pTwo" data-v-bd1d4074>right: 0;</div><div class="brackets pTwo" data-v-bd1d4074>bottom: 0;</div><div class="brackets pTwo" data-v-bd1d4074>margin: auto;</div><div class="brackets" data-v-bd1d4074>}</div></div><br data-v-bd1d4074><br data-v-bd1d4074><h3 class="cor36" data-v-bd1d4074>內聯元素水平居中</h3><p data-v-bd1d4074> text-align: center 可以使行內級元素和行內塊級元素在父元素中水平居中。 </p><p data-v-bd1d4074> 父元素下的所有行級元素，包含子元素以及孫子元素，都相對於自己的父元素水平居中。 </p><br data-v-bd1d4074><div class="bgcVS" data-v-bd1d4074><div data-v-bd1d4074><span class="then" data-v-bd1d4074>＜</span> <span class="number" data-v-bd1d4074>div </span><span class="function" data-v-bd1d4074>class </span> <span class="then" data-v-bd1d4074>= &quot;</span><span class="word" data-v-bd1d4074>parent</span><span class="then" data-v-bd1d4074>&quot;</span> <span class="then" data-v-bd1d4074>&gt;</span></div><div class="pTwo" data-v-bd1d4074><span class="then" data-v-bd1d4074>＜</span> <span class="number" data-v-bd1d4074>span </span><span class="function" data-v-bd1d4074>class </span> <span class="then" data-v-bd1d4074>=&quot;</span><span class="word" data-v-bd1d4074>child</span> <span class="then" data-v-bd1d4074>&quot;&gt;＜/ </span><span class="number" data-v-bd1d4074>div </span> <span class="then" data-v-bd1d4074>&gt;</span></div><div data-v-bd1d4074><span class="then" data-v-bd1d4074>＜ </span> <span class="number" data-v-bd1d4074>div </span><span class="then" data-v-bd1d4074>&gt;</span></div><div class="brackets" data-v-bd1d4074>.parent {</div><div class="brackets pTwo" data-v-bd1d4074>width: 300px;</div><div class="brackets pTwo" data-v-bd1d4074>height: 300px;</div><div class="brackets pTwo" data-v-bd1d4074>text-align: center;</div><div class="brackets" data-v-bd1d4074>}</div><div class="brackets" data-v-bd1d4074>.child {</div><div class="brackets pTwo" data-v-bd1d4074>width: 100px;</div><div class="brackets pTwo" data-v-bd1d4074>height: 100px;</div><div class="brackets" data-v-bd1d4074>}</div></div><br data-v-bd1d4074><br data-v-bd1d4074><h3 class="cor36" data-v-bd1d4074>內聯元素垂直居中</h3><p data-v-bd1d4074>子元素 line-heignt 設跟父元素一樣高度</p><br data-v-bd1d4074><div class="bgcVS" data-v-bd1d4074><div data-v-bd1d4074><span class="then" data-v-bd1d4074>＜</span> <span class="number" data-v-bd1d4074>div </span><span class="function" data-v-bd1d4074>class </span> <span class="then" data-v-bd1d4074>= &quot;</span><span class="word" data-v-bd1d4074>parent</span><span class="then" data-v-bd1d4074>&quot;</span> <span class="then" data-v-bd1d4074>&gt;</span></div><div class="pTwo" data-v-bd1d4074><span class="then" data-v-bd1d4074>＜</span> <span class="number" data-v-bd1d4074>span </span><span class="function" data-v-bd1d4074>class </span> <span class="then" data-v-bd1d4074>=&quot;</span><span class="word" data-v-bd1d4074>child</span> <span class="then" data-v-bd1d4074>&quot;&gt;＜/ </span><span class="number" data-v-bd1d4074>div </span> <span class="then" data-v-bd1d4074>&gt;</span></div><div data-v-bd1d4074><span class="then" data-v-bd1d4074>＜ </span> <span class="number" data-v-bd1d4074>div </span><span class="then" data-v-bd1d4074>&gt;</span></div><div class="brackets" data-v-bd1d4074>.parent {</div><div class="brackets pTwo" data-v-bd1d4074>width: 300px;</div><div class="brackets pTwo" data-v-bd1d4074>height: 300px;</div><div class="brackets" data-v-bd1d4074>}</div><div class="brackets" data-v-bd1d4074>.child {</div><div class="brackets pTwo" data-v-bd1d4074>width: 100px;</div><div class="brackets pTwo" data-v-bd1d4074>line-heignt:父元素的高度;</div><div class="brackets" data-v-bd1d4074>}</div></div><br data-v-bd1d4074><br data-v-bd1d4074><div id="cssOne007" class="articleCardTitle cor36" data-v-bd1d4074> [ CSS ] ≫ CSS有哪些常見的布局方法? </div><span data-v-bd1d4074><a href="https://ithelp.ithome.com.tw/articles/10208741" data-v-bd1d4074>資料來源: Flex 空間分配 @iT邦幫忙 Lai</a></span><div data-v-bd1d4074></div><br data-v-bd1d4074><p data-v-bd1d4074>FLEX GRID</p><br data-v-bd1d4074><br data-v-bd1d4074><p class="cor36" data-v-bd1d4074>實現一個左中右三欄布局,不能用FLEX,GRID怎麼做?</p><p data-v-bd1d4074>定位 float table</p><br data-v-bd1d4074><br data-v-bd1d4074><p class="cor36" data-v-bd1d4074>Flex 布局用在什麼情況下比較合適?</p><p data-v-bd1d4074>用於線性布局, 水平或垂直</p><br data-v-bd1d4074><br data-v-bd1d4074><p class="cor36" data-v-bd1d4074>Grid 布局用在什麼情況下比較合適?</p><p data-v-bd1d4074>用於線性布局,水平或垂直</p><br data-v-bd1d4074><br data-v-bd1d4074><p class="cor36" data-v-bd1d4074>做一個左中右的布局用FLEX怎麼做?</p><p data-v-bd1d4074>可以直接給父元素加display:flex 子元素加space:between</p><br data-v-bd1d4074><br data-v-bd1d4074><p class="cor36" data-v-bd1d4074>不夠寬自然會收縮,有哪些元素會收縮?</p><p data-v-bd1d4074>它會等比例收縮</p><br data-v-bd1d4074><br data-v-bd1d4074><p class="cor36" data-v-bd1d4074>如果我希望它不等比例收縮呢?比如中間不縮左右縮呢?</p><p data-v-bd1d4074>中間的設 flex-shrink 0</p><p data-v-bd1d4074>兩邊默認的shrink是 1</p><br data-v-bd1d4074><br data-v-bd1d4074><p class="cor36" data-v-bd1d4074> 如果希望左邊固定寬100px右邊固定寬200px中間自由收縮怎麼做? </p><p data-v-bd1d4074>左邊寬100右邊寬200</p><br data-v-bd1d4074><br data-v-bd1d4074><p class="cor36" data-v-bd1d4074>寫了寬度之後shrink怎麼寫?</p><p data-v-bd1d4074>左右0 中間寫1</p><br data-v-bd1d4074><br data-v-bd1d4074><p class="cor36" data-v-bd1d4074>那左中右grow怎麼寫?</p><p data-v-bd1d4074>左右grow0 中間1</p><br data-v-bd1d4074><br data-v-bd1d4074><p class="cor36" data-v-bd1d4074>grid一般用來做甚麼樣的布局?怎麼用?</p><p data-v-bd1d4074>網格 屏幕做四個相等的 用行列布局骨架</p><br data-v-bd1d4074><br data-v-bd1d4074><div id="cssOne008" class="articleCardTitle cor36" data-v-bd1d4074> [ CSS ] ≫ CSS動畫有哪些屬性? </div><p data-v-bd1d4074>transition</p><p data-v-bd1d4074>@keyframe</p><p data-v-bd1d4074>animation</p><br data-v-bd1d4074><br data-v-bd1d4074><p class="cor36" data-v-bd1d4074> transition怎麼實現動畫的,例如你怎麼把一個東西從左移到右? </p><p data-v-bd1d4074>先自訂一個初始的位置, 比如你觸發點擊事件</p><p data-v-bd1d4074> 點擊讓它移動100px, 用transition優化它中間過度的動畫, 寫 all 0.25秒 </p><br data-v-bd1d4074><br data-v-bd1d4074><p class="cor36" data-v-bd1d4074> 你用transition加了從開始到結束的動畫,這動畫可以是線性也可以非線性也可以緩動的,你能舉幾個例子嗎?線性是用什麼值? </p><p data-v-bd1d4074>transition-timing-function</p><p data-v-bd1d4074>預設ease緩入中間快緩出</p><p data-v-bd1d4074>linear均速</p><p data-v-bd1d4074>ease-in 緩入</p><p data-v-bd1d4074>ease-out 緩出</p><br data-v-bd1d4074><br data-v-bd1d4074><p class="cor36" data-v-bd1d4074> 你做旋轉時,它默認從那裡開始旋轉?從哪個基點開始旋轉? </p><p data-v-bd1d4074>中心點, 可以設定transform-origin 改變 例如 top left 到左上角</p><br data-v-bd1d4074><br data-v-bd1d4074><p class="cor36" data-v-bd1d4074> animation我如果希望它撥放完了再繼續撥無限撥怎麼做? </p><p data-v-bd1d4074>animation-iteration-count 設定 infinite</p><br data-v-bd1d4074><br data-v-bd1d4074><div id="cssOne009" class="articleCardTitle cor36" data-v-bd1d4074> [ CSS ] ≫ 畫三角形的方法? </div><div data-v-bd1d4074><span data-v-bd1d4074><a href="https://codepen.io/wayne23123/pen/QWJdjVJ?editors=1100" data-v-bd1d4074>@codePen demo</a></span></div><p data-v-bd1d4074>1.</p><p data-v-bd1d4074>用border, 給四個邊距, 然後給三個透明</p><br data-v-bd1d4074><p data-v-bd1d4074>2.</p><p data-v-bd1d4074>用2個div做, 第一個div做正方形, 然後旋轉90度變成菱形,</p><p data-v-bd1d4074> 另一個div做為父容器把他的上面百分之50顯示, 下面百分之50 overflow:hidden起來 </p><div id="cssOne010" class="articleCardTitle cor36" data-v-bd1d4074> [ css ] ≫ 什麼是重排(回流)和重繪?如何避免 </div><h2 data-v-bd1d4074>重繪不一定重排，重排一定重繪</h2><br data-v-bd1d4074><h3 class="cor36" data-v-bd1d4074># 重排(回流)（reflow）是什麼:</h3><p data-v-bd1d4074>當瀏覽器偵測到頁面的佈局發生變化時，就需要進行回退並重新渲染。</p><br data-v-bd1d4074><p class="cor36" data-v-bd1d4074># 觸發重排(回流)條件：</p><p data-v-bd1d4074>1.頁面第一次渲染（初始化）</p><p data-v-bd1d4074>2.DOM樹節點的增刪或移動</p><p data-v-bd1d4074>3.DOM元素的幾何屬性變化</p><p class="pFou" data-v-bd1d4074>寬度（width）</p><p class="pFou" data-v-bd1d4074>高度（height）</p><p class="pFou" data-v-bd1d4074>內邊距（padding）</p><p class="pFou" data-v-bd1d4074>邊框（border）等</p><p class="pFou" data-v-bd1d4074>外邊距（margin）</p><p class="pFou" data-v-bd1d4074>左偏移（left）</p><p class="pFou" data-v-bd1d4074>上偏移（top）</p><br data-v-bd1d4074><p data-v-bd1d4074>4.瀏覽器窗口大小改變（resize）</p><p data-v-bd1d4074>獲取元素的某些屬性，如offset系列、scroll系列和client系列屬性。</p><br data-v-bd1d4074><p class="cor36" data-v-bd1d4074># 重排(回流)過程</p><p data-v-bd1d4074> 劉覽器會從根節點＜html&gt;元素 開始進行遞歸，逐個計算所有節點的幾何尺寸和位置，以確定是渲染樹的一部分發生變化還是整個渲染樹需要重新渲染。 </p><br data-v-bd1d4074><br data-v-bd1d4074><h3 class="cor36" data-v-bd1d4074># 重繪（repaint）是什麼:</h3><p data-v-bd1d4074> 當我們改變某個元素的背景色、文字顏色、邊框顏色等屬性時，屏幕的一部分需要重繪，但是元素的幾何尺寸和位置沒有發生改變。重繪過程不涉及布局的計算，只是重新繪製已有的元素。 </p><br data-v-bd1d4074><p class="cor36" data-v-bd1d4074># 觸發重繪條件:</p><p data-v-bd1d4074> 1.重排(回流)必會引起重繪，因為回流的過程中可能會改變元素的樣式屬性，需要重新繪製已有的元素。 </p><p data-v-bd1d4074>2.背景色、文字顏色、字體等的改變會觸發重繪。</p><p class="pTwo" data-v-bd1d4074> 注意 字體大小發生變化時，將觸發回流而非僅重繪。(會影響元素的佈局) </p><br data-v-bd1d4074><p class="cor36" data-v-bd1d4074># 重繪過程</p><p data-v-bd1d4074> 沒有導致 DOM 元素的幾何屬性（寬度、高度、位置）發生變化，因此元素的位置信息不需要更新，從而省去了佈局（layout）的過程。 </p><br data-v-bd1d4074><br data-v-bd1d4074><h2 class="cor36" data-v-bd1d4074># 如何避免重排(回流).重繪?</h2><p data-v-bd1d4074>1.集中改變樣式: ex 用 class 集中改變</p><br data-v-bd1d4074><p data-v-bd1d4074>2.用 transform 做變形和位移，可以減少重排(回流)的次數。</p><br data-v-bd1d4074><p data-v-bd1d4074> 3.將需要多次修改的 DOM 元素設置為 display:none，操作完成後再顯示。 </p><br data-v-bd1d4074><p data-v-bd1d4074>4.避免多次讀取某些屬性</p><br data-v-bd1d4074><p data-v-bd1d4074>5.絕對定位將複雜的節點脫離文檔流中，形成新的 Render Layer。</p><br data-v-bd1d4074><p data-v-bd1d4074> 6.使用 DocumentFragment 將需要多次修改的 DOM 元素緩存起來，最後一次性添加到真實的 DOM 中進行渲染。 </p><br data-v-bd1d4074><br data-v-bd1d4074><p data-v-bd1d4074></p><p data-v-bd1d4074></p><br data-v-bd1d4074><br data-v-bd1d4074><p class="cor36" data-v-bd1d4074></p><p data-v-bd1d4074></p><br data-v-bd1d4074><br data-v-bd1d4074><p class="cor36" data-v-bd1d4074></p><p data-v-bd1d4074></p><br data-v-bd1d4074><br data-v-bd1d4074><p class="cor36" data-v-bd1d4074></p><p data-v-bd1d4074></p><br data-v-bd1d4074><br data-v-bd1d4074><p class="cor36" data-v-bd1d4074></p><p data-v-bd1d4074></p><br data-v-bd1d4074><br data-v-bd1d4074><p class="cor36" data-v-bd1d4074></p><p data-v-bd1d4074></p><br data-v-bd1d4074><br data-v-bd1d4074><div id="" class="articleCardTitle cor36" data-v-bd1d4074>[ CSS ] ≫</div><p data-v-bd1d4074></p><br data-v-bd1d4074><br data-v-bd1d4074>',277),t9=Xd(()=>v("div",{class:"toTopButton"},[v("div",{class:"disCen"},"___"),v("div",{class:"disCen"},"▲")],-1)),n9=[t9],v9=Xd(()=>v("div",{class:"toBotButton"},[v("div",{class:"disCen"},"▼"),v("div",{class:"disCen"},"￣")],-1)),e9=[v9],p9={__name:"CssPageOne",setup(a){const s=ua(!1);window.addEventListener("scroll",function(){s.value=window.scrollY>0});function d(){window.scrollTo({top:0,left:0,behavior:"smooth"})}function t(){window.scrollTo({top:999999,left:0,behavior:"smooth"})}function c(e){window.scrollTo({top:document.getElementById(`${e}`).offsetTop,behavior:"smooth"})}return(e,n)=>{const l=za("spen");return da(),ea(Q,null,[v("section",null,[v("div",Ki,[v("div",Xi,[v("div",Yi,[Gi,v("div",{onClick:n[0]||(n[0]=p=>c("cssOne001")),class:"leftNavText"}," px,rem,em,vw "),v("div",{onClick:n[1]||(n[1]=p=>c("cssOne002")),class:"leftNavText"},"position"),v("div",{onClick:n[2]||(n[2]=p=>c("cssOne003")),class:"leftNavText"},"盒模型"),v("div",{onClick:n[3]||(n[3]=p=>c("cssOne004")),class:"leftNavText"},"BFC"),v("div",{onClick:n[4]||(n[4]=p=>c("cssOne005")),class:"leftNavText"}," 選擇器優先級 "),v("div",{onClick:n[5]||(n[5]=p=>c("cssOne006")),class:"leftNavText"}," 水平垂直置中 "),v("div",{onClick:n[6]||(n[6]=p=>c("cssOne007")),class:"leftNavText"},"布局"),v("div",{onClick:n[7]||(n[7]=p=>c("cssOne008")),class:"leftNavText"},"動畫"),v("div",{onClick:n[8]||(n[8]=p=>c("cssOne009")),class:"leftNavText"},"三角形"),v("div",{onClick:n[9]||(n[9]=p=>c("cssOne010")),class:"leftNavText"},"重繪回流"),v("div",{onClick:n[10]||(n[10]=p=>c("cssOne0")),class:"leftNavText"}),v("div",{onClick:n[11]||(n[11]=p=>c("cssOne0")),class:"leftNavText"}),v("div",{onClick:n[12]||(n[12]=p=>c("cssOne0")),class:"leftNavText"})])])]),v("div",Qi,[v("div",Zi,[v("div",a9,[s9,v("p",null,[T(l,{class:"cor36"},{default:C(()=>[fa("因為: ")]),_:1}),d9]),c9])])])]),v("div",null,[X(T(W,{name:"fade",tag:"div"},{default:C(()=>[v("div",{onClick:d,class:"toTop"},n9)]),_:1},512),[[Y,s.value]]),X(T(W,{name:"fade",tag:"div"},{default:C(()=>[v("div",{onClick:t,class:"toBot"},e9)]),_:1},512),[[Y,s.value]])])],64)}}},l9=ia(p9,[["__scopeId","data-v-bd1d4074"]]);const wv=a=>(wa("data-v-fcd47330"),a=a(),ha(),a),b9=U('<section data-v-fcd47330><div class="leftNav" data-v-fcd47330><div class="leftNavContainer" data-v-fcd47330><div class="leftNavLayout" data-v-fcd47330><br data-v-fcd47330><div class="leftNavText" data-v-fcd47330></div><div class="leftNavText" data-v-fcd47330></div><div class="leftNavText" data-v-fcd47330></div><div class="leftNavText" data-v-fcd47330></div></div></div></div><div class="Main" data-v-fcd47330><div class="mainContainer" data-v-fcd47330><div class="mainLayout" data-v-fcd47330><div id="" class="articleCardTitle cor36" data-v-fcd47330>[ CSS ] ≫ 樣式的順序</div><p data-v-fcd47330>有如下代碼，請問HTML代碼中&quot;文本&quot;最終渲染出的顏色分別是？</p><br data-v-fcd47330><div class="bgcVS" data-v-fcd47330><div data-v-fcd47330><span class="then" data-v-fcd47330>＜</span> <span class="number" data-v-fcd47330>div </span><span class="function" data-v-fcd47330>class </span> <span class="then" data-v-fcd47330>=&quot;</span><span class="word" data-v-fcd47330>red</span> <span class="word" data-v-fcd47330>blue</span><span class="word" data-v-fcd47330>&quot;&gt;</span> <span class="word" data-v-fcd47330>文本</span><span class="then" data-v-fcd47330>＜/</span> <span class="number" data-v-fcd47330>div </span><span class="then" data-v-fcd47330>&gt;</span></div><div data-v-fcd47330><span class="then" data-v-fcd47330>＜</span> <span class="number" data-v-fcd47330>div </span><span class="function" data-v-fcd47330>class </span> <span class="then" data-v-fcd47330>=&quot;</span><span class="word" data-v-fcd47330>blue</span> <span class="word" data-v-fcd47330>red</span><span class="word" data-v-fcd47330>&quot;&gt;</span> <span class="word" data-v-fcd47330>文本</span><span class="then" data-v-fcd47330>＜/</span> <span class="number" data-v-fcd47330>div </span><span class="then" data-v-fcd47330>&gt;</span></div><div class="brackets" data-v-fcd47330>.red { color: red; }</div><div class="brackets" data-v-fcd47330>.blue { color: blue; }</div></div><br data-v-fcd47330><br data-v-fcd47330><p data-v-fcd47330>兩個都是藍色。</p><br data-v-fcd47330><p data-v-fcd47330> 為什麼？CSS的層疊規則裡有一條叫做「後來居上原則」，即兩個相同權值的樣式，如存在相同的聲明屬性，則後者獲勝。 本題的CSS樣式裡，.blue 和 .red 權值相同，且都聲明了 color 屬性，但 .blue 在樣式表中位於 .red 後面的位置，所以當HTML中的同一標籤同時引用這兩個類名時，以 .blue 的 color 聲明為準，和HTML中的 className 的先後順序無關。 </p><br data-v-fcd47330><br data-v-fcd47330><p class="cor36" data-v-fcd47330></p><p data-v-fcd47330></p><br data-v-fcd47330><br data-v-fcd47330></div></div></div></section>',1),i9=wv(()=>v("div",{class:"toTopButton"},[v("div",{class:"disCen"},"___"),v("div",{class:"disCen"},"▲")],-1)),r9=[i9],f9=wv(()=>v("div",{class:"toBotButton"},[v("div",{class:"disCen"},"▼"),v("div",{class:"disCen"},"￣")],-1)),o9=[f9],u9={__name:"CssPageTwo",setup(a){const s=ua(!1);window.addEventListener("scroll",function(){s.value=window.scrollY>0});function d(){window.scrollTo({top:0,left:0,behavior:"smooth"})}function t(){window.scrollTo({top:999999,left:0,behavior:"smooth"})}return ua(!0),(c,e)=>(da(),ea(Q,null,[b9,v("div",null,[X(T(W,{name:"fade",tag:"div"},{default:C(()=>[v("div",{onClick:d,class:"toTop"},r9)]),_:1},512),[[Y,s.value]]),X(T(W,{name:"fade",tag:"div"},{default:C(()=>[v("div",{onClick:t,class:"toBot"},o9)]),_:1},512),[[Y,s.value]])])],64))}},m9=ia(u9,[["__scopeId","data-v-fcd47330"]]);const w9={};function h9(a,s){const d=za("RouterLink"),t=za("RouterView");return da(),ea(Q,null,[v("div",null,[v("ul",null,[v("li",null,[T(d,{to:"/js/jsnote"},{default:C(()=>[fa("總結")]),_:1})]),v("li",null,[T(d,{to:"/js/jspractice"},{default:C(()=>[fa("練習題")]),_:1})]),v("li",null,[T(d,{to:"/js"},{default:C(()=>[fa("上課筆記")]),_:1})])])]),T(t)],64)}const k9=ia(w9,[["render",h9],["__scopeId","data-v-bebb9487"]]);const _s=a=>(wa("data-v-53f9cc39"),a=a(),ha(),a),g9={class:"leftNav"},T9={class:"leftNavContainer"},_9={class:"leftNavLayout"},z9=_s(()=>v("br",null,null,-1)),S9={class:"Main"},q9={class:"mainContainer"},y9={class:"mainLayout"},C9=U('<div class="articleCardTitle cor36" data-v-53f9cc39>[ JS ] ≫ 延遲加載JS方式?</div><p data-v-53f9cc39>正常: 解析HTML &gt; 遇到JS &gt; 下載 &gt; 執行 &gt; 繼續解析HTML</p><br data-v-53f9cc39><p class="cor36" data-v-53f9cc39>defer 属性</p><p data-v-53f9cc39>解析HTML &gt; 遇到JS &gt; 下載 &gt; 等到 HTML 解析完 &gt; 再執行JS defer</p><p data-v-53f9cc39>順次執行 &gt; a.js &gt; b.js</p><br data-v-53f9cc39><p class="cor36" data-v-53f9cc39>async 属性</p><p data-v-53f9cc39> 解析HTML &gt; 遇到async &gt; 下載並同時解析 HTML &gt; async加載完 HTML暫停 直接執行JS &gt; 再繼續解析 HTML </p><p data-v-53f9cc39>和HTML解析同步</p><p data-v-53f9cc39>不是順次執行 誰先加載完 誰執行</p><br data-v-53f9cc39><br data-v-53f9cc39><div id="" class="articleCardTitle cor36" data-v-53f9cc39>[ JS ] ≫ ES6 新特性?</div><p data-v-53f9cc39>let . const . map . set . 箭頭函數 . 解構復值 . promise</p><br data-v-53f9cc39><br data-v-53f9cc39><div id="onejs001" class="articleCardTitle cor36" data-v-53f9cc39> [ JS ] ≫ JS數據類型? </div><p data-v-53f9cc39>幾本類型:</p><p class="pFou" data-v-53f9cc39>string number 布林 null undefined symbol bigInt</p><br data-v-53f9cc39><p data-v-53f9cc39>引用類型:</p><p class="pFou" data-v-53f9cc39>object</p><br data-v-53f9cc39><br data-v-53f9cc39><p class="cor36" data-v-53f9cc39># 陣列,函數,日期屬於數據類型嗎?</p><p data-v-53f9cc39>不屬於, 他們屬於構造函數</p><br data-v-53f9cc39><br data-v-53f9cc39><p data-v-53f9cc39>函數屬於哪個? _ object</p><p data-v-53f9cc39>陣列屬於哪個? _ object</p><p data-v-53f9cc39>正則屬於哪個? _ object</p><br data-v-53f9cc39><br data-v-53f9cc39><p class="cor36" data-v-53f9cc39># 為什麼不用大寫STRING?</p><p data-v-53f9cc39> 因為小寫string上面有大寫STRING的方法, 大寫STRING是小寫string的封裝類型 在小寫屬性.方法會自動封裝成大寫STRING, 然後用完之後自動銷毀 </p><br data-v-53f9cc39><br data-v-53f9cc39><p class="cor36" data-v-53f9cc39># 值和地址區別?</p><p data-v-53f9cc39>string nember 布林都是值, 如果存一個object對象到一個變量是地址</p><br data-v-53f9cc39><br data-v-53f9cc39><p class="cor36" data-v-53f9cc39># 哪我存一個函數到一個變量?</p><p data-v-53f9cc39>存到地址</p><br data-v-53f9cc39><br data-v-53f9cc39><p class="cor36" data-v-53f9cc39> # 存一個變量怎麼知道他存在值還是地址,根據他麼什麼的能區分? </p><p data-v-53f9cc39>用typeof看一下, typeof object &amp; function 是地址</p><br data-v-53f9cc39><br data-v-53f9cc39><div id="onejs002" class="articleCardTitle cor36" data-v-53f9cc39> [ JS ] ≫ null undefined區別? </div><p data-v-53f9cc39>1.undefined是聲明之後的默認值, 但null不是</p><p data-v-53f9cc39> 2.undefined一般給基本類型做未賦值, null一般給物件(物件,陣列,函數為空)做未賦值 </p><p data-v-53f9cc39>3.undefined不是關鍵字, null是關鍵字, 所以不能聲明一個變量叫null</p><br data-v-53f9cc39><br data-v-53f9cc39><p class="cor36" data-v-53f9cc39># 如果我聲明一個變量它的值?</p><p data-v-53f9cc39>undefined</p><br data-v-53f9cc39><br data-v-53f9cc39><p class="cor36" data-v-53f9cc39># NaN類型?</p><p data-v-53f9cc39>Number</p><br data-v-53f9cc39><p data-v-53f9cc39>因為 NaN 表示一個不能表示的數字</p><br data-v-53f9cc39><br data-v-53f9cc39><p class="cor36" data-v-53f9cc39># typeof null?</p><p data-v-53f9cc39>object</p><br data-v-53f9cc39><br data-v-53f9cc39><div id="onejs003" class="articleCardTitle cor36" data-v-53f9cc39> [ JS ] ≫ ==和===有什麼不同? </div><p class="cor36" data-v-53f9cc39>寬鬆相等 ==</p><p data-v-53f9cc39> 當等號兩邊的值為相同類型時比較值是否相同，類型不同時會發生類型的自動轉換，轉換為相同的類型後再做比較。 </p><br data-v-53f9cc39><p class="cor36" data-v-53f9cc39>嚴格相等 ===</p><p data-v-53f9cc39> 當等號兩邊的值為相同類型時，直接比較等號兩邊的值，相同返回 true；若等號兩邊值的類型不同時直接返回 false。 </p><br data-v-53f9cc39><br data-v-53f9cc39><p data-v-53f9cc39>1. NaN 和其他任何類型比較永遠返回 false。</p><br data-v-53f9cc39><p data-v-53f9cc39> 2. Boolean 和其他任何類型比較，Boolean 首先被轉換為 Number 類型。 </p><br data-v-53f9cc39><p data-v-53f9cc39>3. String 和 Number 比較，先將 String 轉換為 Number 類型。</p><br data-v-53f9cc39><p data-v-53f9cc39> 4. null == undefined 比較結果是 true，除此之外，null、undefined 和其他任何結果的比較值都為 false。 </p><br data-v-53f9cc39><p data-v-53f9cc39> 5. 原始類型和引用類型做比較時，引用類型會依照 ToPrimitive 規則轉換為原始類型。 </p><br data-v-53f9cc39><p data-v-53f9cc39>6. 兩個都為引用類型，則比較它們是否指向同一個物件。</p><br data-v-53f9cc39><br data-v-53f9cc39><p data-v-53f9cc39>1 == &quot;1&quot; . . . // true</p><br data-v-53f9cc39><p data-v-53f9cc39>1 === &quot;1&quot; . . . // false</p><br data-v-53f9cc39><p data-v-53f9cc39>NaN == NaN . . . // false</p><br data-v-53f9cc39><p data-v-53f9cc39>true == 1 . . . // true</p><br data-v-53f9cc39><p data-v-53f9cc39>true == &#39;2&#39; . . . // false, 先把 true 變 1，再參考規則 3</p><br data-v-53f9cc39><p data-v-53f9cc39> true == [&#39;1&#39;] . . . // true, 先把 true 變 1， [&#39;1&#39;]拆箱成 &#39;1&#39;, 再參考規則 3 </p><br data-v-53f9cc39><p data-v-53f9cc39>true == [&#39;2&#39;] . . . // false, 同上</p><br data-v-53f9cc39><p data-v-53f9cc39> undefined == false . . . // false ，首先 false 變 0，然後參考規則 4 </p><br data-v-53f9cc39><p data-v-53f9cc39>null == false . . . // false，同上</p><br data-v-53f9cc39><p data-v-53f9cc39>null == undefined . . . //true</p><br data-v-53f9cc39><p data-v-53f9cc39>[1,2] == &quot;1,2&quot; . . . //true</p><br data-v-53f9cc39><p data-v-53f9cc39>123 == &#39;123&#39; . . . // true, &#39;123&#39; 先變 123</p><br data-v-53f9cc39><p data-v-53f9cc39>&quot;&quot; == 0 . . . // true, &quot;&quot; 先變 0</p><br data-v-53f9cc39><p data-v-53f9cc39>+0 == -0 . . . // true</p><br data-v-53f9cc39><p data-v-53f9cc39>null == undefined . . . // true</p><br data-v-53f9cc39><p data-v-53f9cc39>null == &quot;&quot; . . . // false</p><br data-v-53f9cc39><p data-v-53f9cc39>null == 0 . . . // false</p><br data-v-53f9cc39><p data-v-53f9cc39>null == false . . . // false</p><br data-v-53f9cc39><p data-v-53f9cc39>undefined == &quot;&quot; . . . // false</p><br data-v-53f9cc39><p data-v-53f9cc39>undefined == 0 . . . // false</p><br data-v-53f9cc39><p data-v-53f9cc39>undefined == false . . . // false</p><br data-v-53f9cc39><br data-v-53f9cc39><div id="onejs004" class="articleCardTitle cor36" data-v-53f9cc39> [ JS ] ≫ 0.1+0.2為什麼不等於0.3? </div><p data-v-53f9cc39>浮點數運算可能導致精度丟失，因為計算時使用的是二進制表示</p><br data-v-53f9cc39><p data-v-53f9cc39> 浮點數的精度問題, 0.1在內存裡不一定等於0.1, 0.2在內存裡不一定等於0.2, 結果約等於0.3 </p><br data-v-53f9cc39><br data-v-53f9cc39><p class="cor36" data-v-53f9cc39>怎麼對比兩個小數大小是否相等?</p><p data-v-53f9cc39> 假如a是一個小數, b是一個小數, a去減b的絕對值, 如果減出來的值小於 0.0001 就說明a和b幾乎相等 </p><br data-v-53f9cc39><br data-v-53f9cc39><div id="onejs005" class="articleCardTitle cor36" data-v-53f9cc39> [ JS ] ≫ let var const區別? </div><p data-v-53f9cc39>var是ES5 let是ES6</p><p data-v-53f9cc39>var是函數作用域 let支持塊級作用域</p><p data-v-53f9cc39>var有變量提升 let沒有變量提升</p><p data-v-53f9cc39>var可以重複聲明, let不能重複</p><p data-v-53f9cc39>let和const的區別在於let可以重新賦值, const不行, 其他幾乎一樣</p><br data-v-53f9cc39><br data-v-53f9cc39><p class="cor36" data-v-53f9cc39>聲明1個var變數之後還能在聲明同名var變數嗎?</p><p data-v-53f9cc39>可以 不會報錯</p><br data-v-53f9cc39><br data-v-53f9cc39><p class="cor36" data-v-53f9cc39>聲明1個let變數之後還能在聲明同名let變數嗎?</p><p data-v-53f9cc39>不行 會報錯</p><br data-v-53f9cc39><br data-v-53f9cc39><p class="cor36" data-v-53f9cc39>聲明1個const變數之後還能在聲明同名const變數嗎?</p><p data-v-53f9cc39>不行 會報錯</p><br data-v-53f9cc39><br data-v-53f9cc39><div id="onejs006" class="articleCardTitle cor36" data-v-53f9cc39> [ JS ] ≫ 展開運算符 </div><p data-v-53f9cc39> 展開運算符 是把一個陣列展開成個別值，這個運算符後面必定接著一個陣列。 </p><p data-v-53f9cc39>最常見的是用來組合陣列，對應的陣列方法是concat</p><br data-v-53f9cc39><p data-v-53f9cc39> : 比如const a 等於, 然後一個陣列, 然後a點點點b, 這個b是一個舊陣列, 然後它會把a和b合成形成新陣列, 然後返回給變量 </p><br data-v-53f9cc39><div class="bgcVS" data-v-53f9cc39><br data-v-53f9cc39><div data-v-53f9cc39><span class="function" data-v-53f9cc39>const </span> <span class="word" data-v-53f9cc39>a</span><span class="then" data-v-53f9cc39>=</span> <span class="brackets" data-v-53f9cc39>[</span><span class="number" data-v-53f9cc39>1, 2, 3</span><span class="brackets" data-v-53f9cc39>]</span></div><div data-v-53f9cc39><span class="function" data-v-53f9cc39>const </span> <span class="word" data-v-53f9cc39>b</span><span class="then" data-v-53f9cc39>=</span> <span class="brackets" data-v-53f9cc39>[</span><span class="number" data-v-53f9cc39>4, 5, 6 </span><span class="brackets" data-v-53f9cc39>]</span></div><br data-v-53f9cc39><div class="comment" data-v-53f9cc39>用於拼接陣列</div><div data-v-53f9cc39><span class="function" data-v-53f9cc39>const </span> <span class="word" data-v-53f9cc39>c</span><span class="then" data-v-53f9cc39>=</span> <span class="brackets" data-v-53f9cc39>[</span><span class="word" data-v-53f9cc39>...a,...b</span><span class="brackets" data-v-53f9cc39>] </span><span class="comment" data-v-53f9cc39>// [1,2,3,4,5,6]</span></div><br data-v-53f9cc39><div class="comment" data-v-53f9cc39>也可以</div><div data-v-53f9cc39><span class="function" data-v-53f9cc39>const </span> <span class="word" data-v-53f9cc39>d</span><span class="then" data-v-53f9cc39>=</span> <span class="brackets" data-v-53f9cc39>[</span><span class="word" data-v-53f9cc39>...a,</span><span class="number" data-v-53f9cc39>4, 5, 6</span><span class="brackets" data-v-53f9cc39>] </span><span class="comment" data-v-53f9cc39>// [1,2,3,4,5,6]</span></div><br data-v-53f9cc39><div class="comment" data-v-53f9cc39>也可以</div><div data-v-53f9cc39><span class="word" data-v-53f9cc39>a.push</span> <span class="brackets" data-v-53f9cc39>(</span><span class="word" data-v-53f9cc39>...b</span> <span class="brackets" data-v-53f9cc39>)</span></div><div data-v-53f9cc39><span class="word" data-v-53f9cc39>console</span><span class="variable" data-v-53f9cc39>.log</span><span class="brackets" data-v-53f9cc39>(</span> <span class="word" data-v-53f9cc39>a</span><span class="brackets" data-v-53f9cc39>)</span></div><br data-v-53f9cc39><div class="comment" data-v-53f9cc39>可以做陣列淺拷貝</div><div data-v-53f9cc39><span class="function" data-v-53f9cc39>const </span> <span class="word" data-v-53f9cc39>e</span><span class="then" data-v-53f9cc39>=</span> <span class="brackets" data-v-53f9cc39>[</span><span class="word" data-v-53f9cc39>...a</span> <span class="brackets" data-v-53f9cc39>]</span></div><div data-v-53f9cc39><span class="word" data-v-53f9cc39>e.push</span> <span class="brackets" data-v-53f9cc39>(</span><span class="number" data-v-53f9cc39>4</span> <span class="brackets" data-v-53f9cc39>)</span><span class="comment" data-v-53f9cc39>// 不會影響 a</span></div><br data-v-53f9cc39><div class="comment" data-v-53f9cc39> 淺拷貝是指複製值時，原本的變數和新的變數會指向同一個址 (reference) </div><div class="comment" data-v-53f9cc39> 深拷貝是指在拷貝時不共享相同的址 (reference) </div><br data-v-53f9cc39></div><br data-v-53f9cc39><br data-v-53f9cc39><p data-v-53f9cc39>a={...b} 可以嗎?</p><br data-v-53f9cc39><div class="bgcVS" data-v-53f9cc39><br data-v-53f9cc39><div data-v-53f9cc39><span class="function" data-v-53f9cc39>const </span><span class="word" data-v-53f9cc39>obj1</span> <span class="then" data-v-53f9cc39>=</span><span class="brackets" data-v-53f9cc39>{</span> <span class="word" data-v-53f9cc39>a:</span><span class="number" data-v-53f9cc39>1,</span> <span class="word" data-v-53f9cc39>b:</span><span class="number" data-v-53f9cc39>2</span> <span class="brackets" data-v-53f9cc39>};</span></div><div data-v-53f9cc39><span class="function" data-v-53f9cc39>const </span><span class="word" data-v-53f9cc39>obj2</span> <span class="then" data-v-53f9cc39>=</span><span class="brackets" data-v-53f9cc39>{</span> <span class="word" data-v-53f9cc39>c:</span><span class="number" data-v-53f9cc39>3,</span> <span class="word" data-v-53f9cc39>d:</span><span class="number" data-v-53f9cc39>4</span> <span class="brackets" data-v-53f9cc39>};</span></div><br data-v-53f9cc39><span class="comment" data-v-53f9cc39>// 可以 拷貝 物件</span><div data-v-53f9cc39><span class="function" data-v-53f9cc39>const </span><span class="word" data-v-53f9cc39>newObj</span> <span class="then" data-v-53f9cc39>=</span><span class="brackets" data-v-53f9cc39>{</span> <span class="word" data-v-53f9cc39>...obj1</span><span class="brackets" data-v-53f9cc39>}</span><span class="word" data-v-53f9cc39></span></div><br data-v-53f9cc39><span class="comment" data-v-53f9cc39>// 可以 merged 2 個物件</span><div data-v-53f9cc39><span class="function" data-v-53f9cc39>const </span><span class="word" data-v-53f9cc39>merged</span> <span class="then" data-v-53f9cc39>=</span><span class="brackets" data-v-53f9cc39>{</span><span class="word" data-v-53f9cc39>...obj1,obj2</span><span class="brackets" data-v-53f9cc39>};</span></div><div data-v-53f9cc39><span class="word" data-v-53f9cc39>console.</span><span class="variable" data-v-53f9cc39>log</span> <span class="brackets" data-v-53f9cc39>(</span><span class="word" data-v-53f9cc39>merged</span><span class="brackets" data-v-53f9cc39>); </span><span class="comment" data-v-53f9cc39>// {a: 1, b: 2, c: 3, d: 4 }</span></div><br data-v-53f9cc39></div><br data-v-53f9cc39><br data-v-53f9cc39><p class="cor36" data-v-53f9cc39>這三個點除了把一個東西展開,它在函數參數有什麼用?</p><p data-v-53f9cc39>可以不去命名那個函數的參數, 直接用函數參數對象裡面的某一個東西</p><br data-v-53f9cc39><p class="cor36" data-v-53f9cc39>參數裡面可不可以用三個點?</p><p data-v-53f9cc39>可以</p><br data-v-53f9cc39><p class="cor36" data-v-53f9cc39>在賦值可以用三個點嗎?</p><p data-v-53f9cc39>可以</p><br data-v-53f9cc39><p class="cor36" data-v-53f9cc39> 我有一個陣列長度為10,我想把前面第一個元素命名為a,後面9個元素命名為新的數組叫b怎麼做? </p><p data-v-53f9cc39> 方括號a然後點,然後逗號,然後點點點rest,然後方括號,然後等於array1,那就是a,那個a就是array裡的第一個 </p><br data-v-53f9cc39><br data-v-53f9cc39>',191),x9={class:"bgcVS"},L9=U('<br data-v-53f9cc39><div class="comment" data-v-53f9cc39>// 用於函數傳參</div><br data-v-53f9cc39><div class="comment" data-v-53f9cc39>// 實參的用法</div><div data-v-53f9cc39><span class="function" data-v-53f9cc39>const </span> <span class="word" data-v-53f9cc39>a</span><span class="then" data-v-53f9cc39>=</span> <span class="brackets" data-v-53f9cc39>[</span><span class="number" data-v-53f9cc39>1, 2, 3</span><span class="brackets" data-v-53f9cc39>]</span></div>',5),j9=_s(()=>v("span",{class:"function"},"function ",-1)),P9=_s(()=>v("span",{class:"word"},"test",-1)),N9=_s(()=>v("span",{class:"brackets"},"(",-1)),V9=_s(()=>v("span",{class:"word"},"p1,p2,p3",-1)),$9=_s(()=>v("span",{class:"brackets"},"){",-1)),O9=U('<div class="pTwo" data-v-53f9cc39><span class="word" data-v-53f9cc39>console.</span><span class="variable" data-v-53f9cc39>log</span> <span class="brackets" data-v-53f9cc39>(</span><span class="word" data-v-53f9cc39>p1</span> <span class="brackets" data-v-53f9cc39>);</span></div><div class="pTwo" data-v-53f9cc39><span class="word" data-v-53f9cc39>console.</span><span class="variable" data-v-53f9cc39>log</span> <span class="brackets" data-v-53f9cc39>(</span><span class="word" data-v-53f9cc39>p2</span> <span class="brackets" data-v-53f9cc39>);</span></div><div class="pTwo" data-v-53f9cc39><span class="word" data-v-53f9cc39>console.</span><span class="variable" data-v-53f9cc39>log</span> <span class="brackets" data-v-53f9cc39>(</span><span class="word" data-v-53f9cc39>p3</span> <span class="brackets" data-v-53f9cc39>);</span></div><div class="brackets" data-v-53f9cc39>}</div><div data-v-53f9cc39><span class="word" data-v-53f9cc39>test</span><span class="brackets" data-v-53f9cc39>(</span><span class="word" data-v-53f9cc39>...a</span> <span class="brackets" data-v-53f9cc39>)</span></div><br data-v-53f9cc39><div data-v-53f9cc39><span class="function" data-v-53f9cc39>function </span><span class="word" data-v-53f9cc39>sum</span> <span class="brackets" data-v-53f9cc39>(</span><span class="word" data-v-53f9cc39>a,b,c</span> <span class="brackets" data-v-53f9cc39>){</span></div><div class="pTwo" data-v-53f9cc39><span class="then" data-v-53f9cc39>return </span> <span class="word" data-v-53f9cc39>a+b+c</span></div><span class="brackets" data-v-53f9cc39>}</span><div data-v-53f9cc39><span class="function" data-v-53f9cc39>const </span><span class="word" data-v-53f9cc39>sum</span> <span class="then" data-v-53f9cc39>=</span><span class="brackets" data-v-53f9cc39>(</span> <span class="word" data-v-53f9cc39>a,b,c</span><span class="brackets" data-v-53f9cc39>)</span> <span class="function" data-v-53f9cc39>=&gt;</span><span class="word" data-v-53f9cc39>a+b+c</span></div><div data-v-53f9cc39><span class="word" data-v-53f9cc39>sum</span> <span class="brackets" data-v-53f9cc39>(</span><span class="word" data-v-53f9cc39>...a</span> <span class="brackets" data-v-53f9cc39>) </span><span class="comment" data-v-53f9cc39>// 6</span></div><br data-v-53f9cc39><div data-v-53f9cc39><span class="function" data-v-53f9cc39>const </span><span class="word" data-v-53f9cc39>sum</span> <span class="then" data-v-53f9cc39>=</span><span class="word" data-v-53f9cc39>sum</span> <span class="brackets" data-v-53f9cc39>(</span><span class="word" data-v-53f9cc39>...a</span><span class="brackets" data-v-53f9cc39>)</span></div><br data-v-53f9cc39><div class="comment" data-v-53f9cc39>// 形參的用法</div><div class="comment" data-v-53f9cc39>// 形參的用法</div><div data-v-53f9cc39><span class="word" data-v-53f9cc39>conso.</span><span class="variable" data-v-53f9cc39>log</span> <span class="brackets" data-v-53f9cc39>(</span><span class="word" data-v-53f9cc39>Math.max</span><span class="brackets" data-v-53f9cc39>(</span><span class="src" data-v-53f9cc39>必須是字符的形式,不能直接接陣列,必須逗號隔開 </span><span class="brackets" data-v-53f9cc39>)</span> <span class="brackets" data-v-53f9cc39>)</span></div><div data-v-53f9cc39><span class="word" data-v-53f9cc39>conso.</span><span class="variable" data-v-53f9cc39>log</span> <span class="brackets" data-v-53f9cc39>(</span><span class="word" data-v-53f9cc39>Math.max</span><span class="brackets" data-v-53f9cc39>(</span> <span class="number" data-v-53f9cc39>1,2,3</span><span class="brackets" data-v-53f9cc39>)</span> <span class="brackets" data-v-53f9cc39>)</span><span class="comment" data-v-53f9cc39>// 裡面要逗號</span></div><div class="comment" data-v-53f9cc39>// 陣列沒有 求最大值 的方法</div><div data-v-53f9cc39><span class="function" data-v-53f9cc39>const </span> <span class="word" data-v-53f9cc39>a</span><span class="then" data-v-53f9cc39>=</span> <span class="brackets" data-v-53f9cc39>[</span><span class="number" data-v-53f9cc39>1, 2, 3</span><span class="brackets" data-v-53f9cc39>]</span></div><div data-v-53f9cc39><span class="function" data-v-53f9cc39>const </span> <span class="word" data-v-53f9cc39>b</span><span class="then" data-v-53f9cc39>=</span> <span class="brackets" data-v-53f9cc39>[</span><span class="number" data-v-53f9cc39>4, 5, 6</span><span class="brackets" data-v-53f9cc39>]</span></div><div data-v-53f9cc39><span class="word" data-v-53f9cc39>console.</span><span class="variable" data-v-53f9cc39>log</span> <span class="brackets" data-v-53f9cc39>(</span><span class="word" data-v-53f9cc39>...a</span><span class="brackets" data-v-53f9cc39>)</span><span class="comment" data-v-53f9cc39>// 1 2 3</span><span class="comment" data-v-53f9cc39>// 打印沒逗號,一樣能用在.max</span></div><span class="comment" data-v-53f9cc39>...a === 1,2,3</span><div data-v-53f9cc39><span class="word" data-v-53f9cc39>console.</span><span class="variable" data-v-53f9cc39>log</span> <span class="word" data-v-53f9cc39>Math</span><span class="variable" data-v-53f9cc39>.max</span> <span class="brackets" data-v-53f9cc39>(</span><span class="word" data-v-53f9cc39>...a</span><span class="brackets" data-v-53f9cc39>)</span> <span class="comment" data-v-53f9cc39>// 3</span></div><div data-v-53f9cc39><span class="word" data-v-53f9cc39>console.</span><span class="variable" data-v-53f9cc39>log</span> <span class="word" data-v-53f9cc39>Math</span><span class="variable" data-v-53f9cc39>.min</span> <span class="brackets" data-v-53f9cc39>(</span><span class="word" data-v-53f9cc39>...a</span><span class="brackets" data-v-53f9cc39>)</span> <span class="comment" data-v-53f9cc39>// 3</span></div><div data-v-53f9cc39><span class="word" data-v-53f9cc39>console.</span><span class="variable" data-v-53f9cc39>log</span> <span class="word" data-v-53f9cc39>Math</span><span class="variable" data-v-53f9cc39>.max</span> <span class="brackets" data-v-53f9cc39>(</span><span class="word" data-v-53f9cc39>...a,...b</span><span class="brackets" data-v-53f9cc39>)</span> <span class="comment" data-v-53f9cc39>// 6</span></div><br data-v-53f9cc39><div class="comment" data-v-53f9cc39>// 形參 &amp; 實參</div><div data-v-53f9cc39><span class="function" data-v-53f9cc39>function </span><span class="word" data-v-53f9cc39>test</span> <span class="brackets" data-v-53f9cc39>(</span><span class="word" data-v-53f9cc39>形參1,形參2</span><span class="brackets" data-v-53f9cc39>){ </span><span class="comment" data-v-53f9cc39>// 函數聲明的小括號裡是 形參 </span></div><div class="comment pTwo" data-v-53f9cc39>// 代碼</div><div class="brackets" data-v-53f9cc39>}</div><div data-v-53f9cc39><span class="word" data-v-53f9cc39>test</span> <span class="brackets" data-v-53f9cc39>(</span><span class="word" data-v-53f9cc39>實參1,實參2</span><span class="brackets" data-v-53f9cc39>) </span><span class="comment" data-v-53f9cc39>// 函數調用的小括號裡是 實參</span></div><br data-v-53f9cc39>',33),E9=U('<div id="" class="articleCardTitle cor36" data-v-53f9cc39>[ JS ] ≫ 操作陣列?</div><p data-v-53f9cc39>push pop unshift shift reduce find include</p><div id="onejs007" class="articleCardTitle cor36" data-v-53f9cc39> [ JS ] ≫ 遍歷數組有幾種方式? </div><p data-v-53f9cc39>for . forEach</p><br data-v-53f9cc39><p data-v-53f9cc39> map: 返回一個新數組 , 數組中的元素為 原始數組元素 調用函數 處理後的值 </p><br data-v-53f9cc39><p data-v-53f9cc39> filter: 創建一個新數組 , 數組中的元素 是通過檢查指定數組中 符合條件的 所有元素 </p><br data-v-53f9cc39><p data-v-53f9cc39>every: 每一個元素都滿足條件 返回 true , 否則 返回 false</p><br data-v-53f9cc39><p data-v-53f9cc39> some: 只要有一個以上的元素滿足條件 就 返回 true , 否則 返回 false , 退出循環 </p><br data-v-53f9cc39><p data-v-53f9cc39>reduce: 對數組中的 每個元素 執行一個 回掉函數 , 將其結果返回值</p><br data-v-53f9cc39><br data-v-53f9cc39><p class="cor36" data-v-53f9cc39># forEach和map的區別?</p><p data-v-53f9cc39> map需要有個返回值把它再返回到陣列, 它會接收到那個值, 修改當前元素 </p><br data-v-53f9cc39><br data-v-53f9cc39><p class="cor36" data-v-53f9cc39># for in,for of,他們用在什麼場景?</p><p data-v-53f9cc39>for of 循環獲取到的是一對鍵值對中的值 , 也就是 value</p><br data-v-53f9cc39><p data-v-53f9cc39>而 for in 獲取的是鍵名 , 也就是 key</p><br data-v-53f9cc39><br data-v-53f9cc39><p data-v-53f9cc39>對數組 for of 返回的是 數組裡面的 元素值</p><br data-v-53f9cc39><p data-v-53f9cc39>for in 返回 key , 指每個元素的 索引值</p><br data-v-53f9cc39><p data-v-53f9cc39> for of 只能遍歷其底層帶有 iterator 接口的 數據結構 像 set map string array </p><br data-v-53f9cc39><p data-v-53f9cc39>物件沒有原生 iterator 接口 , 直接用 for of 會報錯</p><br data-v-53f9cc39><p data-v-53f9cc39>開發中 遍歷用 for in 更合適</p><br data-v-53f9cc39><br data-v-53f9cc39><p data-v-53f9cc39>for in 返回 數組元素的 索引值 , 而不是 元素</p><br data-v-53f9cc39><p data-v-53f9cc39>而且 遍歷順序 有可能不是按照 實際數據的 內部順序</p><br data-v-53f9cc39><p data-v-53f9cc39>所以 通常遍歷數組用 for of</p><br data-v-53f9cc39><br data-v-53f9cc39><p data-v-53f9cc39>總之 for in 適合遍歷 物件</p><p data-v-53f9cc39>for of 適合遍歷 數組</p><br data-v-53f9cc39><br data-v-53f9cc39><p class="cor36" data-v-53f9cc39># for循環遍歷跟forEach遍歷,for循環可以中斷嗎?</p><p data-v-53f9cc39>for 可以中斷 , forEach 不能中斷</p><br data-v-53f9cc39><br data-v-53f9cc39><div id="onejs008" class="articleCardTitle cor36" data-v-53f9cc39>[ JS ] ≫ 閉包?</div><p class="comment" data-v-53f9cc39>什麼是閉包 , 概念 , 用途 , 優 缺點</p><br data-v-53f9cc39><p data-v-53f9cc39>閉包 就是 有權訪問 另一個 函數作用域的變量 的函數</p><br data-v-53f9cc39><p data-v-53f9cc39>優點是 私有化數據 在 私有化數據的基礎上 保持數據</p><br data-v-53f9cc39><p data-v-53f9cc39>私有化數據是 把一些變量 私有化到函數裡面</p><br data-v-53f9cc39><p data-v-53f9cc39>為了保持數據</p><br data-v-53f9cc39><p data-v-53f9cc39> 例如 節流防斗 -&gt; 當第一次點擊時 , 我們 let time = 接收他的定時器 </p><br data-v-53f9cc39><p data-v-53f9cc39> 如果不用閉包暫存他 , 下次點擊 他是重新創建函數 , 也就重創一個定時器 </p><br data-v-53f9cc39><p data-v-53f9cc39>他們 2 個不是互通的 , 沒有引用做連通</p><br data-v-53f9cc39><p data-v-53f9cc39>也就是 使用閉包 他不會在 內存中消失</p><br data-v-53f9cc39><p data-v-53f9cc39>所以我們在下次 調用時 能獲取到 上一次定時器的 時間</p><br data-v-53f9cc39><br data-v-53f9cc39><p data-v-53f9cc39>缺點 可能導致內存洩漏</p><br data-v-53f9cc39><br data-v-53f9cc39><p data-v-53f9cc39># 閉包一定會造成內存洩漏嗎?</p><p data-v-53f9cc39>不一定 , 看瀏覽器垃圾回收機制</p><br data-v-53f9cc39><p data-v-53f9cc39> 閉包造成內存洩漏是瀏覽器問題, 它沒有及時的清裡內存, 所以是閉包容易造成內存洩漏, 因為實現閉包的拉圾回收比普通變量難一點, 歷史上發生的有IE6IE7, 但現在已經沒有了 </p><br data-v-53f9cc39><br data-v-53f9cc39><p data-v-53f9cc39>閉包的目的? 用來封裝一個數據,提供一些API給外部使用</p><br data-v-53f9cc39><p data-v-53f9cc39>物件的目的? 內部包含一些數據,提供一些方法給外部使用</p><br data-v-53f9cc39><p data-v-53f9cc39> 閉包和物件的區別?(閉包是在你不想用物件時來代替物件) 物件的拆卸數據可以透過屬性暴露出來, 閉包想要暴露那些數據你得單獨給他寫個函數 </p><br data-v-53f9cc39><br data-v-53f9cc39><div id="onejs009" class="articleCardTitle cor36" data-v-53f9cc39> [ JS ] ≫ JS 的立即執行函數是幹嘛用的?? </div><p data-v-53f9cc39>避免汙染全局環境</p><br data-v-53f9cc39><p class="cor36" data-v-53f9cc39># IIFE立即執行函數它的語法?</p><p data-v-53f9cc39>一個匿名函數, 外面包一層括號, 後面再加一個小括號</p><br data-v-53f9cc39><p class="cor36" data-v-53f9cc39># 為什麼要包一層括號,後面再加一個小括號?</p><p data-v-53f9cc39> 把函數看成一個整體, 首先你匿名函數可以以傳參的形式存在, 也可以以一些其他形式存在, 但是你不行就直接寫在一段JS的外部, 這樣他語法就通過不了, 因為它不是一個整體, 你function後面直接跟一個括號, 他不知道是甚麼東西 </p><br data-v-53f9cc39><div id="onejs010" class="articleCardTitle cor36" data-v-53f9cc39> [ JS ] ≫ this 指向 </div><table data-v-53f9cc39><tr data-v-53f9cc39><th data-v-53f9cc39><div class="pad20" data-v-53f9cc39>調用方式</div></th><th data-v-53f9cc39><div class="pad20" data-v-53f9cc39>示例</div></th><th data-v-53f9cc39><div class="pad20" data-v-53f9cc39>函數中this指向</div></th></tr><tr data-v-53f9cc39><td data-v-53f9cc39><div class="pad20" data-v-53f9cc39>通過new調用</div></td><td data-v-53f9cc39><div class="pad20" data-v-53f9cc39>mew method()</div></td><td data-v-53f9cc39><div class="pad20" data-v-53f9cc39>新物件</div></td></tr><tr data-v-53f9cc39><td data-v-53f9cc39><div class="pad20" data-v-53f9cc39>直接調用</div></td><td data-v-53f9cc39><div class="pad20" data-v-53f9cc39>method()</div></td><td data-v-53f9cc39><div class="pad20" data-v-53f9cc39>全局對象window</div></td></tr><tr data-v-53f9cc39><td data-v-53f9cc39><div class="pad20" data-v-53f9cc39>通過物件調用</div></td><td data-v-53f9cc39><div class="pad20" data-v-53f9cc39>obj.method()</div></td><td data-v-53f9cc39><div class="pad20" data-v-53f9cc39>前面的物件</div></td></tr><tr data-v-53f9cc39><td data-v-53f9cc39><div class="pad20" data-v-53f9cc39>call.apply.bind</div></td><td data-v-53f9cc39><div class="pad20" data-v-53f9cc39>method.call(ctx)</div></td><td data-v-53f9cc39><div class="pad20" data-v-53f9cc39>第一個參數</div></td></tr></table><div id="onejs011" class="articleCardTitle cor36" data-v-53f9cc39> [ JS ] ≫ 箭頭函數和普通function有甚麼區別? </div><p data-v-53f9cc39>在執行過程中不會初始化 this</p><br data-v-53f9cc39><p data-v-53f9cc39>不會初始化 aruguments</p><br data-v-53f9cc39><p data-v-53f9cc39>不能被 new</p><br data-v-53f9cc39><p data-v-53f9cc39>沒有 prototype</p><br data-v-53f9cc39><p data-v-53f9cc39>不能當成構造函數執行</p><br data-v-53f9cc39><p class="cor36" data-v-53f9cc39># 箭頭函數什麼情況可以省略return?</p><p data-v-53f9cc39>不加括弧號的時候, 只有一個語句(一句代碼,可以有多個分號)</p><br data-v-53f9cc39><p class="cor36" data-v-53f9cc39># 箭頭函數的this指向哪裡?</p><p data-v-53f9cc39>外部的this or (捕獲其上下文中的this)</p><br data-v-53f9cc39><p data-v-53f9cc39>箭頭函數不創建 this , 他從自己的作用域鏈的上一層沿用 this</p><div id="onejs012" class="articleCardTitle cor36" data-v-53f9cc39> [ JS ] ≫ 原型鏈是什麼? </div><p class="cor36" data-v-53f9cc39>物件,原型,物件的構造函數間的關係?</p><br data-v-53f9cc39><p data-v-53f9cc39>首先任何物件都會有屬於它的隱藏屬性下滑線proto屬性__proto__</p><br data-v-53f9cc39><p data-v-53f9cc39>這個隱藏屬性就會指向它的構造函數的prototype</p><br data-v-53f9cc39><p data-v-53f9cc39>這時我們就可以說這個物件的原型就是它的構造函數的prototype</p><br data-v-53f9cc39><p data-v-53f9cc39>這就是原型</p><br data-v-53f9cc39><p data-v-53f9cc39> 然後原型鏈就是比如A的原型是B, B的原型是C, 這樣一條像鏈式的就稱為原型鏈 </p><br data-v-53f9cc39><br data-v-53f9cc39><p data-v-53f9cc39> : 定義一個物件A,它的原型的地址對應著object.prototype,object.prototype它的原型又會到了null 這樣一條像鏈式的就稱為原型鏈 </p><br data-v-53f9cc39><br data-v-53f9cc39><p data-v-53f9cc39>A指向一個物件,意味著A存的是什麼東西?(注意JS沒有指向) A它的地址</p><br data-v-53f9cc39><br data-v-53f9cc39><div id="onejs013" class="articleCardTitle cor36" data-v-53f9cc39> [ JS ] ≫ new 做了什麼? </div><br data-v-53f9cc39><p data-v-53f9cc39>new後面跟一個構造函數</p><br data-v-53f9cc39><p data-v-53f9cc39>先創造一個臨時物件</p><br data-v-53f9cc39><p data-v-53f9cc39>將這個 臨時物件 原型 綁定構造函數的 prototype</p><br data-v-53f9cc39><p data-v-53f9cc39>再把裡面的 this 指定為這個 臨時物件</p><br data-v-53f9cc39><p data-v-53f9cc39>再執行構造函數</p><br data-v-53f9cc39><p data-v-53f9cc39>最後return這個臨時物件</p><br data-v-53f9cc39><p class="cor36" data-v-53f9cc39># 當我 new 構造函數</p><p data-v-53f9cc39>1. 創建 新物件 (空的)</p><p data-v-53f9cc39>2. 構造函數的 this 指向 新物件</p><p data-v-53f9cc39>3. 執行 構造函數 代碼</p><p class="pFou" data-v-53f9cc39>this. 指向物件 . . . obj.name=&quot;wayne&quot;</p><p class="pFou" data-v-53f9cc39>name屬性 =賦值 &quot;wayne&quot;</p><p data-v-53f9cc39>4. 返回 這個 新物件</p><br data-v-53f9cc39><br data-v-53f9cc39><p class="cor36" data-v-53f9cc39> # 如果我再new後面構造函數後面最後一行加一個return一個數組會怎樣? </p><p data-v-53f9cc39>它就會代替這個 this</p><br data-v-53f9cc39><p class="cor36" data-v-53f9cc39> # 如果我再new後面構造函數後面最後一行加一個return一個物件會怎樣? </p><p data-v-53f9cc39>它就會代替這個 this</p><br data-v-53f9cc39><p class="cor36" data-v-53f9cc39># 原型綁定是綁到這個this的哪個屬性上面?</p><p data-v-53f9cc39>__proto__</p><br data-v-53f9cc39><p data-v-53f9cc39>new後面跟一個構造函數,這個函數可以是箭頭函數嗎? _ 不可以</p><br data-v-53f9cc39><p class="cor36" data-v-53f9cc39># 你new出來的對象原型是什麼?</p><p data-v-53f9cc39>new 出來的 物件的 原型 指向 構造函數的 原型</p><br data-v-53f9cc39><br data-v-53f9cc39><div id="onejs014" class="articleCardTitle cor36" data-v-53f9cc39>[ JS ] ≫ 繼承?</div><p class="cor36" data-v-53f9cc39>1. 原型鏈繼承</p><p data-v-53f9cc39>每個 構造函數 都有一個 原型對象 (prototype),</p><br data-v-53f9cc39><p data-v-53f9cc39>每個 實例對象 包含一個 指向 原型對象的 指針 (__proto__)</p><br data-v-53f9cc39><p data-v-53f9cc39>當代碼 讀取實例的 某屬性時 ,</p><br data-v-53f9cc39><p data-v-53f9cc39>都會先在 實例上 搜尋這個屬性, 沒找到 則搜索原型對象</p><br data-v-53f9cc39><p class="cor36" data-v-53f9cc39>缺點</p><p data-v-53f9cc39> 包含引用類型值的 原型屬性 會被所有實例共享。 ( 當一個實例改變該屬性 , 其他也會改 ) </p><br data-v-53f9cc39><p class="cor36" data-v-53f9cc39>2. 構造函數繼承</p><p data-v-53f9cc39>通過使用 call apply 方法 ,</p><br data-v-53f9cc39><p data-v-53f9cc39>可以在子類中 執行父類 構造函數 , 從而實現繼承</p><br data-v-53f9cc39><p class="cor36" data-v-53f9cc39>優點</p><p data-v-53f9cc39>原型屬性 不會 被共享</p><p class="cor36" data-v-53f9cc39>缺點</p><p data-v-53f9cc39>不能繼承 父類 prototype 上的屬性</p><br data-v-53f9cc39><p class="cor36" data-v-53f9cc39>3. 構造函數繼承 + 構造函數繼承</p><p data-v-53f9cc39>child.prototype = new Parent()</p><p class="cor36" data-v-53f9cc39>優點</p><p data-v-53f9cc39>1. 原型屬性不會被共享</p><p data-v-53f9cc39>2. 可以繼承父類的 原型鏈上的 屬性和方法</p><br data-v-53f9cc39><p class="cor36" data-v-53f9cc39>點</p><p data-v-53f9cc39>調用了 2 次 Parent()</p><p data-v-53f9cc39>他在 child 的 prototype 上添加了父類的 屬性和方法</p><br data-v-53f9cc39><br data-v-53f9cc39><div id="onejs015" class="articleCardTitle cor36" data-v-53f9cc39> [ JS ] ≫ call apply bind </div><p class="cor36" data-v-53f9cc39>call和apply有什麼區別?</p><p data-v-53f9cc39>call指定一個this, 傳參數, 直接調用他,</p><br data-v-53f9cc39><p data-v-53f9cc39>apply指定this, 傳的參數是放在陣列裡面的, 也是直接調用</p><br data-v-53f9cc39><br data-v-53f9cc39><p class="cor36" data-v-53f9cc39>什麼情況下只能用apply不能用call?</p><p data-v-53f9cc39>你要傳的數據是陣列的話用apply, 你傳的參數很多也用apply</p><br data-v-53f9cc39><br data-v-53f9cc39><p class="cor36" data-v-53f9cc39># 現在ES6,我能不能強行用call? _ 可以</p><p data-v-53f9cc39> sumNumbers.call(null, ...numbers); 直接函數.call,null三個點把那個陣列展開 </p><br data-v-53f9cc39><br data-v-53f9cc39><p class="cor36" data-v-53f9cc39># call和bind有什麼區別?</p><p data-v-53f9cc39> bind只綁定this,但它不去立即調用它,而是返回一個綁定這個this的新函數 </p><br data-v-53f9cc39><br data-v-53f9cc39><div id="onejs016" class="articleCardTitle cor36" data-v-53f9cc39> [ JS ] ≫ 防斗是什麼? </div><p data-v-53f9cc39> 防斗比如一個input標籤, 然後input標籤要實現一個功能, 再用戶輸入的時候彈出相應的提示, </p><br data-v-53f9cc39><br data-v-53f9cc39><p data-v-53f9cc39>所以監聽它的input事件, 但是input事件是在用戶每次輸入的時候觸發,</p><br data-v-53f9cc39><br data-v-53f9cc39><p data-v-53f9cc39>所以需要設置一個函數的防斗來實現一個功能,</p><br data-v-53f9cc39><br data-v-53f9cc39><p data-v-53f9cc39>就是當用戶輸入之後停頓某個時間沒有再次輸入才會執行這個函數,</p><br data-v-53f9cc39><br data-v-53f9cc39><p data-v-53f9cc39>否則不執行, 重新計時</p><br data-v-53f9cc39><br data-v-53f9cc39><p class="cor36" data-v-53f9cc39>節流是什麼?</p><p data-v-53f9cc39> 節流類似一個技能的冷卻, 就是當你進行一個操作後, 要等一段時間才能再次進行這個操作, </p><br data-v-53f9cc39><br data-v-53f9cc39><p class="cor36" data-v-53f9cc39>proxy做什麼的?</p><p data-v-53f9cc39> 用於接管物件內部屬性的讀取或函數的調用方法, 它跟object.definedproperty是一樣的功能, 但是object.definedproperty一次只能處理一個屬性 </p><br data-v-53f9cc39><br data-v-53f9cc39><div id="onejs017" class="articleCardTitle cor36" data-v-53f9cc39> [ JS ] ≫ 什麼是DOM? </div><p data-v-53f9cc39>DOM是文檔物件模型</p><br data-v-53f9cc39><p data-v-53f9cc39>用途是把網頁變成JS中的對象來進行增刪改查操作</p><br data-v-53f9cc39><p data-v-53f9cc39>平時要操作DOM可以通過document.getElementByID</p><br data-v-53f9cc39><p data-v-53f9cc39>然後去對他的各種屬性進行修改,</p><br data-v-53f9cc39><p class="cor36" data-v-53f9cc39>什麼是事件捕獲?什麼是事件冒泡?</p><p data-v-53f9cc39> 事件捕獲是從最外層然後向觸發事件子層去一層一層往下傳遞事件, 冒泡是從子層向外層一層一層冒泡這個事件 </p><br data-v-53f9cc39><br data-v-53f9cc39><p class="cor36" data-v-53f9cc39>那一次點擊會同時觸發捕獲和冒泡嗎?</p><p data-v-53f9cc39>會,不管什麼事件一定會先捕獲在冒泡</p><br data-v-53f9cc39><p data-v-53f9cc39>先從document一層一層的到那個元素</p><br data-v-53f9cc39><p data-v-53f9cc39>然後再從那個元素一層一層到 document</p><br data-v-53f9cc39><p data-v-53f9cc39>你監聽捕獲只不過是在其中插入一個函數而已</p><br data-v-53f9cc39><p data-v-53f9cc39>監聽捕獲是在捕獲那邊插入函數</p><br data-v-53f9cc39><p data-v-53f9cc39>監聽冒泡是在冒泡那邊插入一個函數</p><br data-v-53f9cc39><p data-v-53f9cc39> 如果你兩個都監聽還是先經過捕獲階段觸發你的函數, 經過冒泡階段在觸發函數 </p><br data-v-53f9cc39><br data-v-53f9cc39><p class="cor36" data-v-53f9cc39># BOM</p><br data-v-53f9cc39><p data-v-53f9cc39>BOM是瀏覽器對象模型, 用途是用JS來操作瀏覽器來前進後退和地址欄</p><br data-v-53f9cc39><br data-v-53f9cc39><p class="cor36" data-v-53f9cc39># DOM的事件模型是什麼?</p><p data-v-53f9cc39>觸發事件時, 先從上往下進行事件捕獲階段</p><br data-v-53f9cc39><p data-v-53f9cc39>從觸發結點最上面 document 往下到觸發節點</p><br data-v-53f9cc39><p data-v-53f9cc39>然後監聽事件有沒有發生</p><br data-v-53f9cc39><p data-v-53f9cc39>要有同類型事件發生的話就執行函數</p><br data-v-53f9cc39><p data-v-53f9cc39>之後再從這個節點往上進行事件冒泡</p><br data-v-53f9cc39><p class="cor36" data-v-53f9cc39># 不想某一個元素往上冒泡可以用什麼API?</p><br data-v-53f9cc39><p data-v-53f9cc39>e.stopPropergation</p><br data-v-53f9cc39><br data-v-53f9cc39><p class="cor36" data-v-53f9cc39> 假設我點擊一個按鈕得到事件e,我把事件e綁定到變數上面,過一秒後打印這個變數,請問打印出什麼? </p><p data-v-53f9cc39> 空 , 因為 setTimeout 他是一個 異步事件, 他等同步執行完再執行, 這時他那個變量 e 不存在了 </p><br data-v-53f9cc39><br data-v-53f9cc39><p class="cor36" data-v-53f9cc39>事件委託是什麼?</p><p data-v-53f9cc39>假設有父子元素, 監聽子元素事件</p><br data-v-53f9cc39><p data-v-53f9cc39>假設ul裡面有很多li, 然後要求點擊li觸發一個事件</p><br data-v-53f9cc39><p data-v-53f9cc39>假如在每個li都綁定事件 會增大代碼量和內存</p><br data-v-53f9cc39><p data-v-53f9cc39> 可以根據事件冒泡在list item上面觸發的事件會向上冒泡到父元素 ul 上面 </p><br data-v-53f9cc39><p data-v-53f9cc39>所以可以在 ul 上面監聽</p><br data-v-53f9cc39><p class="cor36" data-v-53f9cc39>事件委託優點?</p><p data-v-53f9cc39>可以減少代碼量, 減少內存, 動態綁定</p><br data-v-53f9cc39><p class="cor36" data-v-53f9cc39>事件委託缺點?</p><p data-v-53f9cc39> 用了之後在開發者工具看他的事件綁定會發現沒有, 會不知道誰在監聽這個元素 </p><br data-v-53f9cc39><br data-v-53f9cc39><div id="onejs018" class="articleCardTitle cor36" data-v-53f9cc39> [ JS ] ≫ 深淺拷貝? </div><p data-v-53f9cc39> 潛拷貝是直接複製一層, 深拷貝向下去把它完全複製下來, 它的實現原理可以用到 遞規 去實現 </p><br data-v-53f9cc39><p class="cor36" data-v-53f9cc39> 遞歸怎麼分類呢?你怎麼知道他是基本類型?你怎麼知道它不是一個物件? </p><p data-v-53f9cc39>用typeof</p><br data-v-53f9cc39><br data-v-53f9cc39><p class="cor36" data-v-53f9cc39>typeof返回什麼值,你認為它不是物件或者是物件呢?</p><p data-v-53f9cc39>判定 typeof 是 object 就說明他肯定不是基本類型</p><br data-v-53f9cc39><br data-v-53f9cc39><p class="cor36" data-v-53f9cc39>如果它不是object有幾種情況?</p><p data-v-53f9cc39>string number 布林 null function(返回function)</p><br data-v-53f9cc39><br data-v-53f9cc39><p class="cor36" data-v-53f9cc39>假設你知道哪些是物件,那些不是物件,接下來怎麼區分?</p><p data-v-53f9cc39>在物件裡面區分看他是不是函數,再看它是普通函數還是箭頭函數</p><br data-v-53f9cc39><br data-v-53f9cc39><p class="cor36" data-v-53f9cc39>普通函數還是箭頭函數怎麼看?</p><p data-v-53f9cc39>看他有沒有prototype,箭頭函數沒有prototype</p><br data-v-53f9cc39><br data-v-53f9cc39><p class="cor36" data-v-53f9cc39> 你知道他們區別後接下來做什麼?如果它是普通函數要怎麼複製它? </p><p data-v-53f9cc39>所有參數傳給那個函數,然後返回它的返回值</p><br data-v-53f9cc39><p data-v-53f9cc39>: 直接用function然後return一個a.call然後地址,然後把參數弄下來</p><br data-v-53f9cc39><p class="cor36" data-v-53f9cc39>如果是箭頭函數要怎麼複製它?</p><p data-v-53f9cc39>普通函數創建function 箭頭函數創建箭頭函數</p><br data-v-53f9cc39><br data-v-53f9cc39><p class="cor36" data-v-53f9cc39>.函數判斷完再來判斷什麼?</p><p data-v-53f9cc39>看他是不是陣列</p><br data-v-53f9cc39><br data-v-53f9cc39><p class="cor36" data-v-53f9cc39>陣列判斷完再來判斷什麼?</p><p data-v-53f9cc39>看他是不是Date</p><br data-v-53f9cc39><p data-v-53f9cc39>再來判斷什麼? 正則</p><br data-v-53f9cc39><br data-v-53f9cc39><p class="cor36" data-v-53f9cc39>要著重檢測的類型有哪些?</p><p data-v-53f9cc39>物件 日期 函數 字串 正則表達式</p><br data-v-53f9cc39><br data-v-53f9cc39><p class="cor36" data-v-53f9cc39>先檢查她是對象還是陣列呢?</p><p data-v-53f9cc39>先檢查陣列</p><br data-v-53f9cc39><br data-v-53f9cc39><p class="cor36" data-v-53f9cc39>對JSON的理解?</p><p data-v-53f9cc39>是一門表示通用數據結構的語言</p><br data-v-53f9cc39><p data-v-53f9cc39>用來代替XML用來做數據交換</p><br data-v-53f9cc39><p data-v-53f9cc39>JSON可以表示物件 數組 不林 string number</p><br data-v-53f9cc39><p data-v-53f9cc39>一般在 AJAX 得到的請求就是 JSON</p><br data-v-53f9cc39><br data-v-53f9cc39><p id="onejs019" class="cor36" data-v-53f9cc39>什麼是 RESTful API</p><p data-v-53f9cc39>RESTful API (表示性狀態轉移接口) 是一種設計風格</p><br data-v-53f9cc39><p data-v-53f9cc39>API 設計規範</p><br data-v-53f9cc39><p data-v-53f9cc39>1. 將一切數據視作資源</p><br data-v-53f9cc39><p data-v-53f9cc39>2. 利用 HTTP 請求方式 , 描述對資源的操作 ( 增 刪 改 查 )</p><br data-v-53f9cc39><p data-v-53f9cc39>3. 通過 HTTP 響應狀態碼 , 描述對資源的 操作結果</p><br data-v-53f9cc39><p data-v-53f9cc39>就是通過 URL 就知道要什麼資源 ,</p><br data-v-53f9cc39><p data-v-53f9cc39>通過 HTTP method 就知道要做什麼,</p><br data-v-53f9cc39><p data-v-53f9cc39>通過 HTTP status code 就知道結果如何</p><br data-v-53f9cc39><p data-v-53f9cc39>比如</p><br data-v-53f9cc39><p data-v-53f9cc39>GET 代表獲取一個資源</p><br data-v-53f9cc39><p data-v-53f9cc39>POST 代表添加一個資源</p><br data-v-53f9cc39><p data-v-53f9cc39>PUT 代表修改一個資源</p><br data-v-53f9cc39><p data-v-53f9cc39>DELETE 代表刪除一個資源</p><br data-v-53f9cc39><p data-v-53f9cc39> 用 HTTP Status Code 傳遞 server 的狀態訊息 ,ex 200 表示成功 , 500 表示 server 內部錯誤 </p><br data-v-53f9cc39><p class="cor36" data-v-53f9cc39>用 Rest 的優勢?</p><p data-v-53f9cc39>1. 風格統一 , 不會出現各種命名的代碼</p><br data-v-53f9cc39><p data-v-53f9cc39>2. 面相資源 , 一目了然 , 有自解釋性</p><br data-v-53f9cc39><p data-v-53f9cc39>3. 充分利用 HTTP 協議本身語意</p><br data-v-53f9cc39><br data-v-53f9cc39><p class="cor36" data-v-53f9cc39>併發和併行?</p><p data-v-53f9cc39> 併發是宏觀概念,表示並行發生, 並行是微觀概念, 表示cpu有多個核心同時執行兩個任務 </p><br data-v-53f9cc39><p data-v-53f9cc39>並行是微觀概念, 表示cpu有多個核心同時執行兩個任務</p><br data-v-53f9cc39><br data-v-53f9cc39><p class="cor36" data-v-53f9cc39>JS異步編程實現方式?</p><p data-v-53f9cc39>回調函數 . promise . async和await</p><br data-v-53f9cc39><br data-v-53f9cc39><p class="cor36" data-v-53f9cc39>AJAX有2種方法,XMLHttpRequest和fetch,他們的優缺點?</p><p data-v-53f9cc39>XHR大多數用他的庫axios</p><br data-v-53f9cc39><p data-v-53f9cc39> Fetch優勢在於瀏覽器原生支持, 方便去用, 他的API也比xhr使用起來簡單 </p><br data-v-53f9cc39><br data-v-53f9cc39><div id="onejs020" class="articleCardTitle cor36" data-v-53f9cc39> [ JS ] ≫ promise 的狀態? </div><p data-v-53f9cc39>pending 待定: 初始狀態</p><br data-v-53f9cc39><p data-v-53f9cc39>fullfilled 兌現: 操作成功</p><br data-v-53f9cc39><p data-v-53f9cc39>rejected 拒絕: 操作失敗</p><br data-v-53f9cc39><br data-v-53f9cc39><p data-v-53f9cc39>Promise 狀態 一但 兌現 / 拒絕 就 無法再改變</p><br data-v-53f9cc39><p class="cor36" data-v-53f9cc39>promise解決了什麼問題?</p><p data-v-53f9cc39>解決回調地獄</p><br data-v-53f9cc39><br data-v-53f9cc39><p class="cor36" data-v-53f9cc39>promise成功失敗的回調放哪?</p><p data-v-53f9cc39>.then</p><br data-v-53f9cc39><br data-v-53f9cc39><p class="cor36" data-v-53f9cc39>catch是幹嘛的?</p><p data-v-53f9cc39>捕獲promise的錯誤</p><br data-v-53f9cc39><br data-v-53f9cc39><p class="cor36" data-v-53f9cc39>finally?</p><p data-v-53f9cc39>不論成功 (.then) 失敗 (.catch) 都會調用的方法</p><br data-v-53f9cc39><br data-v-53f9cc39><p class="cor36" data-v-53f9cc39>promise的缺點?</p><p data-v-53f9cc39>一旦執行promise沒辦法取消, 它裡面的錯誤只能用回調函數來捕獲</p><br data-v-53f9cc39><br data-v-53f9cc39><p class="cor36" data-v-53f9cc39>Promise.all?</p><p data-v-53f9cc39> 傳入多個promise而這些promise都是成功的話 Promise.all就執行相對應函數 </p><br data-v-53f9cc39><br data-v-53f9cc39><p class="cor36" data-v-53f9cc39>Promise.race?</p><p data-v-53f9cc39>傳入多個promise而只要一個成功或失敗, 就返回那個</p><br data-v-53f9cc39><br data-v-53f9cc39><p class="cor36" data-v-53f9cc39>promise的缺點?</p><p data-v-53f9cc39>一旦執行promise沒辦法取消, 它裡面的錯誤只能用回調函數來捕獲</p><p data-v-53f9cc39>就整個都失敗</p><br data-v-53f9cc39><p data-v-53f9cc39>Promise.all如果失敗了一個會不會執行失敗的回調? _ 會</p><br data-v-53f9cc39><p class="cor36" data-v-53f9cc39>那是第一個失敗時執行還是所有都失敗在執行?</p><p data-v-53f9cc39>只要第一個失敗就執行,並以這個失敗的結果來執行下面的回調</p><br data-v-53f9cc39><br data-v-53f9cc39><p class="cor36" data-v-53f9cc39>Promise是一個類還是函數呢?</p><p data-v-53f9cc39> 它可以是函數, 你把它做為單獨的函數的話要自己實現原型, 用類的話, 直接把它方法寫到類的定義上就好 </p><br data-v-53f9cc39><br data-v-53f9cc39><p class="cor36" data-v-53f9cc39>這個Promise接收什麼參數呢?</p><p data-v-53f9cc39>它是一個回調函數</p><br data-v-53f9cc39><br data-v-53f9cc39><p class="cor36" data-v-53f9cc39>這個回調函數接收什麼參數呢?</p><p data-v-53f9cc39>resolve 和 reject</p><br data-v-53f9cc39><p data-v-53f9cc39> Promise接受到這個參數後,它對這個函數要立即執行嗎?還是異步執行? _ 立即執行 </p><br data-v-53f9cc39><p class="cor36" data-v-53f9cc39>Promise執行完這個函數後要返回什麼值?</p><p data-v-53f9cc39> 物件,這個物件至少有一個than方法, 可能還會有catch跟finaly方法, 在then裡面可以添加更多的回調 </p><br data-v-53f9cc39><br data-v-53f9cc39><p class="cor36" data-v-53f9cc39> 一般promise後面.then,這個.then的參數和返回值是什麼? </p><p data-v-53f9cc39> then的參數第一個是成功的回調, 第二個參數是錯誤的回調, 然後返回一個promise </p><br data-v-53f9cc39><p data-v-53f9cc39>那返回的這個promise是之前的promise嗎? _ 是</p><br data-v-53f9cc39><p class="cor36" data-v-53f9cc39>Promise.all怎麼自己去模擬?</p><p data-v-53f9cc39> 就是發三個請求,三個請求成功了,就調用成功,任何一個失敗了就調用失敗 </p><br data-v-53f9cc39><br data-v-53f9cc39><p class="cor36" data-v-53f9cc39> 不用Promise.all怎麼做? _ (可不可以給2分鐘考慮思路,promise4步) </p><p data-v-53f9cc39> 先記promise.all的用法, 他會接收陣列參數, 第一步把所有promise封裝到陣列裡面, 陣列能做遍歷, 裡面寫成功函數和失敗函數, 如果成功成功數目加一or給結果陣列裡面的結果填充, 比如第一個promise成功了, 給結果第一項變成他的data, 第二個..., 怎麼才能繼續, 變了data後看一下是不是三項都是data或成功, 那就可以繼續了, 最終要確定是否成功就是我這次成功之後看一下這個陣列是否是全成功的, 如果不是就什麼都不做, 最後成功的那個請求就負責往下走, 而失敗就直接調用失敗不用數數 </p><br data-v-53f9cc39><br data-v-53f9cc39><p id="onejs021" class="cor36" data-v-53f9cc39>async/await怎麼用?</p><p data-v-53f9cc39>比如在AJAX請求之間, 先聲明一個async function</p><br data-v-53f9cc39><p data-v-53f9cc39>把這個AJAX請求寫在await後面,</p><br data-v-53f9cc39><p data-v-53f9cc39>因為這個async本身是一個函數包裹了不同的異步請求的任務,</p><br data-v-53f9cc39><p data-v-53f9cc39>然後它碰到這個await就會執行這個異步函數返回一個promise</p><br data-v-53f9cc39><p data-v-53f9cc39>但不確定這個promis會返回正確還是錯誤</p><br data-v-53f9cc39><p data-v-53f9cc39>所以可以用try catch來捕捉這個異常</p><br data-v-53f9cc39><br data-v-53f9cc39><p class="cor36" data-v-53f9cc39> 假如我有f1f2都返回promise如果我想await要等待兩個異步操作結束之後再console.log(z)? </p><p data-v-53f9cc39> 可以用promise.all, peomise.all可以將多個promise合成一個新的promise, 當兩個promise都是成功的狀態下, 就是它返回一個結果陣列, 如果是失敗的話它會將, 首先哪個錯的promise的狀態的結果返回出來 </p><br data-v-53f9cc39><br data-v-53f9cc39><p class="cor36" data-v-53f9cc39> 如果我想用await依次執行f1f2呢?就是等f1執行完我再去執行f2? </p><p data-v-53f9cc39>.await(f1).await(f2)</p><br data-v-53f9cc39><br data-v-53f9cc39><p data-v-53f9cc39>await永遠異步對不對? _ 對</p><br data-v-53f9cc39><br data-v-53f9cc39><p data-v-53f9cc39>await後面一般接promise對不對? _ 對</p><br data-v-53f9cc39><br data-v-53f9cc39><p class="cor36" data-v-53f9cc39>如果不接promise會怎樣?await 1會怎樣?</p><p data-v-53f9cc39>它會默認返回一個promise, 它會把它封裝成promise.resolve 1</p><br data-v-53f9cc39><br data-v-53f9cc39><p class="cor36" data-v-53f9cc39>const a = 1 和 const a = await 1一樣嗎?</p><p data-v-53f9cc39>不一樣, 有await會變異步</p><br data-v-53f9cc39><br data-v-53f9cc39><p class="cor36" data-v-53f9cc39>a = await 1相當於a = 1嗎?</p><p data-v-53f9cc39>不是</p><br data-v-53f9cc39><br data-v-53f9cc39><p data-v-53f9cc39> (await是語法糖,await所有寫法會變成promise,不是promise也強行變成promise) </p><br data-v-53f9cc39><br data-v-53f9cc39><p class="cor36" data-v-53f9cc39>await我們在之後接上一個異步請求,a = await ajax()?</p><p data-v-53f9cc39>那要等到promise結果返回,在執行a = await ajax()</p><br data-v-53f9cc39><br data-v-53f9cc39><p class="cor36" data-v-53f9cc39>怎麼捕獲await中的錯誤?</p><p data-v-53f9cc39>用 try , catch</p><br data-v-53f9cc39><br data-v-53f9cc39><p class="cor36" data-v-53f9cc39>node.js什麼是EventLoop?</p><p data-v-53f9cc39>Node.js將任務分成幾個大類</p><br data-v-53f9cc39><br data-v-53f9cc39><p data-v-53f9cc39>有timers階段</p><br data-v-53f9cc39><br data-v-53f9cc39><p data-v-53f9cc39>還有IO</p><br data-v-53f9cc39><br data-v-53f9cc39><p data-v-53f9cc39>callbacks階段</p><br data-v-53f9cc39><br data-v-53f9cc39><p data-v-53f9cc39>還有prepare階段</p><br data-v-53f9cc39><br data-v-53f9cc39><p data-v-53f9cc39>還有poll輪詢階段</p><br data-v-53f9cc39><br data-v-53f9cc39><p data-v-53f9cc39>還有check階段</p><br data-v-53f9cc39><br data-v-53f9cc39><p data-v-53f9cc39>還有close callbcak階段</p><br data-v-53f9cc39><br data-v-53f9cc39><p data-v-53f9cc39>一般在三個階段停留時間比較長 timers poll check</p><br data-v-53f9cc39><br data-v-53f9cc39><br data-v-53f9cc39><p data-v-53f9cc39>setTimeout哪個階段阿? timers</p><br data-v-53f9cc39><br data-v-53f9cc39><p data-v-53f9cc39> 那promise的then回調在哪個階段執行? 跟nextTick一樣, 現階段結束之前執行 </p><br data-v-53f9cc39><br data-v-53f9cc39><br data-v-53f9cc39><p id="onejs022" class="cor36" data-v-53f9cc39>JS的事件循環?</p><p data-v-53f9cc39>打開瀏覽器頁面時, 瀏覽器會開闢隊列,</p><br data-v-53f9cc39><p data-v-53f9cc39>然後隊列分為 微任務隊列 宏任務隊列,</p><br data-v-53f9cc39><p data-v-53f9cc39>在執行script代碼時, 會把同步代碼之外的異步任務放到對列裡面去,</p><br data-v-53f9cc39><p data-v-53f9cc39> 在同步的代碼執行完成後, 去查看異步隊列中是否有滿足條件的執行任務, </p><br data-v-53f9cc39><p data-v-53f9cc39>然後把它取出來防到執行環境站裡面執行,</p><br data-v-53f9cc39><p data-v-53f9cc39>然後不斷循環這個過程, 這就是事件循環</p><br data-v-53f9cc39><br data-v-53f9cc39><br data-v-53f9cc39><p class="cor36" data-v-53f9cc39>微任務和宏任務?</p><p data-v-53f9cc39>微任務 宏任務 是nodejs說法,</p><br data-v-53f9cc39><br data-v-53f9cc39><p data-v-53f9cc39>瀏覽器只有 微任務 任務, 所以可以認為宏任務就是任務</p><br data-v-53f9cc39><br data-v-53f9cc39><p data-v-53f9cc39> 任務是最常規的東西, 你引入script標籤 寫一個setTimeout, 它的回調或代碼裡面都是任務, </p><br data-v-53f9cc39><br data-v-53f9cc39><p data-v-53f9cc39> 這個任務裡面你可以不停地去啟用微任務, 例如promise.then執行微任務 </p><br data-v-53f9cc39><br data-v-53f9cc39><p class="cor36" data-v-53f9cc39>那些函數是微任務和那些是宏任務?</p><p data-v-53f9cc39> setTimeout宏任務 promise裡面then微任務 async函數裡面await後面的部分微任務 </p><br data-v-53f9cc39><br data-v-53f9cc39><p data-v-53f9cc39>微任務和宏任務執行順序? _ 宏任務先執行</p><br data-v-53f9cc39><br data-v-53f9cc39><p data-v-53f9cc39>一般第一個任務是什麼任務?(宏任務裡可以插入微任務) _ 宏任務</p><br data-v-53f9cc39><br data-v-53f9cc39><p data-v-53f9cc39>在頁面中引入一個script標籤,那這個script是什麼任務? _ 宏任務</p><br data-v-53f9cc39><br data-v-53f9cc39><p data-v-53f9cc39> 我在兩個宏任務之間執行一個微任務,那肯定微任務在兩個中間執行隊嗎? _ 對 </p><br data-v-53f9cc39><br data-v-53f9cc39><p data-v-53f9cc39> 那我在中間這個微任務裡面再次執行一個微任務,它會插在下一個宏任務執行之前執行嗎?(題目問可不可以插宏任務) _ 會 </p><br data-v-53f9cc39><br data-v-53f9cc39><p data-v-53f9cc39> 假設我在兩個宏任務之間已經安排了兩個微任務,然後在第一個微任務執行結束的時候,又插入一個新的微任務,這個新的微任務可以在下一個微任務執行之前執行嗎? </p><p data-v-53f9cc39>(題目問可不可以插微任務)</p><br data-v-53f9cc39><p data-v-53f9cc39> 不行, 微任務要排隊, 微任務只能插在宏任務之前 不能, . . . 兩個微任務之間不能插微任務 </p><br data-v-53f9cc39><br data-v-53f9cc39><p class="cor36" data-v-53f9cc39>假設一個宏任務觸發一個微任務和宏任務,先執行哪個?</p><p data-v-53f9cc39>微任務之後的微任務也是會繼續執行微任務, 直到微任務隊列空</p><br data-v-53f9cc39><br data-v-53f9cc39><p data-v-53f9cc39>Promise.then(f1)這個then後面接的f1是異步還是同步? _ 異步</p><br data-v-53f9cc39><br data-v-53f9cc39><p data-v-53f9cc39> 第一行Promise.then(f1)第二console.log(999),f1會在999之後執行對嗎? _ 對 </p><br data-v-53f9cc39><br data-v-53f9cc39><p data-v-53f9cc39> 第一行Promise.then(f1)第二setTimeout(999),f1和999哪個先執行? _ f1 </p><br data-v-53f9cc39><br data-v-53f9cc39><p data-v-53f9cc39> 為什麼then回調可以比setTimeout先執行? _ then屬於微任務, setTimeout屬於宏任務 </p><br data-v-53f9cc39><br data-v-53f9cc39>',673),A9=_s(()=>v("div",{class:"toTopButton"},[v("div",{class:"disCen"},"___"),v("div",{class:"disCen"},"▲")],-1)),M9=[A9],F9=_s(()=>v("div",{class:"toBotButton"},[v("div",{class:"disCen"},"▼"),v("div",{class:"disCen"},"￣")],-1)),I9=[F9],R9={__name:"JsPageOne",setup(a){const s=ua(!1);window.addEventListener("scroll",function(){s.value=window.scrollY>0});function d(){window.scrollTo({top:0,left:0,behavior:"smooth"})}function t(){window.scrollTo({top:999999,left:0,behavior:"smooth"})}function c(e){window.scrollTo({top:document.getElementById(`${e}`).offsetTop,behavior:"smooth"})}return(e,n)=>{const l=za("dir");return da(),ea(Q,null,[v("section",null,[v("div",g9,[v("div",T9,[v("div",_9,[z9,v("div",{onClick:n[0]||(n[0]=p=>c("onejs001")),class:"leftNavText"},"JS數據類型"),v("div",{onClick:n[1]||(n[1]=p=>c("onejs002")),class:"leftNavText"}," null undefined "),v("div",{onClick:n[2]||(n[2]=p=>c("onejs003")),class:"leftNavText"},"==&==="),v("div",{onClick:n[3]||(n[3]=p=>c("onejs004")),class:"leftNavText"},"0.1+0.2"),v("div",{onClick:n[4]||(n[4]=p=>c("onejs005")),class:"leftNavText"}," let var const "),v("div",{onClick:n[5]||(n[5]=p=>c("onejs006")),class:"leftNavText"},"展開運算符"),v("div",{onClick:n[6]||(n[6]=p=>c("onejs007")),class:"leftNavText"}," 遍歷數組有幾種方式 "),v("div",{onClick:n[7]||(n[7]=p=>c("onejs008")),class:"leftNavText"},"閉包"),v("div",{onClick:n[8]||(n[8]=p=>c("onejs009")),class:"leftNavText"}," 立即執行函數 "),v("div",{onClick:n[9]||(n[9]=p=>c("onejs010")),class:"leftNavText"},"this指向"),v("div",{onClick:n[10]||(n[10]=p=>c("onejs011")),class:"leftNavText"},"箭頭函數"),v("div",{onClick:n[11]||(n[11]=p=>c("onejs012")),class:"leftNavText"},"原型鏈"),v("div",{onClick:n[12]||(n[12]=p=>c("onejs013")),class:"leftNavText"},"new做了什麼"),v("div",{onClick:n[13]||(n[13]=p=>c("onejs014")),class:"leftNavText"},"繼承"),v("div",{onClick:n[14]||(n[14]=p=>c("onejs015")),class:"leftNavText"}," call apply bind "),v("div",{onClick:n[15]||(n[15]=p=>c("onejs016")),class:"leftNavText"},"防斗節流"),v("div",{onClick:n[16]||(n[16]=p=>c("onejs017")),class:"leftNavText"},"DOM"),v("div",{onClick:n[17]||(n[17]=p=>c("onejs018")),class:"leftNavText"}," 深拷貝淺拷貝 "),v("div",{onClick:n[18]||(n[18]=p=>c("onejs019")),class:"leftNavText"},"RESTful API"),v("div",{onClick:n[19]||(n[19]=p=>c("onejs020")),class:"leftNavText"},"promise狀態"),v("div",{onClick:n[20]||(n[20]=p=>c("onejs021")),class:"leftNavText"},"async/await"),v("div",{onClick:n[21]||(n[21]=p=>c("onejs022")),class:"leftNavText"},"JS事件循環"),v("div",{onClick:n[22]||(n[22]=p=>c("onejs0")),class:"leftNavText"}),v("div",{onClick:n[23]||(n[23]=p=>c("onejs0")),class:"leftNavText"}),v("div",{onClick:n[24]||(n[24]=p=>c("onejs0")),class:"leftNavText"}),v("div",{onClick:n[25]||(n[25]=p=>c("onejs0")),class:"leftNavText"})])])]),v("div",S9,[v("div",q9,[v("div",y9,[C9,v("div",x9,[L9,T(l,null,{default:C(()=>[j9,P9,fa(),N9,V9,$9]),_:1}),O9]),E9])])])]),v("div",null,[X(T(W,{name:"fade",tag:"div"},{default:C(()=>[v("div",{onClick:d,class:"toTop"},M9)]),_:1},512),[[Y,s.value]]),X(T(W,{name:"fade",tag:"div"},{default:C(()=>[v("div",{onClick:t,class:"toBot"},I9)]),_:1},512),[[Y,s.value]])])],64)}}},H9=ia(R9,[["__scopeId","data-v-53f9cc39"]]);const B9={};function J9(a,s){const d=za("RouterLink"),t=za("RouterView");return da(),ea(Q,null,[v("div",null,[v("ul",null,[v("li",null,[T(d,{to:"/js/jspractice/"},{default:C(()=>[fa("練習題1")]),_:1})]),v("li",null,[T(d,{to:"/js/jspractice/two"},{default:C(()=>[fa("練習題2")]),_:1})])])]),T(t)],64)}const D9=ia(B9,[["render",J9],["__scopeId","data-v-7c729950"]]);const Yd=a=>(wa("data-v-6296c6c1"),a=a(),ha(),a),W9={class:"leftNav"},U9={class:"leftNavContainer"},K9={class:"leftNavLayout"},X9=Yd(()=>v("br",null,null,-1)),Y9=Yd(()=>v("br",null,null,-1)),G9=U('<div class="Main" data-v-6296c6c1><div class="mainContainer" data-v-6296c6c1><div class="mainLayout" data-v-6296c6c1><div id="twohand001" class="cardTitle" data-v-6296c6c1> 1. JS作用域考题? . . . . . . . . . . . . </div><div data-v-6296c6c1>1.JS除了函數外, JS沒有塊級作用域</div><div data-v-6296c6c1> 2.作用域鏈: 內部可以訪問外部的變量, 但是外部不能訪問內部的變量 </div><div data-v-6296c6c1>3.注意聲明變量是用var還是沒寫 (window.)</div><div data-v-6296c6c1>4.注意JS有變量提升(變量懸掛聲明)</div><div data-v-6296c6c1>5.優先級: 聲明變量 &gt; 聲明普通函數 &gt; 參數 &gt; 變量提升</div><div data-v-6296c6c1>面試時</div><div data-v-6296c6c1>1.先看本層作用域有沒有此變量 (注意變量提升)</div><div data-v-6296c6c1>2.注意JS除了函數外, JS沒有塊級作用域</div><div data-v-6296c6c1>3.普通函數聲明是不看寫函數的時候順序</div><br data-v-6296c6c1><div data-v-6296c6c1>1.JS除了函數外, JS沒有塊級作用域</div><br data-v-6296c6c1><div data-v-6296c6c1>function fun(){</div><div data-v-6296c6c1>. var a = 10; . . . // 這個 a 屬於函數內部的</div><div data-v-6296c6c1>}</div><div data-v-6296c6c1>console.log( a ) . . . // a is not defined</div><div data-v-6296c6c1>fun();</div><div data-v-6296c6c1>console.log( a ) . . . // a is not defined</div><br data-v-6296c6c1><div data-v-6296c6c1>for( var i = 0; i ＜ 10 ; i++ ){</div><div data-v-6296c6c1>}</div><div data-v-6296c6c1>console.log( i ); . . . // 10 在for裡面定義沒有作用域</div><br data-v-6296c6c1><div data-v-6296c6c1>if( true ){</div><div data-v-6296c6c1>. var a = 10;</div><div data-v-6296c6c1>}</div><div data-v-6296c6c1>console.log( a ); . . . // 10 只有函數有作用域</div><br data-v-6296c6c1><div data-v-6296c6c1> 2.作用域鏈: 內部可以訪問外部的變量, 但是外部不能訪問內部的變量 </div><div data-v-6296c6c1>注意: 如果內部有, 優先查找內部, 內部沒有向外層找</div><br data-v-6296c6c1><div data-v-6296c6c1>function fun(){</div><div data-v-6296c6c1>. var a = 10;</div><div data-v-6296c6c1>. function foo(){</div><div data-v-6296c6c1>. . console.log( a )</div><div data-v-6296c6c1>. }</div><div data-v-6296c6c1>. foo();</div><div data-v-6296c6c1>}</div><div data-v-6296c6c1>fun(); . . . 打印10</div><br data-v-6296c6c1><div data-v-6296c6c1>var b = 29;</div><div data-v-6296c6c1>function fun1(){</div><div data-v-6296c6c1>. console.log( b );</div><div data-v-6296c6c1>}</div><div data-v-6296c6c1>fun1(); . . . 打印29, 內可以訪問外,但外不能訪問內</div><br data-v-6296c6c1><div data-v-6296c6c1>3.注意聲明變量是用var還是沒寫 (window.)</div><div data-v-6296c6c1>(function(){</div><div data-v-6296c6c1>. var a = b = 10;</div><div data-v-6296c6c1>})()</div><div data-v-6296c6c1>console.log(a) . . . // a is not defined</div><div data-v-6296c6c1> console.log(b) . . . // 10 b=10 沒寫默認window.b=10, 相當於全局var b=10 </div><br data-v-6296c6c1><div data-v-6296c6c1>4.注意JS有變量提升(變量懸掛聲明)</div><div data-v-6296c6c1>function c(){</div><div data-v-6296c6c1>. var b = 1</div><div data-v-6296c6c1>. function a(){</div><div data-v-6296c6c1>. . console.log(b)</div><div data-v-6296c6c1>. . var b = 2;</div><div data-v-6296c6c1>. . console.log(b)</div><div data-v-6296c6c1>. }</div><div data-v-6296c6c1>. a()</div><div data-v-6296c6c1>. console.log(b)</div><div data-v-6296c6c1>}</div><div data-v-6296c6c1>c()</div><br data-v-6296c6c1><div data-v-6296c6c1>先看本層作用域有沒有此變量 (注意變量提升)</div><div data-v-6296c6c1>a()裡面有var b提升, 第一個console.log(b) . . . // undefined</div><div data-v-6296c6c1>第二個console.log(b) . . . // 2 因為上面有</div><div data-v-6296c6c1>第三個console.log(b)本層有是 1</div><br data-v-6296c6c1><div class="cor36" data-v-6296c6c1>輸出多少?</div><div data-v-6296c6c1>var name = &quot;a&quot;;</div><div data-v-6296c6c1>(function(){</div><div data-v-6296c6c1>. if( typeof name == &quot;undefined&quot; ){</div><div data-v-6296c6c1>. . var name = &quot;b&quot;;</div><div data-v-6296c6c1>. . console.log(&quot;111&quot;+name);</div><div data-v-6296c6c1>. } else {</div><div data-v-6296c6c1>. . console.log(&quot;222&quot;+name);</div><div data-v-6296c6c1>. }</div><div data-v-6296c6c1>})()</div><br data-v-6296c6c1><div data-v-6296c6c1>先看本層作用域有沒有此變量 (注意變量提升)</div><div data-v-6296c6c1>注意JS除了函數外, JS沒有塊級作用域</div><div data-v-6296c6c1>var先變量提升到function, 就算if( false )也是提升</div><div data-v-6296c6c1>所以 var name, 所以name == undefined, 所以打印 111b</div><div class="cor36" data-v-6296c6c1>輸出多少?</div><div data-v-6296c6c1>var bar = 1;</div><div data-v-6296c6c1>function test(){</div><div data-v-6296c6c1>. console.log( bar )</div><div data-v-6296c6c1>. var bar = 2;</div><div data-v-6296c6c1>. console.log( bar )</div><div data-v-6296c6c1>}</div><div data-v-6296c6c1>test();</div><br data-v-6296c6c1><div data-v-6296c6c1>先看本層作用域有沒有此變量 (注意變量提升)</div><div data-v-6296c6c1>第一個bar undefined</div><div data-v-6296c6c1>第二個bar 2</div><div class="cor36" data-v-6296c6c1>輸出多少?</div><div data-v-6296c6c1>function fun(){</div><div data-v-6296c6c1>. var a = 10;</div><div data-v-6296c6c1>. function a(){}</div><div data-v-6296c6c1>. console.log( a );</div><div data-v-6296c6c1>}</div><div data-v-6296c6c1>fun(); . . . // 10</div><br data-v-6296c6c1><div data-v-6296c6c1>function fun(){</div><div data-v-6296c6c1>. var a = 10;</div><div data-v-6296c6c1>. var a = function(){}</div><div data-v-6296c6c1>. console.log( a );</div><div data-v-6296c6c1>}</div><div data-v-6296c6c1>fun(); . . . // f(){}</div><br data-v-6296c6c1><div data-v-6296c6c1>5.優先級: 聲明變量 &gt; 聲明普通函數 &gt; 參數 &gt; 變量提升</div><div data-v-6296c6c1>3.普通函數聲明是不看寫函數的時候順序</div><br data-v-6296c6c1><div data-v-6296c6c1>function fun(){</div><div data-v-6296c6c1>. console.log( a ); . . . //f(){}</div><div data-v-6296c6c1>. function a(){}</div><div data-v-6296c6c1>}</div><div data-v-6296c6c1>fun(); . . . 也可以先用在定義</div><br data-v-6296c6c1><div data-v-6296c6c1>function fun(){</div><div data-v-6296c6c1>. console.log( a ); . . . //f(){}</div><div data-v-6296c6c1>. var a = 10;</div><div data-v-6296c6c1>. function a(){}</div><div data-v-6296c6c1>}</div><div data-v-6296c6c1>fun(); . . . 也可以先用在定義</div><br data-v-6296c6c1><div data-v-6296c6c1>function fun( a ){</div><div data-v-6296c6c1>. console.log( a );</div><div data-v-6296c6c1>. var a = 10;</div><div data-v-6296c6c1>}</div><div data-v-6296c6c1>fun( 100 ); . . . // 10</div><br data-v-6296c6c1><div data-v-6296c6c1>function fun( a ){</div><div data-v-6296c6c1>. var a = 10;</div><div data-v-6296c6c1>. function a(){}</div><div data-v-6296c6c1>. console.log( a );</div><div data-v-6296c6c1>}</div><div data-v-6296c6c1> fun( 100 ); . . . // 10 聲明變量 &gt; 聲明普通函數 &gt; 參數 &gt; 變量提升 </div><br data-v-6296c6c1><div data-v-6296c6c1>function fun(){</div><div data-v-6296c6c1>. a = 10;</div><div data-v-6296c6c1>. console.log( a );</div><div data-v-6296c6c1>}</div><div data-v-6296c6c1> fun(); . . . // 打印 10 , 本層沒有向外找, 他是在外部拿到的,window.a </div><br data-v-6296c6c1><div data-v-6296c6c1>function fun(){</div><div data-v-6296c6c1>. a = 10;</div><div data-v-6296c6c1>. var a = 20;</div><div data-v-6296c6c1>. console.log( a );</div><div data-v-6296c6c1>}</div><div data-v-6296c6c1>fun(); . . . // 打印 20 , 本層有</div><br data-v-6296c6c1><div data-v-6296c6c1>function fun(){</div><div data-v-6296c6c1>. var a = 20;</div><div data-v-6296c6c1>. a = 10;</div><div data-v-6296c6c1>. console.log( a );</div><div data-v-6296c6c1>}</div><div data-v-6296c6c1>fun(); . . . // 打印 10 , 變量再次賦值</div><br data-v-6296c6c1><div data-v-6296c6c1>function fun(){</div><div data-v-6296c6c1>. a = 10;</div><div data-v-6296c6c1>. console.log( a );</div><div data-v-6296c6c1>. var a = 20;</div><div data-v-6296c6c1>. console.log( a );</div><div data-v-6296c6c1>}</div><div data-v-6296c6c1>fun(); . . . // 第一個打印 10 , 第二個打印 20</div><br data-v-6296c6c1><br data-v-6296c6c1><br data-v-6296c6c1><div id="twohand002" class="cardTitle" data-v-6296c6c1>2. JS物件考题</div><div data-v-6296c6c1> 1.物件是通過 new 操作符構建出來, 所以物件之間不相等 (除了引用外) </div><div data-v-6296c6c1>2.物件注意: 引用類型 (共同一個地址)</div><div data-v-6296c6c1>3.物件的 key 都是字符串類型</div><div data-v-6296c6c1>4.物件如何找屬性&amp;方法</div><div data-v-6296c6c1> 先在物件本身找 &gt; 構造函數中找 &gt; 物件原型中找 &gt; 構造函數原型中找 &gt; 物件上一層原型查找 </div><br data-v-6296c6c1><div data-v-6296c6c1>console.log([1,2,3] === [1,2,3]) . . . // false</div><div data-v-6296c6c1>new 創建新物件</div><div data-v-6296c6c1>任何陣列透過 new 出來</div><br data-v-6296c6c1><div data-v-6296c6c1>var obj1 = {</div><div data-v-6296c6c1>. a:1</div><div data-v-6296c6c1>}</div><div data-v-6296c6c1>var obj2 = obj1; . . . obj1 給 obj2 注意不是創建</div><div data-v-6296c6c1>obj1.a = &quot;aaa&quot;; . . . 兩個都被改</div><div data-v-6296c6c1>obj2.a = &quot;bbb&quot;&#39; . . . 兩個都被改</div><br data-v-6296c6c1><div class="cor36" data-v-6296c6c1>輸出多少?</div><div data-v-6296c6c1>var obj1 = {</div><div data-v-6296c6c1>. a:&quot;hellow&quot;</div><div data-v-6296c6c1>}</div><div data-v-6296c6c1>var obj2 = obj1;</div><div data-v-6296c6c1>obj2.a= &quot;world&quot;;</div><div data-v-6296c6c1>console.log(obj1);</div><div data-v-6296c6c1>(function(){</div><div data-v-6296c6c1>. console.log( a );</div><div data-v-6296c6c1>. var a = 1;</div><div data-v-6296c6c1>})();</div><div data-v-6296c6c1>第一個打印 {a:world}</div><div data-v-6296c6c1>第二個打印 undefined</div><br data-v-6296c6c1><div class="cor36" data-v-6296c6c1>物件的 key 都是字符串類型</div><div data-v-6296c6c1>var a = {}</div><div data-v-6296c6c1>var b = {</div><div data-v-6296c6c1>. key: &quot;a&quot;</div><div data-v-6296c6c1>}</div><div data-v-6296c6c1>var c = {</div><div data-v-6296c6c1>. key: &quot;c&quot;</div><div data-v-6296c6c1>}</div><div data-v-6296c6c1>a[b] = &quot;123&quot;;</div><div data-v-6296c6c1>a[c] = &quot;456&quot;;</div><div data-v-6296c6c1>console.log( a[b] )</div><br data-v-6296c6c1><div data-v-6296c6c1>這相當於 let m = {}</div><div data-v-6296c6c1>m.a = 1;</div><div data-v-6296c6c1>m.a = 2;</div><div data-v-6296c6c1>往物件裡面加內容,物件的key為字串</div><div data-v-6296c6c1>結果為 456</div><div data-v-6296c6c1>for(var k in a){</div><div data-v-6296c6c1>. console.log( typeof k )</div><div data-v-6296c6c1>}</div><br data-v-6296c6c1><div data-v-6296c6c1>物件如何找屬性&amp;方法</div><div data-v-6296c6c1>console.log( [1,2,3].constructor )</div><div data-v-6296c6c1>得到array</div><div data-v-6296c6c1>物件透過 構造函數 創造的</div><div data-v-6296c6c1>new Array</div><br data-v-6296c6c1><div data-v-6296c6c1>可以想成</div><div data-v-6296c6c1>function Fun(){</div><div data-v-6296c6c1>}</div><div data-v-6296c6c1>let obj = new Fun();</div><div data-v-6296c6c1> console.log( obj.constructor ) . . . //得到Fun() 代表 obj.constructor 指向 Fun() </div><br data-v-6296c6c1><div data-v-6296c6c1>同理</div><br data-v-6296c6c1><div data-v-6296c6c1>function Array(){</div><div data-v-6296c6c1>}</div><div data-v-6296c6c1>new Array</div><div data-v-6296c6c1> console.log( [1,2,3].constructor ) . . . //得到Array() 代表 [1,2,3].constructor 指向 Array() </div><div data-v-6296c6c1>每一個物件透過構造函數構建出來, 給 new 把它變成物件</div><br data-v-6296c6c1><div data-v-6296c6c1>1.每一個函數都自帶一個 prototype 原型</div><div data-v-6296c6c1>. 注意: 物件擁有 __proto__</div><div data-v-6296c6c1>2.new Fun 該 Fun 構造函數的原型指向於對象(new Fun)的原型</div><br data-v-6296c6c1><div data-v-6296c6c1>物件如何找屬性&amp;方法</div><div data-v-6296c6c1> 先在物件本身找 &gt; 構造函數中找 &gt; 物件原型中找 &gt; 構造函數原型中找 &gt; 物件上一層原型查找 </div><br data-v-6296c6c1><div data-v-6296c6c1>function Fun(){</div><div data-v-6296c6c1>. this.a = &quot;在 fun 函數中添加的&quot;;</div><div data-v-6296c6c1>}</div><div data-v-6296c6c1>Fun.prototype.a = &quot;這是 fun 原型添加的&quot;</div><div data-v-6296c6c1>let obj = new Fun();</div><div data-v-6296c6c1>obj.a = &quot;物件本身&quot;</div><div data-v-6296c6c1>obj.__proto__,a = &quot;這是物件原型添加的&quot;;</div><br data-v-6296c6c1><div data-v-6296c6c1>console.log(obj.a) . . . // 物件本身</div><br data-v-6296c6c1><br data-v-6296c6c1><div data-v-6296c6c1>function Fun(){</div><div data-v-6296c6c1>. this.a = &quot;在 fun 函數中添加的&quot;;</div><div data-v-6296c6c1>}</div><div data-v-6296c6c1>Fun.prototype.a = &quot;這是 fun 原型添加的&quot;</div><div data-v-6296c6c1>let obj = new Fun();</div><div data-v-6296c6c1>obj.__proto__,a = &quot;這是物件原型添加的&quot;;</div><br data-v-6296c6c1><div data-v-6296c6c1>console.log(obj.a) . . . // 在 fun 函數中添加的</div><br data-v-6296c6c1><br data-v-6296c6c1><div data-v-6296c6c1>function Fun(){</div><div data-v-6296c6c1>}</div><div data-v-6296c6c1>Fun.prototype.a = &quot;這是 fun 原型添加的&quot;</div><div data-v-6296c6c1>let obj = new Fun();</div><div data-v-6296c6c1>obj.__proto__,a = &quot;這是物件原型添加的&quot;;</div><br data-v-6296c6c1><div data-v-6296c6c1>console.log(obj.a) . . . // 這是物件原型添加的</div><br data-v-6296c6c1><br data-v-6296c6c1><div data-v-6296c6c1>function Fun(){</div><div data-v-6296c6c1>}</div><div data-v-6296c6c1>Fun.prototype.a = &quot;這是 fun 原型添加的&quot;</div><div data-v-6296c6c1>let obj = new Fun();</div><br data-v-6296c6c1><div data-v-6296c6c1>console.log(obj.a) . . . // 這是 fun 原型添加的</div><br data-v-6296c6c1><div data-v-6296c6c1>function Fun(){</div><div data-v-6296c6c1>}</div><div data-v-6296c6c1>let obj = new Fun();</div><br data-v-6296c6c1><div data-v-6296c6c1>console.log(obj.a) . . . // undefined</div><br data-v-6296c6c1><br data-v-6296c6c1><div data-v-6296c6c1>function Fun(){</div><div data-v-6296c6c1>}</div><div data-v-6296c6c1>let obj = new Fun();</div><div data-v-6296c6c1>Object.prototype.a = &quot;這是Object添加的&quot;</div><br data-v-6296c6c1><div data-v-6296c6c1>console.log(obj.a) . . . // 這是Object添加的</div><br data-v-6296c6c1><br data-v-6296c6c1><div data-v-6296c6c1>以上原型鏈</div><div data-v-6296c6c1> 先在物件本身找 &gt; 構造函數中找 &gt; 物件原型中找 &gt; 構造函數原型中找 &gt; 物件上一層原型查找 </div><br data-v-6296c6c1><br data-v-6296c6c1><br data-v-6296c6c1><div id="twohand003" class="cardTitle" data-v-6296c6c1> 3. JS作用域+this指向+原型的考题 </div><div data-v-6296c6c1>function fun(){</div><div data-v-6296c6c1>. console.log( 111 );</div><div data-v-6296c6c1>. return &quot;aaa&quot;</div><div data-v-6296c6c1>}</div><br data-v-6296c6c1><div data-v-6296c6c1>console.log( fun ); . . . // 打印出 函數本體</div><div data-v-6296c6c1>console.log( fun() ); . . . // 先打印 111 , 後打印 aaa</div><div data-v-6296c6c1> console.log( new fun() ); . . . //fun{} 返回物件, 因為你new了創建新物件 </div><br data-v-6296c6c1><div data-v-6296c6c1>如果裡面有 this 則指向於 new fun</div><br data-v-6296c6c1><div data-v-6296c6c1>function fun(){</div><div data-v-6296c6c1>. this.xxx = &quot;123&quot;</div><div data-v-6296c6c1>. console.log( 111 );</div><div data-v-6296c6c1>. return &quot;aaa&quot;</div><div data-v-6296c6c1>}</div><br data-v-6296c6c1><div data-v-6296c6c1>console.log( new fun() ); . . . //fun{xxx: &quot;123&quot;}</div><br data-v-6296c6c1><br data-v-6296c6c1><div data-v-6296c6c1>function fun(){</div><div data-v-6296c6c1>. this.xxx = &quot;123&quot;</div><div data-v-6296c6c1>. console.log( this );</div><div data-v-6296c6c1>. console.log( 111 );</div><div data-v-6296c6c1>. return &quot;aaa&quot;</div><div data-v-6296c6c1>}</div><br data-v-6296c6c1><div data-v-6296c6c1>打印出 window</div><div data-v-6296c6c1>普通函數的 this 代表 window</div><br data-v-6296c6c1><div class="cor36" data-v-6296c6c1>輸出多少?</div><div data-v-6296c6c1>function Foo(){</div><div data-v-6296c6c1>. getName = function(){console.log(1)}</div><div data-v-6296c6c1>. return this;</div><div data-v-6296c6c1>}</div><div data-v-6296c6c1>Foo.getName = function(){console.log(2)}</div><div data-v-6296c6c1>Foo.prototype.getName = function(){console.log(3)}</div><div data-v-6296c6c1>var getName = function(){console.log(4)}</div><div data-v-6296c6c1>function getName(){</div><div data-v-6296c6c1>. console.log(5)</div><div data-v-6296c6c1>}</div><br data-v-6296c6c1><div data-v-6296c6c1>Foo.getName(); . . . // 2</div><div data-v-6296c6c1>getName(); . . . // 4</div><div data-v-6296c6c1>Foo().getName();</div><div data-v-6296c6c1>getName();</div><div data-v-6296c6c1>new Foo().getName();</div><br data-v-6296c6c1><div data-v-6296c6c1>1.getName=function...是全局的window.getName=...</div><br data-v-6296c6c1><div data-v-6296c6c1>2.Foo.getName() 先找函數本身 打印出 2</div><br data-v-6296c6c1><div data-v-6296c6c1>3.Foo.getName() 的 Foo 沒有加括號代表他沒有執行</div><br data-v-6296c6c1><div data-v-6296c6c1> 4.getName() 找到變量 var getName =.. 和函數 function getName(){.. </div><div data-v-6296c6c1>(因作用域) 普通變量 &gt; 函數 . . . 所以打印出 4</div><br data-v-6296c6c1><div data-v-6296c6c1>5.Foo().getName();</div><div data-v-6296c6c1>Foo() 先執行 做 //getName = function(){console.log(1)}</div><div data-v-6296c6c1>然後 return this . . . return 出 window</div><div data-v-6296c6c1>所以是 window.getName() . . . 因上上行 所以打印出 1</div><br data-v-6296c6c1><div data-v-6296c6c1>6.getName(); . . . 因上上上行覆蓋, 所以打印出 1</div><br data-v-6296c6c1><div data-v-6296c6c1>7.new Foo().getName(); 物件找方法</div><div data-v-6296c6c1> 先在物件本身找 &gt; 構造函數中找 &gt; 物件原型中找 &gt; 構造函數原型中找 &gt; 物件上一層原型查找 </div><div data-v-6296c6c1>本身沒有</div><div data-v-6296c6c1>構造函數 function Foo(){ 本身裡不是 this. getName是 window.</div><div data-v-6296c6c1>物件原型中找 __proto__ 沒有</div><div data-v-6296c6c1>物件原型和構造函數原型他們是一個原型</div><div data-v-6296c6c1>所以看構造函數原型 , 打印出 3</div><div data-v-6296c6c1>Foo.prototype.getName = function(){console.log(3)}</div><br data-v-6296c6c1><br data-v-6296c6c1><div class="cor36" data-v-6296c6c1>輸出多少?</div><div data-v-6296c6c1>var o = {</div><div data-v-6296c6c1>. a:10,</div><div data-v-6296c6c1>. b:{</div><div data-v-6296c6c1>. . fn:function(){</div><div data-v-6296c6c1>. . . console.log( this.a );</div><div data-v-6296c6c1>. . . console.log( this );</div><div data-v-6296c6c1>. . }</div><div data-v-6296c6c1>. }</div><div data-v-6296c6c1>}</div><div data-v-6296c6c1>o.b.fn()</div><br data-v-6296c6c1><div data-v-6296c6c1>重點看誰執行 fn, 所以 fn 裡面的 this 指向 b</div><div data-v-6296c6c1>console.log( this.a ); . . . 打印 undefined</div><div data-v-6296c6c1>console.log( this ); . . . 打印 fn</div><br data-v-6296c6c1><div class="cor36" data-v-6296c6c1>輸出多少?</div><div data-v-6296c6c1>window.name = &quot;ByteDance&quot;;</div><div data-v-6296c6c1>function A(){</div><div data-v-6296c6c1>. this.name = 123;</div><div data-v-6296c6c1>}</div><div data-v-6296c6c1>A.prototype.getA = function(){</div><div data-v-6296c6c1>. console.log( this );</div><div data-v-6296c6c1>. return this.name + 1;</div><div data-v-6296c6c1>}</div><div data-v-6296c6c1>let a = new A();</div><div data-v-6296c6c1>let funcA = a.getA;</div><div data-v-6296c6c1>funcA();</div><div data-v-6296c6c1>console.log( funcA() )</div><br data-v-6296c6c1><div data-v-6296c6c1>先注意 let funcA = a.getA 的 a.getA 有沒有括號,差很大</div><div data-v-6296c6c1>a.getA 沒括號 裡面代碼不執行 有return則返回函數體</div><div data-v-6296c6c1> a.getA 沒執行, 相當於把這個 A.prototype.getA = function(){ 函數賦給了 funcA </div><div data-v-6296c6c1> funcA() 執行了 A.prototype.getA = function(){ 裡面的 console.log(this) 打印 window </div><div data-v-6296c6c1>console.log( funcA() ) 要打印 return this.name + 1;</div><div data-v-6296c6c1>而 this 代表 window, this.name 找到 &quot;ByteDance&quot;</div><div data-v-6296c6c1>console.log( funcA() ) 打印出 &quot;ByteDance1&quot;</div><br data-v-6296c6c1><div class="cor36" data-v-6296c6c1>輸出多少?</div><div data-v-6296c6c1>window.name = &quot;ByteDance&quot;;</div><div data-v-6296c6c1>function A(){</div><div data-v-6296c6c1>. this.name = 123;</div><div data-v-6296c6c1>}</div><div data-v-6296c6c1>A.prototype.getA = function(){</div><div data-v-6296c6c1>. console.log( this );</div><div data-v-6296c6c1>. return this.name + 1;</div><div data-v-6296c6c1>}</div><div data-v-6296c6c1>let a = new A();</div><div data-v-6296c6c1>let funcA = a.getA();</div><div data-v-6296c6c1>funcA;</div><br data-v-6296c6c1><div data-v-6296c6c1>let funcA = a.getA() 調用直接執行</div><div data-v-6296c6c1>執行 A.prototype.getA = function(){</div><div data-v-6296c6c1>裡面的 console.log( this ) this 指 A</div><div data-v-6296c6c1>打印出 A{name: 123}</div><div data-v-6296c6c1>funcA沒加括號 裡面代碼不執行 有return則返回函數體</div><br data-v-6296c6c1><div class="cor36" data-v-6296c6c1>輸出多少?</div><div data-v-6296c6c1>var length = 10;</div><div data-v-6296c6c1>function fn(){</div><div data-v-6296c6c1>. return this.length</div><div data-v-6296c6c1>}</div><div data-v-6296c6c1>var obj = {</div><div data-v-6296c6c1>. length: 5,</div><div data-v-6296c6c1>. test1: function(){</div><div data-v-6296c6c1>. . return fn();</div><div data-v-6296c6c1>. }</div><div data-v-6296c6c1>}</div><div data-v-6296c6c1>obj.test2 = fn;</div><div data-v-6296c6c1>console.log( obj.test1() );</div><div data-v-6296c6c1>console.log( fn()===obj.test2() );</div><div data-v-6296c6c1>console.log( obj.test1() == obj.test2() );</div><br data-v-6296c6c1><div data-v-6296c6c1>注意 obj.test2 = fn 沒加掛號 相當於 把這個函數賦給了</div><div data-v-6296c6c1>沒加掛號 裡面代碼不執行 有return則返回函數體</div><div data-v-6296c6c1>相當於 把這個 function fn(){ 函數賦給了 obj.test2</div><div data-v-6296c6c1>所以 obj 多了一個 test2: function</div><br data-v-6296c6c1><div data-v-6296c6c1>console.log( obj.test1() )</div><div data-v-6296c6c1>test1 return fn() , fn帶括號要執行</div><div data-v-6296c6c1>fn return this.length, 這個this 指向 window</div><div data-v-6296c6c1>return 10, return 10+1</div><div data-v-6296c6c1>console.log( obj.test1() ) 打印出 11</div><br data-v-6296c6c1><div data-v-6296c6c1>console.log( fn()===obj.test2() )</div><div data-v-6296c6c1>obj.test2() 裡面 return this.length,</div><div data-v-6296c6c1>this 指向 obj , this.length 是 5</div><div data-v-6296c6c1>而 fn() 的 this 指向 window , window.length 是 10</div><div data-v-6296c6c1>console.log( fn()===obj.test2() ) 是 false</div><br data-v-6296c6c1><div data-v-6296c6c1>console.log( obj.test1() == obj.test2() )</div><div data-v-6296c6c1>obj.test2() 上面討論 5</div><div data-v-6296c6c1>obj.test1() 上面討論 11</div><br data-v-6296c6c1><br data-v-6296c6c1><br data-v-6296c6c1><div id="twohand004" class="cardTitle" data-v-6296c6c1>4. JS判斷變量是不是數組？</div><div data-v-6296c6c1>建議 別寫 typeOf</div><br data-v-6296c6c1><div class="cor36" data-v-6296c6c1>方法1: isArray</div><div data-v-6296c6c1>var arr = [1,2,3];</div><div data-v-6296c6c1>console.log( Array.isArray( arr ) ); . . . // true</div><div data-v-6296c6c1>console.log( Array.isArray( {} ) ); . . . // false</div><div data-v-6296c6c1>嚴謹的方法</div><br data-v-6296c6c1><div class="cor36" data-v-6296c6c1>方法2: instanceof</div><div data-v-6296c6c1>console.log( arr instanceof Array ); . . . // true</div><div data-v-6296c6c1>console.log( arr instanceof Object ); . . . // true</div><div data-v-6296c6c1>console.log( arr instanceof {} ); . . . // true</div><div data-v-6296c6c1>arr instanceof {} true 會往原型去找, 他不嚴謹</div><br data-v-6296c6c1><div class="cor36" data-v-6296c6c1>方法3: 原型 prototype</div><div data-v-6296c6c1> console.log( Object.prototype.toString.call(arr) ); . . . [object Array] </div><div data-v-6296c6c1> console.log( Object.prototype.toString.call(arr).indexOf(&quot;Array&quot;) ); </div><div data-v-6296c6c1>不是 -1 就證明他 是陣列</div><div data-v-6296c6c1> console.log( Object.prototype.toString.call(arr).indexOf(&quot;Array&quot;) &gt; -1 ); . . . // true </div><br data-v-6296c6c1><div class="cor36" data-v-6296c6c1>方法4: isPrototypeOf()</div><div data-v-6296c6c1> console.log( Array.prototype.isPrototyprOf(arr) ) . . . // true </div><br data-v-6296c6c1><div class="cor36" data-v-6296c6c1>方法5: constructor</div><div data-v-6296c6c1> console.log( arr.constructor.toString() ) . . . [object Array] </div><div data-v-6296c6c1> console.log( arr.constructor.toString().indexOf(&quot;Array&quot;) ) . . . // true </div><br data-v-6296c6c1><br data-v-6296c6c1><br data-v-6296c6c1><div id="twohand005" class="cardTitle" data-v-6296c6c1> 5. slice是幹嘛的、splice是否會改變原數組? </div><div data-v-6296c6c1>slice 用來擷取</div><div data-v-6296c6c1> slice方法用来截取数组的元素，返回一个新的数组。slice方法有两个参数，第一个参数为截取的开始位置，为数组下标；第二个参数为截取的结束位置。但不包含结束位置的元素 </div><br data-v-6296c6c1><div data-v-6296c6c1>var arr1 = [ &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot; ];</div><br data-v-6296c6c1><div data-v-6296c6c1>var arr2 = arr1.slice( 1,3 );</div><div data-v-6296c6c1> console.log( arr2 , arr1 ); . . . // [ &quot;b&quot;, &quot;c&quot; ] , [ &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot; ] </div><br data-v-6296c6c1><div data-v-6296c6c1>var arr3 = arr1.slice( -3 );</div><div data-v-6296c6c1>console.log( arr3 ); . . . // [ &quot;c&quot;, &quot;d&quot;, &quot;e&quot; ]</div><br data-v-6296c6c1><div data-v-6296c6c1>var arr4 = arr1.slice( 2 );</div><div data-v-6296c6c1>console.log( arr4 ); . . . // [ &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot; ]</div><br data-v-6296c6c1><br data-v-6296c6c1><br data-v-6296c6c1><div data-v-6296c6c1>splice 用來 插入 刪除 替換</div><div data-v-6296c6c1> splice方法用来向数组添加元素或者删除数组某个元素，然后删除的元素。第一个参数为插入元素或者删除元素的位置，第二个参数为要删除的元素数量。后面的每个参数都会依次添加到数组中（从删除的位置开始）。 </div><br data-v-6296c6c1><div data-v-6296c6c1>var arr1 = [ &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot; ];</div><br data-v-6296c6c1><div data-v-6296c6c1>var arr2 = arr1.splice( 1,1 ); . . . // 從 1 開始刪 1 個</div><div data-v-6296c6c1>console.log( arr2 ); . . . // [ &quot;b&quot; ]</div><div data-v-6296c6c1>console.log( arr1 ); . . . // [ &quot;a&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot; ]</div><br data-v-6296c6c1><div data-v-6296c6c1>var arr3 = [ &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot; ];</div><div data-v-6296c6c1>var arr4 = arr3.splice( 1,1,&quot;你好&quot; );</div><div data-v-6296c6c1> console.log( arr4 ); . . . // [ &quot;a&quot;, &quot;你好&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot; ] </div><br data-v-6296c6c1><br data-v-6296c6c1><div data-v-6296c6c1>區別:</div><div data-v-6296c6c1> slice 不改變原數組 返回原數組中的部分元素 用來選擇數組中的元素 </div><br data-v-6296c6c1><div data-v-6296c6c1> splice 改變原數組 返回數組中被刪除的元素组成的新數組 用於在數組中插入或刪除元素 </div><br data-v-6296c6c1><br data-v-6296c6c1><br data-v-6296c6c1><div id="twohand006" class="cardTitle" data-v-6296c6c1>6. JS 數組去重的方式?</div><div data-v-6296c6c1>寫3種:</div><div class="cor36" data-v-6296c6c1>方法1: new set</div><div data-v-6296c6c1>var arr1 = [ 1,2,3,2,4,1 ];</div><div data-v-6296c6c1>console.log( new Set( arr1 ) );</div><div data-v-6296c6c1>發現打印的是物件</div><div data-v-6296c6c1>console.log( Array.form( new Set( arr1 ) ) );</div><div data-v-6296c6c1>打印出陣列</div><div data-v-6296c6c1>也可以</div><div data-v-6296c6c1>console.log( [...new Set( arr1 ) ] );</div><br data-v-6296c6c1><div data-v-6296c6c1>面試可能要你封裝:</div><div data-v-6296c6c1>function unique( arr ){</div><div data-v-6296c6c1>. return [...new Set(arr)]</div><div data-v-6296c6c1>}</div><div data-v-6296c6c1>console.log( unique( arr1 ) );</div><br data-v-6296c6c1><div class="cor36" data-v-6296c6c1>方法2: indexOf</div><div data-v-6296c6c1> indexOf() 方法會回傳給定元素於陣列中第一個被找到之索引，若不存在於陣列中則回傳 -1 </div><br data-v-6296c6c1><div data-v-6296c6c1>var arr2 = [ 1,2,3,2,4,1 ];</div><div data-v-6296c6c1>function unique( arr ){</div><div data-v-6296c6c1>. var brr = [];</div><div data-v-6296c6c1>. for( var i = 0 ; i ＜ arr.length ; i++ ){</div><div data-v-6296c6c1>. . if( brr.indexOf( arr[i] ) == -1 ){</div><div data-v-6296c6c1>. . . brr.push( arr[i] );</div><div data-v-6296c6c1>. . }</div><div data-v-6296c6c1>. }</div><div data-v-6296c6c1>. return brr;</div><div data-v-6296c6c1>}</div><div data-v-6296c6c1>console.log( unique( arr2 ) );</div><br data-v-6296c6c1><div data-v-6296c6c1>目標, 遍歷陣列, 看有沒有在 brr 陣列, 沒有就添加</div><div data-v-6296c6c1>brr去找indexOf(arr[i])</div><div data-v-6296c6c1>第一次去找brr肯定是空的(不存在)就回傳-1就把他推進brr裡面</div><div data-v-6296c6c1>不是-1就不動作 完成。</div><br data-v-6296c6c1><div class="cor36" data-v-6296c6c1>方法3: sort</div><div data-v-6296c6c1>var arr3 = [ 1,2,3,2,4,1 ];</div><div data-v-6296c6c1>function unique( arr ){</div><div data-v-6296c6c1>. arr = arr.sort();</div><div data-v-6296c6c1>. var brr = [];</div><div data-v-6296c6c1>. for( var i = 0 ; i ＜ arr.length ; i++ ){</div><div data-v-6296c6c1>. . if( arr[i] !== arr[ i-1 ] ){</div><div data-v-6296c6c1>. . . brr.push( arr[ i ] );</div><div data-v-6296c6c1>. . }</div><div data-v-6296c6c1>. }</div><div data-v-6296c6c1>. return brr;</div><div data-v-6296c6c1>}</div><div data-v-6296c6c1>console.log( unique( arr3 ) );</div><br data-v-6296c6c1><br data-v-6296c6c1><br data-v-6296c6c1><div class="cardTitle" id="twohand007" data-v-6296c6c1>7. 找出多維數組最大值?</div><div data-v-6296c6c1> 大陣列中包含 4 個小陣列, 分別找到每個小陣列中的最大值, 然後串起來成新陣列 </div><div data-v-6296c6c1>輸入:[</div><div data-v-6296c6c1>. [ 4, 5, 1, 3, ],</div><div data-v-6296c6c1>. [ 13, 27, 18, 26, ],</div><div data-v-6296c6c1>. [ 32, 35, 37, 39, ],</div><div data-v-6296c6c1>. [ 1000, 1001, 857, 1 ],</div><div data-v-6296c6c1>]</div><div data-v-6296c6c1>輸出: [ 5, 27, 39, 1001 ]</div><br data-v-6296c6c1><br data-v-6296c6c1><div data-v-6296c6c1>function fnArr( arr ){</div><div data-v-6296c6c1>. var newArr = [];</div><div data-v-6296c6c1>. arr.forEach(( item, index )=&gt;{</div><div data-v-6296c6c1>. . newArr.push( Math.max( ...item ) )</div><div data-v-6296c6c1>. })</div><div data-v-6296c6c1>. return newArr;</div><div data-v-6296c6c1>}</div><div data-v-6296c6c1>console.log( fnArr([</div><div data-v-6296c6c1>. [ 4, 5, 1, 3, ],</div><div data-v-6296c6c1>. [ 13, 27, 18, 26, ],</div><div data-v-6296c6c1>. [ 32, 35, 37, 39, ],</div><div data-v-6296c6c1>. [ 1000, 1001, 857, 1 ],</div><div data-v-6296c6c1>]));</div><br data-v-6296c6c1><div data-v-6296c6c1>首先 遍歷 item 是每一項 [ 4, 5, 1, 3, ]</div><div data-v-6296c6c1>取裡面最大值 Math.max(...item)</div><br data-v-6296c6c1><br data-v-6296c6c1><br data-v-6296c6c1><div id="twohand008" class="cardTitle" data-v-6296c6c1>8. 給字串新增方法實現功能</div><div data-v-6296c6c1> 給字串物件定義一個addPrefix函數, 當傳入一個字串時, 他會返回新的帶有指定前綴的字串, 例如: </div><div data-v-6296c6c1>console.log( &quot;world&quot;.addPrefix(&quot;hello&quot;) )</div><div data-v-6296c6c1>控制台輸出: &quot;helloworld&quot;</div><br data-v-6296c6c1><div data-v-6296c6c1>var str = &quot;你好&quot;;</div><div data-v-6296c6c1>String.prototype.addTest = function(){</div><div data-v-6296c6c1>. return 111;</div><div data-v-6296c6c1>}</div><div data-v-6296c6c1>console.log( str.addPrefix() ) . . . // 打印 111</div><br data-v-6296c6c1><br data-v-6296c6c1><div data-v-6296c6c1>String.prototype.addTest = function(){</div><div data-v-6296c6c1>. return this;</div><div data-v-6296c6c1>}</div><div data-v-6296c6c1>console.log( str.addPrefix() ) . . . // 打印 你好</div><br data-v-6296c6c1><br data-v-6296c6c1><div data-v-6296c6c1>String.prototype.addTest = function(){</div><div data-v-6296c6c1>. return str + this;</div><div data-v-6296c6c1>}</div><div data-v-6296c6c1> console.log( &quot;world&quot;.addPrefix(&quot;hello&quot;) ) . . . // 打印 worldhello </div><br data-v-6296c6c1><br data-v-6296c6c1><br data-v-6296c6c1><div id="twohand009" class="cardTitle" data-v-6296c6c1> 9. 找出字符串出現最多次數的字符以及次數 </div><div data-v-6296c6c1>判斷一個字串中出現次數最多的字符, 並統計次數</div><div data-v-6296c6c1> charAt() 方法返回一个由给定索引處的單個 UTF-16 碼元構成的新字串。 </div><div data-v-6296c6c1>var john = { . . . //forin複習</div><div data-v-6296c6c1>. firstName: &#39;John&#39;,</div><div data-v-6296c6c1>. lastName: &#39;Doe&#39;</div><div data-v-6296c6c1>};</div><div data-v-6296c6c1>for (var prop in john) {</div><div data-v-6296c6c1>. console.log(prop + &#39;:&#39; + john[prop]);</div><div data-v-6296c6c1>}</div><br data-v-6296c6c1><div data-v-6296c6c1>var str = &quot;aaabbbbbbbbbccccccc&quot;</div><div data-v-6296c6c1>var obj = {};</div><div data-v-6296c6c1>for( var i = 0 ; i ＜ str.length ; i++ ){</div><div data-v-6296c6c1>. var char = str.charAt(i);</div><div data-v-6296c6c1>. if( obj[ char ] ){</div><div data-v-6296c6c1>. . obj[ char ]++</div><div data-v-6296c6c1>. } else {</div><div data-v-6296c6c1>. . obj[ char ] = 1;</div><div data-v-6296c6c1>. }</div><div data-v-6296c6c1>}</div><div data-v-6296c6c1>console.log( obj ); . . . 每個字符和次數都統計出來了</div><br data-v-6296c6c1><div data-v-6296c6c1>目標 弄一個對象 把值放進去 { a:3, b:10, c:15 }</div><div data-v-6296c6c1>遍歷字串, 如果 obj 沒有則 obj[ char ] = 1</div><div data-v-6296c6c1>如果 obj 有則 value值++</div><br data-v-6296c6c1><div data-v-6296c6c1>var max = 0;</div><div data-v-6296c6c1>for( var key in obj ){</div><div data-v-6296c6c1>. if( max ＜ obj[ key ] ){</div><div data-v-6296c6c1>. . max = obj[ key ];</div><div data-v-6296c6c1>. }</div><div data-v-6296c6c1>}</div><div data-v-6296c6c1>console.log( max );</div><br data-v-6296c6c1><div data-v-6296c6c1>目標 到物件的值找最大值 { a:3, b:10, c:15 } 最大值 15</div><div data-v-6296c6c1>遍歷物件 for in</div><div data-v-6296c6c1>如果 max變數 小於 obj[key]</div><div data-v-6296c6c1>key 是物件中每一項 a b c</div><div data-v-6296c6c1>obj[key] 是統計值 3 10 15</div><div data-v-6296c6c1>如果 max變數 小於 obj[key] 就賦值 就找到最大值 15</div><br data-v-6296c6c1><div data-v-6296c6c1>for( var key in obj ){</div><div data-v-6296c6c1>. if( obj[key] == max ){</div><div data-v-6296c6c1>. . console.log( &quot;最多字符是&quot; + key );</div><div data-v-6296c6c1>. . console.log( &quot;出現次數&quot; + max );</div><div data-v-6296c6c1>. }</div><div data-v-6296c6c1>}</div><br data-v-6296c6c1><div data-v-6296c6c1>目標 找到最大值 15 對應的 key</div><div data-v-6296c6c1>如果 obj[key] == max 就找到了</div><br data-v-6296c6c1><br data-v-6296c6c1><br data-v-6296c6c1><div id="twohand010" class="cardTitle" data-v-6296c6c1>10. 作用域考题</div><div data-v-6296c6c1>function demo(){</div><div data-v-6296c6c1>. var n = 2;</div><div data-v-6296c6c1>. if( true ){</div><div data-v-6296c6c1>. . var n = 1;</div><div data-v-6296c6c1>. }</div><div data-v-6296c6c1>. console.log( n );</div><div data-v-6296c6c1>}</div><div data-v-6296c6c1>demo(); . . . // 打印 1</div><br data-v-6296c6c1><div data-v-6296c6c1>function demo(){</div><div data-v-6296c6c1>. let n = 2;</div><div data-v-6296c6c1>. if( true ){</div><div data-v-6296c6c1>. . let n = 1;</div><div data-v-6296c6c1>. }</div><div data-v-6296c6c1>. console.log( n );</div><div data-v-6296c6c1>}</div><div data-v-6296c6c1>demo(); . . . // 打印 2</div><br data-v-6296c6c1><br data-v-6296c6c1><br data-v-6296c6c1><div id="twohand011" class="cardTitle" data-v-6296c6c1>11. 將下列物件進行合併</div><div data-v-6296c6c1>const a = { a:1, b:4 }</div><div data-v-6296c6c1>const b = { b:2, c:3 }</div><br data-v-6296c6c1><div data-v-6296c6c1>方法1: Object.assign</div><div data-v-6296c6c1>const a = { a:1, b:4 }</div><div data-v-6296c6c1>const b = { b:2, c:3 }</div><div data-v-6296c6c1>let obj1 = Object.assign( a, b );</div><div data-v-6296c6c1>console.log( obj1 ); . . . // { a:1, b:2, c:3 }</div><br data-v-6296c6c1><div data-v-6296c6c1>方法2: ...</div><div data-v-6296c6c1>const a = { a:1, b:4 }</div><div data-v-6296c6c1>const b = { b:2, c:3 }</div><div data-v-6296c6c1>;et obj2 = {...a, ...b}</div><div data-v-6296c6c1>console.log( obj1 ); . . . // { a:1, b:2, c:3 }</div><br data-v-6296c6c1><div data-v-6296c6c1>方法3: 自己封裝</div><div data-v-6296c6c1>const a = { a:1, b:4 }</div><div data-v-6296c6c1>const b = { b:2, c:3 }</div><div data-v-6296c6c1>function extend( target, source ){</div><div data-v-6296c6c1>. for( var obj in source )</div><div data-v-6296c6c1>. . console.log( key ); . . . // 打印 b . . 打印 c</div><div data-v-6296c6c1>. . target[ obj ] = source[ obj ];</div><div data-v-6296c6c1>. }</div><div data-v-6296c6c1>. return target;</div><div data-v-6296c6c1>}</div><div data-v-6296c6c1>console.log( extend( a, b ) )</div><br data-v-6296c6c1><br data-v-6296c6c1><br data-v-6296c6c1></div></div></div>',1),Q9=Yd(()=>v("div",{class:"toTopButton"},[v("div",{class:"disCen"},"___"),v("div",{class:"disCen"},"▲")],-1)),Z9=[Q9],ar=Yd(()=>v("div",{class:"toBotButton"},[v("div",{class:"disCen"},"▼"),v("div",{class:"disCen"},"￣")],-1)),sr=[ar],dr={__name:"JsPageTwoOne",setup(a){const s=ua(!1);window.addEventListener("scroll",function(){s.value=window.scrollY>0});function d(){window.scrollTo({top:0,left:0,behavior:"smooth"})}function t(){window.scrollTo({top:999999,left:0,behavior:"smooth"})}function c(e){window.scrollTo({top:document.getElementById(`${e}`).offsetTop,behavior:"smooth"})}return(e,n)=>(da(),ea(Q,null,[v("section",null,[v("div",W9,[v("div",U9,[v("div",K9,[X9,Y9,v("div",{onClick:n[0]||(n[0]=l=>c("twohand001")),class:"leftNavText"}," JS作用域考题 "),v("div",{onClick:n[1]||(n[1]=l=>c("twohand002")),class:"leftNavText"}," JS物件考题 "),v("div",{onClick:n[2]||(n[2]=l=>c("twohand003")),class:"leftNavText"}," JS作用域+this指向+原型的考题 "),v("div",{onClick:n[3]||(n[3]=l=>c("twohand004")),class:"leftNavText"}," JS判斷變量是不是數組 "),v("div",{onClick:n[4]||(n[4]=l=>c("twohand005")),class:"leftNavText"}," slice&splice "),v("div",{onClick:n[5]||(n[5]=l=>c("twohand006")),class:"leftNavText"}," JS數組去重的方式 "),v("div",{onClick:n[6]||(n[6]=l=>c("twohand007")),class:"leftNavText"}," 找出多維數組最大值 "),v("div",{onClick:n[7]||(n[7]=l=>c("twohand008")),class:"leftNavText"}," 給字串新增方法實現功能 "),v("div",{onClick:n[8]||(n[8]=l=>c("twohand009")),class:"leftNavText"}," 找出字符串出現最多次數的字符以及次數 "),v("div",{onClick:n[9]||(n[9]=l=>c("twohand010")),class:"leftNavText"}," 作用域考题 "),v("div",{onClick:n[10]||(n[10]=l=>c("twohand011")),class:"leftNavText"}," 將下列物件進行合併 "),v("div",{onClick:n[11]||(n[11]=l=>c("twohand012")),class:"leftNavText"})])])]),G9]),v("div",null,[X(T(W,{name:"fade",tag:"div"},{default:C(()=>[v("div",{onClick:d,class:"toTop"},Z9)]),_:1},512),[[Y,s.value]]),X(T(W,{name:"fade",tag:"div"},{default:C(()=>[v("div",{onClick:t,class:"toBot"},sr)]),_:1},512),[[Y,s.value]])])],64))}},cr=ia(dr,[["__scopeId","data-v-6296c6c1"]]);const hv=a=>(wa("data-v-5f5831c9"),a=a(),ha(),a),tr=U('<section data-v-5f5831c9><div class="leftNav" data-v-5f5831c9><div class="leftNavContainer" data-v-5f5831c9><div class="leftNavLayout" data-v-5f5831c9><br data-v-5f5831c9><br data-v-5f5831c9><div class="leftNavText" data-v-5f5831c9></div><div class="leftNavText" data-v-5f5831c9></div><div class="leftNavText" data-v-5f5831c9></div><div class="leftNavText" data-v-5f5831c9></div></div></div></div><div class="Main" data-v-5f5831c9><div class="mainContainer" data-v-5f5831c9><div class="mainLayout" data-v-5f5831c9><br data-v-5f5831c9><br data-v-5f5831c9><div class="cardTitle cor36" data-v-5f5831c9>9.輸出結果:</div><div data-v-5f5831c9>alert (true + 1); . . . // 2</div><div data-v-5f5831c9>alert (&quot;name&quot; + true); . . . // nametrue</div><div data-v-5f5831c9>alert (undefined + 1); . . . // NaN</div><div data-v-5f5831c9>alert (typeof null); . . . // object</div><div data-v-5f5831c9>alert (typeof NaN); . . . // number</div><div data-v-5f5831c9>alert (typeof undefined); . . . // undefined</div><br data-v-5f5831c9><div data-v-5f5831c9>1.隱式轉換 true 是 1 false 是 0</div><div data-v-5f5831c9>2.字符串和任何相加, 其他都變字符串, 變成連接</div><br data-v-5f5831c9><br data-v-5f5831c9><br data-v-5f5831c9><div class="cor36" data-v-5f5831c9>輸出多少?</div><div data-v-5f5831c9>for ( var i=0 ; i＜3 ; i++ ) {</div><div data-v-5f5831c9>. setTimeout(function(){</div><div data-v-5f5831c9>. . console.log(i)</div><div data-v-5f5831c9>. },1000*i)</div><div data-v-5f5831c9>}</div><div data-v-5f5831c9>console.log(222)</div><br data-v-5f5831c9><div data-v-5f5831c9>setTimeout 進入事件循環, 而for循環是同步的</div><div data-v-5f5831c9>第一次 i=0 , 0＜3 , 1000*0 的 setTime 進入事件循環列隊</div><div data-v-5f5831c9>第二次 i=1 , 1＜3 , 1000*1 的 setTime 進入事件循環列隊</div><div data-v-5f5831c9>第三次 i=2 , 2＜3 , 1000*2 的 setTime 進入事件循環列隊</div><div data-v-5f5831c9>等for執行完才執行 事件循環裡的 setTimeout</div><div data-v-5f5831c9>i=3 跳出循環</div><div data-v-5f5831c9>結果</div><div data-v-5f5831c9>222</div><div data-v-5f5831c9>3</div><div data-v-5f5831c9>隔1秒再打印3</div><div data-v-5f5831c9>隔1秒再打印3</div><br data-v-5f5831c9><br data-v-5f5831c9><br data-v-5f5831c9><div class="cor36" data-v-5f5831c9>輸出多少?</div><div data-v-5f5831c9>setTimeout(function(){</div><div data-v-5f5831c9>. console.log(&quot;1&quot;);</div><div data-v-5f5831c9>})</div><div data-v-5f5831c9>new Promise((resolve)=&gt;{</div><div data-v-5f5831c9>. console.log( &quot;1 promise 1&quot;);</div><div data-v-5f5831c9>. resolve();</div><div data-v-5f5831c9>}).then(()=&gt;{</div><div data-v-5f5831c9>. console.log(&quot;微1&quot;)</div><div data-v-5f5831c9>}).then(()=&gt;{</div><div data-v-5f5831c9>. console.log(&quot;微2&quot;)</div><div data-v-5f5831c9>})</div><div data-v-5f5831c9>console.log(2);</div><br data-v-5f5831c9><div data-v-5f5831c9>同步 &gt; 微(事件循環) &gt; 宏 &gt; 微 ...</div><div data-v-5f5831c9>console 同步 , promise.them 才是微</div><div data-v-5f5831c9>第一個打印: 1 promise 1</div><div data-v-5f5831c9>第二個打印: 2</div><div data-v-5f5831c9>微任務 .then</div><div data-v-5f5831c9>第三個打印: 微1</div><div data-v-5f5831c9>第四個打印: 微2</div><div data-v-5f5831c9>宏任務 setTimeout</div><div data-v-5f5831c9>第五個打印: 1</div><br data-v-5f5831c9><br data-v-5f5831c9><br data-v-5f5831c9><div class="cor36" data-v-5f5831c9>輸出多少?</div><div data-v-5f5831c9>Promise.resolve(&quot;333&quot;).then(res=&gt;{</div><div data-v-5f5831c9>. console.log( res );</div><div data-v-5f5831c9>. setTimeout(()=&gt;{</div><div data-v-5f5831c9>. . console.log(&quot;Promise setTimeout&quot;)</div><div data-v-5f5831c9>. },0)</div><div data-v-5f5831c9>})</div><div data-v-5f5831c9>setTimeout(()=&gt;{</div><div data-v-5f5831c9>. console.log(111);</div><div data-v-5f5831c9>. Promise.resolve(&quot;setTimeout Promise&quot;).then(res=&gt;{</div><div data-v-5f5831c9>. . console.log( res );</div><div data-v-5f5831c9>. })</div><div data-v-5f5831c9>},0)</div><div data-v-5f5831c9>console.log( 222 );</div><br data-v-5f5831c9><div data-v-5f5831c9>同步 &gt; 微(事件循環) &gt; 宏 &gt; 微 &gt; 宏 ...</div><div data-v-5f5831c9>1.分同步異步 &gt; 先執行同步 &gt; 打印222</div><div data-v-5f5831c9>2.先推微再推宏 &gt; 執行棧順序 &gt; 微Promise.then 宏setTimeout</div><div data-v-5f5831c9>3.執行微 打印333</div><div data-v-5f5831c9> 4.遇到promise推了一個setTimeout &gt; 目前2個宏 &gt; 誰先 &gt; WEBapi先推先出 &gt; 111先 </div><div data-v-5f5831c9>5.執行宏 打印111</div><div data-v-5f5831c9> 6.這個宏任務推了一個微任務Promise.then.setTimeout &gt; 微任務插隊宏任務 </div><div data-v-5f5831c9>7.打印setTimeoutPromise</div><div data-v-5f5831c9>8.最後執行宏任務打印Promise setTimeout</div><br data-v-5f5831c9><br data-v-5f5831c9><br data-v-5f5831c9><div class="cor36" data-v-5f5831c9>輸出多少?</div><div data-v-5f5831c9>(function(){</div><div data-v-5f5831c9>. var a = b = 10;</div><div data-v-5f5831c9>})()</div><div data-v-5f5831c9>console.log(a) . . . // a is not defined</div><div data-v-5f5831c9> console.log(b) . . . // 10 b=10 沒寫默認window.b=10, 相當於全局var b=10 </div><br data-v-5f5831c9><br data-v-5f5831c9><br data-v-5f5831c9><div class="cor36" data-v-5f5831c9>輸出多少?</div><div data-v-5f5831c9>function c(){</div><div data-v-5f5831c9>. var b = 1</div><div data-v-5f5831c9>. function a(){</div><div data-v-5f5831c9>. . console.log(b)</div><div data-v-5f5831c9>. . var b = 2;</div><div data-v-5f5831c9>. . console.log(b)</div><div data-v-5f5831c9>. }</div><div data-v-5f5831c9>. a()</div><div data-v-5f5831c9>. console.log(b)</div><div data-v-5f5831c9>}</div><div data-v-5f5831c9>c()</div><br data-v-5f5831c9><div data-v-5f5831c9>先看本層作用域有沒有此變量 (注意變量提升)</div><div data-v-5f5831c9>a()裡面有var b提升, 第一個console.log(b) . . . // undefined</div><div data-v-5f5831c9>第二個console.log(b) . . . // 2 因為上面有</div><div data-v-5f5831c9>第三個console.log(b)本層有是 1</div><br data-v-5f5831c9><br data-v-5f5831c9><br data-v-5f5831c9><div class="cor36" data-v-5f5831c9>輸出多少?</div><div data-v-5f5831c9>var name = &quot;a&quot;;</div><div data-v-5f5831c9>(function(){</div><div data-v-5f5831c9>. if( typeof name == &quot;undefined&quot; ){</div><div data-v-5f5831c9>. . var name = &quot;b&quot;;</div><div data-v-5f5831c9>. . console.log(&quot;111&quot;+name);</div><div data-v-5f5831c9>. } else {</div><div data-v-5f5831c9>. . console.log(&quot;222&quot;+name);</div><div data-v-5f5831c9>. }</div><div data-v-5f5831c9>})()</div><br data-v-5f5831c9><div data-v-5f5831c9>先看本層作用域有沒有此變量 (注意變量提升)</div><div data-v-5f5831c9>注意JS除了函數外, JS沒有塊級作用域</div><div data-v-5f5831c9>var先變量提升到function, 就算if( false )也是提升</div><div data-v-5f5831c9>所以 var name, 所以name == undefined, 所以打印 111b</div><br data-v-5f5831c9><br data-v-5f5831c9><br data-v-5f5831c9><div class="cor36" data-v-5f5831c9>輸出多少?</div><div data-v-5f5831c9>var bar = 1;</div><div data-v-5f5831c9>function test(){</div><div data-v-5f5831c9>. console.log( bar )</div><div data-v-5f5831c9>. var bar = 2;</div><div data-v-5f5831c9>. console.log( bar )</div><div data-v-5f5831c9>}</div><div data-v-5f5831c9>test();</div><br data-v-5f5831c9><div data-v-5f5831c9>先看本層作用域有沒有此變量 (注意變量提升)</div><div data-v-5f5831c9>第一個bar undefined</div><div data-v-5f5831c9>第二個bar 2</div><br data-v-5f5831c9><br data-v-5f5831c9><br data-v-5f5831c9><div class="cor36" data-v-5f5831c9>輸出多少?</div><div data-v-5f5831c9>function fun(){</div><div data-v-5f5831c9>. a = 10;</div><div data-v-5f5831c9>. console.log( a );</div><div data-v-5f5831c9>. var a = 20;</div><div data-v-5f5831c9>. console.log( a );</div><div data-v-5f5831c9>}</div><div data-v-5f5831c9>fun(); . . . // 第一個打印 10 , 第二個打印 20</div><br data-v-5f5831c9><br data-v-5f5831c9><br data-v-5f5831c9><div class="cor36" data-v-5f5831c9>輸出多少?</div><div data-v-5f5831c9>var obj1 = {</div><div data-v-5f5831c9>. a:&quot;hellow&quot;</div><div data-v-5f5831c9>}</div><div data-v-5f5831c9>var obj2 = obj1;</div><div data-v-5f5831c9>obj2.a= &quot;world&quot;;</div><div data-v-5f5831c9>console.log(obj1);</div><div data-v-5f5831c9>(function(){</div><div data-v-5f5831c9>. console.log( a );</div><div data-v-5f5831c9>. var a = 1;</div><div data-v-5f5831c9>})();</div><div data-v-5f5831c9>第一個打印 {a:world}</div><div data-v-5f5831c9>第二個打印 undefined</div><br data-v-5f5831c9><br data-v-5f5831c9><br data-v-5f5831c9><div class="cor36" data-v-5f5831c9>輸出多少?</div><div data-v-5f5831c9>var a = {}</div><div data-v-5f5831c9>var b = {</div><div data-v-5f5831c9>. key: &quot;a&quot;</div><div data-v-5f5831c9>}</div><div data-v-5f5831c9>var c = {</div><div data-v-5f5831c9>. key: &quot;c&quot;</div><div data-v-5f5831c9>}</div><div data-v-5f5831c9>a[b] = &quot;123&quot;;</div><div data-v-5f5831c9>a[c] = &quot;456&quot;;</div><div data-v-5f5831c9>console.log( a[b] )</div><br data-v-5f5831c9><div data-v-5f5831c9>這相當於 let m = {}</div><div data-v-5f5831c9>m.a = 1;</div><div data-v-5f5831c9>m.a = 2;</div><div data-v-5f5831c9>往物件裡面加內容,物件的key為字串</div><div data-v-5f5831c9>結果為 456</div><div data-v-5f5831c9>for(var k in a){</div><div data-v-5f5831c9>. console.log( typeof k )</div><div data-v-5f5831c9>}</div><br data-v-5f5831c9><br data-v-5f5831c9><br data-v-5f5831c9><div class="cor36" data-v-5f5831c9>輸出多少?</div><div data-v-5f5831c9>function Foo(){</div><div data-v-5f5831c9>. getName = function(){console.log(1)}</div><div data-v-5f5831c9>. return this;</div><div data-v-5f5831c9>}</div><div data-v-5f5831c9>Foo.getName = function(){console.log(2)}</div><div data-v-5f5831c9>Foo.prototype.getName = function(){console.log(3)}</div><div data-v-5f5831c9>var getName = function(){console.log(4)}</div><div data-v-5f5831c9>function getName(){</div><div data-v-5f5831c9>. console.log(5)</div><div data-v-5f5831c9>}</div><br data-v-5f5831c9><div data-v-5f5831c9>Foo.getName(); . . . // 2</div><div data-v-5f5831c9>getName(); . . . // 4</div><div data-v-5f5831c9>Foo().getName();</div><div data-v-5f5831c9>getName();</div><div data-v-5f5831c9>new Foo().getName();</div><br data-v-5f5831c9><div data-v-5f5831c9>1.getName=function...是全局的window.getName=...</div><br data-v-5f5831c9><div data-v-5f5831c9>2.Foo.getName() 先找函數本身 打印出 2</div><br data-v-5f5831c9><div data-v-5f5831c9>3.Foo.getName() 的 Foo 沒有加括號代表他沒有執行</div><br data-v-5f5831c9><div data-v-5f5831c9> 4.getName() 找到變量 var getName =.. 和函數 function getName(){.. </div><div data-v-5f5831c9>(因作用域) 普通變量 &gt; 函數 . . . 所以打印出 4</div><br data-v-5f5831c9><div data-v-5f5831c9>5.Foo().getName();</div><div data-v-5f5831c9>Foo() 先執行 做 //getName = function(){console.log(1)}</div><div data-v-5f5831c9>然後 return this . . . return 出 window</div><div data-v-5f5831c9>所以是 window.getName() . . . 因上上行 所以打印出 1</div><br data-v-5f5831c9><div data-v-5f5831c9>6.getName(); . . . 因上上上行覆蓋, 所以打印出 1</div><br data-v-5f5831c9><div data-v-5f5831c9>7.new Foo().getName(); 物件找方法</div><div data-v-5f5831c9> 先在物件本身找 &gt; 構造函數中找 &gt; 物件原型中找 &gt; 構造函數原型中找 &gt; 物件上一層原型查找 </div><div data-v-5f5831c9>本身沒有</div><div data-v-5f5831c9>構造函數 function Foo(){ 本身裡不是 this. getName是 window.</div><div data-v-5f5831c9>物件原型中找 __proto__ 沒有</div><div data-v-5f5831c9>物件原型和構造函數原型他們是一個原型</div><div data-v-5f5831c9>所以看構造函數原型 , 打印出 3</div><div data-v-5f5831c9>Foo.prototype.getName = function(){console.log(3)}</div><br data-v-5f5831c9><br data-v-5f5831c9><br data-v-5f5831c9><div class="cor36" data-v-5f5831c9>輸出多少?</div><div data-v-5f5831c9>var o = {</div><div data-v-5f5831c9>. a:10,</div><div data-v-5f5831c9>. b:{</div><div data-v-5f5831c9>. . fn:function(){</div><div data-v-5f5831c9>. . . console.log( this.a );</div><div data-v-5f5831c9>. . . console.log( this );</div><div data-v-5f5831c9>. . }</div><div data-v-5f5831c9>. }</div><div data-v-5f5831c9>}</div><div data-v-5f5831c9>o.b.fn()</div><br data-v-5f5831c9><div data-v-5f5831c9>重點看誰執行 fn, 所以 fn 裡面的 this 指向 b</div><div data-v-5f5831c9>console.log( this.a ); . . . 打印 undefined</div><div data-v-5f5831c9>console.log( this ); . . . 打印 fn</div><br data-v-5f5831c9><br data-v-5f5831c9><br data-v-5f5831c9><div class="cor36" data-v-5f5831c9>輸出多少?</div><div data-v-5f5831c9>window.name = &quot;ByteDance&quot;;</div><div data-v-5f5831c9>function A(){</div><div data-v-5f5831c9>. this.name = 123;</div><div data-v-5f5831c9>}</div><div data-v-5f5831c9>A.prototype.getA = function(){</div><div data-v-5f5831c9>. console.log( this );</div><div data-v-5f5831c9>. return this.name + 1;</div><div data-v-5f5831c9>}</div><div data-v-5f5831c9>let a = new A();</div><div data-v-5f5831c9>let funcA = a.getA;</div><div data-v-5f5831c9>funcA();</div><div data-v-5f5831c9>console.log( funcA() )</div><br data-v-5f5831c9><div data-v-5f5831c9>先注意 let funcA = a.getA 的 a.getA 有沒有括號,差很大</div><div data-v-5f5831c9>a.getA 沒括號 裡面代碼不執行 返回函數體</div><div data-v-5f5831c9> a.getA 沒執行, 相當於把這個 A.prototype.getA = function(){ 函數賦給了 funcA </div><div data-v-5f5831c9> funcA() 執行了 A.prototype.getA = function(){ 裡面的 console.log(this) 打印 window </div><div data-v-5f5831c9>console.log( funcA() ) 要打印 return this.name + 1;</div><div data-v-5f5831c9>而 this 代表 window, this.name 找到 &quot;ByteDance&quot;</div><div data-v-5f5831c9>console.log( funcA() ) 打印出 &quot;ByteDance1&quot;</div><br data-v-5f5831c9><br data-v-5f5831c9><br data-v-5f5831c9><div class="cor36" data-v-5f5831c9>輸出多少?</div><div data-v-5f5831c9>window.name = &quot;ByteDance&quot;;</div><div data-v-5f5831c9>function A(){</div><div data-v-5f5831c9>. this.name = 123;</div><div data-v-5f5831c9>}</div><div data-v-5f5831c9>A.prototype.getA = function(){</div><div data-v-5f5831c9>. console.log( this );</div><div data-v-5f5831c9>. return this.name + 1;</div><div data-v-5f5831c9>}</div><div data-v-5f5831c9>let a = new A();</div><div data-v-5f5831c9>let funcA = a.getA();</div><div data-v-5f5831c9>funcA;</div><br data-v-5f5831c9><div data-v-5f5831c9>let funcA = a.getA() 調用直接執行</div><div data-v-5f5831c9>執行 A.prototype.getA = function(){</div><div data-v-5f5831c9>裡面的 console.log( this ) this 指 A</div><div data-v-5f5831c9>打印出 A{name: 123}</div><div data-v-5f5831c9>funcA沒加括號 裡面代碼不執行 有return則返回函數體</div><br data-v-5f5831c9><br data-v-5f5831c9><br data-v-5f5831c9><div class="cor36" data-v-5f5831c9>輸出多少?</div><div data-v-5f5831c9>var length = 10;</div><div data-v-5f5831c9>function fn(){</div><div data-v-5f5831c9>. return this.length</div><div data-v-5f5831c9>}</div><div data-v-5f5831c9>var obj = {</div><div data-v-5f5831c9>. length: 5,</div><div data-v-5f5831c9>. test1: function(){</div><div data-v-5f5831c9>. . return fn();</div><div data-v-5f5831c9>. }</div><div data-v-5f5831c9>}</div><div data-v-5f5831c9>obj.test2 = fn;</div><div data-v-5f5831c9>console.log( obj.test1() );</div><div data-v-5f5831c9>console.log( fn()===obj.test2() );</div><div data-v-5f5831c9>console.log( obj.test1() == obj.test2() );</div><br data-v-5f5831c9><div data-v-5f5831c9>注意 obj.test2 = fn 沒加掛號 相當於 把這個函數賦給了</div><div data-v-5f5831c9>沒加掛號 裡面代碼不執行 有return則返回函數體</div><div data-v-5f5831c9>相當於 把這個 function fn(){ 函數賦給了 obj.test2</div><div data-v-5f5831c9>所以 obj 多了一個 test2: function</div><br data-v-5f5831c9><div data-v-5f5831c9>console.log( obj.test1() )</div><div data-v-5f5831c9>test1 return fn() , fn帶括號要執行</div><div data-v-5f5831c9>fn return this.length, 這個this 指向 window</div><div data-v-5f5831c9>return 10, return 10+1</div><div data-v-5f5831c9>console.log( obj.test1() ) 打印出 11</div><br data-v-5f5831c9><div data-v-5f5831c9>console.log( fn()===obj.test2() )</div><div data-v-5f5831c9>obj.test2() 裡面 return this.length,</div><div data-v-5f5831c9>this 指向 obj , this.length 是 5</div><div data-v-5f5831c9>而 fn() 的 this 指向 window , window.length 是 10</div><div data-v-5f5831c9>console.log( fn()===obj.test2() ) 是 false</div><br data-v-5f5831c9><div data-v-5f5831c9>console.log( obj.test1() == obj.test2() )</div><div data-v-5f5831c9>obj.test2() 上面討論 5</div><div data-v-5f5831c9>obj.test1() 上面討論 11</div><br data-v-5f5831c9><br data-v-5f5831c9><br data-v-5f5831c9><br data-v-5f5831c9><div class="cor36" data-v-5f5831c9>如何用 indexOf 數組去重?</div><div data-v-5f5831c9> indexOf() 方法會回傳給定元素於陣列中第一個被找到之索引，若不存在於陣列中則回傳 -1 </div><br data-v-5f5831c9><div data-v-5f5831c9>var arr2 = [ 1,2,3,2,4,1 ];</div><div data-v-5f5831c9>function unique( arr ){</div><div data-v-5f5831c9>. var brr = [];</div><div data-v-5f5831c9>. for( var i = 0 ; i ＜ arr.length ; i++ ){</div><div data-v-5f5831c9>. . if( brr.indexOf( arr[i] ) == -1 ){</div><div data-v-5f5831c9>. . . brr.push( arr[i] );</div><div data-v-5f5831c9>. . }</div><div data-v-5f5831c9>. }</div><div data-v-5f5831c9>. return brr;</div><div data-v-5f5831c9>}</div><div data-v-5f5831c9>console.log( unique( arr2 ) );</div><br data-v-5f5831c9><div data-v-5f5831c9>目標, 遍歷陣列, 看有沒有在 brr 陣列, 沒有就添加</div><div data-v-5f5831c9>brr去找indexOf(arr[i])</div><div data-v-5f5831c9>第一次去找brr肯定是空的(不存在)就回傳-1就把他推進brr裡面</div><div data-v-5f5831c9>不是-1就不動作 完成。</div><br data-v-5f5831c9><br data-v-5f5831c9><br data-v-5f5831c9><br data-v-5f5831c9><div class="cor36" data-v-5f5831c9>找出多维数组最大值?</div><div data-v-5f5831c9> 大陣列中包含 4 個小陣列, 分別找到每個小陣列中的最大值, 然後串起來成新陣列 </div><div data-v-5f5831c9>輸入:[</div><div data-v-5f5831c9>. [ 4, 5, 1, 3, ],</div><div data-v-5f5831c9>. [ 13, 27, 18, 26, ],</div><div data-v-5f5831c9>. [ 32, 35, 37, 39, ],</div><div data-v-5f5831c9>. [ 1000, 1001, 857, 1 ],</div><div data-v-5f5831c9>]</div><div data-v-5f5831c9>輸出: [ 5, 27, 39, 1001 ]</div><br data-v-5f5831c9><br data-v-5f5831c9><div data-v-5f5831c9>function fnArr( arr ){</div><div data-v-5f5831c9>. var newArr = [];</div><div data-v-5f5831c9>. arr.forEach(( item, index )=&gt;{</div><div data-v-5f5831c9>. . newArr.push( Math.max( ...item ) )</div><div data-v-5f5831c9>. })</div><div data-v-5f5831c9>. return newArr;</div><div data-v-5f5831c9>}</div><div data-v-5f5831c9>console.log( fnArr([</div><div data-v-5f5831c9>. [ 4, 5, 1, 3, ],</div><div data-v-5f5831c9>. [ 13, 27, 18, 26, ],</div><div data-v-5f5831c9>. [ 32, 35, 37, 39, ],</div><div data-v-5f5831c9>. [ 1000, 1001, 857, 1 ],</div><div data-v-5f5831c9>]));</div><br data-v-5f5831c9><div data-v-5f5831c9>首先 遍歷 item 是每一項 [ 4, 5, 1, 3, ]</div><div data-v-5f5831c9>取裡面最大值 Math.max(...item)</div><br data-v-5f5831c9><br data-v-5f5831c9><br data-v-5f5831c9><div class="cor36" data-v-5f5831c9> 給字串物件定義一個addPrefix函數, 當傳入一個字串時, 他會返回新的帶有指定前綴的字串, 例如: </div><div data-v-5f5831c9>console.log( &quot;world&quot;.addPrefix(&quot;hello&quot;) )</div><div data-v-5f5831c9>控制台輸出: &quot;helloworld&quot;</div><br data-v-5f5831c9><div data-v-5f5831c9>var str = &quot;你好&quot;;</div><div data-v-5f5831c9>String.prototype.addTest = function(){</div><div data-v-5f5831c9>. return 111;</div><div data-v-5f5831c9>}</div><div data-v-5f5831c9>console.log( str.addPrefix() ) . . . // 打印 111</div><br data-v-5f5831c9><br data-v-5f5831c9><div data-v-5f5831c9>String.prototype.addTest = function(){</div><div data-v-5f5831c9>. return this;</div><div data-v-5f5831c9>}</div><div data-v-5f5831c9>console.log( str.addPrefix() ) . . . // 打印 你好</div><br data-v-5f5831c9><br data-v-5f5831c9><div data-v-5f5831c9>String.prototype.addTest = function(){</div><div data-v-5f5831c9>. return str + this;</div><div data-v-5f5831c9>}</div><div data-v-5f5831c9> console.log( &quot;world&quot;.addPrefix(&quot;hello&quot;) ) . . . // 打印 worldhello </div><br data-v-5f5831c9><br data-v-5f5831c9><br data-v-5f5831c9><br data-v-5f5831c9><div class="cor36" data-v-5f5831c9>判斷一個字串中出現次數最多的字符, 並統計次數</div><div data-v-5f5831c9> charAt() 方法返回一个由给定索引处的单个 UTF-16 码元构成的新字符串。 </div><div data-v-5f5831c9>var john = { . . . //forin複習</div><div data-v-5f5831c9>. firstName: &#39;John&#39;,</div><div data-v-5f5831c9>. lastName: &#39;Doe&#39;</div><div data-v-5f5831c9>};</div><div data-v-5f5831c9>for (var prop in john) {</div><div data-v-5f5831c9>. console.log(prop + &#39;:&#39; + john[prop]);</div><div data-v-5f5831c9>}</div><br data-v-5f5831c9><div data-v-5f5831c9>var str = &quot;aaabbbbbbbbbccccccc&quot;</div><div data-v-5f5831c9>var obj = {};</div><div data-v-5f5831c9>for( var i = 0 ; i ＜ str.length ; i++ ){</div><div data-v-5f5831c9>. var char = str.charAt(i);</div><div data-v-5f5831c9>. if( obj[ char ] ){</div><div data-v-5f5831c9>. . obj[ char ]++</div><div data-v-5f5831c9>. } else {</div><div data-v-5f5831c9>. . obj[ char ] = 1;</div><div data-v-5f5831c9>. }</div><div data-v-5f5831c9>}</div><div data-v-5f5831c9>console.log( obj ); . . . 每個字符和次數都統計出來了</div><br data-v-5f5831c9><div data-v-5f5831c9>目標 弄一個對象 把值放進去 { a:3, b:10, c:15 }</div><div data-v-5f5831c9>遍歷字串, 如果 obj 沒有則 obj[ char ] = 1</div><div data-v-5f5831c9>如果 obj 有則 value值++</div><br data-v-5f5831c9><div data-v-5f5831c9>var max = 0;</div><div data-v-5f5831c9>for( var key in obj ){</div><div data-v-5f5831c9>. if( max ＜ obj[ key ] ){</div><div data-v-5f5831c9>. . max = obj[ key ];</div><div data-v-5f5831c9>. }</div><div data-v-5f5831c9>}</div><div data-v-5f5831c9>console.log( max );</div><br data-v-5f5831c9><div data-v-5f5831c9>目標 到物件的值找最大值 { a:3, b:10, c:15 } 最大值 15</div><div data-v-5f5831c9>遍歷物件 for in</div><div data-v-5f5831c9>如果 max變數 小於 obj[key]</div><div data-v-5f5831c9>key 是物件中每一項 a b c</div><div data-v-5f5831c9>obj[key] 是統計值 3 10 15</div><div data-v-5f5831c9>如果 max變數 小於 obj[key] 就賦值 就找到最大值 15</div><br data-v-5f5831c9><div data-v-5f5831c9>for( var key in obj ){</div><div data-v-5f5831c9>. if( obj[key] == max ){</div><div data-v-5f5831c9>. . console.log( &quot;最多字符是&quot; + key );</div><div data-v-5f5831c9>. . console.log( &quot;出現次數&quot; + max );</div><div data-v-5f5831c9>. }</div><div data-v-5f5831c9>}</div><br data-v-5f5831c9><div data-v-5f5831c9>目標 找到最大值 15 對應的 key</div><div data-v-5f5831c9>如果 obj[key] == max 就找到了</div><br data-v-5f5831c9><br data-v-5f5831c9><br data-v-5f5831c9><br data-v-5f5831c9><div class="cor36" data-v-5f5831c9>輸出多少?</div><div data-v-5f5831c9>function demo(){</div><div data-v-5f5831c9>. var n = 2;</div><div data-v-5f5831c9>. if( true ){</div><div data-v-5f5831c9>. . var n = 1;</div><div data-v-5f5831c9>. }</div><div data-v-5f5831c9>. console.log( n );</div><div data-v-5f5831c9>}</div><div data-v-5f5831c9>demo(); . . . // 打印 1</div><br data-v-5f5831c9><br data-v-5f5831c9><br data-v-5f5831c9><br data-v-5f5831c9><div class="cor36" data-v-5f5831c9>輸出多少?</div><div data-v-5f5831c9>function demo(){</div><div data-v-5f5831c9>. let n = 2;</div><div data-v-5f5831c9>. if( true ){</div><div data-v-5f5831c9>. . let n = 1;</div><div data-v-5f5831c9>. }</div><div data-v-5f5831c9>. console.log( n );</div><div data-v-5f5831c9>}</div><div data-v-5f5831c9>demo(); . . . // 打印 2</div><br data-v-5f5831c9><br data-v-5f5831c9><br data-v-5f5831c9><br data-v-5f5831c9><div class="cor36" data-v-5f5831c9>合併</div><div data-v-5f5831c9>const a = { a:1, b:4 }</div><div data-v-5f5831c9>const b = { b:2, c:3 }</div><div data-v-5f5831c9>let obj1 = Object.assign( a, b );</div><div data-v-5f5831c9>console.log( obj1 ); . . . // { a:1, b:2, c:3 }</div><br data-v-5f5831c9><br data-v-5f5831c9><br data-v-5f5831c9><br data-v-5f5831c9><div class="cor36" data-v-5f5831c9>合併</div><div data-v-5f5831c9>const a = { a:1, b:4 }</div><div data-v-5f5831c9>const b = { b:2, c:3 }</div><div data-v-5f5831c9>let obj2 = {...a, ...b}</div><div data-v-5f5831c9>console.log( obj1 ); . . . // { a:1, b:2, c:3 }</div><br data-v-5f5831c9><br data-v-5f5831c9></div></div></div></section>',1),nr=hv(()=>v("div",{class:"toTopButton"},[v("div",{class:"disCen"},"___"),v("div",{class:"disCen"},"▲")],-1)),vr=[nr],er=hv(()=>v("div",{class:"toBotButton"},[v("div",{class:"disCen"},"▼"),v("div",{class:"disCen"},"￣")],-1)),pr=[er],lr={__name:"JsPageTwoTwo",setup(a){const s=ua(!1);window.addEventListener("scroll",function(){s.value=window.scrollY>0});function d(){window.scrollTo({top:0,left:0,behavior:"smooth"})}function t(){window.scrollTo({top:999999,left:0,behavior:"smooth"})}return(c,e)=>(da(),ea(Q,null,[tr,v("div",null,[X(T(W,{name:"fade",tag:"div"},{default:C(()=>[v("div",{onClick:d,class:"toTop"},vr)]),_:1},512),[[Y,s.value]]),X(T(W,{name:"fade",tag:"div"},{default:C(()=>[v("div",{onClick:t,class:"toBot"},pr)]),_:1},512),[[Y,s.value]])])],64))}},br=ia(lr,[["__scopeId","data-v-5f5831c9"]]);const kv=a=>(wa("data-v-74371c88"),a=a(),ha(),a),ir=U('<section data-v-74371c88><div class="leftNav" data-v-74371c88><div class="leftNavContainer" data-v-74371c88><div class="leftNavLayout" data-v-74371c88><br data-v-74371c88><br data-v-74371c88><div class="leftNavText" data-v-74371c88>1</div><div class="leftNavText" data-v-74371c88>1</div><div class="leftNavText" data-v-74371c88>1</div><div class="leftNavText" data-v-74371c88></div><div class="leftNavText" data-v-74371c88></div><div class="leftNavText" data-v-74371c88></div><div class="leftNavText" data-v-74371c88></div></div></div></div><div class="Main" data-v-74371c88><div class="mainContainer" data-v-74371c88><div class="mainLayout" data-v-74371c88><div class="articleCardTitle cor36" data-v-74371c88>[ ] ≫</div></div></div></div></section>',1),rr=kv(()=>v("div",{class:"toTopButton"},[v("div",{class:"disCen"},"___"),v("div",{class:"disCen"},"▲")],-1)),fr=[rr],or=kv(()=>v("div",{class:"toBotButton"},[v("div",{class:"disCen"},"▼"),v("div",{class:"disCen"},"￣")],-1)),ur=[or],mr={__name:"JsPageTwoThree",setup(a){const s=ua(!1);window.addEventListener("scroll",function(){s.value=window.scrollY>0});function d(){window.scrollTo({top:0,left:0,behavior:"smooth"})}function t(){window.scrollTo({top:999999,left:0,behavior:"smooth"})}return(c,e)=>(da(),ea(Q,null,[ir,v("div",null,[X(T(W,{name:"fade",tag:"div"},{default:C(()=>[v("div",{onClick:d,class:"toTop"},fr)]),_:1},512),[[Y,s.value]]),X(T(W,{name:"fade",tag:"div"},{default:C(()=>[v("div",{onClick:t,class:"toBot"},ur)]),_:1},512),[[Y,s.value]])])],64))}},wr=ia(mr,[["__scopeId","data-v-74371c88"]]);const hr=a=>(wa("data-v-f908c1d0"),a=a(),ha(),a),kr={class:"leftNav"},gr={class:"leftNavContainer"},Tr={class:"leftNavLayout"},_r=hr(()=>v("br",null,null,-1)),zr={class:"Main"},Sr={class:"mainContainer"},qr={class:"mainLayout"},yr={__name:"JsPageThree",setup(a){const s=ua(!1);return window.addEventListener("scroll",function(){s.value=window.scrollY>0}),(d,t)=>{const c=za("RouterLink"),e=za("router-view");return da(),ea("section",null,[v("div",kr,[v("div",gr,[v("div",Tr,[_r,v("div",null,[T(c,{to:"/js"},{default:C(()=>[fa("1.作用域")]),_:1})]),v("div",null,[T(c,{to:"/js/function"},{default:C(()=>[fa("2.函數進階")]),_:1})]),v("div",null,[T(c,{to:"/js/destructuringassignment"},{default:C(()=>[fa("3.解構賦值")]),_:1})]),v("div",null,[T(c,{to:"/js/method"},{default:C(()=>[fa("4.數組方法")]),_:1})]),v("div",null,[T(c,{to:"/js/object"},{default:C(()=>[fa("5.創建物件")]),_:1})]),v("div",null,[T(c,{to:"/js/prototype"},{default:C(()=>[fa("6.物件導向")]),_:1})]),v("div",null,[T(c,{to:"/js/tips"},{default:C(()=>[fa("7.技巧")]),_:1})]),v("div",null,[T(c,{to:"/js/dom"},{default:C(()=>[fa("8.事件")]),_:1})]),v("div",null,[T(c,{to:"/js/ajax"},{default:C(()=>[fa("9.AJAX")]),_:1})]),v("div",null,[T(c,{to:"/js"})]),v("div",null,[T(c,{to:"/js"})]),v("div",null,[T(c,{to:"/js"})]),v("div",null,[T(c,{to:"/js"})]),v("div",null,[T(c,{to:"/js"})]),v("div",null,[T(c,{to:"/js"})])])])]),v("div",zr,[v("div",Sr,[v("div",qr,[T(e)])])])])}}},Cr=ia(yr,[["__scopeId","data-v-f908c1d0"]]);const gv=a=>(wa("data-v-75b82ad2"),a=a(),ha(),a),xr={class:"leftNav"},Lr={class:"leftNavContainer"},jr={class:"leftNavLayout"},Pr=U('<div class="Main" data-v-75b82ad2><div class="mainContainer" data-v-75b82ad2><div class="mainLayout" data-v-75b82ad2><br data-v-75b82ad2><br data-v-75b82ad2><p class="fz28" data-v-75b82ad2>總分總</p><p class="fz28" data-v-75b82ad2>1.要講哪個知識點</p><p class="fz28" data-v-75b82ad2>2.細講</p><p class="fz28" data-v-75b82ad2>3.總結</p><br data-v-75b82ad2><br data-v-75b82ad2><div class="articleCardTitle cor36 fz34" data-v-75b82ad2>1. 作用域</div><p class="fz28" data-v-75b82ad2>作用域 scope 規定了變量能夠被訪問的&quot;範圍&quot; ,</p><br data-v-75b82ad2><br data-v-75b82ad2><p class="fz28" data-v-75b82ad2>離開這個&quot;範圍&quot;變量便不能被訪問。</p><br data-v-75b82ad2><br data-v-75b82ad2><div id="scope001" class="articleCardTitle cor36 fz34" data-v-75b82ad2> 1.1 局部作用域 </div><p class="fz28" data-v-75b82ad2> 在函數內部聲明的變量只能在函數內部被訪問，外部無法直接訪問。 </p><br data-v-75b82ad2><br data-v-75b82ad2><div class="bgcVS fz30" data-v-75b82ad2><br data-v-75b82ad2><br data-v-75b82ad2><div data-v-75b82ad2><span class="function" data-v-75b82ad2>function </span><span class="word" data-v-75b82ad2>getSun</span> <span class="brackets" data-v-75b82ad2>(){</span></div><div class="pTwo" data-v-75b82ad2><span class="function" data-v-75b82ad2>const </span><span class="word" data-v-75b82ad2>num</span> <span class="then" data-v-75b82ad2>=</span><span class="number" data-v-75b82ad2>10</span></div><div class="brackets" data-v-75b82ad2>}</div><div data-v-75b82ad2><span class="word" data-v-75b82ad2>console.</span><span class="variable" data-v-75b82ad2>log</span> <span class="brackets" data-v-75b82ad2>(</span><span class="word" data-v-75b82ad2>num</span> <span class="brackets" data-v-75b82ad2>) </span><span class="comment" data-v-75b82ad2>// 報錯函數外部不能使用局部作用域變量</span></div><br data-v-75b82ad2><br data-v-75b82ad2></div><br data-v-75b82ad2><br data-v-75b82ad2><p class="fz28" data-v-75b82ad2>結論</p><p class="fz28" data-v-75b82ad2>1.函數內部聲明變量, 外部無法訪問</p><p class="fz28" data-v-75b82ad2>2.函數的參數也是函數內部的局部變量</p><p class="fz28" data-v-75b82ad2>3.不同函數內部聲明的變量無法互相訪問</p><p class="fz28" data-v-75b82ad2>4.函數執行完, 函數內部的變量實際被清空了</p><br data-v-75b82ad2><br data-v-75b82ad2><br data-v-75b82ad2><br data-v-75b82ad2><div class="articleCardTitle cor36 fz34" data-v-75b82ad2>1.2 塊作用域</div><p class="fz28" data-v-75b82ad2> 在 JS 中用 {} 包裹為代碼塊, 代碼塊內部聲明變量外部 &quot;有可能&quot; 無法被訪問 </p><br data-v-75b82ad2><br data-v-75b82ad2><div class="bgcVS fz30" data-v-75b82ad2><br data-v-75b82ad2><br data-v-75b82ad2><div data-v-75b82ad2><span class="then" data-v-75b82ad2>for </span> <span class="brackets" data-v-75b82ad2>(</span><span class="function" data-v-75b82ad2>let </span> <span class="word" data-v-75b82ad2>i</span><span class="then" data-v-75b82ad2>=</span> <span class="number" data-v-75b82ad2>1</span><span class="then" data-v-75b82ad2>;</span> <span class="word" data-v-75b82ad2>i</span><span class="word" data-v-75b82ad2>＜=</span> <span class="number" data-v-75b82ad2>3</span><span class="then" data-v-75b82ad2>;</span> <span class="word" data-v-75b82ad2>i</span><span class="then" data-v-75b82ad2>++</span> <span class="brackets" data-v-75b82ad2>){</span></div><div class="pTwo" data-v-75b82ad2><span class="word" data-v-75b82ad2>console.</span><span class="variable" data-v-75b82ad2>log</span> <span class="brackets" data-v-75b82ad2>(</span><span class="word" data-v-75b82ad2>i</span> <span class="brackets" data-v-75b82ad2>)</span><span class="comment" data-v-75b82ad2>//塊作用域 // 依序打印 1 2 3</span></div><div class="brackets" data-v-75b82ad2>}</div><div data-v-75b82ad2><span class="word" data-v-75b82ad2>console.</span><span class="variable" data-v-75b82ad2>log</span> <span class="brackets" data-v-75b82ad2>(</span><span class="word" data-v-75b82ad2>i</span> <span class="brackets" data-v-75b82ad2>)</span><span class="comment" data-v-75b82ad2>// undefined</span></div><br data-v-75b82ad2><br data-v-75b82ad2><div class="comment" data-v-75b82ad2>var 沒塊級作用域</div><br data-v-75b82ad2><br data-v-75b82ad2><div data-v-75b82ad2><span class="then" data-v-75b82ad2>for </span> <span class="brackets" data-v-75b82ad2>(</span><span class="function" data-v-75b82ad2>var </span> <span class="word" data-v-75b82ad2>i</span><span class="then" data-v-75b82ad2>=</span> <span class="number" data-v-75b82ad2>1</span><span class="then" data-v-75b82ad2>;</span> <span class="word" data-v-75b82ad2>i</span><span class="word" data-v-75b82ad2>＜=</span> <span class="number" data-v-75b82ad2>3</span><span class="then" data-v-75b82ad2>;</span> <span class="word" data-v-75b82ad2>i</span><span class="then" data-v-75b82ad2>++</span> <span class="brackets" data-v-75b82ad2>){</span></div><div class="pTwo" data-v-75b82ad2><span class="word" data-v-75b82ad2>console.</span><span class="variable" data-v-75b82ad2>log</span> <span class="brackets" data-v-75b82ad2>(</span><span class="word" data-v-75b82ad2>i</span> <span class="brackets" data-v-75b82ad2>)</span><span class="comment" data-v-75b82ad2>//塊作用域 // 依序打印 1 2 3</span></div><div class="brackets" data-v-75b82ad2>}</div><div data-v-75b82ad2><span class="word" data-v-75b82ad2>console.</span><span class="variable" data-v-75b82ad2>log</span> <span class="brackets" data-v-75b82ad2>(</span><span class="word" data-v-75b82ad2>i</span> <span class="brackets" data-v-75b82ad2>)</span><span class="comment" data-v-75b82ad2>// 4</span></div><br data-v-75b82ad2><br data-v-75b82ad2><div class="comment" data-v-75b82ad2>if() while() 也有塊級作用域</div><br data-v-75b82ad2><br data-v-75b82ad2><div data-v-75b82ad2><span class="then" data-v-75b82ad2>if </span> <span class="brackets" data-v-75b82ad2>(</span><span class="word" data-v-75b82ad2>true</span><span class="brackets" data-v-75b82ad2>){</span></div><div class="pTwo" data-v-75b82ad2><span class="word" data-v-75b82ad2>let </span><span class="variable" data-v-75b82ad2>i</span> <span class="then" data-v-75b82ad2>=</span><span class="number" data-v-75b82ad2>10</span></div><div class="brackets" data-v-75b82ad2>}</div><div data-v-75b82ad2><span class="word" data-v-75b82ad2>console.</span><span class="variable" data-v-75b82ad2>log</span> <span class="brackets" data-v-75b82ad2>(</span><span class="word" data-v-75b82ad2>i</span> <span class="brackets" data-v-75b82ad2>)</span><span class="comment" data-v-75b82ad2>// undefined</span></div></div><br data-v-75b82ad2><br data-v-75b82ad2><p class="fz28" data-v-75b82ad2>結論</p><p class="fz28" data-v-75b82ad2>1.let const 聲明的變量產生塊級作用域, var沒有塊級</p><p class="fz28" data-v-75b82ad2>2.不同代碼塊之間的變量無法互相訪問</p><br data-v-75b82ad2><br data-v-75b82ad2><div id="scope002" class="articleCardTitle cor36 fz34" data-v-75b82ad2> 1.2 全局作用域 </div><p class="fz28" data-v-75b82ad2>script標籤的最外層 就是 全局作用域</p><p class="fz28" data-v-75b82ad2>全局作用域聲明變量, 任何其他作用域都可以被訪問</p><br data-v-75b82ad2><br data-v-75b82ad2><div id="scope003" class="articleCardTitle cor36 fz34" data-v-75b82ad2> 1.3 作用域鏈 </div><p class="fz28" data-v-75b82ad2>就近原則: 誰離我近找誰</p><br data-v-75b82ad2><br data-v-75b82ad2><p class="cor36 fz32" data-v-75b82ad2>作用域鏈 是 變量查找機制</p><br data-v-75b82ad2><br data-v-75b82ad2><p class="fz28" data-v-75b82ad2>函數執行, 優先找當前函數作用域中 找變量</p><p class="fz28" data-v-75b82ad2> 當前作用域找不到 . &gt; . 依次逐級找 父級作用域 直到全局作用域 </p><br data-v-75b82ad2><br data-v-75b82ad2><p class="fz28" data-v-75b82ad2>總結:</p><p class="fz28" data-v-75b82ad2>作用域鏈像鍊子一樣, 按照從小到大查找</p><br data-v-75b82ad2><br data-v-75b82ad2><div id="scope004" class="articleCardTitle cor36 fz34" data-v-75b82ad2> 1.4 垃圾回收機制 ( Garbage Collection ) </div><p class="fz28" data-v-75b82ad2> JS 內存的分配和回收自動完成, 內存在不使用時被垃圾回收機制回收 </p><br data-v-75b82ad2><br data-v-75b82ad2><p class="cor36 fz28" data-v-75b82ad2>內存生命週期</p><p class="fz28" data-v-75b82ad2> 1. 內存分配: 當聲明變量 、 函數 、 物件, 系統自動分配內存 </p><p class="fz28" data-v-75b82ad2>2. 內存使用: 讀寫內存, 使用變量、函數</p><p class="fz28" data-v-75b82ad2>3. 內存回收: 使用完, 垃圾回收器 回收不再使用的內存</p><br data-v-75b82ad2><br data-v-75b82ad2><p class="fz28" data-v-75b82ad2>全局變量不回收 ( 直到頁面關閉 )</p><p class="fz28" data-v-75b82ad2>局部變量的值, 不用了, 自動回收掉</p><br data-v-75b82ad2><br data-v-75b82ad2><p class="fz28 cor36" data-v-75b82ad2># 內存洩漏</p><p class="fz28" data-v-75b82ad2>程序中分配的內存 由於某種原因 未釋放 or 無法釋放</p><br data-v-75b82ad2><br data-v-75b82ad2><p class="fz28" data-v-75b82ad2>堆棧空間分配</p><p class="fz28" data-v-75b82ad2>1.棧 stack</p><p class="fz28" data-v-75b82ad2>基本數據類型, 系統自動分配 自動釋放</p><br data-v-75b82ad2><br data-v-75b82ad2><p class="fz28" data-v-75b82ad2>2.堆 heap</p><p class="fz28" data-v-75b82ad2> 複雜數據類型, 由程序員分配釋放, 若不釋放 則 由垃圾回收機制回收 </p><br data-v-75b82ad2><br data-v-75b82ad2><p class="fz28 cor36" data-v-75b82ad2># 引用計數法</p><p class="fz28" data-v-75b82ad2>看一個對象 是否有 指向它的引用, 沒有就回收對象</p><br data-v-75b82ad2><br data-v-75b82ad2><p class="fz28" data-v-75b82ad2>1. 跟蹤紀錄被引用的次數</p><p class="fz28" data-v-75b82ad2>2. 被引用 1 次就 ++</p><p class="fz28" data-v-75b82ad2>3. 減少 1 個引用就 --</p><p class="fz28" data-v-75b82ad2>4. 引用次數 0 則 釋放內存</p><br data-v-75b82ad2><br data-v-75b82ad2><p class="fz28" data-v-75b82ad2>const arr = [ 1, 2, 3, 4 ]</p><p class="fz28" data-v-75b82ad2> arr -&gt; (stack) 0x1111 --counter++-&gt; (heap) [ 1, 2, 3, 4 ] </p><br data-v-75b82ad2><br data-v-75b82ad2><p class="fz28" data-v-75b82ad2>arr = null</p><p class="fz28" data-v-75b82ad2>arr -&gt; (stack) null 不指向 heap</p><p class="fz28" data-v-75b82ad2>[ 1, 2, 3, 4 ] 的被引用次數變為 0 回收</p><br data-v-75b82ad2><br data-v-75b82ad2><p class="fz28 cor36" data-v-75b82ad2># 引用計數 缺點</p><p class="fz28 cor36" data-v-75b82ad2>嵌套引用 (循環引用)</p><p class="fz28" data-v-75b82ad2> 兩個物件 相互引用 . . . 儘管不再用, 不會回收, 而內存洩漏 </p><br data-v-75b82ad2><br data-v-75b82ad2><p class="fz20" data-v-75b82ad2>現代瀏覽器 不用 引用計數</p><br data-v-75b82ad2><br data-v-75b82ad2><div class="bgcVS fz30" data-v-75b82ad2><br data-v-75b82ad2><br data-v-75b82ad2><div data-v-75b82ad2><span class="function" data-v-75b82ad2>function </span><span class="word" data-v-75b82ad2>fn</span> <span class="brackets" data-v-75b82ad2>(){</span></div><div class="pTwo" data-v-75b82ad2><span class="function" data-v-75b82ad2>let </span> <span class="word" data-v-75b82ad2>obj1</span><span class="then" data-v-75b82ad2>=</span> <span class="brackets" data-v-75b82ad2>{}</span></div><div class="pTwo" data-v-75b82ad2><span class="function" data-v-75b82ad2>let </span> <span class="word" data-v-75b82ad2>obj2</span><span class="then" data-v-75b82ad2>=</span> <span class="brackets" data-v-75b82ad2>{}</span></div><div class="pTwo" data-v-75b82ad2><span class="word" data-v-75b82ad2>obj1.a</span> <span class="then" data-v-75b82ad2>=</span><span class="word" data-v-75b82ad2>obj2</span></div><div class="pTwo" data-v-75b82ad2><span class="word" data-v-75b82ad2>obj2.a</span> <span class="then" data-v-75b82ad2>=</span><span class="word" data-v-75b82ad2>obj1</span></div><div class="brackets" data-v-75b82ad2>}</div><br data-v-75b82ad2><br data-v-75b82ad2></div><br data-v-75b82ad2><br data-v-75b82ad2><p class="fz28 cor36" data-v-75b82ad2># 標記清除法</p><p class="fz28" data-v-75b82ad2> 將 &quot;不再使用的對象&quot; 定義為 &quot;無法到達的對象&quot; -&gt; (我找不到你) </p><br data-v-75b82ad2><br data-v-75b82ad2><p class="fz28" data-v-75b82ad2>1. 從根部 (全局對象) 出發定期掃描內存中對象</p><p class="fz28" data-v-75b82ad2>2. 從根部出發找不到的對象就標記為 不再使用 回收</p><br data-v-75b82ad2><br data-v-75b82ad2><div id="scope005" class="articleCardTitle cor36 fz34" data-v-75b82ad2> 1.5 閉包 ( closure ) </div><p class="fz28" data-v-75b82ad2> 一個函數對周圍狀態的引用綑綁在一起, 內層函數中訪問到其外層函數的作用域 </p><p class="fz28 cor36" data-v-75b82ad2>閉包 = 內層函數 + 外層函數的變量</p><br data-v-75b82ad2><br data-v-75b82ad2><div class="dis" data-v-75b82ad2><div class="bgcVS fz30" data-v-75b82ad2><br data-v-75b82ad2><br data-v-75b82ad2><div data-v-75b82ad2><span class="function" data-v-75b82ad2>function </span><span class="word" data-v-75b82ad2>outer</span><span class="brackets" data-v-75b82ad2>(){</span></div><div class="pTwo" data-v-75b82ad2><span class="function" data-v-75b82ad2>let </span> <span class="word" data-v-75b82ad2>a</span><span class="then" data-v-75b82ad2>=</span> <span class="number" data-v-75b82ad2>10;</span></div><div class="pTwo" data-v-75b82ad2><span class="function" data-v-75b82ad2>function </span><span class="word" data-v-75b82ad2>fn</span> <span class="brackets" data-v-75b82ad2>(){</span></div><div class="pFou" data-v-75b82ad2><span class="word" data-v-75b82ad2>console.</span><span class="variable" data-v-75b82ad2>log</span><span class="brackets" data-v-75b82ad2>(</span> <span class="word" data-v-75b82ad2>a</span><span class="brackets" data-v-75b82ad2>)</span></div><div class="brackets pTwo" data-v-75b82ad2>}</div><div class="pTwo" data-v-75b82ad2><span class="then" data-v-75b82ad2>return </span><span class="word" data-v-75b82ad2>fn</span></div><div class="brackets" data-v-75b82ad2>}</div><br data-v-75b82ad2><div data-v-75b82ad2><span class="word" data-v-75b82ad2>outer</span><span class="brackets" data-v-75b82ad2>()</span> <span class="then" data-v-75b82ad2>===</span><span class="word" data-v-75b82ad2>fn</span><span class="then" data-v-75b82ad2>===</span><span class="function" data-v-75b82ad2>function </span><span class="word" data-v-75b82ad2>fn</span> <span class="brackets" data-v-75b82ad2>(){}</span></div><br data-v-75b82ad2><div data-v-75b82ad2><span class="function" data-v-75b82ad2>const </span><span class="word" data-v-75b82ad2>fun</span> <span class="then" data-v-75b82ad2>=</span><span class="function" data-v-75b82ad2>function </span><span class="word" data-v-75b82ad2>fn</span> <span class="wbrackets" data-v-75b82ad2>(){}</span></div><br data-v-75b82ad2><div data-v-75b82ad2><span class="function" data-v-75b82ad2>const </span><span class="word" data-v-75b82ad2>fun</span> <span class="then" data-v-75b82ad2>=</span><span class="word" data-v-75b82ad2>outer</span> <span class="brackets" data-v-75b82ad2>()</span></div><div data-v-75b82ad2><span class="word" data-v-75b82ad2>fun</span> <span class="brackets" data-v-75b82ad2>() </span><span class="comment" data-v-75b82ad2>// 調用函數 </span><span class="comment" data-v-75b82ad2>// 10</span></div><div class="comment" data-v-75b82ad2> // 實現外部函數 使用 outer 函數 內部的變量 </div><br data-v-75b82ad2><br data-v-75b82ad2></div><div class="bgcVSMid" data-v-75b82ad2>&gt;</div><div class="bgcVS fz30" data-v-75b82ad2><br data-v-75b82ad2><br data-v-75b82ad2><div data-v-75b82ad2><span class="function" data-v-75b82ad2>function </span><span class="word" data-v-75b82ad2>outer</span><span class="brackets" data-v-75b82ad2>(){</span></div><div class="pTwo" data-v-75b82ad2><span class="function" data-v-75b82ad2>let </span> <span class="word" data-v-75b82ad2>a</span><span class="then" data-v-75b82ad2>=</span> <span class="number" data-v-75b82ad2>10;</span></div><div class="pTwo" data-v-75b82ad2><span class="function" data-v-75b82ad2>return function </span><span class="word" data-v-75b82ad2>fn</span> <span class="brackets" data-v-75b82ad2>(){</span></div><div class="pFou" data-v-75b82ad2><span class="word" data-v-75b82ad2>console.</span><span class="variable" data-v-75b82ad2>log</span><span class="brackets" data-v-75b82ad2>(</span> <span class="word" data-v-75b82ad2>a</span><span class="brackets" data-v-75b82ad2>)</span></div><div class="brackets pTwo" data-v-75b82ad2>}</div><div class="brackets" data-v-75b82ad2>}</div><br data-v-75b82ad2><br data-v-75b82ad2><div data-v-75b82ad2><span class="function" data-v-75b82ad2>const </span><span class="word" data-v-75b82ad2>fun</span> <span class="then" data-v-75b82ad2>=</span><span class="word" data-v-75b82ad2>outer</span> <span class="brackets" data-v-75b82ad2>()</span></div><div data-v-75b82ad2><span class="word" data-v-75b82ad2>fun</span> <span class="brackets" data-v-75b82ad2>() </span><span class="comment" data-v-75b82ad2>// 調用函數 </span><span class="comment" data-v-75b82ad2>// 10</span></div><div class="comment" data-v-75b82ad2> // 實現外部函數 使用 outer 函數 內部的變量 </div><br data-v-75b82ad2><br data-v-75b82ad2></div></div><br data-v-75b82ad2><br data-v-75b82ad2><p class="fz28 cor36" data-v-75b82ad2># 作用</p><p class="fz28" data-v-75b82ad2>封閉數據, 提供操作, 外部也可以訪問函數內部的變量</p><br data-v-75b82ad2><br data-v-75b82ad2><p class="fz28" data-v-75b82ad2># 應用</p><p class="fz28" data-v-75b82ad2>實現數據私有</p><p class="fz28" data-v-75b82ad2>比如 統計函數調用次數</p><br data-v-75b82ad2><br data-v-75b82ad2><div class="bgcVS fz30" data-v-75b82ad2><br data-v-75b82ad2><br data-v-75b82ad2><div data-v-75b82ad2><span class="function" data-v-75b82ad2>function </span><span class="word" data-v-75b82ad2>count</span> <span class="brackets" data-v-75b82ad2>(){</span></div><div class="pTwo" data-v-75b82ad2><span class="function" data-v-75b82ad2>let </span> <span class="word" data-v-75b82ad2>i</span><span class="then" data-v-75b82ad2>=</span> <span class="number" data-v-75b82ad2>0</span></div><div class="pTwo" data-v-75b82ad2><span class="function" data-v-75b82ad2>function </span><span class="word" data-v-75b82ad2>fn</span> <span class="brackets" data-v-75b82ad2>(){</span></div><div class="pFou" data-v-75b82ad2>i++</div><div class="pFou" data-v-75b82ad2><span class="word" data-v-75b82ad2>console.</span><span class="variable" data-v-75b82ad2>log</span> <span class="brackets" data-v-75b82ad2>(</span><span class="word" data-v-75b82ad2>i</span> <span class="brackets" data-v-75b82ad2>)</span></div><div class="brackets pTwo" data-v-75b82ad2>}</div><div class="pTwo" data-v-75b82ad2><span class="then" data-v-75b82ad2>return </span><span class="word" data-v-75b82ad2>fn</span></div><div class="brackets" data-v-75b82ad2>}</div><div data-v-75b82ad2><span class="function" data-v-75b82ad2>const </span><span class="word" data-v-75b82ad2>fun</span> <span class="then" data-v-75b82ad2>=</span><span class="word" data-v-75b82ad2>count</span> <span class="brackets" data-v-75b82ad2>()</span></div><br data-v-75b82ad2><div class="number" data-v-75b82ad2>Q1: 裡面的 i 會被回收嗎?</div><br data-v-75b82ad2><div class="number" data-v-75b82ad2>global &gt; fun &gt; fn() &gt; i++ &gt; let i</div><div class="number" data-v-75b82ad2>i 不會被回收</div><div class="number" data-v-75b82ad2>內存洩漏</div><br data-v-75b82ad2><br data-v-75b82ad2></div><br data-v-75b82ad2><br data-v-75b82ad2><div id="scope006" class="articleCardTitle cor36 fz34" data-v-75b82ad2> 1.6 變量提升 ( Hoisting ) </div><p class="fz28" data-v-75b82ad2>變數提升是指變數在其宣告之前已經可以使用</p><p class="fz28" data-v-75b82ad2>只提升聲明 , 不賦值</p><br data-v-75b82ad2><p class="fz28" data-v-75b82ad2>把所有 var 聲明的變量提升到當前作用域的最前面</p><p class="fz28" data-v-75b82ad2>只提升聲明 , 不賦值</p><br data-v-75b82ad2><br data-v-75b82ad2><p class="fz28 comment" data-v-75b82ad2>var num</p><p class="fz28" data-v-75b82ad2>console.log( num ) . . . // undefined</p><p class="fz28" data-v-75b82ad2>var num = 10</p><p class="fz28" data-v-75b82ad2>console.log( num ) . . . // 10</p><br data-v-75b82ad2><br data-v-75b82ad2><p class="fz28" data-v-75b82ad2>function fn() {</p><p class="fz28 comment pTwo" data-v-75b82ad2>var num</p><p class="fz28 pTwo" data-v-75b82ad2>console.log( num ) . . . // undefined</p><p class="fz28 pTwo" data-v-75b82ad2>var num = 10</p><p class="fz28 pTwo" data-v-75b82ad2>console.log( num ) . . . // 10</p><p class="fz28" data-v-75b82ad2>}</p><br data-v-75b82ad2><br data-v-75b82ad2><p class="fz28" data-v-75b82ad2>用 let 或 const 宣告的變量和常量不會被提升</p><br data-v-75b82ad2><br data-v-75b82ad2><p class="fz28" data-v-75b82ad2>注意:</p><p class="fz28" data-v-75b82ad2>1.變量在未聲明即被訪問時會報錯</p><p class="fz28" data-v-75b82ad2>2.變量在var聲明之前被訪問, 值為 undefined</p><br data-v-75b82ad2><br data-v-75b82ad2></div></div></div>',1),Nr=gv(()=>v("div",{class:"toTopButton"},[v("div",{class:"disCen"},"___"),v("div",{class:"disCen"},"▲")],-1)),Vr=[Nr],$r=gv(()=>v("div",{class:"toBotButton"},[v("div",{class:"disCen"},"▼"),v("div",{class:"disCen"},"￣")],-1)),Or=[$r],Er={__name:"JsPageThreeOne",setup(a){const s=ua(!1);window.addEventListener("scroll",function(){s.value=window.scrollY>0});function d(){window.scrollTo({top:0,left:0,behavior:"smooth"})}function t(){window.scrollTo({top:999999,left:0,behavior:"smooth"})}function c(e){window.scrollTo({top:document.getElementById(`${e}`).offsetTop,behavior:"smooth"})}return(e,n)=>(da(),ea(Q,null,[v("section",null,[v("div",xr,[v("div",Lr,[v("div",jr,[v("div",{onClick:n[0]||(n[0]=l=>c("scope001")),class:"leftNavText"},"局部作用域"),v("div",{onClick:n[1]||(n[1]=l=>c("scope002")),class:"leftNavText"},"全局作用域"),v("div",{onClick:n[2]||(n[2]=l=>c("scope003")),class:"leftNavText"},"作用域鏈"),v("div",{onClick:n[3]||(n[3]=l=>c("scope004")),class:"leftNavText"}," JS垃圾回收機制 "),v("div",{onClick:n[4]||(n[4]=l=>c("scope005")),class:"leftNavText"},"閉包"),v("div",{onClick:n[5]||(n[5]=l=>c("scope006")),class:"leftNavText"},"變量提升")])])]),Pr]),v("div",null,[X(T(W,{name:"fade",tag:"div"},{default:C(()=>[v("div",{onClick:d,class:"toTop"},Vr)]),_:1},512),[[Y,s.value]]),X(T(W,{name:"fade",tag:"div"},{default:C(()=>[v("div",{onClick:t,class:"toBot"},Or)]),_:1},512),[[Y,s.value]])])],64))}},Ar=ia(Er,[["__scopeId","data-v-75b82ad2"]]);const as=a=>(wa("data-v-676d5bc8"),a=a(),ha(),a),Mr={class:"leftNav"},Fr={class:"leftNavContainer"},Ir={class:"leftNavLayout"},Rr={class:"Main"},Hr={class:"mainContainer"},Br={class:"mainLayout"},Jr=U('<br data-v-676d5bc8><br data-v-676d5bc8><p class="fz28" data-v-676d5bc8>總分總</p><p class="fz28" data-v-676d5bc8>1.要講哪個知識點</p><p class="fz28" data-v-676d5bc8>2.細講</p><p class="fz28" data-v-676d5bc8>3.總結</p><br data-v-676d5bc8><br data-v-676d5bc8><div id="twofunction001" class="articleCardTitle cor36 fz34" data-v-676d5bc8> 2.1 函數提升 </div><br data-v-676d5bc8><div class="bgcVS fz30" data-v-676d5bc8><div class="comment" data-v-676d5bc8> // 1.會把所有函數聲明提升到當前作用域最前面 </div><div class="comment" data-v-676d5bc8>// 2.只提升函數聲明, 不提升函數調用-&gt;()</div><div data-v-676d5bc8><span class="word" data-v-676d5bc8>fn</span> <span class="brackets" data-v-676d5bc8>()</span></div><div data-v-676d5bc8><span class="function" data-v-676d5bc8>function </span><span class="word" data-v-676d5bc8>fn</span> <span class="brackets" data-v-676d5bc8>(){</span></div><div class="pTwo" data-v-676d5bc8><span class="word" data-v-676d5bc8>console.</span><span class="variable" data-v-676d5bc8>log</span> <span class="brackets" data-v-676d5bc8>(</span><span class="src" data-v-676d5bc8>&quot;函數提升</span> <span class="then" data-v-676d5bc8>&quot;</span><span class="brackets" data-v-676d5bc8>)</span></div><div class="brackets" data-v-676d5bc8>)</div><br data-v-676d5bc8><br data-v-676d5bc8><div data-v-676d5bc8><span class="word" data-v-676d5bc8>fun</span> <span class="brackets" data-v-676d5bc8>() </span><span class="comment" data-v-676d5bc8>// fun is not a function</span></div><div data-v-676d5bc8><span class="function" data-v-676d5bc8>var </span><span class="variable" data-v-676d5bc8>fun </span><span class="then" data-v-676d5bc8>= </span><span class="function" data-v-676d5bc8>function </span><span class="brackets" data-v-676d5bc8>(){ </span><span class="comment" data-v-676d5bc8>// 這叫 賦值</span></div><div class="pTwo" data-v-676d5bc8><span class="word" data-v-676d5bc8>console.</span><span class="variable" data-v-676d5bc8>log</span> <span class="brackets" data-v-676d5bc8>(</span><span class="src" data-v-676d5bc8>&quot;函數表達式&quot;</span><span class="brackets" data-v-676d5bc8>)</span></div><div class="brackets" data-v-676d5bc8>}</div><span class="comment" data-v-676d5bc8>// var 只提升聲明 不賦值</span></div><div id="twofunction002" class="articleCardTitle cor36 fz34" data-v-676d5bc8> 2.2 形參實參 </div><p class="fz28 cor36" data-v-676d5bc8>形式參數</p><p class="fz28" data-v-676d5bc8>接收函數在調用的時候傳入的具體參數值</p><br data-v-676d5bc8><p class="fz28" data-v-676d5bc8>1.出現在函數的定義裡面 , 只能在函數體內使用</p><br data-v-676d5bc8><p class="fz28 cor36" data-v-676d5bc8>實際參數</p><p class="fz28" data-v-676d5bc8>調用的時候傳入的具體值</p><br data-v-676d5bc8><p class="fz28" data-v-676d5bc8>1.出現在主調函數裡面 , 被調不能訪問實參</p><p class="fz28" data-v-676d5bc8> 2.實參是基本類型的值, 將實參值進行拷貝傳給形參, 函數運行完, 釋放形參, 所以實參不會被改變 </p><p class="fz28" data-v-676d5bc8> 2.實參是引用類型的值, 將實參內存地址進行拷貝傳給形參, 實參和形參將會指向同一地址 </p><br data-v-676d5bc8><p class="fz28" data-v-676d5bc8>其他:</p><p class="fz28" data-v-676d5bc8> 1.函數可以不定義形參, 函數體內可以通過 arguments 這個變量來獲取到 我們實際傳遞的參數 </p><p class="fz28" data-v-676d5bc8>2. 函數的參數個數、數據類型不一定要相同</p><br data-v-676d5bc8><br data-v-676d5bc8>',29),Dr={class:"bgcVS"},Wr=U('<div data-v-676d5bc8><span class="function" data-v-676d5bc8>function </span><span class="word" data-v-676d5bc8>fn1</span> <span class="brackets" data-v-676d5bc8>(){</span></div><div class="pTwo" data-v-676d5bc8><span class="function" data-v-676d5bc8>var </span><span class="word" data-v-676d5bc8>param</span> <span class="then" data-v-676d5bc8>=</span><span class="src" data-v-676d5bc8>&quot;hi&quot;;</span></div><div class="pTwo" data-v-676d5bc8><span class="word" data-v-676d5bc8>fn2</span> <span class="brackets" data-v-676d5bc8>(</span><span class="word" data-v-676d5bc8>param</span> <span class="brackets" data-v-676d5bc8>) </span><span class="comment" data-v-676d5bc8>// 對 fn2 來說是 實參</span></div><div class="brackets" data-v-676d5bc8>}</div><br data-v-676d5bc8><div data-v-676d5bc8><span class="function" data-v-676d5bc8>function </span><span class="word" data-v-676d5bc8>fn2</span> <span class="brackets" data-v-676d5bc8>(</span><span class="word" data-v-676d5bc8>arg</span> <span class="brackets" data-v-676d5bc8>){ </span><span class="comment" data-v-676d5bc8>// 形參</span></div><div class="pTwo" data-v-676d5bc8><span class="word" data-v-676d5bc8>console.</span><span class="variable" data-v-676d5bc8>log</span> <span class="brackets" data-v-676d5bc8>(</span><span class="word" data-v-676d5bc8>arg</span> <span class="brackets" data-v-676d5bc8>);</span></div><div class="pTwo" data-v-676d5bc8><span class="word" data-v-676d5bc8>console.</span><span class="variable" data-v-676d5bc8>log</span> <span class="brackets" data-v-676d5bc8>(</span><span class="word" data-v-676d5bc8>param</span> <span class="brackets" data-v-676d5bc8>); </span><span class="comment" data-v-676d5bc8>// param is not defined</span></div><div class="brackets" data-v-676d5bc8>}</div><br data-v-676d5bc8><div class="comment" data-v-676d5bc8> // 實參是基本類型的值, 將實參值進行拷貝傳給形參, 函數運行完, 釋放形參, 所以實參不會被改變 </div><div data-v-676d5bc8><span class="function" data-v-676d5bc8>var </span> <span class="word" data-v-676d5bc8>arg</span><span class="then" data-v-676d5bc8>=</span> <span class="word" data-v-676d5bc8>1;</span></div><div data-v-676d5bc8><span class="function" data-v-676d5bc8>function </span><span class="word" data-v-676d5bc8>fn</span> <span class="brackets" data-v-676d5bc8>(</span><span class="word" data-v-676d5bc8>param</span> <span class="brackets" data-v-676d5bc8>){</span></div><div class="pTwo" data-v-676d5bc8><span class="word" data-v-676d5bc8>console.</span><span class="variable" data-v-676d5bc8>log</span> <span class="brackets" data-v-676d5bc8>(</span><span class="word" data-v-676d5bc8>param</span> <span class="brackets" data-v-676d5bc8>){</span></div><div class="pTwo" data-v-676d5bc8><span class="word" data-v-676d5bc8>param</span> <span class="then" data-v-676d5bc8>=</span><span class="word" data-v-676d5bc8>2;</span></div><div class="brackets" data-v-676d5bc8>}</div><div data-v-676d5bc8><span class="word" data-v-676d5bc8>fn</span> <span class="brackets" data-v-676d5bc8>(</span><span class="word" data-v-676d5bc8>arg</span> <span class="brackets" data-v-676d5bc8>); </span><span class="comment" data-v-676d5bc8>// 1</span></div><div data-v-676d5bc8><span class="word" data-v-676d5bc8>console.</span><span class="variable" data-v-676d5bc8>log</span> <span class="brackets" data-v-676d5bc8>(</span><span class="word" data-v-676d5bc8>arg</span> <span class="brackets" data-v-676d5bc8>); </span><span class="comment" data-v-676d5bc8>// 1 </span><span class="comment" data-v-676d5bc8>// 所以實參不會被改變 </span></div><br data-v-676d5bc8><br data-v-676d5bc8><div class="comment" data-v-676d5bc8> // 實參是引用類型的值, 將實參內存地址進行拷貝傳給形參, 實參和形參將會指向同一地址 </div><div data-v-676d5bc8><span class="function" data-v-676d5bc8>var </span> <span class="word" data-v-676d5bc8>arg2</span><span class="then" data-v-676d5bc8>=</span> <span class="brackets" data-v-676d5bc8>{</span><span class="word" data-v-676d5bc8>name:</span> <span class="src" data-v-676d5bc8>&quot;wayne&quot;</span><span class="brackets" data-v-676d5bc8>};</span></div><div data-v-676d5bc8><span class="function" data-v-676d5bc8>function </span><span class="word" data-v-676d5bc8>fn2</span> <span class="brackets" data-v-676d5bc8>(</span><span class="word" data-v-676d5bc8>param</span> <span class="brackets" data-v-676d5bc8>){</span></div>',23),Ur=as(()=>v("span",{class:"word"},"param.name",-1)),Kr=as(()=>v("span",{class:"then"},"=",-1)),Xr=as(()=>v("span",{class:"src"},'"會改變值但不改變指向"',-1)),Yr=U('<div class="pTwo" data-v-676d5bc8><span class="word" data-v-676d5bc8>param</span> <span class="then" data-v-676d5bc8>=</span><span class="brackets" data-v-676d5bc8>{};</span><span class="comment" data-v-676d5bc8>//改變了形參的指向</span></div><div class="brackets" data-v-676d5bc8>}</div><div data-v-676d5bc8><span class="word" data-v-676d5bc8>fn2</span> <span class="brackets" data-v-676d5bc8>(</span><span class="word" data-v-676d5bc8>arg2</span> <span class="brackets" data-v-676d5bc8>); </span></div><div data-v-676d5bc8><span class="word" data-v-676d5bc8>console.</span><span class="variable" data-v-676d5bc8>log</span> <span class="brackets" data-v-676d5bc8>(</span><span class="word" data-v-676d5bc8>arg2</span> <span class="brackets" data-v-676d5bc8>); </span><span class="comment" data-v-676d5bc8>// { name: &quot;會改變值但不改變指向&quot; } </span></div><span class="comment" data-v-676d5bc8>// 不能改變引用地址, 能改變值 </span><br data-v-676d5bc8><br data-v-676d5bc8><div class="comment" data-v-676d5bc8>// 函數的參數個數、數據類型不一定要相同</div><div data-v-676d5bc8><span class="function" data-v-676d5bc8>function </span><span class="word" data-v-676d5bc8>fn3</span> <span class="brackets" data-v-676d5bc8>(</span><span class="word" data-v-676d5bc8>arg1:string,arg2</span><span class="brackets" data-v-676d5bc8>){</span></div><div class="pTwo" data-v-676d5bc8><span class="comment" data-v-676d5bc8>// 1. arg1 傳入 number 類型 可以</span></div><div class="pTwo" data-v-676d5bc8><span class="comment" data-v-676d5bc8>// 2. arg2 沒傳入 是 undefined </span></div><div class="brackets" data-v-676d5bc8>}</div>',12),Gr=U('<br data-v-676d5bc8><br data-v-676d5bc8><p class="fz28" data-v-676d5bc8>需求 寫一個求和函數</p><p class="fz28" data-v-676d5bc8>不管傳入多少實參 都要求和</p><p class="fz28" data-v-676d5bc8>getSum( 2, 3)</p><p class="fz28" data-v-676d5bc8>getSum( 1, 2, 3)</p><p class="fz28" data-v-676d5bc8>getSum( 1, 2, 3, 4, 5,)</p><div id="twofunction003" class="articleCardTitle cor36 fz34" data-v-676d5bc8> 2.3 動態參數 arguments </div><div class="bgcVS" data-v-676d5bc8><div data-v-676d5bc8><span class="function" data-v-676d5bc8>function </span><span class="word" data-v-676d5bc8>getSum</span> <span class="brackets" data-v-676d5bc8>(){</span></div><div class="comment pTwo" data-v-676d5bc8> // arguments 動態參數 只存在於 函數裡面 </div><div class="comment pTwo" data-v-676d5bc8> // 1. 是偽數組 -&gt; 有所引號 有下標 沒有常用的方法 </div><div class="word pTwo" data-v-676d5bc8><span class="word" data-v-676d5bc8>console.</span><span class="variable" data-v-676d5bc8>log</span> <span class="brackets" data-v-676d5bc8>(</span><span class="word" data-v-676d5bc8>arguments</span><span class="brackets" data-v-676d5bc8>) </span><span class="comment" data-v-676d5bc8>// [2,3,4]</span></div><div class="pTwo" data-v-676d5bc8><span class="function" data-v-676d5bc8>let </span> <span class="word" data-v-676d5bc8>sum</span><span class="then" data-v-676d5bc8>=</span> <span class="number" data-v-676d5bc8>0</span></div><div class="pTwo" data-v-676d5bc8><span class="then" data-v-676d5bc8>for </span> <span class="brackets" data-v-676d5bc8>(</span><span class="function" data-v-676d5bc8>let </span> <span class="word" data-v-676d5bc8>i</span><span class="then" data-v-676d5bc8>=</span> <span class="number" data-v-676d5bc8>0</span><span class="then" data-v-676d5bc8>;</span> <span class="word" data-v-676d5bc8>i</span><span class="then" data-v-676d5bc8>＜</span><span class="word" data-v-676d5bc8>arguments.length</span><span class="then" data-v-676d5bc8>;</span> <span class="word" data-v-676d5bc8>i++</span><span class="brackets" data-v-676d5bc8>){</span></div><div class="pFou" data-v-676d5bc8><span class="word" data-v-676d5bc8>sum</span> <span class="then" data-v-676d5bc8>+=</span><span class="word" data-v-676d5bc8>arguments</span><span class="brackets" data-v-676d5bc8>[</span> <span class="word" data-v-676d5bc8>i</span><span class="brackets" data-v-676d5bc8>]</span></div><div class="pTwo brackets" data-v-676d5bc8>}</div><div class="pTwo" data-v-676d5bc8><span class="word" data-v-676d5bc8>sum</span> <span class="then" data-v-676d5bc8>+=</span><span class="word" data-v-676d5bc8>arguments</span><span class="brackets" data-v-676d5bc8>[</span> <span class="word" data-v-676d5bc8>i</span><span class="brackets" data-v-676d5bc8>]</span></div><div class="brackets" data-v-676d5bc8>}</div><div data-v-676d5bc8><span class="word" data-v-676d5bc8>getSum</span> <span class="brackets" data-v-676d5bc8>(</span><span class="word" data-v-676d5bc8>2,3,4</span> <span class="brackets" data-v-676d5bc8>)</span></div></div><br data-v-676d5bc8><br data-v-676d5bc8><p class="fz28" data-v-676d5bc8>總結</p><p class="fz28" data-v-676d5bc8>1. arguments 是一個偽數組, 只存在函數中</p><p class="fz28" data-v-676d5bc8>2. arguments 作用是 動態獲取函數的 實參</p><p class="fz28" data-v-676d5bc8>3. 可用 for 循環依次得到傳過來的 實參</p><br data-v-676d5bc8><br data-v-676d5bc8><p class="fz28" data-v-676d5bc8>需求 寫一個求和函數</p><p class="fz28" data-v-676d5bc8>不管傳入多少實參 都要求和</p><p class="fz28" data-v-676d5bc8>getSum( 2, 3)</p><p class="fz28" data-v-676d5bc8>getSum( 1, 2, 3)</p><p class="fz28" data-v-676d5bc8>getSum( 1, 2, 3, 4, 5,)</p><p class="fz28" data-v-676d5bc8>改成形參?</p><div id="twofunction004" class="articleCardTitle cor36 fz34" data-v-676d5bc8> 2.4 剩餘參數 ＜- 建議用這個 </div><p class="fz28" data-v-676d5bc8>剩餘參數允許我們將一個不定數量的參數表示為一個數組</p><div class="bgcVS" data-v-676d5bc8><div data-v-676d5bc8><span class="function" data-v-676d5bc8>function </span><span class="word" data-v-676d5bc8>getSum</span> <span class="brackets" data-v-676d5bc8>(</span><span class="word" data-v-676d5bc8>...arr</span><span class="brackets" data-v-676d5bc8>){</span></div><div class="word pTwo" data-v-676d5bc8><span class="word" data-v-676d5bc8>console.</span><span class="variable" data-v-676d5bc8>log</span> <span class="brackets" data-v-676d5bc8>(</span><span class="word" data-v-676d5bc8>arr</span><span class="brackets" data-v-676d5bc8>) </span><span class="comment" data-v-676d5bc8>// [2,3,4]</span></div><div class="brackets" data-v-676d5bc8>}</div><div data-v-676d5bc8><span class="word" data-v-676d5bc8>getSum</span> <span class="brackets" data-v-676d5bc8>(</span><span class="word" data-v-676d5bc8>2,3,4</span> <span class="brackets" data-v-676d5bc8>)</span></div><br data-v-676d5bc8><div data-v-676d5bc8><span class="function" data-v-676d5bc8>function </span><span class="word" data-v-676d5bc8>getSum</span> <span class="brackets" data-v-676d5bc8>(</span><span class="word" data-v-676d5bc8>a, b, ...arr</span><span class="brackets" data-v-676d5bc8>){</span></div><div class="comment pTwo" data-v-676d5bc8>// 2 給 a , 3 給 b</div><div class="word pTwo" data-v-676d5bc8><span class="word" data-v-676d5bc8>console.</span><span class="variable" data-v-676d5bc8>log</span> <span class="brackets" data-v-676d5bc8>(</span><span class="word" data-v-676d5bc8>arr</span><span class="brackets" data-v-676d5bc8>) </span><span class="comment" data-v-676d5bc8>// [2,3,4] </span><span class="comment" data-v-676d5bc8>// 使用時不用...</span></div><div class="brackets" data-v-676d5bc8>}</div><div data-v-676d5bc8><span class="word" data-v-676d5bc8>getSum</span> <span class="brackets" data-v-676d5bc8>(</span><span class="word" data-v-676d5bc8>2,3,4</span> <span class="brackets" data-v-676d5bc8>)</span></div></div><br data-v-676d5bc8><p class="fz28" data-v-676d5bc8>動態、剩餘參數差別</p><p class="fz28" data-v-676d5bc8> 1. ...是語法符號, 置於最末函數形參之前, 用於獲取多餘的實參 </p><p class="fz28" data-v-676d5bc8>2. 剩餘參數 獲取的數組是 真數組</p><div id="twofunction005" class="articleCardTitle cor36 fz34" data-v-676d5bc8> 2.5 展開運算符 </div><p class="fz28" data-v-676d5bc8>展開運算符</p><p class="fz28" data-v-676d5bc8> 可以把陣列展開, 可以利用求陣列最大值 和 合併陣列 等操作 </p><br data-v-676d5bc8><p class="fz28" data-v-676d5bc8> : 比如const a 等於, 然後一個陣列, 然後a點點點b, 這個b是一個舊陣列, 然後它會把a和b合成形成新陣列, 然後返回給變量 </p><br data-v-676d5bc8><div class="bgcVS" data-v-676d5bc8><br data-v-676d5bc8><div data-v-676d5bc8><span class="function" data-v-676d5bc8>const </span> <span class="word" data-v-676d5bc8>a</span><span class="then" data-v-676d5bc8>=</span> <span class="brackets" data-v-676d5bc8>[</span><span class="number" data-v-676d5bc8>1, 2, 3</span><span class="brackets" data-v-676d5bc8>]</span></div><div data-v-676d5bc8><span class="function" data-v-676d5bc8>const </span> <span class="word" data-v-676d5bc8>b</span><span class="then" data-v-676d5bc8>=</span> <span class="brackets" data-v-676d5bc8>[</span><span class="number" data-v-676d5bc8>4, 5, 6 </span><span class="brackets" data-v-676d5bc8>]</span></div><br data-v-676d5bc8><div class="comment" data-v-676d5bc8>用於拼接陣列</div><div data-v-676d5bc8><span class="function" data-v-676d5bc8>const </span> <span class="word" data-v-676d5bc8>c</span><span class="then" data-v-676d5bc8>=</span> <span class="brackets" data-v-676d5bc8>[</span><span class="word" data-v-676d5bc8>...a,...b</span><span class="brackets" data-v-676d5bc8>] </span><span class="comment" data-v-676d5bc8>// [1,2,3,4,5,6]</span></div><br data-v-676d5bc8><div class="comment" data-v-676d5bc8>也可以</div><div data-v-676d5bc8><span class="function" data-v-676d5bc8>const </span> <span class="word" data-v-676d5bc8>d</span><span class="then" data-v-676d5bc8>=</span> <span class="brackets" data-v-676d5bc8>[</span><span class="word" data-v-676d5bc8>...a,</span><span class="number" data-v-676d5bc8>4, 5, 6</span><span class="brackets" data-v-676d5bc8>] </span><span class="comment" data-v-676d5bc8>// [1,2,3,4,5,6]</span></div><br data-v-676d5bc8><div class="comment" data-v-676d5bc8>也可以</div><div data-v-676d5bc8><span class="word" data-v-676d5bc8>a.push</span> <span class="brackets" data-v-676d5bc8>(</span><span class="word" data-v-676d5bc8>...b</span> <span class="brackets" data-v-676d5bc8>)</span></div><div data-v-676d5bc8><span class="word" data-v-676d5bc8>console</span><span class="variable" data-v-676d5bc8>.log</span><span class="brackets" data-v-676d5bc8>(</span> <span class="word" data-v-676d5bc8>a</span><span class="brackets" data-v-676d5bc8>)</span></div><br data-v-676d5bc8><div class="comment" data-v-676d5bc8>可以做陣列淺拷貝</div><div data-v-676d5bc8><span class="function" data-v-676d5bc8>const </span> <span class="word" data-v-676d5bc8>e</span><span class="then" data-v-676d5bc8>=</span> <span class="brackets" data-v-676d5bc8>[</span><span class="word" data-v-676d5bc8>...a</span> <span class="brackets" data-v-676d5bc8>]</span></div><div data-v-676d5bc8><span class="word" data-v-676d5bc8>e.push</span> <span class="brackets" data-v-676d5bc8>(</span><span class="number" data-v-676d5bc8>4</span> <span class="brackets" data-v-676d5bc8>)</span><span class="comment" data-v-676d5bc8>// 不會影響 a</span></div><br data-v-676d5bc8><div class="comment" data-v-676d5bc8> 淺拷貝是指複製值時，原本的變數和新的變數會指向同一個址 (reference) </div><div class="comment" data-v-676d5bc8> 深拷貝是指在拷貝時不共享相同的址 (reference) </div><br data-v-676d5bc8></div><br data-v-676d5bc8><br data-v-676d5bc8><p class="fz28" data-v-676d5bc8>a={...b} 可以嗎?</p><br data-v-676d5bc8><div class="bgcVS" data-v-676d5bc8><br data-v-676d5bc8><div data-v-676d5bc8><span class="function" data-v-676d5bc8>const </span><span class="word" data-v-676d5bc8>obj1</span> <span class="then" data-v-676d5bc8>=</span><span class="brackets" data-v-676d5bc8>{</span> <span class="word" data-v-676d5bc8>a:</span><span class="number" data-v-676d5bc8>1,</span> <span class="word" data-v-676d5bc8>b:</span><span class="number" data-v-676d5bc8>2</span> <span class="brackets" data-v-676d5bc8>};</span></div><div data-v-676d5bc8><span class="function" data-v-676d5bc8>const </span><span class="word" data-v-676d5bc8>obj2</span> <span class="then" data-v-676d5bc8>=</span><span class="brackets" data-v-676d5bc8>{</span> <span class="word" data-v-676d5bc8>c:</span><span class="number" data-v-676d5bc8>3,</span> <span class="word" data-v-676d5bc8>d:</span><span class="number" data-v-676d5bc8>4</span> <span class="brackets" data-v-676d5bc8>};</span></div><br data-v-676d5bc8><span class="comment" data-v-676d5bc8>// 可以 拷貝 物件</span><div data-v-676d5bc8><span class="function" data-v-676d5bc8>const </span><span class="word" data-v-676d5bc8>newObj</span> <span class="then" data-v-676d5bc8>=</span><span class="brackets" data-v-676d5bc8>{</span> <span class="word" data-v-676d5bc8>...obj1</span><span class="brackets" data-v-676d5bc8>}</span><span class="word" data-v-676d5bc8></span></div><br data-v-676d5bc8><span class="comment" data-v-676d5bc8>// 可以 merged 2 個物件</span><div data-v-676d5bc8><span class="function" data-v-676d5bc8>const </span><span class="word" data-v-676d5bc8>merged</span> <span class="then" data-v-676d5bc8>=</span><span class="brackets" data-v-676d5bc8>{</span><span class="word" data-v-676d5bc8>...obj1,obj2</span><span class="brackets" data-v-676d5bc8>};</span></div><div data-v-676d5bc8><span class="word" data-v-676d5bc8>console.</span><span class="variable" data-v-676d5bc8>log</span> <span class="brackets" data-v-676d5bc8>(</span><span class="word" data-v-676d5bc8>merged</span><span class="brackets" data-v-676d5bc8>); </span><span class="comment" data-v-676d5bc8>// {a: 1, b: 2, c: 3, d: 4 }</span></div><br data-v-676d5bc8></div><br data-v-676d5bc8><br data-v-676d5bc8><p class="cor36 fz28" data-v-676d5bc8> 這三個點除了把一個東西展開,它在函數參數有什麼用? </p><p class="fz28" data-v-676d5bc8> 可以不去命名那個函數的參數, 直接用函數參數對象裡面的某一個東西 </p><br data-v-676d5bc8><p class="cor36 fz28" data-v-676d5bc8>參數裡面可不可以用三個點?</p><p class="fz28" data-v-676d5bc8>可以</p><br data-v-676d5bc8><p class="cor36 fz28" data-v-676d5bc8>在賦值可以用三個點嗎?</p><p class="fz28" data-v-676d5bc8>可以</p><br data-v-676d5bc8><p class="cor36 fz28" data-v-676d5bc8> 我有一個陣列長度為10,我想把前面第一個元素命名為a,後面9個元素命名為新的數組叫b怎麼做? </p><p class="fz28" data-v-676d5bc8> 方括號a然後點,然後逗號,然後點點點rest,然後方括號,然後等於array1,那就是a,那個a就是array裡的第一個 </p><br data-v-676d5bc8><br data-v-676d5bc8>',57),Qr={class:"bgcVS"},Zr=U('<br data-v-676d5bc8><div class="comment" data-v-676d5bc8>// 用於函數傳參</div><br data-v-676d5bc8><div class="comment" data-v-676d5bc8>// 實參的用法</div><div data-v-676d5bc8><span class="function" data-v-676d5bc8>const </span> <span class="word" data-v-676d5bc8>a</span><span class="then" data-v-676d5bc8>=</span> <span class="brackets" data-v-676d5bc8>[</span><span class="number" data-v-676d5bc8>1, 2, 3</span><span class="brackets" data-v-676d5bc8>]</span></div>',5),af=as(()=>v("span",{class:"function"},"function ",-1)),sf=as(()=>v("span",{class:"word"},"test",-1)),df=as(()=>v("span",{class:"brackets"},"(",-1)),cf=as(()=>v("span",{class:"word"},"p1,p2,p3",-1)),tf=as(()=>v("span",{class:"brackets"},"){",-1)),nf=U('<div class="pTwo" data-v-676d5bc8><span class="word" data-v-676d5bc8>console.</span><span class="variable" data-v-676d5bc8>log</span> <span class="brackets" data-v-676d5bc8>(</span><span class="word" data-v-676d5bc8>p1</span> <span class="brackets" data-v-676d5bc8>);</span></div><div class="pTwo" data-v-676d5bc8><span class="word" data-v-676d5bc8>console.</span><span class="variable" data-v-676d5bc8>log</span> <span class="brackets" data-v-676d5bc8>(</span><span class="word" data-v-676d5bc8>p2</span> <span class="brackets" data-v-676d5bc8>);</span></div><div class="pTwo" data-v-676d5bc8><span class="word" data-v-676d5bc8>console.</span><span class="variable" data-v-676d5bc8>log</span> <span class="brackets" data-v-676d5bc8>(</span><span class="word" data-v-676d5bc8>p3</span> <span class="brackets" data-v-676d5bc8>);</span></div><div class="brackets" data-v-676d5bc8>}</div><div data-v-676d5bc8><span class="word" data-v-676d5bc8>test</span><span class="brackets" data-v-676d5bc8>(</span><span class="word" data-v-676d5bc8>...a</span> <span class="brackets" data-v-676d5bc8>)</span></div><br data-v-676d5bc8><div data-v-676d5bc8><span class="function" data-v-676d5bc8>function </span><span class="word" data-v-676d5bc8>sum</span> <span class="brackets" data-v-676d5bc8>(</span><span class="word" data-v-676d5bc8>a,b,c</span> <span class="brackets" data-v-676d5bc8>){</span></div><div class="pTwo" data-v-676d5bc8><span class="then" data-v-676d5bc8>return </span> <span class="word" data-v-676d5bc8>a+b+c</span></div><span class="brackets" data-v-676d5bc8>}</span><div data-v-676d5bc8><span class="function" data-v-676d5bc8>const </span><span class="word" data-v-676d5bc8>sum</span> <span class="then" data-v-676d5bc8>=</span><span class="brackets" data-v-676d5bc8>(</span> <span class="word" data-v-676d5bc8>a,b,c</span><span class="brackets" data-v-676d5bc8>)</span> <span class="function" data-v-676d5bc8>=&gt;</span><span class="word" data-v-676d5bc8>a+b+c</span></div><div data-v-676d5bc8><span class="word" data-v-676d5bc8>sum</span> <span class="brackets" data-v-676d5bc8>(</span><span class="word" data-v-676d5bc8>...a</span> <span class="brackets" data-v-676d5bc8>) </span><span class="comment" data-v-676d5bc8>// 6</span></div><br data-v-676d5bc8><div data-v-676d5bc8><span class="function" data-v-676d5bc8>const </span><span class="word" data-v-676d5bc8>sum</span> <span class="then" data-v-676d5bc8>=</span><span class="word" data-v-676d5bc8>sum</span> <span class="brackets" data-v-676d5bc8>(</span><span class="word" data-v-676d5bc8>...a</span><span class="brackets" data-v-676d5bc8>)</span></div><br data-v-676d5bc8><div class="comment" data-v-676d5bc8>// 形參的用法</div><div data-v-676d5bc8><span class="word" data-v-676d5bc8>conso.</span><span class="variable" data-v-676d5bc8>log</span> <span class="brackets" data-v-676d5bc8>(</span><span class="word" data-v-676d5bc8>Math.max</span><span class="brackets" data-v-676d5bc8>(</span><span class="src" data-v-676d5bc8>必須是字符的形式,不能直接接陣列,必須逗號隔開 </span><span class="brackets" data-v-676d5bc8>)</span> <span class="brackets" data-v-676d5bc8>)</span></div><div data-v-676d5bc8><span class="word" data-v-676d5bc8>conso.</span><span class="variable" data-v-676d5bc8>log</span> <span class="brackets" data-v-676d5bc8>(</span><span class="word" data-v-676d5bc8>Math.max</span><span class="brackets" data-v-676d5bc8>(</span> <span class="number" data-v-676d5bc8>1,2,3</span><span class="brackets" data-v-676d5bc8>)</span> <span class="brackets" data-v-676d5bc8>)</span><span class="comment" data-v-676d5bc8>// 裡面要逗號</span></div><div class="comment" data-v-676d5bc8>// 陣列沒有 求最大值 的方法</div><div data-v-676d5bc8><span class="function" data-v-676d5bc8>const </span> <span class="word" data-v-676d5bc8>a</span><span class="then" data-v-676d5bc8>=</span> <span class="brackets" data-v-676d5bc8>[</span><span class="number" data-v-676d5bc8>1, 2, 3</span><span class="brackets" data-v-676d5bc8>]</span></div><div data-v-676d5bc8><span class="function" data-v-676d5bc8>const </span> <span class="word" data-v-676d5bc8>b</span><span class="then" data-v-676d5bc8>=</span> <span class="brackets" data-v-676d5bc8>[</span><span class="number" data-v-676d5bc8>4, 5, 6</span><span class="brackets" data-v-676d5bc8>]</span></div><div data-v-676d5bc8><span class="word" data-v-676d5bc8>console.</span><span class="variable" data-v-676d5bc8>log</span> <span class="brackets" data-v-676d5bc8>(</span><span class="word" data-v-676d5bc8>...a</span><span class="brackets" data-v-676d5bc8>)</span><span class="comment" data-v-676d5bc8>// 1 2 3</span><span class="comment" data-v-676d5bc8>// 打印沒逗號,一樣能用在.max</span></div><span class="comment" data-v-676d5bc8>...a === 1,2,3</span><div data-v-676d5bc8><span class="word" data-v-676d5bc8>console.</span><span class="variable" data-v-676d5bc8>log</span> <span class="word" data-v-676d5bc8>Math</span><span class="variable" data-v-676d5bc8>.max</span> <span class="brackets" data-v-676d5bc8>(</span><span class="word" data-v-676d5bc8>...a</span><span class="brackets" data-v-676d5bc8>)</span> <span class="comment" data-v-676d5bc8>// 3</span></div><div data-v-676d5bc8><span class="word" data-v-676d5bc8>console.</span><span class="variable" data-v-676d5bc8>log</span> <span class="word" data-v-676d5bc8>Math</span><span class="variable" data-v-676d5bc8>.min</span> <span class="brackets" data-v-676d5bc8>(</span><span class="word" data-v-676d5bc8>...a</span><span class="brackets" data-v-676d5bc8>)</span> <span class="comment" data-v-676d5bc8>// 3</span></div><div data-v-676d5bc8><span class="word" data-v-676d5bc8>console.</span><span class="variable" data-v-676d5bc8>log</span> <span class="word" data-v-676d5bc8>Math</span><span class="variable" data-v-676d5bc8>.max</span> <span class="brackets" data-v-676d5bc8>(</span><span class="word" data-v-676d5bc8>...a,...b</span><span class="brackets" data-v-676d5bc8>)</span> <span class="comment" data-v-676d5bc8>// 6</span></div><br data-v-676d5bc8><div class="comment" data-v-676d5bc8>// 形參 &amp; 實參</div><div data-v-676d5bc8><span class="function" data-v-676d5bc8>function </span><span class="word" data-v-676d5bc8>test</span> <span class="brackets" data-v-676d5bc8>(</span><span class="word" data-v-676d5bc8>形參1,形參2</span><span class="brackets" data-v-676d5bc8>){ </span><span class="comment" data-v-676d5bc8>// 函數聲明的小括號裡是 形參 </span></div><div class="comment pTwo" data-v-676d5bc8>// 代碼</div><div class="brackets" data-v-676d5bc8>}</div><div data-v-676d5bc8><span class="word" data-v-676d5bc8>test</span> <span class="brackets" data-v-676d5bc8>(</span><span class="word" data-v-676d5bc8>實參1,實參2</span><span class="brackets" data-v-676d5bc8>) </span><span class="comment" data-v-676d5bc8>// 函數調用的小括號裡是 實參</span></div>',31),vf=U('<div class="articleCardTitle cor36 fz34" data-v-676d5bc8>匿名函數</div><a href="https://juejin.cn/post/6844903962257129485" data-v-676d5bc8>https://juejin.cn/post/6844903962257129485</a><a href="https://hackmd.io/@Jung/H1H3ErwUI" data-v-676d5bc8>https://hackmd.io/@Jung/H1H3ErwUI</a><p class="fz28" data-v-676d5bc8>1.事件</p><p class="fz28" data-v-676d5bc8>2.物件</p><p class="fz28" data-v-676d5bc8>3.函數表達式</p><p class="fz28" data-v-676d5bc8>4.回調函數</p><p class="fz28" data-v-676d5bc8>5.函數返回值</p><p class="fz28" data-v-676d5bc8>6.模仿塊及作用域 IIFE</p><div id="twofunction006" class="articleCardTitle cor36 fz34" data-v-676d5bc8> 2.6 箭頭函數 -&gt; 更適用於本來需要匿名函數的地方 </div><p class="fz28" data-v-676d5bc8>箭頭函數 和 普通function區別</p><p class="fz28" data-v-676d5bc8> 在執行過程中不會初始化this, 也不會初始化aruguments, 它不能被new, 沒有prototype, 它不能當成構造函數執行 </p><br data-v-676d5bc8><br data-v-676d5bc8><p class="fz28" data-v-676d5bc8>另外 1. 箭頭函式可作為物件的方法使用</p><br data-v-676d5bc8><p class="fz28" data-v-676d5bc8> 2. 箭頭函式(arrow function)的 this 不因為使用 call() / apply() / bind() 方法而被修改 </p><div class="dis" data-v-676d5bc8><div class="bgcVS" data-v-676d5bc8><div data-v-676d5bc8><span class="function" data-v-676d5bc8>const </span><span class="word" data-v-676d5bc8>fn</span> <span class="then" data-v-676d5bc8>=</span><span class="function" data-v-676d5bc8>function </span><span class="brackets" data-v-676d5bc8>(){</span></div><div class="pTwo" data-v-676d5bc8><span class="word" data-v-676d5bc8>console.</span><span class="variable" data-v-676d5bc8>log</span><span class="brackets" data-v-676d5bc8>(</span> <span class="number" data-v-676d5bc8>123</span><span class="brackets" data-v-676d5bc8>)</span></div><div class="brackets" data-v-676d5bc8>}</div></div><div class="bgcVSMid" data-v-676d5bc8>&gt;</div><div class="bgcVS" data-v-676d5bc8><div data-v-676d5bc8><span class="function" data-v-676d5bc8>const </span><span class="word" data-v-676d5bc8>fn</span> <span class="then" data-v-676d5bc8>=</span><span class="brackets" data-v-676d5bc8>()</span><span class="function" data-v-676d5bc8>=&gt;</span> <span class="brackets" data-v-676d5bc8>{</span></div><div class="pTwo" data-v-676d5bc8><span class="word" data-v-676d5bc8>console.</span><span class="variable" data-v-676d5bc8>log</span><span class="brackets" data-v-676d5bc8>(</span> <span class="number" data-v-676d5bc8>123</span><span class="brackets" data-v-676d5bc8>)</span></div><div class="brackets" data-v-676d5bc8>}</div><br data-v-676d5bc8><br data-v-676d5bc8><div data-v-676d5bc8><span class="function" data-v-676d5bc8>const </span><span class="word" data-v-676d5bc8>fn</span> <span class="then" data-v-676d5bc8>=</span><span class="brackets" data-v-676d5bc8>(</span> <span class="word" data-v-676d5bc8>x</span><span class="brackets" data-v-676d5bc8>)</span><span class="function" data-v-676d5bc8>=&gt;</span><span class="brackets" data-v-676d5bc8>{ </span><span class="comment" data-v-676d5bc8>// 這裡接形參</span></div><div class="pTwo" data-v-676d5bc8><span class="word" data-v-676d5bc8>console.</span><span class="variable" data-v-676d5bc8>log</span><span class="brackets" data-v-676d5bc8>(</span> <span class="word" data-v-676d5bc8>x</span><span class="brackets" data-v-676d5bc8>)</span></div><div class="brackets" data-v-676d5bc8>}</div><div data-v-676d5bc8><span class="word" data-v-676d5bc8>fn</span> <span class="brackets" data-v-676d5bc8>(</span><span class="number" data-v-676d5bc8>1</span> <span class="brackets" data-v-676d5bc8>)</span><span class="comment" data-v-676d5bc8>// 這裡放實參</span></div><br data-v-676d5bc8><br data-v-676d5bc8><span class="comment" data-v-676d5bc8>// 只有一個形參 可省略小括號</span><div data-v-676d5bc8><span class="function" data-v-676d5bc8>const </span><span class="word" data-v-676d5bc8>fn</span> <span class="then" data-v-676d5bc8>= </span><span class="word" data-v-676d5bc8>x </span><span class="function" data-v-676d5bc8>=&gt;</span><span class="brackets" data-v-676d5bc8>{ </span></div><div class="pTwo" data-v-676d5bc8><span class="word" data-v-676d5bc8>console.</span><span class="variable" data-v-676d5bc8>log</span><span class="brackets" data-v-676d5bc8>(</span> <span class="word" data-v-676d5bc8>x</span><span class="brackets" data-v-676d5bc8>)</span></div><div class="brackets" data-v-676d5bc8>}</div><div data-v-676d5bc8><span class="word" data-v-676d5bc8>fn</span> <span class="brackets" data-v-676d5bc8>(</span><span class="number" data-v-676d5bc8>1</span> <span class="brackets" data-v-676d5bc8>)</span><span class="comment" data-v-676d5bc8>// 這裡放實參</span></div><span class="comment" data-v-676d5bc8>// 沒有形參 或 2 個形參 不可省略小括號</span><br data-v-676d5bc8><br data-v-676d5bc8><div class="comment" data-v-676d5bc8> // 只有一個語句 可省略大括號 並自動做為返回值被返回 </div><div class="comment" data-v-676d5bc8>// ( 只有一行代碼 )</div><div data-v-676d5bc8><span class="function" data-v-676d5bc8>const </span><span class="word" data-v-676d5bc8>fn</span> <span class="then" data-v-676d5bc8>= </span><span class="word" data-v-676d5bc8>x </span><span class="function" data-v-676d5bc8>=&gt; </span><span class="word" data-v-676d5bc8>console.</span><span class="variable" data-v-676d5bc8>log</span><span class="brackets" data-v-676d5bc8>(</span> <span class="word" data-v-676d5bc8>x</span><span class="brackets" data-v-676d5bc8>)</span></div><div data-v-676d5bc8><span class="word" data-v-676d5bc8>fn</span> <span class="brackets" data-v-676d5bc8>(</span><span class="number" data-v-676d5bc8>1</span> <span class="brackets" data-v-676d5bc8>)</span><span class="comment" data-v-676d5bc8>// 要先聲明在調用</span></div><br data-v-676d5bc8><br data-v-676d5bc8><span class="comment" data-v-676d5bc8>// 只有一個形參 可省略小括號</span><div data-v-676d5bc8><span class="function" data-v-676d5bc8>const </span><span class="word" data-v-676d5bc8>fn</span> <span class="then" data-v-676d5bc8>= </span><span class="word" data-v-676d5bc8>x </span><span class="function" data-v-676d5bc8>=&gt;</span><span class="brackets" data-v-676d5bc8>{ </span></div><div class="pTwo" data-v-676d5bc8><span class="then" data-v-676d5bc8>return </span><span class="word" data-v-676d5bc8>x </span><span class="then" data-v-676d5bc8>+ </span><span class="word" data-v-676d5bc8>x </span></div><div class="brackets" data-v-676d5bc8>}</div><div data-v-676d5bc8><span class="word" data-v-676d5bc8>fn</span> <span class="brackets" data-v-676d5bc8>(</span><span class="number" data-v-676d5bc8>1</span> <span class="brackets" data-v-676d5bc8>)</span><span class="comment" data-v-676d5bc8>// 2</span></div><br data-v-676d5bc8><br data-v-676d5bc8><span class="comment" data-v-676d5bc8>// 如果在一行裡面可以省 return &amp; 大括號</span><div data-v-676d5bc8><span class="function" data-v-676d5bc8>const </span><span class="word" data-v-676d5bc8>fn</span> <span class="then" data-v-676d5bc8>= </span><span class="word" data-v-676d5bc8>x </span><span class="function" data-v-676d5bc8>=&gt;</span><span class="word" data-v-676d5bc8>x </span><span class="then" data-v-676d5bc8>+ </span><span class="word" data-v-676d5bc8>x </span></div><div data-v-676d5bc8><span class="word" data-v-676d5bc8>fn</span> <span class="brackets" data-v-676d5bc8>(</span><span class="number" data-v-676d5bc8>1</span> <span class="brackets" data-v-676d5bc8>)</span><span class="comment" data-v-676d5bc8>// 2</span></div><br data-v-676d5bc8><br data-v-676d5bc8><div class="comment" data-v-676d5bc8>// 可以直接返回一個物件</div><div class="comment" data-v-676d5bc8>// 注意! 物件和函數都是 {}</div><div class="comment" data-v-676d5bc8>// 直接 ( { 物件 } )</div><div data-v-676d5bc8><span class="function" data-v-676d5bc8>const </span><span class="word" data-v-676d5bc8>fn</span> <span class="then" data-v-676d5bc8>= </span><span class="brackets" data-v-676d5bc8>(</span> <span class="word" data-v-676d5bc8>uname</span><span class="brackets" data-v-676d5bc8>)</span><span class="function" data-v-676d5bc8>=&gt;</span><span class="brackets" data-v-676d5bc8>( {</span><span class="word" data-v-676d5bc8>name: uname</span><span class="brackets" data-v-676d5bc8>} )</span></div><div data-v-676d5bc8><span class="function" data-v-676d5bc8>const </span><span class="word" data-v-676d5bc8>fn</span> <span class="then" data-v-676d5bc8>= </span><span class="brackets" data-v-676d5bc8>(</span> <span class="word" data-v-676d5bc8>uname</span><span class="brackets" data-v-676d5bc8>)</span><span class="function" data-v-676d5bc8>=&gt;</span><span class="brackets" data-v-676d5bc8>( {</span><span class="word" data-v-676d5bc8>uname: uname</span><span class="brackets" data-v-676d5bc8>} )</span></div><div data-v-676d5bc8><span class="word" data-v-676d5bc8>fn</span> <span class="brackets" data-v-676d5bc8>(</span><span class="src" data-v-676d5bc8>&quot;wayne&quot;</span> <span class="brackets" data-v-676d5bc8>)</span></div><br data-v-676d5bc8><br data-v-676d5bc8></div></div><div class="bgcVS" data-v-676d5bc8><div data-v-676d5bc8><span class="function" data-v-676d5bc8>const </span><span class="word" data-v-676d5bc8>form</span> <span class="then" data-v-676d5bc8>=</span><span class="word" data-v-676d5bc8>document.querySelector</span><span class="brackets" data-v-676d5bc8>(</span> <span class="src" data-v-676d5bc8>&quot;form&quot;</span><span class="brackets" data-v-676d5bc8>)</span></div><div data-v-676d5bc8><span class="word" data-v-676d5bc8>form.addEventListener</span><span class="brackets" data-v-676d5bc8>(</span> <span class="src" data-v-676d5bc8>&quot;click&quot;,</span><span class="function" data-v-676d5bc8>function</span><span class="brackets" data-v-676d5bc8>(e){</span></div><div class="pTwo" data-v-676d5bc8><span class="word" data-v-676d5bc8>e.preventDefault</span><span class="brackets" data-v-676d5bc8>()</span></div><div class="brackets" data-v-676d5bc8>}</div><div data-v-676d5bc8><span class="word" data-v-676d5bc8>form.addEventListener</span><span class="brackets" data-v-676d5bc8>(</span> <span class="src" data-v-676d5bc8>&quot;click&quot;,</span><span class="word" data-v-676d5bc8>ev</span> <span class="function" data-v-676d5bc8>=&gt;</span><span class="word" data-v-676d5bc8>ev.preventDefault</span><span class="brackets" data-v-676d5bc8>())</span></div></div><p class="fz28" data-v-676d5bc8>結論</p><p class="fz28" data-v-676d5bc8>1. 箭頭屬於表達式函數, 不存在函數提升</p><p class="fz28" data-v-676d5bc8>2. 只有一個形參 可省略小括號 ( )</p><p class="fz28" data-v-676d5bc8> 3. 只有一個語句 (一行代碼) 可省略大括號 { } 並自動做為返回值被返回 </p><p class="fz28" data-v-676d5bc8>4. 加括號 ( ) 的函數體 返回 物件字面量 表達式</p><br data-v-676d5bc8><br data-v-676d5bc8><div class="articleCardTitle cor36 fz34" data-v-676d5bc8>箭頭函數參數</div><p class="fz28" data-v-676d5bc8>箭頭函數 沒有 arguments 動態參數</p><p class="fz28" data-v-676d5bc8>有 剩餘參數 ...args</p><div class="bgcVS" data-v-676d5bc8><div class="comment" data-v-676d5bc8>// 利用箭頭函數來求和</div><div data-v-676d5bc8><span class="function" data-v-676d5bc8>const </span><span class="word" data-v-676d5bc8>getSum</span> <span class="then" data-v-676d5bc8>=</span><span class="brackets" data-v-676d5bc8>(</span> <span class="word" data-v-676d5bc8>...arr</span><span class="brackets" data-v-676d5bc8>)</span> <span class="function" data-v-676d5bc8>=&gt;</span><span class="brackets" data-v-676d5bc8>{</span></div><div class="pTwo" data-v-676d5bc8><span class="function" data-v-676d5bc8>let </span> <span class="word" data-v-676d5bc8>sum</span><span class="then" data-v-676d5bc8>=</span> <span class="number" data-v-676d5bc8>0</span></div><div class="pTwo" data-v-676d5bc8><span class="then" data-v-676d5bc8>for </span> <span class="brackets" data-v-676d5bc8>(</span><span class="function" data-v-676d5bc8>let </span> <span class="word" data-v-676d5bc8>i</span><span class="then" data-v-676d5bc8>=</span> <span class="number" data-v-676d5bc8>0</span><span class="then" data-v-676d5bc8>;</span> <span class="word" data-v-676d5bc8>i</span><span class="then" data-v-676d5bc8>＜</span> <span class="word" data-v-676d5bc8>arr.length</span><span class="then" data-v-676d5bc8>;</span> <span class="word" data-v-676d5bc8>i</span><span class="then" data-v-676d5bc8>++</span> <span class="brackets" data-v-676d5bc8>){</span></div><div class="pFou" data-v-676d5bc8><span class="word" data-v-676d5bc8>sum</span> <span class="then" data-v-676d5bc8>+=</span><span class="word" data-v-676d5bc8>arr</span> <span class="brackets" data-v-676d5bc8>[</span><span class="word" data-v-676d5bc8>i</span> <span class="brackets" data-v-676d5bc8>]</span></div><div class="pTwo brackets" data-v-676d5bc8>}</div><div class="pTwo" data-v-676d5bc8><span class="then" data-v-676d5bc8>return </span> <span class="word" data-v-676d5bc8>sum</span></div><div class="brackets" data-v-676d5bc8>}</div><div data-v-676d5bc8><span class="word" data-v-676d5bc8>getSum</span> <span class="brackets" data-v-676d5bc8>(</span><span class="number" data-v-676d5bc8>2,3</span> <span class="brackets" data-v-676d5bc8>)</span></div></div><div class="articleCardTitle cor36 fz34" data-v-676d5bc8>箭頭函數 this</div><p class="fz28" data-v-676d5bc8>箭頭函數的this指向哪裡?</p><p class="fz28" data-v-676d5bc8>外部的this or (捕獲其上下文中的this)</p><p class="fz28" data-v-676d5bc8> 箭頭函數不創建 this , 他從自己的作用域鏈的上一層沿用 this </p><div class="bgcVS" data-v-676d5bc8><div class="comment" data-v-676d5bc8> // 以前學this指向:誰調用的這個函數,this就指向誰 </div><div data-v-676d5bc8><span class="word" data-v-676d5bc8>console.</span><span class="variable" data-v-676d5bc8>log</span> <span class="brackets" data-v-676d5bc8>(</span><span class="then" data-v-676d5bc8>this</span> <span class="brackets" data-v-676d5bc8>)</span><span class="comment" data-v-676d5bc8>//window</span></div><br data-v-676d5bc8><div data-v-676d5bc8><span class="function" data-v-676d5bc8>function </span><span class="word" data-v-676d5bc8>fn</span> <span class="brackets" data-v-676d5bc8>(){</span></div><div class="pTwo" data-v-676d5bc8><span class="word" data-v-676d5bc8>console.</span><span class="variable" data-v-676d5bc8>log</span> <span class="brackets" data-v-676d5bc8>(</span><span class="then" data-v-676d5bc8>this</span> <span class="brackets" data-v-676d5bc8>)</span><span class="comment" data-v-676d5bc8>//window</span></div><div class="brackets" data-v-676d5bc8>}</div><br data-v-676d5bc8><div data-v-676d5bc8><span class="function" data-v-676d5bc8>const </span><span class="word" data-v-676d5bc8>obj</span> <span class="then" data-v-676d5bc8>=</span><span class="brackets" data-v-676d5bc8>{</span></div><div class="pTwo" data-v-676d5bc8><span class="word" data-v-676d5bc8>uname:</span> <span class="src" data-v-676d5bc8>&quot;wayne&quot;</span></div><div class="pTwo" data-v-676d5bc8><span class="word" data-v-676d5bc8>sayHi:</span><span class="function" data-v-676d5bc8>function </span><span class="brackets" data-v-676d5bc8>(){</span></div><div class="pFou" data-v-676d5bc8><span class="word" data-v-676d5bc8>console.</span><span class="variable" data-v-676d5bc8>log</span> <span class="brackets" data-v-676d5bc8>(</span><span class="then" data-v-676d5bc8>this</span> <span class="brackets" data-v-676d5bc8>)</span><span class="comment" data-v-676d5bc8>// obj</span></div><div class="brackets pTwo" data-v-676d5bc8>}</div><div class="brackets" data-v-676d5bc8>}</div><div data-v-676d5bc8><span class="word" data-v-676d5bc8>obj.sayHi</span><span class="brackets" data-v-676d5bc8>()</span></div><div class="comment" data-v-676d5bc8>// sayHi() 是 obj 調用的</div><div class="comment" data-v-676d5bc8>// this 指向 obj</div><br data-v-676d5bc8><br data-v-676d5bc8><div class="comment" data-v-676d5bc8>// 箭頭 this指向 上一層作用域的 this 指向</div><div data-v-676d5bc8><span class="function" data-v-676d5bc8>const </span> <span class="word" data-v-676d5bc8>fn</span><span class="then" data-v-676d5bc8>=</span> <span class="brackets" data-v-676d5bc8>()</span><span class="function" data-v-676d5bc8>=&gt;</span> <span class="brackets" data-v-676d5bc8>{</span></div><div class="pTwo" data-v-676d5bc8><span class="word" data-v-676d5bc8>console.</span><span class="variable" data-v-676d5bc8>log</span> <span class="brackets" data-v-676d5bc8>(</span><span class="then" data-v-676d5bc8>this</span> <span class="brackets" data-v-676d5bc8>)</span><span class="comment" data-v-676d5bc8>//window</span></div><div class="brackets" data-v-676d5bc8>}</div><span class="word" data-v-676d5bc8>fn</span> <span class="brackets" data-v-676d5bc8>()</span><br data-v-676d5bc8><div data-v-676d5bc8><span class="function" data-v-676d5bc8>const </span><span class="word" data-v-676d5bc8>obj</span> <span class="then" data-v-676d5bc8>=</span><span class="brackets" data-v-676d5bc8>{</span></div><div class="pTwo" data-v-676d5bc8><span class="word" data-v-676d5bc8>uname:</span> <span class="src" data-v-676d5bc8>&quot;wayne&quot;</span></div><div class="pTwo" data-v-676d5bc8><span class="word" data-v-676d5bc8>sayHi:</span><span class="brackets" data-v-676d5bc8>()</span><span class="function" data-v-676d5bc8>=&gt; </span><span class="brackets" data-v-676d5bc8>{</span></div><div class="pFou" data-v-676d5bc8><span class="word" data-v-676d5bc8>console.</span><span class="variable" data-v-676d5bc8>log</span> <span class="brackets" data-v-676d5bc8>(</span><span class="then" data-v-676d5bc8>this</span> <span class="brackets" data-v-676d5bc8>)</span><span class="comment" data-v-676d5bc8>// window</span></div><div class="comment pFou" data-v-676d5bc8>// 1. { 裡面沒有 this }</div><div class="comment pFou" data-v-676d5bc8>// 2. 往上一層 作用域找</div><div class="comment pFou" data-v-676d5bc8> // 3. obj.sayHi() 是 window.obj.sayHi() </div><div class="comment pFou" data-v-676d5bc8>// . 是window來調用的</div><div class="comment pFou" data-v-676d5bc8>// this 指向 window</div><div class="brackets pTwo" data-v-676d5bc8>}</div><div class="brackets" data-v-676d5bc8>}</div><div data-v-676d5bc8><span class="word" data-v-676d5bc8>obj.sayHi</span><span class="brackets" data-v-676d5bc8>()</span></div><br data-v-676d5bc8><br data-v-676d5bc8><div data-v-676d5bc8><span class="function" data-v-676d5bc8>const </span><span class="word" data-v-676d5bc8>obj</span> <span class="then" data-v-676d5bc8>=</span><span class="brackets" data-v-676d5bc8>{</span></div><div class="pTwo" data-v-676d5bc8><span class="word" data-v-676d5bc8>uname:</span> <span class="src" data-v-676d5bc8>&quot;wayne&quot;</span></div><div class="" data-v-676d5bc8><div class="pTwo" data-v-676d5bc8><span class="word" data-v-676d5bc8>sayHi:</span><span class="function" data-v-676d5bc8>function </span><span class="brackets" data-v-676d5bc8>(){</span></div><div class="pFou" data-v-676d5bc8><span class="word" data-v-676d5bc8>console.</span><span class="variable" data-v-676d5bc8>log</span><span class="brackets" data-v-676d5bc8>(</span> <span class="then" data-v-676d5bc8>this</span><span class="brackets" data-v-676d5bc8>)</span><span class="comment" data-v-676d5bc8>// obj</span></div><div class="pFou" data-v-676d5bc8><span class="function" data-v-676d5bc8>let </span> <span class="word" data-v-676d5bc8>i</span><span class="then" data-v-676d5bc8>=</span> <span class="number" data-v-676d5bc8>10</span></div><div class="" data-v-676d5bc8><div class="pFou" data-v-676d5bc8><span class="function" data-v-676d5bc8>const </span><span class="word" data-v-676d5bc8>count</span> <span class="then" data-v-676d5bc8>=</span><span class="brackets" data-v-676d5bc8>()</span><span class="function" data-v-676d5bc8>=&gt;</span><span class="brackets" data-v-676d5bc8>{</span></div><div class="pSix" data-v-676d5bc8><span class="word" data-v-676d5bc8>console.</span><span class="variable" data-v-676d5bc8>log</span><span class="brackets" data-v-676d5bc8>(</span> <span class="then" data-v-676d5bc8>this</span><span class="brackets" data-v-676d5bc8>)</span><span class="comment" data-v-676d5bc8>// obj</span></div><div class="brackets pFou" data-v-676d5bc8>}</div><div class="pFou" data-v-676d5bc8><span class="word" data-v-676d5bc8>count</span><span class="brackets" data-v-676d5bc8>()</span></div></div><div class="brackets pTwo" data-v-676d5bc8>}</div></div><div class="brackets" data-v-676d5bc8>}</div><div data-v-676d5bc8><span class="word" data-v-676d5bc8>obj.sayHi</span><span class="brackets" data-v-676d5bc8>()</span></div><br data-v-676d5bc8><br data-v-676d5bc8><div data-v-676d5bc8><span class="function" data-v-676d5bc8>const </span><span class="word" data-v-676d5bc8>obj</span> <span class="then" data-v-676d5bc8>=</span><span class="brackets" data-v-676d5bc8>{</span></div><div class="pTwo" data-v-676d5bc8><span class="word" data-v-676d5bc8>uname:</span> <span class="src" data-v-676d5bc8>&quot;wayne&quot;</span></div><div class="bor1" data-v-676d5bc8><span class="comment" data-v-676d5bc8>// 這層函數 this 指向他的調用者 obj</span><div class="pTwo" data-v-676d5bc8><span class="word" data-v-676d5bc8>sayHi:</span><span class="function" data-v-676d5bc8>function </span><span class="brackets" data-v-676d5bc8>(){</span></div><div class="pFou" data-v-676d5bc8><span class="word" data-v-676d5bc8>console.</span><span class="variable" data-v-676d5bc8>log</span><span class="brackets" data-v-676d5bc8>(</span> <span class="then" data-v-676d5bc8>this</span><span class="brackets" data-v-676d5bc8>)</span><span class="comment" data-v-676d5bc8>// obj</span></div><div class="pFou" data-v-676d5bc8><span class="function" data-v-676d5bc8>let </span> <span class="word" data-v-676d5bc8>i</span><span class="then" data-v-676d5bc8>=</span> <span class="number" data-v-676d5bc8>10</span></div><div class="bor2" data-v-676d5bc8><span class="comment" data-v-676d5bc8>// 這層沒有 this 往上一層找 ^</span><div class="pTwo" data-v-676d5bc8><span class="function" data-v-676d5bc8>const </span><span class="word" data-v-676d5bc8>count</span> <span class="then" data-v-676d5bc8>=</span><span class="brackets" data-v-676d5bc8>()</span><span class="function" data-v-676d5bc8>=&gt;</span><span class="brackets" data-v-676d5bc8>{</span></div><div class="pFou" data-v-676d5bc8><span class="word" data-v-676d5bc8>console.</span><span class="variable" data-v-676d5bc8>log</span><span class="brackets" data-v-676d5bc8>(</span> <span class="then" data-v-676d5bc8>this</span><span class="brackets" data-v-676d5bc8>)</span><span class="comment" data-v-676d5bc8>// obj</span></div><div class="brackets pTwo" data-v-676d5bc8>}</div><div class="pTwo" data-v-676d5bc8><span class="word" data-v-676d5bc8>count</span><span class="brackets" data-v-676d5bc8>()</span></div></div><div class="brackets pTwo" data-v-676d5bc8>}</div></div><div class="brackets" data-v-676d5bc8>}</div><div data-v-676d5bc8><span class="word" data-v-676d5bc8>obj.sayHi</span><span class="brackets" data-v-676d5bc8>()</span></div><br data-v-676d5bc8><br data-v-676d5bc8><div data-v-676d5bc8><span class="function" data-v-676d5bc8>const </span><span class="word" data-v-676d5bc8>btn</span> <span class="then" data-v-676d5bc8>=</span><span class="word" data-v-676d5bc8>document.querySelector</span><span class="brackets" data-v-676d5bc8>(</span> <span class="src" data-v-676d5bc8>&quot;.btn&quot;</span><span class="brackets" data-v-676d5bc8>)</span></div><span class="comment" data-v-676d5bc8>//普通函數指DOM對象</span><div data-v-676d5bc8><span class="word" data-v-676d5bc8>btn.addEventListener</span><span class="brackets" data-v-676d5bc8>(</span> <span class="src" data-v-676d5bc8>&quot;click&quot;,</span><span class="function" data-v-676d5bc8>function</span><span class="brackets" data-v-676d5bc8>(){</span></div><div class="pTwo" data-v-676d5bc8><span class="word" data-v-676d5bc8>console.</span><span class="variable" data-v-676d5bc8>log</span> <span class="brackets" data-v-676d5bc8>(</span><span class="then" data-v-676d5bc8>this</span> <span class="brackets" data-v-676d5bc8>)</span><span class="comment" data-v-676d5bc8>// btn</span></div><div class="brackets" data-v-676d5bc8>}</div><div data-v-676d5bc8><span class="comment" data-v-676d5bc8>// 箭頭函數 此時 this 指向 window</span></div><div data-v-676d5bc8><span class="word" data-v-676d5bc8>btn.addEventListener</span><span class="brackets" data-v-676d5bc8>(</span> <span class="src" data-v-676d5bc8>&quot;click&quot;,</span><span class="brackets" data-v-676d5bc8>()</span><span class="function" data-v-676d5bc8>=&gt; </span><span class="brackets" data-v-676d5bc8>{</span></div><div class="pTwo" data-v-676d5bc8><span class="word" data-v-676d5bc8>console.</span><span class="variable" data-v-676d5bc8>log</span> <span class="brackets" data-v-676d5bc8>(</span><span class="then" data-v-676d5bc8>this</span> <span class="brackets" data-v-676d5bc8>)</span><span class="comment" data-v-676d5bc8>// window</span></div><div class="brackets" data-v-676d5bc8>})</div></div><p class="fz28" data-v-676d5bc8> 箭頭函式(arrow function)的 this 不因為使用 call() / apply() / bind() 方法而被修改 </p><p class="fz28" data-v-676d5bc8></p><p class="fz28" data-v-676d5bc8></p><p class="fz28" data-v-676d5bc8></p><p class="fz28" data-v-676d5bc8></p><p class="fz28" data-v-676d5bc8></p><p class="fz28" data-v-676d5bc8></p><p class="fz28" data-v-676d5bc8></p><p class="fz28" data-v-676d5bc8></p><p class="fz28" data-v-676d5bc8></p><p class="fz28" data-v-676d5bc8></p><p class="fz28" data-v-676d5bc8></p><p class="fz28" data-v-676d5bc8></p><p class="fz28" data-v-676d5bc8></p><p class="fz28" data-v-676d5bc8></p><p class="fz28" data-v-676d5bc8></p><p class="fz28" data-v-676d5bc8></p><p class="fz28" data-v-676d5bc8></p><p class="fz28" data-v-676d5bc8></p><p class="fz28" data-v-676d5bc8></p><p class="fz28" data-v-676d5bc8></p><p class="fz28" data-v-676d5bc8></p><p class="fz28" data-v-676d5bc8></p><p class="fz28" data-v-676d5bc8></p><p class="fz28" data-v-676d5bc8></p><p class="fz28" data-v-676d5bc8></p><p class="fz28" data-v-676d5bc8></p><p class="fz28" data-v-676d5bc8></p>',63),ef=as(()=>v("div",{class:"toTopButton"},[v("div",{class:"disCen"},"___"),v("div",{class:"disCen"},"▲")],-1)),pf=[ef],lf=as(()=>v("div",{class:"toBotButton"},[v("div",{class:"disCen"},"▼"),v("div",{class:"disCen"},"￣")],-1)),bf=[lf],rf={__name:"JsPageThreeTwo",setup(a){const s=ua(!1);window.addEventListener("scroll",function(){s.value=window.scrollY>0});function d(){window.scrollTo({top:0,left:0,behavior:"smooth"})}function t(){window.scrollTo({top:999999,left:0,behavior:"smooth"})}function c(e){window.scrollTo({top:document.getElementById(`${e}`).offsetTop,behavior:"smooth"})}return(e,n)=>{const l=za("dir");return da(),ea(Q,null,[v("section",null,[v("div",Mr,[v("div",Fr,[v("div",Ir,[v("div",{onClick:n[0]||(n[0]=p=>c("twofunction001")),class:"leftNavText"}," 函數提升 "),v("div",{onClick:n[1]||(n[1]=p=>c("twofunction002")),class:"leftNavText"}," 形參實參 "),v("div",{onClick:n[2]||(n[2]=p=>c("twofunction003")),class:"leftNavText"}," 動態參數 "),v("div",{onClick:n[3]||(n[3]=p=>c("twofunction004")),class:"leftNavText"}," 剩餘參數 "),v("div",{onClick:n[4]||(n[4]=p=>c("twofunction005")),class:"leftNavText"}," 展開運算符 "),v("div",{onClick:n[5]||(n[5]=p=>c("twofunction006")),class:"leftNavText"}," 箭頭函數 "),v("div",{onClick:n[6]||(n[6]=p=>c("")),class:"leftNavText"})])])]),v("div",Rr,[v("div",Hr,[v("div",Br,[Jr,v("div",Dr,[Wr,T(l,{class:"pTwo"},{default:C(()=>[Ur,fa(),Kr,Xr]),_:1}),Yr]),Gr,v("div",Qr,[Zr,T(l,null,{default:C(()=>[af,sf,fa(),df,cf,tf]),_:1}),nf]),vf])])])]),v("div",null,[X(T(W,{name:"fade",tag:"div"},{default:C(()=>[v("div",{onClick:d,class:"toTop"},pf)]),_:1},512),[[Y,s.value]]),X(T(W,{name:"fade",tag:"div"},{default:C(()=>[v("div",{onClick:t,class:"toBot"},bf)]),_:1},512),[[Y,s.value]])])],64)}}},ff=ia(rf,[["__scopeId","data-v-676d5bc8"]]);const Tv=a=>(wa("data-v-44323aeb"),a=a(),ha(),a),of={class:"leftNav"},uf={class:"leftNavContainer"},mf={class:"leftNavLayout"},wf=U('<div class="Main" data-v-44323aeb><div class="mainContainer" data-v-44323aeb><div class="mainLayout" data-v-44323aeb><br data-v-44323aeb><br data-v-44323aeb><p class="fz28" data-v-44323aeb>總分總</p><p class="fz28" data-v-44323aeb>1.要講哪個知識點</p><p class="fz28" data-v-44323aeb>2.細講</p><p class="fz28" data-v-44323aeb>3.總結</p><br data-v-44323aeb><br data-v-44323aeb><div id="threeda001" class="articleCardTitle cor36 fz34" data-v-44323aeb> 3.1 數組解構 </div><p class="fz28" data-v-44323aeb>解構賦值允許從物件或陣列中提取值並將其賦給變數</p><br data-v-44323aeb><p class="fz28" data-v-44323aeb> 數組解構是將數組的單元值快速批量賦值給一系列變量的簡潔語法 </p><br data-v-44323aeb><p class="fz28" data-v-44323aeb>1. 是什麼? _ 語法</p><p class="fz28" data-v-44323aeb>2. 做什麼? _ 批量賦值給變量</p><p class="fz28" data-v-44323aeb>3. 誰賦值給變量? _ 單元值</p><p class="fz28" data-v-44323aeb>4. 單元值? _ 數組原素</p><div class="dis" data-v-44323aeb><div class="bgcVS w100" data-v-44323aeb><div data-v-44323aeb><span class="function" data-v-44323aeb>const </span><span class="word" data-v-44323aeb>arr</span> <span class="then" data-v-44323aeb>=</span><span class="brackets" data-v-44323aeb>[</span><span class="number" data-v-44323aeb>100,60,80</span><span class="brackets" data-v-44323aeb>]</span></div><div data-v-44323aeb><span class="function" data-v-44323aeb>const </span><span class="word" data-v-44323aeb>max</span> <span class="then" data-v-44323aeb>=</span><span class="word" data-v-44323aeb>arr</span> <span class="brackets" data-v-44323aeb>[</span><span class="number" data-v-44323aeb>0</span> <span class="brackets" data-v-44323aeb>]</span></div><div data-v-44323aeb><span class="function" data-v-44323aeb>const </span><span class="word" data-v-44323aeb>min</span> <span class="then" data-v-44323aeb>=</span><span class="word" data-v-44323aeb>arr</span> <span class="brackets" data-v-44323aeb>[</span><span class="number" data-v-44323aeb>1</span> <span class="brackets" data-v-44323aeb>]</span></div><div data-v-44323aeb><span class="function" data-v-44323aeb>const </span><span class="word" data-v-44323aeb>avg</span> <span class="then" data-v-44323aeb>=</span><span class="word" data-v-44323aeb>arr</span> <span class="brackets" data-v-44323aeb>[</span><span class="number" data-v-44323aeb>3</span> <span class="brackets" data-v-44323aeb>]</span></div><div data-v-44323aeb><span class="word" data-v-44323aeb>console.</span><span class="variable" data-v-44323aeb>log</span><span class="brackets" data-v-44323aeb>(</span> <span class="word" data-v-44323aeb>max</span><span class="brackets" data-v-44323aeb>)</span></div><div data-v-44323aeb><span class="word" data-v-44323aeb>console.</span><span class="variable" data-v-44323aeb>log</span><span class="brackets" data-v-44323aeb>(</span> <span class="word" data-v-44323aeb>min</span><span class="brackets" data-v-44323aeb>)</span></div><div data-v-44323aeb><span class="word" data-v-44323aeb>console.</span><span class="variable" data-v-44323aeb>log</span><span class="brackets" data-v-44323aeb>(</span> <span class="word" data-v-44323aeb>avg</span><span class="brackets" data-v-44323aeb>)</span></div></div><div class="bgcVSMid" data-v-44323aeb>&gt;</div><div class="bgcVS w100" data-v-44323aeb><div data-v-44323aeb><span class="function" data-v-44323aeb>const </span><span class="brackets" data-v-44323aeb>[</span><span class="word" data-v-44323aeb>max,min,avg</span><span class="brackets" data-v-44323aeb>]</span> <span class="then" data-v-44323aeb>=</span><span class="brackets" data-v-44323aeb>[</span><span class="number" data-v-44323aeb>100,60,80</span><span class="brackets" data-v-44323aeb>]</span></div><div data-v-44323aeb><span class="word" data-v-44323aeb>console.</span><span class="variable" data-v-44323aeb>log</span><span class="brackets" data-v-44323aeb>(</span> <span class="word" data-v-44323aeb>max</span><span class="brackets" data-v-44323aeb>)</span></div><div data-v-44323aeb><span class="word" data-v-44323aeb>console.</span><span class="variable" data-v-44323aeb>log</span><span class="brackets" data-v-44323aeb>(</span> <span class="word" data-v-44323aeb>min</span><span class="brackets" data-v-44323aeb>)</span></div><div data-v-44323aeb><span class="word" data-v-44323aeb>console.</span><span class="variable" data-v-44323aeb>log</span><span class="brackets" data-v-44323aeb>(</span> <span class="word" data-v-44323aeb>avg</span><span class="brackets" data-v-44323aeb>)</span></div></div></div><div class="bgcVS" data-v-44323aeb><div data-v-44323aeb><span class="function" data-v-44323aeb>const </span><span class="word" data-v-44323aeb>arr</span> <span class="then" data-v-44323aeb>=</span><span class="brackets" data-v-44323aeb>[</span><span class="number" data-v-44323aeb>100,60,80</span><span class="brackets" data-v-44323aeb>]</span></div><div data-v-44323aeb><span class="function" data-v-44323aeb>const </span><span class="brackets" data-v-44323aeb>[</span><span class="word" data-v-44323aeb>max,min,avg</span><span class="brackets" data-v-44323aeb>]</span> <span class="then" data-v-44323aeb>=</span><span class="word" data-v-44323aeb>arr</span></div><span class="comment" data-v-44323aeb>相當於 </span><div data-v-44323aeb><span class="function" data-v-44323aeb>const </span><span class="word" data-v-44323aeb>max</span> <span class="then" data-v-44323aeb>=</span><span class="word" data-v-44323aeb>arr</span> <span class="brackets" data-v-44323aeb>[</span><span class="number" data-v-44323aeb>0</span> <span class="brackets" data-v-44323aeb>]</span></div><div data-v-44323aeb><span class="function" data-v-44323aeb>const </span><span class="word" data-v-44323aeb>min</span> <span class="then" data-v-44323aeb>=</span><span class="word" data-v-44323aeb>arr</span> <span class="brackets" data-v-44323aeb>[</span><span class="number" data-v-44323aeb>1</span> <span class="brackets" data-v-44323aeb>]</span></div><div data-v-44323aeb><span class="function" data-v-44323aeb>const </span><span class="word" data-v-44323aeb>avg</span> <span class="then" data-v-44323aeb>=</span><span class="word" data-v-44323aeb>arr</span> <span class="brackets" data-v-44323aeb>[</span><span class="number" data-v-44323aeb>3</span> <span class="brackets" data-v-44323aeb>]</span></div><br data-v-44323aeb><br data-v-44323aeb><div class="comment" data-v-44323aeb>//交換2變量</div><div data-v-44323aeb><span class="function" data-v-44323aeb>const </span> <span class="word" data-v-44323aeb>a</span><span class="then" data-v-44323aeb>=</span> <span class="number" data-v-44323aeb>1</span></div><div data-v-44323aeb><span class="function" data-v-44323aeb>const </span> <span class="word" data-v-44323aeb>b</span><span class="then" data-v-44323aeb>=</span> <span class="number" data-v-44323aeb>2</span></div><div data-v-44323aeb><span class="brackets" data-v-44323aeb>[</span> <span class="word" data-v-44323aeb>b,a</span><span class="brackets" data-v-44323aeb>]</span> <span class="then" data-v-44323aeb>=</span><span class="brackets" data-v-44323aeb>[</span> <span class="word" data-v-44323aeb>a,b</span><span class="brackets" data-v-44323aeb>] </span><span class="number" data-v-44323aeb>// !!!報錯了!!!</span></div><div data-v-44323aeb><span class="word" data-v-44323aeb>console.log</span><span class="brackets" data-v-44323aeb>(</span> <span class="word" data-v-44323aeb>a,b</span><span class="brackets" data-v-44323aeb>)</span></div><br data-v-44323aeb><div data-v-44323aeb><span class="function" data-v-44323aeb>const </span> <span class="word" data-v-44323aeb>a</span><span class="then" data-v-44323aeb>=</span> <span class="number" data-v-44323aeb>1</span></div><div data-v-44323aeb><span class="function" data-v-44323aeb>const </span> <span class="word" data-v-44323aeb>b</span><span class="then" data-v-44323aeb>=</span> <span class="number" data-v-44323aeb>2</span><span class="number" data-v-44323aeb>; . . . // 一定要加分號</span></div><div data-v-44323aeb><span class="brackets" data-v-44323aeb>[</span> <span class="word" data-v-44323aeb>b,a</span><span class="brackets" data-v-44323aeb>]</span> <span class="then" data-v-44323aeb>=</span><span class="brackets" data-v-44323aeb>[</span> <span class="word" data-v-44323aeb>a,b</span><span class="brackets" data-v-44323aeb>] </span></div><div data-v-44323aeb><span class="word" data-v-44323aeb>console.log</span><span class="brackets" data-v-44323aeb>(</span> <span class="word" data-v-44323aeb>a,b</span><span class="brackets" data-v-44323aeb>)</span></div><br data-v-44323aeb><br data-v-44323aeb><p data-v-44323aeb>當變量多 單元值少的情況</p><div data-v-44323aeb><span class="function" data-v-44323aeb>const </span><span class="brackets" data-v-44323aeb>[</span> <span class="word" data-v-44323aeb>a,b,c,d</span><span class="brackets" data-v-44323aeb>]</span> <span class="then" data-v-44323aeb>=</span><span class="brackets" data-v-44323aeb>[</span> <span class="number" data-v-44323aeb>1,2,3</span><span class="brackets" data-v-44323aeb>]</span></div><div data-v-44323aeb><span class="word" data-v-44323aeb>console.</span><span class="variable" data-v-44323aeb>log</span> <span class="brackets" data-v-44323aeb>(</span><span class="word" data-v-44323aeb>a</span> <span class="brackets" data-v-44323aeb>)</span><span class="comment" data-v-44323aeb>// 1</span></div><div data-v-44323aeb><span class="word" data-v-44323aeb>console.</span><span class="variable" data-v-44323aeb>log</span> <span class="brackets" data-v-44323aeb>(</span><span class="word" data-v-44323aeb>b</span> <span class="brackets" data-v-44323aeb>)</span><span class="comment" data-v-44323aeb>// 2</span></div><div data-v-44323aeb><span class="word" data-v-44323aeb>console.</span><span class="variable" data-v-44323aeb>log</span> <span class="brackets" data-v-44323aeb>(</span><span class="word" data-v-44323aeb>c</span> <span class="brackets" data-v-44323aeb>)</span><span class="comment" data-v-44323aeb>// 3</span></div><div data-v-44323aeb><span class="word" data-v-44323aeb>console.</span><span class="variable" data-v-44323aeb>log</span> <span class="brackets" data-v-44323aeb>(</span><span class="word" data-v-44323aeb>d</span> <span class="brackets" data-v-44323aeb>)</span><span class="comment" data-v-44323aeb>// undefined</span></div><br data-v-44323aeb><br data-v-44323aeb><p data-v-44323aeb>當變量多 單元值少的情況</p><div data-v-44323aeb><span class="function" data-v-44323aeb>const </span><span class="brackets" data-v-44323aeb>[</span> <span class="word" data-v-44323aeb>a,b</span><span class="brackets" data-v-44323aeb>]</span> <span class="then" data-v-44323aeb>=</span><span class="brackets" data-v-44323aeb>[</span> <span class="number" data-v-44323aeb>1,2,3</span><span class="brackets" data-v-44323aeb>]</span></div><div data-v-44323aeb><span class="word" data-v-44323aeb>console.</span><span class="variable" data-v-44323aeb>log</span> <span class="brackets" data-v-44323aeb>(</span><span class="word" data-v-44323aeb>a</span> <span class="brackets" data-v-44323aeb>)</span><span class="comment" data-v-44323aeb>// 1</span></div><div data-v-44323aeb><span class="word" data-v-44323aeb>console.</span><span class="variable" data-v-44323aeb>log</span> <span class="brackets" data-v-44323aeb>(</span><span class="word" data-v-44323aeb>b</span> <span class="brackets" data-v-44323aeb>)</span><span class="comment" data-v-44323aeb>// 2</span></div><br data-v-44323aeb><br data-v-44323aeb><p data-v-44323aeb>用剩餘參數解決 變量少 單元值多的情況</p><div data-v-44323aeb><span class="function" data-v-44323aeb>const </span><span class="brackets" data-v-44323aeb>[</span><span class="word" data-v-44323aeb>a,b,...c</span><span class="brackets" data-v-44323aeb>]</span> <span class="then" data-v-44323aeb>=</span><span class="brackets" data-v-44323aeb>[</span><span class="number" data-v-44323aeb>1,2,3,4</span><span class="brackets" data-v-44323aeb>]</span></div><div data-v-44323aeb><span class="word" data-v-44323aeb>console.</span><span class="variable" data-v-44323aeb>log</span> <span class="brackets" data-v-44323aeb>(</span><span class="word" data-v-44323aeb>a</span> <span class="brackets" data-v-44323aeb>)</span><span class="comment" data-v-44323aeb>// 1</span></div><div data-v-44323aeb><span class="word" data-v-44323aeb>console.</span><span class="variable" data-v-44323aeb>log</span> <span class="brackets" data-v-44323aeb>(</span><span class="word" data-v-44323aeb>b</span> <span class="brackets" data-v-44323aeb>)</span><span class="comment" data-v-44323aeb>// 2</span></div><div data-v-44323aeb><span class="word" data-v-44323aeb>console.</span><span class="variable" data-v-44323aeb>log</span> <span class="brackets" data-v-44323aeb>(</span><span class="word" data-v-44323aeb>c</span> <span class="brackets" data-v-44323aeb>)</span><span class="comment" data-v-44323aeb>// [3,4] //真陣列</span></div><br data-v-44323aeb><br data-v-44323aeb><p data-v-44323aeb>防止有undefined 傳遞單元值的情況, 可以設默認值:</p><div data-v-44323aeb><span class="function" data-v-44323aeb>const </span><span class="brackets" data-v-44323aeb>[</span><span class="word" data-v-44323aeb>a</span> <span class="then" data-v-44323aeb>=</span><span class="number" data-v-44323aeb>0,</span> <span class="word" data-v-44323aeb>b</span><span class="then" data-v-44323aeb>=</span> <span class="number" data-v-44323aeb>0</span><span class="brackets" data-v-44323aeb>]</span> <span class="then" data-v-44323aeb>=</span><span class="brackets" data-v-44323aeb>[</span><span class="number" data-v-44323aeb>1,2</span><span class="brackets" data-v-44323aeb>]</span></div><div data-v-44323aeb><span class="word" data-v-44323aeb>console.</span><span class="variable" data-v-44323aeb>log</span> <span class="brackets" data-v-44323aeb>(</span><span class="word" data-v-44323aeb>a</span> <span class="brackets" data-v-44323aeb>)</span><span class="comment" data-v-44323aeb>// 1</span></div><div data-v-44323aeb><span class="word" data-v-44323aeb>console.</span><span class="variable" data-v-44323aeb>log</span> <span class="brackets" data-v-44323aeb>(</span><span class="word" data-v-44323aeb>b</span> <span class="brackets" data-v-44323aeb>)</span><span class="comment" data-v-44323aeb>// 2</span></div><br data-v-44323aeb><br data-v-44323aeb><p data-v-44323aeb>按需導入賦值</p><div data-v-44323aeb><span class="function" data-v-44323aeb>const </span><span class="brackets" data-v-44323aeb>[</span> <span class="word" data-v-44323aeb>a,b, ,d</span><span class="brackets" data-v-44323aeb>]</span> <span class="then" data-v-44323aeb>=</span><span class="brackets" data-v-44323aeb>[</span><span class="number" data-v-44323aeb>1,2,3,4</span><span class="brackets" data-v-44323aeb>]</span></div><div data-v-44323aeb><span class="word" data-v-44323aeb>console.</span><span class="variable" data-v-44323aeb>log</span> <span class="brackets" data-v-44323aeb>(</span><span class="word" data-v-44323aeb>a</span> <span class="brackets" data-v-44323aeb>)</span><span class="comment" data-v-44323aeb>// 1</span></div><div data-v-44323aeb><span class="word" data-v-44323aeb>console.</span><span class="variable" data-v-44323aeb>log</span> <span class="brackets" data-v-44323aeb>(</span><span class="word" data-v-44323aeb>b</span> <span class="brackets" data-v-44323aeb>)</span><span class="comment" data-v-44323aeb>// 2</span></div><div data-v-44323aeb><span class="word" data-v-44323aeb>console.</span><span class="variable" data-v-44323aeb>log</span> <span class="brackets" data-v-44323aeb>(</span><span class="word" data-v-44323aeb>d</span> <span class="brackets" data-v-44323aeb>)</span><span class="comment" data-v-44323aeb>// 4</span></div><br data-v-44323aeb><br data-v-44323aeb><p data-v-44323aeb>多維數組</p><div data-v-44323aeb><span class="word" data-v-44323aeb>const</span> <span class="word" data-v-44323aeb>arr</span><span class="then" data-v-44323aeb>=</span> <span class="brackets" data-v-44323aeb>[</span><span class="number" data-v-44323aeb>1,2,</span> <span class="brackets" data-v-44323aeb>[</span><span class="number" data-v-44323aeb>3,4</span> <span class="brackets" data-v-44323aeb>] ]</span></div><br data-v-44323aeb><br data-v-44323aeb><p data-v-44323aeb>支持多維數組解構</p><div data-v-44323aeb><div data-v-44323aeb><span class="function" data-v-44323aeb>const </span><span class="brackets" data-v-44323aeb>[</span> <span class="word" data-v-44323aeb>a,b,c</span><span class="brackets" data-v-44323aeb>]</span><span class="then" data-v-44323aeb>=</span> <span class="brackets" data-v-44323aeb>[</span><span class="number" data-v-44323aeb>1,2,</span><span class="brackets" data-v-44323aeb>[</span> <span class="number" data-v-44323aeb>3,4</span><span class="brackets" data-v-44323aeb>] ]</span></div><div data-v-44323aeb><span class="word" data-v-44323aeb>console.</span><span class="variable" data-v-44323aeb>log</span><span class="brackets" data-v-44323aeb>(</span> <span class="word" data-v-44323aeb>c</span><span class="brackets" data-v-44323aeb>)</span><span class="comment" data-v-44323aeb>// [3,4] </span></div><br data-v-44323aeb><div data-v-44323aeb><span class="function" data-v-44323aeb>const </span><span class="brackets" data-v-44323aeb>[</span> <span class="word" data-v-44323aeb>a,b</span><span class="brackets" data-v-44323aeb>[</span> <span class="word" data-v-44323aeb>c,d</span><span class="brackets" data-v-44323aeb>] ]</span><span class="then" data-v-44323aeb>=</span> <span class="brackets" data-v-44323aeb>[</span><span class="number" data-v-44323aeb>1,2,</span><span class="brackets" data-v-44323aeb>[</span> <span class="number" data-v-44323aeb>3,4</span><span class="brackets" data-v-44323aeb>] ]</span></div><div data-v-44323aeb><span class="word" data-v-44323aeb>console.</span><span class="variable" data-v-44323aeb>log</span><span class="brackets" data-v-44323aeb>(</span> <span class="word" data-v-44323aeb>a</span><span class="brackets" data-v-44323aeb>)</span><span class="comment" data-v-44323aeb>// 1</span></div><div data-v-44323aeb><span class="word" data-v-44323aeb>console.</span><span class="variable" data-v-44323aeb>log</span><span class="brackets" data-v-44323aeb>(</span> <span class="word" data-v-44323aeb>b</span><span class="brackets" data-v-44323aeb>)</span><span class="comment" data-v-44323aeb>// 2</span></div><div data-v-44323aeb><span class="word" data-v-44323aeb>console.</span><span class="variable" data-v-44323aeb>log</span><span class="brackets" data-v-44323aeb>(</span> <span class="word" data-v-44323aeb>c</span><span class="brackets" data-v-44323aeb>)</span><span class="comment" data-v-44323aeb>// 3</span></div><div data-v-44323aeb><span class="word" data-v-44323aeb>console.</span><span class="variable" data-v-44323aeb>log</span><span class="brackets" data-v-44323aeb>(</span> <span class="word" data-v-44323aeb>d</span><span class="brackets" data-v-44323aeb>)</span><span class="comment" data-v-44323aeb>// 4</span></div></div></div><div id="threeda002" class="articleCardTitle cor36 fz34" data-v-44323aeb> 3.2 物件解構 </div><p class="fz28" data-v-44323aeb> 物件解構是將物件屬性和方法快速批量賦值給一系列變量的簡潔語法 </p><div class="bgcVS" data-v-44323aeb><div data-v-44323aeb><span class="comment" data-v-44323aeb>const name = &quot;不能變量名衝突&quot; // 報錯</span></div><br data-v-44323aeb><div data-v-44323aeb><span class="function" data-v-44323aeb>const </span><span class="brackets" data-v-44323aeb>{</span><span class="word" data-v-44323aeb>name,number</span><span class="brackets" data-v-44323aeb>}</span> <span class="then" data-v-44323aeb>=</span><span class="brackets" data-v-44323aeb>{</span> <span class="word" data-v-44323aeb>name:</span><span class="src" data-v-44323aeb>&quot;wayne&quot;,</span><span class="word" data-v-44323aeb>number:</span> <span class="number" data-v-44323aeb>123</span><span class="brackets" data-v-44323aeb>}</span></div><div class="comment" data-v-44323aeb>// 相當於 const name = obj.name</div><br data-v-44323aeb><p data-v-44323aeb>1. 變量名 (左) 和 屬姓名 (右) 要一樣</p><p data-v-44323aeb>2. 解構的變量名 不要和 外面的 變量名衝突</p><p data-v-44323aeb>3. 變量名 (左) 可以重新改名</p><br data-v-44323aeb><div data-v-44323aeb><span class="function" data-v-44323aeb>const </span><span class="brackets" data-v-44323aeb>{ </span><span class="word" data-v-44323aeb>name: username , number</span><span class="brackets" data-v-44323aeb>}</span> <span class="then" data-v-44323aeb>=</span><span class="brackets" data-v-44323aeb>{</span> <span class="word" data-v-44323aeb>name:</span><span class="src" data-v-44323aeb>&quot;wayne&quot;,</span><span class="word" data-v-44323aeb>number:</span> <span class="number" data-v-44323aeb>123</span><span class="brackets" data-v-44323aeb>}</span></div><div data-v-44323aeb><span class="word" data-v-44323aeb>console.</span><span class="variable" data-v-44323aeb>log</span> <span class="brackets" data-v-44323aeb>(</span><span class="word" data-v-44323aeb>username</span> <span class="brackets" data-v-44323aeb>)</span><span class="comment" data-v-44323aeb>// wayne</span></div></div><div class="articleCardTitle cor36 fz34" data-v-44323aeb>數組物件解構</div><div class="bgcVS" data-v-44323aeb><div data-v-44323aeb><span class="function" data-v-44323aeb>const </span><span class="word" data-v-44323aeb>arr</span> <span class="then" data-v-44323aeb>=</span><span class="brackets" data-v-44323aeb>[ </span></div><div class="brackets pTwo" data-v-44323aeb>{</div><div class="pFou" data-v-44323aeb><span class="word" data-v-44323aeb>uname:</span> <span class="src" data-v-44323aeb>&quot;wayne&quot;,</span></div><div class="pFou" data-v-44323aeb><span class="word" data-v-44323aeb>number:</span> <span class="number" data-v-44323aeb>123</span></div><div class="brackets pTwo" data-v-44323aeb>}</div><div class="brackets" data-v-44323aeb>]</div><br data-v-44323aeb><div data-v-44323aeb><span class="function" data-v-44323aeb>const </span><span class="brackets" data-v-44323aeb>[{</span><span class="word" data-v-44323aeb>uname,number</span><span class="brackets" data-v-44323aeb>}]</span> <span class="then" data-v-44323aeb>=</span><span class="word" data-v-44323aeb>arr</span></div><div data-v-44323aeb><span class="word" data-v-44323aeb>console.</span><span class="variable" data-v-44323aeb>log</span> <span class="brackets" data-v-44323aeb>(</span><span class="word" data-v-44323aeb>uname</span> <span class="brackets" data-v-44323aeb>)</span></div><div data-v-44323aeb><span class="word" data-v-44323aeb>console.</span><span class="variable" data-v-44323aeb>log</span> <span class="brackets" data-v-44323aeb>(</span><span class="word" data-v-44323aeb>number</span> <span class="brackets" data-v-44323aeb>)</span></div></div><div class="articleCardTitle cor36 fz34" data-v-44323aeb>多級物件解構</div><div class="bgcVS" data-v-44323aeb><div data-v-44323aeb><span class="function" data-v-44323aeb>const </span><span class="word" data-v-44323aeb>objOuter</span> <span class="then" data-v-44323aeb>=</span><span class="brackets" data-v-44323aeb>{ </span></div><div class="pTwo" data-v-44323aeb><span class="word" data-v-44323aeb>name:</span> <span class="src" data-v-44323aeb>&quot;wayne&quot;,</span></div><div class="pTwo" data-v-44323aeb><span class="word" data-v-44323aeb>number:</span> <span class="number" data-v-44323aeb>123</span></div><div class="pTwo" data-v-44323aeb><span class="word" data-v-44323aeb>objInner:</span><span class="brackets" data-v-44323aeb>{</span></div><div class="pFou" data-v-44323aeb><span class="word" data-v-44323aeb>iname:</span> <span class="src" data-v-44323aeb>&quot;inn&quot;,</span></div><div class="pFou" data-v-44323aeb><span class="word" data-v-44323aeb>inumber:</span> <span class="number" data-v-44323aeb>321</span></div><div class="brackets pTwo" data-v-44323aeb>}</div><div class="brackets" data-v-44323aeb>}</div><br data-v-44323aeb><div data-v-44323aeb><span class="function" data-v-44323aeb>const </span><span class="brackets" data-v-44323aeb>{ </span><span class="word" data-v-44323aeb>name, number, </span><span class="word" data-v-44323aeb>objInner: </span><span class="brackets" data-v-44323aeb>{ </span><span class="word" data-v-44323aeb>iname, inumber </span><span class="brackets" data-v-44323aeb>} } </span> <span class="then" data-v-44323aeb>=</span><span class="word" data-v-44323aeb>objOuter</span></div><div data-v-44323aeb><span class="word" data-v-44323aeb>console.</span><span class="variable" data-v-44323aeb>log</span> <span class="brackets" data-v-44323aeb>(</span><span class="word" data-v-44323aeb>name</span> <span class="brackets" data-v-44323aeb>)</span></div><div data-v-44323aeb><span class="word" data-v-44323aeb>console.</span><span class="variable" data-v-44323aeb>log</span> <span class="brackets" data-v-44323aeb>(</span><span class="word" data-v-44323aeb>number</span> <span class="brackets" data-v-44323aeb>)</span></div><div data-v-44323aeb><span class="word" data-v-44323aeb>console.</span><span class="variable" data-v-44323aeb>log</span> <span class="brackets" data-v-44323aeb>(</span><span class="word" data-v-44323aeb>iname</span> <span class="brackets" data-v-44323aeb>)</span></div><div data-v-44323aeb><span class="word" data-v-44323aeb>console.</span><span class="variable" data-v-44323aeb>log</span> <span class="brackets" data-v-44323aeb>(</span><span class="word" data-v-44323aeb>inumber</span> <span class="brackets" data-v-44323aeb>)</span></div></div><p class="fz28" data-v-44323aeb>陣列包起來時</p><div class="bgcVS" data-v-44323aeb><div data-v-44323aeb><span class="function" data-v-44323aeb>const </span><span class="word" data-v-44323aeb>porson </span> <span class="then" data-v-44323aeb>=</span><span class="brackets" data-v-44323aeb>[ </span></div><div class="brackets pTwo VSL" data-v-44323aeb>{</div><div class="pFou VSL" data-v-44323aeb><span class="word" data-v-44323aeb>123name:</span><span class="src" data-v-44323aeb>&quot;wayne&quot;,</span></div><div class="pFou VSL" data-v-44323aeb><span class="word" data-v-44323aeb>number:</span> <span class="number" data-v-44323aeb>123</span></div><div class="pFou VSL" data-v-44323aeb><span class="word" data-v-44323aeb>objInner:</span><span class="brackets" data-v-44323aeb>{</span></div><div class="pSix VSL" data-v-44323aeb><span class="word" data-v-44323aeb>iname:</span><span class="src" data-v-44323aeb>&quot;inn&quot;,</span></div><div class="pSix VSL" data-v-44323aeb><span class="word" data-v-44323aeb>inumber:</span><span class="number" data-v-44323aeb>321</span></div><div class="brackets pFou VSL" data-v-44323aeb>}</div><div class="brackets pTwo VSL" data-v-44323aeb>}</div><div class="brackets" data-v-44323aeb>]</div><br data-v-44323aeb><div data-v-44323aeb><span class="function" data-v-44323aeb>const </span><span class="brackets" data-v-44323aeb>[ { </span><span class="word" data-v-44323aeb>name, number, objInner: </span><span class="brackets" data-v-44323aeb>{ </span><span class="word" data-v-44323aeb>iname, inumber </span><span class="brackets" data-v-44323aeb>} } ]</span> <span class="then" data-v-44323aeb>=</span><span class="word" data-v-44323aeb>person</span></div></div><div class="dis" data-v-44323aeb><div class="bgcVS w100" data-v-44323aeb><p data-v-44323aeb>JSON格式msg={&quot;code&quot;:200,&quot;data&quot;:[{...}]}</p><br data-v-44323aeb><div data-v-44323aeb><span class="function" data-v-44323aeb>const </span><span class="brackets" data-v-44323aeb>{</span> <span class="word" data-v-44323aeb>data</span><span class="brackets" data-v-44323aeb>}</span> <span class="then" data-v-44323aeb>=</span><span class="word" data-v-44323aeb>msg</span></div><div data-v-44323aeb><span class="word" data-v-44323aeb>console.</span><span class="variable" data-v-44323aeb>log</span><span class="brackets" data-v-44323aeb>(</span> <span class="word" data-v-44323aeb>data</span><span class="brackets" data-v-44323aeb>)</span></div><br data-v-44323aeb><div data-v-44323aeb><span class="function" data-v-44323aeb>function </span><span class="word" data-v-44323aeb>render</span><span class="brackets" data-v-44323aeb>(</span> <span class="word" data-v-44323aeb>arr</span><span class="brackets" data-v-44323aeb>){</span></div><div class="pTwo VSL" data-v-44323aeb><span class="word" data-v-44323aeb>console.</span><span class="variable" data-v-44323aeb>log</span><span class="brackets" data-v-44323aeb>(</span> <span class="word" data-v-44323aeb>arr</span><span class="brackets" data-v-44323aeb>)</span></div><div class="brackets" data-v-44323aeb>}</div><div data-v-44323aeb><span class="word" data-v-44323aeb>render</span><span class="brackets" data-v-44323aeb>(</span> <span class="word" data-v-44323aeb>data</span><span class="brackets" data-v-44323aeb>)</span></div></div><div class="bgcVSMid" data-v-44323aeb>&gt;</div><div class="bgcVS w100" data-v-44323aeb><br data-v-44323aeb><br data-v-44323aeb><div data-v-44323aeb><span class="function" data-v-44323aeb>function </span><span class="word" data-v-44323aeb>render</span><span class="brackets" data-v-44323aeb>(</span> <span class="word" data-v-44323aeb>arr</span><span class="brackets" data-v-44323aeb>){</span></div><div class="pTwo VSL" data-v-44323aeb><span class="function" data-v-44323aeb>const </span><span class="brackets" data-v-44323aeb>{</span> <span class="word" data-v-44323aeb>data</span><span class="brackets" data-v-44323aeb>}</span> <span class="then" data-v-44323aeb>=</span><span class="word" data-v-44323aeb>arr</span></div><div class="pTwo VSL" data-v-44323aeb><span class="word" data-v-44323aeb>console.</span><span class="variable" data-v-44323aeb>log</span><span class="brackets" data-v-44323aeb>(</span> <span class="word" data-v-44323aeb>data</span><span class="brackets" data-v-44323aeb>)</span></div><div class="brackets" data-v-44323aeb>}</div><div data-v-44323aeb><span class="word" data-v-44323aeb>render</span><span class="brackets" data-v-44323aeb>(</span> <span class="word" data-v-44323aeb>msg</span><span class="brackets" data-v-44323aeb>)</span></div><br data-v-44323aeb><div class="disCen comment" data-v-44323aeb>更簡潔寫法 V</div><br data-v-44323aeb><div data-v-44323aeb><span class="function" data-v-44323aeb>function </span><span class="word" data-v-44323aeb>render</span><span class="brackets" data-v-44323aeb>( { </span><span class="word" data-v-44323aeb>data </span><span class="brackets" data-v-44323aeb>} ) {</span></div><div class="pTwo VSL" data-v-44323aeb><span class="word" data-v-44323aeb>console.</span><span class="variable" data-v-44323aeb>log</span><span class="brackets" data-v-44323aeb>(</span> <span class="word" data-v-44323aeb>data</span><span class="brackets" data-v-44323aeb>)</span></div><div class="brackets" data-v-44323aeb>}</div><div data-v-44323aeb><span class="word" data-v-44323aeb>render</span><span class="brackets" data-v-44323aeb>(</span> <span class="word" data-v-44323aeb>msg</span><span class="brackets" data-v-44323aeb>)</span></div><br data-v-44323aeb><div class="comment" data-v-44323aeb>data容易命名衝突, 接進來資料改名myData</div><br data-v-44323aeb><div data-v-44323aeb><span class="function" data-v-44323aeb>function </span><span class="word" data-v-44323aeb>render</span><span class="brackets" data-v-44323aeb>( { </span><span class="word" data-v-44323aeb>data: myData </span><span class="brackets" data-v-44323aeb>} ) {</span></div><div class="pTwo VSL" data-v-44323aeb><span class="word" data-v-44323aeb>console.</span><span class="variable" data-v-44323aeb>log</span><span class="brackets" data-v-44323aeb>(</span> <span class="word" data-v-44323aeb>myData</span><span class="brackets" data-v-44323aeb>)</span></div><div class="brackets" data-v-44323aeb>}</div><div data-v-44323aeb><span class="word" data-v-44323aeb>render</span><span class="brackets" data-v-44323aeb>(</span> <span class="word" data-v-44323aeb>msg</span><span class="brackets" data-v-44323aeb>)</span></div></div></div></div></div></div>',1),hf=Tv(()=>v("div",{class:"toTopButton"},[v("div",{class:"disCen"},"___"),v("div",{class:"disCen"},"▲")],-1)),kf=[hf],gf=Tv(()=>v("div",{class:"toBotButton"},[v("div",{class:"disCen"},"▼"),v("div",{class:"disCen"},"￣")],-1)),Tf=[gf],_f={__name:"JsPageThreeThree",setup(a){const s=ua(!1);window.addEventListener("scroll",function(){s.value=window.scrollY>0});function d(){window.scrollTo({top:0,left:0,behavior:"smooth"})}function t(){window.scrollTo({top:999999,left:0,behavior:"smooth"})}function c(e){window.scrollTo({top:document.getElementById(`${e}`).offsetTop,behavior:"smooth"})}return(e,n)=>(da(),ea(Q,null,[v("section",null,[v("div",of,[v("div",uf,[v("div",mf,[v("div",{onClick:n[0]||(n[0]=l=>c("threeda001")),class:"leftNavText"},"數組解構"),v("div",{onClick:n[1]||(n[1]=l=>c("threeda002")),class:"leftNavText"},"物件解構"),v("div",{onClick:n[2]||(n[2]=l=>c("")),class:"leftNavText"}),v("div",{onClick:n[3]||(n[3]=l=>c("")),class:"leftNavText"}),v("div",{onClick:n[4]||(n[4]=l=>c("")),class:"leftNavText"}),v("div",{onClick:n[5]||(n[5]=l=>c("")),class:"leftNavText"})])])]),wf]),v("div",null,[X(T(W,{name:"fade",tag:"div"},{default:C(()=>[v("div",{onClick:d,class:"toTop"},kf)]),_:1},512),[[Y,s.value]]),X(T(W,{name:"fade",tag:"div"},{default:C(()=>[v("div",{onClick:t,class:"toBot"},Tf)]),_:1},512),[[Y,s.value]])])],64))}},zf=ia(_f,[["__scopeId","data-v-44323aeb"]]);const Gd=a=>(wa("data-v-5d4b4faf"),a=a(),ha(),a),Sf={class:"leftNav"},qf={class:"leftNavContainer"},yf={class:"leftNavLayout"},Cf=Gd(()=>v("div",null,".every()",-1)),xf=Gd(()=>v("div",null,".some()",-1)),Lf=[Cf,xf],jf={class:"Main"},Pf={class:"mainContainer"},Nf={class:"mainLayout"},Vf=U('<br data-v-5d4b4faf><br data-v-5d4b4faf><p class="fz28" data-v-5d4b4faf>總分總</p><p class="fz28" data-v-5d4b4faf>1.要講哪個知識點</p><p class="fz28" data-v-5d4b4faf>2.細講</p><p class="fz28" data-v-5d4b4faf>3.總結</p><br data-v-5d4b4faf><br data-v-5d4b4faf><div class="fz28" data-v-5d4b4faf><span class="cor17" data-v-5d4b4faf> . . . . . </span> shift ↖ <span class="cor17" data-v-5d4b4faf> . . . </span> ↗ pop </div><div class="fz28" data-v-5d4b4faf>unshift → ▯▮▮▮▯ ← push</div><br data-v-5d4b4faf><table class="fz28" data-v-5d4b4faf><tr data-v-5d4b4faf><td data-v-5d4b4faf>🐕🐕🐕🐕.map(🐕=&gt;🐶)</td><td class="pad10" data-v-5d4b4faf>&gt;</td><td data-v-5d4b4faf>🐶🐶🐶🐶</td></tr><tr data-v-5d4b4faf><td data-v-5d4b4faf>🐕🐶🐕🐕.filter(🐶)</td><td class="pad10" data-v-5d4b4faf>&gt;</td><td data-v-5d4b4faf>🐶</td></tr><tr data-v-5d4b4faf><td data-v-5d4b4faf>🐕🐶🐕🐕.every(🐕)</td><td class="pad10" data-v-5d4b4faf>&gt;</td><td data-v-5d4b4faf>false</td></tr><tr data-v-5d4b4faf><td data-v-5d4b4faf>🐕🐶🐶🐕.some(🐶)</td><td class="pad10" data-v-5d4b4faf>&gt;</td><td data-v-5d4b4faf>true</td></tr><tr data-v-5d4b4faf><td data-v-5d4b4faf>🐕🐕🐕🐕.fill(🐶,1)</td><td class="pad10" data-v-5d4b4faf>&gt;</td><td data-v-5d4b4faf>🐕🐶🐶🐶</td></tr><tr data-v-5d4b4faf><td data-v-5d4b4faf>🐕🐕🐶🐕.findIndex.(el=&gt;el===🐶)</td><td class="pad10" data-v-5d4b4faf>&gt;</td><td data-v-5d4b4faf>2</td></tr><tr data-v-5d4b4faf><td data-v-5d4b4faf>🐕🐶🐕🐕.find(🐶)</td><td class="pad10" data-v-5d4b4faf>&gt;</td><td data-v-5d4b4faf>🐶</td></tr></table><br data-v-5d4b4faf><br data-v-5d4b4faf><br data-v-5d4b4faf><br data-v-5d4b4faf><table class="fz30 methodTable" data-v-5d4b4faf><tr class="cor36" data-v-5d4b4faf><th data-v-5d4b4faf>方法</th><th data-v-5d4b4faf>作用</th><th data-v-5d4b4faf>說明</th></tr><tr data-v-5d4b4faf><td data-v-5d4b4faf>map</td><td data-v-5d4b4faf>迭代數組</td><td data-v-5d4b4faf><span class="cor36" data-v-5d4b4faf>返回</span> 新數組, <span class="cor36" data-v-5d4b4faf>返回</span>的是處理之後的數組元素, 想要使用返回的新數組 </td></tr><tr data-v-5d4b4faf><td class="tdPad" data-v-5d4b4faf>forEach</td><td class="tdPad" data-v-5d4b4faf>遍歷數組</td><td class="tdPad" data-v-5d4b4faf>不返回數組, 常用於查找遍歷數組元素</td></tr><tr data-v-5d4b4faf><td class="tdPad" data-v-5d4b4faf>filter</td><td class="tdPad" data-v-5d4b4faf>過濾數組</td><td class="tdPad" data-v-5d4b4faf><span class="cor36" data-v-5d4b4faf>返回</span>新數組, <span class="cor36" data-v-5d4b4faf>返回</span>的是篩選滿足條件的數組元素 </td></tr><tr data-v-5d4b4faf><td class="tdPad" data-v-5d4b4faf>reduce</td><td class="tdPad" data-v-5d4b4faf>累計器</td><td class="tdPad" data-v-5d4b4faf><span class="cor36" data-v-5d4b4faf>返回</span>累計處理的結果, 常用於求和 </td></tr><tr data-v-5d4b4faf><td class="tdPad" data-v-5d4b4faf>join</td><td class="tdPad" data-v-5d4b4faf></td><td class="tdPad" data-v-5d4b4faf> 數組拼接成字串, <span class="cor36" data-v-5d4b4faf>返回</span> 字串 </td></tr><tr data-v-5d4b4faf><td class="tdPad" data-v-5d4b4faf>find</td><td class="tdPad" data-v-5d4b4faf>查找元素</td><td class="tdPad" data-v-5d4b4faf><span class="cor36" data-v-5d4b4faf>返回</span>符合條件的第一個數組元素值, 沒有則<span class="cor36" data-v-5d4b4faf>返回</span>undefined </td></tr><tr data-v-5d4b4faf><td class="tdPad" data-v-5d4b4faf>every</td><td class="tdPad" data-v-5d4b4faf></td><td class="tdPad" data-v-5d4b4faf> 數組所有元素是否都符合條件, 所有都符合<span class="cor36" data-v-5d4b4faf>返回</span>true, 否<span class="cor36" data-v-5d4b4faf>返回</span>false </td></tr><tr data-v-5d4b4faf><td class="tdPad" data-v-5d4b4faf>some</td><td class="tdPad" data-v-5d4b4faf></td><td class="tdPad" data-v-5d4b4faf> 數組中的元素是否有滿足條件的, 如果有<span class="cor36" data-v-5d4b4faf>返回</span>true, 沒有<span class="cor36" data-v-5d4b4faf>返回</span>false </td></tr><tr data-v-5d4b4faf><td class="tdPad" data-v-5d4b4faf>concat</td><td class="tdPad" data-v-5d4b4faf></td><td class="tdPad" data-v-5d4b4faf> 合併 2 個數組, <span class="cor36" data-v-5d4b4faf>返回</span>生成新數組 </td></tr><tr data-v-5d4b4faf><td class="tdPad" data-v-5d4b4faf>sort</td><td class="tdPad" data-v-5d4b4faf></td><td class="tdPad" data-v-5d4b4faf>對原數組單元值排序</td></tr><tr data-v-5d4b4faf><td class="tdPad" data-v-5d4b4faf>splice</td><td class="tdPad" data-v-5d4b4faf></td><td class="tdPad" data-v-5d4b4faf>刪除或替換原數組單元</td></tr><tr data-v-5d4b4faf><td class="tdPad" data-v-5d4b4faf>reverse</td><td class="tdPad" data-v-5d4b4faf></td><td class="tdPad" data-v-5d4b4faf>反轉數組</td></tr><tr data-v-5d4b4faf><td class="tdPad" data-v-5d4b4faf>findIndex</td><td class="tdPad" data-v-5d4b4faf></td><td class="tdPad" data-v-5d4b4faf>查找元素的索引值</td></tr></table><div id="threemethod001" class="articleCardTitle cor36 fz34" data-v-5d4b4faf> 4. push() . . . 會改變原數組 </div><p class="fz28" data-v-5d4b4faf> push 方法 在 數組末端 添加 一個or多個 元素 , 並返回添加新元素後的數組長度 </p><p class="fz28" data-v-5d4b4faf>注意 會改變原數組</p><br data-v-5d4b4faf><div class="fz28" data-v-5d4b4faf><span class="cor17" data-v-5d4b4faf> . . . . . </span> shift ↖ <span class="cor17" data-v-5d4b4faf> . . . </span> ↗ pop </div><div class="fz28" data-v-5d4b4faf>unshift → ▯▮▮▮▯ ← push</div><div class="bgcVS" data-v-5d4b4faf><div data-v-5d4b4faf><span class="function" data-v-5d4b4faf>let </span> <span class="word" data-v-5d4b4faf>arr</span><span class="then" data-v-5d4b4faf>=</span> <span class="brackets" data-v-5d4b4faf>[</span><span class="src" data-v-5d4b4faf>&quot;hi&quot;</span> <span class="brackets" data-v-5d4b4faf>]</span></div><div data-v-5d4b4faf><span class="comment" data-v-5d4b4faf>//arr[1]=&quot;添加方法1&quot;</span></div><div data-v-5d4b4faf><span class="word" data-v-5d4b4faf>arr</span> <span class="variable" data-v-5d4b4faf>.push</span><span class="brackets" data-v-5d4b4faf>(</span> <span class="src" data-v-5d4b4faf>&quot;大家好&quot;</span><span class="brackets" data-v-5d4b4faf>)</span></div><div data-v-5d4b4faf><span class="function" data-v-5d4b4faf>let </span><span class="word" data-v-5d4b4faf>arrLength</span> <span class="then" data-v-5d4b4faf>=</span><span class="word" data-v-5d4b4faf>arr</span> <span class="variable" data-v-5d4b4faf>.push</span><span class="brackets" data-v-5d4b4faf>(</span> <span class="src" data-v-5d4b4faf>&quot;大家好&quot;</span><span class="brackets" data-v-5d4b4faf>)</span><span class="comment" data-v-5d4b4faf>//打印添加這個東西,返回數組長度//2</span></div><div data-v-5d4b4faf><span class="word" data-v-5d4b4faf>console</span><span class="variable" data-v-5d4b4faf>.log</span><span class="brackets" data-v-5d4b4faf>(</span> <span class="word" data-v-5d4b4faf>arr</span><span class="brackets" data-v-5d4b4faf>)</span><span class="comment" data-v-5d4b4faf>//[&quot;hi&quot;,&quot;大家好&quot;]</span></div><div data-v-5d4b4faf><span class="word" data-v-5d4b4faf>console</span><span class="variable" data-v-5d4b4faf>.log</span><span class="brackets" data-v-5d4b4faf>(</span><span class="word" data-v-5d4b4faf>arrLength</span><span class="brackets" data-v-5d4b4faf>)</span><span class="comment" data-v-5d4b4faf>// 2</span></div><br data-v-5d4b4faf><p data-v-5d4b4faf>也可以同時添加多條</p><div data-v-5d4b4faf><span class="word" data-v-5d4b4faf>arr</span> <span class="variable" data-v-5d4b4faf>.push</span><span class="brackets" data-v-5d4b4faf>(</span><span class="src" data-v-5d4b4faf>&quot;大家好&quot;,123,&quot;hi&quot;</span><span class="brackets" data-v-5d4b4faf>)</span></div></div><div id="threemethod002" class="articleCardTitle cor36 fz34" data-v-5d4b4faf> 4. pop() . . . 會改變原數組 </div><p class="fz28" data-v-5d4b4faf>push 方法 刪除數組的最後一個元素 , 並返回該元素</p><p class="fz28" data-v-5d4b4faf>注意 會改變原數組</p><br data-v-5d4b4faf><div class="fz28" data-v-5d4b4faf><span class="cor17" data-v-5d4b4faf> . . . . . </span> shift ↖ <span class="cor17" data-v-5d4b4faf> . . . </span> ↗ pop </div><div class="fz28" data-v-5d4b4faf>unshift → ▯▮▮▮▯ ← push</div><div class="bgcVS" data-v-5d4b4faf><div data-v-5d4b4faf><span class="function" data-v-5d4b4faf>let </span> <span class="word" data-v-5d4b4faf>arr</span><span class="then" data-v-5d4b4faf>=</span> <span class="brackets" data-v-5d4b4faf>[</span><span class="number" data-v-5d4b4faf>100,200,300,400</span><span class="brackets" data-v-5d4b4faf>]</span></div><div data-v-5d4b4faf><span class="word" data-v-5d4b4faf>arr</span> <span class="variable" data-v-5d4b4faf>.pop</span><span class="brackets" data-v-5d4b4faf>()</span></div><div data-v-5d4b4faf><span class="word" data-v-5d4b4faf>console</span><span class="variable" data-v-5d4b4faf>.log</span><span class="brackets" data-v-5d4b4faf>(</span> <span class="word" data-v-5d4b4faf>arr</span><span class="brackets" data-v-5d4b4faf>)</span><span class="comment" data-v-5d4b4faf>//[100,200,300]</span></div></div><div id="threemethod003" class="articleCardTitle cor36 fz34" data-v-5d4b4faf> 4. shift() . . . 會改變原數組 </div><p class="fz28" data-v-5d4b4faf>shift 方法 刪除數組的第一個元素 , 並返回該元素</p><p class="fz28" data-v-5d4b4faf>注意 會改變原數組</p><br data-v-5d4b4faf><div class="fz28" data-v-5d4b4faf><span class="cor17" data-v-5d4b4faf> . . . . . </span> shift ↖ <span class="cor17" data-v-5d4b4faf> . . . </span> ↗ pop </div><div class="fz28" data-v-5d4b4faf>unshift → ▯▮▮▮▯ ← push</div><div class="bgcVS" data-v-5d4b4faf><div data-v-5d4b4faf><span class="function" data-v-5d4b4faf>let </span> <span class="word" data-v-5d4b4faf>name</span><span class="then" data-v-5d4b4faf>=</span> <span class="brackets" data-v-5d4b4faf>[</span><span class="src" data-v-5d4b4faf>&quot;wayne&quot;,&quot;neo&quot;,&quot;jack&quot;</span><span class="brackets" data-v-5d4b4faf>]</span></div><div data-v-5d4b4faf><span class="function" data-v-5d4b4faf>let </span><span class="word" data-v-5d4b4faf>result</span> <span class="then" data-v-5d4b4faf>=</span><span class="word" data-v-5d4b4faf>name</span><span class="variable" data-v-5d4b4faf>.shift</span><span class="brackets" data-v-5d4b4faf>()</span></div><div data-v-5d4b4faf><span class="word" data-v-5d4b4faf>console</span><span class="variable" data-v-5d4b4faf>.log</span><span class="brackets" data-v-5d4b4faf>(</span> <span class="word" data-v-5d4b4faf>name</span><span class="brackets" data-v-5d4b4faf>)</span><span class="comment" data-v-5d4b4faf>//[&quot;neo&quot;,&quot;jack&quot;]</span></div><div data-v-5d4b4faf><span class="word" data-v-5d4b4faf>console</span><span class="variable" data-v-5d4b4faf>.log</span><span class="brackets" data-v-5d4b4faf>(</span> <span class="word" data-v-5d4b4faf>result</span><span class="brackets" data-v-5d4b4faf>)</span><span class="comment" data-v-5d4b4faf>//wayne</span></div><br data-v-5d4b4faf><div data-v-5d4b4faf><span class="comment" data-v-5d4b4faf>//清空數組元素</span></div><div data-v-5d4b4faf><span class="function" data-v-5d4b4faf>let </span> <span class="word" data-v-5d4b4faf>arr</span><span class="then" data-v-5d4b4faf>=</span> <span class="brackets" data-v-5d4b4faf>[]</span></div><div data-v-5d4b4faf><span class="word" data-v-5d4b4faf>console</span><span class="variable" data-v-5d4b4faf>.log</span><span class="brackets" data-v-5d4b4faf>(</span> <span class="word" data-v-5d4b4faf>arr</span><span class="variable" data-v-5d4b4faf>.shift</span><span class="brackets" data-v-5d4b4faf>())</span><span class="comment" data-v-5d4b4faf>//undefined</span></div><br data-v-5d4b4faf><div data-v-5d4b4faf><span class="function" data-v-5d4b4faf>let </span> <span class="word" data-v-5d4b4faf>arr1</span><span class="then" data-v-5d4b4faf>=</span> <span class="brackets" data-v-5d4b4faf>[</span><span class="number" data-v-5d4b4faf>100,200,300</span><span class="brackets" data-v-5d4b4faf>]</span></div><div data-v-5d4b4faf><span class="function" data-v-5d4b4faf>let </span> <span class="word" data-v-5d4b4faf>item</span></div><div data-v-5d4b4faf><span class="comment" data-v-5d4b4faf>//()裡面取布林值,當0,undefined,Null,NaN,空數值,false為false</span></div><div data-v-5d4b4faf><span class="word" data-v-5d4b4faf>while</span> <span class="brackets" data-v-5d4b4faf>(</span><span class="word" data-v-5d4b4faf>item</span> <span class="then" data-v-5d4b4faf>=</span><span class="word" data-v-5d4b4faf>arr1</span><span class="variable" data-v-5d4b4faf>.shift</span><span class="brackets" data-v-5d4b4faf>()){</span><span class="comment" data-v-5d4b4faf>//我把arr1每次刪除的數據賦值給item</span></div><div class="padTwo VSL" data-v-5d4b4faf><span class="word" data-v-5d4b4faf>console</span><span class="variable" data-v-5d4b4faf>.log</span><span class="brackets" data-v-5d4b4faf>(</span> <span class="word" data-v-5d4b4faf>item</span><span class="brackets" data-v-5d4b4faf>)</span><span class="comment" data-v-5d4b4faf>//100//200//300//[]</span><div data-v-5d4b4faf></div></div><div data-v-5d4b4faf><span class="brackets" data-v-5d4b4faf>}</span></div></div><div id="threemethod004" class="articleCardTitle cor36 fz34" data-v-5d4b4faf> 4. unshift() . . . 會改變原數組 </div><p class="fz28" data-v-5d4b4faf> shift 方法 向 數組的第一個位置 添加元素 , 並返回添加元素後的 數組長度 </p><p class="fz28" data-v-5d4b4faf>注意 會改變原數組</p><br data-v-5d4b4faf><div class="fz28" data-v-5d4b4faf><span class="cor17" data-v-5d4b4faf> . . . . . </span> shift ↖ <span class="cor17" data-v-5d4b4faf> . . . </span> ↗ pop </div><div class="fz28" data-v-5d4b4faf>unshift → ▯▮▮▮▯ ← push</div><div class="bgcVS" data-v-5d4b4faf><div data-v-5d4b4faf><span class="function" data-v-5d4b4faf>let </span> <span class="word" data-v-5d4b4faf>arr</span><span class="then" data-v-5d4b4faf>=</span> <span class="brackets" data-v-5d4b4faf>[</span><span class="number" data-v-5d4b4faf>200</span> <span class="brackets" data-v-5d4b4faf>]</span></div><div data-v-5d4b4faf><span class="word" data-v-5d4b4faf>arr</span><span class="variable" data-v-5d4b4faf>.unshift</span><span class="brackets" data-v-5d4b4faf>(</span> <span class="number" data-v-5d4b4faf>100</span><span class="brackets" data-v-5d4b4faf>)</span></div><div data-v-5d4b4faf><span class="word" data-v-5d4b4faf>console</span><span class="variable" data-v-5d4b4faf>.log</span><span class="brackets" data-v-5d4b4faf>(</span> <span class="word" data-v-5d4b4faf>arr</span><span class="brackets" data-v-5d4b4faf>)</span><span class="comment" data-v-5d4b4faf>//[100,200]</span></div><br data-v-5d4b4faf><p data-v-5d4b4faf>也可以添加多個</p></div><div id="threemethod005" class="articleCardTitle cor36 fz34" data-v-5d4b4faf> 4. map() </div><p class="fz28" data-v-5d4b4faf> map 可以遍歷數組 處理數據 , 並 <span class="spo pad10 cor36" data-v-5d4b4faf> 返回 新數組</span></p><br data-v-5d4b4faf><p class="fz28" data-v-5d4b4faf>map([🐮,🥔,🐔,🌽] , cook) =&gt; [🍔,🍟,🍗,🍿]</p>',49),$f={class:"bgcVS"},Of=U('<div data-v-5d4b4faf><span class="word" data-v-5d4b4faf>被遍歷的數組</span><span class="variable" data-v-5d4b4faf>.map</span><span class="brackets" data-v-5d4b4faf>(</span><span class="function" data-v-5d4b4faf>function回調函數 </span><span class="brackets" data-v-5d4b4faf>(</span><span class="word" data-v-5d4b4faf>當前數組元素,當前元素索引號</span><span class="brackets" data-v-5d4b4faf>){</span></div><div class="comment pTwo" data-v-5d4b4faf>//函數體</div><div class="brackets" data-v-5d4b4faf>}</div><br data-v-5d4b4faf><div data-v-5d4b4faf><span class="function" data-v-5d4b4faf>const </span><span class="word" data-v-5d4b4faf>arr</span> <span class="then" data-v-5d4b4faf>=</span><span class="brackets" data-v-5d4b4faf>[</span> <span class="src" data-v-5d4b4faf>&quot;red&quot;</span><span class="then" data-v-5d4b4faf>,</span> <span class="src" data-v-5d4b4faf>&quot;blue&quot;</span><span class="then" data-v-5d4b4faf>,</span> <span class="src" data-v-5d4b4faf>&quot;pink&quot;</span><span class="brackets" data-v-5d4b4faf>]</span></div><div data-v-5d4b4faf><span class="word" data-v-5d4b4faf>arr</span> <span class="variable" data-v-5d4b4faf>.map</span><span class="brackets" data-v-5d4b4faf>(</span><span class="function" data-v-5d4b4faf>function </span><span class="brackets" data-v-5d4b4faf>(</span><span class="word" data-v-5d4b4faf>ele,index</span><span class="brackets" data-v-5d4b4faf>){</span></div><div class="padTwo VSL" data-v-5d4b4faf><span class="word" data-v-5d4b4faf>console</span> <span class="word" data-v-5d4b4faf>.log</span><span class="brackets" data-v-5d4b4faf>(</span> <span class="word" data-v-5d4b4faf>ele</span><span class="brackets" data-v-5d4b4faf>)</span><span class="comment" data-v-5d4b4faf>//red//blue//pink//數組元素</span><span class="word" data-v-5d4b4faf></span><div data-v-5d4b4faf><span class="word" data-v-5d4b4faf>console</span><span class="word" data-v-5d4b4faf>.log</span> <span class="brackets" data-v-5d4b4faf>(</span><span class="word" data-v-5d4b4faf>index</span> <span class="brackets" data-v-5d4b4faf>)</span><span class="comment" data-v-5d4b4faf>//0//1//2//索引號</span></div><div data-v-5d4b4faf><span class="then" data-v-5d4b4faf>return </span> <span class="word" data-v-5d4b4faf>el</span><span class="then" data-v-5d4b4faf>+</span> <span class="src" data-v-5d4b4faf>&quot;顏色&quot;</span></div><div data-v-5d4b4faf></div></div><div data-v-5d4b4faf><span class="brackets" data-v-5d4b4faf>})</span></div><br data-v-5d4b4faf>',9),Ef=U('<br data-v-5d4b4faf><div data-v-5d4b4faf><span class="function" data-v-5d4b4faf>const </span><span class="word" data-v-5d4b4faf>newArr</span> <span class="then" data-v-5d4b4faf>=</span><span class="word" data-v-5d4b4faf>arr</span> <span class="variable" data-v-5d4b4faf>.map</span><span class="brackets" data-v-5d4b4faf>(</span><span class="function" data-v-5d4b4faf>function </span><span class="brackets" data-v-5d4b4faf>(</span><span class="word" data-v-5d4b4faf>ele,index</span><span class="brackets" data-v-5d4b4faf>){</span></div><div class="padTwo VSL" data-v-5d4b4faf><span class="word" data-v-5d4b4faf>console</span> <span class="word" data-v-5d4b4faf>.log</span><span class="brackets" data-v-5d4b4faf>(</span> <span class="word" data-v-5d4b4faf>ele</span><span class="brackets" data-v-5d4b4faf>)</span><span class="comment" data-v-5d4b4faf>//red//blue//pink//數組元素</span><span class="word" data-v-5d4b4faf></span><div data-v-5d4b4faf><span class="word" data-v-5d4b4faf>console</span><span class="word" data-v-5d4b4faf>.log</span> <span class="brackets" data-v-5d4b4faf>(</span><span class="word" data-v-5d4b4faf>index</span> <span class="brackets" data-v-5d4b4faf>)</span><span class="comment" data-v-5d4b4faf>//0//1//2//索引號</span></div><div data-v-5d4b4faf><span class="then" data-v-5d4b4faf>return </span> <span class="word" data-v-5d4b4faf>el</span><span class="then" data-v-5d4b4faf>+</span> <span class="src" data-v-5d4b4faf>&quot;顏色&quot;</span></div><div data-v-5d4b4faf></div></div><div data-v-5d4b4faf><span class="brackets" data-v-5d4b4faf>})</span></div><div data-v-5d4b4faf><span class="word" data-v-5d4b4faf>console</span><span class="variable" data-v-5d4b4faf>.log</span><span class="brackets" data-v-5d4b4faf>(</span> <span class="word" data-v-5d4b4faf>newArr</span><span class="brackets" data-v-5d4b4faf>)</span></div>',5),Af=U('<p class="fz28" data-v-5d4b4faf></p><p class="fz28" data-v-5d4b4faf></p><p class="fz28" data-v-5d4b4faf></p><p class="fz28" data-v-5d4b4faf></p><p class="fz28" data-v-5d4b4faf></p><div id="threemethod006" class="articleCardTitle cor36 fz34" data-v-5d4b4faf> 4. forEach() </div><p class="fz28" data-v-5d4b4faf> forEach() 方法用於調用數組的每個元素, 並將元素傳遞給回調函數 </p><br data-v-5d4b4faf><p class="fz28" data-v-5d4b4faf>適合用來遍歷數組對象</p><div class="bgcVS" data-v-5d4b4faf><div data-v-5d4b4faf><span class="comment" data-v-5d4b4faf>1.裡面幾個參數 2. 返回值返回什麼 3. 使用方法</span></div><br data-v-5d4b4faf><div data-v-5d4b4faf><span class="word" data-v-5d4b4faf>被遍歷的數組</span><span class="variable" data-v-5d4b4faf>.forEach</span><span class="brackets" data-v-5d4b4faf>(</span><span class="function" data-v-5d4b4faf>function回調函數 </span><span class="brackets" data-v-5d4b4faf>(</span><span class="word" data-v-5d4b4faf>當前數組元素,當前元素索引號</span><span class="brackets" data-v-5d4b4faf>){</span></div><div class="comment pTwo" data-v-5d4b4faf>//函數體</div><div class="brackets" data-v-5d4b4faf>}</div><br data-v-5d4b4faf><div class="number" data-v-5d4b4faf>只遍歷 , 不返回值</div><br data-v-5d4b4faf><br data-v-5d4b4faf><div data-v-5d4b4faf><span class="function" data-v-5d4b4faf>const </span><span class="word" data-v-5d4b4faf>arr</span> <span class="then" data-v-5d4b4faf>=</span><span class="brackets" data-v-5d4b4faf>[</span><span class="src" data-v-5d4b4faf>&quot;wayne&quot;,&quot;neo&quot;,&quot;jack&quot;</span><span class="brackets" data-v-5d4b4faf>]</span></div><div data-v-5d4b4faf><span class="word" data-v-5d4b4faf>arr</span><span class="variable" data-v-5d4b4faf>.forEach</span><span class="brackets" data-v-5d4b4faf>(</span><span class="function" data-v-5d4b4faf>function </span><span class="brackets" data-v-5d4b4faf>(</span><span class="word" data-v-5d4b4faf>item,index</span><span class="brackets" data-v-5d4b4faf>){</span></div><div class="pTwo VSL" data-v-5d4b4faf><span class="word" data-v-5d4b4faf>console.</span><span class="variable" data-v-5d4b4faf>log</span> <span class="brackets" data-v-5d4b4faf>(</span><span class="word" data-v-5d4b4faf>item</span> <span class="brackets" data-v-5d4b4faf>) </span><span class="comment" data-v-5d4b4faf>// wayne neo jack</span></div><div class="pTwo VSL" data-v-5d4b4faf><span class="word" data-v-5d4b4faf>console.</span><span class="variable" data-v-5d4b4faf>log</span> <span class="brackets" data-v-5d4b4faf>(</span><span class="word" data-v-5d4b4faf>index</span> <span class="brackets" data-v-5d4b4faf>) </span><span class="comment" data-v-5d4b4faf>// 0 1 2</span></div><div class="brackets" data-v-5d4b4faf>})</div><br data-v-5d4b4faf><div class="number" data-v-5d4b4faf>和 map 差在 他不返回數組</div><br data-v-5d4b4faf><div data-v-5d4b4faf><span class="function" data-v-5d4b4faf>const </span><span class="word" data-v-5d4b4faf>result</span> <span class="then" data-v-5d4b4faf>=</span><span class="word" data-v-5d4b4faf>arr</span><span class="variable" data-v-5d4b4faf>.forEach</span><span class="brackets" data-v-5d4b4faf>(</span><span class="function" data-v-5d4b4faf>function </span><span class="brackets" data-v-5d4b4faf>(</span><span class="word" data-v-5d4b4faf>item,index</span><span class="brackets" data-v-5d4b4faf>){</span></div><div class="pTwo VSL" data-v-5d4b4faf><span class="word" data-v-5d4b4faf>console.</span><span class="variable" data-v-5d4b4faf>log</span> <span class="brackets" data-v-5d4b4faf>(</span><span class="word" data-v-5d4b4faf>item</span> <span class="brackets" data-v-5d4b4faf>) </span><span class="comment" data-v-5d4b4faf>// wayne neo jack</span></div><div class="pTwo VSL" data-v-5d4b4faf><span class="word" data-v-5d4b4faf>console.</span><span class="variable" data-v-5d4b4faf>log</span> <span class="brackets" data-v-5d4b4faf>(</span><span class="word" data-v-5d4b4faf>index</span> <span class="brackets" data-v-5d4b4faf>) </span><span class="comment" data-v-5d4b4faf>// 0 1 2</span></div><div class="brackets" data-v-5d4b4faf>})</div><div class="" data-v-5d4b4faf><span class="word" data-v-5d4b4faf>console.</span><span class="variable" data-v-5d4b4faf>log</span> <span class="brackets" data-v-5d4b4faf>(</span><span class="word" data-v-5d4b4faf>result</span> <span class="brackets" data-v-5d4b4faf>) </span><span class="comment" data-v-5d4b4faf>// undefined</span></div><br data-v-5d4b4faf><br data-v-5d4b4faf><p data-v-5d4b4faf>練習 渲染 ul 列表</p><br data-v-5d4b4faf><div data-v-5d4b4faf><span class="function" data-v-5d4b4faf>const </span><span class="word" data-v-5d4b4faf>list</span> <span class="then" data-v-5d4b4faf>=</span><span class="brackets" data-v-5d4b4faf>[{</span></div><div class="padTwo VSL" data-v-5d4b4faf><span class="word" data-v-5d4b4faf>id:</span> <span class="src" data-v-5d4b4faf>&quot;0001&quot;,</span><div data-v-5d4b4faf><span class="word" data-v-5d4b4faf>mame:</span> <span class="src" data-v-5d4b4faf>&quot;wayne&quot;</span></div><div data-v-5d4b4faf><span class="brackets" data-v-5d4b4faf>},{</span></div><span class="word" data-v-5d4b4faf>id:</span> <span class="src" data-v-5d4b4faf>&quot;0002&quot;,</span><div data-v-5d4b4faf><span class="word" data-v-5d4b4faf>mame:</span> <span class="src" data-v-5d4b4faf>&quot;jack&quot;</span></div><div data-v-5d4b4faf><span class="brackets" data-v-5d4b4faf>},{</span></div><span class="word" data-v-5d4b4faf>id:</span> <span class="src" data-v-5d4b4faf>&quot;0003&quot;,</span><div data-v-5d4b4faf><span class="word" data-v-5d4b4faf>mame:</span> <span class="src" data-v-5d4b4faf>&quot;neo&quot;</span></div><div data-v-5d4b4faf></div></div><div data-v-5d4b4faf><span class="brackets" data-v-5d4b4faf>}]</span></div><br data-v-5d4b4faf><div data-v-5d4b4faf><span class="then" data-v-5d4b4faf>＜</span> <span class="number" data-v-5d4b4faf>div </span><span class="function" data-v-5d4b4faf>class </span> <span class="then" data-v-5d4b4faf>=</span><span class="src" data-v-5d4b4faf>&quot;list&quot;</span> <span class="then" data-v-5d4b4faf>&gt;＜/ </span><span class="number" data-v-5d4b4faf>div </span> <span class="then" data-v-5d4b4faf>&gt;</span></div><div data-v-5d4b4faf><span class="function" data-v-5d4b4faf>let </span> <span class="word" data-v-5d4b4faf>str</span><span class="then" data-v-5d4b4faf>=</span> <span class="src" data-v-5d4b4faf>&quot;&quot;</span></div><div data-v-5d4b4faf><span class="word" data-v-5d4b4faf>list</span><span class="variable" data-v-5d4b4faf>.forEach</span><span class="brackets" data-v-5d4b4faf>(</span> <span class="word" data-v-5d4b4faf>item</span><span class="function" data-v-5d4b4faf>=&gt;</span> <span class="brackets" data-v-5d4b4faf>{</span></div><div class="padTwo VSL" data-v-5d4b4faf><span class="word" data-v-5d4b4faf>console</span> <span class="word" data-v-5d4b4faf>.log</span><span class="brackets" data-v-5d4b4faf>(</span> <span class="word" data-v-5d4b4faf>item</span><span class="brackets" data-v-5d4b4faf>)</span><span class="comment" data-v-5d4b4faf>//每一個數組元素-&gt;物件</span><div data-v-5d4b4faf><span class="word" data-v-5d4b4faf>str</span> <span class="then" data-v-5d4b4faf>+=</span><span class="src" data-v-5d4b4faf>` ＜p&gt;</span><span class="then" data-v-5d4b4faf>${</span><span class="word" data-v-5d4b4faf>item.name</span> <span class="then" data-v-5d4b4faf>}</span><span class="src" data-v-5d4b4faf>＜/p&gt;`</span></div><div data-v-5d4b4faf></div></div><div data-v-5d4b4faf><span class="brackets" data-v-5d4b4faf>})</span></div><div data-v-5d4b4faf><span class="word" data-v-5d4b4faf>document</span><span class="variable" data-v-5d4b4faf>.querySelector</span><span class="brackets" data-v-5d4b4faf>(</span> <span class="src" data-v-5d4b4faf>&quot;.list&quot;</span><span class="brackets" data-v-5d4b4faf>)</span><span class="variable" data-v-5d4b4faf>.innerHTML</span><span class="then" data-v-5d4b4faf>=</span> <span class="word" data-v-5d4b4faf>str</span></div><br data-v-5d4b4faf><p data-v-5d4b4faf>改成 解構賦值</p><br data-v-5d4b4faf><div data-v-5d4b4faf><span class="word" data-v-5d4b4faf>list</span><span class="variable" data-v-5d4b4faf>.forEach</span><span class="brackets" data-v-5d4b4faf>(</span> <span class="word" data-v-5d4b4faf>item</span><span class="function" data-v-5d4b4faf>=&gt;</span> <span class="brackets" data-v-5d4b4faf>{</span></div><div class="padTwo VSL" data-v-5d4b4faf><span class="function" data-v-5d4b4faf>const </span><span class="brackets" data-v-5d4b4faf>{</span> <span class="word" data-v-5d4b4faf>name</span><span class="brackets" data-v-5d4b4faf>}</span> <span class="then" data-v-5d4b4faf>=</span><span class="word" data-v-5d4b4faf>item</span><div data-v-5d4b4faf><span class="word" data-v-5d4b4faf>str</span> <span class="then" data-v-5d4b4faf>+=</span><span class="src" data-v-5d4b4faf>` ＜p&gt;</span><span class="then" data-v-5d4b4faf>${</span><span class="word" data-v-5d4b4faf>name</span> <span class="then" data-v-5d4b4faf>}</span><span class="src" data-v-5d4b4faf>＜/p&gt;`</span></div><div data-v-5d4b4faf></div></div><div data-v-5d4b4faf><span class="brackets" data-v-5d4b4faf>})</span></div></div><p class="fz28" data-v-5d4b4faf>1. forEach 主要是遍歷數組</p><p class="fz28" data-v-5d4b4faf>2. 索引號可以不寫</p><div id="threemethod007" class="articleCardTitle cor36 fz34" data-v-5d4b4faf> 4. join() </div><p class="fz28" data-v-5d4b4faf>用於把 數組中的 所有元素 轉換一個字串</p><div class="bgcVS" data-v-5d4b4faf><div data-v-5d4b4faf><span class="function" data-v-5d4b4faf>const </span><span class="word" data-v-5d4b4faf>arr</span> <span class="then" data-v-5d4b4faf>=</span><span class="brackets" data-v-5d4b4faf>[</span> <span class="src" data-v-5d4b4faf>&quot;red&quot;</span><span class="then" data-v-5d4b4faf>,</span> <span class="src" data-v-5d4b4faf>&quot;blue&quot;</span><span class="then" data-v-5d4b4faf>,</span> <span class="src" data-v-5d4b4faf>&quot;pink&quot;</span><span class="brackets" data-v-5d4b4faf>]</span></div><div data-v-5d4b4faf><span class="word" data-v-5d4b4faf>console.</span><span class="variable" data-v-5d4b4faf>log</span> <span class="brackets" data-v-5d4b4faf>(</span><span class="word" data-v-5d4b4faf>arr.join</span><span class="brackets" data-v-5d4b4faf>())</span><span class="comment" data-v-5d4b4faf>//小括號為空,則逗號分割</span></div><div data-v-5d4b4faf><span class="word" data-v-5d4b4faf>console.</span><span class="variable" data-v-5d4b4faf>log</span> <span class="brackets" data-v-5d4b4faf>(</span><span class="word" data-v-5d4b4faf>arr.join</span><span class="brackets" data-v-5d4b4faf>(</span> <span class="src" data-v-5d4b4faf>&quot;&quot;</span><span class="brackets" data-v-5d4b4faf>))</span><span class="comment" data-v-5d4b4faf>//redbluepink</span></div></div><div id="threemethod008" class="articleCardTitle cor36 fz34" data-v-5d4b4faf> 4. reduce </div><p class="fz28" data-v-5d4b4faf>reduce 返回累計處理的結果, 常用於求和</p><div class="bgcVS" data-v-5d4b4faf><div data-v-5d4b4faf><span class="commsnt" data-v-5d4b4faf>1.裡面幾個參數 2. 返回值返回什麼 3. 使用方法</span></div><br data-v-5d4b4faf><div data-v-5d4b4faf><span class="word" data-v-5d4b4faf>arr.reduce</span><span class="brackets" data-v-5d4b4faf>(</span><span class="function" data-v-5d4b4faf>function </span><span class="brackets" data-v-5d4b4faf>(){},</span><span class="word" data-v-5d4b4faf>起始值</span><span class="brackets" data-v-5d4b4faf>) </span><span class="comment" data-v-5d4b4faf>// 第 1 個參數回調函數</span></div><div class="comment" data-v-5d4b4faf>// 回調裡面有 2 個形參</div><div data-v-5d4b4faf><span class="word" data-v-5d4b4faf>arr.reduce</span><span class="brackets" data-v-5d4b4faf>(</span><span class="function" data-v-5d4b4faf>function </span><span class="brackets" data-v-5d4b4faf>(</span><span class="word" data-v-5d4b4faf>上一次值,當前值</span><span class="brackets" data-v-5d4b4faf>){},</span><span class="word" data-v-5d4b4faf>初始值</span><span class="brackets" data-v-5d4b4faf>)</span></div><br data-v-5d4b4faf><br data-v-5d4b4faf><div data-v-5d4b4faf><span class="function" data-v-5d4b4faf>const </span><span class="word" data-v-5d4b4faf>arr</span> <span class="then" data-v-5d4b4faf>=</span><span class="brackets" data-v-5d4b4faf>[</span> <span class="number" data-v-5d4b4faf>1,5,8</span><span class="brackets" data-v-5d4b4faf>]</span></div><br data-v-5d4b4faf><div class="comment" data-v-5d4b4faf>//1.沒初始值</div><div data-v-5d4b4faf><span class="word" data-v-5d4b4faf>arr.reduce</span><span class="brackets" data-v-5d4b4faf>(</span><span class="function" data-v-5d4b4faf>function </span><span class="brackets" data-v-5d4b4faf>(</span><span class="word" data-v-5d4b4faf>prev,current</span><span class="brackets" data-v-5d4b4faf>){</span></div><div class="pTwo" data-v-5d4b4faf><span class="then" data-v-5d4b4faf>return </span> <span class="word" data-v-5d4b4faf>prev</span><span class="then" data-v-5d4b4faf>+</span> <span class="word" data-v-5d4b4faf>current</span></div><div class="brackets" data-v-5d4b4faf>})</div><div data-v-5d4b4faf><span class="word" data-v-5d4b4faf>console.</span><span class="variable" data-v-5d4b4faf>log</span> <span class="brackets" data-v-5d4b4faf>(</span><span class="word" data-v-5d4b4faf>total</span> <span class="brackets" data-v-5d4b4faf>) </span><span class="comment" data-v-5d4b4faf>// 14</span></div><br data-v-5d4b4faf><div class="comment" data-v-5d4b4faf>//2.有初始值</div><div data-v-5d4b4faf><span class="word" data-v-5d4b4faf>arr.reduce</span><span class="brackets" data-v-5d4b4faf>(</span><span class="function" data-v-5d4b4faf>function </span><span class="brackets" data-v-5d4b4faf>(</span><span class="word" data-v-5d4b4faf>prev,current</span><span class="brackets" data-v-5d4b4faf>){</span></div><div class="pTwo" data-v-5d4b4faf><span class="then" data-v-5d4b4faf>return </span> <span class="word" data-v-5d4b4faf>prev</span><span class="then" data-v-5d4b4faf>+</span> <span class="word" data-v-5d4b4faf>current</span></div><div data-v-5d4b4faf><span class="brackets" data-v-5d4b4faf>},</span> <span class="number" data-v-5d4b4faf>10</span><span class="brackets" data-v-5d4b4faf>)</span></div><div data-v-5d4b4faf><span class="word" data-v-5d4b4faf>console.</span><span class="variable" data-v-5d4b4faf>log</span> <span class="brackets" data-v-5d4b4faf>(</span><span class="word" data-v-5d4b4faf>total</span> <span class="brackets" data-v-5d4b4faf>) </span><span class="comment" data-v-5d4b4faf>// 24</span></div><br data-v-5d4b4faf><div class="comment" data-v-5d4b4faf>//3.匿名函數</div><div data-v-5d4b4faf><span class="function" data-v-5d4b4faf>const </span><span class="word" data-v-5d4b4faf>total</span> <span class="then" data-v-5d4b4faf>=</span><span class="word" data-v-5d4b4faf>arr.reduce</span><span class="brackets" data-v-5d4b4faf>((</span><span class="word" data-v-5d4b4faf>prev,current</span><span class="brackets" data-v-5d4b4faf>)</span> <span class="function" data-v-5d4b4faf>=&gt;</span><span class="word" data-v-5d4b4faf>prev</span> <span class="then" data-v-5d4b4faf>+</span><span class="word" data-v-5d4b4faf>current,</span> <span class="number" data-v-5d4b4faf>10</span><span class="brackets" data-v-5d4b4faf>)</span></div><div data-v-5d4b4faf><span class="word" data-v-5d4b4faf>console.</span><span class="variable" data-v-5d4b4faf>log</span> <span class="brackets" data-v-5d4b4faf>(</span><span class="word" data-v-5d4b4faf>total</span> <span class="brackets" data-v-5d4b4faf>) </span><span class="comment" data-v-5d4b4faf>// 24</span></div></div><p class="fz28" data-v-5d4b4faf>reduce 執行過程</p><p class="fz28" data-v-5d4b4faf> 1. 如果 沒有 起始值 , 則 上一次值 以 數組的 第一個 數組元素 的值 </p><p class="fz28" data-v-5d4b4faf> 2. 每一次循環 , 把返回值 做為 下一次循環的 上一次值 </p><p class="fz28" data-v-5d4b4faf>3. 如果 有 起始值, 則 起始值 做為 上一次值</p><div class="bgcVS" data-v-5d4b4faf><div data-v-5d4b4faf><span class="function" data-v-5d4b4faf>const </span><span class="word" data-v-5d4b4faf>arr</span> <span class="then" data-v-5d4b4faf>=</span><span class="brackets" data-v-5d4b4faf>[{</span></div><div class="pTwo VSL" data-v-5d4b4faf><span class="word" data-v-5d4b4faf>name:</span> <span class="src" data-v-5d4b4faf>&quot;wayne&quot;</span></div><div class="pTwo VSL" data-v-5d4b4faf><span class="word" data-v-5d4b4faf>number:</span> <span class="number" data-v-5d4b4faf>1000</span></div><div class="brackets" data-v-5d4b4faf>}, {</div><div class="pTwo VSL" data-v-5d4b4faf><span class="word" data-v-5d4b4faf>name:</span> <span class="src" data-v-5d4b4faf>&quot;neo&quot;</span></div><div class="pTwo VSL" data-v-5d4b4faf><span class="word" data-v-5d4b4faf>number:</span> <span class="number" data-v-5d4b4faf>2000</span></div><div class="brackets" data-v-5d4b4faf>}, {</div><div class="pTwo VSL" data-v-5d4b4faf><span class="word" data-v-5d4b4faf>name:</span> <span class="src" data-v-5d4b4faf>&quot;jack&quot;</span></div><div class="pTwo VSL" data-v-5d4b4faf><span class="word" data-v-5d4b4faf>number:</span> <span class="number" data-v-5d4b4faf>3000</span></div><div class="brackets" data-v-5d4b4faf>} ]</div><br data-v-5d4b4faf><div data-v-5d4b4faf><span class="function" data-v-5d4b4faf>const </span><span class="word" data-v-5d4b4faf>total</span> <span class="then" data-v-5d4b4faf>=</span><span class="word" data-v-5d4b4faf>arr.reduce</span><span class="brackets" data-v-5d4b4faf>((</span><span class="word" data-v-5d4b4faf>prev,current</span><span class="brackets" data-v-5d4b4faf>)</span> <span class="function" data-v-5d4b4faf>=&gt;</span><span class="brackets" data-v-5d4b4faf>{</span></div><div class="pTwo" data-v-5d4b4faf><span class="then" data-v-5d4b4faf>return </span> <span class="word" data-v-5d4b4faf>prev</span><span class="then" data-v-5d4b4faf>+</span><span class="word" data-v-5d4b4faf>current.number</span></div><div data-v-5d4b4faf><span class="brackets" data-v-5d4b4faf>},</span> <span class="number" data-v-5d4b4faf>0</span><span class="brackets" data-v-5d4b4faf>) </span><span class="comment" data-v-5d4b4faf>// 不寫出使值則以數組第一個元素{}為初始值</span></div><div data-v-5d4b4faf><span class="word" data-v-5d4b4faf>console.</span><span class="variable" data-v-5d4b4faf>log</span> <span class="brackets" data-v-5d4b4faf>(</span><span class="word" data-v-5d4b4faf>total</span> <span class="brackets" data-v-5d4b4faf>) </span><span class="comment" data-v-5d4b4faf>// 6000</span></div><br data-v-5d4b4faf><p data-v-5d4b4faf>數字 + 30% 怎麼改?</p><br data-v-5d4b4faf><div data-v-5d4b4faf><span class="function" data-v-5d4b4faf>const </span><span class="word" data-v-5d4b4faf>total</span> <span class="then" data-v-5d4b4faf>=</span><span class="word" data-v-5d4b4faf>arr.reduce</span><span class="brackets" data-v-5d4b4faf>((</span><span class="word" data-v-5d4b4faf>prev,current</span><span class="brackets" data-v-5d4b4faf>)</span> <span class="function" data-v-5d4b4faf>=&gt;</span><span class="word" data-v-5d4b4faf>prev</span><span class="then" data-v-5d4b4faf>+</span><span class="word" data-v-5d4b4faf>current.number </span><span class="then" data-v-5d4b4faf>* </span><span class="number" data-v-5d4b4faf>1.3 , 0</span><span class="brackets" data-v-5d4b4faf>) </span></div></div><div id="threemethod009" class="articleCardTitle cor36 fz34" data-v-5d4b4faf> 4. find <span class="spo marL100" data-v-5d4b4faf>回調</span></div><div class="bgcVS" data-v-5d4b4faf><div data-v-5d4b4faf><span class="comment" data-v-5d4b4faf>1.裡面幾個參數 2. 返回值返回什麼 3. 使用方法</span></div><br data-v-5d4b4faf><div data-v-5d4b4faf><span class="word" data-v-5d4b4faf>arr.</span> <span class="variable" data-v-5d4b4faf>find</span><span class="brackets" data-v-5d4b4faf>(</span> <span class="cor36" data-v-5d4b4faf>回調</span><span class="word" data-v-5d4b4faf>返回數組第一個滿足條件的值</span><span class="brackets" data-v-5d4b4faf>)</span></div><br data-v-5d4b4faf> # <div data-v-5d4b4faf><span class="function" data-v-5d4b4faf>const </span><span class="word" data-v-5d4b4faf>arr</span> <span class="then" data-v-5d4b4faf>=</span><span class="brackets" data-v-5d4b4faf>[</span><span class="src" data-v-5d4b4faf>&quot;wayne&quot;,&quot;neo&quot;,&quot;jack&quot;</span><span class="brackets" data-v-5d4b4faf>]</span></div><div data-v-5d4b4faf><span class="function" data-v-5d4b4faf>const </span><span class="word" data-v-5d4b4faf>re </span> <span class="then" data-v-5d4b4faf>= </span><span class="word" data-v-5d4b4faf>arr</span><span class="variable" data-v-5d4b4faf>.find</span><span class="brackets" data-v-5d4b4faf>(</span><span class="function" data-v-5d4b4faf>function </span><span class="brackets" data-v-5d4b4faf>(</span><span class="word" data-v-5d4b4faf>item</span><span class="brackets" data-v-5d4b4faf>){</span></div><div class="pTwo" data-v-5d4b4faf><span class="then" data-v-5d4b4faf>return </span> <span class="word" data-v-5d4b4faf>item</span><span class="then" data-v-5d4b4faf>===</span> <span class="src" data-v-5d4b4faf>&quot;wayne&quot;</span></div><div class="brackets" data-v-5d4b4faf>})</div><div data-v-5d4b4faf><span class="word" data-v-5d4b4faf>console.</span><span class="variable" data-v-5d4b4faf>log</span> <span class="brackets" data-v-5d4b4faf>(</span><span class="word" data-v-5d4b4faf>re</span> <span class="brackets" data-v-5d4b4faf>); </span><span class="comment" data-v-5d4b4faf>// wayne</span></div><br data-v-5d4b4faf><br data-v-5d4b4faf><p data-v-5d4b4faf>我只想要 wayne 怎麼做?</p><br data-v-5d4b4faf><div data-v-5d4b4faf><span class="function" data-v-5d4b4faf>const </span><span class="word" data-v-5d4b4faf>arr</span> <span class="then" data-v-5d4b4faf>= </span><span class="brackets" data-v-5d4b4faf>[ {</span></div><div class="pTwo VSL" data-v-5d4b4faf><span class="word" data-v-5d4b4faf>name:</span> <span class="src" data-v-5d4b4faf>&quot;wayne&quot;</span></div><div class="pTwo VSL" data-v-5d4b4faf><span class="word" data-v-5d4b4faf>number:</span> <span class="number" data-v-5d4b4faf>1000</span></div><div class="brackets" data-v-5d4b4faf>}, {</div><div class="pTwo VSL" data-v-5d4b4faf><span class="word" data-v-5d4b4faf>name:</span> <span class="src" data-v-5d4b4faf>&quot;neo&quot;</span></div><div class="pTwo VSL" data-v-5d4b4faf><span class="word" data-v-5d4b4faf>number:</span> <span class="number" data-v-5d4b4faf>2000</span></div><div class="brackets" data-v-5d4b4faf>}, {</div><div class="pTwo VSL" data-v-5d4b4faf><span class="word" data-v-5d4b4faf>name:</span> <span class="src" data-v-5d4b4faf>&quot;jack&quot;</span></div><div class="pTwo VSL" data-v-5d4b4faf><span class="word" data-v-5d4b4faf>number:</span> <span class="number" data-v-5d4b4faf>3000</span></div><div class="brackets" data-v-5d4b4faf>} ]</div><br data-v-5d4b4faf><br data-v-5d4b4faf><div data-v-5d4b4faf><span class="word" data-v-5d4b4faf>arr.</span> <span class="variable" data-v-5d4b4faf>find</span><span class="brackets" data-v-5d4b4faf>(</span><span class="function" data-v-5d4b4faf>function </span><span class="brackets" data-v-5d4b4faf>(</span> <span class="word" data-v-5d4b4faf>item</span><span class="brackets" data-v-5d4b4faf>){</span></div><div class="pTwo VSL" data-v-5d4b4faf><span class="word" data-v-5d4b4faf>console.</span><span class="variable" data-v-5d4b4faf>log</span><span class="brackets" data-v-5d4b4faf>(</span> <span class="word" data-v-5d4b4faf>item</span><span class="brackets" data-v-5d4b4faf>)</span><span class="comment" data-v-5d4b4faf>//{name:&quot;wayne&quot;,number:1000},{...}</span></div><div class="pTwo VSL" data-v-5d4b4faf><span class="word" data-v-5d4b4faf>console.</span><span class="variable" data-v-5d4b4faf>log</span><span class="brackets" data-v-5d4b4faf>(</span><span class="word" data-v-5d4b4faf>item.name</span><span class="brackets" data-v-5d4b4faf>)</span><span class="comment" data-v-5d4b4faf>//wayne neo jack</span></div><div class="pTwo VSL" data-v-5d4b4faf><span class="word" data-v-5d4b4faf>console.</span><span class="variable" data-v-5d4b4faf>log</span> <span class="brackets" data-v-5d4b4faf>(</span><span class="number" data-v-5d4b4faf>1</span> <span class="brackets" data-v-5d4b4faf>)</span><span class="comment" data-v-5d4b4faf>//打印1次//找到數組中第一個滿足就不再找了</span></div><div class="pTwo VSL" data-v-5d4b4faf><span class="then" data-v-5d4b4faf>return </span><span class="word" data-v-5d4b4faf>item.name</span> <span class="then" data-v-5d4b4faf>===</span><span class="src" data-v-5d4b4faf>&quot;wayne&quot;</span><span class="comment" data-v-5d4b4faf>//返回這條物件 數組元素</span></div><div class="brackets" data-v-5d4b4faf>})</div><br data-v-5d4b4faf><br data-v-5d4b4faf><div data-v-5d4b4faf><span class="function" data-v-5d4b4faf>const </span> <span class="word" data-v-5d4b4faf>mi</span><span class="then" data-v-5d4b4faf>=</span><span class="word" data-v-5d4b4faf>arr.</span> <span class="variable" data-v-5d4b4faf>find</span><span class="brackets" data-v-5d4b4faf>(</span><span class="function" data-v-5d4b4faf>function </span><span class="brackets" data-v-5d4b4faf>(</span> <span class="word" data-v-5d4b4faf>item</span><span class="brackets" data-v-5d4b4faf>){</span></div><div class="pTwo VSL" data-v-5d4b4faf><span class="then" data-v-5d4b4faf>return </span><span class="word" data-v-5d4b4faf>item.name</span> <span class="then" data-v-5d4b4faf>===</span><span class="src" data-v-5d4b4faf>&quot;wayne&quot;</span><span class="comment" data-v-5d4b4faf>//返回這條物件 數組元素</span></div><div class="brackets" data-v-5d4b4faf>})</div><div data-v-5d4b4faf><span class="word" data-v-5d4b4faf>console.</span><span class="variable" data-v-5d4b4faf>log</span> <span class="brackets" data-v-5d4b4faf>(</span><span class="word" data-v-5d4b4faf>mi</span> <span class="brackets" data-v-5d4b4faf>)</span><span class="comment" data-v-5d4b4faf>//{name:&quot;wayne&quot;,number:1000}</span></div><br data-v-5d4b4faf><br data-v-5d4b4faf><div data-v-5d4b4faf><span class="function" data-v-5d4b4faf>const </span> <span class="word" data-v-5d4b4faf>mi</span><span class="then" data-v-5d4b4faf>=</span> <span class="word" data-v-5d4b4faf>arr.</span><span class="variable" data-v-5d4b4faf>find</span><span class="brackets" data-v-5d4b4faf>(</span> <span class="word" data-v-5d4b4faf>item</span><span class="function" data-v-5d4b4faf>=&gt;</span><span class="word" data-v-5d4b4faf>item.name</span> <span class="then" data-v-5d4b4faf>===</span><span class="src" data-v-5d4b4faf>&quot;wayne&quot;</span> <span class="brackets" data-v-5d4b4faf>)</span></div><div data-v-5d4b4faf><span class="word" data-v-5d4b4faf>console.</span><span class="variable" data-v-5d4b4faf>log</span> <span class="brackets" data-v-5d4b4faf>(</span><span class="word" data-v-5d4b4faf>mi</span> <span class="brackets" data-v-5d4b4faf>)</span><span class="comment" data-v-5d4b4faf>//{name:&quot;wayne&quot;,number:1000}</span></div></div><div id="threemethod010" class="articleCardTitle cor36 fz34" data-v-5d4b4faf> 4. slice </div><p class="fz28" data-v-5d4b4faf></p><p class="fz28" data-v-5d4b4faf>不會修改原數組</p><br data-v-5d4b4faf><div class="bgcVS" data-v-5d4b4faf><div data-v-5d4b4faf><span class="variable" data-v-5d4b4faf>.slice</span><span class="brackets" data-v-5d4b4faf>(</span><span class="number" data-v-5d4b4faf>2個參數可選</span><span class="brackets" data-v-5d4b4faf>)</span></div><div data-v-5d4b4faf><span class="variable" data-v-5d4b4faf>.slice</span><span class="brackets" data-v-5d4b4faf>(</span><span class="word" data-v-5d4b4faf>擷取時起始位置,終止位置</span><span class="brackets" data-v-5d4b4faf>)</span></div><br data-v-5d4b4faf><br data-v-5d4b4faf><div data-v-5d4b4faf><span class="function" data-v-5d4b4faf>let </span> <span class="word" data-v-5d4b4faf>arr</span><span class="then" data-v-5d4b4faf>=</span> <span class="brackets" data-v-5d4b4faf>[</span><span class="number" data-v-5d4b4faf>1,2,3,4,5</span><span class="brackets" data-v-5d4b4faf>]</span></div><div data-v-5d4b4faf><span class="function" data-v-5d4b4faf>let </span> <span class="word" data-v-5d4b4faf>str</span><span class="then" data-v-5d4b4faf>=</span> <span class="src" data-v-5d4b4faf>&quot;12345&quot;</span></div><br data-v-5d4b4faf><div data-v-5d4b4faf><span class="comment" data-v-5d4b4faf>//沒參數,直接把原數組or原字串整個拷貝成新數組並返回</span></div><div data-v-5d4b4faf><span class="word" data-v-5d4b4faf>console</span><span class="variable" data-v-5d4b4faf>.log</span><span class="brackets" data-v-5d4b4faf>(</span> <span class="word" data-v-5d4b4faf>arr</span><span class="variable" data-v-5d4b4faf>.slice</span><span class="brackets" data-v-5d4b4faf>()) </span><span class="comment" data-v-5d4b4faf>//[1,2,3,4,5]</span></div><br data-v-5d4b4faf><div data-v-5d4b4faf><span class="word" data-v-5d4b4faf>console</span><span class="variable" data-v-5d4b4faf>.log</span><span class="brackets" data-v-5d4b4faf>(</span> <span class="word" data-v-5d4b4faf>arr</span><span class="variable" data-v-5d4b4faf>.slice</span><span class="brackets" data-v-5d4b4faf>(</span> <span class="number" data-v-5d4b4faf>1</span><span class="brackets" data-v-5d4b4faf>))</span><span class="comment" data-v-5d4b4faf>//[2,3,4,5]//1當起始位置,數組末最終</span></div><br data-v-5d4b4faf><div data-v-5d4b4faf><span class="word" data-v-5d4b4faf>console</span><span class="variable" data-v-5d4b4faf>.log</span><span class="brackets" data-v-5d4b4faf>(</span> <span class="word" data-v-5d4b4faf>arr</span><span class="variable" data-v-5d4b4faf>.slice</span><span class="brackets" data-v-5d4b4faf>(</span> <span class="number" data-v-5d4b4faf>-1</span><span class="brackets" data-v-5d4b4faf>))</span><span class="comment" data-v-5d4b4faf>//[5]//從最後一項倒數,-1是5</span></div><br data-v-5d4b4faf><div data-v-5d4b4faf><span class="word" data-v-5d4b4faf>console</span><span class="variable" data-v-5d4b4faf>.log</span><span class="brackets" data-v-5d4b4faf>(</span> <span class="word" data-v-5d4b4faf>arr</span><span class="variable" data-v-5d4b4faf>.slice</span><span class="brackets" data-v-5d4b4faf>(</span> <span class="number" data-v-5d4b4faf>1,2</span><span class="brackets" data-v-5d4b4faf>))</span><span class="comment" data-v-5d4b4faf>//[2]//包括起始位置下標,不包括終止位置下標</span></div><br data-v-5d4b4faf><div data-v-5d4b4faf><span class="word" data-v-5d4b4faf>console</span><span class="variable" data-v-5d4b4faf>.log</span><span class="brackets" data-v-5d4b4faf>(</span> <span class="word" data-v-5d4b4faf>arr</span><span class="variable" data-v-5d4b4faf>.slice</span><span class="brackets" data-v-5d4b4faf>(</span> <span class="number" data-v-5d4b4faf>-5,-1</span><span class="brackets" data-v-5d4b4faf>))</span><span class="comment" data-v-5d4b4faf>//[1,2,3,4]</span><span class="word" data-v-5d4b4faf></span></div><br data-v-5d4b4faf><div data-v-5d4b4faf><span class="word" data-v-5d4b4faf>console</span><span class="variable" data-v-5d4b4faf>.log</span><span class="brackets" data-v-5d4b4faf>(</span> <span class="word" data-v-5d4b4faf>str</span><span class="variable" data-v-5d4b4faf>.slice</span><span class="brackets" data-v-5d4b4faf>(</span> <span class="number" data-v-5d4b4faf>-5,-1</span><span class="brackets" data-v-5d4b4faf>))</span><span class="comment" data-v-5d4b4faf>//1234</span> <span class="word" data-v-5d4b4faf></span></div></div><div id="threemethod011" class="articleCardTitle cor36 fz34" data-v-5d4b4faf> 4. splice </div><p class="fz28" data-v-5d4b4faf>能刪改數組</p><p class="fz28" data-v-5d4b4faf>注意 會修改原數組</p><br data-v-5d4b4faf><div class="bgcVS" data-v-5d4b4faf><div data-v-5d4b4faf><span class="variable" data-v-5d4b4faf>.splice</span><span class="brackets" data-v-5d4b4faf>(</span><span class="number" data-v-5d4b4faf>2個參數可選</span><span class="brackets" data-v-5d4b4faf>)</span></div><div data-v-5d4b4faf><span class="word" data-v-5d4b4faf>arr</span><span class="variable" data-v-5d4b4faf>.splice</span><span class="brackets" data-v-5d4b4faf>(</span><span class="word" data-v-5d4b4faf>指定要插入or刪除位置, 指定刪除元素的個數, 插入的值 </span><span class="brackets" data-v-5d4b4faf>)</span></div><br data-v-5d4b4faf><div data-v-5d4b4faf><span class="function" data-v-5d4b4faf>let </span> <span class="word" data-v-5d4b4faf>arr</span><span class="then" data-v-5d4b4faf>=</span> <span class="brackets" data-v-5d4b4faf>[</span><span class="number" data-v-5d4b4faf>1,2,3,4,5,6,7,8</span><span class="brackets" data-v-5d4b4faf>]</span></div><div data-v-5d4b4faf><span class="word" data-v-5d4b4faf>console</span><span class="variable" data-v-5d4b4faf>.log</span><span class="brackets" data-v-5d4b4faf>(</span> <span class="word" data-v-5d4b4faf>arr</span><span class="brackets" data-v-5d4b4faf>())</span><span class="comment" data-v-5d4b4faf>//[1,2,3,4,5,6,7,8]</span></div><div data-v-5d4b4faf><span class="word" data-v-5d4b4faf>console</span><span class="variable" data-v-5d4b4faf>.log</span><span class="brackets" data-v-5d4b4faf>(</span> <span class="word" data-v-5d4b4faf>arr</span><span class="variable" data-v-5d4b4faf>.splice</span><span class="brackets" data-v-5d4b4faf>()) </span><div data-v-5d4b4faf><span class="comment" data-v-5d4b4faf>//[] //返回由刪除元素組成的數組(沒刪返回空)</span></div></div><br data-v-5d4b4faf><div data-v-5d4b4faf><span class="word" data-v-5d4b4faf>console</span><span class="variable" data-v-5d4b4faf>.log</span><span class="brackets" data-v-5d4b4faf>(</span> <span class="word" data-v-5d4b4faf>arr</span><span class="variable" data-v-5d4b4faf>.splice</span><span class="brackets" data-v-5d4b4faf>(</span> <span class="word" data-v-5d4b4faf>-2</span><span class="brackets" data-v-5d4b4faf>))</span><span class="comment" data-v-5d4b4faf>//[7,8]</span></div><div data-v-5d4b4faf><span class="word" data-v-5d4b4faf>console</span><span class="variable" data-v-5d4b4faf>.log</span><span class="brackets" data-v-5d4b4faf>(</span> <span class="word" data-v-5d4b4faf>arr</span><span class="variable" data-v-5d4b4faf>.splice</span><span class="brackets" data-v-5d4b4faf>(</span> <span class="number" data-v-5d4b4faf>4</span><span class="brackets" data-v-5d4b4faf>))</span><span class="comment" data-v-5d4b4faf>//[5,6,7,8]</span></div><div data-v-5d4b4faf><span class="word" data-v-5d4b4faf>console</span><span class="variable" data-v-5d4b4faf>.log</span><span class="brackets" data-v-5d4b4faf>(</span> <span class="word" data-v-5d4b4faf>arr</span><span class="brackets" data-v-5d4b4faf>)</span><span class="comment" data-v-5d4b4faf>//[1,2,3,4]</span></div><br data-v-5d4b4faf><br data-v-5d4b4faf><div data-v-5d4b4faf><span class="function" data-v-5d4b4faf>let </span> <span class="word" data-v-5d4b4faf>arr2</span><span class="then" data-v-5d4b4faf>=</span> <span class="brackets" data-v-5d4b4faf>[</span><span class="number" data-v-5d4b4faf>1,2,3,4,5,6,7,8</span><span class="brackets" data-v-5d4b4faf>]</span></div><div data-v-5d4b4faf><span class="comment" data-v-5d4b4faf>//console.log(arr2.splice(0,-2))//第2個不合法的值,不刪除,回傳[]</span></div><div data-v-5d4b4faf><span class="word" data-v-5d4b4faf>console</span><span class="variable" data-v-5d4b4faf>.log</span><span class="brackets" data-v-5d4b4faf>(</span> <span class="word" data-v-5d4b4faf>arr2</span><span class="variable" data-v-5d4b4faf>.splice</span><span class="brackets" data-v-5d4b4faf>(</span> <span class="number" data-v-5d4b4faf>0,6</span><span class="brackets" data-v-5d4b4faf>))</span><span class="comment" data-v-5d4b4faf>//[1,2,3,4,5,6]</span></div><div data-v-5d4b4faf><span class="word" data-v-5d4b4faf>console</span><span class="variable" data-v-5d4b4faf>.log</span><span class="brackets" data-v-5d4b4faf>(</span> <span class="word" data-v-5d4b4faf>arr2</span><span class="brackets" data-v-5d4b4faf>)</span><span class="comment" data-v-5d4b4faf>//[7,8]</span></div><br data-v-5d4b4faf><br data-v-5d4b4faf><div data-v-5d4b4faf><span class="function" data-v-5d4b4faf>let </span> <span class="word" data-v-5d4b4faf>arr3</span><span class="then" data-v-5d4b4faf>=</span> <span class="brackets" data-v-5d4b4faf>[</span><span class="number" data-v-5d4b4faf>1,2,3,4,5,6,7,8</span><span class="brackets" data-v-5d4b4faf>]</span></div><div data-v-5d4b4faf><span class="word" data-v-5d4b4faf>console</span><span class="variable" data-v-5d4b4faf>.log</span><span class="brackets" data-v-5d4b4faf>(</span> <span class="word" data-v-5d4b4faf>arr3</span><span class="variable" data-v-5d4b4faf>.splice</span><span class="brackets" data-v-5d4b4faf>(</span> <span class="number" data-v-5d4b4faf>0,0,</span><span class="src" data-v-5d4b4faf>&quot;a&quot;</span> <span class="then" data-v-5d4b4faf>,</span><span class="src" data-v-5d4b4faf>&quot;b&quot;</span> <span class="brackets" data-v-5d4b4faf>))</span></div><div data-v-5d4b4faf><span class="comment" data-v-5d4b4faf>//[&quot;a&quot;,&quot;b&quot;,1,2,3,4,5,6,7,8]</span></div></div><table class="fz30" data-v-5d4b4faf><tr data-v-5d4b4faf><td data-v-5d4b4faf><div class="pad20" data-v-5d4b4faf></div></td><td data-v-5d4b4faf><div class="pad20" data-v-5d4b4faf>slice</div></td><td data-v-5d4b4faf><div class="pad20" data-v-5d4b4faf>splice</div></td></tr><tr data-v-5d4b4faf><td data-v-5d4b4faf><div class="pad20" data-v-5d4b4faf>原數組</div></td><td data-v-5d4b4faf><div class="pad20" data-v-5d4b4faf>不改變</div></td><td data-v-5d4b4faf><div class="pad20" data-v-5d4b4faf>會改原數組</div></td></tr><tr data-v-5d4b4faf><td data-v-5d4b4faf><div class="pad20" data-v-5d4b4faf>沒傳參數</div></td><td data-v-5d4b4faf><div class="pad20" data-v-5d4b4faf>返回原數組</div></td><td data-v-5d4b4faf><div class="pad20" data-v-5d4b4faf><div class="" data-v-5d4b4faf>返回由刪除元素</div><div class="" data-v-5d4b4faf>組成的數組</div><div class="" data-v-5d4b4faf>沒刪返回空</div></div></td></tr><tr data-v-5d4b4faf><td data-v-5d4b4faf><div class="pad20" data-v-5d4b4faf>參數一個時</div></td><td data-v-5d4b4faf><div class="pad20" data-v-5d4b4faf>一樣</div></td><td data-v-5d4b4faf><div class="pad20" data-v-5d4b4faf>一樣</div></td></tr><tr data-v-5d4b4faf><td data-v-5d4b4faf><div class="pad20" data-v-5d4b4faf></div></td><td data-v-5d4b4faf><div class="pad20" data-v-5d4b4faf></div></td><td data-v-5d4b4faf><div class="pad20" data-v-5d4b4faf></div></td></tr><tr data-v-5d4b4faf><td data-v-5d4b4faf><div class="pad20" data-v-5d4b4faf></div></td><td data-v-5d4b4faf><div class="pad20" data-v-5d4b4faf></div></td><td data-v-5d4b4faf><div class="pad20" data-v-5d4b4faf></div></td></tr></table><div id="threemethod012" class="articleCardTitle cor36 fz34" data-v-5d4b4faf> 4. every &amp; some <span class="spo marL100" data-v-5d4b4faf>回調</span></div><p class="fz28" data-v-5d4b4faf> every 每一個是否都符合條件, 都符合返回 true, 否返回 false </p><br data-v-5d4b4faf><p class="fz28" data-v-5d4b4faf>🐕🐶🐕🐕.every(🐕) &gt; false</p><div class="bgcVS" data-v-5d4b4faf><div data-v-5d4b4faf><span class="comment" data-v-5d4b4faf>1.裡面幾個參數 2. 返回值返回什麼 3. 使用方法</span></div><br data-v-5d4b4faf><div data-v-5d4b4faf><span class="word" data-v-5d4b4faf>arr.</span><span class="variable" data-v-5d4b4faf>every</span><span class="brackets" data-v-5d4b4faf>(</span> <span class="cor36" data-v-5d4b4faf>回調</span><span class="word" data-v-5d4b4faf>返回布林值</span><span class="brackets" data-v-5d4b4faf>)</span> <span class="word" data-v-5d4b4faf></span></div><br data-v-5d4b4faf> # <div data-v-5d4b4faf><span class="function" data-v-5d4b4faf>const </span><span class="word" data-v-5d4b4faf>arr</span> <span class="then" data-v-5d4b4faf>=</span><span class="brackets" data-v-5d4b4faf>[</span><span class="number" data-v-5d4b4faf>10,20,30</span><span class="brackets" data-v-5d4b4faf>]</span></div><div data-v-5d4b4faf><span class="function" data-v-5d4b4faf>const </span><span class="word" data-v-5d4b4faf>flag</span> <span class="then" data-v-5d4b4faf>=</span><span class="word" data-v-5d4b4faf>arr.</span> <span class="variable" data-v-5d4b4faf>every</span><span class="brackets" data-v-5d4b4faf>(</span> <span class="word" data-v-5d4b4faf>item</span><span class="function" data-v-5d4b4faf>=&gt;</span> <span class="word" data-v-5d4b4faf>item</span><span class="then" data-v-5d4b4faf>&gt;=</span> <span class="number" data-v-5d4b4faf>10</span><span class="brackets" data-v-5d4b4faf>)</span></div><div data-v-5d4b4faf><span class="word" data-v-5d4b4faf>console.</span><span class="variable" data-v-5d4b4faf>log</span> <span class="brackets" data-v-5d4b4faf>(</span><span class="word" data-v-5d4b4faf>flag</span> <span class="brackets" data-v-5d4b4faf>) </span><span class="comment" data-v-5d4b4faf>// true</span></div><br data-v-5d4b4faf><div data-v-5d4b4faf><span class="function" data-v-5d4b4faf>const </span><span class="word" data-v-5d4b4faf>flag</span> <span class="then" data-v-5d4b4faf>=</span><span class="word" data-v-5d4b4faf>arr.</span> <span class="variable" data-v-5d4b4faf>some</span><span class="brackets" data-v-5d4b4faf>(</span> <span class="word" data-v-5d4b4faf>item</span><span class="function" data-v-5d4b4faf>=&gt;</span> <span class="word" data-v-5d4b4faf>item</span><span class="then" data-v-5d4b4faf>&gt;=</span> <span class="number" data-v-5d4b4faf>20</span><span class="brackets" data-v-5d4b4faf>)</span></div><div data-v-5d4b4faf><span class="word" data-v-5d4b4faf>console.</span><span class="variable" data-v-5d4b4faf>log</span> <span class="brackets" data-v-5d4b4faf>(</span><span class="word" data-v-5d4b4faf>flag</span> <span class="brackets" data-v-5d4b4faf>) </span><span class="comment" data-v-5d4b4faf>// true</span></div></div><div id="threemethod013" class="articleCardTitle cor36 fz34" data-v-5d4b4faf> 4. concat . . . 不改變 原數組 </div><p class="fz28" data-v-5d4b4faf> concat 方法用於 多個數組合並 , 他將 新數組的成員 , 加到 原數組 成員的 後部 , 然後返回一個 新數組 </p><p class="fz28" data-v-5d4b4faf>原數組不變</p><br data-v-5d4b4faf><div class="bgcVS" data-v-5d4b4faf><div data-v-5d4b4faf><span class="function" data-v-5d4b4faf>let </span> <span class="word" data-v-5d4b4faf>arr1</span><span class="then" data-v-5d4b4faf>=</span> <span class="brackets" data-v-5d4b4faf>[</span><span class="src" data-v-5d4b4faf>&quot;wayne&quot;,&quot;jack&quot;</span><span class="brackets" data-v-5d4b4faf>]</span></div><div data-v-5d4b4faf><span class="function" data-v-5d4b4faf>let </span> <span class="word" data-v-5d4b4faf>arr2</span><span class="then" data-v-5d4b4faf>=</span> <span class="brackets" data-v-5d4b4faf>[</span><span class="src" data-v-5d4b4faf>&quot;hello&quot;,&quot;hi&quot;</span><span class="brackets" data-v-5d4b4faf>]</span> <span class="word" data-v-5d4b4faf></span></div><br data-v-5d4b4faf><div data-v-5d4b4faf><span class="comment" data-v-5d4b4faf>//直接+會變字串</span></div><div data-v-5d4b4faf><span class="word" data-v-5d4b4faf>console</span><span class="variable" data-v-5d4b4faf>.log</span><span class="brackets" data-v-5d4b4faf>(</span> <span class="word" data-v-5d4b4faf>arr1</span><span class="then" data-v-5d4b4faf>+</span> <span class="word" data-v-5d4b4faf>arr2</span><span class="brackets" data-v-5d4b4faf>)</span><span class="comment" data-v-5d4b4faf>//wayne,jackhello,hi</span></div><br data-v-5d4b4faf><div data-v-5d4b4faf><span class="word" data-v-5d4b4faf>console</span><span class="variable" data-v-5d4b4faf>.log</span><span class="brackets" data-v-5d4b4faf>(</span><span class="word" data-v-5d4b4faf>arr1.concat</span><span class="brackets" data-v-5d4b4faf>(</span> <span class="word" data-v-5d4b4faf>arr2</span><span class="brackets" data-v-5d4b4faf>)) </span><span class="comment" data-v-5d4b4faf>//[&quot;wayne&quot;,&quot;jack&quot;,&quot;hello&quot;,&quot;hi&quot;]</span></div><br data-v-5d4b4faf><p data-v-5d4b4faf>也可以多個</p><br data-v-5d4b4faf><div data-v-5d4b4faf><span class="function" data-v-5d4b4faf>let </span> <span class="word" data-v-5d4b4faf>arr3</span><span class="then" data-v-5d4b4faf>=</span> <span class="brackets" data-v-5d4b4faf>[</span><span class="src" data-v-5d4b4faf>&quot;web&quot;,&quot;Python&quot;</span><span class="brackets" data-v-5d4b4faf>]</span></div><div data-v-5d4b4faf><span class="word" data-v-5d4b4faf>console</span><span class="variable" data-v-5d4b4faf>.log</span><span class="brackets" data-v-5d4b4faf>(</span><span class="word" data-v-5d4b4faf>arr1.concat</span><span class="brackets" data-v-5d4b4faf>(</span><span class="word" data-v-5d4b4faf>arr2,arr3</span><span class="brackets" data-v-5d4b4faf>))</span><span class="comment" data-v-5d4b4faf>//[&quot;wayne&quot;,&quot;jack&quot;,&quot;hello&quot;,&quot;hi&quot;,&quot;web&quot;,&quot;Python&quot;]</span></div><div data-v-5d4b4faf><span class="word" data-v-5d4b4faf>console</span><span class="variable" data-v-5d4b4faf>.log</span><span class="brackets" data-v-5d4b4faf>(</span> <span class="word" data-v-5d4b4faf>arr1</span><span class="brackets" data-v-5d4b4faf>)</span><span class="comment" data-v-5d4b4faf>//3個原數組沒變</span></div><br data-v-5d4b4faf><p data-v-5d4b4faf>除了接受數組,也接受其他類型的值作為參數,添加到數組尾部</p><br data-v-5d4b4faf><div data-v-5d4b4faf><span class="function" data-v-5d4b4faf>let </span> <span class="word" data-v-5d4b4faf>arr4</span><span class="then" data-v-5d4b4faf>=</span> <span class="brackets" data-v-5d4b4faf>[</span><span class="number" data-v-5d4b4faf>10</span> <span class="brackets" data-v-5d4b4faf>]</span></div><div data-v-5d4b4faf><span class="word" data-v-5d4b4faf>console</span><span class="variable" data-v-5d4b4faf>.log</span><span class="brackets" data-v-5d4b4faf>(</span> <span class="word" data-v-5d4b4faf>arr4</span><span class="variable" data-v-5d4b4faf>.concat</span><span class="brackets" data-v-5d4b4faf>(</span><span class="number" data-v-5d4b4faf>20,30,40</span><span class="brackets" data-v-5d4b4faf>))</span><span class="comment" data-v-5d4b4faf>//[10,20,30,40]</span></div><br data-v-5d4b4faf><br data-v-5d4b4faf><br data-v-5d4b4faf><div data-v-5d4b4faf><span class="brackets" data-v-5d4b4faf>[</span> <span class="number" data-v-5d4b4faf>1,2,3</span><span class="brackets" data-v-5d4b4faf>]</span><span class="variable" data-v-5d4b4faf>.concat</span><span class="brackets" data-v-5d4b4faf>(</span><span class="number" data-v-5d4b4faf>4,5,6,</span><span class="brackets" data-v-5d4b4faf>[</span> <span class="number" data-v-5d4b4faf>7,8,9</span><span class="brackets" data-v-5d4b4faf>])</span></div><div data-v-5d4b4faf><span class="brackets" data-v-5d4b4faf>[</span><span class="number" data-v-5d4b4faf>1,2,3,4,5,6,7,8,9</span><span class="brackets" data-v-5d4b4faf>]</span></div></div><div id="threemethod014" class="articleCardTitle cor36 fz34" data-v-5d4b4faf> 4. Array.form() </div><p class="fz28" data-v-5d4b4faf>偽數組轉換為真數組</p><div class="bgcVS" data-v-5d4b4faf><div data-v-5d4b4faf><span class="then" data-v-5d4b4faf>＜</span> <span class="word" data-v-5d4b4faf>ul</span><span class="then" data-v-5d4b4faf>&gt;</span></div><div class="pTwo" data-v-5d4b4faf><span class="then" data-v-5d4b4faf>＜</span> <span class="word" data-v-5d4b4faf>li</span><span class="then" data-v-5d4b4faf>&gt;</span></div><div class="pTwo" data-v-5d4b4faf><span class="then" data-v-5d4b4faf>＜</span> <span class="word" data-v-5d4b4faf>li</span><span class="then" data-v-5d4b4faf>&gt;</span></div><div class="pTwo" data-v-5d4b4faf><span class="then" data-v-5d4b4faf>＜</span> <span class="word" data-v-5d4b4faf>li</span><span class="then" data-v-5d4b4faf>&gt;</span></div><div data-v-5d4b4faf><span class="then" data-v-5d4b4faf>＜/</span> <span class="word" data-v-5d4b4faf>ul</span><span class="then" data-v-5d4b4faf>&gt;</span></div><div data-v-5d4b4faf><span class="function" data-v-5d4b4faf>const </span><span class="word" data-v-5d4b4faf>lis</span> <span class="then" data-v-5d4b4faf>=</span><span class="word" data-v-5d4b4faf>document</span><span class="variable" data-v-5d4b4faf>.querySelectorAll</span><span class="brackets" data-v-5d4b4faf>(</span> <span class="src" data-v-5d4b4faf>&quot;ul li&quot;</span><span class="brackets" data-v-5d4b4faf>)</span></div><div data-v-5d4b4faf><span class="word" data-v-5d4b4faf>console.</span><span class="variable" data-v-5d4b4faf>log</span> <span class="brackets" data-v-5d4b4faf>(</span><span class="word" data-v-5d4b4faf>lis</span> <span class="brackets" data-v-5d4b4faf>)</span><span class="comment" data-v-5d4b4faf>// 是 偽數組 Argument 也是</span></div><div data-v-5d4b4faf><span class="word" data-v-5d4b4faf>lis.</span> <span class="variable" data-v-5d4b4faf>pop</span><span class="brackets" data-v-5d4b4faf>() </span><span class="comment" data-v-5d4b4faf>// pop is not a function</span></div><div data-v-5d4b4faf><span class="function" data-v-5d4b4faf>const </span><span class="word" data-v-5d4b4faf>liss</span> <span class="then" data-v-5d4b4faf>=</span><span class="brackets" data-v-5d4b4faf>Array</span><span class="variable" data-v-5d4b4faf>.from</span><span class="brackets" data-v-5d4b4faf>(</span> <span class="word" data-v-5d4b4faf>lis</span><span class="brackets" data-v-5d4b4faf>)</span></div></div><p class="fz28" data-v-5d4b4faf></p><p class="fz28" data-v-5d4b4faf></p><p class="fz28" data-v-5d4b4faf></p><p class="fz28" data-v-5d4b4faf></p><p class="fz28" data-v-5d4b4faf></p><p class="fz28" data-v-5d4b4faf></p><p class="fz28" data-v-5d4b4faf></p><p class="fz28" data-v-5d4b4faf></p><p class="fz28" data-v-5d4b4faf></p><p class="fz28" data-v-5d4b4faf></p><p class="fz28" data-v-5d4b4faf></p><p class="fz28" data-v-5d4b4faf></p><p class="fz28" data-v-5d4b4faf></p><p class="fz28" data-v-5d4b4faf></p><p class="fz28" data-v-5d4b4faf></p><p class="fz28" data-v-5d4b4faf></p><p class="fz28" data-v-5d4b4faf></p><p class="fz28" data-v-5d4b4faf></p><p class="fz28" data-v-5d4b4faf></p><p class="fz28" data-v-5d4b4faf></p><p class="fz28" data-v-5d4b4faf></p><p class="fz28" data-v-5d4b4faf></p><p class="fz28" data-v-5d4b4faf></p><p class="fz28" data-v-5d4b4faf></p><p class="fz28" data-v-5d4b4faf></p><p class="fz28" data-v-5d4b4faf></p><p class="fz28" data-v-5d4b4faf></p><p class="fz28" data-v-5d4b4faf></p><p class="fz28" data-v-5d4b4faf></p><p class="fz28" data-v-5d4b4faf></p><p class="fz28" data-v-5d4b4faf></p><p class="fz28" data-v-5d4b4faf></p><p class="fz28" data-v-5d4b4faf></p><p class="fz28" data-v-5d4b4faf></p><p class="fz28" data-v-5d4b4faf></p><div id="threemethod015" class="articleCardTitle cor36 fz34" data-v-5d4b4faf> 4. 綜合練習 </div><div class="dis" data-v-5d4b4faf><div class="bgcVS w100" data-v-5d4b4faf><p data-v-5d4b4faf>JSON格式msg={&quot;code&quot;:200,&quot;data&quot;:[{...}]}</p><br data-v-5d4b4faf><div data-v-5d4b4faf><span class="function" data-v-5d4b4faf>const </span><span class="brackets" data-v-5d4b4faf>{</span> <span class="word" data-v-5d4b4faf>data</span><span class="brackets" data-v-5d4b4faf>}</span> <span class="then" data-v-5d4b4faf>=</span><span class="word" data-v-5d4b4faf>msg</span></div><div data-v-5d4b4faf><span class="word" data-v-5d4b4faf>console.</span><span class="variable" data-v-5d4b4faf>log</span><span class="brackets" data-v-5d4b4faf>(</span> <span class="word" data-v-5d4b4faf>data</span><span class="brackets" data-v-5d4b4faf>)</span></div><br data-v-5d4b4faf><div data-v-5d4b4faf><span class="function" data-v-5d4b4faf>function </span><span class="word" data-v-5d4b4faf>render</span><span class="brackets" data-v-5d4b4faf>(</span> <span class="word" data-v-5d4b4faf>arr</span><span class="brackets" data-v-5d4b4faf>){</span></div><div class="pTwo VSL" data-v-5d4b4faf><span class="word" data-v-5d4b4faf>console.</span><span class="variable" data-v-5d4b4faf>log</span><span class="brackets" data-v-5d4b4faf>(</span> <span class="word" data-v-5d4b4faf>arr</span><span class="brackets" data-v-5d4b4faf>)</span></div><div class="brackets" data-v-5d4b4faf>}</div><div data-v-5d4b4faf><span class="word" data-v-5d4b4faf>render</span><span class="brackets" data-v-5d4b4faf>(</span> <span class="word" data-v-5d4b4faf>data</span><span class="brackets" data-v-5d4b4faf>)</span></div></div><div class="bgcVSMid" data-v-5d4b4faf>&gt;</div><div class="bgcVS w100" data-v-5d4b4faf><br data-v-5d4b4faf><br data-v-5d4b4faf><div data-v-5d4b4faf><span class="function" data-v-5d4b4faf>function </span><span class="word" data-v-5d4b4faf>render</span><span class="brackets" data-v-5d4b4faf>(</span> <span class="word" data-v-5d4b4faf>arr</span><span class="brackets" data-v-5d4b4faf>){</span></div><div class="pTwo VSL" data-v-5d4b4faf><span class="function" data-v-5d4b4faf>const </span><span class="brackets" data-v-5d4b4faf>{</span> <span class="word" data-v-5d4b4faf>data</span><span class="brackets" data-v-5d4b4faf>}</span> <span class="then" data-v-5d4b4faf>=</span><span class="word" data-v-5d4b4faf>arr</span></div><div class="pTwo VSL" data-v-5d4b4faf><span class="word" data-v-5d4b4faf>console.</span><span class="variable" data-v-5d4b4faf>log</span><span class="brackets" data-v-5d4b4faf>(</span> <span class="word" data-v-5d4b4faf>data</span><span class="brackets" data-v-5d4b4faf>)</span></div><div class="brackets" data-v-5d4b4faf>}</div><div data-v-5d4b4faf><span class="word" data-v-5d4b4faf>render</span><span class="brackets" data-v-5d4b4faf>(</span> <span class="word" data-v-5d4b4faf>msg</span><span class="brackets" data-v-5d4b4faf>)</span></div><br data-v-5d4b4faf><div class="disCen comment" data-v-5d4b4faf>更簡潔寫法 V</div><br data-v-5d4b4faf><div data-v-5d4b4faf><span class="function" data-v-5d4b4faf>function </span><span class="word" data-v-5d4b4faf>render</span><span class="brackets" data-v-5d4b4faf>( { </span><span class="word" data-v-5d4b4faf>data </span><span class="brackets" data-v-5d4b4faf>} ) {</span></div><div class="pTwo VSL" data-v-5d4b4faf><span class="word" data-v-5d4b4faf>console.</span><span class="variable" data-v-5d4b4faf>log</span><span class="brackets" data-v-5d4b4faf>(</span> <span class="word" data-v-5d4b4faf>data</span><span class="brackets" data-v-5d4b4faf>)</span></div><div class="brackets" data-v-5d4b4faf>}</div><div data-v-5d4b4faf><span class="word" data-v-5d4b4faf>render</span><span class="brackets" data-v-5d4b4faf>(</span> <span class="word" data-v-5d4b4faf>msg</span><span class="brackets" data-v-5d4b4faf>)</span></div><br data-v-5d4b4faf><div class="comment" data-v-5d4b4faf>data容易命名衝突, 接進來資料改名myData</div><br data-v-5d4b4faf><div data-v-5d4b4faf><span class="function" data-v-5d4b4faf>function </span><span class="word" data-v-5d4b4faf>render</span><span class="brackets" data-v-5d4b4faf>( { </span><span class="word" data-v-5d4b4faf>data: myData </span><span class="brackets" data-v-5d4b4faf>} ) {</span></div><div class="pTwo VSL" data-v-5d4b4faf><span class="word" data-v-5d4b4faf>console.</span><span class="variable" data-v-5d4b4faf>log</span><span class="brackets" data-v-5d4b4faf>(</span> <span class="word" data-v-5d4b4faf>myData</span><span class="brackets" data-v-5d4b4faf>)</span></div><div class="brackets" data-v-5d4b4faf>}</div><div data-v-5d4b4faf><span class="word" data-v-5d4b4faf>render</span><span class="brackets" data-v-5d4b4faf>(</span> <span class="word" data-v-5d4b4faf>msg</span><span class="brackets" data-v-5d4b4faf>)</span></div></div></div><div class="bgcVS" data-v-5d4b4faf><div data-v-5d4b4faf><span class="function" data-v-5d4b4faf>const </span><span class="word" data-v-5d4b4faf>spec</span> <span class="then" data-v-5d4b4faf>=</span><span class="brackets" data-v-5d4b4faf>{</span> <span class="word" data-v-5d4b4faf>size:</span><span class="src" data-v-5d4b4faf>&quot;40cm*40cm&quot;</span><span class="word" data-v-5d4b4faf>,color:</span><span class="src" data-v-5d4b4faf>&quot;black&quot;</span> <span class="brackets" data-v-5d4b4faf>}</span></div><span class="comment" data-v-5d4b4faf>//1.獲取所有屬性值</span><div data-v-5d4b4faf><span class="brackets" data-v-5d4b4faf>Object</span><span class="variable" data-v-5d4b4faf>.values</span><span class="brackets" data-v-5d4b4faf>(</span> <span class="word" data-v-5d4b4faf>spec</span><span class="brackets" data-v-5d4b4faf>)</span></div><div data-v-5d4b4faf><span class="word" data-v-5d4b4faf>console.</span><span class="variable" data-v-5d4b4faf>log</span> <span class="brackets" data-v-5d4b4faf>(</span><span class="word" data-v-5d4b4faf>Object.values</span><span class="brackets" data-v-5d4b4faf>(</span> <span class="word" data-v-5d4b4faf>spec</span><span class="brackets" data-v-5d4b4faf>))</span><span class="comment" data-v-5d4b4faf>//[&quot;40cm*40cm&quot;,&quot;black&quot;]</span></div><span class="comment" data-v-5d4b4faf>// 2. 轉換為字串 join(&quot;/&quot;)</span><span class="comment" data-v-5d4b4faf>// 2. 轉換為字串</span><div data-v-5d4b4faf><span class="brackets" data-v-5d4b4faf>Object</span><span class="variable" data-v-5d4b4faf>.values</span><span class="brackets" data-v-5d4b4faf>(</span> <span class="word" data-v-5d4b4faf>spec</span><span class="brackets" data-v-5d4b4faf>)</span><span class="variable" data-v-5d4b4faf>.join</span><span class="brackets" data-v-5d4b4faf>(</span> <span class="src" data-v-5d4b4faf>&quot;/&quot;</span><span class="brackets" data-v-5d4b4faf>)</span></div><div data-v-5d4b4faf><span class="word" data-v-5d4b4faf>console.</span><span class="variable" data-v-5d4b4faf>log</span> <span class="brackets" data-v-5d4b4faf>(</span><span class="brackets" data-v-5d4b4faf>Object</span><span class="variable" data-v-5d4b4faf>.values</span><span class="brackets" data-v-5d4b4faf>(</span> <span class="word" data-v-5d4b4faf>spec</span><span class="brackets" data-v-5d4b4faf>)</span><span class="variable" data-v-5d4b4faf>.join</span><span class="brackets" data-v-5d4b4faf>(</span> <span class="src" data-v-5d4b4faf>&quot;/&quot;</span><span class="brackets" data-v-5d4b4faf>)) </span><span class="comment" data-v-5d4b4faf>//40cm*40cm/black</span></div><div data-v-5d4b4faf><span class="word" data-v-5d4b4faf>document.</span><span class="variable" data-v-5d4b4faf>querySelect</span><span class="brackets" data-v-5d4b4faf>(</span><span class="src" data-v-5d4b4faf>&quot;.showDiv&quot;</span><span class="brackets" data-v-5d4b4faf>)</span><span class="variable" data-v-5d4b4faf>.innerHTML</span><span class="then" data-v-5d4b4faf>=</span> <span class="brackets" data-v-5d4b4faf>Object</span><span class="word" data-v-5d4b4faf>.value</span> <span class="brackets" data-v-5d4b4faf>(</span><span class="word" data-v-5d4b4faf>spec</span> <span class="brackets" data-v-5d4b4faf>)</span><span class="variable" data-v-5d4b4faf>.join</span><span class="brackets" data-v-5d4b4faf>(</span> <span class="src" data-v-5d4b4faf>&quot;/&quot;</span><span class="brackets" data-v-5d4b4faf>)</span></div></div><div class="bgcVS" data-v-5d4b4faf><div data-v-5d4b4faf><span class="function" data-v-5d4b4faf>const </span><span class="word" data-v-5d4b4faf>tea</span> <span class="then" data-v-5d4b4faf>=</span><span class="src" data-v-5d4b4faf>&quot;50g的飲料,100g茶葉&quot;</span></div><span class="comment" data-v-5d4b4faf>// 1.把字串轉成數組</span><div data-v-5d4b4faf><span class="word" data-v-5d4b4faf>console.</span><span class="variable" data-v-5d4b4faf>log</span> <span class="brackets" data-v-5d4b4faf>(</span><span class="word" data-v-5d4b4faf>tea.</span><span class="variable" data-v-5d4b4faf>split</span><span class="brackets" data-v-5d4b4faf>(</span> <span class="src" data-v-5d4b4faf>&quot;,&quot;</span><span class="brackets" data-v-5d4b4faf>)) </span><span class="comment" data-v-5d4b4faf>// [ &quot;50g的飲料&quot;, &quot;100g茶葉&quot; ]</span></div><span class="comment" data-v-5d4b4faf>// 2. 有幾條數據 我就生成幾個 ＜span&gt;</span><div data-v-5d4b4faf><span class="word" data-v-5d4b4faf>tea.</span><span class="variable" data-v-5d4b4faf>split</span><span class="brackets" data-v-5d4b4faf>(</span> <span class="src" data-v-5d4b4faf>&quot;,&quot;</span><span class="brackets" data-v-5d4b4faf>)</span><span class="variable" data-v-5d4b4faf>.map</span><span class="brackets" data-v-5d4b4faf>(</span><span class="function" data-v-5d4b4faf>function </span><span class="brackets" data-v-5d4b4faf>(</span> <span class="word" data-v-5d4b4faf>item</span><span class="brackets" data-v-5d4b4faf>){ </span><span class="comment" data-v-5d4b4faf>//item是裡面的每一個值</span></div><div class="pTwo" data-v-5d4b4faf><div class="dis" data-v-5d4b4faf><div data-v-5d4b4faf><span class="then" data-v-5d4b4faf>return </span><span class="src" data-v-5d4b4faf>`＜span&gt;贈品</span><span class="then" data-v-5d4b4faf>${</span> <span class="word" data-v-5d4b4faf>item</span><span class="then" data-v-5d4b4faf>}</span> <span class="src" data-v-5d4b4faf>＜/span&gt;`</span></div><div class="comment" data-v-5d4b4faf><span data-v-5d4b4faf>//贈品50g的飲料</span><br data-v-5d4b4faf><span data-v-5d4b4faf>//贈品100g茶葉</span></div></div></div><span class="brackets" data-v-5d4b4faf>})</span><div data-v-5d4b4faf><span class="function" data-v-5d4b4faf>const </span><span class="word" data-v-5d4b4faf>str</span> <span class="then" data-v-5d4b4faf>=</span><span class="word" data-v-5d4b4faf>tea.</span><span class="variable" data-v-5d4b4faf>split</span><span class="brackets" data-v-5d4b4faf>(</span> <span class="src" data-v-5d4b4faf>&quot;,&quot;</span><span class="brackets" data-v-5d4b4faf>)</span><span class="variable" data-v-5d4b4faf>.map</span><span class="brackets" data-v-5d4b4faf>(</span><span class="function" data-v-5d4b4faf>function </span><span class="brackets" data-v-5d4b4faf>(</span> <span class="word" data-v-5d4b4faf>item</span><span class="brackets" data-v-5d4b4faf>){ </span></div><div class="pTwo" data-v-5d4b4faf><div data-v-5d4b4faf><span class="then" data-v-5d4b4faf>return </span><span class="src" data-v-5d4b4faf>`＜span&gt;贈品</span><span class="then" data-v-5d4b4faf>${</span> <span class="word" data-v-5d4b4faf>item</span><span class="then" data-v-5d4b4faf>}</span> <span class="src" data-v-5d4b4faf>＜/span&gt;`</span></div></div><span class="brackets" data-v-5d4b4faf>})</span><div data-v-5d4b4faf><span class="word" data-v-5d4b4faf>console.</span><span class="variable" data-v-5d4b4faf>log</span> <span class="brackets" data-v-5d4b4faf>(</span><span class="word" data-v-5d4b4faf>arr</span> <span class="brackets" data-v-5d4b4faf>) </span><span class="comment" data-v-5d4b4faf>[&quot;＜span&gt;贈品50g的飲料＜/span&gt;&quot;,&quot;＜span&gt;贈品100g茶葉＜/span&gt;&quot;]</span></div><br data-v-5d4b4faf><div class="comment" data-v-5d4b4faf>數組不能直接往盒子加</div><div class="comment" data-v-5d4b4faf>想要改成字串</div><div data-v-5d4b4faf><span class="function" data-v-5d4b4faf>const </span><span class="word" data-v-5d4b4faf>str</span> <span class="then" data-v-5d4b4faf>=</span><span class="word" data-v-5d4b4faf>tea.</span><span class="variable" data-v-5d4b4faf>split</span><span class="brackets" data-v-5d4b4faf>(</span> <span class="src" data-v-5d4b4faf>&quot;,&quot;</span><span class="brackets" data-v-5d4b4faf>)</span><span class="variable" data-v-5d4b4faf>.map</span><span class="brackets" data-v-5d4b4faf>(</span><span class="function" data-v-5d4b4faf>function </span><span class="brackets" data-v-5d4b4faf>(</span> <span class="word" data-v-5d4b4faf>item</span><span class="brackets" data-v-5d4b4faf>){ </span></div><div class="pTwo" data-v-5d4b4faf><div data-v-5d4b4faf><span class="then" data-v-5d4b4faf>return </span><span class="src" data-v-5d4b4faf>`＜span&gt;贈品</span><span class="then" data-v-5d4b4faf>${</span> <span class="word" data-v-5d4b4faf>item</span><span class="then" data-v-5d4b4faf>}</span> <span class="src" data-v-5d4b4faf>＜/span&gt;`</span></div></div><div data-v-5d4b4faf><span class="brackets" data-v-5d4b4faf>})</span><span class="variable" data-v-5d4b4faf>.join</span><span class="brackets" data-v-5d4b4faf>(</span> <span class="src" data-v-5d4b4faf>&quot;&quot;</span><span class="brackets" data-v-5d4b4faf>)</span></div><div data-v-5d4b4faf><span class="word" data-v-5d4b4faf>console.</span><span class="variable" data-v-5d4b4faf>log</span> <span class="brackets" data-v-5d4b4faf>(</span><span class="word" data-v-5d4b4faf>str</span> <span class="brackets" data-v-5d4b4faf>)</span></div><span class="comment" data-v-5d4b4faf>＜span&gt;贈品50g的飲料＜/span&gt;＜span&gt;贈品100g茶葉＜/span&gt;</span><div data-v-5d4b4faf><span class="word" data-v-5d4b4faf>document.</span><span class="variable" data-v-5d4b4faf>querySelector</span><span class="brackets" data-v-5d4b4faf>(</span> <span class="src" data-v-5d4b4faf>&quot;div&quot;</span><span class="brackets" data-v-5d4b4faf>)</span><span class="variable" data-v-5d4b4faf>.innerHTML</span><span class="then" data-v-5d4b4faf>=</span> <span class="word" data-v-5d4b4faf>str</span></div><br data-v-5d4b4faf><br data-v-5d4b4faf><p data-v-5d4b4faf>轉成箭頭函數</p><br data-v-5d4b4faf><div data-v-5d4b4faf><span class="function" data-v-5d4b4faf>const </span><span class="word" data-v-5d4b4faf>tea</span> <span class="then" data-v-5d4b4faf>=</span><span class="src" data-v-5d4b4faf>&quot;50g的飲料,100g茶葉&quot;</span></div><br data-v-5d4b4faf><div data-v-5d4b4faf><span class="word" data-v-5d4b4faf>tea.</span><span class="variable" data-v-5d4b4faf>split</span><span class="brackets" data-v-5d4b4faf>(</span> <span class="then" data-v-5d4b4faf>&quot;,&quot;</span><span class="brackets" data-v-5d4b4faf>)</span><span class="variable" data-v-5d4b4faf>.map</span><span class="brackets" data-v-5d4b4faf>(</span> <span class="word" data-v-5d4b4faf>item</span><span class="function" data-v-5d4b4faf>=&gt;</span><span class="src" data-v-5d4b4faf>`＜span&gt;贈品</span><span class="then" data-v-5d4b4faf>${</span> <span class="word" data-v-5d4b4faf>item</span><span class="then" data-v-5d4b4faf>}</span><span class="src" data-v-5d4b4faf>＜/span&gt;＜br&gt;`</span><span class="brackets" data-v-5d4b4faf>)</span><span class="variable" data-v-5d4b4faf>.join</span><span class="brackets" data-v-5d4b4faf>(</span> <span class="src" data-v-5d4b4faf>&quot;&quot;</span><span class="brackets" data-v-5d4b4faf>)</span></div><br data-v-5d4b4faf><div data-v-5d4b4faf><span class="word" data-v-5d4b4faf>document.</span><span class="variable" data-v-5d4b4faf>querySelector</span><span class="brackets" data-v-5d4b4faf>(</span> <span class="word" data-v-5d4b4faf>&quot;div&quot;</span><span class="brackets" data-v-5d4b4faf>)</span><span class="variable" data-v-5d4b4faf>.innerHTML</span><span class="then" data-v-5d4b4faf>=</span><span class="word" data-v-5d4b4faf>tea.</span><span class="variable" data-v-5d4b4faf>split</span><span class="brackets" data-v-5d4b4faf>(</span> <span class="then" data-v-5d4b4faf>&quot;,&quot;</span><span class="brackets" data-v-5d4b4faf>)</span><span class="variable" data-v-5d4b4faf>.map</span><span class="brackets" data-v-5d4b4faf>(</span> <span class="word" data-v-5d4b4faf>item</span><span class="function" data-v-5d4b4faf>=&gt;</span><span class="src" data-v-5d4b4faf>`＜span&gt;贈品</span><span class="then" data-v-5d4b4faf>${</span> <span class="word" data-v-5d4b4faf>item</span><span class="then" data-v-5d4b4faf>}</span><span class="src" data-v-5d4b4faf>＜/span&gt;＜br&gt;`</span><span class="brackets" data-v-5d4b4faf>)</span><span class="variable" data-v-5d4b4faf>.join</span><span class="brackets" data-v-5d4b4faf>(</span> <span class="src" data-v-5d4b4faf>&quot;&quot;</span><span class="brackets" data-v-5d4b4faf>)</span></div></div>',88),Mf=Gd(()=>v("div",{class:"toTopButton"},[v("div",{class:"disCen"},"___"),v("div",{class:"disCen"},"▲")],-1)),Ff=[Mf],If=Gd(()=>v("div",{class:"toBotButton"},[v("div",{class:"disCen"},"▼"),v("div",{class:"disCen"},"￣")],-1)),Rf=[If],Hf={__name:"JsPageThreeFour",setup(a){const s=ua(!1);window.addEventListener("scroll",function(){s.value=window.scrollY>0});function d(){window.scrollTo({top:0,left:0,behavior:"smooth"})}function t(){window.scrollTo({top:999999,left:0,behavior:"smooth"})}function c(e){window.scrollTo({top:document.getElementById(`${e}`).offsetTop,behavior:"smooth"})}return(e,n)=>{const l=za("P");return da(),ea(Q,null,[v("section",null,[v("div",Sf,[v("div",qf,[v("div",yf,[v("div",{onClick:n[0]||(n[0]=p=>c("threemethod001")),class:"leftNavText"}," .push() "),v("div",{onClick:n[1]||(n[1]=p=>c("threemethod002")),class:"leftNavText"}," .pop() "),v("div",{onClick:n[2]||(n[2]=p=>c("threemethod003")),class:"leftNavText"}," .shift "),v("div",{onClick:n[3]||(n[3]=p=>c("threemethod004")),class:"leftNavText"}," .unshift "),v("div",{onClick:n[4]||(n[4]=p=>c("threemethod005")),class:"leftNavText"}," .map() "),v("div",{onClick:n[5]||(n[5]=p=>c("threemethod006")),class:"leftNavText"}," .forEach() "),v("div",{onClick:n[6]||(n[6]=p=>c("threemethod007")),class:"leftNavText"}," .join() "),v("div",{onClick:n[7]||(n[7]=p=>c("threemethod008")),class:"leftNavText"}," .reduce() "),v("div",{onClick:n[8]||(n[8]=p=>c("threemethod009")),class:"leftNavText"}," .find() "),v("div",{onClick:n[9]||(n[9]=p=>c("threemethod010")),class:"leftNavText"}," .slice() "),v("div",{onClick:n[10]||(n[10]=p=>c("threemethod011")),class:"leftNavText"}," .splice() "),v("div",{onClick:n[11]||(n[11]=p=>c("threemethod012")),class:"leftNavText"},Lf),v("div",{onClick:n[12]||(n[12]=p=>c("threemethod013")),class:"leftNavText"}," .concat(arr) "),v("div",{onClick:n[13]||(n[13]=p=>c("threemethod014")),class:"leftNavText"}," Array.form() "),v("div",{onClick:n[14]||(n[14]=p=>c("threemethod015")),class:"leftNavText"},"練習")])])]),v("div",jf,[v("div",Pf,[v("div",Nf,[Vf,v("div",$f,[Of,T(l,null,{default:C(()=>[fa("map 特點: 有一個數組返回給我們 , 所以 const newArr")]),_:1}),Ef]),Af])])])]),v("div",null,[X(T(W,{name:"fade",tag:"div"},{default:C(()=>[v("div",{onClick:d,class:"toTop"},Ff)]),_:1},512),[[Y,s.value]]),X(T(W,{name:"fade",tag:"div"},{default:C(()=>[v("div",{onClick:t,class:"toBot"},Rf)]),_:1},512),[[Y,s.value]])])],64)}}},Bf=ia(Hf,[["__scopeId","data-v-5d4b4faf"]]);const _v=a=>(wa("data-v-ecc0ce79"),a=a(),ha(),a),Jf={class:"leftNav"},Df={class:"leftNavContainer"},Wf={class:"leftNavLayout"},Uf={class:"Main"},Kf={class:"mainContainer"},Xf={class:"mainLayout"},Yf=U('<br data-v-ecc0ce79><br data-v-ecc0ce79><p class="fz28" data-v-ecc0ce79>總分總</p><p class="fz28" data-v-ecc0ce79>1.要講哪個知識點</p><p class="fz28" data-v-ecc0ce79>2.細講</p><p class="fz28" data-v-ecc0ce79>3.總結</p><br data-v-ecc0ce79><br data-v-ecc0ce79><div id="threeobject001" class="articleCardTitle cor36 fz34" data-v-ecc0ce79> 5.1 創建物件 </div><div class="bgcVS" data-v-ecc0ce79><p data-v-ecc0ce79>1. 利用對象字面量 創建</p><br data-v-ecc0ce79><div data-v-ecc0ce79><span class="function" data-v-ecc0ce79>const </span><span class="word" data-v-ecc0ce79>obj</span> <span class="then" data-v-ecc0ce79>=</span><span class="brackets" data-v-ecc0ce79>{</span></div><div class="pTwo" data-v-ecc0ce79><span class="word" data-v-ecc0ce79>uname:</span> <span class="src" data-v-ecc0ce79>&quot;wayne&quot;</span></div><div class="brackets" data-v-ecc0ce79>}</div><br data-v-ecc0ce79><br data-v-ecc0ce79><p data-v-ecc0ce79>2. 利用 new Object 創建</p><br data-v-ecc0ce79><div data-v-ecc0ce79><span class="function" data-v-ecc0ce79>const </span><span class="word" data-v-ecc0ce79>obj</span><span class="then" data-v-ecc0ce79>= new </span> <span class="word" data-v-ecc0ce79>Object</span><span class="brackets" data-v-ecc0ce79>()</span></div><div data-v-ecc0ce79><span class="word" data-v-ecc0ce79>obj.name</span> <span class="then" data-v-ecc0ce79>=</span><span class="src" data-v-ecc0ce79>&quot;wayne&quot;</span></div><br data-v-ecc0ce79><div data-v-ecc0ce79><span class="function" data-v-ecc0ce79>const </span><span class="word" data-v-ecc0ce79>obj</span><span class="then" data-v-ecc0ce79>= new </span> <span class="word" data-v-ecc0ce79>Object</span><span class="brackets" data-v-ecc0ce79>( {</span> <span class="word" data-v-ecc0ce79>name:</span><span class="src" data-v-ecc0ce79>&quot;wayne&quot;</span> <span class="brackets" data-v-ecc0ce79>} )</span></div></div><div id="threeobject002" class="articleCardTitle cor36 fz34" data-v-ecc0ce79> 5.2 利用 構造函數 創建 </div><p class="fz28" data-v-ecc0ce79>是一種特殊的 函數 , 用來 初始化 物件</p><br data-v-ecc0ce79><p class="fz28" data-v-ecc0ce79>1. 是什麼? _ 函數</p><p class="fz28" data-v-ecc0ce79>2. 做什麼? _ 創建物件</p><br data-v-ecc0ce79><br data-v-ecc0ce79><p class="fz28" data-v-ecc0ce79>約定 (非強制)</p><p class="fz28" data-v-ecc0ce79>1. 第 1 個字母大寫</p><p class="fz28" data-v-ecc0ce79>2. 只能由 new 操作符</p><div class="bgcVS" data-v-ecc0ce79><p data-v-ecc0ce79>創建 構造函數</p><br data-v-ecc0ce79><div data-v-ecc0ce79><span class="function" data-v-ecc0ce79>function </span><span class="word" data-v-ecc0ce79>Person</span> <span class="brackets" data-v-ecc0ce79>(</span><span class="word" data-v-ecc0ce79>uname,number</span><span class="brackets" data-v-ecc0ce79>){</span></div><div class="pTwo VSL" data-v-ecc0ce79><span class="comment" data-v-ecc0ce79>// this.name=uname</span></div><div class="pTwo VSL" data-v-ecc0ce79><span class="then" data-v-ecc0ce79>this</span><span class="word" data-v-ecc0ce79>.uname</span> <span class="then" data-v-ecc0ce79>=</span><span class="word" data-v-ecc0ce79>uname</span></div><div class="pTwo VSL" data-v-ecc0ce79><span class="comment" data-v-ecc0ce79>//物件的屬性 . . . 形參</span></div><div class="pTwo VSL" data-v-ecc0ce79><span class="then" data-v-ecc0ce79>this</span> <span class="word" data-v-ecc0ce79>.number</span><span class="then" data-v-ecc0ce79>=</span> <span class="word" data-v-ecc0ce79>number</span></div><div class="brackets" data-v-ecc0ce79>}</div><div data-v-ecc0ce79><span class="word" data-v-ecc0ce79>console.</span><span class="variable" data-v-ecc0ce79>log</span> <span class="brackets" data-v-ecc0ce79>(</span><span class="then" data-v-ecc0ce79>new </span> <span class="word" data-v-ecc0ce79>Person</span><span class="brackets" data-v-ecc0ce79>(</span><span class="src" data-v-ecc0ce79>&quot;wayne&quot;,</span> <span class="number" data-v-ecc0ce79>123</span><span class="brackets" data-v-ecc0ce79>))</span></div><br data-v-ecc0ce79><div data-v-ecc0ce79><span class="function" data-v-ecc0ce79>const </span><span class="word" data-v-ecc0ce79>p</span><span class="then" data-v-ecc0ce79>= new </span><span class="word" data-v-ecc0ce79>Person</span> <span class="brackets" data-v-ecc0ce79>(</span><span class="src" data-v-ecc0ce79>&quot;wayne&quot;,</span> <span class="number" data-v-ecc0ce79>6</span><span class="brackets" data-v-ecc0ce79>)</span></div></div><p class="fz28" data-v-ecc0ce79>說明</p><p class="fz28" data-v-ecc0ce79>1. 使用 new 調用函數 的行為 叫 實例化</p><p class="fz28" data-v-ecc0ce79> 2. 實例化 構造函數時 沒有參數 可以省略 ( ) <span class="comment" data-v-ecc0ce79>不建議省略</span></p><p class="fz28" data-v-ecc0ce79> 3. 構造函數內部 無需寫 return, 返回值為新創建的物件 </p><p class="fz28 comment" data-v-ecc0ce79>以前 調用函數 要加 return 才返回給我們</p><p class="fz28" data-v-ecc0ce79> 4. 構造函數內部的 return 返回的值無效 , 不要寫 return </p><p class="fz28" data-v-ecc0ce79>5. new Object() new Date() 也是 實例化構造函數</p><div id="threeobject003" class="articleCardTitle cor36 fz34" data-v-ecc0ce79> 5.3 new做了什麼? </div><p class="fz28" data-v-ecc0ce79> : new後面跟一個構造函數,先創造一個臨時對象,將這個臨時對象原型綁定構造函數的prototype,再把裡面的this指定為這個臨時對象,再執行構造函數,最後return這個臨時對象 </p><br data-v-ecc0ce79><p class="fz28 cor36" data-v-ecc0ce79># 當我 new 構造函數</p><p class="fz28" data-v-ecc0ce79>1. 創建 新物件 (空的)</p><p class="fz28" data-v-ecc0ce79>2. 構造函數的 this 指向 新物件</p><p class="fz28" data-v-ecc0ce79>3. 執行 構造函數 代碼</p><p class="fz28 pFou" data-v-ecc0ce79> this. 指向物件 <span class="comment" data-v-ecc0ce79>. . . obj.name=&quot;wayne&quot;</span></p><p class="fz28 pFou" data-v-ecc0ce79>name屬性 =賦值 &quot;wayne&quot;</p><p class="fz28" data-v-ecc0ce79>4. 返回 這個 新物件</p><div id="threeobject004" class="articleCardTitle cor36 fz34" data-v-ecc0ce79> 5.4 實例成員 &amp; 靜態成員 </div><p class="fz28" data-v-ecc0ce79>通過 構造函數創建的 對象 為 實例對象</p><p class="fz28" data-v-ecc0ce79>實例對象中的屬性方法 為 實例成員</p><br data-v-ecc0ce79><p class="fz28" data-v-ecc0ce79>說明</p><p class="fz28" data-v-ecc0ce79>1. 為構造函數傳入參數, 創建結構相同但值不同的對象</p><p class="fz28" data-v-ecc0ce79>2. 構造函數創建的實例對象彼此獨立互不影響</p><div class="bgcVS" data-v-ecc0ce79><div data-v-ecc0ce79><span class="function" data-v-ecc0ce79>function </span><span class="word" data-v-ecc0ce79>Person</span> <span class="brackets" data-v-ecc0ce79>(</span><span class="word" data-v-ecc0ce79>uname,number</span><span class="brackets" data-v-ecc0ce79>){</span></div><div class="pTwo VSL" data-v-ecc0ce79><span class="then" data-v-ecc0ce79>this</span><span class="word" data-v-ecc0ce79>.uname</span> <span class="then" data-v-ecc0ce79>=</span><span class="word" data-v-ecc0ce79>uname</span></div><div class="pTwo VSL" data-v-ecc0ce79><span class="then" data-v-ecc0ce79>this</span> <span class="word" data-v-ecc0ce79>.number</span><span class="then" data-v-ecc0ce79>=</span> <span class="word" data-v-ecc0ce79>number</span></div><div class="brackets" data-v-ecc0ce79>}</div><br data-v-ecc0ce79><div data-v-ecc0ce79><span class="function" data-v-ecc0ce79>const </span><span class="word" data-v-ecc0ce79>p</span><span class="then" data-v-ecc0ce79>= new </span><span class="word" data-v-ecc0ce79>Person</span> <span class="brackets" data-v-ecc0ce79>(</span><span class="src" data-v-ecc0ce79>&quot;wayne&quot;,</span> <span class="number" data-v-ecc0ce79>6</span><span class="brackets" data-v-ecc0ce79>)</span></div><div data-v-ecc0ce79><span class="function" data-v-ecc0ce79>const </span><span class="word" data-v-ecc0ce79>n</span><span class="then" data-v-ecc0ce79>= new </span><span class="word" data-v-ecc0ce79>Person</span> <span class="brackets" data-v-ecc0ce79>(</span><span class="src" data-v-ecc0ce79>&quot;neo&quot;,</span> <span class="number" data-v-ecc0ce79>3</span><span class="brackets" data-v-ecc0ce79>)</span></div><div data-v-ecc0ce79><span class="word" data-v-ecc0ce79>console.</span><span class="variable" data-v-ecc0ce79>log</span> <span class="brackets" data-v-ecc0ce79>(</span><span class="word" data-v-ecc0ce79>p</span><span class="then" data-v-ecc0ce79>=== </span> <span class="word" data-v-ecc0ce79>n</span><span class="brackets" data-v-ecc0ce79>) </span><span class="comment" data-v-ecc0ce79>// false</span></div><br data-v-ecc0ce79><p data-v-ecc0ce79>new p 時, 內存開闢了新空間 存放 p 這個新物件</p><p data-v-ecc0ce79>new n 時, 內存開闢了新空間 存放 n 這個新物件</p><p data-v-ecc0ce79>所以 2 個物件 在不同位置</p><br data-v-ecc0ce79><div data-v-ecc0ce79><span class="word" data-v-ecc0ce79>p.name</span> <span class="then" data-v-ecc0ce79>=</span><span class="src" data-v-ecc0ce79>&quot;jack&quot;</span><span class="comment" data-v-ecc0ce79> // 實例屬性</span></div><br data-v-ecc0ce79><p data-v-ecc0ce79>不影響 n 的 name</p><br data-v-ecc0ce79><div data-v-ecc0ce79><span class="word" data-v-ecc0ce79>p.sayHi</span> <span class="then" data-v-ecc0ce79>=</span><span class="brackets" data-v-ecc0ce79>()</span> <span class="function" data-v-ecc0ce79>=&gt;</span><span class="brackets" data-v-ecc0ce79>{ </span><span class="comment" data-v-ecc0ce79> // 實例方法</span></div><div class="pTwo" data-v-ecc0ce79><span class="word" data-v-ecc0ce79>console.</span><span class="variable" data-v-ecc0ce79>log</span> <span class="brackets" data-v-ecc0ce79>(</span><span class="src" data-v-ecc0ce79>&quot;hi&quot;</span> <span class="brackets" data-v-ecc0ce79>)</span></div><div class="brackets" data-v-ecc0ce79>}</div><br data-v-ecc0ce79><p class="fz28" data-v-ecc0ce79>p 增加 sayHi 方法 不影響 n</p></div><p class="fz28" data-v-ecc0ce79>靜態成員</p><p class="fz28" data-v-ecc0ce79>構造函數的屬性和方法 是 靜態成員</p><p class="fz28" data-v-ecc0ce79>靜態 屬性 &amp; 靜態 方法</p><br data-v-ecc0ce79><p class="fz28" data-v-ecc0ce79>說明</p><p class="fz28" data-v-ecc0ce79>1. 靜態成員 只能 構造函數來訪問</p><p class="fz28" data-v-ecc0ce79>2. 靜態方法 中的 this 指向 構造函數</p><div class="bgcVS" data-v-ecc0ce79><div data-v-ecc0ce79><span class="function" data-v-ecc0ce79>function </span><span class="word" data-v-ecc0ce79>Person</span> <span class="brackets" data-v-ecc0ce79>(</span><span class="word" data-v-ecc0ce79>uname,number</span><span class="brackets" data-v-ecc0ce79>){</span></div><div class="pTwo VSL" data-v-ecc0ce79><span class="then" data-v-ecc0ce79>this</span><span class="word" data-v-ecc0ce79>.uname</span> <span class="then" data-v-ecc0ce79>=</span><span class="word" data-v-ecc0ce79>uname</span></div><div class="pTwo VSL" data-v-ecc0ce79><span class="then" data-v-ecc0ce79>this</span> <span class="word" data-v-ecc0ce79>.number</span><span class="then" data-v-ecc0ce79>=</span> <span class="word" data-v-ecc0ce79>number</span></div><div class="brackets" data-v-ecc0ce79>}</div><br data-v-ecc0ce79><div data-v-ecc0ce79><span class="word" data-v-ecc0ce79>Person.eyes</span> <span class="then" data-v-ecc0ce79>=</span><span class="number" data-v-ecc0ce79>2 </span><span class="comment" data-v-ecc0ce79>// 靜態屬性</span></div><div data-v-ecc0ce79><span class="word" data-v-ecc0ce79>console.</span><span class="variable" data-v-ecc0ce79>log</span> <span class="brackets" data-v-ecc0ce79>(</span><span class="word" data-v-ecc0ce79>Person.eyes</span><span class="brackets" data-v-ecc0ce79>) </span> <span class="comment" data-v-ecc0ce79>// 2</span></div><br data-v-ecc0ce79><p class="fz28" data-v-ecc0ce79>Math.Pi 就是 Math 這個構造函數 加了 Pi 屬性</p><br data-v-ecc0ce79><div data-v-ecc0ce79><span class="word" data-v-ecc0ce79>Person.sayHi</span><span class="then" data-v-ecc0ce79>=</span><span class="function" data-v-ecc0ce79>function </span><span class="brackets" data-v-ecc0ce79>(){ </span><span class="comment" data-v-ecc0ce79>// 這邊不要用箭頭函數,因為沒this</span></div><div class="pTwo" data-v-ecc0ce79><span class="word" data-v-ecc0ce79>console.</span><span class="variable" data-v-ecc0ce79>log</span> <span class="brackets" data-v-ecc0ce79>(</span><span class="then" data-v-ecc0ce79>this</span> <span class="brackets" data-v-ecc0ce79>) </span><span class="comment" data-v-ecc0ce79>// Person // 指向構造函數</span></div><div class="brackets" data-v-ecc0ce79>}</div><div data-v-ecc0ce79><span class="word" data-v-ecc0ce79>Person.sayHi</span><span class="brackets" data-v-ecc0ce79>()</span></div></div><div id="threeobject005" class="articleCardTitle cor36 fz34" data-v-ecc0ce79> 5.5 內置構造函數 </div><p class="fz28 cor36" data-v-ecc0ce79> # 基本數據類型不是物件 為什麼 基本類型可以用方法? </p><p class="fz28 cor36" data-v-ecc0ce79># 為什麼字串可以使用.length?為什麼有方法?</p><p class="fz28" data-v-ecc0ce79> 在JS底層把基本數據類型包裝成了引用數據類型, 轉成物件, 物件有屬性和方法, 就可以使用方法了 </p><div class="bgcVS" data-v-ecc0ce79><div data-v-ecc0ce79><span class="function" data-v-ecc0ce79>const </span><span class="word" data-v-ecc0ce79>str</span> <span class="then" data-v-ecc0ce79>=</span><span class="word" data-v-ecc0ce79>&quot;wayne&quot;</span></div><div data-v-ecc0ce79><span class="word" data-v-ecc0ce79>console.</span><span class="variable" data-v-ecc0ce79>log</span> <span class="brackets" data-v-ecc0ce79>(</span><span class="word" data-v-ecc0ce79>str.length</span><span class="brackets" data-v-ecc0ce79>)</span></div><br data-v-ecc0ce79><div class="comment" data-v-ecc0ce79>// JS底層做包裝</div><div data-v-ecc0ce79><span class="function" data-v-ecc0ce79>const </span><span class="word" data-v-ecc0ce79>str</span> <span class="then" data-v-ecc0ce79>= new </span><span class="word" data-v-ecc0ce79>String</span> <span class="brackets" data-v-ecc0ce79>(</span><span class="src" data-v-ecc0ce79>&quot;wayne&quot;</span> <span class="brackets" data-v-ecc0ce79>)</span></div><div class="comment" data-v-ecc0ce79> // JS底層把簡單數據類型包裝成了引用數據類型 </div></div><p class="fz28 cor36" data-v-ecc0ce79>Object</p><p class="fz28" data-v-ecc0ce79> Object 是內置的 構造函數, 用於創建普通物件 (new Object) </p><br data-v-ecc0ce79><p class="fz28" data-v-ecc0ce79>3 個常用靜態方法</p><p class="fz28" data-v-ecc0ce79>( 靜態方法只有構造函數 Object 可以調用 )</p><br data-v-ecc0ce79><p class="fz28" data-v-ecc0ce79>Object.values 靜態方法獲取物件中所有屬性值</p><p class="fz28" data-v-ecc0ce79>注意: 返回的是一個數組</p><br data-v-ecc0ce79><div class="bgcVS" data-v-ecc0ce79><p data-v-ecc0ce79>想要獲得物件裡面的屬性和值?</p><br data-v-ecc0ce79><p data-v-ecc0ce79>之前</p><br data-v-ecc0ce79><div data-v-ecc0ce79><span class="function" data-v-ecc0ce79>const </span> <span class="word" data-v-ecc0ce79>o</span><span class="then" data-v-ecc0ce79>=</span> <span class="brackets" data-v-ecc0ce79>{</span><span class="word" data-v-ecc0ce79>name:&quot;wayne&quot;,number:</span><span class="number" data-v-ecc0ce79>123</span> <span class="brackets" data-v-ecc0ce79>}</span></div><div data-v-ecc0ce79><span class="then" data-v-ecc0ce79>for </span> <span class="brackets" data-v-ecc0ce79>(</span><span class="function" data-v-ecc0ce79>let </span> <span class="word" data-v-ecc0ce79>k </span><span class="function" data-v-ecc0ce79>in </span> <span class="word" data-v-ecc0ce79>o</span><span class="brackets" data-v-ecc0ce79>){</span></div><div data-v-ecc0ce79><span class="word" data-v-ecc0ce79>console.</span><span class="variable" data-v-ecc0ce79>log</span> <span class="brackets" data-v-ecc0ce79>(</span><span class="word" data-v-ecc0ce79>k</span> <span class="brackets" data-v-ecc0ce79>) </span><span class="comment" data-v-ecc0ce79>// 屬性 name number</span></div><div data-v-ecc0ce79><span class="word" data-v-ecc0ce79>console.</span><span class="variable" data-v-ecc0ce79>log</span> <span class="brackets" data-v-ecc0ce79>(</span><span class="word" data-v-ecc0ce79>o</span> <span class="brackets" data-v-ecc0ce79>[</span><span class="word" data-v-ecc0ce79>k</span> <span class="brackets" data-v-ecc0ce79>]</span><span class="brackets" data-v-ecc0ce79>) </span><span class="comment" data-v-ecc0ce79>// 值 wayne 123</span></div><div class="brackets" data-v-ecc0ce79>}</div><br data-v-ecc0ce79><br data-v-ecc0ce79><div data-v-ecc0ce79><span class="function" data-v-ecc0ce79>const </span> <span class="word" data-v-ecc0ce79>o</span><span class="then" data-v-ecc0ce79>=</span> <span class="brackets" data-v-ecc0ce79>{</span><span class="word" data-v-ecc0ce79>name:&quot;wayne&quot;,number:</span><span class="number" data-v-ecc0ce79>123</span> <span class="brackets" data-v-ecc0ce79>}</span></div><div data-v-ecc0ce79><span class="function" data-v-ecc0ce79>const </span><span class="word" data-v-ecc0ce79>arr</span> <span class="then" data-v-ecc0ce79>=</span><span class="word" data-v-ecc0ce79>Object.keys</span><span class="brackets" data-v-ecc0ce79>(</span> <span class="word" data-v-ecc0ce79>o</span><span class="brackets" data-v-ecc0ce79>)</span></div><div class="comment" data-v-ecc0ce79>// 獲得所有 屬性名</div><div data-v-ecc0ce79><span class="function" data-v-ecc0ce79>const </span><span class="word" data-v-ecc0ce79>arr</span> <span class="then" data-v-ecc0ce79>=</span><span class="word" data-v-ecc0ce79>Object.keys</span><span class="brackets" data-v-ecc0ce79>(</span> <span class="word" data-v-ecc0ce79>o</span><span class="brackets" data-v-ecc0ce79>)</span></div><div class="comment" data-v-ecc0ce79>// 獲得所有 屬性值</div><div data-v-ecc0ce79><span class="word" data-v-ecc0ce79>console.</span><span class="variable" data-v-ecc0ce79>log</span> <span class="brackets" data-v-ecc0ce79>(</span><span class="word" data-v-ecc0ce79>Object.value</span><span class="brackets" data-v-ecc0ce79>(</span> <span class="word" data-v-ecc0ce79>o</span><span class="brackets" data-v-ecc0ce79>)) </span><span class="comment" data-v-ecc0ce79>//[&quot;wayne&quot;,123]</span></div></div><p class="fz28" data-v-ecc0ce79>Object.assign 靜態方法用於物件拷貝</p><div class="bgcVS" data-v-ecc0ce79><div data-v-ecc0ce79><span class="function" data-v-ecc0ce79>const </span> <span class="word" data-v-ecc0ce79>o</span><span class="then" data-v-ecc0ce79>=</span> <span class="brackets" data-v-ecc0ce79>{</span><span class="word" data-v-ecc0ce79>name:&quot;wayne&quot;,number:</span><span class="number" data-v-ecc0ce79>123</span> <span class="brackets" data-v-ecc0ce79>}</span></div><div data-v-ecc0ce79><span class="function" data-v-ecc0ce79>const </span><span class="word" data-v-ecc0ce79>obj</span> <span class="then" data-v-ecc0ce79>=</span><span class="brackets" data-v-ecc0ce79>{}</span></div><div data-v-ecc0ce79><span class="word" data-v-ecc0ce79>Object.assign</span><span class="brackets" data-v-ecc0ce79>(</span> <span class="word" data-v-ecc0ce79>obj,o</span><span class="brackets" data-v-ecc0ce79>) </span><span class="comment" data-v-ecc0ce79>// (要拷貝的,被拷貝的)</span><span class="comment" data-v-ecc0ce79>// (右 賦值 給 左)</span></div><div data-v-ecc0ce79><span class="word" data-v-ecc0ce79>console.</span><span class="variable" data-v-ecc0ce79>log</span> <span class="brackets" data-v-ecc0ce79>(</span><span class="word" data-v-ecc0ce79>obj</span><span class="brackets" data-v-ecc0ce79>)</span></div><br data-v-ecc0ce79><p data-v-ecc0ce79>可用來新增屬性</p><br data-v-ecc0ce79><div data-v-ecc0ce79><span class="word" data-v-ecc0ce79>Object.assign</span><span class="brackets" data-v-ecc0ce79>(</span> <span class="word" data-v-ecc0ce79>o,</span><span class="brackets" data-v-ecc0ce79>{</span><span class="word" data-v-ecc0ce79>gender:&quot;男&quot;</span><span class="brackets" data-v-ecc0ce79>})</span></div><div data-v-ecc0ce79><span class="word" data-v-ecc0ce79>console.</span><span class="variable" data-v-ecc0ce79>log</span> <span class="brackets" data-v-ecc0ce79>(</span><span class="word" data-v-ecc0ce79>o</span><span class="brackets" data-v-ecc0ce79>)</span></div><br data-v-ecc0ce79><p data-v-ecc0ce79>把一個物件 拷貝到裡面去</p></div>',71),Gf=U('<div id="" class="articleCardTitle cor36 fz34" data-v-ecc0ce79>String 方法</div><p class="fz28" data-v-ecc0ce79>1. 實例屬性 length 獲取字串長度</p><br data-v-ecc0ce79><p class="fz28" data-v-ecc0ce79>2. 實例方法 split(&quot;分隔符&quot;) 用來將字串拆分成數組</p><div class="bgcVS" data-v-ecc0ce79><div data-v-ecc0ce79><span class="function" data-v-ecc0ce79>const </span><span class="word" data-v-ecc0ce79>str</span> <span class="then" data-v-ecc0ce79>=</span><span class="src" data-v-ecc0ce79>&quot;wayne,jack&quot;</span></div><div data-v-ecc0ce79><span class="function" data-v-ecc0ce79>const </span><span class="word" data-v-ecc0ce79>arr</span> <span class="then" data-v-ecc0ce79>=</span><span class="word" data-v-ecc0ce79>str.</span><span class="variable" data-v-ecc0ce79>split</span><span class="brackets" data-v-ecc0ce79>(</span> <span class="then" data-v-ecc0ce79>&quot;,&quot;</span><span class="brackets" data-v-ecc0ce79>)</span></div><div data-v-ecc0ce79><span class="word" data-v-ecc0ce79>console.</span><span class="variable" data-v-ecc0ce79>log</span> <span class="brackets" data-v-ecc0ce79>(</span><span class="word" data-v-ecc0ce79>arr</span> <span class="brackets" data-v-ecc0ce79>)</span><span class="comment" data-v-ecc0ce79>//[&quot;wayne&quot;,&quot;jack&quot;]</span></div><div data-v-ecc0ce79><span class="function" data-v-ecc0ce79>const </span><span class="word" data-v-ecc0ce79>str1</span> <span class="then" data-v-ecc0ce79>=</span><span class="src" data-v-ecc0ce79>&quot;2077-1-1&quot;</span></div><div data-v-ecc0ce79><span class="function" data-v-ecc0ce79>const </span><span class="word" data-v-ecc0ce79>arr1</span> <span class="then" data-v-ecc0ce79>=</span><span class="word" data-v-ecc0ce79>str1.</span><span class="variable" data-v-ecc0ce79>split</span><span class="brackets" data-v-ecc0ce79>(</span> <span class="src" data-v-ecc0ce79>&quot;-&quot;</span><span class="brackets" data-v-ecc0ce79>)</span></div><div data-v-ecc0ce79><span class="word" data-v-ecc0ce79>console.</span><span class="variable" data-v-ecc0ce79>log</span> <span class="brackets" data-v-ecc0ce79>(</span><span class="word" data-v-ecc0ce79>arr</span> <span class="brackets" data-v-ecc0ce79>)</span><span class="comment" data-v-ecc0ce79>//[&quot;2077&quot;,&quot;1&quot;,&quot;1&quot;]</span></div></div><p class="fz28" data-v-ecc0ce79> 3. 實例方法 substring (需要擷取的第一個字符的索引[,結束的索引號]) 用於字串擷取 </p><br data-v-ecc0ce79><p class="fz28" data-v-ecc0ce79>3.1 省略 結束索引號 默認取到最後</p><p class="fz28" data-v-ecc0ce79>3.2 結束索引號 不包含 想要擷取的部分</p><div class="bgcVS" data-v-ecc0ce79><div data-v-ecc0ce79><span class="comment" data-v-ecc0ce79>1.裡面幾個參數 2. 返回值返回什麼 3. 使用方法</span></div><br data-v-ecc0ce79><div data-v-ecc0ce79><span class="word" data-v-ecc0ce79>str.</span><span class="variable" data-v-ecc0ce79>substring</span><span class="brackets" data-v-ecc0ce79>(</span><span class="word" data-v-ecc0ce79>要截的第一個字所引</span><span class="brackets" data-v-ecc0ce79>)</span></div><div data-v-ecc0ce79><span class="cor36" data-v-ecc0ce79>返回</span><span class="word" data-v-ecc0ce79>擷取的那部分的新字串</span></div><br data-v-ecc0ce79><div data-v-ecc0ce79><span class="function" data-v-ecc0ce79>const </span><span class="word" data-v-ecc0ce79>str</span> <span class="then" data-v-ecc0ce79>=</span><span class="src" data-v-ecc0ce79>&quot;waynetestneo&quot;</span></div><div data-v-ecc0ce79><span class="word" data-v-ecc0ce79>console.</span><span class="variable" data-v-ecc0ce79>log</span> <span class="brackets" data-v-ecc0ce79>(</span><span class="word" data-v-ecc0ce79>str.</span><span class="variable" data-v-ecc0ce79>substring</span><span class="brackets" data-v-ecc0ce79>(</span> <span class="number" data-v-ecc0ce79>9</span><span class="brackets" data-v-ecc0ce79>)) </span><span class="comment" data-v-ecc0ce79>// neo</span></div><div data-v-ecc0ce79><span class="word" data-v-ecc0ce79>console.</span><span class="variable" data-v-ecc0ce79>log</span> <span class="brackets" data-v-ecc0ce79>(</span><span class="word" data-v-ecc0ce79>str.</span><span class="variable" data-v-ecc0ce79>substring</span><span class="brackets" data-v-ecc0ce79>(</span> <span class="number" data-v-ecc0ce79>5 , 9</span><span class="brackets" data-v-ecc0ce79>)) </span><span class="comment" data-v-ecc0ce79>// test</span></div></div><p class="fz28" data-v-ecc0ce79> 4. 實例方法 startWith (檢測字串[,檢測位置索引號]) 判斷是否以某字符開頭 </p><p class="fz28" data-v-ecc0ce79>返回 true or false</p><div class="bgcVS" data-v-ecc0ce79><div data-v-ecc0ce79><span class="comment" data-v-ecc0ce79>1.裡面幾個參數 2. 返回值返回什麼 3. 使用方法</span></div><br data-v-ecc0ce79><div data-v-ecc0ce79><span class="word" data-v-ecc0ce79>str.</span><span class="variable" data-v-ecc0ce79>starstWith</span><span class="brackets" data-v-ecc0ce79>(</span><span class="word" data-v-ecc0ce79>要搜索的字串</span><span class="brackets" data-v-ecc0ce79>)</span></div><br data-v-ecc0ce79><div data-v-ecc0ce79><span class="word" data-v-ecc0ce79>一定要開頭 </span><span class="comment" data-v-ecc0ce79>＜=&gt; includes 就不用</span></div><p class="fz28" data-v-ecc0ce79>返回 true or false</p><br data-v-ecc0ce79><div data-v-ecc0ce79><span class="function" data-v-ecc0ce79>const </span><span class="word" data-v-ecc0ce79>str</span> <span class="then" data-v-ecc0ce79>=</span><span class="src" data-v-ecc0ce79>&quot;wayne學JS中&quot;</span></div><div data-v-ecc0ce79><span class="word" data-v-ecc0ce79>console.</span><span class="variable" data-v-ecc0ce79>log</span> <span class="brackets" data-v-ecc0ce79>(</span><span class="word" data-v-ecc0ce79>str.</span><span class="variable" data-v-ecc0ce79>startsWith</span><span class="brackets" data-v-ecc0ce79>(</span> <span class="word" data-v-ecc0ce79></span><span class="src" data-v-ecc0ce79>&quot;yne&quot;</span> <span class="brackets" data-v-ecc0ce79>))</span><span class="comment" data-v-ecc0ce79>//true</span></div></div><p class="fz28" data-v-ecc0ce79> 5. 實例方法 includes (搜索的字串[,檢測位置索引號]) 判斷一個字串是否包含在另一個字串中 </p><p class="fz28" data-v-ecc0ce79>返回 true or false</p><div class="bgcVS" data-v-ecc0ce79><div data-v-ecc0ce79><span class="comment" data-v-ecc0ce79>1.裡面幾個參數 2. 返回值返回什麼 3. 使用方法</span></div><br data-v-ecc0ce79><div data-v-ecc0ce79><span class="word" data-v-ecc0ce79>str.</span><span class="variable" data-v-ecc0ce79>includes</span><span class="brackets" data-v-ecc0ce79>(</span><span class="word" data-v-ecc0ce79>要搜索的字串</span><span class="brackets" data-v-ecc0ce79>)</span></div><br data-v-ecc0ce79><div data-v-ecc0ce79><span class="word" data-v-ecc0ce79>裡面有就 true </span><span class="comment" data-v-ecc0ce79>＜=&gt; starstWith 一定要開頭</span></div><p class="fz28" data-v-ecc0ce79>返回 true or false</p><p class="fz28" data-v-ecc0ce79>有區分大小寫 false</p><br data-v-ecc0ce79><div data-v-ecc0ce79><span class="function" data-v-ecc0ce79>const </span><span class="word" data-v-ecc0ce79>str</span> <span class="then" data-v-ecc0ce79>=</span><span class="src" data-v-ecc0ce79>&quot;我是wayne&quot;</span></div><div data-v-ecc0ce79><span class="word" data-v-ecc0ce79>console.</span><span class="variable" data-v-ecc0ce79>log</span> <span class="brackets" data-v-ecc0ce79>(</span><span class="word" data-v-ecc0ce79>str.</span><span class="variable" data-v-ecc0ce79>includes</span><span class="brackets" data-v-ecc0ce79>(</span> <span class="src" data-v-ecc0ce79>&quot;wayne&quot;</span><span class="brackets" data-v-ecc0ce79>) )</span><span class="comment" data-v-ecc0ce79>//true</span></div><div data-v-ecc0ce79><span class="word" data-v-ecc0ce79>console.</span><span class="variable" data-v-ecc0ce79>log</span> <span class="brackets" data-v-ecc0ce79>(</span><span class="word" data-v-ecc0ce79>str.</span><span class="variable" data-v-ecc0ce79>includes</span><span class="brackets" data-v-ecc0ce79>(</span> <span class="src" data-v-ecc0ce79>&quot;wayne&quot; </span><span class="number" data-v-ecc0ce79>, 3 </span><span class="brackets" data-v-ecc0ce79>) )</span><span class="comment" data-v-ecc0ce79>//false</span></div></div><p class="fz28" data-v-ecc0ce79>6. 實例方法 toUpperCase 用於將字母轉成大寫</p><br data-v-ecc0ce79><p class="fz28" data-v-ecc0ce79>7. 實例方法 toLowerCase 用於將字母轉成小寫</p><br data-v-ecc0ce79><p class="fz28" data-v-ecc0ce79>8. 實例方法 indexOf 檢測是否包含某字符</p><br data-v-ecc0ce79><p class="fz28" data-v-ecc0ce79>9. 實例方法 endsWith 檢測是否以某字符結尾</p><br data-v-ecc0ce79><p class="fz28" data-v-ecc0ce79>10. 實例方法 replace 用於替換字串, 支持正則匹配</p><br data-v-ecc0ce79><p class="fz28" data-v-ecc0ce79>11. 實例方法 match 用於查找字串, 支持正則匹配</p><br data-v-ecc0ce79><div class="bgcVS" data-v-ecc0ce79><div data-v-ecc0ce79><span class="function" data-v-ecc0ce79>const </span><span class="word" data-v-ecc0ce79>tea</span> <span class="then" data-v-ecc0ce79>=</span><span class="src" data-v-ecc0ce79>&quot;50g的飲料,100g茶葉&quot;</span></div><span class="comment" data-v-ecc0ce79>// 1.把字串轉成數組</span><div data-v-ecc0ce79><span class="word" data-v-ecc0ce79>console.</span><span class="variable" data-v-ecc0ce79>log</span> <span class="brackets" data-v-ecc0ce79>(</span><span class="word" data-v-ecc0ce79>tea.</span><span class="variable" data-v-ecc0ce79>split</span><span class="brackets" data-v-ecc0ce79>(</span> <span class="src" data-v-ecc0ce79>&quot;,&quot;</span><span class="brackets" data-v-ecc0ce79>)) </span><span class="comment" data-v-ecc0ce79>// [ &quot;50g的飲料&quot;, &quot;100g茶葉&quot; ]</span></div><span class="comment" data-v-ecc0ce79>// 2. 有幾條數據 我就生成幾個 ＜span&gt;</span><div data-v-ecc0ce79><span class="word" data-v-ecc0ce79>tea.</span><span class="variable" data-v-ecc0ce79>split</span><span class="brackets" data-v-ecc0ce79>(</span> <span class="src" data-v-ecc0ce79>&quot;,&quot;</span><span class="brackets" data-v-ecc0ce79>)</span><span class="variable" data-v-ecc0ce79>.map</span><span class="brackets" data-v-ecc0ce79>(</span><span class="function" data-v-ecc0ce79>function </span><span class="brackets" data-v-ecc0ce79>(</span> <span class="word" data-v-ecc0ce79>item</span><span class="brackets" data-v-ecc0ce79>){ </span><span class="comment" data-v-ecc0ce79>//item是裡面的每一個值</span></div><div class="pTwo" data-v-ecc0ce79><div class="dis" data-v-ecc0ce79><div data-v-ecc0ce79><span class="then" data-v-ecc0ce79>return </span><span class="src" data-v-ecc0ce79>`＜span&gt;贈品</span><span class="then" data-v-ecc0ce79>${</span> <span class="word" data-v-ecc0ce79>item</span><span class="then" data-v-ecc0ce79>}</span> <span class="src" data-v-ecc0ce79>＜/span&gt;`</span></div><div class="comment" data-v-ecc0ce79><span data-v-ecc0ce79>//贈品50g的飲料</span><br data-v-ecc0ce79><span data-v-ecc0ce79>//贈品100g茶葉</span></div></div></div><span class="brackets" data-v-ecc0ce79>})</span><div data-v-ecc0ce79><span class="function" data-v-ecc0ce79>const </span><span class="word" data-v-ecc0ce79>str</span> <span class="then" data-v-ecc0ce79>=</span><span class="word" data-v-ecc0ce79>tea.</span><span class="variable" data-v-ecc0ce79>split</span><span class="brackets" data-v-ecc0ce79>(</span> <span class="src" data-v-ecc0ce79>&quot;,&quot;</span><span class="brackets" data-v-ecc0ce79>)</span><span class="variable" data-v-ecc0ce79>.map</span><span class="brackets" data-v-ecc0ce79>(</span><span class="function" data-v-ecc0ce79>function </span><span class="brackets" data-v-ecc0ce79>(</span> <span class="word" data-v-ecc0ce79>item</span><span class="brackets" data-v-ecc0ce79>){ </span></div><div class="pTwo" data-v-ecc0ce79><div data-v-ecc0ce79><span class="then" data-v-ecc0ce79>return </span><span class="src" data-v-ecc0ce79>`＜span&gt;贈品</span><span class="then" data-v-ecc0ce79>${</span> <span class="word" data-v-ecc0ce79>item</span><span class="then" data-v-ecc0ce79>}</span> <span class="src" data-v-ecc0ce79>＜/span&gt;`</span></div></div><span class="brackets" data-v-ecc0ce79>})</span><div data-v-ecc0ce79><span class="word" data-v-ecc0ce79>console.</span><span class="variable" data-v-ecc0ce79>log</span> <span class="brackets" data-v-ecc0ce79>(</span><span class="word" data-v-ecc0ce79>arr</span> <span class="brackets" data-v-ecc0ce79>) </span><span class="comment" data-v-ecc0ce79>[&quot;＜span&gt;贈品50g的飲料＜/span&gt;&quot;,&quot;＜span&gt;贈品100g茶葉＜/span&gt;&quot;]</span></div><br data-v-ecc0ce79><div class="comment" data-v-ecc0ce79>數組不能直接往盒子加</div><div class="comment" data-v-ecc0ce79>想要改成字串</div><div data-v-ecc0ce79><span class="function" data-v-ecc0ce79>const </span><span class="word" data-v-ecc0ce79>str</span> <span class="then" data-v-ecc0ce79>=</span><span class="word" data-v-ecc0ce79>tea.</span><span class="variable" data-v-ecc0ce79>split</span><span class="brackets" data-v-ecc0ce79>(</span> <span class="src" data-v-ecc0ce79>&quot;,&quot;</span><span class="brackets" data-v-ecc0ce79>)</span><span class="variable" data-v-ecc0ce79>.map</span><span class="brackets" data-v-ecc0ce79>(</span><span class="function" data-v-ecc0ce79>function </span><span class="brackets" data-v-ecc0ce79>(</span> <span class="word" data-v-ecc0ce79>item</span><span class="brackets" data-v-ecc0ce79>){ </span></div><div class="pTwo" data-v-ecc0ce79><div data-v-ecc0ce79><span class="then" data-v-ecc0ce79>return </span><span class="src" data-v-ecc0ce79>`＜span&gt;贈品</span><span class="then" data-v-ecc0ce79>${</span> <span class="word" data-v-ecc0ce79>item</span><span class="then" data-v-ecc0ce79>}</span> <span class="src" data-v-ecc0ce79>＜/span&gt;`</span></div></div><div data-v-ecc0ce79><span class="brackets" data-v-ecc0ce79>})</span><span class="variable" data-v-ecc0ce79>.join</span><span class="brackets" data-v-ecc0ce79>(</span> <span class="src" data-v-ecc0ce79>&quot;&quot;</span><span class="brackets" data-v-ecc0ce79>)</span></div><div data-v-ecc0ce79><span class="word" data-v-ecc0ce79>console.</span><span class="variable" data-v-ecc0ce79>log</span> <span class="brackets" data-v-ecc0ce79>(</span><span class="word" data-v-ecc0ce79>str</span> <span class="brackets" data-v-ecc0ce79>)</span></div><span class="comment" data-v-ecc0ce79>＜span&gt;贈品50g的飲料＜/span&gt;＜span&gt;贈品100g茶葉＜/span&gt;</span><div data-v-ecc0ce79><span class="word" data-v-ecc0ce79>document.</span><span class="variable" data-v-ecc0ce79>querySelector</span><span class="brackets" data-v-ecc0ce79>(</span> <span class="src" data-v-ecc0ce79>&quot;div&quot;</span><span class="brackets" data-v-ecc0ce79>)</span><span class="variable" data-v-ecc0ce79>.innerHTML</span><span class="then" data-v-ecc0ce79>=</span> <span class="word" data-v-ecc0ce79>str</span></div><br data-v-ecc0ce79><br data-v-ecc0ce79><p data-v-ecc0ce79>轉成箭頭函數</p><br data-v-ecc0ce79><div data-v-ecc0ce79><span class="function" data-v-ecc0ce79>const </span><span class="word" data-v-ecc0ce79>tea</span> <span class="then" data-v-ecc0ce79>=</span><span class="src" data-v-ecc0ce79>&quot;50g的飲料,100g茶葉&quot;</span></div><br data-v-ecc0ce79><div data-v-ecc0ce79><span class="word" data-v-ecc0ce79>tea.</span><span class="variable" data-v-ecc0ce79>split</span><span class="brackets" data-v-ecc0ce79>(</span> <span class="then" data-v-ecc0ce79>&quot;,&quot;</span><span class="brackets" data-v-ecc0ce79>)</span><span class="variable" data-v-ecc0ce79>.map</span><span class="brackets" data-v-ecc0ce79>(</span> <span class="word" data-v-ecc0ce79>item</span><span class="function" data-v-ecc0ce79>=&gt;</span><span class="src" data-v-ecc0ce79>`＜span&gt;贈品</span><span class="then" data-v-ecc0ce79>${</span> <span class="word" data-v-ecc0ce79>item</span><span class="then" data-v-ecc0ce79>}</span><span class="src" data-v-ecc0ce79>＜/span&gt;＜br&gt;`</span><span class="brackets" data-v-ecc0ce79>)</span><span class="variable" data-v-ecc0ce79>.join</span><span class="brackets" data-v-ecc0ce79>(</span> <span class="src" data-v-ecc0ce79>&quot;&quot;</span><span class="brackets" data-v-ecc0ce79>)</span></div><br data-v-ecc0ce79><div data-v-ecc0ce79><span class="word" data-v-ecc0ce79>document.</span><span class="variable" data-v-ecc0ce79>querySelector</span><span class="brackets" data-v-ecc0ce79>(</span> <span class="word" data-v-ecc0ce79>&quot;div&quot;</span><span class="brackets" data-v-ecc0ce79>)</span><span class="variable" data-v-ecc0ce79>.innerHTML</span><span class="then" data-v-ecc0ce79>=</span><span class="word" data-v-ecc0ce79>tea.</span><span class="variable" data-v-ecc0ce79>split</span><span class="brackets" data-v-ecc0ce79>(</span> <span class="then" data-v-ecc0ce79>&quot;,&quot;</span><span class="brackets" data-v-ecc0ce79>)</span><span class="variable" data-v-ecc0ce79>.map</span><span class="brackets" data-v-ecc0ce79>(</span> <span class="word" data-v-ecc0ce79>item</span><span class="function" data-v-ecc0ce79>=&gt;</span><span class="src" data-v-ecc0ce79>`＜span&gt;贈品</span><span class="then" data-v-ecc0ce79>${</span> <span class="word" data-v-ecc0ce79>item</span><span class="then" data-v-ecc0ce79>}</span><span class="src" data-v-ecc0ce79>＜/span&gt;＜br&gt;`</span><span class="brackets" data-v-ecc0ce79>)</span><span class="variable" data-v-ecc0ce79>.join</span><span class="brackets" data-v-ecc0ce79>(</span> <span class="src" data-v-ecc0ce79>&quot;&quot;</span><span class="brackets" data-v-ecc0ce79>)</span></div></div><p class="fz28 cor36" data-v-ecc0ce79>Number</p><p class="fz28" data-v-ecc0ce79>1. toFixed() 設置保留小數位的長度</p><div class="bgcVS" data-v-ecc0ce79><div data-v-ecc0ce79><span class="function" data-v-ecc0ce79>const </span><span class="word" data-v-ecc0ce79>num</span> <span class="then" data-v-ecc0ce79>=</span><span class="number" data-v-ecc0ce79>10.123</span></div><div data-v-ecc0ce79><span class="word" data-v-ecc0ce79>console.</span><span class="variable" data-v-ecc0ce79>log</span> <span class="brackets" data-v-ecc0ce79>(</span><span class="word" data-v-ecc0ce79>num.toFixed</span><span class="brackets" data-v-ecc0ce79>()) </span><span class="comment" data-v-ecc0ce79>// 10 // 四捨五入到整數位</span></div><div data-v-ecc0ce79><span class="word" data-v-ecc0ce79>console.</span><span class="variable" data-v-ecc0ce79>log</span> <span class="brackets" data-v-ecc0ce79>(</span><span class="word" data-v-ecc0ce79>num.toFixed</span><span class="brackets" data-v-ecc0ce79>(</span> <span class="number" data-v-ecc0ce79>2</span><span class="brackets" data-v-ecc0ce79> )) </span><span class="comment" data-v-ecc0ce79>// 10.12</span></div><div data-v-ecc0ce79><span class="function" data-v-ecc0ce79>const </span><span class="word" data-v-ecc0ce79>integer</span> <span class="then" data-v-ecc0ce79>=</span><span class="number" data-v-ecc0ce79>10</span></div><div data-v-ecc0ce79><span class="word" data-v-ecc0ce79>console.</span><span class="variable" data-v-ecc0ce79>log</span> <span class="brackets" data-v-ecc0ce79>(</span><span class="word" data-v-ecc0ce79>num.toFixed</span><span class="brackets" data-v-ecc0ce79>(</span> <span class="number" data-v-ecc0ce79>2</span><span class="brackets" data-v-ecc0ce79> )) </span><span class="comment" data-v-ecc0ce79>// 10.00</span></div></div><p class="fz28" data-v-ecc0ce79> 2. Math.floor()：無條件捨去，回傳大於所給數字的最小整數 </p><br data-v-ecc0ce79><br data-v-ecc0ce79><p class="fz28" data-v-ecc0ce79></p><p class="fz28" data-v-ecc0ce79></p><p class="fz28" data-v-ecc0ce79></p><p class="fz28" data-v-ecc0ce79></p><p class="fz28" data-v-ecc0ce79></p><p class="fz28" data-v-ecc0ce79></p><p class="fz28" data-v-ecc0ce79></p><p class="fz28" data-v-ecc0ce79></p><p class="fz28" data-v-ecc0ce79></p><p class="fz28" data-v-ecc0ce79></p><p class="fz28" data-v-ecc0ce79></p><p class="fz28" data-v-ecc0ce79></p><p class="fz28" data-v-ecc0ce79></p><p class="fz28" data-v-ecc0ce79></p><p class="fz28" data-v-ecc0ce79></p><p class="fz28" data-v-ecc0ce79></p><p class="fz28" data-v-ecc0ce79></p><p class="fz28" data-v-ecc0ce79></p><p class="fz28" data-v-ecc0ce79></p><p class="fz28" data-v-ecc0ce79></p><p class="fz28" data-v-ecc0ce79></p><p class="fz28" data-v-ecc0ce79></p><p class="fz28" data-v-ecc0ce79></p><p class="fz28" data-v-ecc0ce79></p><p class="fz28" data-v-ecc0ce79></p><p class="fz28" data-v-ecc0ce79></p><p class="fz28" data-v-ecc0ce79></p><p class="fz28" data-v-ecc0ce79></p><p class="fz28" data-v-ecc0ce79></p><p class="fz28" data-v-ecc0ce79></p><p class="fz28" data-v-ecc0ce79></p><p class="fz28" data-v-ecc0ce79></p><p class="fz28" data-v-ecc0ce79></p><p class="fz28" data-v-ecc0ce79></p><p class="fz28" data-v-ecc0ce79></p><p class="fz28" data-v-ecc0ce79></p><p class="fz28" data-v-ecc0ce79></p><p class="fz28" data-v-ecc0ce79></p><p class="fz28" data-v-ecc0ce79></p><p class="fz28" data-v-ecc0ce79></p><p class="fz28" data-v-ecc0ce79></p><p class="fz28" data-v-ecc0ce79></p><p class="fz28" data-v-ecc0ce79></p><p class="fz28" data-v-ecc0ce79></p><p class="fz28" data-v-ecc0ce79></p>',80),Qf=_v(()=>v("div",{class:"toTopButton"},[v("div",{class:"disCen"},"___"),v("div",{class:"disCen"},"▲")],-1)),Zf=[Qf],ao=_v(()=>v("div",{class:"toBotButton"},[v("div",{class:"disCen"},"▼"),v("div",{class:"disCen"},"￣")],-1)),so=[ao],co={__name:"JsPageThreeFive",setup(a){const s=ua(!1);window.addEventListener("scroll",function(){s.value=window.scrollY>0});function d(){window.scrollTo({top:0,left:0,behavior:"smooth"})}function t(){window.scrollTo({top:999999,left:0,behavior:"smooth"})}function c(e){window.scrollTo({top:document.getElementById(`${e}`).offsetTop,behavior:"smooth"})}return(e,n)=>{const l=za("RouterLink");return da(),ea(Q,null,[v("section",null,[v("div",Jf,[v("div",Df,[v("div",Wf,[v("div",{onClick:n[0]||(n[0]=p=>c("threeobject001")),class:"leftNavText"}," 創建物件 "),v("div",{onClick:n[1]||(n[1]=p=>c("threeobject002")),class:"leftNavText"}," 構造函數 "),v("div",{onClick:n[2]||(n[2]=p=>c("threeobject003")),class:"leftNavText"}," new做了什麼 "),v("div",{onClick:n[3]||(n[3]=p=>c("threeobject004")),class:"leftNavText"}," 實例&靜態成員 "),v("div",{onClick:n[4]||(n[4]=p=>c("threeobject005")),class:"leftNavText"}," 內置構造函數 "),v("div",{onClick:n[5]||(n[5]=p=>c("")),class:"leftNavText"})])])]),v("div",Uf,[v("div",Kf,[v("div",Xf,[Yf,v("div",null,[T(l,{to:"/js/method",class:"fz34"},{default:C(()=>[fa("Array 方法")]),_:1})]),Gf])])])]),v("div",null,[X(T(W,{name:"fade",tag:"div"},{default:C(()=>[v("div",{onClick:d,class:"toTop"},Zf)]),_:1},512),[[Y,s.value]]),X(T(W,{name:"fade",tag:"div"},{default:C(()=>[v("div",{onClick:t,class:"toBot"},so)]),_:1},512),[[Y,s.value]])])],64)}}},to=ia(co,[["__scopeId","data-v-ecc0ce79"]]),no="/vue-learn-js/assets/object001-1817e630.jpg";const zv=a=>(wa("data-v-7daadcc9"),a=a(),ha(),a),vo={class:"leftNav"},eo={class:"leftNavContainer"},po={class:"leftNavLayout"},lo=U('<div class="Main" data-v-7daadcc9><div class="mainContainer" data-v-7daadcc9><div class="mainLayout" data-v-7daadcc9><br data-v-7daadcc9><br data-v-7daadcc9><p class="fz28" data-v-7daadcc9>總分總</p><p class="fz28" data-v-7daadcc9>1.要講哪個知識點</p><p class="fz28" data-v-7daadcc9>2.細講</p><p class="fz28" data-v-7daadcc9>3.總結</p><br data-v-7daadcc9><br data-v-7daadcc9><div id="threeprototype001" class="articleCardTitle cor36 fz34" data-v-7daadcc9> 6.1 編程思想 </div><p class="fz28" data-v-7daadcc9><span class="cor36" data-v-7daadcc9> 面相過程 </span><span class="cor17" data-v-7daadcc9> . . . </span><span class="cor36" data-v-7daadcc9> 函數導向 </span><span class="cor17" data-v-7daadcc9> . . . </span><span class="cor36" data-v-7daadcc9>functional programming </span></p><p class="fz28" data-v-7daadcc9> 分析解決問題所需要的步驟, 然後用函數把這些步驟一步一步實現, 使用時再一個一個的依次調用 </p><br data-v-7daadcc9><br data-v-7daadcc9><br data-v-7daadcc9><p class="fz28" data-v-7daadcc9><span class="cor36" data-v-7daadcc9> 面相對象 </span><span class="cor17" data-v-7daadcc9> . . . </span><span class="cor36" data-v-7daadcc9> 物件導向 OOP </span><span class="cor17" data-v-7daadcc9> . . . </span><span class="cor36" data-v-7daadcc9>Object-oriented programming </span></p><p class="fz28" data-v-7daadcc9>每一個物件都是功能中心, 有明確分工</p><p class="fz28" data-v-7daadcc9></p><br data-v-7daadcc9><br data-v-7daadcc9><p class="fz28 cor36" data-v-7daadcc9># 3 特性</p><p class="fz28" data-v-7daadcc9> 封裝 <span class="cor17" data-v-7daadcc9> . . . . . . </span> 我一點開關 就 掃地 </p><p class="fz28" data-v-7daadcc9></p><br data-v-7daadcc9><p class="fz28" data-v-7daadcc9> 繼承 <span class="cor17" data-v-7daadcc9> . . . . . . </span> 掃地機 繼承 拖拉機 接口 </p><p class="fz28" data-v-7daadcc9></p><br data-v-7daadcc9><p class="fz28" data-v-7daadcc9> 多態 <span class="cor17" data-v-7daadcc9> . . . . . . </span> 多功能 平時掃地 天熱變風扇 </p><p class="fz28" data-v-7daadcc9></p><br data-v-7daadcc9><p class="fz28" data-v-7daadcc9> 重用 <span class="cor17" data-v-7daadcc9> . . . . . . </span> 沒用額外動力, 重複用發動機 </p><p class="fz28" data-v-7daadcc9> 低耦合 <span class="cor17" data-v-7daadcc9> . . . . . . </span> 掃把壞了拿下來換新的 不影響別的 </p><br data-v-7daadcc9><br data-v-7daadcc9><div class="dis spaAro" data-v-7daadcc9><div data-v-7daadcc9><p class="fz28 cor36" data-v-7daadcc9>函數導向編程</p><p class="fz28 cor36" data-v-7daadcc9># 優</p><p class="fz28" data-v-7daadcc9>性能比 物件導向高 , 適合跟硬件聯繫很緊密的東西</p><br data-v-7daadcc9><p class="fz28 cor36" data-v-7daadcc9># 缺</p><p class="fz28" data-v-7daadcc9>沒有物件導向易維護 , 易復用 , 易擴展</p></div><div data-v-7daadcc9><p class="fz28 cor36" data-v-7daadcc9>物件導向編程</p><p class="fz28 cor36" data-v-7daadcc9># 優</p><p class="fz28" data-v-7daadcc9>易維護 , 易復用 , 易擴展</p><p class="fz28" data-v-7daadcc9> 有封裝 , 繼承 , 多態 , 可設計出 低耦合 的系統 , 系統更靈活、易維護 </p><br data-v-7daadcc9><p class="fz28 cor36" data-v-7daadcc9># 缺</p><p class="fz28" data-v-7daadcc9>性能比 物件導向低</p></div></div><br data-v-7daadcc9><div id="threeprototype002" class="articleCardTitle cor36 fz34" data-v-7daadcc9> 6.2 構造函數 </div><div data-v-7daadcc9><span class="cor36 fz28" data-v-7daadcc9>封裝 </span><span class="cor17" data-v-7daadcc9> . . . . . </span><span class="fz28" data-v-7daadcc9>JS 透過 構造函數 實現 封裝</span></div><br data-v-7daadcc9><p class="fz28" data-v-7daadcc9>構造函數很好用 , 但是 存在 浪費 內存 問題</p><div class="bgcVS" data-v-7daadcc9><p data-v-7daadcc9>創建 構造函數</p><br data-v-7daadcc9><div class="disCen" data-v-7daadcc9><img style="width:100%;" src="'+no+'" data-v-7daadcc9></div><br data-v-7daadcc9><p class="fz28" data-v-7daadcc9>如果我創建 200 個物件</p><p class="fz28" data-v-7daadcc9>堆 放了 200 個 function</p><p class="fz28" data-v-7daadcc9>浪費 內存</p></div><div class="articleCardTitle cor36 fz34" data-v-7daadcc9>6. 原型</div><p class="fz28" data-v-7daadcc9>解決構造函數 浪費內存問題</p><br data-v-7daadcc9><p class="fz28" data-v-7daadcc9> 1. 構造函數 通過原型 分配的函數 是 所有對象 所共享的 </p><br data-v-7daadcc9><p class="fz28" data-v-7daadcc9> 2. JS 規定 每個 構造函數 都有一個 prototype 屬性, 指向另一個對象, 也稱為原型對象 </p><br data-v-7daadcc9><p class="fz28" data-v-7daadcc9> 3. 這個對象 可以 掛載函數, 對象 實例化 不會 多次創建原型上函數, 節約內存 </p><br data-v-7daadcc9><p class="fz28" data-v-7daadcc9> 4. 可以把 不變的方法 直接定義在 prototype 對象上 , 這樣所有對象 的實例 就可以共享這些方法 </p><br data-v-7daadcc9><p class="fz28" data-v-7daadcc9>5. 構造函數和原型對象中的 this 都指向 實例化的對象</p><div class="bgcVS" data-v-7daadcc9><div data-v-7daadcc9><span class="function" data-v-7daadcc9>function </span><span class="word" data-v-7daadcc9>Person</span> <span class="brackets" data-v-7daadcc9>(</span><span class="word" data-v-7daadcc9>uname,number</span><span class="brackets" data-v-7daadcc9>){</span></div><div class="pTwo VSL" data-v-7daadcc9><span class="comment" data-v-7daadcc9>// this.name=uname</span></div><div class="pTwo VSL" data-v-7daadcc9><span class="then" data-v-7daadcc9>this</span><span class="word" data-v-7daadcc9>.uname</span> <span class="then" data-v-7daadcc9>=</span><span class="word" data-v-7daadcc9>uname</span></div><div class="pTwo VSL" data-v-7daadcc9><span class="comment" data-v-7daadcc9>//物件的屬性 . . . 形參</span></div><div class="pTwo VSL" data-v-7daadcc9><span class="then" data-v-7daadcc9>this</span> <span class="word" data-v-7daadcc9>.number</span><span class="then" data-v-7daadcc9>=</span> <span class="word" data-v-7daadcc9>number</span></div><div class="pTwo VSL" data-v-7daadcc9><span class="then" data-v-7daadcc9>this.</span> <span class="word" data-v-7daadcc9>sayHi</span><span class="then" data-v-7daadcc9>=</span><span class="function" data-v-7daadcc9>function </span><span class="brackets" data-v-7daadcc9>(){</span></div><div class="pFou VSL" data-v-7daadcc9><span class="word" data-v-7daadcc9>console.</span><span class="variable" data-v-7daadcc9>log</span> <span class="brackets" data-v-7daadcc9>(</span><span class="src" data-v-7daadcc9>&quot;hi&quot;</span> <span class="brackets" data-v-7daadcc9>)</span></div><div class="pTwo VSL" data-v-7daadcc9><span class="brackets" data-v-7daadcc9>}</span></div><div class="brackets" data-v-7daadcc9>}</div><div data-v-7daadcc9><span class="word" data-v-7daadcc9>console.</span><span class="variable" data-v-7daadcc9>log</span> <span class="brackets" data-v-7daadcc9>(</span><span class="then" data-v-7daadcc9>new </span> <span class="word" data-v-7daadcc9>Person</span><span class="brackets" data-v-7daadcc9>(</span><span class="src" data-v-7daadcc9>&quot;wayne&quot;,</span> <span class="number" data-v-7daadcc9>123</span><span class="brackets" data-v-7daadcc9>))</span></div><br data-v-7daadcc9><div data-v-7daadcc9><span class="function" data-v-7daadcc9>const </span><span class="word" data-v-7daadcc9>p</span><span class="then" data-v-7daadcc9>= new </span><span class="word" data-v-7daadcc9>Person</span> <span class="brackets" data-v-7daadcc9>(</span><span class="src" data-v-7daadcc9>&quot;wayne&quot;,</span> <span class="number" data-v-7daadcc9>6</span><span class="brackets" data-v-7daadcc9>)</span></div><div data-v-7daadcc9><span class="function" data-v-7daadcc9>const </span> <span class="word" data-v-7daadcc9>j</span><span class="then" data-v-7daadcc9>=</span> <span class="then" data-v-7daadcc9>new </span><span class="word" data-v-7daadcc9>Person</span> <span class="brackets" data-v-7daadcc9>(</span><span class="src" data-v-7daadcc9>&quot;jack&quot;,</span> <span class="number" data-v-7daadcc9>9</span><span class="brackets" data-v-7daadcc9>)</span></div><br data-v-7daadcc9><span class="comment" data-v-7daadcc9>//dir 打印對象形式</span><div data-v-7daadcc9><span class="word" data-v-7daadcc9>console.</span><span class="variable" data-v-7daadcc9>dir</span> <span class="brackets" data-v-7daadcc9>(</span><span class="brackets" data-v-7daadcc9>Person</span> <span class="then" data-v-7daadcc9>.</span><span class="word" data-v-7daadcc9>prototype</span><span class="brackets" data-v-7daadcc9>) </span><span class="comment" data-v-7daadcc9>//寫法是屬性 返回是物件</span></div><br data-v-7daadcc9><br data-v-7daadcc9><div data-v-7daadcc9><span class="comment" data-v-7daadcc9>公共屬性寫到 構造函數</span></div><div data-v-7daadcc9><span class="function" data-v-7daadcc9>function </span><span class="word" data-v-7daadcc9>Person</span> <span class="brackets" data-v-7daadcc9>(</span><span class="word" data-v-7daadcc9>uname,number</span><span class="brackets" data-v-7daadcc9>){</span></div><div class="pTwo VSL" data-v-7daadcc9><span class="then" data-v-7daadcc9>this</span><span class="word" data-v-7daadcc9>.uname</span> <span class="then" data-v-7daadcc9>=</span><span class="word" data-v-7daadcc9>uname</span></div><div class="pTwo VSL" data-v-7daadcc9><span class="then" data-v-7daadcc9>this</span> <span class="word" data-v-7daadcc9>.number</span><span class="then" data-v-7daadcc9>=</span> <span class="word" data-v-7daadcc9>number</span></div><div class="brackets" data-v-7daadcc9>}</div><br data-v-7daadcc9><div data-v-7daadcc9><span class="comment" data-v-7daadcc9>公共方法寫到 原型object</span></div><div data-v-7daadcc9><span class="brackets" data-v-7daadcc9>Person</span><span class="word" data-v-7daadcc9>.prototype.sayHi</span><span class="then" data-v-7daadcc9>=</span><span class="function" data-v-7daadcc9>function </span><span class="brackets" data-v-7daadcc9>(){</span></div><div class="pTwo" data-v-7daadcc9><span class="word" data-v-7daadcc9>console.</span><span class="variable" data-v-7daadcc9>log</span> <span class="brackets" data-v-7daadcc9>(</span><span class="src" data-v-7daadcc9>&quot;hi&quot;</span> <span class="brackets" data-v-7daadcc9>)</span></div><div data-v-7daadcc9><span class="brackets" data-v-7daadcc9>}</span></div><br data-v-7daadcc9><div data-v-7daadcc9><span class="function" data-v-7daadcc9>const </span><span class="word" data-v-7daadcc9>p</span><span class="then" data-v-7daadcc9>= new </span><span class="word" data-v-7daadcc9>Person</span> <span class="brackets" data-v-7daadcc9>(</span><span class="src" data-v-7daadcc9>&quot;wayne&quot;,</span> <span class="number" data-v-7daadcc9>6</span><span class="brackets" data-v-7daadcc9>)</span></div><div data-v-7daadcc9><span class="function" data-v-7daadcc9>const </span> <span class="word" data-v-7daadcc9>j</span><span class="then" data-v-7daadcc9>=</span> <span class="then" data-v-7daadcc9>new </span><span class="word" data-v-7daadcc9>Person</span> <span class="brackets" data-v-7daadcc9>(</span><span class="src" data-v-7daadcc9>&quot;jack&quot;,</span> <span class="number" data-v-7daadcc9>9</span><span class="brackets" data-v-7daadcc9>)</span></div><br data-v-7daadcc9><div data-v-7daadcc9><span class="word" data-v-7daadcc9>p.sayHi</span> <span class="brackets" data-v-7daadcc9>()</span></div><br data-v-7daadcc9><div data-v-7daadcc9><span class="word" data-v-7daadcc9>console.</span><span class="variable" data-v-7daadcc9>log</span> <span class="brackets" data-v-7daadcc9>(</span><span class="word" data-v-7daadcc9>p.sayHi</span> <span class="then" data-v-7daadcc9>===</span><span class="word" data-v-7daadcc9>j.sayHi</span> <span class="brackets" data-v-7daadcc9>)</span><span class="comment" data-v-7daadcc9>//true</span></div></div><p class="fz28 cor36" data-v-7daadcc9># 原型是什麼?</p><p class="fz28" data-v-7daadcc9>一個對象, 也稱 原型對象</p><br data-v-7daadcc9><p class="fz28 cor36" data-v-7daadcc9># 原型做什麼?</p><p class="fz28" data-v-7daadcc9>共享方法</p><br data-v-7daadcc9><p class="fz28 cor36" data-v-7daadcc9># 構造函數 &amp; 原型 this 指向誰?</p><p class="fz28" data-v-7daadcc9>實例化的對象</p><div class="bgcVS" data-v-7daadcc9><p class="fz28" data-v-7daadcc9> 我只要一調用 函數 觸發 this 把這個 this 保存下來 賦值給 let </p><div data-v-7daadcc9><span class="function" data-v-7daadcc9>let </span> <span class="word" data-v-7daadcc9>that</span></div><div data-v-7daadcc9><span class="function" data-v-7daadcc9>function </span><span class="word" data-v-7daadcc9>Person</span> <span class="brackets" data-v-7daadcc9>(</span><span class="word" data-v-7daadcc9>uname</span><span class="brackets" data-v-7daadcc9>){</span></div><div class="pTwo VSL" data-v-7daadcc9><span class="word" data-v-7daadcc9>console.</span><span class="variable" data-v-7daadcc9>log</span> <span class="brackets" data-v-7daadcc9>(</span><span class="then" data-v-7daadcc9>this</span> <span class="brackets" data-v-7daadcc9>)</span><span class="comment" data-v-7daadcc9>//Person看不出來this指向誰</span></div><div class="pTwo VSL" data-v-7daadcc9><span class="word" data-v-7daadcc9>that</span> <span class="then" data-v-7daadcc9>=</span><span class="then" data-v-7daadcc9>this</span></div><div class="pTwo VSL" data-v-7daadcc9><span class="then" data-v-7daadcc9>this</span><span class="word" data-v-7daadcc9>.uname</span> <span class="then" data-v-7daadcc9>=</span><span class="word" data-v-7daadcc9>uname</span></div><div class="brackets" data-v-7daadcc9>}</div><br data-v-7daadcc9><div data-v-7daadcc9><span class="comment" data-v-7daadcc9>1.實例對象是 p</span></div><div data-v-7daadcc9><span class="function" data-v-7daadcc9>const </span> <span class="word" data-v-7daadcc9>p</span><span class="then" data-v-7daadcc9>=</span> <span class="then" data-v-7daadcc9>new </span><span class="word" data-v-7daadcc9>Person</span> <span class="brackets" data-v-7daadcc9>(</span><span class="src" data-v-7daadcc9>&quot;wayne&quot;</span> <span class="brackets" data-v-7daadcc9>)</span></div><div data-v-7daadcc9><span class="word" data-v-7daadcc9>console.</span><span class="variable" data-v-7daadcc9>log</span> <span class="brackets" data-v-7daadcc9>(</span><span class="word" data-v-7daadcc9>that</span> <span class="then" data-v-7daadcc9>===</span><span class="word" data-v-7daadcc9>p</span> <span class="brackets" data-v-7daadcc9>)</span></div><div class="comment" data-v-7daadcc9>如果相等 那this 就是 p</div><div class="comment" data-v-7daadcc9>// true // 構造函數 this 指向 p</div><br data-v-7daadcc9><div data-v-7daadcc9><span class="function" data-v-7daadcc9>let </span> <span class="word" data-v-7daadcc9>that2</span></div><span class="comment" data-v-7daadcc9>// 原型對象裡面的函數this指向的是實例對象 p</span><div data-v-7daadcc9><span class="brackets" data-v-7daadcc9>Person</span><span class="word" data-v-7daadcc9>.prototype.sayHi</span><span class="then" data-v-7daadcc9>=</span><span class="function" data-v-7daadcc9>function </span><span class="brackets" data-v-7daadcc9>(){</span></div><div class="pTwo VSL" data-v-7daadcc9><span class="word" data-v-7daadcc9>that2</span> <span class="then" data-v-7daadcc9>=</span><span class="then" data-v-7daadcc9>this</span></div><div class="pTwo VSL" data-v-7daadcc9><span class="word" data-v-7daadcc9>console.</span><span class="variable" data-v-7daadcc9>log</span> <span class="brackets" data-v-7daadcc9>(</span><span class="src" data-v-7daadcc9>&quot;hi&quot;</span> <span class="brackets" data-v-7daadcc9>)</span></div><div data-v-7daadcc9><span class="brackets" data-v-7daadcc9>}</span></div><div data-v-7daadcc9><span class="word" data-v-7daadcc9>p.</span> <span class="variable" data-v-7daadcc9>sing</span><span class="brackets" data-v-7daadcc9>()</span></div><div class="comment" data-v-7daadcc9>this 指向 函數的 調用者 就是 p</div><br data-v-7daadcc9><div data-v-7daadcc9><span class="word" data-v-7daadcc9>console.</span><span class="variable" data-v-7daadcc9>log</span> <span class="brackets" data-v-7daadcc9>(</span><span class="word" data-v-7daadcc9>that</span> <span class="then" data-v-7daadcc9>===</span><span class="word" data-v-7daadcc9>p</span> <span class="brackets" data-v-7daadcc9>)</span><span class="comment" data-v-7daadcc9>// true</span></div></div><p class="fz28" data-v-7daadcc9>結論</p><p class="fz28" data-v-7daadcc9>構造函數 和 原型對象中的 this 都指向 實例化的對象</p><br data-v-7daadcc9><br data-v-7daadcc9><p class="fz34 cor36" data-v-7daadcc9># 給數組擴展方法</p><p class="fz28" data-v-7daadcc9>reduce 是累計器</p><p class="fz28" data-v-7daadcc9>定義一個 arr.sum() 返回累加結果</p><div class="bgcVS" data-v-7daadcc9><div data-v-7daadcc9><span class="function" data-v-7daadcc9>const </span><span class="word" data-v-7daadcc9>arr</span> <span class="then" data-v-7daadcc9>=</span><span class="brackets" data-v-7daadcc9>[</span> <span class="number" data-v-7daadcc9>1,2,3</span><span class="brackets" data-v-7daadcc9>]</span></div><div data-v-7daadcc9><span class="brackets" data-v-7daadcc9>Array</span><span class="word" data-v-7daadcc9>.prototype.</span><span class="variable" data-v-7daadcc9>max</span> <span class="then" data-v-7daadcc9>=</span><span class="function" data-v-7daadcc9>function </span><span class="brackets" data-v-7daadcc9>(){</span></div><div class="pTwo" data-v-7daadcc9><span class="then" data-v-7daadcc9>return </span><span class="brackets" data-v-7daadcc9>Math</span><span class="word" data-v-7daadcc9>.</span><span class="variable" data-v-7daadcc9>max</span> <span class="brackets" data-v-7daadcc9>(</span><span class="word" data-v-7daadcc9>...</span><span class="then" data-v-7daadcc9>this</span><span class="brackets" data-v-7daadcc9>)</span></div><div class="pTwo" data-v-7daadcc9><span class="comment" data-v-7daadcc9>// 原型對象裡面的函數this指向的是實例對象 arr</span></div><div data-v-7daadcc9><span class="brackets" data-v-7daadcc9>}</span></div><div data-v-7daadcc9><span class="word" data-v-7daadcc9>console.</span><span class="variable" data-v-7daadcc9>log</span> <span class="brackets" data-v-7daadcc9>(</span><span class="word" data-v-7daadcc9>arr.</span> <span class="word" data-v-7daadcc9>max</span><span class="brackets" data-v-7daadcc9>())</span></div><br data-v-7daadcc9><div data-v-7daadcc9><span class="brackets" data-v-7daadcc9>Array</span><span class="word" data-v-7daadcc9>.prototype.</span><span class="variable" data-v-7daadcc9>sum</span> <span class="then" data-v-7daadcc9>=</span><span class="function" data-v-7daadcc9>function </span><span class="brackets" data-v-7daadcc9>(){</span></div><div class="pTwo VSL" data-v-7daadcc9><span class="then" data-v-7daadcc9>return </span> <span class="then" data-v-7daadcc9>this</span><span class="variable" data-v-7daadcc9>.reduce</span><span class="brackets" data-v-7daadcc9>((</span><span class="word" data-v-7daadcc9>prev,item</span><span class="brackets" data-v-7daadcc9>)</span> <span class="function" data-v-7daadcc9>=&gt;</span><span class="word" data-v-7daadcc9>prev</span> <span class="then" data-v-7daadcc9>+</span><span class="word" data-v-7daadcc9>item,</span> <span class="number" data-v-7daadcc9>0</span><span class="brackets" data-v-7daadcc9>)</span></div><div data-v-7daadcc9><span class="brackets" data-v-7daadcc9>}</span></div><div data-v-7daadcc9><span class="word" data-v-7daadcc9>console.</span><span class="variable" data-v-7daadcc9>log</span><span class="brackets" data-v-7daadcc9>([</span> <span class="word" data-v-7daadcc9>1,2,3</span><span class="brackets" data-v-7daadcc9>]</span><span class="variable" data-v-7daadcc9>.sum</span><span class="brackets" data-v-7daadcc9>())</span></div></div><div id="threeprototype003" class="articleCardTitle cor36 fz34" data-v-7daadcc9> 6.3 constructor </div><p class="fz28" data-v-7daadcc9>在哪裡?</p><p class="fz28" data-v-7daadcc9>每個 原型對象 裡面都有 constructor 屬性</p><br data-v-7daadcc9><p class="fz28" data-v-7daadcc9>做什麼?</p><p class="fz28" data-v-7daadcc9>該屬性 指向 該原型對象的 構造函數</p><br data-v-7daadcc9><div class="bgcVS" data-v-7daadcc9><div data-v-7daadcc9><span class="function" data-v-7daadcc9>function </span><span class="word" data-v-7daadcc9>Person</span> <span class="brackets" data-v-7daadcc9>(){</span></div><div data-v-7daadcc9><span class="brackets" data-v-7daadcc9>}</span></div><div data-v-7daadcc9><span class="function" data-v-7daadcc9>const </span> <span class="word" data-v-7daadcc9>p</span><span class="then" data-v-7daadcc9>=</span> <span class="then" data-v-7daadcc9>new </span><span class="word" data-v-7daadcc9>Person</span> <span class="brackets" data-v-7daadcc9>()</span></div><div data-v-7daadcc9><span class="word" data-v-7daadcc9>console.</span><span class="variable" data-v-7daadcc9>log</span> <span class="brackets" data-v-7daadcc9>(</span><span class="brackets" data-v-7daadcc9>Person</span><span class="word" data-v-7daadcc9>.prototype</span><span class="brackets" data-v-7daadcc9>)</span></div><div data-v-7daadcc9><span class="comment" data-v-7daadcc9>// 得到構造函數裡面的原型對象</span></div><div data-v-7daadcc9><span class="comment" data-v-7daadcc9>// F12 展開這個對象看到 constructor</span></div><div data-v-7daadcc9><span class="comment" data-v-7daadcc9>// 只要是原型對象 裡面 默認都有 constructor 屬性</span></div><div data-v-7daadcc9><span class="comment" data-v-7daadcc9>// 做什麼?</span></div><div data-v-7daadcc9><span class="comment" data-v-7daadcc9>// 發現 指向 Person</span></div><div data-v-7daadcc9><span class="comment" data-v-7daadcc9>// 指向 構造函數</span></div><br data-v-7daadcc9><div data-v-7daadcc9><span class="word" data-v-7daadcc9>console.</span><span class="variable" data-v-7daadcc9>log</span> <span class="brackets" data-v-7daadcc9>(</span><span class="word" data-v-7daadcc9>Person.prototype.constructor</span><span class="then" data-v-7daadcc9>===</span> <span class="word" data-v-7daadcc9>Person</span><span class="brackets" data-v-7daadcc9>)</span><span class="comment" data-v-7daadcc9>//true</span></div><br data-v-7daadcc9><div data-v-7daadcc9><span class="function" data-v-7daadcc9>function </span><span class="word" data-v-7daadcc9>Person</span> <span class="brackets" data-v-7daadcc9>(){</span></div><div data-v-7daadcc9><span class="brackets" data-v-7daadcc9>}</span></div><div data-v-7daadcc9><span class="comment" data-v-7daadcc9>// Person.prototype.say = function(){</span></div><div class="pTwo" data-v-7daadcc9><span class="comment" data-v-7daadcc9>// console.log(&quot;hi&quot;)</span></div><div data-v-7daadcc9><span class="comment" data-v-7daadcc9>}</span></div><div data-v-7daadcc9><span class="comment" data-v-7daadcc9>// Person.prototype.walk = function(){</span></div><div class="pTwo" data-v-7daadcc9><span class="comment" data-v-7daadcc9>// console.log(&quot;walk&quot;)</span></div><div data-v-7daadcc9><span class="comment" data-v-7daadcc9>}</span></div><br data-v-7daadcc9><div data-v-7daadcc9><span class="word" data-v-7daadcc9>console.</span><span class="variable" data-v-7daadcc9>log</span> <span class="brackets" data-v-7daadcc9>(</span><span class="brackets" data-v-7daadcc9>Person</span><span class="word" data-v-7daadcc9>.prototype</span><span class="brackets" data-v-7daadcc9>) </span><span class="comment" data-v-7daadcc9>// 有 constructor</span></div><div data-v-7daadcc9><span class="brackets" data-v-7daadcc9>Person</span><span class="word" data-v-7daadcc9>.prototype</span> <span class="then" data-v-7daadcc9>=</span><span class="brackets" data-v-7daadcc9>{</span></div><div class="padTwo VSL" data-v-7daadcc9><div data-v-7daadcc9><span class="word" data-v-7daadcc9>sing:</span><span class="function" data-v-7daadcc9>function </span><span class="brackets" data-v-7daadcc9>(){</span></div><div class="padTwo VSL" data-v-7daadcc9><span class="word" data-v-7daadcc9>console.</span><span class="variable" data-v-7daadcc9>log</span><span class="brackets" data-v-7daadcc9>(</span> <span class="src" data-v-7daadcc9>&quot;hi&quot;</span><span class="brackets" data-v-7daadcc9>)</span></div><div data-v-7daadcc9><span class="brackets" data-v-7daadcc9>},</span></div><div data-v-7daadcc9><span class="word" data-v-7daadcc9>walk:</span><span class="function" data-v-7daadcc9>function </span><span class="brackets" data-v-7daadcc9>(){</span></div><div class="padTwo VSL" data-v-7daadcc9><div data-v-7daadcc9></div><span class="word" data-v-7daadcc9>console.</span><span class="variable" data-v-7daadcc9>log</span><span class="brackets" data-v-7daadcc9>(</span><span class="word" data-v-7daadcc9>&quot;walk&quot;</span> <span class="brackets" data-v-7daadcc9>)</span></div><div data-v-7daadcc9><span class="brackets" data-v-7daadcc9>},</span></div></div><div data-v-7daadcc9><span class="brackets" data-v-7daadcc9>}</span></div><br data-v-7daadcc9><div data-v-7daadcc9><span class="word" data-v-7daadcc9>console.</span><span class="variable" data-v-7daadcc9>log</span> <span class="brackets" data-v-7daadcc9>(</span><span class="brackets" data-v-7daadcc9>Person</span><span class="word" data-v-7daadcc9>.prototype</span><span class="brackets" data-v-7daadcc9>) </span><span class="comment" data-v-7daadcc9>// constructor 不見了</span></div><br data-v-7daadcc9><p data-v-7daadcc9>我一定要 constructor 指向父親</p><br data-v-7daadcc9><div data-v-7daadcc9><span class="brackets" data-v-7daadcc9>Person</span><span class="word" data-v-7daadcc9>.prototype</span> <span class="then" data-v-7daadcc9>=</span><span class="brackets" data-v-7daadcc9>{</span></div><div class="padTwo VSL" data-v-7daadcc9><div data-v-7daadcc9><span class="comment" data-v-7daadcc9>// 重新指回創造這個原型對象的 </span></div><div data-v-7daadcc9><span class="word" data-v-7daadcc9>constructor:</span><span class="brackets" data-v-7daadcc9>Person,</span></div><div data-v-7daadcc9><span class="word" data-v-7daadcc9>sing:</span><span class="function" data-v-7daadcc9>function </span><span class="brackets" data-v-7daadcc9>(){</span></div><div class="padTwo VSL" data-v-7daadcc9><span class="word" data-v-7daadcc9>console.</span><span class="variable" data-v-7daadcc9>log</span><span class="brackets" data-v-7daadcc9>(</span> <span class="src" data-v-7daadcc9>&quot;hi&quot;</span><span class="brackets" data-v-7daadcc9>)</span></div><div data-v-7daadcc9><span class="brackets" data-v-7daadcc9>},</span></div><div data-v-7daadcc9><span class="word" data-v-7daadcc9>walk:</span><span class="function" data-v-7daadcc9>function </span><span class="brackets" data-v-7daadcc9>(){</span></div><div class="padTwo VSL" data-v-7daadcc9><div data-v-7daadcc9></div><span class="word" data-v-7daadcc9>console.</span><span class="variable" data-v-7daadcc9>log</span><span class="brackets" data-v-7daadcc9>(</span><span class="word" data-v-7daadcc9>&quot;walk&quot;</span> <span class="brackets" data-v-7daadcc9>)</span></div><div data-v-7daadcc9><span class="brackets" data-v-7daadcc9>},</span></div></div><div data-v-7daadcc9><span class="brackets" data-v-7daadcc9>}</span></div><br data-v-7daadcc9></div><p class="fz28" data-v-7daadcc9>思考</p><br data-v-7daadcc9><div class="fz28" data-v-7daadcc9><span class="bor pad204" data-v-7daadcc9>構造函數</span> → <span class="bor pad204" data-v-7daadcc9> 原型 prototype 共享屬性方法 </span></div><br data-v-7daadcc9><div class="fz28" data-v-7daadcc9><span class="cor17" data-v-7daadcc9> . . . </span> ↓</div><br data-v-7daadcc9><div class="fz28" data-v-7daadcc9><span class="bor pad204" data-v-7daadcc9>實例對象 new Person()</span></div><br data-v-7daadcc9><br data-v-7daadcc9><br data-v-7daadcc9><p class="fz28" data-v-7daadcc9>為什麼 實例對象 可以訪問 原型的 方法?</p><div id="threeprototype004" class="articleCardTitle cor36 fz34" data-v-7daadcc9> 6.4 對象原型 </div><p class="fz28" data-v-7daadcc9> 對象都會有一個屬性 __proto__ 指向 構造函數的 prototype 原型對象 </p><br data-v-7daadcc9><br data-v-7daadcc9><br data-v-7daadcc9><div class="fz28" data-v-7daadcc9><span class="bor pad204" data-v-7daadcc9>構造函數</span> → <span class="bor pad204" data-v-7daadcc9> 原型 prototype 共享屬性方法 </span></div><br data-v-7daadcc9><div class="fz28" data-v-7daadcc9><span class="cor17" data-v-7daadcc9> . . . </span> ↓ <span class="cor17" data-v-7daadcc9> . . . . . . . . . . . . . . . . </span> ↗ __proto__ </div><br data-v-7daadcc9><div class="fz28" data-v-7daadcc9><span class="bor pad204" data-v-7daadcc9>實例對象 new Person()</span></div><div class="bgcVS" data-v-7daadcc9><div data-v-7daadcc9><span class="function" data-v-7daadcc9>function </span><span class="word" data-v-7daadcc9>Person</span><span class="brackets" data-v-7daadcc9>(){}</span></div><div data-v-7daadcc9><span class="function" data-v-7daadcc9>const </span> <span class="word" data-v-7daadcc9>p</span><span class="then" data-v-7daadcc9>=</span> <span class="then" data-v-7daadcc9>new </span><span class="word" data-v-7daadcc9>Person</span> <span class="brackets" data-v-7daadcc9>()</span></div><div data-v-7daadcc9><span class="word" data-v-7daadcc9>console.</span><span class="variable" data-v-7daadcc9>log</span> <span class="brackets" data-v-7daadcc9>(</span><span class="word" data-v-7daadcc9>p</span> <span class="brackets" data-v-7daadcc9>)</span></div><div class="comment" data-v-7daadcc9>// person 物件裡面展開有一個 __proto__</div><br data-v-7daadcc9><span class="comment" data-v-7daadcc9>//對象原型__proto__指向 該構造函數的原型對象</span><div data-v-7daadcc9><span class="word" data-v-7daadcc9>console.</span><span class="variable" data-v-7daadcc9>log</span> <span class="brackets" data-v-7daadcc9>(</span><span class="word" data-v-7daadcc9>p.__proto__</span><span class="then" data-v-7daadcc9>===</span><span class="word" data-v-7daadcc9>p.prototype</span><span class="brackets" data-v-7daadcc9>) </span><span class="comment" data-v-7daadcc9>// true</span></div><br data-v-7daadcc9><div data-v-7daadcc9><span class="comment" data-v-7daadcc9>// 對象原型裡面有 constructor 指向 構造函數 Person</span></div><div data-v-7daadcc9><span class="word" data-v-7daadcc9>console.</span><span class="variable" data-v-7daadcc9>log</span> <span class="brackets" data-v-7daadcc9>(</span><span class="word" data-v-7daadcc9>p.__proto__</span><span class="brackets" data-v-7daadcc9>)</span></div><div data-v-7daadcc9><span class="word" data-v-7daadcc9>console.</span><span class="variable" data-v-7daadcc9>log</span> <span class="brackets" data-v-7daadcc9>(</span><span class="word" data-v-7daadcc9>p.__proto__.constructor</span><span class="then" data-v-7daadcc9>===</span> <span class="word" data-v-7daadcc9>Person</span><span class="brackets" data-v-7daadcc9>) </span><span class="comment" data-v-7daadcc9>// true</span></div></div><p class="fz28" data-v-7daadcc9>注意</p><p class="fz28" data-v-7daadcc9>__proto__ 是 js 非標準屬性</p><p class="fz28" data-v-7daadcc9>[[Prototype]] 和 __proto__ 意義相同</p><p class="fz28" data-v-7daadcc9>用來表明當前實例對象指向哪個原型對象 prototype</p><p class="fz28" data-v-7daadcc9> __proto__ 對象原型裡面也有一個 constructor 屬性, 指向創建該實例對象的構造函數 </p><br data-v-7daadcc9><br data-v-7daadcc9><br data-v-7daadcc9><br data-v-7daadcc9><br data-v-7daadcc9><br data-v-7daadcc9><p class="fz40" data-v-7daadcc9>對象原型 指向 原型對象</p><br data-v-7daadcc9><br data-v-7daadcc9><br data-v-7daadcc9><br data-v-7daadcc9><br data-v-7daadcc9><br data-v-7daadcc9><div class="fz28" data-v-7daadcc9><span class="bor pad204" data-v-7daadcc9>. . . 構造函數</span> → ← constructor <span class="bor pad204" data-v-7daadcc9> 原型 prototype 共享屬性方法 </span></div><br data-v-7daadcc9><div class="fz28" data-v-7daadcc9><span class="cor17" data-v-7daadcc9> . . . . . . . . . </span> ↓ </div><br data-v-7daadcc9><div class="fz28" data-v-7daadcc9> constructor ↑ <span class="cor17" data-v-7daadcc9> . . . . . . . . . . . </span> ↗ __proto__ 也是 [[Prototype]] </div><br data-v-7daadcc9><div class="fz28" data-v-7daadcc9><span class="bor pad204" data-v-7daadcc9>實例對象 new Person()</span></div><br data-v-7daadcc9><br data-v-7daadcc9><br data-v-7daadcc9><p class="fz28 cor36" data-v-7daadcc9># 結論</p><p class="fz28 cor36" data-v-7daadcc9>prototype 是什麼?</p><p class="fz28" data-v-7daadcc9>原型</p><br data-v-7daadcc9><p class="fz28 cor36" data-v-7daadcc9>哪裡來?</p><p class="fz28" data-v-7daadcc9>構造函數 都自動有</p><br data-v-7daadcc9><p class="fz28 cor36" data-v-7daadcc9>constructor 在哪裡?</p><p class="fz28" data-v-7daadcc9>prototype 原型 和 對象原型 __proto__ 都有</p><br data-v-7daadcc9><p class="fz28 cor36" data-v-7daadcc9>做什麼?</p><p class="fz28" data-v-7daadcc9>指向 創建 實例對象的 構造函數</p><br data-v-7daadcc9><p class="fz28" data-v-7daadcc9>指向 創建 原型的 構造函數</p><br data-v-7daadcc9><br data-v-7daadcc9><p class="fz28 cor36" data-v-7daadcc9>__proto__在哪裡?</p><p class="fz28" data-v-7daadcc9>實例對象裡面</p><br data-v-7daadcc9><p class="fz28 cor36" data-v-7daadcc9>指向誰?</p><p class="fz28" data-v-7daadcc9>對象原型 指向 原型對象</p><br data-v-7daadcc9><div id="threeprototype005" class="articleCardTitle cor36 fz34" data-v-7daadcc9> 6.5 原型繼承 </div><div class="bgcVS" data-v-7daadcc9><div data-v-7daadcc9><span class="function" data-v-7daadcc9>function </span><span class="word" data-v-7daadcc9>Man</span> <span class="brackets" data-v-7daadcc9>(){</span></div><div class="padTwo VSL" data-v-7daadcc9><span class="then" data-v-7daadcc9>this</span> <span class="word" data-v-7daadcc9>.eyes</span><span class="then" data-v-7daadcc9>=</span> <span class="number" data-v-7daadcc9>2</span><div data-v-7daadcc9></div></div><div data-v-7daadcc9><span class="brackets" data-v-7daadcc9>}</span></div><div data-v-7daadcc9><span class="function" data-v-7daadcc9>function </span><span class="word" data-v-7daadcc9>Woman</span> <span class="brackets" data-v-7daadcc9>(){</span></div><div class="padTwo VSL" data-v-7daadcc9><span class="then" data-v-7daadcc9>this</span> <span class="word" data-v-7daadcc9>.eyes</span><span class="then" data-v-7daadcc9>=</span> <span class="number" data-v-7daadcc9>2</span><div data-v-7daadcc9></div></div><div data-v-7daadcc9><span class="brackets" data-v-7daadcc9>}</span></div><div data-v-7daadcc9><span class="comment" data-v-7daadcc9>// 想要繼承 Person , 公共的部分放到原型上 , 就是原型繼承</span></div><br data-v-7daadcc9><br data-v-7daadcc9><div data-v-7daadcc9><span class="function" data-v-7daadcc9>const </span><span class="word" data-v-7daadcc9>Person</span> <span class="then" data-v-7daadcc9>=</span><span class="brackets" data-v-7daadcc9>{</span></div><div class="padTwo VSL" data-v-7daadcc9><span class="word" data-v-7daadcc9>eyes:</span> <span class="number" data-v-7daadcc9>2,</span><div data-v-7daadcc9></div></div><div data-v-7daadcc9><span class="brackets" data-v-7daadcc9>}</span></div><div data-v-7daadcc9><span class="function" data-v-7daadcc9>function </span><span class="word" data-v-7daadcc9>Man</span> <span class="brackets" data-v-7daadcc9>(){}</span></div><br data-v-7daadcc9><div class="comment" data-v-7daadcc9>// Man 通過原型來繼承 Person</div><div data-v-7daadcc9><span class="word" data-v-7daadcc9>Man.prototype</span><span class="then" data-v-7daadcc9>=</span> <span class="brackets" data-v-7daadcc9>Person</span></div><br data-v-7daadcc9><div data-v-7daadcc9><span class="word" data-v-7daadcc9>console.</span><span class="variable" data-v-7daadcc9>log</span> <span class="brackets" data-v-7daadcc9>(</span><span class="word" data-v-7daadcc9>Man.prototype</span><span class="brackets" data-v-7daadcc9>)</span><span class="comment" data-v-7daadcc9>//看有沒有constructor</span></div><div class="comment" data-v-7daadcc9>// 沒有 , 因為 Person 是 物件 形式</div><div class="comment" data-v-7daadcc9>// 直接進行覆蓋 , 覆蓋完後指不回來了</div><br data-v-7daadcc9><br data-v-7daadcc9><div class="comment" data-v-7daadcc9>// Man 通過原型來繼承 Person</div><div data-v-7daadcc9><span class="word" data-v-7daadcc9>Man.prototype</span><span class="then" data-v-7daadcc9>=</span> <span class="brackets" data-v-7daadcc9>Person</span></div><br data-v-7daadcc9><div data-v-7daadcc9><span class="number" data-v-7daadcc9>!指回原來的構造函數! . . . constructor</span></div><br data-v-7daadcc9><div data-v-7daadcc9><span class="word" data-v-7daadcc9>Man.prototype.</span><span class="function" data-v-7daadcc9>constructor</span><span class="then" data-v-7daadcc9>=</span> <span class="word" data-v-7daadcc9>Man</span></div><div data-v-7daadcc9><span class="word" data-v-7daadcc9>console.</span><span class="variable" data-v-7daadcc9>log</span> <span class="brackets" data-v-7daadcc9>(</span><span class="word" data-v-7daadcc9>Man.prototype</span><span class="brackets" data-v-7daadcc9>)</span><span class="comment" data-v-7daadcc9>//有constructor</span></div><br data-v-7daadcc9><br data-v-7daadcc9><br data-v-7daadcc9><br data-v-7daadcc9><div data-v-7daadcc9><span class="function" data-v-7daadcc9>function </span><span class="word" data-v-7daadcc9>Woman</span> <span class="brackets" data-v-7daadcc9>(){}</span></div><div data-v-7daadcc9><span class="word" data-v-7daadcc9>Woman.prototype</span><span class="then" data-v-7daadcc9>=</span> <span class="brackets" data-v-7daadcc9>Person</span></div><div data-v-7daadcc9><span class="word" data-v-7daadcc9>Woman.prototype.</span><span class="function" data-v-7daadcc9>constructor</span><span class="then" data-v-7daadcc9>=</span> <span class="word" data-v-7daadcc9>Woman</span></div><div data-v-7daadcc9><span class="function" data-v-7daadcc9>const </span> <span class="word" data-v-7daadcc9>p</span><span class="then" data-v-7daadcc9>=</span> <span class="then" data-v-7daadcc9>new </span><span class="word" data-v-7daadcc9>Woman</span> <span class="brackets" data-v-7daadcc9>()</span></div><div data-v-7daadcc9><span class="word" data-v-7daadcc9>console.</span><span class="variable" data-v-7daadcc9>log</span> <span class="brackets" data-v-7daadcc9>(</span><span class="word" data-v-7daadcc9>p</span> <span class="brackets" data-v-7daadcc9>)</span><span class="comment" data-v-7daadcc9>//看到constructor指回Person</span></div><br data-v-7daadcc9><br data-v-7daadcc9><br data-v-7daadcc9><br data-v-7daadcc9><p data-v-7daadcc9># 我除了繼承 父 的屬性 還想添加方法</p><br data-v-7daadcc9><div data-v-7daadcc9><span class="word" data-v-7daadcc9>Woman.prototype.</span><span class="variable" data-v-7daadcc9>baby</span> <span class="then" data-v-7daadcc9>=</span><span class="function" data-v-7daadcc9>function </span><span class="brackets" data-v-7daadcc9>(){</span></div><div class="padTwo VSL" data-v-7daadcc9><span class="word" data-v-7daadcc9>console.</span><span class="variable" data-v-7daadcc9>log</span> <span class="brackets" data-v-7daadcc9>(</span><span class="word" data-v-7daadcc9>&quot;baby&quot;</span> <span class="brackets" data-v-7daadcc9>)</span><div data-v-7daadcc9></div></div><div data-v-7daadcc9><span class="brackets" data-v-7daadcc9>}</span></div><br data-v-7daadcc9><div data-v-7daadcc9><span class="function" data-v-7daadcc9>const </span><span class="word" data-v-7daadcc9>red</span> <span class="then" data-v-7daadcc9>=</span><span class="then" data-v-7daadcc9>new </span><span class="brackets" data-v-7daadcc9>Woman</span><span class="brackets" data-v-7daadcc9>()</span></div><div data-v-7daadcc9><span class="word" data-v-7daadcc9>console.</span><span class="variable" data-v-7daadcc9>log</span> <span class="brackets" data-v-7daadcc9>(</span><span class="word" data-v-7daadcc9>red</span> <span class="brackets" data-v-7daadcc9>)</span><span class="comment" data-v-7daadcc9>//看[[Prototype]]看到有baby方法</span></div><br data-v-7daadcc9><div data-v-7daadcc9><span class="comment" data-v-7daadcc9>// 我想 Man 沒有添加 baby 方法</span></div><div data-v-7daadcc9><span class="function" data-v-7daadcc9>const </span><span class="word" data-v-7daadcc9>wayne</span> <span class="then" data-v-7daadcc9>=</span><span class="then" data-v-7daadcc9>new </span> <span class="brackets" data-v-7daadcc9>Man</span><span class="brackets" data-v-7daadcc9>()</span></div><div data-v-7daadcc9><span class="word" data-v-7daadcc9>console.</span><span class="variable" data-v-7daadcc9>log</span> <span class="brackets" data-v-7daadcc9>(</span><span class="word" data-v-7daadcc9>wayne</span> <span class="brackets" data-v-7daadcc9>)</span></div><div data-v-7daadcc9><span class="comment" data-v-7daadcc9>// 看 [[Prototype]] 也有 baby 方法</span></div><br data-v-7daadcc9><p data-v-7daadcc9># 為什麼?</p><p data-v-7daadcc9>因為他們 2 個的 原型 都是 繼承 Person</p><br data-v-7daadcc9><br data-v-7daadcc9><div class="dis" data-v-7daadcc9><div data-v-7daadcc9><br data-v-7daadcc9><div data-v-7daadcc9><span class="word" data-v-7daadcc9>Woman.prototype</span><span class="then" data-v-7daadcc9>=</span><span class="brackets" data-v-7daadcc9>Person</span></div><br data-v-7daadcc9><div data-v-7daadcc9><span class="word" data-v-7daadcc9>Man.prototype</span><span class="then" data-v-7daadcc9>=</span><span class="brackets" data-v-7daadcc9>Person</span></div></div><div class="padL20" data-v-7daadcc9> 棧 <div data-v-7daadcc9>→0x1111→</div><br data-v-7daadcc9><div data-v-7daadcc9>→0x2222↗</div></div><div class="padL20" data-v-7daadcc9> 堆 <div data-v-7daadcc9><span class="function" data-v-7daadcc9>const </span><span class="word" data-v-7daadcc9>Person</span> <span class="then" data-v-7daadcc9>=</span><span class="brackets" data-v-7daadcc9>{</span></div><div class="padTwo VSL" data-v-7daadcc9><span class="word" data-v-7daadcc9>eyes:</span> <span class="number" data-v-7daadcc9>2,</span><div data-v-7daadcc9></div></div><div class="padTwo VSL" data-v-7daadcc9><span class="word" data-v-7daadcc9>baby:</span><span class="function" data-v-7daadcc9>function </span><span class="brackets" data-v-7daadcc9>(){}</span><div data-v-7daadcc9></div></div><div data-v-7daadcc9><span class="brackets" data-v-7daadcc9>}</span></div><br data-v-7daadcc9><br data-v-7daadcc9><br data-v-7daadcc9></div></div><p data-v-7daadcc9># 我要 Woman &amp; Man 不互相影響 . . . &gt; 給他們不同的對象</p><br data-v-7daadcc9><div data-v-7daadcc9><span class="function" data-v-7daadcc9>const </span><span class="word" data-v-7daadcc9>Person1</span> <span class="then" data-v-7daadcc9>=</span><span class="brackets" data-v-7daadcc9>{</span></div><div class="padTwo VSL" data-v-7daadcc9><span class="word" data-v-7daadcc9>eyes:</span> <span class="number" data-v-7daadcc9>2,</span><div data-v-7daadcc9></div></div><div data-v-7daadcc9><span class="brackets" data-v-7daadcc9>}</span></div><div data-v-7daadcc9><span class="function" data-v-7daadcc9>const </span><span class="word" data-v-7daadcc9>Person2</span> <span class="then" data-v-7daadcc9>=</span><span class="brackets" data-v-7daadcc9>{</span></div><div class="padTwo VSL" data-v-7daadcc9><span class="word" data-v-7daadcc9>eyes:</span> <span class="number" data-v-7daadcc9>2,</span><div data-v-7daadcc9></div></div><div data-v-7daadcc9><span class="brackets" data-v-7daadcc9>}</span></div><br data-v-7daadcc9><div data-v-7daadcc9><span class="word" data-v-7daadcc9>Woman.prototype</span><span class="then" data-v-7daadcc9>=</span><span class="brackets" data-v-7daadcc9>Person1</span></div><div data-v-7daadcc9><span class="word" data-v-7daadcc9>Man.prototype</span><span class="then" data-v-7daadcc9>=</span><span class="brackets" data-v-7daadcc9>Person2</span></div><br data-v-7daadcc9><br data-v-7daadcc9><p data-v-7daadcc9># 我要 內容一樣 但是 物件 結構不一樣 . . . &gt; 構造函數</p><p data-v-7daadcc9># 構造函數 new 出來的對象 結構一樣 , 但是 對象 不一樣</p><br data-v-7daadcc9><div class="comment" data-v-7daadcc9>//const Person1 = { eyes:2 }</div><div class="comment" data-v-7daadcc9>//const Person2 = { eyes:2 }</div><div data-v-7daadcc9><span class="function" data-v-7daadcc9>function </span><span class="brackets" data-v-7daadcc9>Person</span><span class="brackets" data-v-7daadcc9>(){</span></div><div class="padTwo VSL" data-v-7daadcc9><span class="then" data-v-7daadcc9>this.</span> <span class="word" data-v-7daadcc9>eyes</span><span class="then" data-v-7daadcc9>=</span> <span class="number" data-v-7daadcc9>2</span><div data-v-7daadcc9></div></div><div data-v-7daadcc9><span class="brackets" data-v-7daadcc9>}</span></div><div data-v-7daadcc9><span class="word" data-v-7daadcc9>Woman.prototype</span><span class="then" data-v-7daadcc9>=</span> <span class="then" data-v-7daadcc9>new </span><span class="brackets" data-v-7daadcc9>Person</span><span class="brackets" data-v-7daadcc9>()</span></div><div class="comment" data-v-7daadcc9>// new Person 新增一個物件</div><div class="comment" data-v-7daadcc9>// 這個物件就是 我們寫的 結構 eyes:2</div><div data-v-7daadcc9><span class="word" data-v-7daadcc9>Man.prototype</span><span class="then" data-v-7daadcc9>=</span> <span class="then" data-v-7daadcc9>new </span><span class="brackets" data-v-7daadcc9>Person</span><span class="brackets" data-v-7daadcc9>()</span></div><div class="comment" data-v-7daadcc9>// new Person 又 新增一個物件</div><div class="comment" data-v-7daadcc9> // 這個物件 結構一樣 內容一樣 這 2 個 物件 不一樣 </div><br data-v-7daadcc9><div data-v-7daadcc9><span class="word" data-v-7daadcc9>Woman.prototype.</span><span class="variable" data-v-7daadcc9>baby</span> <span class="then" data-v-7daadcc9>=</span><span class="function" data-v-7daadcc9>function </span><span class="brackets" data-v-7daadcc9>(){</span></div><div class="padTwo VSL" data-v-7daadcc9><span class="word" data-v-7daadcc9>console.</span><span class="variable" data-v-7daadcc9>log</span> <span class="brackets" data-v-7daadcc9>(</span><span class="src" data-v-7daadcc9>&quot;baby&quot;</span> <span class="brackets" data-v-7daadcc9>)</span><div data-v-7daadcc9></div></div><div data-v-7daadcc9><span class="brackets" data-v-7daadcc9>}</span></div><br data-v-7daadcc9><p data-v-7daadcc9># 以上 原型繼承</p><p data-v-7daadcc9> 需求: Man Woman 不要用同一個物件, 但不同物件裡面包含相同屬性和方法 </p><p data-v-7daadcc9>用: 構造函數</p><p data-v-7daadcc9>new 每次都會創建一個新物件</p><br data-v-7daadcc9><br data-v-7daadcc9><br data-v-7daadcc9><br data-v-7daadcc9><p data-v-7daadcc9>1. 換成 構造函數</p><p data-v-7daadcc9>2. prototype 不再是物件名了, 用 new Person 的方法</p><br data-v-7daadcc9><br data-v-7daadcc9><br data-v-7daadcc9><br data-v-7daadcc9><p data-v-7daadcc9>父構造函數 (父類) . . . 子構造函數 (子類)</p><p data-v-7daadcc9>function Person(){} 父構造函數</p><p data-v-7daadcc9>Woman 子構造函數</p><br data-v-7daadcc9><p data-v-7daadcc9>子類的原型 = new 父類</p><div data-v-7daadcc9><span class="word" data-v-7daadcc9>Woman.prototype</span><span class="then" data-v-7daadcc9>=</span> <span class="then" data-v-7daadcc9>new </span><span class="brackets" data-v-7daadcc9>Person</span><span class="brackets" data-v-7daadcc9>()</span></div><br data-v-7daadcc9><br data-v-7daadcc9><p data-v-7daadcc9>JS 繼承很多方法</p><p data-v-7daadcc9>Java 用 class 類</p><p data-v-7daadcc9>後面 JS 引入 class</p></div><div id="threeprototype006" class="articleCardTitle cor36 fz34" data-v-7daadcc9> 6.6 原型鏈 </div><p class="fz28" data-v-7daadcc9>作用域鏈 一層一層 查找 變量在哪個作用域</p><p class="fz28" data-v-7daadcc9>原型鏈 查找 原型</p><div class="bgcVS" data-v-7daadcc9><div class="fz28" data-v-7daadcc9><span class="cor29" data-v-7daadcc9>. . . </span><span class="bor pad204" data-v-7daadcc9> 構造函數</span> → ← constructor <span class="bor pad204" data-v-7daadcc9> 原型 prototype 共享屬性方法 </span></div><div class="fz28" data-v-7daadcc9><span class="cor29" data-v-7daadcc9> . . . . . . . . . </span> ↓ </div><div class="fz28" data-v-7daadcc9> constructor ↑ <span class="cor29" data-v-7daadcc9> . . . . . . . . . . . </span> ↗ __proto__ 也是 [[Prototype]] </div><div class="fz28 pad20 disInl bor" data-v-7daadcc9><span class="" data-v-7daadcc9>實例對象 new Person()</span></div><br data-v-7daadcc9><br data-v-7daadcc9><br data-v-7daadcc9><br data-v-7daadcc9><br data-v-7daadcc9><br data-v-7daadcc9><div class="fz28" data-v-7daadcc9><span class="cor29" data-v-7daadcc9>. . . </span><span class="bor pad204" data-v-7daadcc9> Person</span> → ← constructor <span class="bor pad204" data-v-7daadcc9> Person.prototype </span></div><div class="fz28" data-v-7daadcc9><span class="cor29" data-v-7daadcc9> . . . . . . . . . </span> ↓ </div><div class="fz28" data-v-7daadcc9> constructor ↑ <span class="cor29" data-v-7daadcc9> . . . . . . . . . . . </span> ↗ __proto__ </div><div class="fz28" data-v-7daadcc9><div class="disInl bor pad20" data-v-7daadcc9><span data-v-7daadcc9>實例對象 new Person()</span><br data-v-7daadcc9><span data-v-7daadcc9>p</span><br data-v-7daadcc9><span data-v-7daadcc9>p.__proto__</span></div></div><br data-v-7daadcc9><div data-v-7daadcc9><span class="word" data-v-7daadcc9>console.</span><span class="variable" data-v-7daadcc9>log</span> <span class="brackets" data-v-7daadcc9>(</span><span class="word" data-v-7daadcc9>p.__proto__</span><span class="then" data-v-7daadcc9>===</span><span class="word" data-v-7daadcc9>Person.prototype</span><span class="brackets" data-v-7daadcc9>)</span><span class="comment" data-v-7daadcc9>//true</span></div><div data-v-7daadcc9><span class="word" data-v-7daadcc9>console.</span><span class="variable" data-v-7daadcc9>log</span> <span class="brackets" data-v-7daadcc9>(</span><span class="word" data-v-7daadcc9>Person.prototype</span><span class="brackets" data-v-7daadcc9>) </span><span class="comment" data-v-7daadcc9>// 發現裡面也有[[Prototype]]</span></div><div data-v-7daadcc9><span class="comment" data-v-7daadcc9>//原型對象也是對象, 只要是對象 都有 __proto__</span></div><div data-v-7daadcc9><span class="comment" data-v-7daadcc9>// 他指向誰?</span></div><div data-v-7daadcc9><span class="comment" data-v-7daadcc9>// 指向 object</span></div><div data-v-7daadcc9><span class="word" data-v-7daadcc9>console.</span><span class="variable" data-v-7daadcc9>log</span> <span class="brackets" data-v-7daadcc9>(</span><span class="word" data-v-7daadcc9>Person.prototype.__proto__</span><span class="brackets" data-v-7daadcc9>)</span></div><div data-v-7daadcc9><span class="comment" data-v-7daadcc9>// 這個 __proto__ 指向誰?</span></div><div data-v-7daadcc9><span class="comment" data-v-7daadcc9>// 對象原型 指向 原型對象</span></div><br data-v-7daadcc9><div data-v-7daadcc9><span class="comment" data-v-7daadcc9>// 而 Person.prototype 屬於原型對象</span></div><div data-v-7daadcc9><span class="comment" data-v-7daadcc9>// 原型對象裡面有一個對象原型</span></div><div data-v-7daadcc9><span class="comment" data-v-7daadcc9>// 這個 對象原型 指向 原型對象</span></div><br data-v-7daadcc9><div data-v-7daadcc9><span class="comment" data-v-7daadcc9>// 那他 指向 誰的 原型對象?</span></div><br data-v-7daadcc9><br data-v-7daadcc9><p data-v-7daadcc9>構造函數 Object</p><div data-v-7daadcc9><span class="function" data-v-7daadcc9>function </span><span class="brackets" data-v-7daadcc9>Object</span><span class="brackets" data-v-7daadcc9>(){}</span></div><p data-v-7daadcc9>構造函數 就有 原型對象</p><br data-v-7daadcc9><div data-v-7daadcc9><span class="word" data-v-7daadcc9>console.</span><span class="variable" data-v-7daadcc9>log</span> <span class="brackets" data-v-7daadcc9>(</span><span class="word" data-v-7daadcc9>object</span> <span class="brackets" data-v-7daadcc9>)</span><span class="comment" data-v-7daadcc9>//是Object(){[native code]}</span></div><div data-v-7daadcc9><span class="word" data-v-7daadcc9>console.</span><span class="variable" data-v-7daadcc9>log</span> <span class="brackets" data-v-7daadcc9>(</span><span class="word" data-v-7daadcc9>object.prototype</span><span class="brackets" data-v-7daadcc9>)</span><span class="comment" data-v-7daadcc9>//</span></div><br data-v-7daadcc9><p data-v-7daadcc9>原型鏈</p><div class="fz28" data-v-7daadcc9><span class="cor29" data-v-7daadcc9> . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . </span><div class="disInl bor pad20" data-v-7daadcc9><span data-v-7daadcc9>null</span></div></div><div class="fz28" data-v-7daadcc9><span class="cor29" data-v-7daadcc9> . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .</span> ↗ __proto__ </div><br data-v-7daadcc9><div class="fz28" data-v-7daadcc9><span class="cor29" data-v-7daadcc9>. . . . . . . . . . . </span><span class="bor pad204" data-v-7daadcc9> Object</span> → ← Object.constructor <div class="disInl bor pad20" data-v-7daadcc9><span data-v-7daadcc9>Object.prototype</span><br data-v-7daadcc9><span data-v-7daadcc9>Object.prototype.__proto__</span></div></div><br data-v-7daadcc9><div class="fz28" data-v-7daadcc9><span class="cor29" data-v-7daadcc9> . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .</span> ↗ __proto__ </div><br data-v-7daadcc9><div class="fz28" data-v-7daadcc9><span class="cor29" data-v-7daadcc9>. . . </span><span class="bor pad204" data-v-7daadcc9> Person</span> → ← constructor <div class="disInl bor pad20" data-v-7daadcc9><span data-v-7daadcc9> Person.prototype </span><br data-v-7daadcc9><span data-v-7daadcc9>Person.prototype.__proto__</span></div></div><div class="fz28" data-v-7daadcc9><span class="cor29" data-v-7daadcc9> . . . . . . . . . </span> ↓ </div><div class="fz28" data-v-7daadcc9> constructor ↑ <span class="cor29" data-v-7daadcc9> . . . . . . . . . . . </span> ↗ __proto__ </div><div class="fz28" data-v-7daadcc9><div class="disInl bor pad20" data-v-7daadcc9><span data-v-7daadcc9>實例對象 new Person()</span><br data-v-7daadcc9><span data-v-7daadcc9>p</span><br data-v-7daadcc9><span data-v-7daadcc9>p.__proto__</span></div></div><br data-v-7daadcc9><div data-v-7daadcc9><span class="word" data-v-7daadcc9>console.</span><span class="variable" data-v-7daadcc9>log</span> <span class="brackets" data-v-7daadcc9>(</span><span class="word" data-v-7daadcc9>Person.prototype.__proto__</span><span class="then" data-v-7daadcc9>===</span><span class="brackets" data-v-7daadcc9>Object</span><span class="word" data-v-7daadcc9>.prototype</span><span class="brackets" data-v-7daadcc9>) </span><span class="comment" data-v-7daadcc9>// true</span></div><div data-v-7daadcc9><span class="word" data-v-7daadcc9>console.</span><span class="variable" data-v-7daadcc9>log</span> <span class="brackets" data-v-7daadcc9>(</span><span class="brackets" data-v-7daadcc9>Object</span><span class="word" data-v-7daadcc9>.prototype.__proto__</span><span class="brackets" data-v-7daadcc9>) </span><span class="comment" data-v-7daadcc9>// null</span></div></div><p class="fz28 cor36" data-v-7daadcc9>原型鏈</p><p class="fz28" data-v-7daadcc9> 基於 原型對象 的 繼承 使得不同 構造函數的 原型對象 關聯在一起, 並且這種關聯的關係是一種 鏈狀的結構 </p><p class="fz28" data-v-7daadcc9>1. 只要是 物件 就有 __proto__</p><p class="fz28" data-v-7daadcc9> 2. 只要是 原型對象 裡面就有 constructor 指向 創造我的 構造函數 </p><br data-v-7daadcc9><br data-v-7daadcc9><p class="fz28 cor36" data-v-7daadcc9>原型鏈 查找規則</p><p class="fz28" data-v-7daadcc9> 1. 當訪問一個物件的屬性&amp;方法 , 先找 物件自身 有沒有 該屬性 </p><p class="fz28" data-v-7daadcc9> 2. 沒有 . . &gt; 找 它的 原型 ( __proto__ 指向的 prototype 原型對象 ) </p><p class="fz28" data-v-7daadcc9> 3. 沒有 . . &gt; 找 原型對象的原型 ( Object 的原型對象 ) </p><p class="fz28" data-v-7daadcc9>4. 依此類推 一直找到 Object 為止 ( null )</p><br data-v-7daadcc9><br data-v-7daadcc9><p class="fz28" data-v-7daadcc9> : 首先任何物件都會有屬於它的隱藏屬性下滑線proto屬性, 這個隱藏屬性就會指向它的構造函數的prototype, 這時我們就可以說這個物件的原型就是它的構造函數的prototype, 這就是原型, 然後原型鏈就是比如A的原型是B, B的原型是C, 這樣一條像鏈式的就稱為原型鏈 </p><br data-v-7daadcc9><p class="fz28" data-v-7daadcc9> :定義一個物件A,它的原型的地址對應著object.prototype,object.prototype它的原型又會到了null 這樣一條像鏈式的就稱為原型鏈 </p><br data-v-7daadcc9><p class="fz28 cor36" data-v-7daadcc9>instanceof</p><p class="fz28" data-v-7daadcc9> 可用 instanceof 檢測構造函數的 prototype 屬性是否出現在某個實例對象的原型鏈上 </p><p class="fz28" data-v-7daadcc9>他 屬不屬於 另外一個 構造函數</p><div class="bgcVS" data-v-7daadcc9><div data-v-7daadcc9><span class="function" data-v-7daadcc9>function </span><span class="word" data-v-7daadcc9>Person</span><span class="brackets" data-v-7daadcc9>(){}</span></div><div data-v-7daadcc9><span class="function" data-v-7daadcc9>const </span> <span class="word" data-v-7daadcc9>p</span><span class="then" data-v-7daadcc9>=</span> <span class="then" data-v-7daadcc9>new </span><span class="word" data-v-7daadcc9>Person</span> <span class="brackets" data-v-7daadcc9>()</span></div><div data-v-7daadcc9><span class="word" data-v-7daadcc9>console.</span><span class="variable" data-v-7daadcc9>log</span> <span class="brackets" data-v-7daadcc9>(</span><span class="word" data-v-7daadcc9>p</span> <span class="word" data-v-7daadcc9>instanceof </span><span class="brackets" data-v-7daadcc9>Person</span><span class="brackets" data-v-7daadcc9>) </span><span class="comment" data-v-7daadcc9>// true</span></div><div data-v-7daadcc9><span class="word" data-v-7daadcc9>console.</span><span class="variable" data-v-7daadcc9>log</span> <span class="brackets" data-v-7daadcc9>(</span><span class="word" data-v-7daadcc9>p</span> <span class="word" data-v-7daadcc9>instanceof </span><span class="brackets" data-v-7daadcc9>Object</span><span class="brackets" data-v-7daadcc9>) </span><span class="comment" data-v-7daadcc9>// true</span></div><div data-v-7daadcc9><span class="word" data-v-7daadcc9>console.</span><span class="variable" data-v-7daadcc9>log</span> <span class="brackets" data-v-7daadcc9>(</span><span class="word" data-v-7daadcc9>p </span> <span class="word" data-v-7daadcc9>instanceof </span><span class="brackets" data-v-7daadcc9>Array</span><span class="brackets" data-v-7daadcc9>) </span><span class="comment" data-v-7daadcc9>// false</span></div><div data-v-7daadcc9><span class="word" data-v-7daadcc9>console.</span><span class="variable" data-v-7daadcc9>log</span> <span class="brackets" data-v-7daadcc9>(</span><span class="brackets" data-v-7daadcc9>Array </span><span class="word" data-v-7daadcc9>instanceof </span><span class="brackets" data-v-7daadcc9>Object</span><span class="brackets" data-v-7daadcc9>)</span><span class="comment" data-v-7daadcc9>//true</span></div><br data-v-7daadcc9><p data-v-7daadcc9>萬物皆物件</p></div><div id="threeprototype007" class="articleCardTitle cor36 fz34" data-v-7daadcc9> 6.7 class </div><div class="bgcVS" data-v-7daadcc9><p data-v-7daadcc9>過去, 函數有兩種調用方法</p><br data-v-7daadcc9><div data-v-7daadcc9><span class="function" data-v-7daadcc9>function </span><span class="word" data-v-7daadcc9>A</span> <span class="brackets" data-v-7daadcc9>(){}</span></div><div data-v-7daadcc9><span class="word" data-v-7daadcc9>A</span> <span class="brackets" data-v-7daadcc9>()</span><span class="comment" data-v-7daadcc9>//直接調用</span></div><div data-v-7daadcc9><span class="then" data-v-7daadcc9>new </span> <span class="word" data-v-7daadcc9>A</span><span class="brackets" data-v-7daadcc9>()</span><span class="comment" data-v-7daadcc9>//做為構造函數調用</span></div><br data-v-7daadcc9><p data-v-7daadcc9>這種做法無法從定義上明確函數用途 , ES6 構造函數</p><br data-v-7daadcc9><div data-v-7daadcc9><span class="comment" data-v-7daadcc9>//舊的寫法</span></div><div data-v-7daadcc9><span class="function" data-v-7daadcc9>function </span><span class="word" data-v-7daadcc9>User</span> <span class="brackets" data-v-7daadcc9>(</span><span class="word" data-v-7daadcc9>firstName,lastName</span><span class="brackets" data-v-7daadcc9>){</span></div><div class="padTwo VSL" data-v-7daadcc9><span class="then" data-v-7daadcc9>this</span><span class="word" data-v-7daadcc9>.firstName</span> <span class="then" data-v-7daadcc9>=</span><span class="word" data-v-7daadcc9>firstName;</span><div data-v-7daadcc9><span class="then" data-v-7daadcc9>this</span><span class="word" data-v-7daadcc9>.lastName</span> <span class="then" data-v-7daadcc9>=</span><span class="word" data-v-7daadcc9>lastName;</span></div><div data-v-7daadcc9><span class="then" data-v-7daadcc9>this</span><span class="word" data-v-7daadcc9>.fullName</span> <span class="then" data-v-7daadcc9>=</span><span class="src" data-v-7daadcc9>`${</span><span class="word" data-v-7daadcc9>firstName</span><span class="src" data-v-7daadcc9>} ${</span><span class="word" data-v-7daadcc9>lastName</span> <span class="src" data-v-7daadcc9>}`</span></div><div data-v-7daadcc9></div></div><div data-v-7daadcc9><span class="brackets" data-v-7daadcc9>}</span></div><div data-v-7daadcc9><span class="comment" data-v-7daadcc9>//靜態方法</span></div><div data-v-7daadcc9><span class="word" data-v-7daadcc9>User.isUser</span> <span class="then" data-v-7daadcc9>=</span><span class="function" data-v-7daadcc9>function </span><span class="brackets" data-v-7daadcc9>(</span> <span class="word" data-v-7daadcc9>u</span><span class="brackets" data-v-7daadcc9>){</span></div><div class="padTwo VSL" data-v-7daadcc9><span class="then" data-v-7daadcc9>return !! </span> <span class="word" data-v-7daadcc9>u </span><span class="then" data-v-7daadcc9>&amp;&amp; !! </span><span class="word" data-v-7daadcc9>u.fullName</span><div data-v-7daadcc9></div></div><div data-v-7daadcc9><span class="brackets" data-v-7daadcc9>}</span></div><div data-v-7daadcc9><span class="comment" data-v-7daadcc9>//調用靜態方法</span></div><div data-v-7daadcc9><span class="word" data-v-7daadcc9>User.isUser</span><span class="brackets" data-v-7daadcc9>(</span> <span class="word" data-v-7daadcc9>xxx</span><span class="brackets" data-v-7daadcc9>)</span></div><div data-v-7daadcc9><span class="comment" data-v-7daadcc9>//原型方法 (也叫 實例方法)</span></div><div data-v-7daadcc9><span class="word" data-v-7daadcc9>User.prototype.sayHi</span><span class="then" data-v-7daadcc9>=</span><span class="function" data-v-7daadcc9>function </span><span class="brackets" data-v-7daadcc9>(){</span></div><div class="padTwo VSL" data-v-7daadcc9><span class="word" data-v-7daadcc9>console</span><span class="variable" data-v-7daadcc9>.log</span><span class="brackets" data-v-7daadcc9>(</span> <span class="src" data-v-7daadcc9>`Hi, </span><span class="then" data-v-7daadcc9>${</span> <span class="then" data-v-7daadcc9>this</span><span class="word" data-v-7daadcc9>.fullName</span> <span class="src" data-v-7daadcc9>}`</span><span class="word" data-v-7daadcc9></span> <span class="brackets" data-v-7daadcc9>)</span><div data-v-7daadcc9></div></div><div data-v-7daadcc9><span class="brackets" data-v-7daadcc9>}</span></div><div data-v-7daadcc9><span class="comment" data-v-7daadcc9>//調用原型方法 (實例方法)</span></div><div data-v-7daadcc9><span class="function" data-v-7daadcc9>const </span> <span class="word" data-v-7daadcc9>u</span><span class="then" data-v-7daadcc9>=</span> <span class="then" data-v-7daadcc9>new </span><span class="word" data-v-7daadcc9>User</span> <span class="brackets" data-v-7daadcc9>()</span></div><div data-v-7daadcc9><span class="word" data-v-7daadcc9>u.sayHi</span> <span class="brackets" data-v-7daadcc9>()</span></div><br data-v-7daadcc9><br data-v-7daadcc9><p data-v-7daadcc9>es6 之後建議寫法 class 效果一樣</p><br data-v-7daadcc9><div data-v-7daadcc9><span class="function" data-v-7daadcc9>class </span><span class="word" data-v-7daadcc9>User</span> <span class="brackets" data-v-7daadcc9>{</span></div><div class="padTwo VSL" data-v-7daadcc9><div data-v-7daadcc9><span class="comment" data-v-7daadcc9>//constructor表示他的構造器</span></div><span class="function" data-v-7daadcc9>constructor</span><span class="brackets" data-v-7daadcc9>(</span><span class="word" data-v-7daadcc9>firstName,lastName</span><span class="brackets" data-v-7daadcc9>){</span><div data-v-7daadcc9></div><div class="padTwo VSL" data-v-7daadcc9><span class="then" data-v-7daadcc9>this</span><span class="word" data-v-7daadcc9>.firstName</span><span class="then" data-v-7daadcc9>=</span> <span class="word" data-v-7daadcc9>firstName;</span><div data-v-7daadcc9><span class="then" data-v-7daadcc9>this</span><span class="word" data-v-7daadcc9>.lastName</span><span class="then" data-v-7daadcc9>=</span><span class="word" data-v-7daadcc9>lastName;</span></div><div data-v-7daadcc9><span class="then" data-v-7daadcc9>this</span><span class="word" data-v-7daadcc9>.fullName</span><span class="then" data-v-7daadcc9>=</span> <span class="src" data-v-7daadcc9>`${ </span><span class="word" data-v-7daadcc9>firstName </span><span class="src" data-v-7daadcc9>} ${</span><span class="word" data-v-7daadcc9>lastName </span><span class="src" data-v-7daadcc9>}`;</span></div><div data-v-7daadcc9></div></div><div data-v-7daadcc9><span class="brackets" data-v-7daadcc9>}</span></div><div data-v-7daadcc9><span class="comment" data-v-7daadcc9>//通過關鍵字static表示靜態方法</span></div><div data-v-7daadcc9><span class="word" data-v-7daadcc9>static</span><span class="word" data-v-7daadcc9>isUser</span><span class="brackets" data-v-7daadcc9>(</span> <span class="word" data-v-7daadcc9>u</span><span class="brackets" data-v-7daadcc9>){</span></div><div class="padTwo VSL" data-v-7daadcc9><span class="then" data-v-7daadcc9>return !!</span><span class="word" data-v-7daadcc9>u </span> <span class="then" data-v-7daadcc9>&amp;&amp; !!</span><span class="word" data-v-7daadcc9>u.fullName</span><div data-v-7daadcc9></div></div><div data-v-7daadcc9><span class="brackets" data-v-7daadcc9>}</span></div><div data-v-7daadcc9><span class="word" data-v-7daadcc9>sayHi</span><span class="brackets" data-v-7daadcc9>(){</span></div><div class="padTwo VSL" data-v-7daadcc9><span class="word" data-v-7daadcc9>console</span><span class="variable" data-v-7daadcc9>.log</span><span class="brackets" data-v-7daadcc9>(</span> <span class="src" data-v-7daadcc9>`Hi, </span><span class="then" data-v-7daadcc9>${</span> <span class="then" data-v-7daadcc9>this</span><span class="word" data-v-7daadcc9>.fullName</span> <span class="src" data-v-7daadcc9>}`</span><span class="word" data-v-7daadcc9></span> <span class="brackets" data-v-7daadcc9>)</span><div data-v-7daadcc9></div></div><div data-v-7daadcc9><span class="brackets" data-v-7daadcc9>}</span></div></div><div data-v-7daadcc9><span class="brackets" data-v-7daadcc9>}</span></div><br data-v-7daadcc9><br data-v-7daadcc9><p data-v-7daadcc9>範例2 繼承</p><br data-v-7daadcc9><div data-v-7daadcc9><span class="function" data-v-7daadcc9>function </span><span class="word" data-v-7daadcc9>Animal</span> <span class="brackets" data-v-7daadcc9>(</span><span class="word" data-v-7daadcc9>type,name</span><span class="brackets" data-v-7daadcc9>){</span></div><div class="padTwo VSL" data-v-7daadcc9><span class="then" data-v-7daadcc9>this</span> <span class="word" data-v-7daadcc9>.type</span><span class="then" data-v-7daadcc9>=</span> <span class="word" data-v-7daadcc9>type;</span><div data-v-7daadcc9><span class="then" data-v-7daadcc9>this</span> <span class="word" data-v-7daadcc9>.name</span><span class="then" data-v-7daadcc9>=</span> <span class="word" data-v-7daadcc9>name;</span></div><div data-v-7daadcc9></div></div><div data-v-7daadcc9><span class="brackets" data-v-7daadcc9>}</span></div><br data-v-7daadcc9><div data-v-7daadcc9><span class="word" data-v-7daadcc9>Animal.prototype.intro</span><span class="then" data-v-7daadcc9>=</span><span class="function" data-v-7daadcc9>function </span><span class="brackets" data-v-7daadcc9>(){</span></div><div class="padTwo VSL" data-v-7daadcc9><span class="word" data-v-7daadcc9>console</span><span class="variable" data-v-7daadcc9>.log</span><span class="brackets" data-v-7daadcc9>(</span> <span class="src" data-v-7daadcc9>`I am ${</span><span class="then" data-v-7daadcc9>this</span> <span class="word" data-v-7daadcc9>.type</span><span class="src" data-v-7daadcc9>},name: ${</span><span class="then" data-v-7daadcc9>this</span> <span class="word" data-v-7daadcc9>.name</span><span class="src" data-v-7daadcc9>)`</span> <span class="brackets" data-v-7daadcc9>)</span><div data-v-7daadcc9></div></div><div data-v-7daadcc9><span class="brackets" data-v-7daadcc9>}</span></div><br data-v-7daadcc9><div data-v-7daadcc9><span class="function" data-v-7daadcc9>function </span><span class="word" data-v-7daadcc9>Human</span> <span class="brackets" data-v-7daadcc9>(</span><span class="word" data-v-7daadcc9>name</span> <span class="brackets" data-v-7daadcc9>){</span></div><div class="padTwo VSL" data-v-7daadcc9><span class="word" data-v-7daadcc9>Animal</span><span class="variable" data-v-7daadcc9>.call</span><span class="brackets" data-v-7daadcc9>(</span> <span class="then" data-v-7daadcc9>this</span><span class="then" data-v-7daadcc9>,</span> <span class="word" data-v-7daadcc9>&quot;人&quot;,</span><span class="word" data-v-7daadcc9>name</span> <span class="brackets" data-v-7daadcc9>);</span><div data-v-7daadcc9></div></div><div data-v-7daadcc9><span class="brackets" data-v-7daadcc9>}</span></div><br data-v-7daadcc9><div data-v-7daadcc9><span class="comment" data-v-7daadcc9>//設置繼承關係</span></div><div data-v-7daadcc9><span class="word" data-v-7daadcc9>Human.prototype</span><span class="then" data-v-7daadcc9>=</span> <span class="brackets" data-v-7daadcc9>Object</span><span class="word" data-v-7daadcc9>.create</span> <span class="brackets" data-v-7daadcc9>(</span><span class="word" data-v-7daadcc9>Animal.prototype</span><span class="brackets" data-v-7daadcc9>);</span></div><br data-v-7daadcc9><div data-v-7daadcc9><span class="comment" data-v-7daadcc9>//新的方式 //繼承 子構造函數 &amp; 父構造函數</span></div><div data-v-7daadcc9><span class="function" data-v-7daadcc9>class </span><span class="word" data-v-7daadcc9>Animal</span> <span class="brackets" data-v-7daadcc9>{ </span><span class="comment" data-v-7daadcc9>//父類</span></div><div class="padTwo VSL" data-v-7daadcc9><span class="function" data-v-7daadcc9>constructor</span><span class="brackets" data-v-7daadcc9>(</span><span class="word" data-v-7daadcc9>type,name</span><span class="brackets" data-v-7daadcc9>){</span><div data-v-7daadcc9></div><div class="padTwo VSL" data-v-7daadcc9><span class="then" data-v-7daadcc9>this</span> <span class="word" data-v-7daadcc9>.type</span><span class="then" data-v-7daadcc9>=</span> <span class="word" data-v-7daadcc9>type;</span><div data-v-7daadcc9><span class="then" data-v-7daadcc9>this</span><span class="word" data-v-7daadcc9>.name</span> <span class="then" data-v-7daadcc9>=</span><span class="word" data-v-7daadcc9>name;</span></div><div data-v-7daadcc9></div></div><div data-v-7daadcc9><span class="brackets" data-v-7daadcc9>}</span></div><br data-v-7daadcc9><div data-v-7daadcc9><span class="word" data-v-7daadcc9>intro</span><span class="brackets" data-v-7daadcc9>(){</span></div><div class="padTwo VSL" data-v-7daadcc9><span class="word" data-v-7daadcc9>console</span><span class="variable" data-v-7daadcc9>.log</span><span class="brackets" data-v-7daadcc9>(</span><span class="src" data-v-7daadcc9>`I am ${</span><span class="then" data-v-7daadcc9>this</span> <span class="word" data-v-7daadcc9>.type</span><span class="src" data-v-7daadcc9>},name: ${</span><span class="then" data-v-7daadcc9>this</span> <span class="word" data-v-7daadcc9>.name</span><span class="src" data-v-7daadcc9>)`</span> <span class="brackets" data-v-7daadcc9>)</span><div data-v-7daadcc9></div></div><div data-v-7daadcc9><span class="brackets" data-v-7daadcc9>}</span></div></div><div data-v-7daadcc9><span class="brackets" data-v-7daadcc9>}</span></div><br data-v-7daadcc9><div data-v-7daadcc9><span class="function" data-v-7daadcc9>class </span><span class="word" data-v-7daadcc9>Human </span><span class="function" data-v-7daadcc9>extends </span><span class="word" data-v-7daadcc9>Animal</span> <span class="brackets" data-v-7daadcc9>{ </span><span class="comment" data-v-7daadcc9>//extends 子類 去繼承 父類</span></div><div class="padTwo VSL" data-v-7daadcc9><span class="function" data-v-7daadcc9>constructor</span><span class="brackets" data-v-7daadcc9>(</span> <span class="word" data-v-7daadcc9>name</span><span class="brackets" data-v-7daadcc9>){</span><div data-v-7daadcc9></div><div class="padTwo VSL" data-v-7daadcc9><span class="function" data-v-7daadcc9>super </span><span class="brackets" data-v-7daadcc9>(</span> <span class="src" data-v-7daadcc9>&quot;人&quot;</span><span class="then" data-v-7daadcc9>,</span> <span class="word" data-v-7daadcc9>name</span><span class="brackets" data-v-7daadcc9>);</span><div data-v-7daadcc9></div></div><div data-v-7daadcc9><span class="brackets" data-v-7daadcc9>}</span></div></div><div data-v-7daadcc9><span class="brackets" data-v-7daadcc9>}</span></div></div><p class="fz28" data-v-7daadcc9></p><p class="fz28" data-v-7daadcc9></p><p class="fz28" data-v-7daadcc9></p><p class="fz28" data-v-7daadcc9></p><p class="fz28" data-v-7daadcc9></p><p class="fz28" data-v-7daadcc9></p><p class="fz28" data-v-7daadcc9></p><p class="fz28" data-v-7daadcc9></p><p class="fz28" data-v-7daadcc9></p><p class="fz28" data-v-7daadcc9></p><p class="fz28" data-v-7daadcc9></p><p class="fz28" data-v-7daadcc9></p><p class="fz28" data-v-7daadcc9></p><p class="fz28" data-v-7daadcc9></p><p class="fz28" data-v-7daadcc9></p><p class="fz28" data-v-7daadcc9></p><p class="fz28" data-v-7daadcc9></p><p class="fz28" data-v-7daadcc9></p><p class="fz28" data-v-7daadcc9></p><p class="fz28" data-v-7daadcc9></p><p class="fz28" data-v-7daadcc9></p><p class="fz28" data-v-7daadcc9></p><p class="fz28" data-v-7daadcc9></p><p class="fz28" data-v-7daadcc9></p><p class="fz28" data-v-7daadcc9></p><p class="fz28" data-v-7daadcc9></p><p class="fz28" data-v-7daadcc9></p><p class="fz28" data-v-7daadcc9></p><p class="fz28" data-v-7daadcc9></p><p class="fz28" data-v-7daadcc9></p><p class="fz28" data-v-7daadcc9></p><p class="fz28" data-v-7daadcc9></p><p class="fz28" data-v-7daadcc9></p><p class="fz28" data-v-7daadcc9></p><p class="fz28" data-v-7daadcc9></p><p class="fz28" data-v-7daadcc9></p><p class="fz28" data-v-7daadcc9></p><p class="fz28" data-v-7daadcc9></p><p class="fz28" data-v-7daadcc9></p><p class="fz28" data-v-7daadcc9></p><p class="fz28" data-v-7daadcc9></p><p class="fz28" data-v-7daadcc9></p><p class="fz28" data-v-7daadcc9></p><p class="fz28" data-v-7daadcc9></p><p class="fz28" data-v-7daadcc9></p><p class="fz28" data-v-7daadcc9></p><p class="fz28" data-v-7daadcc9></p><p class="fz28" data-v-7daadcc9></p><p class="fz28" data-v-7daadcc9></p><p class="fz28" data-v-7daadcc9></p><p class="fz28" data-v-7daadcc9></p><p class="fz28" data-v-7daadcc9></p><p class="fz28" data-v-7daadcc9></p><p class="fz28" data-v-7daadcc9></p><p class="fz28" data-v-7daadcc9></p><p class="fz28" data-v-7daadcc9></p><p class="fz28" data-v-7daadcc9></p><p class="fz28" data-v-7daadcc9></p><p class="fz28" data-v-7daadcc9></p><p class="fz28" data-v-7daadcc9></p><p class="fz28" data-v-7daadcc9></p><p class="fz28" data-v-7daadcc9></p><p class="fz28" data-v-7daadcc9></p><p class="fz28" data-v-7daadcc9></p><p class="fz28" data-v-7daadcc9></p><p class="fz28" data-v-7daadcc9></p><p class="fz28" data-v-7daadcc9></p><p class="fz28" data-v-7daadcc9></p><p class="fz28" data-v-7daadcc9></p><p class="fz28" data-v-7daadcc9></p><p class="fz28" data-v-7daadcc9></p><p class="fz28" data-v-7daadcc9></p><p class="fz28" data-v-7daadcc9></p><p class="fz28" data-v-7daadcc9></p><p class="fz28" data-v-7daadcc9></p><p class="fz28" data-v-7daadcc9></p><p class="fz28" data-v-7daadcc9></p><p class="fz28" data-v-7daadcc9></p><p class="fz28" data-v-7daadcc9></p><p class="fz28" data-v-7daadcc9></p><p class="fz28" data-v-7daadcc9></p><p class="fz28" data-v-7daadcc9></p><p class="fz28" data-v-7daadcc9></p><p class="fz28" data-v-7daadcc9></p><p class="fz28" data-v-7daadcc9></p><p class="fz28" data-v-7daadcc9></p></div></div></div>',1),bo=zv(()=>v("div",{class:"toTopButton"},[v("div",{class:"disCen"},"___"),v("div",{class:"disCen"},"▲")],-1)),io=[bo],ro=zv(()=>v("div",{class:"toBotButton"},[v("div",{class:"disCen"},"▼"),v("div",{class:"disCen"},"￣")],-1)),fo=[ro],oo={__name:"JsPageThreeSix",setup(a){const s=ua(!1);window.addEventListener("scroll",function(){s.value=window.scrollY>0});function d(){window.scrollTo({top:0,left:0,behavior:"smooth"})}function t(){window.scrollTo({top:999999,left:0,behavior:"smooth"})}function c(e){window.scrollTo({top:document.getElementById(`${e}`).offsetTop,behavior:"smooth"})}return(e,n)=>(da(),ea(Q,null,[v("section",null,[v("div",vo,[v("div",eo,[v("div",po,[v("div",{onClick:n[0]||(n[0]=l=>c("threeprototype001")),class:"leftNavText"}," 物件導向 "),v("div",{onClick:n[1]||(n[1]=l=>c("threeprototype002")),class:"leftNavText"}," 構造函數 "),v("div",{onClick:n[2]||(n[2]=l=>c("threeprototype003")),class:"leftNavText"}," constructor "),v("div",{onClick:n[3]||(n[3]=l=>c("threeprototype004")),class:"leftNavText"}," 對象原型 "),v("div",{onClick:n[4]||(n[4]=l=>c("threeprototype005")),class:"leftNavText"}," 原型繼承 "),v("div",{onClick:n[5]||(n[5]=l=>c("threeprototype006")),class:"leftNavText"}," 原型鏈 "),v("div",{onClick:n[6]||(n[6]=l=>c("threeprototype007")),class:"leftNavText"}," class ")])])]),lo]),v("div",null,[X(T(W,{name:"fade",tag:"div"},{default:C(()=>[v("div",{onClick:d,class:"toTop"},io)]),_:1},512),[[Y,s.value]]),X(T(W,{name:"fade",tag:"div"},{default:C(()=>[v("div",{onClick:t,class:"toBot"},fo)]),_:1},512),[[Y,s.value]])])],64))}},uo=ia(oo,[["__scopeId","data-v-7daadcc9"]]),mo="/vue-learn-js/assets/jstip001-1390af12.jpg";const Sv=a=>(wa("data-v-9debfc19"),a=a(),ha(),a),wo={class:"leftNav"},ho={class:"leftNavContainer"},ko={class:"leftNavLayout"},go={class:"Main"},To={class:"mainContainer"},_o={class:"mainLayout"},zo=U('<br data-v-9debfc19><br data-v-9debfc19><p class="fz28" data-v-9debfc19>總分總</p><p class="fz28" data-v-9debfc19>1.要講哪個知識點</p><p class="fz28" data-v-9debfc19>2.細講</p><p class="fz28" data-v-9debfc19>3.總結</p><br data-v-9debfc19><br data-v-9debfc19><div id="threetips001" class="articleCardTitle cor36 fz34" data-v-9debfc19> 7.1 淺拷貝 </div><p class="fz28" data-v-9debfc19> 深拷貝會複製物件的所有屬性和嵌套物件，而淺拷貝只會複製一層屬性 </p><br data-v-9debfc19><p class="fz28" data-v-9debfc19>只針對引用數據類型</p><div class="bgcVS" data-v-9debfc19><div data-v-9debfc19><span class="function" data-v-9debfc19>const </span><span class="word" data-v-9debfc19>obj</span> <span class="then" data-v-9debfc19>=</span><span class="brackets" data-v-9debfc19>{</span> <span class="word" data-v-9debfc19>number:</span><span class="number" data-v-9debfc19>1</span> <span class="brackets" data-v-9debfc19>}</span></div><div data-v-9debfc19><span class="function" data-v-9debfc19>const </span> <span class="word" data-v-9debfc19>o</span><span class="then" data-v-9debfc19>=</span> <span class="word" data-v-9debfc19>obj</span></div><div data-v-9debfc19><span class="word" data-v-9debfc19>console.</span><span class="variable" data-v-9debfc19>log</span> <span class="brackets" data-v-9debfc19>(</span><span class="word" data-v-9debfc19>o</span> <span class="brackets" data-v-9debfc19>)</span></div><div data-v-9debfc19><span class="word" data-v-9debfc19>o.number</span> <span class="then" data-v-9debfc19>=</span><span class="number" data-v-9debfc19>20</span></div><div data-v-9debfc19><span class="word" data-v-9debfc19>console.</span><span class="variable" data-v-9debfc19>log</span> <span class="brackets" data-v-9debfc19>(</span><span class="word" data-v-9debfc19>o</span> <span class="brackets" data-v-9debfc19>)</span><span class="comment" data-v-9debfc19>//{number:20} . . . 堆 &amp; 棧</span></div><div data-v-9debfc19><span class="word" data-v-9debfc19>console.</span><span class="variable" data-v-9debfc19>log</span> <span class="brackets" data-v-9debfc19>(</span><span class="word" data-v-9debfc19>obj</span> <span class="brackets" data-v-9debfc19>)</span><span class="comment" data-v-9debfc19>//{number:20} . . . 堆 &amp; 棧</span></div><div class="dis" data-v-9debfc19><div class="pad20" data-v-9debfc19><br data-v-9debfc19><div data-v-9debfc19>obj</div><div data-v-9debfc19>o</div><br data-v-9debfc19></div><div class="pad20" data-v-9debfc19> 棧 <div data-v-9debfc19>→ 0x1111 →</div><div data-v-9debfc19>→ 0x2222 ↗</div><div data-v-9debfc19>把地址</div><div data-v-9debfc19>賦值給他</div></div><div class="pad20" data-v-9debfc19> 堆 <div data-v-9debfc19>{ number:1 }</div><br data-v-9debfc19><div data-v-9debfc19>址</div></div></div><br data-v-9debfc19><br data-v-9debfc19><p data-v-9debfc19>淺拷貝: 拷貝的是 地址</p><br data-v-9debfc19><p data-v-9debfc19>法一</p><div data-v-9debfc19><span class="function" data-v-9debfc19>const </span><span class="word" data-v-9debfc19>obj</span> <span class="then" data-v-9debfc19>=</span><span class="brackets" data-v-9debfc19>{</span></div><div class="padTwo VSL" data-v-9debfc19><span class="word" data-v-9debfc19>uname:</span> <span class="src" data-v-9debfc19>&quot;wayne&quot;</span></div><div class="padTwo VSL" data-v-9debfc19><span class="word" data-v-9debfc19>number:</span> <span class="number" data-v-9debfc19>1</span><div data-v-9debfc19></div></div><div class="brackets" data-v-9debfc19>}</div><div data-v-9debfc19><span class="function" data-v-9debfc19>const </span> <span class="word" data-v-9debfc19>o</span><span class="then" data-v-9debfc19>=</span> <span class="brackets" data-v-9debfc19>{</span><span class="word" data-v-9debfc19>...obj</span> <span class="brackets" data-v-9debfc19>}</span></div><div data-v-9debfc19><span class="word" data-v-9debfc19>console.</span><span class="variable" data-v-9debfc19>log</span> <span class="brackets" data-v-9debfc19>(</span><span class="word" data-v-9debfc19>o</span> <span class="brackets" data-v-9debfc19>)</span></div><br data-v-9debfc19><p data-v-9debfc19>法二</p><div data-v-9debfc19><span class="function" data-v-9debfc19>const </span> <span class="word" data-v-9debfc19>o</span><span class="then" data-v-9debfc19>=</span> <span class="brackets" data-v-9debfc19>{}</span></div><div data-v-9debfc19><span class="brackets" data-v-9debfc19>Object</span><span class="word" data-v-9debfc19>.assign</span><span class="brackets" data-v-9debfc19>(</span> <span class="word" data-v-9debfc19>o,obj</span><span class="brackets" data-v-9debfc19>)</span><span class="comment" data-v-9debfc19> // (要拷貝的,被拷貝的)// (右 賦值 給 左)</span></div><div data-v-9debfc19><span class="word" data-v-9debfc19>console.</span><span class="variable" data-v-9debfc19>log</span> <span class="brackets" data-v-9debfc19>(</span><span class="word" data-v-9debfc19>o</span> <span class="brackets" data-v-9debfc19>)</span></div><br data-v-9debfc19><br data-v-9debfc19><p data-v-9debfc19>淺拷貝只拷貝最外面那一層 (uname number)</p><p data-v-9debfc19>簡單物件還可以 , 裡面又有物件時 , 有問題</p><p data-v-9debfc19>. . &gt; 多層次嵌套 有問題</p><div data-v-9debfc19><span class="function" data-v-9debfc19>const </span><span class="word" data-v-9debfc19>obj</span> <span class="then" data-v-9debfc19>=</span><span class="brackets" data-v-9debfc19>{</span></div><div class="padTwo VSL" data-v-9debfc19><span class="word" data-v-9debfc19>uname:</span> <span class="src" data-v-9debfc19>&quot;wayne&quot;</span></div><div class="padTwo VSL" data-v-9debfc19><span class="word" data-v-9debfc19>number:</span> <span class="number" data-v-9debfc19>1</span><div data-v-9debfc19></div></div><div class="padTwo VSL" data-v-9debfc19><span class="word" data-v-9debfc19>inner:</span> <span class="brackets" data-v-9debfc19>{</span><div data-v-9debfc19><div class="padTwo VSL" data-v-9debfc19><span class="word" data-v-9debfc19>cantcopy:</span><span class="src" data-v-9debfc19>&quot;裡面的潛拷貝不到&quot;</span></div></div><div data-v-9debfc19><span class="brackets" data-v-9debfc19>}</span></div></div><div class="brackets" data-v-9debfc19>}</div><br data-v-9debfc19><br data-v-9debfc19><div class="dis" data-v-9debfc19><div class="pad20" data-v-9debfc19><br data-v-9debfc19><div data-v-9debfc19>obj.name</div><div data-v-9debfc19>o.name</div><br data-v-9debfc19><div data-v-9debfc19>obj.inner</div><div data-v-9debfc19>o.inner</div></div><div class="pad20" data-v-9debfc19> 棧 <div data-v-9debfc19>wayne</div><div data-v-9debfc19>wayne</div><div data-v-9debfc19>obj直接把wayne複製給o</div><div data-v-9debfc19>→ 0x1111 →</div><div data-v-9debfc19>→ 0x1111 ↗</div><div data-v-9debfc19>拷貝了地址</div></div><div class="pad20" data-v-9debfc19> 堆 <br data-v-9debfc19><br data-v-9debfc19><br data-v-9debfc19><br data-v-9debfc19><div data-v-9debfc19>{ cantcopy:&quot;裡面的潛拷貝不到&quot; }</div></div></div></div><p class="fz28" data-v-9debfc19>解決 多層次嵌套 問題</p><div id="threetips002" class="articleCardTitle cor36 fz34" data-v-9debfc19> 7.2 深拷貝 </div><p class="fz28" data-v-9debfc19> 深拷貝會複製物件的所有屬性和嵌套物件，而淺拷貝只會複製一層屬性 </p><br data-v-9debfc19><p class="fz28" data-v-9debfc19>深拷貝 拷貝的是 物件 不是地址</p><p class="fz28 cor36" data-v-9debfc19># 3 方法</p><p class="fz28" data-v-9debfc19>1. 通過 遞歸 實現 深拷貝</p><p class="fz28" data-v-9debfc19>2. lodash / cloneDeep</p><p class="fz28" data-v-9debfc19>3. 通過 JSON.stringify() 實現</p><br data-v-9debfc19><br data-v-9debfc19><p class="fz28" data-v-9debfc19>什麼是遞歸函數（recursion）?</p><p class="fz28" data-v-9debfc19>一個函數在內部 調用自己 就是遞歸函數</p><p class="fz28" data-v-9debfc19> 遞歸容易 &quot;棧溢出&quot; 錯誤 , 所以必須加 退出條件 return </p>',27),So={class:"bgcVS"},qo=U('<div data-v-9debfc19><span class="function" data-v-9debfc19>function </span><span class="word" data-v-9debfc19>fn</span> <span class="brackets" data-v-9debfc19>(){</span></div><div class="padTwo VSL" data-v-9debfc19><span class="word" data-v-9debfc19>fn</span> <span class="brackets" data-v-9debfc19>()</span><div data-v-9debfc19></div></div><div data-v-9debfc19><span class="brackets" data-v-9debfc19>}</span></div><div data-v-9debfc19><span class="word" data-v-9debfc19>fn</span> <span class="brackets" data-v-9debfc19>()</span></div><br data-v-9debfc19><div data-v-9debfc19><span class="function" data-v-9debfc19>let </span> <span class="word" data-v-9debfc19>i</span><span class="then" data-v-9debfc19>=</span> <span class="number" data-v-9debfc19>1</span></div><div data-v-9debfc19><span class="function" data-v-9debfc19>function </span><span class="word" data-v-9debfc19>fn</span> <span class="brackets" data-v-9debfc19>(){</span></div><div class="padTwo VSL" data-v-9debfc19><span class="word" data-v-9debfc19>console.</span><span class="variable" data-v-9debfc19>log</span> <span class="brackets" data-v-9debfc19>(</span><span class="src" data-v-9debfc19>`這是第</span> <span class="then" data-v-9debfc19>${</span><span class="word" data-v-9debfc19>i</span> <span class="then" data-v-9debfc19>}</span><span class="src" data-v-9debfc19>次`</span> <span class="brackets" data-v-9debfc19>)</span><div data-v-9debfc19><span class="then" data-v-9debfc19>if</span> <span class="brackets" data-v-9debfc19>(</span><span class="word" data-v-9debfc19>i</span> <span class="then" data-v-9debfc19>&gt;=</span><span class="number" data-v-9debfc19>6</span> <span class="brackets" data-v-9debfc19>){</span><div class="padTwo VSL" data-v-9debfc19><span class="then" data-v-9debfc19>return </span></div><div data-v-9debfc19><span class="brackets" data-v-9debfc19>}</span></div><div data-v-9debfc19><span class="word" data-v-9debfc19>i</span> <span class="then" data-v-9debfc19>++</span></div></div></div><div class="padTwo VSL" data-v-9debfc19><span class="word" data-v-9debfc19>fn</span> <span class="brackets" data-v-9debfc19>()</span><div data-v-9debfc19></div></div><div data-v-9debfc19><span class="brackets" data-v-9debfc19>}</span></div><div data-v-9debfc19><span class="word" data-v-9debfc19>fn</span> <span class="brackets" data-v-9debfc19>()</span></div><br data-v-9debfc19><br data-v-9debfc19><p data-v-9debfc19>利用 遞歸函數 實現 setTimeout 模擬 setInterval</p><p data-v-9debfc19>1. 每隔 1 秒輸出當前時間</p>',15),yo=U('<div data-v-9debfc19><span class="variable" data-v-9debfc19>setTimeout</span><span class="brackets" data-v-9debfc19>( </span><span class="function" data-v-9debfc19>函數, </span><span class="number" data-v-9debfc19>時間 </span> <span class="brackets" data-v-9debfc19>)</span></div><br data-v-9debfc19><br data-v-9debfc19><div data-v-9debfc19><span class="function" data-v-9debfc19>function </span><span class="word" data-v-9debfc19>getTime</span><span class="brackets" data-v-9debfc19>(){</span></div><div class="padTwo VSL" data-v-9debfc19><span class="word" data-v-9debfc19>document.</span><span class="variable" data-v-9debfc19>querySelector</span><span class="brackets" data-v-9debfc19>(</span><span class="src" data-v-9debfc19>&quot;showTimeDiv&quot;</span><span class="brackets" data-v-9debfc19>)</span><span class="variable" data-v-9debfc19>.innerHTML</span><span class="then" data-v-9debfc19>=</span> <span class="then" data-v-9debfc19>new </span><span class="brackets" data-v-9debfc19>Date()</span><span class="variable" data-v-9debfc19>.toLocaleString</span><span class="brackets" data-v-9debfc19>()</span><div data-v-9debfc19></div></div><div data-v-9debfc19><span class="brackets" data-v-9debfc19>}</span></div><br data-v-9debfc19><br data-v-9debfc19><div data-v-9debfc19><span class="function" data-v-9debfc19>function </span><span class="word" data-v-9debfc19>getTime</span><span class="brackets" data-v-9debfc19>(){</span></div><div class="padTwo VSL" data-v-9debfc19><span class="word" data-v-9debfc19>document.</span><span class="variable" data-v-9debfc19>querySelector</span><span class="brackets" data-v-9debfc19>(</span><span class="src" data-v-9debfc19>&quot;.showTimeDiv&quot;</span><span class="brackets" data-v-9debfc19>)</span><span class="variable" data-v-9debfc19>.innerHTML</span><span class="then" data-v-9debfc19>=</span> <span class="then" data-v-9debfc19>new </span><span class="brackets" data-v-9debfc19>Date()</span><span class="variable" data-v-9debfc19>.toLocaleString</span><span class="brackets" data-v-9debfc19>()</span><div data-v-9debfc19></div><div data-v-9debfc19><span class="variable" data-v-9debfc19>setTimeout</span><span class="brackets" data-v-9debfc19>(</span><span class="variable" data-v-9debfc19>getTime,</span><span class="number" data-v-9debfc19>1000</span> <span class="brackets" data-v-9debfc19>)</span></div></div><div data-v-9debfc19><span class="brackets" data-v-9debfc19>}</span></div><br data-v-9debfc19><br data-v-9debfc19><br data-v-9debfc19><p data-v-9debfc19>for in . for of</p><br data-v-9debfc19><div data-v-9debfc19><span class="comment" data-v-9debfc19>// 1. 循環數組</span></div><div data-v-9debfc19><span class="word" data-v-9debfc19>cosnt</span> <span class="word" data-v-9debfc19>arr</span><span class="then" data-v-9debfc19>=</span> <span class="brackets" data-v-9debfc19>[</span><span class="src" data-v-9debfc19>&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;</span><span class="brackets" data-v-9debfc19>]</span></div><div data-v-9debfc19><span class="comment" data-v-9debfc19>// for...in 輸出 數組成員 在數組中 的索引</span></div><div data-v-9debfc19><span class="then" data-v-9debfc19>for </span> <span class="brackets" data-v-9debfc19>(</span><span class="function" data-v-9debfc19>let </span> <span class="word" data-v-9debfc19>n </span><span class="function" data-v-9debfc19>in </span> <span class="word" data-v-9debfc19>arr</span><span class="brackets" data-v-9debfc19>){</span></div><div class="padTwo VSL" data-v-9debfc19><span class="word" data-v-9debfc19>console.log</span><span class="brackets" data-v-9debfc19>(</span> <span class="word" data-v-9debfc19>n </span><span class="brackets" data-v-9debfc19>) </span><span class="comment" data-v-9debfc19>// 0 // 1 // 2 // 3</span><div data-v-9debfc19></div></div><div data-v-9debfc19><span class="brackets" data-v-9debfc19>}</span></div><br data-v-9debfc19><div data-v-9debfc19><span class="comment" data-v-9debfc19>// for...of 輸出 數組的成員</span></div><div data-v-9debfc19><span class="then" data-v-9debfc19>for </span> <span class="brackets" data-v-9debfc19>(</span><span class="function" data-v-9debfc19>let </span> <span class="word" data-v-9debfc19>n </span><span class="function" data-v-9debfc19>of </span> <span class="word" data-v-9debfc19>arr</span><span class="brackets" data-v-9debfc19>){</span></div><div class="padTwo VSL" data-v-9debfc19><span class="word" data-v-9debfc19>console.log</span><span class="brackets" data-v-9debfc19>(</span> <span class="word" data-v-9debfc19>n </span><span class="brackets" data-v-9debfc19>) </span><span class="comment" data-v-9debfc19>// a // b // c // d</span><div data-v-9debfc19></div></div><div data-v-9debfc19><span class="brackets" data-v-9debfc19>}</span></div><br data-v-9debfc19><div data-v-9debfc19><span class="comment" data-v-9debfc19>// 2. 循環物件</span></div><div data-v-9debfc19><span class="function" data-v-9debfc19>const </span><span class="word" data-v-9debfc19>obj</span> <span class="then" data-v-9debfc19>=</span><span class="brackets" data-v-9debfc19>{</span> <span class="word" data-v-9debfc19>n:</span><span class="number" data-v-9debfc19>4,</span> <span class="word" data-v-9debfc19>m:</span><span class="number" data-v-9debfc19>5,</span> <span class="word" data-v-9debfc19>k:</span><span class="number" data-v-9debfc19>6</span> <span class="brackets" data-v-9debfc19>}</span></div><div data-v-9debfc19><span class="comment" data-v-9debfc19>// for...in </span></div><div data-v-9debfc19><span class="then" data-v-9debfc19>for </span> <span class="brackets" data-v-9debfc19>(</span><span class="function" data-v-9debfc19>let </span> <span class="word" data-v-9debfc19>n </span><span class="function" data-v-9debfc19>in </span> <span class="word" data-v-9debfc19>obj</span><span class="brackets" data-v-9debfc19>){</span></div><div class="padTwo VSL" data-v-9debfc19><span class="comment" data-v-9debfc19>// 物件的屬性名</span></div><div class="padTwo VSL" data-v-9debfc19><span class="word" data-v-9debfc19>console.log</span><span class="brackets" data-v-9debfc19>(</span> <span class="word" data-v-9debfc19>n</span><span class="brackets" data-v-9debfc19>) </span><span class="comment" data-v-9debfc19>// n // m // k</span><div data-v-9debfc19></div></div><div class="padTwo VSL" data-v-9debfc19><span class="comment" data-v-9debfc19>// 物件的屬性值</span></div><div class="padTwo VSL" data-v-9debfc19><span class="word" data-v-9debfc19>console.</span><span class="variable" data-v-9debfc19>log</span> <span class="brackets" data-v-9debfc19>(</span><span class="word" data-v-9debfc19>obj</span> <span class="brackets" data-v-9debfc19>[</span><span class="word" data-v-9debfc19>n</span> <span class="brackets" data-v-9debfc19>])</span><span class="comment" data-v-9debfc19>// 4 // 5 // 6</span><div data-v-9debfc19></div></div><div data-v-9debfc19><span class="brackets" data-v-9debfc19>}</span></div><br data-v-9debfc19><div data-v-9debfc19><span class="comment" data-v-9debfc19>// for...of </span></div><div data-v-9debfc19><span class="then" data-v-9debfc19>for </span> <span class="brackets" data-v-9debfc19>(</span><span class="function" data-v-9debfc19>let </span> <span class="word" data-v-9debfc19>n </span><span class="function" data-v-9debfc19>of </span> <span class="word" data-v-9debfc19>obj</span><span class="brackets" data-v-9debfc19>){</span></div><div class="padTwo VSL" data-v-9debfc19><div data-v-9debfc19><span class="comment" data-v-9debfc19>// 報錯 , 不能循環</span></div><div data-v-9debfc19><span class="comment" data-v-9debfc19>// 因為沒有 iterator 接口</span></div></div><div data-v-9debfc19><span class="brackets" data-v-9debfc19>}</span></div><br data-v-9debfc19><div data-v-9debfc19><span class="comment" data-v-9debfc19>// 3. 循環數組物件</span></div><div data-v-9debfc19><span class="function" data-v-9debfc19>const </span><span class="word" data-v-9debfc19>arrObj</span> <span class="then" data-v-9debfc19>=</span><span class="brackets" data-v-9debfc19>[{</span></div><div class="padTwo VSL" data-v-9debfc19><span class="word" data-v-9debfc19>name:</span> <span class="src" data-v-9debfc19>&quot;wayne&quot;,</span><div data-v-9debfc19></div></div><div class="padTwo VSL" data-v-9debfc19><span class="word" data-v-9debfc19>number:</span> <span class="number" data-v-9debfc19>1</span><div data-v-9debfc19></div></div><div data-v-9debfc19><span class="brackets" data-v-9debfc19>}, {</span></div><div class="padTwo VSL" data-v-9debfc19><span class="word" data-v-9debfc19>name:</span> <span class="src" data-v-9debfc19>&quot;jack&quot;,</span><div data-v-9debfc19></div></div><div class="padTwo VSL" data-v-9debfc19><span class="word" data-v-9debfc19>number:</span> <span class="number" data-v-9debfc19>9</span><div data-v-9debfc19></div></div><div data-v-9debfc19><span class="brackets" data-v-9debfc19>}]</span></div><br data-v-9debfc19><div data-v-9debfc19><span class="then" data-v-9debfc19>for </span> <span class="brackets" data-v-9debfc19>(</span><span class="function" data-v-9debfc19>let </span> <span class="word" data-v-9debfc19>nObj </span><span class="function" data-v-9debfc19>of </span><span class="word" data-v-9debfc19>arrObj</span> <span class="brackets" data-v-9debfc19>){</span></div><div class="padTwo VSL" data-v-9debfc19><span class="word" data-v-9debfc19>console.</span><span class="variable" data-v-9debfc19>log</span> <span class="brackets" data-v-9debfc19>(</span><span class="word" data-v-9debfc19>nObj</span> <span class="brackets" data-v-9debfc19>)</span><span class="comment" data-v-9debfc19>//{name:&quot;wayne&quot;,number:1},{name:&quot;jack&quot;,number:9}</span></div><div class="padTwo VSL" data-v-9debfc19><span class="then" data-v-9debfc19>for </span> <span class="brackets" data-v-9debfc19>(</span><span class="function" data-v-9debfc19>let </span> <span class="word" data-v-9debfc19>n </span><span class="function" data-v-9debfc19>in </span> <span class="word" data-v-9debfc19>nObj</span><span class="brackets" data-v-9debfc19>){</span><div data-v-9debfc19><div class="padTwo VSL" data-v-9debfc19><span class="word" data-v-9debfc19>console.</span><span class="variable" data-v-9debfc19>log</span><span class="brackets" data-v-9debfc19>(</span><span class="word" data-v-9debfc19>nObj</span><span class="brackets" data-v-9debfc19>[</span> <span class="word" data-v-9debfc19>n</span><span class="brackets" data-v-9debfc19>]) </span><span class="comment" data-v-9debfc19>// wayne // 1 // jack // 9</span><div data-v-9debfc19></div></div><div data-v-9debfc19><span class="brackets" data-v-9debfc19>}</span></div></div></div><div data-v-9debfc19><span class="brackets" data-v-9debfc19>}</span></div><div data-v-9debfc19><span class="comment" data-v-9debfc19>// for in 循環 物件</span></div><div data-v-9debfc19><span class="comment" data-v-9debfc19>// for of 循環 數組</span></div><br data-v-9debfc19><br data-v-9debfc19><p data-v-9debfc19>利用 遞歸 函數 實現 深拷貝</p><br data-v-9debfc19><div data-v-9debfc19><span class="function" data-v-9debfc19>const </span><span class="word" data-v-9debfc19>obj</span> <span class="then" data-v-9debfc19>=</span><span class="brackets" data-v-9debfc19>{</span></div><div class="padTwo VSL" data-v-9debfc19><span class="word" data-v-9debfc19>uname:</span> <span class="src" data-v-9debfc19>&quot;wayne&quot;</span></div><div class="padTwo VSL" data-v-9debfc19><span class="word" data-v-9debfc19>number:</span> <span class="number" data-v-9debfc19>1</span><div data-v-9debfc19></div></div><div class="brackets" data-v-9debfc19>}</div><span class="comment" data-v-9debfc19>// 我想把 obj 物件 拷貝給 o</span><div data-v-9debfc19><span class="function" data-v-9debfc19>const </span> <span class="word" data-v-9debfc19>o</span><span class="then" data-v-9debfc19>=</span> <span class="brackets" data-v-9debfc19>{}</span></div><div data-v-9debfc19><span class="comment" data-v-9debfc19>思想:</span></div><div data-v-9debfc19><span class="comment" data-v-9debfc19>拿到物件 利用 遍歷 把屬性(值) 取過來 做 賦值</span></div><div data-v-9debfc19><span class="comment" data-v-9debfc19>把 obj 的 wayne 賦值給 o 的 uname 完成一次賦值</span></div><div data-v-9debfc19><span class="comment" data-v-9debfc19>再利用 循環 把 obj 的 1 傳給 o 的 number</span></div><br data-v-9debfc19><div data-v-9debfc19><span class="number" data-v-9debfc19>如果是簡單類型直接放行</span></div><br data-v-9debfc19><div class="por" data-v-9debfc19><div data-v-9debfc19><span class="function" data-v-9debfc19>function </span><span class="variable" data-v-9debfc19>deepCopy</span><span class="brackets" data-v-9debfc19>( </span><span class="word" data-v-9debfc19>newObj, oldObj </span><span class="brackets" data-v-9debfc19>){</span></div><div class="padTwo VSL" data-v-9debfc19><span class="comment" data-v-9debfc19>//把舊的值取出來給新的值</span><div data-v-9debfc19></div><span class="comment" data-v-9debfc19>//先遍歷舊的 , 注意 k 是誰</span></div><div class="padTwo VSL" data-v-9debfc19><span class="then" data-v-9debfc19>for </span> <span class="brackets" data-v-9debfc19>(</span><span class="function" data-v-9debfc19>let </span> <span class="word" data-v-9debfc19>k </span><span class="function" data-v-9debfc19>in </span><span class="word" data-v-9debfc19>oldObj </span><span class="brackets" data-v-9debfc19>){</span><div data-v-9debfc19><div class="padTwo VSL" data-v-9debfc19><span class="comment" data-v-9debfc19>// k 屬性名 oldObj[ k ] 屬性值</span></div><div class="padTwo VSL" data-v-9debfc19><span class="comment" data-v-9debfc19>// newObj[ k ] === o.uname</span><div data-v-9debfc19></div></div><div class="padTwo VSL" data-v-9debfc19><div data-v-9debfc19><span class="word" data-v-9debfc19>newObj</span><span class="brackets" data-v-9debfc19>[ </span><span class="word" data-v-9debfc19>k </span><span class="brackets" data-v-9debfc19>]</span><span class="then" data-v-9debfc19>= </span><span class="word" data-v-9debfc19>oldObj</span><span class="brackets" data-v-9debfc19>[ </span><span class="word" data-v-9debfc19>k </span><span class="brackets" data-v-9debfc19>]</span></div></div><div data-v-9debfc19><span class="brackets" data-v-9debfc19>}</span></div></div></div><div data-v-9debfc19><span class="brackets" data-v-9debfc19>}</span></div><div data-v-9debfc19><span class="variable" data-v-9debfc19>deepCopy</span><span class="brackets" data-v-9debfc19>(</span> <span class="word" data-v-9debfc19>o,obj</span><span class="brackets" data-v-9debfc19>)</span><span class="comment" data-v-9debfc19>//函數調用,o是新物件,obj是舊物件</span></div><div data-v-9debfc19><span class="word" data-v-9debfc19>console.</span><span class="variable" data-v-9debfc19>log</span><span class="brackets" data-v-9debfc19>(</span> <span class="word" data-v-9debfc19>o</span><span class="brackets" data-v-9debfc19>)</span></div><div data-v-9debfc19><span class="word" data-v-9debfc19>o.number</span> <span class="then" data-v-9debfc19>=</span><span class="word" data-v-9debfc19>99</span></div><div data-v-9debfc19><span class="word" data-v-9debfc19>console.</span><span class="variable" data-v-9debfc19>log</span><span class="brackets" data-v-9debfc19>(</span> <span class="word" data-v-9debfc19>obj</span><span class="brackets" data-v-9debfc19>)</span></div><div class="objectDivPoa" data-v-9debfc19><div data-v-9debfc19><span class="comment" data-v-9debfc19>// 2. 循環物件</span></div><div data-v-9debfc19><span class="function" data-v-9debfc19>const </span><span class="word" data-v-9debfc19>obj</span> <span class="then" data-v-9debfc19>=</span></div><div data-v-9debfc19><span class="brackets" data-v-9debfc19>{</span> <span class="word" data-v-9debfc19>n:</span><span class="number" data-v-9debfc19>4,</span> <span class="word" data-v-9debfc19>m:</span><span class="number" data-v-9debfc19>5,</span> <span class="word" data-v-9debfc19>k:</span><span class="number" data-v-9debfc19>6</span> <span class="brackets" data-v-9debfc19>}</span></div><div data-v-9debfc19><span class="then" data-v-9debfc19>for </span><span class="brackets" data-v-9debfc19>(</span><span class="function" data-v-9debfc19>let </span><span class="word" data-v-9debfc19>n </span><span class="function" data-v-9debfc19>in </span><span class="word" data-v-9debfc19>obj</span><span class="brackets" data-v-9debfc19>){</span></div><div class="padTwo VSL" data-v-9debfc19><span class="comment" data-v-9debfc19>// 物件的屬性名</span></div><div class="padTwo VSL" data-v-9debfc19><span class="word" data-v-9debfc19>console.log</span><span class="brackets" data-v-9debfc19>(</span> <span class="word" data-v-9debfc19>n</span><span class="brackets" data-v-9debfc19>) </span><div data-v-9debfc19></div><span class="comment" data-v-9debfc19>// n // m // k</span></div><div class="padTwo VSL" data-v-9debfc19><span class="comment" data-v-9debfc19>// 物件的屬性值</span></div><div class="padTwo VSL" data-v-9debfc19><span class="word" data-v-9debfc19>console.</span><span class="variable" data-v-9debfc19>log</span><span class="brackets" data-v-9debfc19>(</span><span class="word" data-v-9debfc19>obj</span><span class="brackets" data-v-9debfc19>[</span><span class="word" data-v-9debfc19>n</span><span class="brackets" data-v-9debfc19>])</span><div data-v-9debfc19></div><span class="comment" data-v-9debfc19>// 4 // 5 // 6</span></div><div data-v-9debfc19><span class="brackets" data-v-9debfc19>}</span></div></div><br data-v-9debfc19><p data-v-9debfc19>Q: oldObj [ k ] 是誰?</p><p data-v-9debfc19>舊物件 屬性值</p><br data-v-9debfc19><p data-v-9debfc19>Q: newObj [ k ] 是誰?</p><p data-v-9debfc19>新物件 屬性名</p><br data-v-9debfc19><p data-v-9debfc19>------------以上做潛拷貝------------</p><div data-v-9debfc19><span class="function" data-v-9debfc19>const </span><span class="word" data-v-9debfc19>obj</span> <span class="then" data-v-9debfc19>=</span><span class="brackets" data-v-9debfc19>{</span></div><div class="padTwo VSL" data-v-9debfc19><span class="word" data-v-9debfc19>uname:</span><span class="src" data-v-9debfc19>&quot;wayne&quot;</span></div><div class="padTwo VSL" data-v-9debfc19><span class="word" data-v-9debfc19>number:</span> <span class="number" data-v-9debfc19>1</span><div data-v-9debfc19></div></div><div class="padTwo VSL" data-v-9debfc19><span class="word" data-v-9debfc19>hobby:</span><span class="brackets" data-v-9debfc19>[</span><span class="src" data-v-9debfc19>&quot;跑步&quot;,&quot;足球&quot;</span><span class="brackets" data-v-9debfc19>]</span><div data-v-9debfc19></div></div><div class="brackets" data-v-9debfc19>}</div><br data-v-9debfc19><div data-v-9debfc19><span class="number" data-v-9debfc19>遇到數組 跑步拿出來 放 hobby[0] 足球拿租來 放 hobby[1]</span></div><br data-v-9debfc19><div data-v-9debfc19><span class="function" data-v-9debfc19>function </span><span class="variable" data-v-9debfc19>deepCopy</span><span class="brackets" data-v-9debfc19>( </span><span class="word" data-v-9debfc19>newObj, oldObj </span><span class="brackets" data-v-9debfc19>){</span></div><div class="padTwo VSL" data-v-9debfc19><span class="comment" data-v-9debfc19>//把舊的值取出來給新的值</span><div data-v-9debfc19></div><span class="comment" data-v-9debfc19>//先遍歷舊的 , 注意 k 是誰</span></div><div class="padTwo VSL" data-v-9debfc19><span class="then" data-v-9debfc19>for </span> <span class="brackets" data-v-9debfc19>(</span><span class="function" data-v-9debfc19>let </span> <span class="word" data-v-9debfc19>k </span><span class="function" data-v-9debfc19>in </span><span class="word" data-v-9debfc19>oldObj </span><span class="brackets" data-v-9debfc19>){</span><div class="padTwo VSL" data-v-9debfc19><div data-v-9debfc19><span class="number" data-v-9debfc19>//</span><span class="comment" data-v-9debfc19> 處理數組問題</span></div><div data-v-9debfc19><span class="number" data-v-9debfc19>// </span><span class="comment" data-v-9debfc19>通過值來判斷</span></div><div data-v-9debfc19><span class="then" data-v-9debfc19>if</span><span class="brackets" data-v-9debfc19>(</span><span class="word" data-v-9debfc19>oldObj</span><span class="brackets" data-v-9debfc19>[</span> <span class="word" data-v-9debfc19>k </span><span class="brackets" data-v-9debfc19>] </span><span class="word" data-v-9debfc19>intanceof </span><span class="brackets" data-v-9debfc19>Array</span><span class="brackets" data-v-9debfc19>) { </span><span class="comment" data-v-9debfc19>// oldObj [ k ] 屬性值</span></div><div class="padTwo VSL" data-v-9debfc19><div data-v-9debfc19><span class="number" data-v-9debfc19>// </span><span class="comment" data-v-9debfc19>我要把hobby數組再次遍歷</span></div><div data-v-9debfc19><span class="number" data-v-9debfc19>// </span><span class="comment" data-v-9debfc19>我要把跑步拿出來放到新物件hobby第1個參數</span></div><div data-v-9debfc19><span class="number" data-v-9debfc19>// </span><span class="comment" data-v-9debfc19>我要把足球拿出來放到新物件hobby第2個參數</span></div><div data-v-9debfc19><span class="word" data-v-9debfc19>newObj</span><span class="brackets" data-v-9debfc19>[ </span><span class="word" data-v-9debfc19>k </span><span class="brackets" data-v-9debfc19>]</span><span class="then" data-v-9debfc19>=</span><span class="brackets" data-v-9debfc19>[ ]</span><div data-v-9debfc19></div><div data-v-9debfc19><span class="number" data-v-9debfc19>// </span><span class="comment" data-v-9debfc19> newObj[k] 是 hobby</span></div><div data-v-9debfc19><span class="number" data-v-9debfc19>// </span><span class="comment" data-v-9debfc19> 新物件的 hobby 先給他一個空數組</span></div><div data-v-9debfc19><span class="number" data-v-9debfc19>// </span><span class="comment" data-v-9debfc19>然後我在遍歷舊數組把他放進去</span></div><br data-v-9debfc19><div data-v-9debfc19><span class="number" data-v-9debfc19>// </span><span class="comment" data-v-9debfc19>deepCopy(newObj[k],[&quot;跑步&quot;,&quot;足球&quot;])</span></div><div class="por" data-v-9debfc19><div data-v-9debfc19><span class="variable" data-v-9debfc19>deepCopy</span><span class="brackets" data-v-9debfc19>(</span><span class="word" data-v-9debfc19>newObj</span><span class="brackets" data-v-9debfc19>[</span><span class="word" data-v-9debfc19>k</span><span class="brackets" data-v-9debfc19>],</span><span class="word" data-v-9debfc19>oldObj</span><span class="brackets" data-v-9debfc19>[</span><span class="word" data-v-9debfc19>k</span><span class="brackets" data-v-9debfc19>])</span></div><div data-v-9debfc19><span class="comment" data-v-9debfc19>//調用自己遍歷數組時</span></div><div data-v-9debfc19><span class="number" data-v-9debfc19>// K 變成數組的索引號了</span></div><div class="objectDivPoa" data-v-9debfc19><div data-v-9debfc19><span class="comment" data-v-9debfc19>// 1. 循環數組</span></div><div data-v-9debfc19><span class="word" data-v-9debfc19>cosnt</span><span class="word" data-v-9debfc19>arr</span><span class="then" data-v-9debfc19>=</span></div><div data-v-9debfc19><span class="brackets" data-v-9debfc19>[</span><span class="src" data-v-9debfc19>&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;</span><span class="brackets" data-v-9debfc19>]</span></div><div data-v-9debfc19><span class="comment" data-v-9debfc19>//for...in輸出</span></div><div data-v-9debfc19><span class="comment" data-v-9debfc19>數組成員在</span></div><div data-v-9debfc19><span class="comment" data-v-9debfc19>數組中的索引</span></div><div data-v-9debfc19><span class="then" data-v-9debfc19>for </span><span class="brackets" data-v-9debfc19>(</span><span class="function" data-v-9debfc19>let </span><span class="word" data-v-9debfc19>n </span><span class="function" data-v-9debfc19>in </span><span class="word" data-v-9debfc19>arr</span><span class="brackets" data-v-9debfc19>){</span></div><div class="" data-v-9debfc19><span class="word" data-v-9debfc19>console.log</span><span class="brackets" data-v-9debfc19>(</span><span class="word" data-v-9debfc19>n </span><span class="brackets" data-v-9debfc19>) </span></div><div data-v-9debfc19><span class="comment" data-v-9debfc19>// 0 // 1 // 2 // 3</span><div data-v-9debfc19></div></div><div data-v-9debfc19><span class="brackets" data-v-9debfc19>}</span></div></div></div></div></div></div><div class="padTwo VSL" data-v-9debfc19><span class="brackets" data-v-9debfc19>}</span><span class="then" data-v-9debfc19>else </span><span class="brackets" data-v-9debfc19>{</span><div data-v-9debfc19><div data-v-9debfc19><div class="padTwo VSL" data-v-9debfc19><span class="comment" data-v-9debfc19>// k 屬性名 oldObj[ k ] 屬性值</span></div><div class="padTwo VSL" data-v-9debfc19><span class="comment" data-v-9debfc19>// newObj[ k ] === o.uname</span><div data-v-9debfc19></div></div><div class="padTwo VSL" data-v-9debfc19><div data-v-9debfc19><span class="word" data-v-9debfc19>newObj</span><span class="brackets" data-v-9debfc19>[ </span><span class="word" data-v-9debfc19>k </span><span class="brackets" data-v-9debfc19>]</span><span class="then" data-v-9debfc19>= </span><span class="word" data-v-9debfc19>oldObj</span><span class="brackets" data-v-9debfc19>[ </span><span class="word" data-v-9debfc19>k </span><span class="brackets" data-v-9debfc19>]</span></div></div><div data-v-9debfc19><span class="brackets" data-v-9debfc19>}</span></div></div></div></div><div data-v-9debfc19><span class="brackets" data-v-9debfc19>}</span></div></div><div data-v-9debfc19><span class="brackets" data-v-9debfc19>}</span></div><div data-v-9debfc19><span class="variable" data-v-9debfc19>deepCopy</span><span class="brackets" data-v-9debfc19>(</span> <span class="word" data-v-9debfc19>o,obj</span><span class="brackets" data-v-9debfc19>)</span><span class="comment" data-v-9debfc19>//函數調用,o是新物件,obj是舊物件</span></div><div data-v-9debfc19><span class="word" data-v-9debfc19>console.</span><span class="variable" data-v-9debfc19>log</span><span class="brackets" data-v-9debfc19>(</span> <span class="word" data-v-9debfc19>o</span><span class="brackets" data-v-9debfc19>)</span></div><div data-v-9debfc19><span class="word" data-v-9debfc19>o.number</span> <span class="then" data-v-9debfc19>=</span><span class="word" data-v-9debfc19>99</span></div><div data-v-9debfc19><span class="word" data-v-9debfc19>console.</span><span class="variable" data-v-9debfc19>log</span><span class="brackets" data-v-9debfc19>(</span> <span class="word" data-v-9debfc19>obj</span><span class="brackets" data-v-9debfc19>)</span></div><br data-v-9debfc19><div data-v-9debfc19><span class="number" data-v-9debfc19>處理遇到物件</span></div><br data-v-9debfc19><div data-v-9debfc19><span class="function" data-v-9debfc19>const </span><span class="word" data-v-9debfc19>obj</span> <span class="then" data-v-9debfc19>=</span><span class="brackets" data-v-9debfc19>{</span></div><div class="padTwo VSL" data-v-9debfc19><span class="word" data-v-9debfc19>uname:</span><span class="src" data-v-9debfc19>&quot;wayne&quot;</span></div><div class="padTwo VSL" data-v-9debfc19><span class="word" data-v-9debfc19>number:</span> <span class="number" data-v-9debfc19>1</span><div data-v-9debfc19></div></div><div class="padTwo VSL" data-v-9debfc19><span class="word" data-v-9debfc19>hobby:</span><span class="brackets" data-v-9debfc19>[</span><span class="src" data-v-9debfc19>&quot;跑步&quot;,&quot;足球&quot;</span><span class="brackets" data-v-9debfc19>]</span><div data-v-9debfc19></div></div><div class="padTwo VSL" data-v-9debfc19><span class="word" data-v-9debfc19>family:</span><span class="brackets" data-v-9debfc19>{</span><div data-v-9debfc19><div class="padTwo VSL" data-v-9debfc19><span class="word" data-v-9debfc19>baby:</span><span class="src" data-v-9debfc19>&quot;小neo&quot;</span><div data-v-9debfc19></div></div><div data-v-9debfc19><span class="brackets" data-v-9debfc19>}</span></div></div></div><div class="brackets" data-v-9debfc19>}</div><br data-v-9debfc19><div data-v-9debfc19><span class="function" data-v-9debfc19>function </span><span class="variable" data-v-9debfc19>deepCopy</span><span class="brackets" data-v-9debfc19>( </span><span class="word" data-v-9debfc19>newObj, oldObj </span><span class="brackets" data-v-9debfc19>){</span></div><div class="padTwo VSL" data-v-9debfc19><span class="comment" data-v-9debfc19>//把舊的值取出來給新的值</span><div data-v-9debfc19></div><span class="comment" data-v-9debfc19>//先遍歷舊的 , 注意 k 是誰</span></div><div class="padTwo VSL" data-v-9debfc19><span class="then" data-v-9debfc19>for </span> <span class="brackets" data-v-9debfc19>(</span><span class="function" data-v-9debfc19>let </span> <span class="word" data-v-9debfc19>k </span><span class="function" data-v-9debfc19>in </span><span class="word" data-v-9debfc19>oldObj </span><span class="brackets" data-v-9debfc19>){</span><div class="padTwo VSL" data-v-9debfc19><div data-v-9debfc19><span class="comment" data-v-9debfc19>// 處理數組問題</span></div><div data-v-9debfc19><span class="comment" data-v-9debfc19>// 通過值來判斷</span></div><div data-v-9debfc19><span class="then" data-v-9debfc19>if</span><span class="brackets" data-v-9debfc19>(</span><span class="word" data-v-9debfc19>oldObj</span><span class="brackets" data-v-9debfc19>[</span> <span class="word" data-v-9debfc19>k </span><span class="brackets" data-v-9debfc19>] </span><span class="word" data-v-9debfc19>intanceof </span><span class="brackets" data-v-9debfc19>Array</span><span class="brackets" data-v-9debfc19>) { </span><span class="comment" data-v-9debfc19>// oldObj [ k ] 屬性值</span></div><div class="padTwo VSL" data-v-9debfc19><div data-v-9debfc19><span class="comment" data-v-9debfc19>// 我要把hobby數組再次遍歷</span></div><div data-v-9debfc19><span class="comment" data-v-9debfc19>// 我要把跑步拿出來放到新物件hobby第1個參數</span></div><div data-v-9debfc19><span class="comment" data-v-9debfc19>// 我要把足球拿出來放到新物件hobby第2個參數</span></div><div data-v-9debfc19><span class="word" data-v-9debfc19>newObj</span><span class="brackets" data-v-9debfc19>[ </span><span class="word" data-v-9debfc19>k </span><span class="brackets" data-v-9debfc19>]</span><span class="then" data-v-9debfc19>=</span><span class="brackets" data-v-9debfc19>[ ]</span><div data-v-9debfc19></div><div data-v-9debfc19><span class="comment" data-v-9debfc19>// newObj[k] 是 hobby</span></div><div data-v-9debfc19><span class="comment" data-v-9debfc19> // 新物件的 hobby 先給他一個空數組</span></div><div data-v-9debfc19><span class="comment" data-v-9debfc19>// 然後我在遍歷舊數組把他放進去</span></div><div data-v-9debfc19><span class="comment" data-v-9debfc19>// deepCopy(newObj[k],[&quot;跑步&quot;,&quot;足球&quot;])</span></div><div data-v-9debfc19><span class="variable" data-v-9debfc19>deepCopy</span><span class="brackets" data-v-9debfc19>(</span><span class="word" data-v-9debfc19>newObj</span><span class="brackets" data-v-9debfc19>[</span><span class="word" data-v-9debfc19>k</span><span class="brackets" data-v-9debfc19>],</span><span class="word" data-v-9debfc19>oldObj</span><span class="brackets" data-v-9debfc19>[</span><span class="word" data-v-9debfc19>k</span><span class="brackets" data-v-9debfc19>])</span></div><div data-v-9debfc19><span class="comment" data-v-9debfc19>//調用自己遍歷數組時</span></div><div data-v-9debfc19><span class="comment" data-v-9debfc19>// K 變成數組的索引號了</span></div></div></div></div><div class="padTwo VSL" data-v-9debfc19><div data-v-9debfc19><span class="brackets" data-v-9debfc19>} </span><span class="then" data-v-9debfc19>else if</span><span class="brackets" data-v-9debfc19>(</span><span class="word" data-v-9debfc19>oldObj</span><span class="brackets" data-v-9debfc19>[</span> <span class="word" data-v-9debfc19>k </span><span class="brackets" data-v-9debfc19>] </span><span class="word" data-v-9debfc19>intanceof </span><span class="brackets" data-v-9debfc19>Object</span><span class="brackets" data-v-9debfc19>) { </span><span class="comment" data-v-9debfc19>// oldObj [ k ] 屬性值</span></div><div class="padTwo VSL" data-v-9debfc19><br data-v-9debfc19><div data-v-9debfc19><span class="word" data-v-9debfc19>newObj</span><span class="brackets" data-v-9debfc19>[ </span><span class="word" data-v-9debfc19>k </span><span class="brackets" data-v-9debfc19>]</span><span class="then" data-v-9debfc19>=</span><span class="brackets" data-v-9debfc19>{ }</span><span class="cor36 padTwo" data-v-9debfc19> ← . . . . . ↑ . . . 改這兩個 </span><div data-v-9debfc19></div><br data-v-9debfc19><div data-v-9debfc19><span class="variable" data-v-9debfc19>deepCopy</span><span class="brackets" data-v-9debfc19>(</span><span class="word" data-v-9debfc19>newObj</span><span class="brackets" data-v-9debfc19>[</span><span class="word" data-v-9debfc19>k</span><span class="brackets" data-v-9debfc19>],</span><span class="word" data-v-9debfc19>oldObj</span><span class="brackets" data-v-9debfc19>[</span><span class="word" data-v-9debfc19>k</span><span class="brackets" data-v-9debfc19>])</span></div></div></div></div><div class="padTwo VSL" data-v-9debfc19><span class="brackets" data-v-9debfc19>}</span><span class="then" data-v-9debfc19>else </span><span class="brackets" data-v-9debfc19>{</span><div data-v-9debfc19><div data-v-9debfc19><div class="padTwo VSL" data-v-9debfc19><span class="comment" data-v-9debfc19>// k 屬性名 oldObj[ k ] 屬性值</span></div><div class="padTwo VSL" data-v-9debfc19><span class="comment" data-v-9debfc19>// newObj[ k ] === o.uname</span><div data-v-9debfc19></div></div><div class="padTwo VSL" data-v-9debfc19><div data-v-9debfc19><span class="word" data-v-9debfc19>newObj</span><span class="brackets" data-v-9debfc19>[ </span><span class="word" data-v-9debfc19>k </span><span class="brackets" data-v-9debfc19>]</span><span class="then" data-v-9debfc19>= </span><span class="word" data-v-9debfc19>oldObj</span><span class="brackets" data-v-9debfc19>[ </span><span class="word" data-v-9debfc19>k </span><span class="brackets" data-v-9debfc19>]</span></div></div><div data-v-9debfc19><span class="brackets" data-v-9debfc19>}</span></div></div></div></div><div data-v-9debfc19><span class="brackets" data-v-9debfc19>}</span></div></div><div data-v-9debfc19><span class="brackets" data-v-9debfc19>}</span></div><br data-v-9debfc19><p data-v-9debfc19># 一定要 先數組 再物件</p><p data-v-9debfc19>因為 數組 屬於物件 他就把 數組當物件</p><br data-v-9debfc19><div data-v-9debfc19><span class="word" data-v-9debfc19>console.</span><span class="variable" data-v-9debfc19>log</span><span class="brackets" data-v-9debfc19>([</span><span class="number" data-v-9debfc19>1, 2, 3</span><span class="brackets" data-v-9debfc19>]</span><span class="word" data-v-9debfc19>instanceof</span><span class="brackets" data-v-9debfc19>Object</span><span class="brackets" data-v-9debfc19>) </span><span class="comment" data-v-9debfc19>// true</span></div><div class="comment" data-v-9debfc19>// 陣列 被當成 物件</div></div>',76),Co=U('<p class="fz28 cor36" data-v-9debfc19># 你怎麼實現 深拷貝?</p><p class="fz28" data-v-9debfc19>深拷貝 是做到 拷貝出來的 新物件 不會影響 舊物件</p><p class="fz28" data-v-9debfc19>想實現 深拷貝 函數遞歸</p><p class="fz28" data-v-9debfc19>當我在 普通拷貝 直接賦值就好了</p><p class="fz28" data-v-9debfc19>當我遇到 陣列 我再次調用 這個函數</p><p class="fz28" data-v-9debfc19>當我遇到物件 我再次調用遞歸</p><p class="fz28" data-v-9debfc19>先 陣列 後 物件</p><div id="threetips003" class="articleCardTitle cor36 fz34" data-v-9debfc19> 7.3 lodash </div><a href="https://lodashjs.com/" class="fz28" data-v-9debfc19>@ lodash中文</a><p class="fz28" data-v-9debfc19> 庫 . 把一些常用的 方法 封裝好 . 只需要把庫引用進來 . 調用一個函數就可以用了 </p><a href="https://www.lodashjs.com/docs/lodash.cloneDeep#_clonedeepvalue" class="fz28" data-v-9debfc19>@ lodash深拷貝</a><div class="bgcVS" data-v-9debfc19><div data-v-9debfc19><span class="then" data-v-9debfc19>＜</span> <span class="number" data-v-9debfc19>script </span><span class="word" data-v-9debfc19>src</span> <span class="then" data-v-9debfc19>=</span><span class="src" data-v-9debfc19>&quot;lodash.js&quot;</span><span class="then" data-v-9debfc19>&gt;＜/ </span><span class="number" data-v-9debfc19>script</span> <span class="then" data-v-9debfc19>&gt;</span></div><div data-v-9debfc19><span class="function" data-v-9debfc19>const </span><span class="word" data-v-9debfc19>obj</span> <span class="then" data-v-9debfc19>=</span><span class="brackets" data-v-9debfc19>{</span></div><div class="padTwo VSL" data-v-9debfc19><span class="word" data-v-9debfc19>uname:</span><span class="src" data-v-9debfc19>&quot;wayne&quot;</span></div><div class="padTwo VSL" data-v-9debfc19><span class="word" data-v-9debfc19>number:</span> <span class="number" data-v-9debfc19>1</span><div data-v-9debfc19></div></div><div class="padTwo VSL" data-v-9debfc19><span class="word" data-v-9debfc19>hobby:</span><span class="brackets" data-v-9debfc19>[</span><span class="src" data-v-9debfc19>&quot;跑步&quot;,&quot;足球&quot;</span><span class="brackets" data-v-9debfc19>]</span><div data-v-9debfc19></div></div><div class="padTwo VSL" data-v-9debfc19><span class="word" data-v-9debfc19>family:</span><span class="brackets" data-v-9debfc19>{</span><div data-v-9debfc19><div class="padTwo VSL" data-v-9debfc19><span class="word" data-v-9debfc19>baby:</span><span class="src" data-v-9debfc19>&quot;小neo&quot;</span><div data-v-9debfc19></div></div><div data-v-9debfc19><span class="brackets" data-v-9debfc19>}</span></div></div></div><div data-v-9debfc19><span class="brackets" data-v-9debfc19>}</span></div><div data-v-9debfc19><span class="function" data-v-9debfc19>const </span><span class="brackets" data-v-9debfc19>o </span> <span class="then" data-v-9debfc19>= </span><span class="word" data-v-9debfc19>_.</span><span class="variable" data-v-9debfc19>cloneDeep</span><span class="brackets" data-v-9debfc19>( obj )</span></div><div data-v-9debfc19><span class="comment" data-v-9debfc19>// _.cloneDeep 有返回值 , 我 const o 接過來</span></div></div><div id="threetips004" class="articleCardTitle cor36 fz34" data-v-9debfc19> 7.4 JSON 實現 深拷貝 </div><div class="bgcVS" data-v-9debfc19><div data-v-9debfc19><span class="function" data-v-9debfc19>const </span><span class="word" data-v-9debfc19>obj</span> <span class="then" data-v-9debfc19>=</span><span class="brackets" data-v-9debfc19>{</span></div><div class="padTwo VSL" data-v-9debfc19><span class="word" data-v-9debfc19>uname:</span><span class="src" data-v-9debfc19>&quot;wayne&quot;</span></div><div class="padTwo VSL" data-v-9debfc19><span class="word" data-v-9debfc19>number:</span> <span class="number" data-v-9debfc19>1</span><div data-v-9debfc19></div></div><div class="padTwo VSL" data-v-9debfc19><span class="word" data-v-9debfc19>hobby:</span><span class="brackets" data-v-9debfc19>[</span><span class="src" data-v-9debfc19>&quot;跑步&quot;,&quot;足球&quot;</span><span class="brackets" data-v-9debfc19>]</span><div data-v-9debfc19></div></div><div class="padTwo VSL" data-v-9debfc19><span class="word" data-v-9debfc19>family:</span><span class="brackets" data-v-9debfc19>{</span><div data-v-9debfc19><div class="padTwo VSL" data-v-9debfc19><span class="word" data-v-9debfc19>baby:</span><span class="src" data-v-9debfc19>&quot;小neo&quot;</span><div data-v-9debfc19></div></div><div data-v-9debfc19><span class="brackets" data-v-9debfc19>}</span></div></div></div><div data-v-9debfc19><span class="brackets" data-v-9debfc19>}</span></div><div data-v-9debfc19><span class="function" data-v-9debfc19>const </span><span class="brackets" data-v-9debfc19>o </span> <span class="then" data-v-9debfc19>= </span><span class="word" data-v-9debfc19>_.</span><span class="variable" data-v-9debfc19>cloneDeep</span><span class="brackets" data-v-9debfc19>( obj )</span></div><div data-v-9debfc19><span class="comment" data-v-9debfc19>// _.cloneDeep 有返回值 , 我 const o 接過來</span></div><div data-v-9debfc19><span class="comment" data-v-9debfc19>//把物件轉成JSON字串</span></div><div data-v-9debfc19><span class="brackets" data-v-9debfc19>JSON</span><span class="variable" data-v-9debfc19>.stringify</span><span class="brackets" data-v-9debfc19>(</span> <span class="word" data-v-9debfc19>obj</span><span class="brackets" data-v-9debfc19>)</span><span class="comment" data-v-9debfc19>// 得到字串</span></div><div data-v-9debfc19><span class="word" data-v-9debfc19>console.</span><span class="variable" data-v-9debfc19>log</span> <span class="brackets" data-v-9debfc19>(</span><span class="brackets" data-v-9debfc19>JSON</span><span class="variable" data-v-9debfc19>.stringify</span><span class="brackets" data-v-9debfc19>(</span> <span class="word" data-v-9debfc19>obj</span><span class="brackets" data-v-9debfc19>))</span></div><div data-v-9debfc19><span class="brackets" data-v-9debfc19>JSON</span><span class="variable" data-v-9debfc19>.parse</span><span class="brackets" data-v-9debfc19>(</span><span class="brackets" data-v-9debfc19>JSON</span><span class="variable" data-v-9debfc19>.stringify</span><span class="brackets" data-v-9debfc19>(</span> <span class="word" data-v-9debfc19>obj</span><span class="brackets" data-v-9debfc19>))</span></div><div data-v-9debfc19><span class="function" data-v-9debfc19>const </span> <span class="word" data-v-9debfc19>o</span><span class="then" data-v-9debfc19>=</span> <span class="brackets" data-v-9debfc19>JSON</span><span class="variable" data-v-9debfc19>.parse</span><span class="brackets" data-v-9debfc19>(</span><span class="brackets" data-v-9debfc19>JSON</span><span class="variable" data-v-9debfc19>.stringify</span><span class="brackets" data-v-9debfc19>(</span> <span class="word" data-v-9debfc19>obj</span><span class="brackets" data-v-9debfc19>))</span></div></div><div id="threetips005" class="articleCardTitle cor36 fz34" data-v-9debfc19> 7.5 異常處理 </div><div id="" class="articleCardTitle cor36 fz34" data-v-9debfc19>throw 拋異常</div><div class="bgcVS" data-v-9debfc19><p data-v-9debfc19>JavaScript 中的驚嘆號（&quot;!&quot;）操作符</p><br data-v-9debfc19><p data-v-9debfc19>1. 邏輯 NOT 運算符：</p><br data-v-9debfc19><p data-v-9debfc19> 驚嘆號（&quot;!&quot;）在 JavaScript 中被用作邏輯 NOT 運算符。它會將其後的表達式的真值反轉，即如果表達式是真，則 NOT 運算後為假；如果表達式是假，則 NOT 運算後為真。 </p><br data-v-9debfc19><div data-v-9debfc19><span class="function" data-v-9debfc19>let </span><span class="word" data-v-9debfc19>isTrue</span> <span class="then" data-v-9debfc19>=</span><span class="number" data-v-9debfc19>true</span></div><div data-v-9debfc19><span class="function" data-v-9debfc19>let </span><span class="word" data-v-9debfc19>isFalse</span> <span class="then" data-v-9debfc19>=</span><span class="number" data-v-9debfc19>!isTrue</span><span class="comment" data-v-9debfc19>//isFalse將會是false</span></div><br data-v-9debfc19><p data-v-9debfc19>1.1</p><br data-v-9debfc19><p data-v-9debfc19> 如果您的變數 x 沒有被定義，那麼在使用 ! 來取得布林相反值時，會得到 true，因為 undefined 被轉換為布林值時為 false，而取其相反值則是 true。 </p><br data-v-9debfc19><div data-v-9debfc19><span class="function" data-v-9debfc19>var </span> <span class="word" data-v-9debfc19>y</span><span class="comment" data-v-9debfc19>//y是undefined</span></div><div data-v-9debfc19><span class="function" data-v-9debfc19>var </span><span class="word" data-v-9debfc19>oppositeValue</span><span class="then" data-v-9debfc19>=</span> <span class="number" data-v-9debfc19>!y</span><span class="comment" data-v-9debfc19>//oppositeValue將是true</span></div><br data-v-9debfc19><p data-v-9debfc19>2. 轉換為布林值：</p><br data-v-9debfc19><p data-v-9debfc19> 在一些情況下，驚嘆號也可以將值轉換為布林值。將任何值進行這樣的轉換後，非空字串將轉換為 true，數字 0 轉換為 false，以及其他值按通常的 JavaScript 轉換規則進行轉換。 </p><br data-v-9debfc19><div data-v-9debfc19><span class="function" data-v-9debfc19>let </span><span class="word" data-v-9debfc19>value</span> <span class="then" data-v-9debfc19>=</span><span class="src" data-v-9debfc19>&quot;Hello&quot;</span></div><div data-v-9debfc19><span class="function" data-v-9debfc19>let </span><span class="word" data-v-9debfc19>convertedValue</span><span class="then" data-v-9debfc19>=</span> <span class="number" data-v-9debfc19>!!value</span><span class="comment" data-v-9debfc19>//convertedValue將會是true，因為非空字串轉換為true</span></div><br data-v-9debfc19><br data-v-9debfc19><br data-v-9debfc19><div data-v-9debfc19><span class="function" data-v-9debfc19>function </span><span class="word" data-v-9debfc19>fn</span> <span class="brackets" data-v-9debfc19>(</span><span class="word" data-v-9debfc19>x,y</span> <span class="brackets" data-v-9debfc19>){</span></div><div class="padTwo VSL" data-v-9debfc19><div data-v-9debfc19><span class="comment" data-v-9debfc19>//如果變數x沒有被定義,那麼在使用!來取得布林相反值時,得到true,因為undefined被轉換為布林值時為false,而取其相反值則是true。</span></div><span class="then" data-v-9debfc19>if</span> <span class="brackets" data-v-9debfc19>(</span><span class="number" data-v-9debfc19>!x</span> <span class="then" data-v-9debfc19>|| </span><span class="number" data-v-9debfc19>!y</span> <span class="brackets" data-v-9debfc19>){</span><div data-v-9debfc19><div class="padTwo VSL" data-v-9debfc19><div data-v-9debfc19><span class="comment" data-v-9debfc19>//當undefined時,為true</span></div><span class="function" data-v-9debfc19>throw </span><span class="brackets" data-v-9debfc19>(</span><span class="src" data-v-9debfc19>&quot;沒有參數傳遞進來&quot;</span><span class="brackets" data-v-9debfc19>)</span><div data-v-9debfc19><span class="comment" data-v-9debfc19>//發現不return值了,一扔錯誤,直接中斷</span></div><span class="function" data-v-9debfc19>throw </span><span class="then" data-v-9debfc19>new </span><span class="word" data-v-9debfc19>Error </span><span class="brackets" data-v-9debfc19>(</span><span class="src" data-v-9debfc19>&quot;沒有參數傳遞進來&quot;</span><span class="brackets" data-v-9debfc19>)</span><div data-v-9debfc19><span class="comment" data-v-9debfc19>//一般用這個,效果一樣,且會標註第幾行</span></div><div data-v-9debfc19></div></div><div data-v-9debfc19><span class="brackets" data-v-9debfc19>}</span></div></div></div><div class="padTwo VSL" data-v-9debfc19><span class="then" data-v-9debfc19>return </span> <span class="word" data-v-9debfc19>x</span><span class="then" data-v-9debfc19>+</span> <span class="word" data-v-9debfc19>y</span><div data-v-9debfc19><span class="comment" data-v-9debfc19>// 我沒有傳值 x+y 是 undefined + undefined = NaN</span></div><div data-v-9debfc19></div></div><div data-v-9debfc19><span class="brackets" data-v-9debfc19>}</span></div></div><p class="fz28" data-v-9debfc19>總結</p><p class="fz28" data-v-9debfc19>1. throw 後面跟異常訊息,程式也會中止執行</p><p class="fz28" data-v-9debfc19>2. Error 對象配合 throw 可設置詳細錯誤訊息</p><div id="" class="articleCardTitle cor36 fz34" data-v-9debfc19>try catch</div><div class="bgcVS" data-v-9debfc19><div data-v-9debfc19><span class="then" data-v-9debfc19>＜</span> <span class="number" data-v-9debfc19>p</span><span class="then" data-v-9debfc19>&gt;</span> <span class="word" data-v-9debfc19>test</span><span class="then" data-v-9debfc19>＜/</span> <span class="number" data-v-9debfc19>p</span><span class="then" data-v-9debfc19>&gt;</span></div><br data-v-9debfc19><div data-v-9debfc19><span class="function" data-v-9debfc19>function </span><span class="word" data-v-9debfc19>fn</span> <span class="brackets" data-v-9debfc19>(){</span></div><div class="padTwo VSL" data-v-9debfc19><span class="variable" data-v-9debfc19>try</span> <span class="brackets" data-v-9debfc19>{</span><div data-v-9debfc19><div class="padTwo VSL" data-v-9debfc19><span class="comment" data-v-9debfc19>//try寫可能發送錯誤的代碼</span></div><div class="padTwo VSL" data-v-9debfc19><div data-v-9debfc19><span class="function" data-v-9debfc19>const </span><span class="word" data-v-9debfc19>p</span> <span class="then" data-v-9debfc19>=</span><span class="word" data-v-9debfc19>document</span><span class="variable" data-v-9debfc19>.querySelector</span><span class="brackets" data-v-9debfc19>(</span><span class="src" data-v-9debfc19>&quot;.p&quot;</span><span class="brackets" data-v-9debfc19>) </span><span class="comment" data-v-9debfc19>//往錯誤的catch(){}走</span></div><div data-v-9debfc19><span class="comment" data-v-9debfc19>//const p = document.querySelector(&quot;p&quot;) // 正確往下走</span></div><div data-v-9debfc19><span class="word" data-v-9debfc19>p.style.color</span><span class="then" data-v-9debfc19>=</span> <span class="src" data-v-9debfc19>&quot;red&quot;</span></div><div data-v-9debfc19></div></div></div><div data-v-9debfc19><span class="brackets" data-v-9debfc19>}</span><span class="variable" data-v-9debfc19>catch</span><span class="brackets" data-v-9debfc19>(</span> <span class="word" data-v-9debfc19>err</span><span class="brackets" data-v-9debfc19>){ </span><span class="comment" data-v-9debfc19>// 注意catch後面() , ()裡面是形參 寫什麼都行</span><div data-v-9debfc19><div class="padTwo VSL" data-v-9debfc19><div data-v-9debfc19><span class="comment" data-v-9debfc19>// 這邊拋錯後 依然會繼續執行</span></div><div data-v-9debfc19><span class="comment" data-v-9debfc19>// 攔截錯誤,提示瀏覽器提供的錯誤訊息,但不中斷程式執行</span></div><div data-v-9debfc19><span class="word" data-v-9debfc19>console.</span><span class="variable" data-v-9debfc19>log</span><span class="brackets" data-v-9debfc19>(</span><span class="word" data-v-9debfc19>err</span><span class="word" data-v-9debfc19>.message</span><span class="brackets" data-v-9debfc19>)</span></div><span class="comment" data-v-9debfc19>//err是我的形參可以自訂,message是固定的屬性</span><div data-v-9debfc19><span class="function" data-v-9debfc19>throw </span><span class="then" data-v-9debfc19>new </span><span class="brackets" data-v-9debfc19>Error</span><span class="brackets" data-v-9debfc19>(</span><span class="src" data-v-9debfc19>&quot;選擇器選取錯誤&quot;</span><span class="brackets" data-v-9debfc19>)</span></div><div data-v-9debfc19><span class="comment" data-v-9debfc19>//需要加return中斷程式</span></div><div data-v-9debfc19><span class="comment" data-v-9debfc19>// return </span></div><div data-v-9debfc19></div></div><div data-v-9debfc19><span class="brackets" data-v-9debfc19>}</span></div><div data-v-9debfc19><span class="function" data-v-9debfc19>finally</span><span class="brackets" data-v-9debfc19>{</span></div><div class="padTwo VSL" data-v-9debfc19><span class="comment" data-v-9debfc19>//不管程式對不對,一定會執行的代碼</span><div data-v-9debfc19><span class="word" data-v-9debfc19>console.</span><span class="variable" data-v-9debfc19>log</span><span class="brackets" data-v-9debfc19>(</span><span class="src" data-v-9debfc19>&quot;比如可用在獲取資料的轉圈&quot;</span><span class="brackets" data-v-9debfc19>)</span></div><div data-v-9debfc19></div></div><div data-v-9debfc19><span class="brackets" data-v-9debfc19>}</span></div><div data-v-9debfc19><span class="word" data-v-9debfc19>console.</span><span class="variable" data-v-9debfc19>log</span><span class="brackets" data-v-9debfc19>(</span><span class="number" data-v-9debfc19>11</span><span class="brackets" data-v-9debfc19>)</span></div></div></div></div><div data-v-9debfc19><span class="brackets" data-v-9debfc19>}</span></div><div data-v-9debfc19><span class="word" data-v-9debfc19>fn</span> <span class="brackets" data-v-9debfc19>()</span></div></div><p class="fz28" data-v-9debfc19>小結</p><p class="fz28" data-v-9debfc19>1. try...catch用於捕獲錯誤訊息</p><p class="fz28" data-v-9debfc19>2. 將預估可能發生錯誤的代碼寫在 try</p><p class="fz28" data-v-9debfc19>3. 如果 try 錯誤 執行 catch 並獲取錯誤訊息</p><p class="fz28" data-v-9debfc19>4. finally 不管怎樣 都執行</p><div id="" class="articleCardTitle cor36 fz34" data-v-9debfc19>debugger</div><p class="fz28" data-v-9debfc19>代碼特別長 一打斷點 就自動跳過來了</p><p class="fz28" data-v-9debfc19>目的</p><p class="fz28" data-v-9debfc19>在運行時 可直接跳到這邊 不用再開sorce...</p><div class="bgcVS" data-v-9debfc19><div data-v-9debfc19><span class="function" data-v-9debfc19>function </span><span class="variable" data-v-9debfc19>deepCopy</span><span class="brackets" data-v-9debfc19>( </span><span class="word" data-v-9debfc19>newObj, oldObj </span><span class="brackets" data-v-9debfc19>){</span></div><div class="padTwo VSL" data-v-9debfc19><span class="number" data-v-9debfc19>debugger</span></div><div class="padTwo VSL" data-v-9debfc19><span class="then" data-v-9debfc19>for </span> <span class="brackets" data-v-9debfc19>(</span><span class="function" data-v-9debfc19>let </span> <span class="word" data-v-9debfc19>k </span><span class="function" data-v-9debfc19>in </span><span class="word" data-v-9debfc19>oldObj </span><span class="brackets" data-v-9debfc19>){</span><div data-v-9debfc19><div class="padTwo VSL" data-v-9debfc19><div data-v-9debfc19><span class="word" data-v-9debfc19>newObj</span><span class="brackets" data-v-9debfc19>[ </span><span class="word" data-v-9debfc19>k </span><span class="brackets" data-v-9debfc19>]</span><span class="then" data-v-9debfc19>= </span><span class="word" data-v-9debfc19>oldObj</span><span class="brackets" data-v-9debfc19>[ </span><span class="word" data-v-9debfc19>k </span><span class="brackets" data-v-9debfc19>]</span></div></div><div data-v-9debfc19><span class="brackets" data-v-9debfc19>}</span></div></div></div><div data-v-9debfc19><span class="brackets" data-v-9debfc19>}</span></div></div><div id="threetips006" class="articleCardTitle cor36 fz34" data-v-9debfc19> 7.6 this 指向 </div><table class="fz30" data-v-9debfc19><tr data-v-9debfc19><th data-v-9debfc19><div class="pad20" data-v-9debfc19>調用方式</div></th><th data-v-9debfc19><div class="pad20" data-v-9debfc19>示例</div></th><th data-v-9debfc19><div class="pad20" data-v-9debfc19>函數中this指向</div></th></tr><tr data-v-9debfc19><td data-v-9debfc19><div class="pad20" data-v-9debfc19>通過new調用</div></td><td data-v-9debfc19><div class="pad20" data-v-9debfc19>mew method()</div></td><td data-v-9debfc19><div class="pad20" data-v-9debfc19>新物件</div></td></tr><tr data-v-9debfc19><td data-v-9debfc19><div class="pad20" data-v-9debfc19>直接調用</div></td><td data-v-9debfc19><div class="pad20" data-v-9debfc19>method()</div></td><td data-v-9debfc19><div class="pad20" data-v-9debfc19>全局對象window</div></td></tr><tr data-v-9debfc19><td data-v-9debfc19><div class="pad20" data-v-9debfc19>通過物件調用</div></td><td data-v-9debfc19><div class="pad20" data-v-9debfc19>obj.method()</div></td><td data-v-9debfc19><div class="pad20" data-v-9debfc19>前面的物件</div></td></tr><tr data-v-9debfc19><td data-v-9debfc19><div class="pad20" data-v-9debfc19>call.apply.bind</div></td><td data-v-9debfc19><div class="pad20" data-v-9debfc19>method.call(ctx)</div></td><td data-v-9debfc19><div class="pad20" data-v-9debfc19>第一個參數</div></td></tr></table><br data-v-9debfc19><br data-v-9debfc19><p class="fz28" data-v-9debfc19>1. 普通函數 this</p><p class="fz40" data-v-9debfc19>誰調用 this的值 指向誰</p><div class="bgcVS" data-v-9debfc19><div data-v-9debfc19><span class="word" data-v-9debfc19>console.</span><span class="variable" data-v-9debfc19>log</span> <span class="brackets" data-v-9debfc19>(</span><span class="then" data-v-9debfc19>this</span> <span class="brackets" data-v-9debfc19>)</span><span class="comment" data-v-9debfc19>//window</span></div><br data-v-9debfc19><div data-v-9debfc19><span class="function" data-v-9debfc19>function </span><span class="word" data-v-9debfc19>fn</span> <span class="brackets" data-v-9debfc19>(){</span></div><div class="padTwo VSL" data-v-9debfc19><span class="word" data-v-9debfc19>console.</span><span class="variable" data-v-9debfc19>log</span> <span class="brackets" data-v-9debfc19>(</span><span class="then" data-v-9debfc19>this</span> <span class="brackets" data-v-9debfc19>)</span><span class="comment" data-v-9debfc19>//window</span><div data-v-9debfc19></div></div><div data-v-9debfc19><span class="brackets" data-v-9debfc19>}</span></div><div data-v-9debfc19><span class="comment" data-v-9debfc19>//是 window.fn() // window 調用的指向 window</span></div><br data-v-9debfc19><div data-v-9debfc19><span class="variable" data-v-9debfc19>setTimeout</span><span class="brackets" data-v-9debfc19>(</span><span class="function" data-v-9debfc19>function </span><span class="brackets" data-v-9debfc19>(){</span></div><div class="padTwo VSL" data-v-9debfc19><span class="word" data-v-9debfc19>console.</span><span class="variable" data-v-9debfc19>log</span> <span class="brackets" data-v-9debfc19>(</span><span class="then" data-v-9debfc19>this</span> <span class="brackets" data-v-9debfc19>)</span><span class="comment" data-v-9debfc19>//window</span><div data-v-9debfc19></div></div><div data-v-9debfc19><span class="brackets" data-v-9debfc19>},</span> <span class="number" data-v-9debfc19>1000</span><span class="brackets" data-v-9debfc19>)</span></div><div data-v-9debfc19><span class="word" data-v-9debfc19>window</span><span class="variable" data-v-9debfc19>.setTimeout</span><span class="brackets" data-v-9debfc19>(</span><span class="function" data-v-9debfc19>function </span><span class="brackets" data-v-9debfc19>(){})</span></div><br data-v-9debfc19><br data-v-9debfc19><div data-v-9debfc19><span class="src" data-v-9debfc19>&quot;use strict&quot;</span><span class="comment" data-v-9debfc19>//語法要嚴格按照正常語法來寫</span></div><div data-v-9debfc19><span class="comment" data-v-9debfc19>//所有變量要先聲明在賦值</span></div><div data-v-9debfc19><span class="comment" data-v-9debfc19>//函數不允許聲明多個一樣的</span></div><br data-v-9debfc19><br data-v-9debfc19><div data-v-9debfc19><span class="src" data-v-9debfc19>&quot;use strict&quot;</span></div><div data-v-9debfc19><span class="function" data-v-9debfc19>function </span><span class="word" data-v-9debfc19>fn</span> <span class="brackets" data-v-9debfc19>(){</span></div><div class="padTwo VSL" data-v-9debfc19><span class="word" data-v-9debfc19>console.</span><span class="variable" data-v-9debfc19>log</span> <span class="brackets" data-v-9debfc19>(</span><span class="then" data-v-9debfc19>this</span> <span class="brackets" data-v-9debfc19>)</span><span class="comment" data-v-9debfc19>//undefined</span><div data-v-9debfc19></div></div><div data-v-9debfc19><span class="brackets" data-v-9debfc19>}</span></div><br data-v-9debfc19><br data-v-9debfc19><div data-v-9debfc19><span class="then" data-v-9debfc19>＜</span> <span class="number" data-v-9debfc19>button</span><span class="then" data-v-9debfc19>&gt;</span> <span class="word" data-v-9debfc19>點擊</span><span class="then" data-v-9debfc19>＜/</span> <span class="number" data-v-9debfc19>button</span><span class="then" data-v-9debfc19>&gt;</span></div><div data-v-9debfc19><span class="word" data-v-9debfc19>document</span><span class="variable" data-v-9debfc19>.querySelector</span><span class="brackets" data-v-9debfc19>(</span> <span class="src" data-v-9debfc19>&quot;button&quot;</span><span class="brackets" data-v-9debfc19>)</span><span class="variable" data-v-9debfc19>.addEventListener</span><span class="brackets" data-v-9debfc19>(</span> <span class="src" data-v-9debfc19>&quot;click&quot;,</span><span class="function" data-v-9debfc19>function </span><span class="brackets" data-v-9debfc19>(){</span></div><div class="pTwo VSL" data-v-9debfc19><span class="word" data-v-9debfc19>console.</span><span class="variable" data-v-9debfc19>log</span> <span class="brackets" data-v-9debfc19>(</span><span class="then" data-v-9debfc19>this</span> <span class="brackets" data-v-9debfc19>)</span><span class="comment" data-v-9debfc19>//button , button 調用了我這個函數</span></div><div data-v-9debfc19><span class="brackets" data-v-9debfc19>})</span></div><br data-v-9debfc19><br data-v-9debfc19><div data-v-9debfc19><span class="function" data-v-9debfc19>const </span><span class="word" data-v-9debfc19>obj</span> <span class="then" data-v-9debfc19>=</span><span class="brackets" data-v-9debfc19>{</span></div><div class="padTwo VSL" data-v-9debfc19><span class="word" data-v-9debfc19>sayHi:</span><span class="function" data-v-9debfc19>function </span><span class="brackets" data-v-9debfc19>(){</span><div data-v-9debfc19><div class="pTwo VSL" data-v-9debfc19><span class="word" data-v-9debfc19>console.</span><span class="variable" data-v-9debfc19>log</span><span class="brackets" data-v-9debfc19>(</span><span class="then" data-v-9debfc19>this</span><span class="brackets" data-v-9debfc19>)</span><span class="comment" data-v-9debfc19>//指向obj</span></div></div><div data-v-9debfc19><span class="brackets" data-v-9debfc19>}</span></div></div><div data-v-9debfc19><span class="brackets" data-v-9debfc19>}</span></div><div data-v-9debfc19><span class="word" data-v-9debfc19>obj.sayHi</span><span class="brackets" data-v-9debfc19>()</span></div></div><p class="fz28" data-v-9debfc19>2. 箭頭函數 this</p><p class="fz40" data-v-9debfc19>箭頭函數 this 根據上下文 , 去上一級作用域找 this</p><br data-v-9debfc19><p class="fz28" data-v-9debfc19> 1.箭頭函數 默認 綁定 外層 this 的值, 所以在 箭頭函數中 this 的值和 外層的 this 是一樣的 </p><p class="fz28" data-v-9debfc19>2.箭頭函數的的 this 引用的就是最近作用域中的 this</p><p class="fz28" data-v-9debfc19> 3.向外層作用域中 , 一層一層查找 this , 直到有 this 的定義 </p><div class="bgcVS" data-v-9debfc19><div data-v-9debfc19><span class="function" data-v-9debfc19>const </span><span class="word" data-v-9debfc19>user</span> <span class="then" data-v-9debfc19>=</span><span class="brackets" data-v-9debfc19>{</span></div><div class="padTwo VSL" data-v-9debfc19><div class="bor pad20 disInl" data-v-9debfc19><span class="word" data-v-9debfc19>name:</span> <span class="src" data-v-9debfc19>&quot;wayne&quot;</span><div data-v-9debfc19><span class="comment" data-v-9debfc19>//箭頭函數中的this為</span></div><div data-v-9debfc19><span class="comment" data-v-9debfc19>//函數聲明環境中的this一致</span></div><div data-v-9debfc19><span class="word" data-v-9debfc19>sayHi:</span><span class="brackets" data-v-9debfc19>()</span><span class="function" data-v-9debfc19>=&gt;</span><span class="brackets" data-v-9debfc19>{</span></div><div data-v-9debfc19><div class="padTwo VSL" data-v-9debfc19><span class="word" data-v-9debfc19>console.</span><span class="variable" data-v-9debfc19>log</span><span class="brackets" data-v-9debfc19>(</span><span class="then" data-v-9debfc19>this</span><span class="brackets" data-v-9debfc19>)</span><span class="comment" data-v-9debfc19>//箭頭函數裡面沒有this</span><div data-v-9debfc19><span class="comment" data-v-9debfc19>//他綁定最近一級的this(這個物件裡面的this)</span></div><div data-v-9debfc19><span class="comment" data-v-9debfc19>//物件的this是誰?</span></div><div data-v-9debfc19><span class="comment" data-v-9debfc19>//函數有this</span></div><div data-v-9debfc19><span class="comment" data-v-9debfc19>//而物件的this是外層 //window</span></div><div data-v-9debfc19></div></div><div data-v-9debfc19><span class="brackets" data-v-9debfc19>},</span></div></div></div></div><div data-v-9debfc19><span class="brackets" data-v-9debfc19>}</span></div><br data-v-9debfc19><br data-v-9debfc19><div data-v-9debfc19><span class="function" data-v-9debfc19>const </span><span class="word" data-v-9debfc19>btn</span> <span class="then" data-v-9debfc19>=</span><span class="word" data-v-9debfc19>document.querySelector</span><span class="brackets" data-v-9debfc19>(</span> <span class="src" data-v-9debfc19>&quot;.btn&quot;</span><span class="brackets" data-v-9debfc19>)</span></div><span class="comment" data-v-9debfc19>//普通函數指DOM對象</span><div data-v-9debfc19><span class="word" data-v-9debfc19>btn.addEventListener</span><span class="brackets" data-v-9debfc19>(</span> <span class="src" data-v-9debfc19>&quot;click&quot;,</span><span class="function" data-v-9debfc19>function</span><span class="brackets" data-v-9debfc19>(){</span></div><div class="pTwo" data-v-9debfc19><span class="word" data-v-9debfc19>console.</span><span class="variable" data-v-9debfc19>log</span> <span class="brackets" data-v-9debfc19>(</span><span class="then" data-v-9debfc19>this</span> <span class="brackets" data-v-9debfc19>)</span><span class="comment" data-v-9debfc19>// btn</span></div><div class="brackets" data-v-9debfc19>}</div><div data-v-9debfc19><span class="comment" data-v-9debfc19>// 箭頭函數 此時 this 指向 window</span></div><div data-v-9debfc19><span class="word" data-v-9debfc19>btn.addEventListener</span><span class="brackets" data-v-9debfc19>(</span> <span class="src" data-v-9debfc19>&quot;click&quot;,</span><span class="brackets" data-v-9debfc19>()</span><span class="function" data-v-9debfc19>=&gt; </span><span class="brackets" data-v-9debfc19>{</span></div><div class="pTwo" data-v-9debfc19><span class="word" data-v-9debfc19>console.</span><span class="variable" data-v-9debfc19>log</span> <span class="brackets" data-v-9debfc19>(</span><span class="then" data-v-9debfc19>this</span> <span class="brackets" data-v-9debfc19>)</span><span class="comment" data-v-9debfc19>// window</span></div><div class="brackets" data-v-9debfc19>})</div><br data-v-9debfc19><br data-v-9debfc19><p data-v-9debfc19>原型對象時</p><br data-v-9debfc19><div data-v-9debfc19><span class="function" data-v-9debfc19>function </span><span class="brackets" data-v-9debfc19>(){}</span></div><div data-v-9debfc19><span class="word" data-v-9debfc19>Person.prototype.sayHi</span><span class="then" data-v-9debfc19>=</span> <span class="brackets" data-v-9debfc19>()</span><span class="function" data-v-9debfc19>=&gt;</span> <span class="brackets" data-v-9debfc19>{</span></div><div class="padTwo VSL" data-v-9debfc19><span class="word" data-v-9debfc19>console.</span><span class="variable" data-v-9debfc19>log</span> <span class="brackets" data-v-9debfc19>(</span><span class="src" data-v-9debfc19>&quot;hi&quot;</span> <span class="brackets" data-v-9debfc19>)</span><div data-v-9debfc19><span class="word" data-v-9debfc19>console.</span><span class="variable" data-v-9debfc19>log</span><span class="brackets" data-v-9debfc19>(</span> <span class="then" data-v-9debfc19>this</span><span class="brackets" data-v-9debfc19>)</span><span class="comment" data-v-9debfc19>//window</span></div><div data-v-9debfc19></div></div><div data-v-9debfc19><span class="brackets" data-v-9debfc19>}</span></div><div data-v-9debfc19><span class="comment" data-v-9debfc19>//構造函數&amp;原型對象裡的this都指向實例</span></div><div data-v-9debfc19><span class="function" data-v-9debfc19>const </span> <span class="word" data-v-9debfc19>p1</span><span class="then" data-v-9debfc19>=</span> <span class="then" data-v-9debfc19>new </span><span class="brackets" data-v-9debfc19>Person()</span><span class="comment" data-v-9debfc19>//this不指向p1了</span></div></div><p class="fz28" data-v-9debfc19>總結</p><p class="fz28" data-v-9debfc19>1. 函數內不存在 this , 沿用上一級的</p><p class="fz28" data-v-9debfc19>2. 不適用 . . &gt; 構造函數 . 原型函數 . dom 事件函數</p><p class="fz28" data-v-9debfc19>3. 適用 . . &gt; 需要用上層 this 的地方</p><div id="threetips007" class="articleCardTitle cor36 fz34" data-v-9debfc19> 7.7 改變 this --- call() </div><br data-v-9debfc19><p class="fz28" data-v-9debfc19> 使用 call 方法 <span class="spo cor36" data-v-9debfc19> 調用函數 </span> , 同時 指定 被調用 函數中的 <span class="spo cor36" data-v-9debfc19> this 的值 </span></p><div class="bgcVS" data-v-9debfc19><div data-v-9debfc19><span class="function" data-v-9debfc19>const </span><span class="word" data-v-9debfc19>obj</span> <span class="then" data-v-9debfc19>=</span><span class="brackets" data-v-9debfc19>{</span> <span class="word" data-v-9debfc19>name:</span><span class="src" data-v-9debfc19>&quot;wayne&quot;</span> <span class="brackets" data-v-9debfc19>}</span></div><div data-v-9debfc19><span class="function" data-v-9debfc19>function </span><span class="word" data-v-9debfc19>fn</span> <span class="brackets" data-v-9debfc19>(){</span></div><div class="padTwo VSL" data-v-9debfc19><span class="word" data-v-9debfc19>console.</span><span class="variable" data-v-9debfc19>log</span> <span class="brackets" data-v-9debfc19>(</span><span class="then" data-v-9debfc19>this</span> <span class="brackets" data-v-9debfc19>)</span><span class="comment" data-v-9debfc19>//window</span><div data-v-9debfc19></div></div><div data-v-9debfc19><span class="brackets" data-v-9debfc19>}</span></div><div data-v-9debfc19><span class="comment" data-v-9debfc19>//1.調用函數</span></div><div data-v-9debfc19><span class="comment" data-v-9debfc19>//2.改變this指向</span></div><div data-v-9debfc19><span class="word" data-v-9debfc19>fn</span> <span class="brackets" data-v-9debfc19>()</span></div><div data-v-9debfc19><span class="word" data-v-9debfc19>fn</span> <span class="variable" data-v-9debfc19>.call</span><span class="brackets" data-v-9debfc19>()</span><span class="comment" data-v-9debfc19>//只調用</span></div><div data-v-9debfc19><span class="word" data-v-9debfc19>fn</span> <span class="variable" data-v-9debfc19>.call</span><span class="brackets" data-v-9debfc19>(</span> <span class="word" data-v-9debfc19>obj</span><span class="brackets" data-v-9debfc19>)</span><span class="comment" data-v-9debfc19>//打印了obj//代表改變了this指向</span></div><div data-v-9debfc19><span class="comment" data-v-9debfc19>// 3. 返回值: 本身在調用函數, 所以返回值就是函數的返回值</span></div><br data-v-9debfc19><div data-v-9debfc19><span class="function" data-v-9debfc19>function </span><span class="word" data-v-9debfc19>fn</span><span class="brackets" data-v-9debfc19>(</span> <span class="word" data-v-9debfc19>x,y</span><span class="brackets" data-v-9debfc19>){</span></div><div class="padTwo VSL" data-v-9debfc19><span class="word" data-v-9debfc19>console.</span><span class="variable" data-v-9debfc19>log</span> <span class="brackets" data-v-9debfc19>(</span><span class="then" data-v-9debfc19>this</span> <span class="brackets" data-v-9debfc19>)</span><span class="comment" data-v-9debfc19>//window</span><div data-v-9debfc19><span class="word" data-v-9debfc19>console.</span><span class="variable" data-v-9debfc19>log</span><span class="brackets" data-v-9debfc19>(</span> <span class="word" data-v-9debfc19>x</span><span class="then" data-v-9debfc19>+</span> <span class="word" data-v-9debfc19>y</span><span class="brackets" data-v-9debfc19>)</span> <span class="comment" data-v-9debfc19>//3</span></div><div data-v-9debfc19></div></div><div data-v-9debfc19><span class="brackets" data-v-9debfc19>}</span></div><div data-v-9debfc19><span class="word" data-v-9debfc19>fn</span> <span class="variable" data-v-9debfc19>.call</span><span class="brackets" data-v-9debfc19>(</span> <span class="word" data-v-9debfc19>obj,</span><span class="number" data-v-9debfc19>1,2</span> <span class="brackets" data-v-9debfc19>)</span></div></div><div id="threetips008" class="articleCardTitle cor36 fz34" data-v-9debfc19> 7.8 改變 this --- apply() </div><p class="fz28" data-v-9debfc19> 使用 apply 方法 <span class="spo cor36" data-v-9debfc19> 調用函數 </span> , 同時 指定 被調用 函數中的 <span class="spo cor36" data-v-9debfc19> this 的值 </span></p><div class="bgcVS" data-v-9debfc19><div data-v-9debfc19><span class="function" data-v-9debfc19>const </span><span class="word" data-v-9debfc19>obj</span> <span class="then" data-v-9debfc19>=</span><span class="brackets" data-v-9debfc19>{</span> <span class="word" data-v-9debfc19>name:</span><span class="src" data-v-9debfc19>&quot;wayne&quot;</span> <span class="brackets" data-v-9debfc19>}</span></div><div data-v-9debfc19><span class="function" data-v-9debfc19>function </span><span class="word" data-v-9debfc19>fn</span> <span class="brackets" data-v-9debfc19>(){</span></div><div class="padTwo VSL" data-v-9debfc19><span class="word" data-v-9debfc19>console.</span><span class="variable" data-v-9debfc19>log</span> <span class="brackets" data-v-9debfc19>(</span><span class="then" data-v-9debfc19>this</span> <span class="brackets" data-v-9debfc19>)</span><span class="comment" data-v-9debfc19>//window</span><div data-v-9debfc19></div></div><div data-v-9debfc19><span class="brackets" data-v-9debfc19>}</span></div><div data-v-9debfc19><span class="comment" data-v-9debfc19>//1.調用函數</span></div><div data-v-9debfc19><span class="comment" data-v-9debfc19>//2.改變this指向</span></div><div data-v-9debfc19><span class="word" data-v-9debfc19>fn</span> <span class="variable" data-v-9debfc19>.apply</span><span class="brackets" data-v-9debfc19>(</span> <span class="word" data-v-9debfc19>obj</span><span class="brackets" data-v-9debfc19>)</span></div><br data-v-9debfc19><div data-v-9debfc19><span class="function" data-v-9debfc19>function </span><span class="word" data-v-9debfc19>fn</span> <span class="brackets" data-v-9debfc19>(</span><span class="word" data-v-9debfc19>x,y</span> <span class="brackets" data-v-9debfc19>){</span></div><div class="padTwo VSL" data-v-9debfc19><span class="word" data-v-9debfc19>console.</span><span class="variable" data-v-9debfc19>log</span> <span class="brackets" data-v-9debfc19>(</span><span class="then" data-v-9debfc19>this</span> <span class="brackets" data-v-9debfc19>)</span><span class="comment" data-v-9debfc19>//window</span><div data-v-9debfc19><span class="word" data-v-9debfc19>console.</span><span class="variable" data-v-9debfc19>log</span><span class="brackets" data-v-9debfc19>(</span> <span class="word" data-v-9debfc19>x+y</span><span class="brackets" data-v-9debfc19>)</span></div><div data-v-9debfc19></div></div><div data-v-9debfc19><span class="brackets" data-v-9debfc19>}</span></div><div data-v-9debfc19><span class="word" data-v-9debfc19>fn</span> <span class="word" data-v-9debfc19>.</span><span class="variable" data-v-9debfc19>apply</span><span class="brackets" data-v-9debfc19>(</span> <span class="word" data-v-9debfc19>obj, </span><span class="brackets" data-v-9debfc19>[</span> <span class="number" data-v-9debfc19>1, 2 </span><span class="brackets" data-v-9debfc19>])</span></div><div data-v-9debfc19><span class="comment" data-v-9debfc19>// 3. 返回值: 本身在調用函數, 所以返回值就是函數的返回值</span></div><div data-v-9debfc19><span class="comment" data-v-9debfc19>//使用場景:用Math.max()求數組最大值</span></div><br data-v-9debfc19><div data-v-9debfc19><span class="function" data-v-9debfc19>const </span><span class="variable" data-v-9debfc19>max</span> <span class="then" data-v-9debfc19>=</span><span class="word" data-v-9debfc19>Math</span><span class="variable" data-v-9debfc19>.max</span><span class="brackets" data-v-9debfc19>(</span> <span class="number" data-v-9debfc19>1,2,3</span><span class="brackets" data-v-9debfc19>)</span></div><div data-v-9debfc19><span class="word" data-v-9debfc19>console.</span><span class="variable" data-v-9debfc19>log</span> <span class="brackets" data-v-9debfc19>(</span><span class="variable" data-v-9debfc19>max</span> <span class="brackets" data-v-9debfc19>)</span></div><br data-v-9debfc19><div data-v-9debfc19><span class="function" data-v-9debfc19>const </span><span class="variable" data-v-9debfc19>max</span> <span class="then" data-v-9debfc19>=</span><span class="word" data-v-9debfc19>Math</span><span class="variable" data-v-9debfc19>.max.apply</span><span class="brackets" data-v-9debfc19>(</span> <span class="word" data-v-9debfc19>Math,</span><span class="brackets" data-v-9debfc19>[</span> <span class="number" data-v-9debfc19>1,2,3</span><span class="brackets" data-v-9debfc19>])</span></div><div data-v-9debfc19><span class="word" data-v-9debfc19>console.</span><span class="variable" data-v-9debfc19>log</span> <span class="brackets" data-v-9debfc19>(</span><span class="variable" data-v-9debfc19>max</span> <span class="brackets" data-v-9debfc19>)</span></div><br data-v-9debfc19><div data-v-9debfc19><span class="function" data-v-9debfc19>const </span><span class="word" data-v-9debfc19>arr</span> <span class="then" data-v-9debfc19>=</span><span class="brackets" data-v-9debfc19>[</span><span class="number" data-v-9debfc19>100,44,77</span><span class="brackets" data-v-9debfc19>]</span></div><div data-v-9debfc19><span class="function" data-v-9debfc19>const </span><span class="variable" data-v-9debfc19>max</span> <span class="then" data-v-9debfc19>=</span><span class="word" data-v-9debfc19>Math</span><span class="variable" data-v-9debfc19>.max.apply</span><span class="brackets" data-v-9debfc19>(</span><span class="word" data-v-9debfc19>Math,arr</span> <span class="brackets" data-v-9debfc19>)</span></div><div data-v-9debfc19><span class="function" data-v-9debfc19>const </span><span class="variable" data-v-9debfc19>min</span> <span class="then" data-v-9debfc19>=</span><span class="word" data-v-9debfc19>Math</span><span class="variable" data-v-9debfc19>.max.apply</span><span class="brackets" data-v-9debfc19>(</span><span class="word" data-v-9debfc19>Math,arr</span> <span class="brackets" data-v-9debfc19>)</span></div><div data-v-9debfc19><span class="function" data-v-9debfc19>const </span><span class="variable" data-v-9debfc19>min</span> <span class="then" data-v-9debfc19>=</span><span class="word" data-v-9debfc19>Math</span><span class="variable" data-v-9debfc19>.max.apply</span><span class="brackets" data-v-9debfc19>(</span><span class="word" data-v-9debfc19>null,arr</span> <span class="brackets" data-v-9debfc19>)</span><span class="comment" data-v-9debfc19>//this指向用null不改變也可以</span></div><div data-v-9debfc19><span class="word" data-v-9debfc19>console.</span><span class="variable" data-v-9debfc19>log</span> <span class="brackets" data-v-9debfc19>(</span><span class="variable" data-v-9debfc19>max</span> <span class="brackets" data-v-9debfc19>)</span></div><br data-v-9debfc19><br data-v-9debfc19><p data-v-9debfc19>求數組最大值</p><p data-v-9debfc19>1.for循環</p><p data-v-9debfc19>2.apply(要綁定的this,[數組])</p><p data-v-9debfc19>3.console.log(Math.max(...arr))</p></div><p class="fz28" data-v-9debfc19>call &amp; apply</p><p class="fz28" data-v-9debfc19>都能調用函數 , 改變 this 指向</p><p class="fz28" data-v-9debfc19>差在 參數不一樣 , apply 傳遞的 必須是 數組</p><div id="threetips009" class="articleCardTitle cor36 fz34" data-v-9debfc19> 7.9 改變 this --- bind() </div><div class="bgcVS" data-v-9debfc19><div data-v-9debfc19><span class="function" data-v-9debfc19>const </span><span class="word" data-v-9debfc19>obj</span> <span class="then" data-v-9debfc19>=</span><span class="brackets" data-v-9debfc19>{</span> <span class="word" data-v-9debfc19>name:</span><span class="src" data-v-9debfc19>&quot;wayne&quot;</span> <span class="brackets" data-v-9debfc19>}</span></div><div data-v-9debfc19><span class="function" data-v-9debfc19>function </span><span class="word" data-v-9debfc19>fn</span> <span class="brackets" data-v-9debfc19>(){</span></div><div class="padTwo VSL" data-v-9debfc19><span class="word" data-v-9debfc19>console.</span><span class="variable" data-v-9debfc19>log</span> <span class="brackets" data-v-9debfc19>(</span><span class="then" data-v-9debfc19>this</span> <span class="brackets" data-v-9debfc19>)</span><div data-v-9debfc19></div></div><div data-v-9debfc19><span class="brackets" data-v-9debfc19>}</span></div><div data-v-9debfc19><span class="comment" data-v-9debfc19>//1.bind不調用函數</span></div><div data-v-9debfc19><span class="comment" data-v-9debfc19>//2.能改變this指向</span></div><div data-v-9debfc19><span class="word" data-v-9debfc19>fn</span><span class="variable" data-v-9debfc19>.bind</span><span class="brackets" data-v-9debfc19>(</span> <span class="word" data-v-9debfc19>obj</span><span class="brackets" data-v-9debfc19>)</span></div><div data-v-9debfc19><span class="comment" data-v-9debfc19>//3.返回值:返回 已改變this後 的函數</span></div><div data-v-9debfc19><span class="function" data-v-9debfc19>const </span><span class="word" data-v-9debfc19>fun</span> <span class="then" data-v-9debfc19>=</span><span class="word" data-v-9debfc19>fn</span><span class="variable" data-v-9debfc19>.bind</span><span class="brackets" data-v-9debfc19>(</span> <span class="word" data-v-9debfc19>obj</span><span class="brackets" data-v-9debfc19>)</span></div><div data-v-9debfc19><span class="word" data-v-9debfc19>console.</span><span class="variable" data-v-9debfc19>log</span><span class="brackets" data-v-9debfc19>(</span><span class="word" data-v-9debfc19>fun</span><span class="brackets" data-v-9debfc19>)</span></div><div data-v-9debfc19><span class="word" data-v-9debfc19>fun</span><span class="brackets" data-v-9debfc19>()</span></div><br data-v-9debfc19><br data-v-9debfc19><p data-v-9debfc19>場景: 改變定時器內的 this 指向</p><br data-v-9debfc19><p data-v-9debfc19>需求: 有一個按鈕 , 點擊後禁用 , 2 秒後開啟</p><br data-v-9debfc19><div data-v-9debfc19><span class="then" data-v-9debfc19>＜</span> <span class="number" data-v-9debfc19>button</span><span class="then" data-v-9debfc19>&gt;</span> <span class="word" data-v-9debfc19>發送信息</span><span class="then" data-v-9debfc19>＜/</span> <span class="number" data-v-9debfc19>button</span><span class="then" data-v-9debfc19>&gt;</span></div><div data-v-9debfc19><span class="function" data-v-9debfc19>const </span><span class="word" data-v-9debfc19>btn</span> <span class="then" data-v-9debfc19>=</span><span class="word" data-v-9debfc19>document</span><span class="variable" data-v-9debfc19>.querySelector</span><span class="brackets" data-v-9debfc19>(</span> <span class="src" data-v-9debfc19>&quot;button&quot;</span><span class="brackets" data-v-9debfc19>)</span></div><div data-v-9debfc19><span class="word" data-v-9debfc19>btn</span><span class="variable" data-v-9debfc19>.addEventListener</span><span class="brackets" data-v-9debfc19>(</span> <span class="src" data-v-9debfc19>&quot;click&quot;</span><span class="then" data-v-9debfc19>,</span><span class="function" data-v-9debfc19>function </span><span class="brackets" data-v-9debfc19>() { </span><span class="comment" data-v-9debfc19> //回調</span></div><div class="padTwo VSL" data-v-9debfc19><span class="then" data-v-9debfc19>this</span><span class="variable" data-v-9debfc19>.disabled</span><span class="then" data-v-9debfc19>=</span> <span class="number" data-v-9debfc19>true</span><span class="comment" data-v-9debfc19>//這樣btn改名btn111也可以</span><div data-v-9debfc19></div></div><div class="padTwo VSL" data-v-9debfc19><span class="variable" data-v-9debfc19>setTimeout</span><span class="brackets" data-v-9debfc19>(</span><span class="function" data-v-9debfc19>function </span><span class="brackets" data-v-9debfc19>(){</span><div data-v-9debfc19><div class="padTwo VSL" data-v-9debfc19><span class="then" data-v-9debfc19>this</span><span class="variable" data-v-9debfc19>.disabled</span><span class="then" data-v-9debfc19>=</span> <span class="number" data-v-9debfc19>false</span><div data-v-9debfc19></div></div></div><div data-v-9debfc19><span class="brackets" data-v-9debfc19>},</span><span class="number" data-v-9debfc19>2000</span> <span class="brackets" data-v-9debfc19>)</span></div></div><div data-v-9debfc19><span class="brackets" data-v-9debfc19>})</span></div><br data-v-9debfc19><p data-v-9debfc19>出問題, setTimeout 裡面的 this 指向 window</p><br data-v-9debfc19><div data-v-9debfc19><span class="then" data-v-9debfc19>＜</span> <span class="number" data-v-9debfc19>button</span><span class="then" data-v-9debfc19>&gt;</span> <span class="word" data-v-9debfc19>發送信息</span><span class="then" data-v-9debfc19>＜/</span> <span class="number" data-v-9debfc19>button</span><span class="then" data-v-9debfc19>&gt;</span></div><div data-v-9debfc19><span class="function" data-v-9debfc19>const </span><span class="word" data-v-9debfc19>btn</span> <span class="then" data-v-9debfc19>=</span><span class="word" data-v-9debfc19>document</span><span class="variable" data-v-9debfc19>.querySelector</span><span class="brackets" data-v-9debfc19>(</span> <span class="src" data-v-9debfc19>&quot;button&quot;</span><span class="brackets" data-v-9debfc19>)</span></div><div data-v-9debfc19><span class="word" data-v-9debfc19>btn</span><span class="variable" data-v-9debfc19>.addEventListener</span><span class="brackets" data-v-9debfc19>(</span> <span class="src" data-v-9debfc19>&quot;click&quot;</span><span class="then" data-v-9debfc19>,</span><span class="function" data-v-9debfc19>function </span><span class="brackets" data-v-9debfc19>() { </span><span class="comment" data-v-9debfc19> //回調</span></div><div class="padTwo VSL" data-v-9debfc19><span class="then" data-v-9debfc19>this</span><span class="variable" data-v-9debfc19>.disabled</span><span class="then" data-v-9debfc19>=</span> <span class="number" data-v-9debfc19>true</span><span class="comment" data-v-9debfc19>//這樣btn改名btn111也可以</span><div data-v-9debfc19></div></div><div class="padTwo VSL" data-v-9debfc19><span class="variable" data-v-9debfc19>setTimeout</span><span class="brackets" data-v-9debfc19>(</span><span class="function" data-v-9debfc19>function </span><span class="brackets" data-v-9debfc19>(){</span><div data-v-9debfc19><div class="padTwo VSL" data-v-9debfc19><span class="then" data-v-9debfc19>btn</span><span class="variable" data-v-9debfc19>.disabled</span><span class="then" data-v-9debfc19>=</span> <span class="number" data-v-9debfc19>false</span><div data-v-9debfc19></div></div></div><div data-v-9debfc19><span class="brackets" data-v-9debfc19>},</span><span class="number" data-v-9debfc19>2000</span> <span class="brackets" data-v-9debfc19>)</span></div></div><div data-v-9debfc19><span class="brackets" data-v-9debfc19>})</span></div><br data-v-9debfc19><br data-v-9debfc19><div data-v-9debfc19><span class="then" data-v-9debfc19>＜</span> <span class="number" data-v-9debfc19>button</span><span class="then" data-v-9debfc19>&gt;</span> <span class="word" data-v-9debfc19>發送信息</span><span class="then" data-v-9debfc19>＜/</span> <span class="number" data-v-9debfc19>button</span><span class="then" data-v-9debfc19>&gt;</span></div><div data-v-9debfc19><span class="function" data-v-9debfc19>const </span><span class="word" data-v-9debfc19>btn</span> <span class="then" data-v-9debfc19>=</span><span class="word" data-v-9debfc19>document</span><span class="variable" data-v-9debfc19>.querySelector</span><span class="brackets" data-v-9debfc19>(</span> <span class="src" data-v-9debfc19>&quot;button&quot;</span><span class="brackets" data-v-9debfc19>)</span></div><div data-v-9debfc19><span class="word" data-v-9debfc19>btn</span><span class="variable" data-v-9debfc19>.addEventListener</span><span class="brackets" data-v-9debfc19>(</span> <span class="src" data-v-9debfc19>&quot;click&quot;</span><span class="then" data-v-9debfc19>,</span><span class="function" data-v-9debfc19>function </span><span class="brackets" data-v-9debfc19>() { </span><span class="comment" data-v-9debfc19> //回調</span></div><div class="padTwo VSL" data-v-9debfc19><span class="then" data-v-9debfc19>this</span><span class="variable" data-v-9debfc19>.disabled</span><span class="then" data-v-9debfc19>=</span> <span class="number" data-v-9debfc19>true</span><span class="comment" data-v-9debfc19>//這樣btn改名btn111也可以</span><div data-v-9debfc19></div></div><div class="padTwo VSL" data-v-9debfc19><span class="variable" data-v-9debfc19>setTimeout</span><span class="brackets" data-v-9debfc19>(</span><span class="function" data-v-9debfc19>function </span><span class="brackets" data-v-9debfc19>(){</span><div data-v-9debfc19><div class="padTwo VSL" data-v-9debfc19><div data-v-9debfc19><span class="comment" data-v-9debfc19>//在這個普通函數裡面,我們要this由原來的window改為btn</span></div><span class="then" data-v-9debfc19>this</span><span class="variable" data-v-9debfc19>.disabled</span><span class="then" data-v-9debfc19>=</span> <span class="number" data-v-9debfc19>false</span><div data-v-9debfc19></div></div></div><div data-v-9debfc19><span class="brackets" data-v-9debfc19>}</span><span class="variable" data-v-9debfc19>.bind</span><span class="brackets" data-v-9debfc19>( btn ), </span><span class="number" data-v-9debfc19>2000</span> <span class="brackets" data-v-9debfc19>)</span></div></div><div data-v-9debfc19><span class="brackets" data-v-9debfc19>})</span></div><br data-v-9debfc19><hr data-v-9debfc19><div data-v-9debfc19><img style="width:100%;" src="'+mo+'" data-v-9debfc19></div><hr data-v-9debfc19><br data-v-9debfc19><div data-v-9debfc19><span class="then" data-v-9debfc19>＜</span> <span class="number" data-v-9debfc19>button</span><span class="then" data-v-9debfc19>&gt;</span> <span class="word" data-v-9debfc19>發送信息</span><span class="then" data-v-9debfc19>＜/</span> <span class="number" data-v-9debfc19>button</span><span class="then" data-v-9debfc19>&gt;</span></div><div data-v-9debfc19><span class="function" data-v-9debfc19>const </span><span class="word" data-v-9debfc19>btn</span> <span class="then" data-v-9debfc19>=</span><span class="word" data-v-9debfc19>document</span><span class="variable" data-v-9debfc19>.querySelector</span><span class="brackets" data-v-9debfc19>(</span> <span class="src" data-v-9debfc19>&quot;button&quot;</span><span class="brackets" data-v-9debfc19>)</span></div><div data-v-9debfc19><span class="word" data-v-9debfc19>btn</span><span class="variable" data-v-9debfc19>.addEventListener</span><span class="brackets" data-v-9debfc19>(</span> <span class="src" data-v-9debfc19>&quot;click&quot;</span><span class="then" data-v-9debfc19>,</span><span class="function" data-v-9debfc19>function </span><span class="brackets" data-v-9debfc19>() { </span><span class="comment" data-v-9debfc19> //回調</span></div><div class="padTwo VSL" data-v-9debfc19><span class="then" data-v-9debfc19>this</span><span class="variable" data-v-9debfc19>.disabled</span><span class="then" data-v-9debfc19>=</span> <span class="number" data-v-9debfc19>true</span><span class="comment" data-v-9debfc19>//這樣btn改名btn111也可以</span><div data-v-9debfc19></div></div><div class="padTwo VSL" data-v-9debfc19><span class="variable" data-v-9debfc19>setTimeout</span><span class="brackets" data-v-9debfc19>(</span><span class="function" data-v-9debfc19>function </span><span class="brackets" data-v-9debfc19>(){</span><div data-v-9debfc19><div class="padTwo VSL" data-v-9debfc19><div data-v-9debfc19><span class="comment" data-v-9debfc19>//在這個普通函數裡面,我們要this由原來的window改為btn</span></div><span class="then" data-v-9debfc19>this</span><span class="variable" data-v-9debfc19>.disabled</span><span class="then" data-v-9debfc19>=</span> <span class="number" data-v-9debfc19>false</span><div data-v-9debfc19></div></div></div><div data-v-9debfc19><span class="brackets" data-v-9debfc19>}</span><span class="variable" data-v-9debfc19>.bind</span><span class="brackets" data-v-9debfc19>(</span> <span class="then" data-v-9debfc19>this</span><span class="brackets" data-v-9debfc19>),</span><span class="number" data-v-9debfc19>2000</span> <span class="brackets" data-v-9debfc19>)</span></div></div><div data-v-9debfc19><span class="brackets" data-v-9debfc19>})</span></div><br data-v-9debfc19></div><p class="fz28" data-v-9debfc19>call &amp; apply &amp; bind</p><p class="fz28" data-v-9debfc19>相同:</p><p class="fz28" data-v-9debfc19>都可以改變函數內部的 this 指向</p><br data-v-9debfc19><p class="fz28" data-v-9debfc19>區別:</p><p class="fz28" data-v-9debfc19> call &amp; apply 會 調用函數 , 並改變函數內部 this 指向 </p><br data-v-9debfc19><p class="fz28" data-v-9debfc19> call &amp; apply 傳遞的參數不一樣 , call (aru1 , aru2) apply ([數組]) </p><br data-v-9debfc19><p class="fz28" data-v-9debfc19>bind 不會調用 , 會改變 this 指向</p><br data-v-9debfc19><p class="fz28" data-v-9debfc19>場景:</p><p class="fz28" data-v-9debfc19>call 調用 並 傳遞 參數</p><br data-v-9debfc19><p class="fz28" data-v-9debfc19>apply 並用 並 傳遞 數組</p><br data-v-9debfc19><p class="fz28" data-v-9debfc19> bind 不調用 , 但想改 this 指向 ex 改定時器內部 this 指向 </p><br data-v-9debfc19><br data-v-9debfc19><br data-v-9debfc19><div id="threetips010" class="articleCardTitle cor36 fz34" data-v-9debfc19> 7.10 防抖 debounce </div><p class="fz28" data-v-9debfc19>單位時間內 , 頻繁觸發事件 , 只執行最後一次</p><br data-v-9debfc19><p class="fz28" data-v-9debfc19>放技能 , 只要被打斷要重施放</p><br data-v-9debfc19><p class="fz28" data-v-9debfc19>場景</p><p class="fz28" data-v-9debfc19> 搜尋框輸入 , 只需要用戶 最後一次輸入完 , 在發送請求 </p><div class="bgcVS" data-v-9debfc19><div data-v-9debfc19><span class="then" data-v-9debfc19>＜</span> <span class="number" data-v-9debfc19>input </span><span class="word" data-v-9debfc19>type</span> <span class="then" data-v-9debfc19>=</span><span class="src" data-v-9debfc19>&quot;text&quot;</span> <span class="then" data-v-9debfc19>&gt;</span></div><div data-v-9debfc19><span class="function" data-v-9debfc19>let </span><span class="word" data-v-9debfc19>oInput</span> <span class="then" data-v-9debfc19>=</span><span class="word" data-v-9debfc19>document</span><span class="variable" data-v-9debfc19>.querySelector</span><span class="brackets" data-v-9debfc19>(</span> <span class="src" data-v-9debfc19>&quot;input&quot;</span><span class="brackets" data-v-9debfc19>)</span></div><div data-v-9debfc19><span class="function" data-v-9debfc19>let </span> <span class="word" data-v-9debfc19>time</span><span class="then" data-v-9debfc19>=</span> <span class="then" data-v-9debfc19>null</span></div><div data-v-9debfc19><span class="word" data-v-9debfc19>oInput</span><span class="variable" data-v-9debfc19>.oninput</span><span class="then" data-v-9debfc19>=</span><span class="function" data-v-9debfc19>function </span><span class="brackets" data-v-9debfc19>(){</span></div><div class="padTwo VSL" data-v-9debfc19><span class="word" data-v-9debfc19>console</span><span class="variable" data-v-9debfc19>.log</span><span class="brackets" data-v-9debfc19>(</span> <span class="then" data-v-9debfc19>this</span><span class="word" data-v-9debfc19>.value</span> <span class="brackets" data-v-9debfc19>)</span><div data-v-9debfc19></div></div><div data-v-9debfc19><span class="brackets" data-v-9debfc19>}</span></div><br data-v-9debfc19><div data-v-9debfc19><span class="word" data-v-9debfc19>oInput</span><span class="variable" data-v-9debfc19>.oninput</span><span class="then" data-v-9debfc19>=</span><span class="function" data-v-9debfc19>function </span><span class="brackets" data-v-9debfc19>(){</span></div><div class="padTwo VSL" data-v-9debfc19><span class="then" data-v-9debfc19>if</span> <span class="brackets" data-v-9debfc19>(</span><span class="word" data-v-9debfc19>time</span> <span class="then" data-v-9debfc19>!==null</span><span class="brackets" data-v-9debfc19>){</span><div data-v-9debfc19></div><div class="padTwo VSL" data-v-9debfc19><span class="word" data-v-9debfc19>clearTimeout</span><span class="brackets" data-v-9debfc19>(</span> <span class="word" data-v-9debfc19>t</span><span class="brackets" data-v-9debfc19>)</span><div data-v-9debfc19></div></div><div data-v-9debfc19><span class="brackets" data-v-9debfc19>}</span></div><div data-v-9debfc19><span class="word" data-v-9debfc19>time</span> <span class="then" data-v-9debfc19>=</span><span class="variable" data-v-9debfc19>setTimeout</span><span class="brackets" data-v-9debfc19>(()</span><span class="function" data-v-9debfc19>=&gt; </span><span class="brackets" data-v-9debfc19>{</span><div class="padTwo VSL" data-v-9debfc19><span class="word" data-v-9debfc19>console</span><span class="variable" data-v-9debfc19>.log</span><span class="brackets" data-v-9debfc19>(</span><span class="then" data-v-9debfc19>this</span><span class="word" data-v-9debfc19>.value</span><span class="brackets" data-v-9debfc19>)</span></div><div data-v-9debfc19><span class="brackets" data-v-9debfc19>},</span><span class="number" data-v-9debfc19>1000</span><span class="brackets" data-v-9debfc19>)</span></div></div></div><div data-v-9debfc19><span class="brackets" data-v-9debfc19>}</span></div><br data-v-9debfc19><p data-v-9debfc19>用閉包優化結構</p><div class="dis" data-v-9debfc19><div class="w100" data-v-9debfc19><div data-v-9debfc19><span class="word" data-v-9debfc19>oInput</span><span class="variable" data-v-9debfc19>.oninput</span><span class="then" data-v-9debfc19>=</span><span class="word" data-v-9debfc19>debounce</span><span class="brackets" data-v-9debfc19>()</span></div><div data-v-9debfc19><span class="function" data-v-9debfc19>function </span><span class="word" data-v-9debfc19>debounce</span><span class="brackets" data-v-9debfc19>(){</span></div><div class="padTwo VSL" data-v-9debfc19><span class="function" data-v-9debfc19>let </span><span class="word" data-v-9debfc19>time</span> <span class="then" data-v-9debfc19>=</span><span class="then" data-v-9debfc19>null</span><div data-v-9debfc19></div><span class="then" data-v-9debfc19>return </span><span class="function" data-v-9debfc19>function </span><span class="brackets" data-v-9debfc19>(){</span><div data-v-9debfc19></div><div class="padTwo VSL" data-v-9debfc19><span class="then" data-v-9debfc19>if</span><span class="brackets" data-v-9debfc19>(</span><span class="word" data-v-9debfc19>time</span><span class="then" data-v-9debfc19>!==null</span><span class="brackets" data-v-9debfc19>){</span><div data-v-9debfc19></div><div class="padTwo VSL" data-v-9debfc19><span class="word" data-v-9debfc19>clearTimeout</span><span class="brackets" data-v-9debfc19>(</span><span class="word" data-v-9debfc19>t</span><span class="brackets" data-v-9debfc19>)</span><div data-v-9debfc19></div></div><div data-v-9debfc19><span class="brackets" data-v-9debfc19>}</span></div><div data-v-9debfc19><span class="word" data-v-9debfc19>time</span><span class="then" data-v-9debfc19>=</span><span class="variable" data-v-9debfc19>setTimeout</span><span class="brackets" data-v-9debfc19>(()</span><span class="function" data-v-9debfc19>=&gt; </span><span class="brackets" data-v-9debfc19>{</span><div class="padTwo VSL" data-v-9debfc19><span class="word" data-v-9debfc19>console</span><span class="variable" data-v-9debfc19>.log</span><span class="brackets" data-v-9debfc19>(</span><span class="then" data-v-9debfc19>this</span><span class="word" data-v-9debfc19>.value</span><span class="brackets" data-v-9debfc19>)</span></div><div data-v-9debfc19><span class="brackets" data-v-9debfc19>},</span><span class="number" data-v-9debfc19>1000</span><span class="brackets" data-v-9debfc19>)</span></div></div></div><div data-v-9debfc19><span class="brackets" data-v-9debfc19>}</span></div></div><div data-v-9debfc19><span class="brackets" data-v-9debfc19>}</span></div></div><div class="w100" data-v-9debfc19><div data-v-9debfc19><span class="word" data-v-9debfc19>oInput</span><span class="variable" data-v-9debfc19>.oninput</span><span class="then" data-v-9debfc19>=</span><span class="word" data-v-9debfc19>debounce</span><span class="brackets" data-v-9debfc19>(</span><span class="variable" data-v-9debfc19>function</span><span class="brackets" data-v-9debfc19>(){</span></div><div class="padTwo VSL" data-v-9debfc19><span class="word" data-v-9debfc19>console</span><span class="variable" data-v-9debfc19>.log</span><span class="brackets" data-v-9debfc19>(</span><span class="then" data-v-9debfc19>this</span><span class="word" data-v-9debfc19>.value</span><span class="brackets" data-v-9debfc19>)</span><div data-v-9debfc19></div></div><div data-v-9debfc19><span class="brackets" data-v-9debfc19>},</span><span class="number" data-v-9debfc19>1000</span><span class="brackets" data-v-9debfc19>)</span></div><div data-v-9debfc19><span class="function" data-v-9debfc19>function </span><span class="word" data-v-9debfc19>debounce</span><span class="brackets" data-v-9debfc19>(</span><span class="word" data-v-9debfc19>fn,delay</span><span class="brackets" data-v-9debfc19>){</span></div><div class="padTwo VSL" data-v-9debfc19><span class="function" data-v-9debfc19>let </span><span class="word" data-v-9debfc19>time</span> <span class="then" data-v-9debfc19>=</span><span class="then" data-v-9debfc19>null</span><div data-v-9debfc19></div><span class="then" data-v-9debfc19>return </span><span class="function" data-v-9debfc19>function </span><span class="brackets" data-v-9debfc19>(){</span><div data-v-9debfc19></div><div class="padTwo VSL" data-v-9debfc19><span class="then" data-v-9debfc19>if</span><span class="brackets" data-v-9debfc19>(</span><span class="word" data-v-9debfc19>time</span><span class="then" data-v-9debfc19>!==null</span><span class="brackets" data-v-9debfc19>){</span><div data-v-9debfc19></div><div class="padTwo VSL" data-v-9debfc19><span class="word" data-v-9debfc19>clearTimeout</span><span class="brackets" data-v-9debfc19>(</span><span class="word" data-v-9debfc19>t</span><span class="brackets" data-v-9debfc19>)</span><div data-v-9debfc19></div></div><div data-v-9debfc19><span class="brackets" data-v-9debfc19>}</span></div><div data-v-9debfc19><span class="word" data-v-9debfc19>time</span><span class="then" data-v-9debfc19>=</span><span class="variable" data-v-9debfc19>setTimeout</span><span class="brackets" data-v-9debfc19>(()</span><span class="function" data-v-9debfc19>=&gt; </span><span class="brackets" data-v-9debfc19>{</span><div class="padTwo VSL" data-v-9debfc19><span class="variable" data-v-9debfc19>fn</span><span class="brackets" data-v-9debfc19>()</span></div><div data-v-9debfc19><span class="brackets" data-v-9debfc19>},</span><span class="number" data-v-9debfc19>delay</span><span class="brackets" data-v-9debfc19>)</span></div></div></div><div data-v-9debfc19><span class="brackets" data-v-9debfc19>}</span></div></div><div data-v-9debfc19><span class="brackets" data-v-9debfc19>}</span></div><p data-v-9debfc19>測試發現輸出 undefined</p></div></div><div class="dis" data-v-9debfc19><div class="w100" data-v-9debfc19><div data-v-9debfc19><span class="word" data-v-9debfc19>oInput</span><span class="variable" data-v-9debfc19>.oninput</span><span class="then" data-v-9debfc19>=</span><span class="word" data-v-9debfc19>debounce</span><span class="brackets" data-v-9debfc19>(</span><span class="variable" data-v-9debfc19>function</span><span class="brackets" data-v-9debfc19>(){</span></div><div class="padTwo VSL" data-v-9debfc19><span class="word" data-v-9debfc19>console</span><span class="variable" data-v-9debfc19>.log</span><span class="brackets" data-v-9debfc19>(</span><span class="then" data-v-9debfc19>this</span><span class="brackets" data-v-9debfc19>) </span><span class="comment" data-v-9debfc19>//發現this指向window</span><div data-v-9debfc19></div></div><div data-v-9debfc19><span class="brackets" data-v-9debfc19>},</span><span class="number" data-v-9debfc19>1000</span><span class="brackets" data-v-9debfc19>)</span></div><div data-v-9debfc19><span class="function" data-v-9debfc19>function </span><span class="word" data-v-9debfc19>debounce</span><span class="brackets" data-v-9debfc19>(</span><span class="word" data-v-9debfc19>fn,delay</span><span class="brackets" data-v-9debfc19>){</span></div><div class="padTwo VSL" data-v-9debfc19><div data-v-9debfc19><span class="comment" data-v-9debfc19>//console.log(this)</span></div><span class="function" data-v-9debfc19>let </span><span class="word" data-v-9debfc19>time</span> <span class="then" data-v-9debfc19>=</span><span class="then" data-v-9debfc19>null</span><div data-v-9debfc19></div><span class="then" data-v-9debfc19>return </span><span class="function" data-v-9debfc19>function </span><span class="brackets" data-v-9debfc19>(){</span><div data-v-9debfc19></div><div class="padTwo VSL" data-v-9debfc19><span class="then" data-v-9debfc19>if</span><span class="brackets" data-v-9debfc19>(</span><span class="word" data-v-9debfc19>time</span><span class="then" data-v-9debfc19>!==null</span><span class="brackets" data-v-9debfc19>){</span><div data-v-9debfc19></div><div class="padTwo VSL" data-v-9debfc19><span class="word" data-v-9debfc19>clearTimeout</span><span class="brackets" data-v-9debfc19>(</span><span class="word" data-v-9debfc19>t</span><span class="brackets" data-v-9debfc19>)</span><div data-v-9debfc19></div></div><div data-v-9debfc19><span class="brackets" data-v-9debfc19>}</span></div><div data-v-9debfc19><span class="word" data-v-9debfc19>time</span><span class="then" data-v-9debfc19>=</span><span class="variable" data-v-9debfc19>setTimeout</span><span class="brackets" data-v-9debfc19>(()</span><span class="function" data-v-9debfc19>=&gt; </span><span class="brackets" data-v-9debfc19>{</span><div class="padTwo VSL" data-v-9debfc19><div data-v-9debfc19><span class="comment" data-v-9debfc19>//console.log(this) //這邊才指向input對象</span></div><span class="variable" data-v-9debfc19>fn</span><span class="brackets" data-v-9debfc19>()</span></div><div data-v-9debfc19><span class="brackets" data-v-9debfc19>},</span><span class="number" data-v-9debfc19>delay</span><span class="brackets" data-v-9debfc19>)</span></div></div></div><div data-v-9debfc19><span class="brackets" data-v-9debfc19>}</span></div></div><div data-v-9debfc19><span class="brackets" data-v-9debfc19>}</span></div><p data-v-9debfc19>雖然這裡執行debounce這個函數</p><p data-v-9debfc19>但返回的是內部這個函數(return..)</p><p data-v-9debfc19>相當於onInput=右邊</p><p data-v-9debfc19>這裡掛者的是內部返回的這個函數</p><p data-v-9debfc19>所以內部這個函數的this指向</p><p data-v-9debfc19>才是這個input對象</p></div><div class="w100" data-v-9debfc19><br data-v-9debfc19><br data-v-9debfc19><br data-v-9debfc19><div data-v-9debfc19><span class="word" data-v-9debfc19>oInput</span><span class="variable" data-v-9debfc19>.oninput</span><span class="then" data-v-9debfc19>=</span><span class="word" data-v-9debfc19>debounce</span><span class="brackets" data-v-9debfc19>(</span><span class="variable" data-v-9debfc19>function</span><span class="brackets" data-v-9debfc19>(){</span></div><div class="padTwo VSL" data-v-9debfc19><span class="word" data-v-9debfc19>console</span><span class="variable" data-v-9debfc19>.log</span><span class="brackets" data-v-9debfc19>(</span><span class="then" data-v-9debfc19>this</span><span class="brackets" data-v-9debfc19>) </span><div data-v-9debfc19></div></div><div data-v-9debfc19><span class="brackets" data-v-9debfc19>},</span><span class="number" data-v-9debfc19>1000</span><span class="brackets" data-v-9debfc19>)</span></div><div data-v-9debfc19><span class="function" data-v-9debfc19>function </span><span class="word" data-v-9debfc19>debounce</span><span class="brackets" data-v-9debfc19>(</span><span class="word" data-v-9debfc19>fn,delay</span><span class="brackets" data-v-9debfc19>){</span></div><div class="padTwo VSL" data-v-9debfc19><div data-v-9debfc19><span class="comment" data-v-9debfc19>//console.log(this)</span></div><span class="function" data-v-9debfc19>let </span><span class="word" data-v-9debfc19>time</span> <span class="then" data-v-9debfc19>=</span><span class="then" data-v-9debfc19>null</span><div data-v-9debfc19></div><span class="then" data-v-9debfc19>return </span><span class="function" data-v-9debfc19>function </span><span class="brackets" data-v-9debfc19>(){</span><div data-v-9debfc19></div><div class="padTwo VSL" data-v-9debfc19><span class="then" data-v-9debfc19>if</span><span class="brackets" data-v-9debfc19>(</span><span class="word" data-v-9debfc19>time</span><span class="then" data-v-9debfc19>!==null</span><span class="brackets" data-v-9debfc19>){</span><div data-v-9debfc19></div><div class="padTwo VSL" data-v-9debfc19><span class="word" data-v-9debfc19>clearTimeout</span><span class="brackets" data-v-9debfc19>(</span><span class="word" data-v-9debfc19>t</span><span class="brackets" data-v-9debfc19>)</span><div data-v-9debfc19></div></div><div data-v-9debfc19><span class="brackets" data-v-9debfc19>}</span></div><div data-v-9debfc19><span class="word" data-v-9debfc19>time</span><span class="then" data-v-9debfc19>=</span><span class="variable" data-v-9debfc19>setTimeout</span><span class="brackets" data-v-9debfc19>(()</span><span class="function" data-v-9debfc19>=&gt; </span><span class="brackets" data-v-9debfc19>{</span><div class="padTwo VSL" data-v-9debfc19><span class="variable" data-v-9debfc19>fn</span><span class="number" data-v-9debfc19>.call</span><span class="brackets" data-v-9debfc19>(</span><span class="then" data-v-9debfc19>this</span><span class="brackets" data-v-9debfc19>)</span><span class="brackets" data-v-9debfc19>()</span></div><div data-v-9debfc19><span class="brackets" data-v-9debfc19>},</span><span class="number" data-v-9debfc19>delay</span><span class="brackets" data-v-9debfc19>)</span></div></div></div><div data-v-9debfc19><span class="brackets" data-v-9debfc19>}</span></div></div><div data-v-9debfc19><span class="brackets" data-v-9debfc19>}</span></div></div></div></div><div id="threetips011" class="articleCardTitle cor36 fz34" data-v-9debfc19> 7.11 節流 throttle </div><p class="fz28" data-v-9debfc19>單位時間內 , 頻繁觸發事件 , 執行一次</p><br data-v-9debfc19><p class="fz28" data-v-9debfc19>技能施放完 等待的 cd 時間</p><br data-v-9debfc19><p class="fz28" data-v-9debfc19>場景</p><p class="fz28" data-v-9debfc19>滾動條</p><div class="bgcVS" data-v-9debfc19><div data-v-9debfc19><span class="word" data-v-9debfc19>window</span><span class="word" data-v-9debfc19>.onscroll</span> <span class="then" data-v-9debfc19>=</span><span class="function" data-v-9debfc19>function </span><span class="brackets" data-v-9debfc19>(){</span></div><div class="padTwo VSL" data-v-9debfc19><span class="variable" data-v-9debfc19>alert</span><span class="brackets" data-v-9debfc19>(</span> <span class="src" data-v-9debfc19>&quot;廣告&quot;</span><span class="brackets" data-v-9debfc19>)</span><div data-v-9debfc19></div></div><div data-v-9debfc19><span class="brackets" data-v-9debfc19>}</span></div><br data-v-9debfc19><br data-v-9debfc19><br data-v-9debfc19><div data-v-9debfc19><span class="word" data-v-9debfc19>window</span><span class="variable" data-v-9debfc19>.onscroll</span><span class="then" data-v-9debfc19>=</span> <span class="word" data-v-9debfc19>throttle</span><span class="brackets" data-v-9debfc19>(</span><span class="function" data-v-9debfc19>function </span><span class="brackets" data-v-9debfc19>(){</span></div><div class="padTwo VSL" data-v-9debfc19><span class="variable" data-v-9debfc19>alert</span><span class="brackets" data-v-9debfc19>(</span> <span class="src" data-v-9debfc19>&quot;廣告&quot;</span><span class="brackets" data-v-9debfc19>)</span><div data-v-9debfc19></div></div><div data-v-9debfc19><span class="brackets" data-v-9debfc19>},</span> <span class="number" data-v-9debfc19>2000</span><span class="brackets" data-v-9debfc19>)</span></div><div data-v-9debfc19><span class="function" data-v-9debfc19>function </span><span class="word" data-v-9debfc19>throttle</span><span class="brackets" data-v-9debfc19>(</span><span class="word" data-v-9debfc19>fn,delay</span><span class="brackets" data-v-9debfc19>){</span></div><div class="padTwo VSL" data-v-9debfc19><span class="function" data-v-9debfc19>let </span> <span class="word" data-v-9debfc19>time</span><span class="then" data-v-9debfc19>=</span> <span class="number" data-v-9debfc19>true</span><div data-v-9debfc19></div><span class="then" data-v-9debfc19>return </span><span class="function" data-v-9debfc19>function </span><span class="brackets" data-v-9debfc19>(){</span><div data-v-9debfc19></div><div class="padTwo VSL" data-v-9debfc19><span class="then" data-v-9debfc19>if</span> <span class="brackets" data-v-9debfc19>(</span><span class="word" data-v-9debfc19>time</span> <span class="brackets" data-v-9debfc19>){</span><div data-v-9debfc19></div><div class="padTwo VSL" data-v-9debfc19><span class="variable" data-v-9debfc19>setTimeout</span><span class="brackets" data-v-9debfc19>(()</span><span class="function" data-v-9debfc19>=&gt;</span><span class="brackets" data-v-9debfc19>{</span><div data-v-9debfc19></div><div class="padTwo VSL" data-v-9debfc19><span class="word" data-v-9debfc19>fn</span><span class="variable" data-v-9debfc19>.call</span><span class="brackets" data-v-9debfc19>(</span><span class="then" data-v-9debfc19>this</span><span class="brackets" data-v-9debfc19>) </span><span class="comment" data-v-9debfc19>// 綁在 window 有沒有 call 都可以</span><div data-v-9debfc19><span class="word" data-v-9debfc19>time</span><span class="then" data-v-9debfc19>=</span><span class="number" data-v-9debfc19>true</span></div><div data-v-9debfc19></div></div><div data-v-9debfc19><span class="brackets" data-v-9debfc19>},</span><span class="word" data-v-9debfc19>delay</span><span class="brackets" data-v-9debfc19>)</span></div></div><div data-v-9debfc19><span class="brackets" data-v-9debfc19>}</span></div><div data-v-9debfc19><span class="word" data-v-9debfc19>time</span> <span class="then" data-v-9debfc19>=</span><span class="number" data-v-9debfc19>false</span></div></div><div data-v-9debfc19><span class="brackets" data-v-9debfc19>}</span></div></div><div data-v-9debfc19><span class="brackets" data-v-9debfc19>}</span></div></div><p class="fz28" data-v-9debfc19></p><p class="fz28" data-v-9debfc19></p><p class="fz28" data-v-9debfc19></p><p class="fz28" data-v-9debfc19></p><p class="fz28" data-v-9debfc19></p>',103),xo=Sv(()=>v("div",{class:"toTopButton"},[v("div",{class:"disCen"},"___"),v("div",{class:"disCen"},"▲")],-1)),Lo=[xo],jo=Sv(()=>v("div",{class:"toBotButton"},[v("div",{class:"disCen"},"▼"),v("div",{class:"disCen"},"￣")],-1)),Po=[jo],No={__name:"JsPageThreeSeven",setup(a){const s=ua(!1);window.addEventListener("scroll",function(){s.value=window.scrollY>0});function d(){window.scrollTo({top:0,left:0,behavior:"smooth"})}function t(){window.scrollTo({top:999999,left:0,behavior:"smooth"})}function c(e){window.scrollTo({top:document.getElementById(`${e}`).offsetTop,behavior:"smooth"})}return(e,n)=>{const l=za("P");return da(),ea(Q,null,[v("section",null,[v("div",wo,[v("div",ho,[v("div",ko,[v("div",{onClick:n[0]||(n[0]=p=>c("threetips001")),class:"leftNavText"},"淺拷貝"),v("div",{onClick:n[1]||(n[1]=p=>c("threetips002")),class:"leftNavText"},"深拷貝"),v("div",{onClick:n[2]||(n[2]=p=>c("threetips003")),class:"leftNavText"},"lodash"),v("div",{onClick:n[3]||(n[3]=p=>c("threetips004")),class:"leftNavText"},"JSON"),v("div",{onClick:n[4]||(n[4]=p=>c("threetips005")),class:"leftNavText"}," 異常處理 "),v("div",{onClick:n[5]||(n[5]=p=>c("threetips006")),class:"leftNavText"},"this"),v("div",{onClick:n[6]||(n[6]=p=>c("threetips007")),class:"leftNavText"},"call"),v("div",{onClick:n[7]||(n[7]=p=>c("threetips008")),class:"leftNavText"},"apply"),v("div",{onClick:n[8]||(n[8]=p=>c("threetips009")),class:"leftNavText"},"bind"),v("div",{onClick:n[9]||(n[9]=p=>c("threetips010")),class:"leftNavText"},"防抖"),v("div",{onClick:n[10]||(n[10]=p=>c("threetips011")),class:"leftNavText"},"節流")])])]),v("div",go,[v("div",To,[v("div",_o,[zo,v("div",So,[qo,T(l,null,{default:C(()=>[fa("2. 輸出當前時間可用 new Date().toLocaleString()")]),_:1}),yo]),Co])])])]),v("div",null,[X(T(W,{name:"fade",tag:"div"},{default:C(()=>[v("div",{onClick:d,class:"toTop"},Lo)]),_:1},512),[[Y,s.value]]),X(T(W,{name:"fade",tag:"div"},{default:C(()=>[v("div",{onClick:t,class:"toBot"},Po)]),_:1},512),[[Y,s.value]])])],64)}}},Vo=ia(No,[["__scopeId","data-v-9debfc19"]]);const qv=a=>(wa("data-v-1fd342df"),a=a(),ha(),a),$o={class:"leftNav"},Oo={class:"leftNavContainer"},Eo={class:"leftNavLayout"},Ao=U('<div class="Main" data-v-1fd342df><div class="mainContainer" data-v-1fd342df><div class="mainLayout" data-v-1fd342df><br data-v-1fd342df><br data-v-1fd342df><p class="fz28" data-v-1fd342df>總分總</p><p class="fz28" data-v-1fd342df>1.要講哪個知識點</p><p class="fz28" data-v-1fd342df>2.細講</p><p class="fz28" data-v-1fd342df>3.總結</p><br data-v-1fd342df><br data-v-1fd342df><div id="threedom001" class="articleCardTitle cor36 fz34" data-v-1fd342df> 8.1 事件流 </div><p class="fz28" data-v-1fd342df>事件流</p><p class="fz28" data-v-1fd342df>指事件完整執行過程中的流動路徑</p><br data-v-1fd342df><br data-v-1fd342df><div class="fz30" data-v-1fd342df> 1 <span class="cor17" data-v-1fd342df>. . . </span><span class="cor36 pad10 bor" data-v-1fd342df> Document </span><span class="cor17" data-v-1fd342df> . . . </span> 7 </div><div class="fz30" data-v-1fd342df><span class="cor17" data-v-1fd342df>. . . </span> ↘ <span class="cor17" data-v-1fd342df>. . . . . . </span> | <span class="cor17" data-v-1fd342df>. . . . . . . . . . </span> ↖ <span class="cor17" data-v-1fd342df>. . </span> 冒泡階段 由下往上 </div><div class="fz30" data-v-1fd342df><span class="cor17" data-v-1fd342df>. . . . . </span>2 <span class="cor17" data-v-1fd342df>. . </span><span class="cor36 pad10 bor" data-v-1fd342df> Element html </span><span class="cor17" data-v-1fd342df> . . . </span> 6 </div><div class="fz30" data-v-1fd342df><span class="cor17" data-v-1fd342df>. . . . . . . </span> ↘ <span class="cor17" data-v-1fd342df>. . . . . . </span> | <span class="cor17" data-v-1fd342df>. . . . . . . . . . </span> ↖ </div><div class="fz30" data-v-1fd342df> 捕獲階段 <span class="cor17" data-v-1fd342df>. . </span> 3 <span class="cor17" data-v-1fd342df>. . </span><span class="cor36 pad10 bor" data-v-1fd342df> Element body </span><span class="cor17" data-v-1fd342df> . . . </span> 5 </div><div class="fz30" data-v-1fd342df> 由上往下 <span class="cor17" data-v-1fd342df> . . . . </span> ↘ <span class="cor17" data-v-1fd342df>. . . . . . . . </span> | <span class="cor17" data-v-1fd342df>. . . . . . . . . . </span> ↖ </div><div class="fz30" data-v-1fd342df><span class="cor17" data-v-1fd342df>. . . . . . . . . . . . . . </span> ↘ <span class="cor17" data-v-1fd342df>. . . . </span><span class="cor36 pad10 bor" data-v-1fd342df> Element div </span><span class="cor17" data-v-1fd342df> . . . </span> 4 </div><div class="fz30" data-v-1fd342df><span class="cor17" data-v-1fd342df>. . . . . . . . . . . . . . . .</span> ↘ → → → → → → ↗ </div><p class="fz28" data-v-1fd342df>說明</p><p class="fz28" data-v-1fd342df> 假設頁面裡有 div , 當觸發事件時 , 經歷 &quot;捕獲階段&quot; &amp; &quot;冒泡階段&quot; </p><p class="fz28" data-v-1fd342df>捕獲 -&gt; 父到子</p><p class="fz28" data-v-1fd342df>冒泡 -&gt; 子到父</p><br data-v-1fd342df><p class="fz28" data-v-1fd342df>實際開發 冒泡為主</p><br data-v-1fd342df><br data-v-1fd342df><p class="fz34 cor36" data-v-1fd342df>事件捕獲</p><p class="fz28" data-v-1fd342df> 從 DOM 的 根元素 開始去執行 對應的 事件 ( 從裡到外 ) </p><a class="fz28" href="https://codepen.io/wayne23123/pen/gOZbBRw" data-v-1fd342df>DEMO @codepen</a><p class="fz34 cor36" data-v-1fd342df>事件冒泡</p><p class="fz28" data-v-1fd342df> 當一個元素被觸發 , 同樣的事件將會在該元素的所有祖先元素中 依次被觸發。 </p><p class="fz28" data-v-1fd342df>這過程為冒泡。</p><br data-v-1fd342df><p class="fz28" data-v-1fd342df> 當一元素觸發事件後 , 會 依次 向上調用 所有 父級元素的 同名事件 </p><a class="fz28" href="https://codepen.io/wayne23123/pen/gOZbBRw" data-v-1fd342df>DEMO @codepen</a><br data-v-1fd342df><p class="fz34 cor36" data-v-1fd342df>阻止冒泡</p><p class="fz28" data-v-1fd342df>默認有冒泡模式存在 , 容易導致 事件影像到 父元素</p><br data-v-1fd342df><p class="fz28" data-v-1fd342df>需求:</p><p class="fz28" data-v-1fd342df>想把事件限制在當前元素 , 需要 阻止 事件 冒泡</p><br data-v-1fd342df><p class="fz28" data-v-1fd342df>前提:</p><p class="fz28" data-v-1fd342df>阻止事件冒泡 需要拿到 事件對象</p><br data-v-1fd342df><div class="spo fz30" data-v-1fd342df><span class="number" data-v-1fd342df>事件對象</span><span class="variable" data-v-1fd342df>.stopPropagation</span><span class="brackets" data-v-1fd342df>()</span></div><a class="fz28" href="https://codepen.io/wayne23123/pen/RwENeBG" data-v-1fd342df>DEMO @codepen</a><br data-v-1fd342df><br data-v-1fd342df><p class="fz28" data-v-1fd342df>阻止默認行為:</p><p class="fz28" data-v-1fd342df>阻止表單提交</p><p class="fz28" data-v-1fd342df>阻止連接跳轉</p><div class="bgcVS" data-v-1fd342df><div data-v-1fd342df><span class="function" data-v-1fd342df>const </span><span class="word" data-v-1fd342df>form</span> <span class="then" data-v-1fd342df>=</span><span class="word" data-v-1fd342df>document</span><span class="variable" data-v-1fd342df>.querySelector</span><span class="brackets" data-v-1fd342df>(</span> <span class="src" data-v-1fd342df>&quot;form&quot;</span><span class="brackets" data-v-1fd342df>)</span></div><div data-v-1fd342df><span class="word" data-v-1fd342df>form</span><span class="variable" data-v-1fd342df>.addEventListener</span><span class="brackets" data-v-1fd342df>(</span> <span class="src" data-v-1fd342df>&quot;submit&quot;</span><span class="then" data-v-1fd342df>,</span><span class="function" data-v-1fd342df>function </span><span class="brackets" data-v-1fd342df>(</span> <span class="word" data-v-1fd342df>e</span><span class="brackets" data-v-1fd342df>){</span></div><div class="padTwo VSL" data-v-1fd342df><span class="comment" data-v-1fd342df>//阻止默認提交行為</span><div data-v-1fd342df><span class="word" data-v-1fd342df>e.preventDefault</span><span class="brackets" data-v-1fd342df>()</span></div><div data-v-1fd342df></div></div><div data-v-1fd342df><span class="brackets" data-v-1fd342df>})</span></div><br data-v-1fd342df><div data-v-1fd342df><span class="function" data-v-1fd342df>const </span> <span class="word" data-v-1fd342df>a</span><span class="then" data-v-1fd342df>=</span> <span class="word" data-v-1fd342df>document</span><span class="variable" data-v-1fd342df>.querySelector</span><span class="brackets" data-v-1fd342df>(</span> <span class="src" data-v-1fd342df>&quot;a&quot;</span><span class="brackets" data-v-1fd342df>)</span></div><div data-v-1fd342df><span class="word" data-v-1fd342df>a</span><span class="variable" data-v-1fd342df>.addEventListener</span><span class="brackets" data-v-1fd342df>(</span> <span class="src" data-v-1fd342df>&quot;click&quot;</span><span class="then" data-v-1fd342df>,</span><span class="function" data-v-1fd342df>function </span><span class="brackets" data-v-1fd342df>(</span> <span class="word" data-v-1fd342df>e</span><span class="brackets" data-v-1fd342df>){</span></div><div class="padTwo VSL" data-v-1fd342df><span class="comment" data-v-1fd342df>//阻止默認提交行為</span><div data-v-1fd342df><span class="word" data-v-1fd342df>e.preventDefault</span><span class="brackets" data-v-1fd342df>()</span></div><div data-v-1fd342df></div></div><div data-v-1fd342df><span class="brackets" data-v-1fd342df>})</span></div><br data-v-1fd342df></div><p class="fz34 cor36" data-v-1fd342df>解綁事件</p><div class="bgcVS" data-v-1fd342df><div data-v-1fd342df><span class="then" data-v-1fd342df>＜</span> <span class="number" data-v-1fd342df>button</span><span class="then" data-v-1fd342df>&gt;</span> <span class="word" data-v-1fd342df>test</span><span class="then" data-v-1fd342df>＜/</span> <span class="number" data-v-1fd342df>button</span><span class="then" data-v-1fd342df>&gt;</span></div><div data-v-1fd342df><span class="function" data-v-1fd342df>const </span><span class="word" data-v-1fd342df>btn</span> <span class="then" data-v-1fd342df>=</span><span class="word" data-v-1fd342df>documnet</span><span class="variable" data-v-1fd342df>.querySelector</span><span class="brackets" data-v-1fd342df>(</span> <span class="src" data-v-1fd342df>&quot;button&quot;</span><span class="brackets" data-v-1fd342df>)</span></div><div data-v-1fd342df><span class="word" data-v-1fd342df>btn</span><span class="variable" data-v-1fd342df>.onclick</span><span class="then" data-v-1fd342df>=</span> <span class="then" data-v-1fd342df>null</span></div><div class="padTwo VSL" data-v-1fd342df><span class="word" data-v-1fd342df>alert</span> <span class="brackets" data-v-1fd342df>(</span><span class="src" data-v-1fd342df>&quot;點擊了&quot;</span> <span class="brackets" data-v-1fd342df>)</span><div data-v-1fd342df></div></div><div data-v-1fd342df><span class="brackets" data-v-1fd342df>}</span></div><div data-v-1fd342df><span class="comment" data-v-1fd342df>//L0事件移除解綁</span></div><div data-v-1fd342df><span class="word" data-v-1fd342df>btn</span><span class="variable" data-v-1fd342df>.onclick</span><span class="then" data-v-1fd342df>=</span> <span class="then" data-v-1fd342df>null</span></div><br data-v-1fd342df><br data-v-1fd342df><p data-v-1fd342df>addEventListener 解綁方式</p><div data-v-1fd342df><span class="comment" data-v-1fd342df>//L2事件移除解綁</span></div><div data-v-1fd342df><span class="function" data-v-1fd342df>function </span><span class="word" data-v-1fd342df>fn</span> <span class="brackets" data-v-1fd342df>(){</span></div><div class="padTwo VSL" data-v-1fd342df><span class="word" data-v-1fd342df>alert</span> <span class="brackets" data-v-1fd342df>(</span><span class="src" data-v-1fd342df>&quot;點擊了&quot;</span> <span class="brackets" data-v-1fd342df>)</span><div data-v-1fd342df></div></div><div data-v-1fd342df><span class="brackets" data-v-1fd342df>}</span></div><div data-v-1fd342df><span class="word" data-v-1fd342df>btn</span><span class="variable" data-v-1fd342df>.addEventListener</span><span class="brackets" data-v-1fd342df>(</span> <span class="src" data-v-1fd342df>&quot;click&quot;</span><span class="then" data-v-1fd342df>,</span> <span class="word" data-v-1fd342df>fn</span><span class="brackets" data-v-1fd342df>) </span><span class="comment" data-v-1fd342df>//這些回調函數不用(),setTimeout也是</span></div><div data-v-1fd342df><span class="word" data-v-1fd342df>btn</span><span class="variable" data-v-1fd342df>.removeEventListener</span><span class="brackets" data-v-1fd342df>(</span> <span class="src" data-v-1fd342df>&quot;click&quot;</span><span class="then" data-v-1fd342df>,</span> <span class="word" data-v-1fd342df>fn</span><span class="brackets" data-v-1fd342df>) </span></div><br data-v-1fd342df><p data-v-1fd342df>匿名函數 無法解綁</p></div><p class="fz28" data-v-1fd342df>鼠標經過</p><p class="fz28" data-v-1fd342df>mouseover &amp; mouseout 有冒泡效果</p><p class="fz28" data-v-1fd342df>mouseenter &amp; mouseleave 沒冒泡 (推薦)</p><div id="threedom002" class="articleCardTitle cor36 fz34" data-v-1fd342df> 8.2 事件委託 </div><p class="fz28" data-v-1fd342df>利用 事件流的 特徵 解決一些開發需求</p><br data-v-1fd342df><p class="fz28" data-v-1fd342df>原理:</p><p class="fz28" data-v-1fd342df> 給 父元素 註冊事件 , 當觸發子元素時 , 會冒泡到 父元素 , 觸發父元素的事件 </p><br data-v-1fd342df><p class="fz28" data-v-1fd342df>優點:</p><p class="fz28" data-v-1fd342df>減少 註冊次數 , 提高程序性能</p><div class="bgcVS" data-v-1fd342df><p data-v-1fd342df>以前</p><div data-v-1fd342df><span class="then" data-v-1fd342df>＜</span> <span class="number" data-v-1fd342df>ul</span><span class="then" data-v-1fd342df>&gt;</span></div><div class="padTwo VSL" data-v-1fd342df><span class="then" data-v-1fd342df>＜</span> <span class="number" data-v-1fd342df>li</span><span class="then" data-v-1fd342df>&gt;</span> <span class="word" data-v-1fd342df>第1個孩子</span><span class="then" data-v-1fd342df>＜/</span> <span class="number" data-v-1fd342df>li</span><span class="then" data-v-1fd342df>&gt;</span><div data-v-1fd342df></div></div><div class="padTwo VSL" data-v-1fd342df><span class="then" data-v-1fd342df>＜</span> <span class="number" data-v-1fd342df>li</span><span class="then" data-v-1fd342df>&gt;</span> <span class="word" data-v-1fd342df>第2個孩子</span><span class="then" data-v-1fd342df>＜/</span> <span class="number" data-v-1fd342df>li</span><span class="then" data-v-1fd342df>&gt;</span><div data-v-1fd342df></div></div><div class="padTwo VSL" data-v-1fd342df><span class="then" data-v-1fd342df>＜</span> <span class="number" data-v-1fd342df>li</span><span class="then" data-v-1fd342df>&gt;</span> <span class="word" data-v-1fd342df>第3個孩子</span><span class="then" data-v-1fd342df>＜/</span> <span class="number" data-v-1fd342df>li</span><span class="then" data-v-1fd342df>&gt;</span><div data-v-1fd342df></div></div><div data-v-1fd342df><span class="then" data-v-1fd342df>＜/</span> <span class="number" data-v-1fd342df>ul</span><span class="then" data-v-1fd342df>&gt;</span></div><div data-v-1fd342df><span class="function" data-v-1fd342df>const </span><span class="word" data-v-1fd342df>lis</span> <span class="then" data-v-1fd342df>=</span><span class="word" data-v-1fd342df>document</span><span class="variable" data-v-1fd342df>.querySelectorAll</span><span class="brackets" data-v-1fd342df>(</span> <span class="src" data-v-1fd342df>&quot;ul li&quot;</span><span class="brackets" data-v-1fd342df>)</span></div><div data-v-1fd342df><span class="then" data-v-1fd342df>for </span> <span class="brackets" data-v-1fd342df>(</span><span class="function" data-v-1fd342df>let </span> <span class="word" data-v-1fd342df>i</span><span class="then" data-v-1fd342df>=</span> <span class="number" data-v-1fd342df>0</span><span class="then" data-v-1fd342df>;</span> <span class="word" data-v-1fd342df>i</span><span class="then" data-v-1fd342df>＜</span> <span class="word" data-v-1fd342df>lis</span><span class="variable" data-v-1fd342df>.length</span> <span class="then" data-v-1fd342df>;</span><span class="word" data-v-1fd342df>i</span> <span class="then" data-v-1fd342df>++</span><span class="brackets" data-v-1fd342df>){</span></div><div class="padTwo VSL" data-v-1fd342df><span class="word" data-v-1fd342df>lis</span> <span class="brackets" data-v-1fd342df>[</span><span class="word" data-v-1fd342df>i</span> <span class="brackets" data-v-1fd342df>]</span><span class="word" data-v-1fd342df>.addEventListner</span><span class="brackets" data-v-1fd342df>(</span> <span class="src" data-v-1fd342df>&quot;click&quot;</span><span class="then" data-v-1fd342df>,</span><span class="function" data-v-1fd342df>function </span><span class="brackets" data-v-1fd342df>(){</span><div class="padTwo VSL" data-v-1fd342df><span class="variable" data-v-1fd342df>alert</span><span class="brackets" data-v-1fd342df>(</span><span class="src" data-v-1fd342df>&quot;點擊了&quot;</span><span class="brackets" data-v-1fd342df>)</span><div data-v-1fd342df></div></div><div data-v-1fd342df></div><div data-v-1fd342df><span class="brackets" data-v-1fd342df>})</span></div></div><div data-v-1fd342df><span class="brackets" data-v-1fd342df>}</span></div><br data-v-1fd342df><br data-v-1fd342df><p data-v-1fd342df>事件委託</p><div data-v-1fd342df><span class="then" data-v-1fd342df>＜</span> <span class="number" data-v-1fd342df>ul</span><span class="then" data-v-1fd342df>&gt;</span></div><div class="padTwo VSL" data-v-1fd342df><span class="then" data-v-1fd342df>＜</span> <span class="number" data-v-1fd342df>li</span><span class="then" data-v-1fd342df>&gt;</span> <span class="word" data-v-1fd342df>第1個孩子</span><span class="then" data-v-1fd342df>＜/</span> <span class="number" data-v-1fd342df>li</span><span class="then" data-v-1fd342df>&gt;</span><div data-v-1fd342df></div></div><div class="padTwo VSL" data-v-1fd342df><span class="then" data-v-1fd342df>＜</span> <span class="number" data-v-1fd342df>li</span><span class="then" data-v-1fd342df>&gt;</span> <span class="word" data-v-1fd342df>第2個孩子</span><span class="then" data-v-1fd342df>＜/</span> <span class="number" data-v-1fd342df>li</span><span class="then" data-v-1fd342df>&gt;</span><div data-v-1fd342df></div></div><div class="padTwo VSL" data-v-1fd342df><span class="then" data-v-1fd342df>＜</span> <span class="number" data-v-1fd342df>li</span><span class="then" data-v-1fd342df>&gt;</span> <span class="word" data-v-1fd342df>第3個孩子</span><span class="then" data-v-1fd342df>＜/</span> <span class="number" data-v-1fd342df>li</span><span class="then" data-v-1fd342df>&gt;</span><div data-v-1fd342df></div></div><div class="padTwo VSL" data-v-1fd342df><span class="then" data-v-1fd342df>＜</span> <span class="number" data-v-1fd342df>p</span><span class="then" data-v-1fd342df>&gt;</span> <span class="word" data-v-1fd342df>我不要變色</span><span class="then" data-v-1fd342df>＜/</span> <span class="number" data-v-1fd342df>P</span><span class="then" data-v-1fd342df>&gt;</span><div data-v-1fd342df></div></div><div data-v-1fd342df><span class="then" data-v-1fd342df>＜/</span> <span class="number" data-v-1fd342df>ul</span><span class="then" data-v-1fd342df>&gt;</span></div><div data-v-1fd342df><span class="function" data-v-1fd342df>const </span> <span class="word" data-v-1fd342df>ul</span><span class="then" data-v-1fd342df>=</span> <span class="word" data-v-1fd342df>document</span><span class="variable" data-v-1fd342df>.querySelector</span><span class="brackets" data-v-1fd342df>(</span> <span class="src" data-v-1fd342df>&quot;ul&quot;</span><span class="brackets" data-v-1fd342df>)</span></div><div data-v-1fd342df><span class="word" data-v-1fd342df>ul</span><span class="variable" data-v-1fd342df>.addEventListener</span><span class="brackets" data-v-1fd342df>(</span> <span class="src" data-v-1fd342df>&quot;click&quot;</span><span class="then" data-v-1fd342df>,</span><span class="function" data-v-1fd342df>function </span><span class="brackets" data-v-1fd342df>(</span><span class="word" data-v-1fd342df>e</span><span class="brackets" data-v-1fd342df>){</span></div><div class="padTwo VSL" data-v-1fd342df><span class="word" data-v-1fd342df>alert</span> <span class="brackets" data-v-1fd342df>(</span><span class="src" data-v-1fd342df>&quot;點擊了&quot;</span> <span class="brackets" data-v-1fd342df>)</span><div data-v-1fd342df><span class="then" data-v-1fd342df>this</span><span class="word" data-v-1fd342df>.style.color</span><span class="then" data-v-1fd342df>=</span> <span class="src" data-v-1fd342df>&quot;red&quot;</span><span class="comment" data-v-1fd342df>//發現red給父ul,全變色了</span></div><div data-v-1fd342df><span class="comment" data-v-1fd342df>//要知道你點了哪個元素</span></div><div data-v-1fd342df><span class="word" data-v-1fd342df>console</span><span class="word" data-v-1fd342df>.log</span> <span class="brackets" data-v-1fd342df>(</span><span class="word" data-v-1fd342df>e</span> <span class="brackets" data-v-1fd342df>) </span><span class="comment" data-v-1fd342df>// 找 e.target 發現 li</span></div><div data-v-1fd342df><span class="comment" data-v-1fd342df>//console.log(e.target)//就是我們點擊的那個對象</span></div><div data-v-1fd342df><span class="word" data-v-1fd342df>e.target.style.color</span><span class="then" data-v-1fd342df>=</span> <span class="src" data-v-1fd342df>&quot;red&quot;</span></div><div data-v-1fd342df><span class="comment" data-v-1fd342df>//處理p不變色</span></div><div data-v-1fd342df><span class="then" data-v-1fd342df>if</span> <span class="brackets" data-v-1fd342df>(</span><span class="word" data-v-1fd342df>e.target.tagName</span><span class="then" data-v-1fd342df>===</span> <span class="src" data-v-1fd342df>&quot;LI&quot;</span><span class="brackets" data-v-1fd342df>){</span></div><div data-v-1fd342df></div><div class="padTwo VSL" data-v-1fd342df><span class="word" data-v-1fd342df>e.target.style.color</span><span class="then" data-v-1fd342df>=</span> <span class="src" data-v-1fd342df>&quot;red&quot;</span><div data-v-1fd342df></div></div><div data-v-1fd342df><span class="brackets" data-v-1fd342df>}</span></div></div><div data-v-1fd342df><span class="brackets" data-v-1fd342df>})</span></div></div><p class="fz28" data-v-1fd342df>事件委託好處?</p><p class="fz28" data-v-1fd342df>減少註冊次數 , 提高程序性能</p><br data-v-1fd342df><p class="fz28" data-v-1fd342df>委託誰?</p><p class="fz28" data-v-1fd342df>父元素</p><br data-v-1fd342df><p class="fz28" data-v-1fd342df>如何找真正觸發元素?</p><p class="fz28" data-v-1fd342df>事件對象.target.tagName</p><div id="threedom002" class="articleCardTitle cor36 fz34" data-v-1fd342df> 8.3 其他事件 </div><p class="fz28" data-v-1fd342df>事件名: load</p><p class="fz28" data-v-1fd342df>監聽頁面所有資源加載完畢</p><div class="bgcVS" data-v-1fd342df><div data-v-1fd342df><span class="comment" data-v-1fd342df>//等待頁面所有資源加載完畢,就回去執行回調函數</span></div><div data-v-1fd342df><span class="word" data-v-1fd342df>window</span><span class="variable" data-v-1fd342df>.addEventListener</span><span class="brackets" data-v-1fd342df>(</span> <span class="src" data-v-1fd342df>&quot;load&quot;</span><span class="then" data-v-1fd342df>,</span><span class="function" data-v-1fd342df>function </span><span class="brackets" data-v-1fd342df>(){</span></div><div class="padTwo VSL" data-v-1fd342df><span class="comment" data-v-1fd342df>//執行操作</span><div data-v-1fd342df></div></div><div data-v-1fd342df><span class="brackets" data-v-1fd342df>})</span></div><br data-v-1fd342df><p data-v-1fd342df>也可以針對某資源綁定 load 事件 ex圖片加載完再執行</p><div data-v-1fd342df><span class="word" data-v-1fd342df>img</span><span class="variable" data-v-1fd342df>.addEventListener</span><span class="brackets" data-v-1fd342df>(</span> <span class="src" data-v-1fd342df>&quot;load&quot;</span><span class="then" data-v-1fd342df>,</span><span class="function" data-v-1fd342df>function </span><span class="brackets" data-v-1fd342df>(){}</span></div></div><p class="fz28" data-v-1fd342df>事件名: DOMContentLoaded</p><p class="fz28" data-v-1fd342df> 當初使的 HTML 文檔加載解析完後 , DOMContentLoaded 事件觸發 </p><br data-v-1fd342df><p class="fz28" data-v-1fd342df>不用等 圖片.. ( 比 load 快 )</p><div class="bgcVS" data-v-1fd342df><div data-v-1fd342df><span class="word" data-v-1fd342df>document</span><span class="variable" data-v-1fd342df>.addEventListener</span><span class="brackets" data-v-1fd342df>(</span><span class="src" data-v-1fd342df>&quot;DOMContentLoaded&quot;</span><span class="then" data-v-1fd342df>,</span><span class="function" data-v-1fd342df>function </span><span class="brackets" data-v-1fd342df>(){</span></div><div class="padTwo VSL" data-v-1fd342df><span class="comment" data-v-1fd342df>//執行操作</span><div data-v-1fd342df></div></div><div data-v-1fd342df><span class="brackets" data-v-1fd342df>})</span></div></div><p class="fz28" data-v-1fd342df>事件名: scroll</p><p class="fz28" data-v-1fd342df>監聽整個頁面滾動</p><br data-v-1fd342df><a class="fz28" href="https://juejin.cn/post/7056751654854459406" data-v-1fd342df> @掘金</a><a class="fz28" href="https://stackoverflow.com/questions/21064101/understanding-offsetwidth-clientwidth-scrollwidth-and-height-respectively" data-v-1fd342df> @stack overflow</a><a class="fz28" href="https://www.runoob.com/jsref/prop-element-scrollwidth.html" data-v-1fd342df> @菜鳥教程</a><div class="bgcVS" data-v-1fd342df><div data-v-1fd342df><span class="word" data-v-1fd342df>window</span><span class="variable" data-v-1fd342df>.addEventListener</span><span class="brackets" data-v-1fd342df>(</span> <span class="src" data-v-1fd342df>&quot;scroll&quot;</span><span class="then" data-v-1fd342df>,</span><span class="function" data-v-1fd342df>function </span><span class="brackets" data-v-1fd342df>(){</span></div><div class="padTwo VSL" data-v-1fd342df><span class="word" data-v-1fd342df>console</span><span class="variable" data-v-1fd342df>.log</span><span class="brackets" data-v-1fd342df>(</span> <span class="src" data-v-1fd342df>&quot;滾動&quot;</span><span class="brackets" data-v-1fd342df>)</span><div data-v-1fd342df><span class="function" data-v-1fd342df>const </span><span class="word" data-v-1fd342df>n</span> <span class="then" data-v-1fd342df>=</span><span class="word" data-v-1fd342df>document</span><span class="variable" data-v-1fd342df>.documentElement.scrollTop</span></div><div data-v-1fd342df><span class="then" data-v-1fd342df>if</span> <span class="brackets" data-v-1fd342df>(</span><span class="word" data-v-1fd342df>n</span> <span class="then" data-v-1fd342df>&gt;=</span><span class="number" data-v-1fd342df>100</span> <span class="brackets" data-v-1fd342df>){</span></div><div data-v-1fd342df></div><div class="padTwo VSL" data-v-1fd342df><span class="word" data-v-1fd342df>console</span><span class="variable" data-v-1fd342df>.log</span><span class="brackets" data-v-1fd342df>(</span><span class="src" data-v-1fd342df>&quot;距離頂部100px&quot;</span><span class="brackets" data-v-1fd342df>)</span><div data-v-1fd342df></div></div><div data-v-1fd342df><span class="brackets" data-v-1fd342df>}</span></div></div><div data-v-1fd342df><span class="brackets" data-v-1fd342df>})</span></div><br data-v-1fd342df><p data-v-1fd342df>也可以給元素添加</p></div><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df>事件名:</p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><p class="fz28" data-v-1fd342df></p><br data-v-1fd342df><br data-v-1fd342df></div></div></div>',1),Mo=qv(()=>v("div",{class:"toTopButton"},[v("div",{class:"disCen"},"___"),v("div",{class:"disCen"},"▲")],-1)),Fo=[Mo],Io=qv(()=>v("div",{class:"toBotButton"},[v("div",{class:"disCen"},"▼"),v("div",{class:"disCen"},"￣")],-1)),Ro=[Io],Ho={__name:"JsPageThreeEight",setup(a){const s=ua(!1);window.addEventListener("scroll",function(){s.value=window.scrollY>0});function d(){window.scrollTo({top:0,left:0,behavior:"smooth"})}function t(){window.scrollTo({top:999999,left:0,behavior:"smooth"})}function c(e){window.scrollTo({top:document.getElementById(`${e}`).offsetTop,behavior:"smooth"})}return(e,n)=>(da(),ea(Q,null,[v("section",null,[v("div",$o,[v("div",Oo,[v("div",Eo,[v("div",{onClick:n[0]||(n[0]=l=>c("threedom001")),class:"leftNavText"},"事件流"),v("div",{onClick:n[1]||(n[1]=l=>c("threedom002")),class:"leftNavText"},"事件委託")])])]),Ao]),v("div",null,[X(T(W,{name:"fade",tag:"div"},{default:C(()=>[v("div",{onClick:d,class:"toTop"},Fo)]),_:1},512),[[Y,s.value]]),X(T(W,{name:"fade",tag:"div"},{default:C(()=>[v("div",{onClick:t,class:"toBot"},Ro)]),_:1},512),[[Y,s.value]])])],64))}},Bo=ia(Ho,[["__scopeId","data-v-1fd342df"]]),Jo="/vue-learn-js/assets/jsmission002-997d86a5.jpg";const yv=a=>(wa("data-v-7e4d9cb8"),a=a(),ha(),a),Do={class:"leftNav"},Wo={class:"leftNavContainer"},Uo={class:"leftNavLayout"},Ko=U('<div class="Main" data-v-7e4d9cb8><div class="mainContainer" data-v-7e4d9cb8><div class="mainLayout" data-v-7e4d9cb8><br data-v-7e4d9cb8><br data-v-7e4d9cb8><p class="fz28" data-v-7e4d9cb8>總分總</p><p class="fz28" data-v-7e4d9cb8>1.要講哪個知識點</p><p class="fz28" data-v-7e4d9cb8>2.細講</p><p class="fz28" data-v-7e4d9cb8>3.總結</p><br data-v-7e4d9cb8><br data-v-7e4d9cb8><div id="threeajax001" class="articleCardTitle cor36 fz34" data-v-7e4d9cb8> 9.1 AJAX </div><p class="fz28" data-v-7e4d9cb8> AJAX 是 &quot;Asynchronous JavaScript and XML&quot;（非同步 JavaScript 和 XML）的縮寫 </p><br data-v-7e4d9cb8><p class="fz28" data-v-7e4d9cb8>是 使用 XMLHttpRequest 對象 與 服務器 通信</p><br data-v-7e4d9cb8><br data-v-7e4d9cb8><p class="fz28" data-v-7e4d9cb8>AJAX 是 瀏覽器 與 服務器 進行 數據通信 的技術</p><p class="fz28" data-v-7e4d9cb8> 可以在 不刷新頁面 情況下 與 服務器通信 , 交換數據 , 更新頁面 </p><div id="threeajax002" class="articleCardTitle cor36 fz34" data-v-7e4d9cb8> 9.2 axios </div><a class="fz28" href="https://www.axios-http.cn/" data-v-7e4d9cb8>@ axios</a><div class="bgcVS" data-v-7e4d9cb8><div data-v-7e4d9cb8><span class="then" data-v-7e4d9cb8>＜</span> <span class="number" data-v-7e4d9cb8>script</span><span class="word" data-v-7e4d9cb8></span> <span class="word" data-v-7e4d9cb8>src</span><span class="then" data-v-7e4d9cb8>=</span><span class="src" data-v-7e4d9cb8>&quot;https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js&quot;</span><span class="then" data-v-7e4d9cb8>&gt;＜/ </span><span class="number" data-v-7e4d9cb8>script</span> <span class="then" data-v-7e4d9cb8>&gt;</span></div><div data-v-7e4d9cb8><span class="variable" data-v-7e4d9cb8>axios</span><span class="brackets" data-v-7e4d9cb8>({</span></div><div class="padTwo VSL" data-v-7e4d9cb8><span class="word" data-v-7e4d9cb8>url:</span><span class="src" data-v-7e4d9cb8>&quot;https://randomuser.me/api/&quot;</span><div data-v-7e4d9cb8></div></div><div data-v-7e4d9cb8><span class="brackets" data-v-7e4d9cb8>})</span><span class="variable" data-v-7e4d9cb8>.then</span><span class="brackets" data-v-7e4d9cb8>( ( </span><span class="word" data-v-7e4d9cb8>result </span> <span class="brackets" data-v-7e4d9cb8>)</span><span class="function" data-v-7e4d9cb8>=&gt;</span> <span class="brackets" data-v-7e4d9cb8>{</span></div><div class="padTwo VSL" data-v-7e4d9cb8><span class="word" data-v-7e4d9cb8>console.</span><span class="variable" data-v-7e4d9cb8>log</span> <span class="brackets" data-v-7e4d9cb8>(</span><span class="word" data-v-7e4d9cb8>result</span> <span class="brackets" data-v-7e4d9cb8>)</span><div data-v-7e4d9cb8></div></div><div data-v-7e4d9cb8><span class="brackets" data-v-7e4d9cb8>})</span></div></div><p class="fz28" data-v-7e4d9cb8>什麼是 URL</p><p class="fz28" data-v-7e4d9cb8>統一資源定位符 , 簡稱 網址 , 用於訪問 網路上 資源</p><br data-v-7e4d9cb8><div data-v-7e4d9cb8><span class="number fz30" data-v-7e4d9cb8>http://</span><span class="variable fz30" data-v-7e4d9cb8>randomuser.me</span><span class="src fz30" data-v-7e4d9cb8>/api/</span></div><div data-v-7e4d9cb8><span class="number fz30" data-v-7e4d9cb8>協議</span><span class="cor17" data-v-7e4d9cb8>......</span><span class="variable fz30" data-v-7e4d9cb8>域名</span><span class="cor17" data-v-7e4d9cb8>..................</span><span class="src fz30" data-v-7e4d9cb8>資源路徑</span></div><br data-v-7e4d9cb8><br data-v-7e4d9cb8><p class="fz28" data-v-7e4d9cb8>http 協議</p><p class="fz28" data-v-7e4d9cb8> 超文本傳輸協議 , 規定瀏覽器和服務器之間傳輸數據的格式 </p><br data-v-7e4d9cb8><br data-v-7e4d9cb8><p class="fz28" data-v-7e4d9cb8>域名</p><p class="fz28" data-v-7e4d9cb8>標記服務器在互聯網中方位</p><br data-v-7e4d9cb8><br data-v-7e4d9cb8><p class="fz28" data-v-7e4d9cb8>URL 查詢參數</p><p class="fz28" data-v-7e4d9cb8> 瀏覽器 提供給 服務器的 額外訊息 , 讓 服務器 返回 瀏覽器 想要的 數據 </p><p class="fz28" data-v-7e4d9cb8> http//test.com/test/test<span class="number" data-v-7e4d9cb8>?參數名1=值1&amp;參數名2=值2</span></p><div class="bgcVS" data-v-7e4d9cb8><p data-v-7e4d9cb8>axios 查詢參數</p><p data-v-7e4d9cb8>axios 會把參數名和值 , 拼接到 url?參數名=值</p><div data-v-7e4d9cb8><span class="variable" data-v-7e4d9cb8>axios</span><span class="brackets" data-v-7e4d9cb8>({</span></div><div class="padTwo VSL" data-v-7e4d9cb8><span class="word" data-v-7e4d9cb8>url:</span><span class="src" data-v-7e4d9cb8>&quot;https://randomuser.me/api/&quot;</span><div data-v-7e4d9cb8></div></div><div class="padTwo VSL" data-v-7e4d9cb8><span class="word" data-v-7e4d9cb8>params:</span> <span class="brackets" data-v-7e4d9cb8>{</span><div data-v-7e4d9cb8><div class="padTwo VSL" data-v-7e4d9cb8><span class="word" data-v-7e4d9cb8>參數名:值</span><div data-v-7e4d9cb8></div></div><div data-v-7e4d9cb8><span class="brackets" data-v-7e4d9cb8>}</span></div></div></div><div data-v-7e4d9cb8><span class="brackets" data-v-7e4d9cb8>})</span><span class="variable" data-v-7e4d9cb8>.then</span><span class="brackets" data-v-7e4d9cb8>( ( </span><span class="word" data-v-7e4d9cb8>result </span> <span class="brackets" data-v-7e4d9cb8>)</span><span class="function" data-v-7e4d9cb8>=&gt;</span> <span class="brackets" data-v-7e4d9cb8>{</span></div><div class="padTwo VSL" data-v-7e4d9cb8><span class="word" data-v-7e4d9cb8>console.</span><span class="variable" data-v-7e4d9cb8>log</span> <span class="brackets" data-v-7e4d9cb8>(</span><span class="word" data-v-7e4d9cb8>result</span> <span class="brackets" data-v-7e4d9cb8>)</span><div data-v-7e4d9cb8></div></div><div data-v-7e4d9cb8><span class="brackets" data-v-7e4d9cb8>})</span></div></div><p class="fz28" data-v-7e4d9cb8>請求方法: 對服務器資源 , 要執行的操作</p><p class="fz28" data-v-7e4d9cb8>GET _ 獲取數據</p><p class="fz28" data-v-7e4d9cb8>POST _ 提交數據</p><p class="fz28" data-v-7e4d9cb8>PUT _ 修改數據 ( 全部 )</p><p class="fz28" data-v-7e4d9cb8>DELETE _ 刪除數據</p><p class="fz28" data-v-7e4d9cb8>PATCH _ 修改數據 ( 部分 )</p><div class="bgcVS" data-v-7e4d9cb8><p data-v-7e4d9cb8>axios 請求數據 + 查詢參數</p><p data-v-7e4d9cb8>axios 會把參數名和值 , 拼接到 url?參數名=值</p><div data-v-7e4d9cb8><span class="variable" data-v-7e4d9cb8>axios</span><span class="brackets" data-v-7e4d9cb8>({</span></div><div class="padTwo VSL" data-v-7e4d9cb8><span class="word" data-v-7e4d9cb8>url:</span><span class="src" data-v-7e4d9cb8>&quot;https://randomuser.me/api/&quot;</span><div data-v-7e4d9cb8></div></div><div class="padTwo VSL" data-v-7e4d9cb8><div data-v-7e4d9cb8><span class="word" data-v-7e4d9cb8>method:</span><span class="src" data-v-7e4d9cb8>&quot;請求方法&quot;</span></div><span class="word" data-v-7e4d9cb8>params:</span> <span class="brackets" data-v-7e4d9cb8>{</span><div data-v-7e4d9cb8><div class="padTwo VSL" data-v-7e4d9cb8><span class="word" data-v-7e4d9cb8>參數名:值</span><div data-v-7e4d9cb8></div></div><div data-v-7e4d9cb8><span class="brackets" data-v-7e4d9cb8>}</span></div></div></div><div data-v-7e4d9cb8><span class="brackets" data-v-7e4d9cb8>})</span><span class="variable" data-v-7e4d9cb8>.then</span><span class="brackets" data-v-7e4d9cb8>( ( </span><span class="word" data-v-7e4d9cb8>result </span> <span class="brackets" data-v-7e4d9cb8>)</span><span class="function" data-v-7e4d9cb8>=&gt;</span> <span class="brackets" data-v-7e4d9cb8>{</span></div><div class="padTwo VSL" data-v-7e4d9cb8><span class="word" data-v-7e4d9cb8>console.</span><span class="variable" data-v-7e4d9cb8>log</span> <span class="brackets" data-v-7e4d9cb8>(</span><span class="word" data-v-7e4d9cb8>result</span> <span class="brackets" data-v-7e4d9cb8>)</span><div data-v-7e4d9cb8></div></div><div data-v-7e4d9cb8><span class="brackets" data-v-7e4d9cb8>})</span></div><br data-v-7e4d9cb8><p data-v-7e4d9cb8>axios 提交數據到服務器</p><br data-v-7e4d9cb8><div data-v-7e4d9cb8><span class="then" data-v-7e4d9cb8>＜</span> <span class="number" data-v-7e4d9cb8>button </span><span class="function" data-v-7e4d9cb8>class </span> <span class="then" data-v-7e4d9cb8>=</span><span class="src" data-v-7e4d9cb8>&quot;btn&quot;</span> <span class="then" data-v-7e4d9cb8>&gt;</span><span class="word" data-v-7e4d9cb8>註冊</span> <span class="then" data-v-7e4d9cb8>＜/</span><span class="number" data-v-7e4d9cb8>button</span> <span class="then" data-v-7e4d9cb8>&gt;</span></div><div data-v-7e4d9cb8><span class="word" data-v-7e4d9cb8>document</span><span class="variable" data-v-7e4d9cb8>.querySelector</span><span class="brackets" data-v-7e4d9cb8>(</span> <span class="src" data-v-7e4d9cb8>&quot;.btn&quot;</span><span class="brackets" data-v-7e4d9cb8>)</span><span class="word" data-v-7e4d9cb8>.addEventListener</span><span class="brackets" data-v-7e4d9cb8>(</span> <span class="src" data-v-7e4d9cb8>&quot;click&quot;</span><span class="then" data-v-7e4d9cb8>,</span> <span class="brackets" data-v-7e4d9cb8>()</span><span class="function" data-v-7e4d9cb8>=&gt;</span> <span class="brackets" data-v-7e4d9cb8>{</span></div><div class="padTwo VSL" data-v-7e4d9cb8><span class="variable" data-v-7e4d9cb8>axios</span><span class="brackets" data-v-7e4d9cb8>({</span><div data-v-7e4d9cb8><div class="padTwo VSL" data-v-7e4d9cb8><span class="word" data-v-7e4d9cb8>url:</span> <span class="src" data-v-7e4d9cb8>&quot;&quot;,</span><div data-v-7e4d9cb8><span class="word" data-v-7e4d9cb8>method:</span><span class="src" data-v-7e4d9cb8>&quot;post&quot;, </span><span class="comment" data-v-7e4d9cb8>// 提交數據</span></div><div data-v-7e4d9cb8><span class="word" data-v-7e4d9cb8>data:</span><span class="brackets" data-v-7e4d9cb8>{</span></div><div class="padTwo VSL" data-v-7e4d9cb8><div data-v-7e4d9cb8><div data-v-7e4d9cb8><span class="word" data-v-7e4d9cb8>username:</span><span class="src" data-v-7e4d9cb8>&quot;&quot;,</span></div><div data-v-7e4d9cb8><span class="word" data-v-7e4d9cb8>password:</span><span class="src" data-v-7e4d9cb8>&quot;&quot;</span></div></div></div><div data-v-7e4d9cb8><span class="brackets" data-v-7e4d9cb8>}</span></div></div></div></div><div class="padTwo VSL" data-v-7e4d9cb8><span class="brackets" data-v-7e4d9cb8>})</span><span class="variable" data-v-7e4d9cb8>.then</span><span class="brackets" data-v-7e4d9cb8>((</span> <span class="word" data-v-7e4d9cb8>result</span><span class="brackets" data-v-7e4d9cb8>)</span> <span class="function" data-v-7e4d9cb8>=&gt;</span><span class="brackets" data-v-7e4d9cb8>{</span><div data-v-7e4d9cb8><div class="padTwo VSL" data-v-7e4d9cb8><span class="word" data-v-7e4d9cb8>console.</span><span class="variable" data-v-7e4d9cb8>log</span><span class="brackets" data-v-7e4d9cb8>(</span><span class="word" data-v-7e4d9cb8>result</span><span class="brackets" data-v-7e4d9cb8>)</span><div data-v-7e4d9cb8></div></div><div data-v-7e4d9cb8><span class="brackets" data-v-7e4d9cb8>})</span></div></div></div><div data-v-7e4d9cb8><span class="brackets" data-v-7e4d9cb8>})</span></div><br data-v-7e4d9cb8><p data-v-7e4d9cb8>axios 錯誤處理</p><p data-v-7e4d9cb8> 在 then 方法後面 , 調用 catch 方法 , 傳入 回掉函數 並定義 形參 </p><br data-v-7e4d9cb8><p data-v-7e4d9cb8></p><br data-v-7e4d9cb8><div data-v-7e4d9cb8><span class="then" data-v-7e4d9cb8>＜</span> <span class="number" data-v-7e4d9cb8>button </span><span class="function" data-v-7e4d9cb8>class </span> <span class="then" data-v-7e4d9cb8>=</span><span class="src" data-v-7e4d9cb8>&quot;btn&quot;</span> <span class="then" data-v-7e4d9cb8>&gt;</span><span class="word" data-v-7e4d9cb8>註冊</span> <span class="then" data-v-7e4d9cb8>＜/</span><span class="number" data-v-7e4d9cb8>button</span> <span class="then" data-v-7e4d9cb8>&gt;</span></div><div data-v-7e4d9cb8><span class="word" data-v-7e4d9cb8>document</span><span class="variable" data-v-7e4d9cb8>.querySelector</span><span class="brackets" data-v-7e4d9cb8>(</span> <span class="src" data-v-7e4d9cb8>&quot;.btn&quot;</span><span class="brackets" data-v-7e4d9cb8>)</span><span class="word" data-v-7e4d9cb8>.addEventListener</span><span class="brackets" data-v-7e4d9cb8>(</span> <span class="src" data-v-7e4d9cb8>&quot;click&quot;</span><span class="then" data-v-7e4d9cb8>,</span> <span class="brackets" data-v-7e4d9cb8>()</span><span class="function" data-v-7e4d9cb8>=&gt;</span> <span class="brackets" data-v-7e4d9cb8>{</span></div><div class="padTwo VSL" data-v-7e4d9cb8><span class="variable" data-v-7e4d9cb8>axios</span><span class="brackets" data-v-7e4d9cb8>({</span><div data-v-7e4d9cb8><div class="padTwo VSL" data-v-7e4d9cb8><span class="word" data-v-7e4d9cb8>url:</span> <span class="src" data-v-7e4d9cb8>&quot;&quot;,</span><div data-v-7e4d9cb8><span class="word" data-v-7e4d9cb8>method:</span><span class="src" data-v-7e4d9cb8>&quot;post&quot;,</span><span class="comment" data-v-7e4d9cb8>// 提交數據</span></div><div data-v-7e4d9cb8><span class="word" data-v-7e4d9cb8>data:</span><span class="brackets" data-v-7e4d9cb8>{</span></div><div class="padTwo VSL" data-v-7e4d9cb8><div data-v-7e4d9cb8><div data-v-7e4d9cb8><span class="word" data-v-7e4d9cb8>username:</span><span class="src" data-v-7e4d9cb8>&quot;&quot;,</span></div><div data-v-7e4d9cb8><span class="word" data-v-7e4d9cb8>password:</span><span class="src" data-v-7e4d9cb8>&quot;&quot;</span></div></div></div><div data-v-7e4d9cb8><span class="brackets" data-v-7e4d9cb8>}</span></div></div></div></div><div class="padTwo VSL" data-v-7e4d9cb8><span class="brackets" data-v-7e4d9cb8>})</span><span class="variable" data-v-7e4d9cb8>.then</span><span class="brackets" data-v-7e4d9cb8>((</span> <span class="word" data-v-7e4d9cb8>result</span><span class="brackets" data-v-7e4d9cb8>)</span> <span class="function" data-v-7e4d9cb8>=&gt;</span><span class="brackets" data-v-7e4d9cb8>{</span><div data-v-7e4d9cb8><div class="padTwo VSL" data-v-7e4d9cb8><span class="word" data-v-7e4d9cb8>console.</span><span class="variable" data-v-7e4d9cb8>log</span><span class="brackets" data-v-7e4d9cb8>(</span><span class="word" data-v-7e4d9cb8>result</span><span class="brackets" data-v-7e4d9cb8>)</span><div data-v-7e4d9cb8></div></div><div data-v-7e4d9cb8><span class="brackets" data-v-7e4d9cb8>})</span><span class="variable" data-v-7e4d9cb8>.catch</span><span class="brackets" data-v-7e4d9cb8>( ( </span><span class="variable" data-v-7e4d9cb8>error </span><span class="brackets" data-v-7e4d9cb8>)</span><span class="function" data-v-7e4d9cb8>=&gt;</span><span class="brackets" data-v-7e4d9cb8>{</span></div><div class="padTwo VSL" data-v-7e4d9cb8><span class="comment" data-v-7e4d9cb8>//處理報錯訊息</span><div data-v-7e4d9cb8><span class="word" data-v-7e4d9cb8>console</span><span class="word" data-v-7e4d9cb8>.log</span><span class="brackets" data-v-7e4d9cb8>(</span><span class="variable" data-v-7e4d9cb8>error</span><span class="brackets" data-v-7e4d9cb8>)</span></div><div data-v-7e4d9cb8></div></div><div data-v-7e4d9cb8><span class="brackets" data-v-7e4d9cb8>})</span></div></div></div><div data-v-7e4d9cb8><span class="brackets" data-v-7e4d9cb8>})</span></div><br data-v-7e4d9cb8></div><p class="fz28" data-v-7e4d9cb8>HTTP 協議 請求報文</p><p class="fz28" data-v-7e4d9cb8> 請求報文: 瀏覽器 按照 HTTP 協議要求的格式 , 發給 服務器 的內容 </p><br data-v-7e4d9cb8><p class="fz28" data-v-7e4d9cb8>1 | POST http://test.com/URL網址... HTTP/1.1</p><p class="fz28" data-v-7e4d9cb8>2 | ...</p><p class="fz28" data-v-7e4d9cb8>3 | ...</p><p class="fz28" data-v-7e4d9cb8>4 | ...</p><p class="fz28" data-v-7e4d9cb8>5 | ...</p><p class="fz28" data-v-7e4d9cb8>6 | ...</p><p class="fz28" data-v-7e4d9cb8>7 | Content-Type : application/json</p><p class="fz28" data-v-7e4d9cb8>8 | ...</p><p class="fz28" data-v-7e4d9cb8>9 | ...</p><p class="fz28" data-v-7e4d9cb8>10| ...</p><p class="fz28" data-v-7e4d9cb8>11| ...</p><p class="fz28" data-v-7e4d9cb8>12|</p><p class="fz28" data-v-7e4d9cb8>13| { &quot;username&quot;:&quot;admin&quot;,&quot;password&quot;:&quot;123465&quot; }</p><br data-v-7e4d9cb8><br data-v-7e4d9cb8><p class="fz28" data-v-7e4d9cb8>請求報文 4 部分</p><p class="fz28" data-v-7e4d9cb8>1. 請求行: 請求方法 , URL , 協議</p><p class="fz28" data-v-7e4d9cb8> 2. 請求頭: 以鍵值對的格式攜帶的附加訊息 ex Content-Type </p><p class="fz28" data-v-7e4d9cb8>3. 空行: 分割請求頭 , 空行之後是發送給服務器的資源</p><p class="fz28" data-v-7e4d9cb8>4. 請求體: 發送的資源</p><br data-v-7e4d9cb8><br data-v-7e4d9cb8><p class="fz28" data-v-7e4d9cb8>HTTP 協議 響應報文</p><p class="fz28" data-v-7e4d9cb8> 響應報文: 服務器 按照 HTP 協議要求的格式 , 返回給 瀏覽器 的內容 </p><br data-v-7e4d9cb8><br data-v-7e4d9cb8><p class="fz28" data-v-7e4d9cb8>響應報文 4 部分</p><p class="fz28" data-v-7e4d9cb8>1. 響應行: 協議 , HTTP 響應狀態碼 , 狀態訊息</p><p class="fz28" data-v-7e4d9cb8> 2. 響應頭: 以鍵值對的格式攜帶的附加訊息 ex Content-Type </p><p class="fz28" data-v-7e4d9cb8>3. 空行: 分割響應頭 , 空行之後是服務器返回的資源</p><p class="fz28" data-v-7e4d9cb8>4. 請求體: 返回的資源</p><br data-v-7e4d9cb8><br data-v-7e4d9cb8><p class="fz28" data-v-7e4d9cb8>1 | HTTP/1.1 400 Bad Request</p><p class="fz28" data-v-7e4d9cb8>2 | ...</p><p class="fz28" data-v-7e4d9cb8>3 | ...</p><p class="fz28" data-v-7e4d9cb8>4 | Content-Type: application/json</p><p class="fz28" data-v-7e4d9cb8>5 | ...</p><p class="fz28" data-v-7e4d9cb8>6 | ...</p><p class="fz28" data-v-7e4d9cb8>7 | ...</p><p class="fz28" data-v-7e4d9cb8>8 | ...</p><p class="fz28" data-v-7e4d9cb8>9 | ...</p><p class="fz28" data-v-7e4d9cb8>10| ...</p><p class="fz28" data-v-7e4d9cb8>11| ...</p><p class="fz28" data-v-7e4d9cb8>12| ...</p><p class="fz28" data-v-7e4d9cb8>13| ...</p><p class="fz28" data-v-7e4d9cb8>14| ...</p><p class="fz28" data-v-7e4d9cb8>15|</p><p class="fz28" data-v-7e4d9cb8>16| {&quot;code&quot;:123456,&quot;message&quot;:&quot;test&quot;}</p><br data-v-7e4d9cb8><br data-v-7e4d9cb8><p class="fz28" data-v-7e4d9cb8>HTTP 響應狀態碼</p><p class="fz28" data-v-7e4d9cb8>1XX ... 訊息</p><p class="fz28" data-v-7e4d9cb8>2XX ... 成功</p><p class="fz28" data-v-7e4d9cb8>3XX ... 重定向</p><p class="fz28" data-v-7e4d9cb8>4XX ... 客戶端錯誤</p><p class="fz28" data-v-7e4d9cb8>5XX ... 服務端錯誤</p><br data-v-7e4d9cb8><br data-v-7e4d9cb8><p class="fz28" data-v-7e4d9cb8>404 服務器找不到資源</p><br data-v-7e4d9cb8><br data-v-7e4d9cb8><p class="fz28" data-v-7e4d9cb8>接口文檔</p><p class="fz28" data-v-7e4d9cb8> 接口: 使用 AJAX 和 服務器通訊時 , 使用的 URL , 請求方法 , 參數 </p><br data-v-7e4d9cb8><br data-v-7e4d9cb8><p class="fz28" data-v-7e4d9cb8>XMLHttpRequest</p><p class="fz28" data-v-7e4d9cb8>1. 創建 XMLHttpRequest 對象</p><p class="fz28" data-v-7e4d9cb8>2. 配 請求方法 &amp; url</p><p class="fz28" data-v-7e4d9cb8>3. 監聽 loadend 接收響應結果</p><p class="fz28" data-v-7e4d9cb8>4. 發請求</p><div class="bgcVS" data-v-7e4d9cb8><div data-v-7e4d9cb8><span class="function" data-v-7e4d9cb8>const </span><span class="word" data-v-7e4d9cb8>xhr</span> <span class="then" data-v-7e4d9cb8>=</span><span class="then" data-v-7e4d9cb8>new </span><span class="word" data-v-7e4d9cb8>XMLHttpRequest</span><span class="brackets" data-v-7e4d9cb8>()</span></div><div data-v-7e4d9cb8><span class="word" data-v-7e4d9cb8>xhr</span> <span class="variable" data-v-7e4d9cb8>.open</span><span class="brackets" data-v-7e4d9cb8>(</span><span class="src" data-v-7e4d9cb8>&quot;請求方法&quot;,&quot;請求url網址&quot;</span><span class="brackets" data-v-7e4d9cb8>)</span></div><div data-v-7e4d9cb8><span class="word" data-v-7e4d9cb8>xhr</span><span class="variable" data-v-7e4d9cb8>.addEventListener</span><span class="brackets" data-v-7e4d9cb8>(</span><span class="src" data-v-7e4d9cb8>&quot;loadend&quot;</span> <span class="then" data-v-7e4d9cb8>,</span><span class="brackets" data-v-7e4d9cb8>()</span> <span class="function" data-v-7e4d9cb8>=&gt;</span><span class="brackets" data-v-7e4d9cb8>{</span></div><div class="padTwo VSL" data-v-7e4d9cb8><span class="word" data-v-7e4d9cb8>console.</span><span class="variable" data-v-7e4d9cb8>log</span> <span class="brackets" data-v-7e4d9cb8>(</span><span class="word" data-v-7e4d9cb8>xhr.response</span><span class="brackets" data-v-7e4d9cb8>)</span><span class="comment" data-v-7e4d9cb8>//響應結果</span><div data-v-7e4d9cb8><span class="function" data-v-7e4d9cb8>const </span><span class="word" data-v-7e4d9cb8>data</span> <span class="then" data-v-7e4d9cb8>=</span><span class="brackets" data-v-7e4d9cb8>JSON</span><span class="variable" data-v-7e4d9cb8>.parse</span><span class="brackets" data-v-7e4d9cb8>(</span><span class="word" data-v-7e4d9cb8>xhr.response</span><span class="brackets" data-v-7e4d9cb8>)</span></div><div data-v-7e4d9cb8><span class="word" data-v-7e4d9cb8>console.</span><span class="variable" data-v-7e4d9cb8>log</span><span class="brackets" data-v-7e4d9cb8>(</span> <span class="word" data-v-7e4d9cb8>data</span><span class="brackets" data-v-7e4d9cb8>)</span></div><div data-v-7e4d9cb8></div></div><div data-v-7e4d9cb8><span class="brackets" data-v-7e4d9cb8>})</span></div><div data-v-7e4d9cb8><span class="word" data-v-7e4d9cb8>xhr</span> <span class="variable" data-v-7e4d9cb8>.send</span><span class="brackets" data-v-7e4d9cb8>()</span></div></div><div id="threeajax003" class="articleCardTitle cor36 fz34" data-v-7e4d9cb8> 9.3 Promise 3 狀態 pending . . . fullfilled . . . rejected </div><p class="fz28" data-v-7e4d9cb8>pending 待定: 初始狀態</p><p class="fz28" data-v-7e4d9cb8>fullfilled 兌現: 操作成功</p><p class="fz28" data-v-7e4d9cb8>rejected 拒絕: 操作失敗</p><br data-v-7e4d9cb8><br data-v-7e4d9cb8><p class="fz28" data-v-7e4d9cb8>Promise 狀態 一但 兌現 / 拒絕 就 無法再改變</p><br data-v-7e4d9cb8><div class="bgcVS" data-v-7e4d9cb8><div data-v-7e4d9cb8><span class="comment" data-v-7e4d9cb8>//1.創建Promise對象(pending-待定狀態)</span></div><div data-v-7e4d9cb8><span class="function" data-v-7e4d9cb8>const </span> <span class="word" data-v-7e4d9cb8>p</span><span class="then" data-v-7e4d9cb8>=</span> <span class="then" data-v-7e4d9cb8>new </span><span class="brackets" data-v-7e4d9cb8>Promise</span><span class="brackets" data-v-7e4d9cb8>((</span><span class="word" data-v-7e4d9cb8>resolve,reject</span><span class="brackets" data-v-7e4d9cb8>)</span> <span class="function" data-v-7e4d9cb8>=&gt;</span><span class="brackets" data-v-7e4d9cb8>{</span></div><div class="padTwo VSL" data-v-7e4d9cb8><span class="word" data-v-7e4d9cb8>console.</span><span class="variable" data-v-7e4d9cb8>log</span> <span class="brackets" data-v-7e4d9cb8>(</span><span class="src" data-v-7e4d9cb8>&quot;Promise對象創建時,這裡的代碼都會執行了&quot;</span><span class="brackets" data-v-7e4d9cb8>)</span><div data-v-7e4d9cb8></div><div data-v-7e4d9cb8><span class="comment" data-v-7e4d9cb8>//2.執行異步代碼</span></div><div data-v-7e4d9cb8><span class="variable" data-v-7e4d9cb8>setTimeout</span><span class="brackets" data-v-7e4d9cb8>(()</span><span class="function" data-v-7e4d9cb8>=&gt;</span> <span class="brackets" data-v-7e4d9cb8>{</span></div><div class="padTwo VSL" data-v-7e4d9cb8><span class="comment" data-v-7e4d9cb8>//resolve(調用時fullfilled狀態) . . &gt; then()</span><div data-v-7e4d9cb8><span class="variable" data-v-7e4d9cb8>resolve</span><span class="brackets" data-v-7e4d9cb8>(</span><span class="src" data-v-7e4d9cb8>&quot;模擬AJAX-成功結果&quot;</span><span class="brackets" data-v-7e4d9cb8>)</span></div><div data-v-7e4d9cb8><span class="comment" data-v-7e4d9cb8>//reject(調用時rejected狀態) . . &gt; catch()</span></div><div data-v-7e4d9cb8><span class="variable" data-v-7e4d9cb8>reject</span><span class="brackets" data-v-7e4d9cb8>(</span><span class="then" data-v-7e4d9cb8>new </span><span class="word" data-v-7e4d9cb8>Error</span><span class="brackets" data-v-7e4d9cb8>(</span><span class="src" data-v-7e4d9cb8>&quot;模擬AJAX請求-失敗結果&quot;</span><span class="brackets" data-v-7e4d9cb8>))</span></div><div data-v-7e4d9cb8></div></div><div data-v-7e4d9cb8><span class="brackets" data-v-7e4d9cb8>},</span><span class="number" data-v-7e4d9cb8>2000</span> <span class="brackets" data-v-7e4d9cb8>)</span></div></div><div data-v-7e4d9cb8><span class="brackets" data-v-7e4d9cb8>})</span></div><div data-v-7e4d9cb8><span class="comment" data-v-7e4d9cb8>//3.獲取結果</span></div><div data-v-7e4d9cb8><span class="word" data-v-7e4d9cb8>p</span><span class="variable" data-v-7e4d9cb8>.then</span><span class="brackets" data-v-7e4d9cb8>(</span> <span class="word" data-v-7e4d9cb8>result</span><span class="function" data-v-7e4d9cb8>=&gt;</span> <span class="brackets" data-v-7e4d9cb8>{</span></div><div class="padTwo VSL" data-v-7e4d9cb8><span class="word" data-v-7e4d9cb8>console.</span><span class="variable" data-v-7e4d9cb8>log</span> <span class="brackets" data-v-7e4d9cb8>(</span><span class="word" data-v-7e4d9cb8>result</span> <span class="brackets" data-v-7e4d9cb8>)</span><div data-v-7e4d9cb8></div></div><div data-v-7e4d9cb8><span class="brackets" data-v-7e4d9cb8>})</span><span class="variable" data-v-7e4d9cb8>.catch</span><span class="brackets" data-v-7e4d9cb8>(</span><span class="variable" data-v-7e4d9cb8>error</span><span class="function" data-v-7e4d9cb8>=&gt;</span> <span class="brackets" data-v-7e4d9cb8>{</span></div><div class="padTwo VSL" data-v-7e4d9cb8><span class="word" data-v-7e4d9cb8>console.</span><span class="variable" data-v-7e4d9cb8>log</span> <span class="brackets" data-v-7e4d9cb8>(</span><span class="variable" data-v-7e4d9cb8>error</span><span class="brackets" data-v-7e4d9cb8>)</span><div data-v-7e4d9cb8></div></div><div data-v-7e4d9cb8><span class="brackets" data-v-7e4d9cb8>})</span></div></div><p class="fz28" data-v-7e4d9cb8>xhr + Promise</p><div class="bgcVS" data-v-7e4d9cb8><div data-v-7e4d9cb8><span class="then" data-v-7e4d9cb8>＜</span> <span class="number" data-v-7e4d9cb8>div </span><span class="function" data-v-7e4d9cb8>class </span> <span class="then" data-v-7e4d9cb8>=</span><span class="src" data-v-7e4d9cb8>&quot;showData&quot;</span><span class="then" data-v-7e4d9cb8>&gt;＜/ </span> <span class="number" data-v-7e4d9cb8>div </span><span class="then" data-v-7e4d9cb8>&gt;</span></div><div data-v-7e4d9cb8><span class="comment" data-v-7e4d9cb8>//1.創建Promise對象</span></div><div data-v-7e4d9cb8><span class="function" data-v-7e4d9cb8>const </span> <span class="word" data-v-7e4d9cb8>p</span><span class="then" data-v-7e4d9cb8>=</span> <span class="then" data-v-7e4d9cb8>new </span><span class="brackets" data-v-7e4d9cb8>Promise</span><span class="brackets" data-v-7e4d9cb8>((</span><span class="variable" data-v-7e4d9cb8>resolve,reject</span><span class="brackets" data-v-7e4d9cb8>)</span> <span class="function" data-v-7e4d9cb8>=&gt;</span><span class="brackets" data-v-7e4d9cb8>{</span></div><div class="padTwo VSL" data-v-7e4d9cb8><span class="comment" data-v-7e4d9cb8>//2.執行xhr異步獲取資料</span><div data-v-7e4d9cb8><span class="function" data-v-7e4d9cb8>const </span><span class="word" data-v-7e4d9cb8>xhr</span> <span class="then" data-v-7e4d9cb8>=</span><span class="then" data-v-7e4d9cb8>new </span><span class="word" data-v-7e4d9cb8>XMLHttpRequest</span><span class="brackets" data-v-7e4d9cb8>()</span></div><div data-v-7e4d9cb8><span class="word" data-v-7e4d9cb8>xhr</span><span class="variable" data-v-7e4d9cb8>.open</span><span class="brackets" data-v-7e4d9cb8>(</span><span class="src" data-v-7e4d9cb8>&quot;GET&quot;,&quot;放URL&quot;</span><span class="brackets" data-v-7e4d9cb8>)</span></div><div data-v-7e4d9cb8><span class="word" data-v-7e4d9cb8>xhr</span><span class="variable" data-v-7e4d9cb8>.addEventListener</span><span class="brackets" data-v-7e4d9cb8>(</span><span class="src" data-v-7e4d9cb8>&quot;loadend&quot;</span> <span class="then" data-v-7e4d9cb8>,</span><span class="brackets" data-v-7e4d9cb8>()</span><span class="function" data-v-7e4d9cb8>=&gt;</span> <span class="brackets" data-v-7e4d9cb8>{</span></div><div data-v-7e4d9cb8></div><div class="padTwo VSL" data-v-7e4d9cb8><span class="comment" data-v-7e4d9cb8>//xhr判斷響應碼,2xx成功</span><div data-v-7e4d9cb8><span class="then" data-v-7e4d9cb8>if</span> <span class="brackets" data-v-7e4d9cb8>(</span><span class="word" data-v-7e4d9cb8>xhr.status</span><span class="then" data-v-7e4d9cb8>&gt;=</span> <span class="number" data-v-7e4d9cb8>200</span><span class="word" data-v-7e4d9cb8>&amp;&amp;</span><span class="word" data-v-7e4d9cb8>xhr.status</span><span class="then" data-v-7e4d9cb8>＜</span> <span class="number" data-v-7e4d9cb8>300</span><span class="brackets" data-v-7e4d9cb8>){</span></div><div data-v-7e4d9cb8></div><div class="padTwo VSL" data-v-7e4d9cb8><span class="variable" data-v-7e4d9cb8>resolve</span><span class="brackets" data-v-7e4d9cb8>(</span><span class="brackets" data-v-7e4d9cb8>JSON</span><span class="variable" data-v-7e4d9cb8>.parse</span><span class="brackets" data-v-7e4d9cb8>(</span><span class="word" data-v-7e4d9cb8>xhr.response</span><span class="brackets" data-v-7e4d9cb8>))</span><div data-v-7e4d9cb8></div></div><div data-v-7e4d9cb8><span class="brackets" data-v-7e4d9cb8>}</span><span class="then" data-v-7e4d9cb8>else </span><span class="brackets" data-v-7e4d9cb8>{</span></div><div class="padTwo VSL" data-v-7e4d9cb8><span class="variable" data-v-7e4d9cb8>reject</span><span class="brackets" data-v-7e4d9cb8>(</span><span class="then" data-v-7e4d9cb8>new </span><span class="word" data-v-7e4d9cb8>Error</span><span class="brackets" data-v-7e4d9cb8>(</span><span class="word" data-v-7e4d9cb8>xhr.response</span><span class="brackets" data-v-7e4d9cb8>))</span><div data-v-7e4d9cb8></div></div><div data-v-7e4d9cb8><span class="brackets" data-v-7e4d9cb8>}</span></div></div><div data-v-7e4d9cb8><span class="brackets" data-v-7e4d9cb8>})</span></div><div data-v-7e4d9cb8><span class="word" data-v-7e4d9cb8>xhr</span><span class="variable" data-v-7e4d9cb8>.send</span><span class="brackets" data-v-7e4d9cb8>()</span></div></div><div data-v-7e4d9cb8><span class="brackets" data-v-7e4d9cb8>})</span></div><div data-v-7e4d9cb8><span class="comment" data-v-7e4d9cb8>//3.成功執行then,失敗執行catch</span></div><div data-v-7e4d9cb8><span class="word" data-v-7e4d9cb8>p</span> <span class="variable" data-v-7e4d9cb8>.then</span><span class="brackets" data-v-7e4d9cb8>(</span> <span class="word" data-v-7e4d9cb8>result</span><span class="function" data-v-7e4d9cb8>=&gt;</span> <span class="brackets" data-v-7e4d9cb8>{</span></div><div class="padTwo VSL" data-v-7e4d9cb8><span class="word" data-v-7e4d9cb8>console</span><span class="variable" data-v-7e4d9cb8>.log</span><span class="brackets" data-v-7e4d9cb8>(</span> <span class="word" data-v-7e4d9cb8>result</span><span class="brackets" data-v-7e4d9cb8>)</span><div data-v-7e4d9cb8><span class="word" data-v-7e4d9cb8>document</span><span class="variable" data-v-7e4d9cb8>.querySelector</span><span class="brackets" data-v-7e4d9cb8>(</span><span class="src" data-v-7e4d9cb8>&quot;.showData&quot;</span><span class="brackets" data-v-7e4d9cb8>)</span><span class="variable" data-v-7e4d9cb8>.innerHTML</span><span class="then" data-v-7e4d9cb8>=</span> <span class="word" data-v-7e4d9cb8>result</span></div><div data-v-7e4d9cb8></div></div><div data-v-7e4d9cb8><span class="brackets" data-v-7e4d9cb8>})</span><span class="variable" data-v-7e4d9cb8>.catch</span><span class="brackets" data-v-7e4d9cb8>(</span><span class="variable" data-v-7e4d9cb8>error</span><span class="function" data-v-7e4d9cb8>=&gt;</span> <span class="brackets" data-v-7e4d9cb8>{</span></div><div class="padTwo VSL" data-v-7e4d9cb8><span class="word" data-v-7e4d9cb8>console</span><span class="variable" data-v-7e4d9cb8>.log</span><span class="brackets" data-v-7e4d9cb8>(</span><span class="variable" data-v-7e4d9cb8>error</span><span class="brackets" data-v-7e4d9cb8>)</span><div data-v-7e4d9cb8></div></div><div data-v-7e4d9cb8><span class="brackets" data-v-7e4d9cb8>})</span></div></div><p class="fz28" data-v-7e4d9cb8>模仿 axios 封裝 xhr + Promise</p><div class="bgcVS" data-v-7e4d9cb8><div data-v-7e4d9cb8><span class="then" data-v-7e4d9cb8>＜</span> <span class="number" data-v-7e4d9cb8>div </span><span class="function" data-v-7e4d9cb8>class </span> <span class="then" data-v-7e4d9cb8>=</span><span class="src" data-v-7e4d9cb8>&quot;showData&quot;</span><span class="then" data-v-7e4d9cb8>&gt;＜/ </span> <span class="number" data-v-7e4d9cb8>div </span><span class="then" data-v-7e4d9cb8>&gt;</span></div><div data-v-7e4d9cb8><span class="function" data-v-7e4d9cb8>function </span><span class="word" data-v-7e4d9cb8>myAxios</span> <span class="brackets" data-v-7e4d9cb8>(</span><span class="word" data-v-7e4d9cb8>config</span> <span class="brackets" data-v-7e4d9cb8>){</span></div><div class="padTwo VSL" data-v-7e4d9cb8><span class="then" data-v-7e4d9cb8>return </span> <span class="then" data-v-7e4d9cb8>new </span><span class="brackets" data-v-7e4d9cb8>Promise</span><span class="brackets" data-v-7e4d9cb8>((</span><span class="variable" data-v-7e4d9cb8>resolve,reject</span><span class="brackets" data-v-7e4d9cb8>)</span> <span class="function" data-v-7e4d9cb8>=&gt;</span><span class="brackets" data-v-7e4d9cb8>{</span><div data-v-7e4d9cb8></div><div class="padTwo VSL" data-v-7e4d9cb8><span class="comment" data-v-7e4d9cb8>//2.發起xhr,默認請求方法GET</span><div data-v-7e4d9cb8><span class="function" data-v-7e4d9cb8>const </span><span class="word" data-v-7e4d9cb8>xhr</span> <span class="then" data-v-7e4d9cb8>=</span><span class="then" data-v-7e4d9cb8>new </span><span class="word" data-v-7e4d9cb8>XMLHttpRequest</span><span class="brackets" data-v-7e4d9cb8>()</span></div><div data-v-7e4d9cb8><span class="word" data-v-7e4d9cb8>xhr</span><span class="variable" data-v-7e4d9cb8>.open</span><span class="brackets" data-v-7e4d9cb8>(</span><span class="word" data-v-7e4d9cb8>config.method </span><span class="then" data-v-7e4d9cb8>||</span> <span class="src" data-v-7e4d9cb8>&quot;GET&quot;</span><span class="then" data-v-7e4d9cb8>,</span><span class="word" data-v-7e4d9cb8>config.url</span><span class="brackets" data-v-7e4d9cb8>)</span></div><div data-v-7e4d9cb8><span class="word" data-v-7e4d9cb8>xhr</span><span class="variable" data-v-7e4d9cb8>.addEventListener</span><span class="brackets" data-v-7e4d9cb8>(</span><span class="src" data-v-7e4d9cb8>&quot;loadend&quot;</span> <span class="then" data-v-7e4d9cb8>,</span><span class="brackets" data-v-7e4d9cb8>()</span><span class="function" data-v-7e4d9cb8>=&gt;</span><span class="brackets" data-v-7e4d9cb8>{</span></div><div data-v-7e4d9cb8></div><div class="padTwo VSL" data-v-7e4d9cb8><span class="comment" data-v-7e4d9cb8>//xhr判斷響應碼,2xx成功</span><div data-v-7e4d9cb8><span class="then" data-v-7e4d9cb8>if</span> <span class="brackets" data-v-7e4d9cb8>(</span><span class="word" data-v-7e4d9cb8>xhr.status</span><span class="then" data-v-7e4d9cb8>&gt;=</span> <span class="number" data-v-7e4d9cb8>200</span><span class="then" data-v-7e4d9cb8>&amp;&amp; </span><span class="word" data-v-7e4d9cb8>xhr.status</span><span class="then" data-v-7e4d9cb8>＜</span> <span class="number" data-v-7e4d9cb8>300</span><span class="brackets" data-v-7e4d9cb8>){</span></div><div data-v-7e4d9cb8></div><div class="padTwo VSL" data-v-7e4d9cb8><span class="variable" data-v-7e4d9cb8>resolve</span><span class="brackets" data-v-7e4d9cb8>(</span><span class="brackets" data-v-7e4d9cb8>JSON</span><span class="variable" data-v-7e4d9cb8>.parse</span><span class="brackets" data-v-7e4d9cb8>(</span><span class="word" data-v-7e4d9cb8>xhr.response</span><span class="brackets" data-v-7e4d9cb8>))</span><div data-v-7e4d9cb8></div></div><div data-v-7e4d9cb8><span class="brackets" data-v-7e4d9cb8>}</span><span class="then" data-v-7e4d9cb8>else </span><span class="brackets" data-v-7e4d9cb8>{</span></div><div class="padTwo VSL" data-v-7e4d9cb8><span class="variable" data-v-7e4d9cb8>reject</span><span class="brackets" data-v-7e4d9cb8>(</span><span class="then" data-v-7e4d9cb8>new </span><span class="word" data-v-7e4d9cb8>Error</span><span class="brackets" data-v-7e4d9cb8>(</span><span class="word" data-v-7e4d9cb8>xhr.response</span><span class="brackets" data-v-7e4d9cb8>))</span><div data-v-7e4d9cb8></div></div><div data-v-7e4d9cb8><span class="brackets" data-v-7e4d9cb8>}</span></div></div><div data-v-7e4d9cb8><span class="brackets" data-v-7e4d9cb8>})</span></div><div data-v-7e4d9cb8><span class="word" data-v-7e4d9cb8>xhr</span><span class="variable" data-v-7e4d9cb8>.send</span><span class="brackets" data-v-7e4d9cb8>()</span></div></div><div data-v-7e4d9cb8><span class="brackets" data-v-7e4d9cb8>})</span></div></div><div data-v-7e4d9cb8><span class="brackets" data-v-7e4d9cb8>}</span></div><div data-v-7e4d9cb8><span class="comment" data-v-7e4d9cb8>//3.成功執行then,失敗執行catch</span></div><div data-v-7e4d9cb8><span class="word" data-v-7e4d9cb8>myAxios</span> <span class="brackets" data-v-7e4d9cb8>({</span></div><div class="padTwo VSL" data-v-7e4d9cb8><span class="word" data-v-7e4d9cb8>url:</span> <span class="src" data-v-7e4d9cb8>&quot;放網址&quot;</span><div data-v-7e4d9cb8></div></div><div data-v-7e4d9cb8><span class="brackets" data-v-7e4d9cb8>})</span><span class="variable" data-v-7e4d9cb8>.then</span><span class="brackets" data-v-7e4d9cb8>(</span> <span class="word" data-v-7e4d9cb8>result</span><span class="function" data-v-7e4d9cb8>=&gt;</span> <span class="brackets" data-v-7e4d9cb8>{</span></div><div class="padTwo VSL" data-v-7e4d9cb8><span class="word" data-v-7e4d9cb8>console</span><span class="variable" data-v-7e4d9cb8>.log</span><span class="brackets" data-v-7e4d9cb8>(</span> <span class="word" data-v-7e4d9cb8>result</span><span class="brackets" data-v-7e4d9cb8>)</span><div data-v-7e4d9cb8><span class="word" data-v-7e4d9cb8>document</span><span class="variable" data-v-7e4d9cb8>.querySelector</span><span class="brackets" data-v-7e4d9cb8>(</span><span class="src" data-v-7e4d9cb8>&quot;.showData&quot;</span><span class="brackets" data-v-7e4d9cb8>)</span><span class="variable" data-v-7e4d9cb8>.innerHTML</span><span class="then" data-v-7e4d9cb8>=</span> <span class="word" data-v-7e4d9cb8>result</span></div><div data-v-7e4d9cb8></div></div><div data-v-7e4d9cb8><span class="brackets" data-v-7e4d9cb8>})</span><span class="variable" data-v-7e4d9cb8>.catch</span><span class="brackets" data-v-7e4d9cb8>(</span><span class="variable" data-v-7e4d9cb8>error</span><span class="function" data-v-7e4d9cb8>=&gt;</span> <span class="brackets" data-v-7e4d9cb8>{</span></div><div class="padTwo VSL" data-v-7e4d9cb8><span class="word" data-v-7e4d9cb8>console</span><span class="variable" data-v-7e4d9cb8>.log</span><span class="brackets" data-v-7e4d9cb8>(</span><span class="variable" data-v-7e4d9cb8>error</span><span class="brackets" data-v-7e4d9cb8>)</span><div data-v-7e4d9cb8><span class="word" data-v-7e4d9cb8>document</span><span class="variable" data-v-7e4d9cb8>.querySelector</span><span class="brackets" data-v-7e4d9cb8>(</span><span class="src" data-v-7e4d9cb8>&quot;.showData&quot;</span><span class="brackets" data-v-7e4d9cb8>)</span><span class="variable" data-v-7e4d9cb8>.innerHTML</span><span class="then" data-v-7e4d9cb8>=</span><span class="word" data-v-7e4d9cb8>error.message</span></div><div data-v-7e4d9cb8></div></div><div data-v-7e4d9cb8><span class="brackets" data-v-7e4d9cb8>})</span></div></div><p class="fz28" data-v-7e4d9cb8>同步</p><p class="fz28" data-v-7e4d9cb8>逐行執行 , 原地等待結果後 , 才繼續向下執行</p><br data-v-7e4d9cb8><p class="fz28" data-v-7e4d9cb8>異步</p><p class="fz28" data-v-7e4d9cb8> 調用後耗時 , 不阻塞代碼執行 , 將來完成後觸發 回調函數 </p><br data-v-7e4d9cb8><p class="fz28" data-v-7e4d9cb8>JS哪些是異步?</p><p class="fz28" data-v-7e4d9cb8>setTimeout / setInterval</p><p class="fz28" data-v-7e4d9cb8>事件</p><p class="fz28" data-v-7e4d9cb8>AJAX</p><br data-v-7e4d9cb8><p class="fz28" data-v-7e4d9cb8>異步如何接收結果?</p><p class="fz28" data-v-7e4d9cb8>回調函數接收</p><br data-v-7e4d9cb8><br data-v-7e4d9cb8><p class="fz28" data-v-7e4d9cb8>回調地獄 . . . 回調函數嵌套問題</p><p class="fz28" data-v-7e4d9cb8>setTimeout(function () {</p><p class="fz28 pTwo" data-v-7e4d9cb8>console.log(111);</p><p class="fz28 pTwo" data-v-7e4d9cb8>setTimeout(function () {</p><p class="fz28 pFou" data-v-7e4d9cb8>console.log(222);</p><p class="fz28 pFou" data-v-7e4d9cb8>setTimeout(function () {</p><p class="fz28 pSix" data-v-7e4d9cb8>console.log(333);</p><p class="fz28 pFou" data-v-7e4d9cb8>}, 1000)</p><p class="fz28 pTwo" data-v-7e4d9cb8>}, 2000)</p><p class="fz28" data-v-7e4d9cb8>}, 3000)</p><br data-v-7e4d9cb8><br data-v-7e4d9cb8><p class="fz28" data-v-7e4d9cb8>Promise 鏈式調用</p><br data-v-7e4d9cb8><div data-v-7e4d9cb8><span class="pad20 bor fz30" data-v-7e4d9cb8>new Promise()</span> ➔ <span class="pad20 bor fz30" data-v-7e4d9cb8>.then( 回調函數 )</span> ➔ <span class="pad20 bor fz30" data-v-7e4d9cb8>新的 Promise 對象</span></div><br data-v-7e4d9cb8><div class="fz30" data-v-7e4d9cb8><span class="cor17" data-v-7e4d9cb8>. . . . . . . . . . . . . . . . . . . . .</span> ↘ 回調函數中 , return 的結果 ↗ </div><div class="bgcVS" data-v-7e4d9cb8><div data-v-7e4d9cb8><span class="function" data-v-7e4d9cb8>const </span> <span class="word" data-v-7e4d9cb8>p</span><span class="then" data-v-7e4d9cb8>= new </span><span class="brackets" data-v-7e4d9cb8>Promise (( </span><span class="variable" data-v-7e4d9cb8>resolve,reject</span><span class="brackets" data-v-7e4d9cb8>)</span> <span class="function" data-v-7e4d9cb8>=&gt;</span><span class="brackets" data-v-7e4d9cb8>{</span></div><div class="padTwo VSL" data-v-7e4d9cb8><span class="variable" data-v-7e4d9cb8>setTimeout</span><span class="brackets" data-v-7e4d9cb8>(()</span><span class="function" data-v-7e4d9cb8>=&gt;</span> <span class="brackets" data-v-7e4d9cb8>{</span><div class="padTwo VSL" data-v-7e4d9cb8><span class="variable" data-v-7e4d9cb8>resolve</span><span class="brackets" data-v-7e4d9cb8>(</span><span class="src" data-v-7e4d9cb8>&quot;獲取的資料&quot;</span><span class="brackets" data-v-7e4d9cb8>)</span><div data-v-7e4d9cb8></div></div><div data-v-7e4d9cb8></div><div data-v-7e4d9cb8><span class="brackets" data-v-7e4d9cb8>},</span><span class="number" data-v-7e4d9cb8>2000</span><span class="brackets" data-v-7e4d9cb8>)</span></div></div><div data-v-7e4d9cb8><span class="brackets" data-v-7e4d9cb8>})</span></div><div data-v-7e4d9cb8><span class="word" data-v-7e4d9cb8>p</span> <span class="variable" data-v-7e4d9cb8>.then</span><span class="brackets" data-v-7e4d9cb8>(</span> <span class="word" data-v-7e4d9cb8>result</span><span class="function" data-v-7e4d9cb8>=&gt;</span> <span class="brackets" data-v-7e4d9cb8>{</span></div><div class="padTwo VSL" data-v-7e4d9cb8><span class="word" data-v-7e4d9cb8>console</span><span class="variable" data-v-7e4d9cb8>.log</span><span class="brackets" data-v-7e4d9cb8>(</span> <span class="word" data-v-7e4d9cb8>result</span><span class="brackets" data-v-7e4d9cb8>) </span><span class="comment" data-v-7e4d9cb8>// 2 秒後打印 &quot;獲取的資料&quot;</span><div data-v-7e4d9cb8></div></div><div data-v-7e4d9cb8><span class="brackets" data-v-7e4d9cb8>})</span></div><div data-v-7e4d9cb8><span class="comment" data-v-7e4d9cb8>//promise調用then後在原地等結果</span></div><div data-v-7e4d9cb8><span class="comment" data-v-7e4d9cb8>//返回一個全新的promise對象</span></div><div data-v-7e4d9cb8><span class="comment" data-v-7e4d9cb8>//const p2 接收</span></div><div data-v-7e4d9cb8><span class="function" data-v-7e4d9cb8>const </span> <span class="word" data-v-7e4d9cb8>p2</span><span class="then" data-v-7e4d9cb8>=</span> <span class="word" data-v-7e4d9cb8>p</span><span class="variable" data-v-7e4d9cb8>.then</span><span class="brackets" data-v-7e4d9cb8>(</span> <span class="word" data-v-7e4d9cb8>result</span><span class="function" data-v-7e4d9cb8>=&gt;</span> <span class="brackets" data-v-7e4d9cb8>{</span></div><div class="padTwo VSL" data-v-7e4d9cb8><span class="word" data-v-7e4d9cb8>console</span><span class="variable" data-v-7e4d9cb8>.log</span><span class="brackets" data-v-7e4d9cb8>(</span> <span class="word" data-v-7e4d9cb8>result</span><span class="brackets" data-v-7e4d9cb8>) </span><span class="comment" data-v-7e4d9cb8>// 2 秒後打印 &quot;獲取的資料&quot;</span><div data-v-7e4d9cb8><span class="comment" data-v-7e4d9cb8>//創建Promise對象,模擬再發出請求</span></div><div data-v-7e4d9cb8><span class="comment" data-v-7e4d9cb8>// return promise 對象最終狀態和結果, 影響到新的 Promise 對象 // p2</span></div><div data-v-7e4d9cb8><span class="then" data-v-7e4d9cb8>return new </span><span class="brackets" data-v-7e4d9cb8>Promise (( </span><span class="variable" data-v-7e4d9cb8>resolve,reject</span><span class="brackets" data-v-7e4d9cb8>)</span><span class="function" data-v-7e4d9cb8>=&gt;</span> <span class="brackets" data-v-7e4d9cb8>{</span></div><div class="padTwo VSL" data-v-7e4d9cb8><span class="variable" data-v-7e4d9cb8>setTimeout</span><span class="brackets" data-v-7e4d9cb8>(()</span><span class="function" data-v-7e4d9cb8>=&gt;</span> <span class="brackets" data-v-7e4d9cb8>{</span><div class="padTwo VSL" data-v-7e4d9cb8><span class="variable" data-v-7e4d9cb8>resolve</span><span class="brackets" data-v-7e4d9cb8>(</span><span class="word" data-v-7e4d9cb8>result</span> <span class="then" data-v-7e4d9cb8>+</span><span class="src" data-v-7e4d9cb8>&quot;加上模擬另一次AJAX網路請求&quot;</span><span class="brackets" data-v-7e4d9cb8>)</span><div data-v-7e4d9cb8></div></div><div data-v-7e4d9cb8><span class="brackets" data-v-7e4d9cb8>},</span><span class="number" data-v-7e4d9cb8>2000</span><span class="brackets" data-v-7e4d9cb8>)</span><div data-v-7e4d9cb8></div></div><div data-v-7e4d9cb8></div></div><div data-v-7e4d9cb8><span class="brackets" data-v-7e4d9cb8>})</span></div><div data-v-7e4d9cb8></div></div><div data-v-7e4d9cb8><span class="brackets" data-v-7e4d9cb8>})</span></div><div data-v-7e4d9cb8><span class="word" data-v-7e4d9cb8>console</span><span class="variable" data-v-7e4d9cb8>.log</span><span class="brackets" data-v-7e4d9cb8>(</span> <span class="word" data-v-7e4d9cb8>p2</span><span class="then" data-v-7e4d9cb8>===</span> <span class="word" data-v-7e4d9cb8>p</span><span class="brackets" data-v-7e4d9cb8>)</span><span class="comment" data-v-7e4d9cb8>// 打印 false // 證明 p2 是全新的 promise</span></div><div data-v-7e4d9cb8><span class="comment" data-v-7e4d9cb8>// promise 物件保存在內存地址 // false 證明不在同一個地址</span></div><br data-v-7e4d9cb8><div data-v-7e4d9cb8><span class="comment" data-v-7e4d9cb8>//獲取最終結果</span></div><div data-v-7e4d9cb8><span class="word" data-v-7e4d9cb8>p2</span> <span class="variable" data-v-7e4d9cb8>.then</span><span class="brackets" data-v-7e4d9cb8>(</span> <span class="word" data-v-7e4d9cb8>result</span><span class="function" data-v-7e4d9cb8>=&gt;</span> <span class="brackets" data-v-7e4d9cb8>{</span></div><div class="padTwo VSL" data-v-7e4d9cb8><span class="word" data-v-7e4d9cb8>console</span><span class="variable" data-v-7e4d9cb8>.log</span><span class="brackets" data-v-7e4d9cb8>(</span> <span class="word" data-v-7e4d9cb8>result</span><span class="brackets" data-v-7e4d9cb8>)</span><div data-v-7e4d9cb8></div></div><div data-v-7e4d9cb8><span class="brackets" data-v-7e4d9cb8>})</span></div></div><p class="fz28" data-v-7e4d9cb8>1. 什麼是 Promise 鏈式調用?</p><p class="fz28" data-v-7e4d9cb8> 使用 then 函數返回新 Promise 物件特性 , 一直串聯下去 </p><br data-v-7e4d9cb8><p class="fz28" data-v-7e4d9cb8>2. then 回調函數中 , return 的值 會傳到 哪裡?</p><p class="fz28" data-v-7e4d9cb8>傳給 then 函數生成的 新 Promise 物件</p><br data-v-7e4d9cb8><p class="fz28" data-v-7e4d9cb8>3. Promise 鏈式調用有什麼用?</p><p class="fz28" data-v-7e4d9cb8>解決 回調嵌套 問題</p><div id="threeajax004" class="articleCardTitle cor36 fz34" data-v-7e4d9cb8> 9.4 async await </div><p class="fz28" data-v-7e4d9cb8> async await 讓我們更簡潔方式寫出基於 Promise 的異步行為 , </p><p class="fz28" data-v-7e4d9cb8>而無須鏈式調用 promise</p><br data-v-7e4d9cb8><p class="fz28 cor36" data-v-7e4d9cb8>概念:</p><p class="fz28" data-v-7e4d9cb8>在 async 函數內 , 用 await 關鍵字 取代 then 函數 ,</p><p class="fz28" data-v-7e4d9cb8><span class="spo cor36" data-v-7e4d9cb8> 等待 </span> 獲取 Promise 對象成功狀態的結果值 </p><div class="bgcVS" data-v-7e4d9cb8><div data-v-7e4d9cb8><span class="function" data-v-7e4d9cb8>async function </span><span class="word" data-v-7e4d9cb8>getData</span><span class="brackets" data-v-7e4d9cb8>(){</span></div><div class="padTwo VSL" data-v-7e4d9cb8><span class="variable" data-v-7e4d9cb8>try</span> <span class="brackets" data-v-7e4d9cb8>{</span><div data-v-7e4d9cb8></div></div><div class="padTwo VSL" data-v-7e4d9cb8><span class="comment" data-v-7e4d9cb8>//axios在原地返回一個promise對象</span><div data-v-7e4d9cb8><span class="comment" data-v-7e4d9cb8>//await後面接Promise物件&quot;成功狀態&quot;結果值</span></div><div data-v-7e4d9cb8><span class="function" data-v-7e4d9cb8>const </span><span class="word" data-v-7e4d9cb8>pObj</span> <span class="then" data-v-7e4d9cb8>=</span><span class="then" data-v-7e4d9cb8>await </span><span class="variable" data-v-7e4d9cb8>axios</span><span class="brackets" data-v-7e4d9cb8>({</span> <span class="word" data-v-7e4d9cb8>url:</span><span class="src" data-v-7e4d9cb8>&quot;https://randomuser.me/api/&quot;</span><span class="brackets" data-v-7e4d9cb8>})</span></div><div data-v-7e4d9cb8><span class="word" data-v-7e4d9cb8>console</span><span class="variable" data-v-7e4d9cb8>.log</span><span class="brackets" data-v-7e4d9cb8>(</span> <span class="word" data-v-7e4d9cb8>pObj</span><span class="brackets" data-v-7e4d9cb8>)</span></div><div data-v-7e4d9cb8><span class="function" data-v-7e4d9cb8>const </span><span class="word" data-v-7e4d9cb8>name</span> <span class="then" data-v-7e4d9cb8>=</span><span class="word" data-v-7e4d9cb8>pObj.results</span><span class="brackets" data-v-7e4d9cb8>[</span> <span class="number" data-v-7e4d9cb8>0</span><span class="brackets" data-v-7e4d9cb8>]</span> <span class="word" data-v-7e4d9cb8>.name</span></div><div data-v-7e4d9cb8></div></div><div data-v-7e4d9cb8><span class="brackets" data-v-7e4d9cb8>}</span></div><div data-v-7e4d9cb8><span class="word" data-v-7e4d9cb8>getData</span> <span class="brackets" data-v-7e4d9cb8>()</span></div></div><p class="fz28" data-v-7e4d9cb8>async await 捕獲錯誤</p><div class="bgcVS" data-v-7e4d9cb8><div data-v-7e4d9cb8><span class="function" data-v-7e4d9cb8>async function </span><span class="word" data-v-7e4d9cb8>getData</span><span class="brackets" data-v-7e4d9cb8>(){</span></div><div class="padTwo VSL" data-v-7e4d9cb8><div data-v-7e4d9cb8><span class="comment" data-v-7e4d9cb8>//try只要某行發生錯誤,以下就不執行,往catch執行</span></div><div data-v-7e4d9cb8><span class="variable" data-v-7e4d9cb8>try</span><span class="brackets" data-v-7e4d9cb8>{</span></div><div class="padTwo VSL" data-v-7e4d9cb8><span class="comment" data-v-7e4d9cb8>//axios在原地返回一個promise對象</span><div data-v-7e4d9cb8><span class="comment" data-v-7e4d9cb8>//await後面接Promise物件&quot;成功狀態&quot;結果值</span></div><div data-v-7e4d9cb8><span class="function" data-v-7e4d9cb8>const </span><span class="word" data-v-7e4d9cb8>pObj</span> <span class="then" data-v-7e4d9cb8>=</span><span class="then" data-v-7e4d9cb8>await </span><span class="variable" data-v-7e4d9cb8>axios</span><span class="brackets" data-v-7e4d9cb8>({</span><span class="word" data-v-7e4d9cb8>url:</span><span class="src" data-v-7e4d9cb8>&quot;https://randomuser.me/api/&quot;</span><span class="brackets" data-v-7e4d9cb8>})</span></div><div data-v-7e4d9cb8><span class="word" data-v-7e4d9cb8>console</span><span class="variable" data-v-7e4d9cb8>.log</span><span class="brackets" data-v-7e4d9cb8>(</span> <span class="word" data-v-7e4d9cb8>pObj</span><span class="brackets" data-v-7e4d9cb8>)</span></div><div data-v-7e4d9cb8><span class="function" data-v-7e4d9cb8>const </span><span class="word" data-v-7e4d9cb8>name</span> <span class="then" data-v-7e4d9cb8>=</span><span class="word" data-v-7e4d9cb8>pObj.results</span><span class="brackets" data-v-7e4d9cb8>[</span> <span class="number" data-v-7e4d9cb8>0</span><span class="brackets" data-v-7e4d9cb8>]</span><span class="word" data-v-7e4d9cb8>.name</span></div><div data-v-7e4d9cb8></div></div><div data-v-7e4d9cb8><span class="brackets" data-v-7e4d9cb8>}</span><span class="variable" data-v-7e4d9cb8>catch</span><span class="brackets" data-v-7e4d9cb8>(</span><span class="variable" data-v-7e4d9cb8>error</span><span class="brackets" data-v-7e4d9cb8>){</span></div><div class="padTwo VSL" data-v-7e4d9cb8><span class="word" data-v-7e4d9cb8>console</span><span class="variable" data-v-7e4d9cb8>.dir</span><span class="brackets" data-v-7e4d9cb8>(</span><span class="variable" data-v-7e4d9cb8>error</span><span class="brackets" data-v-7e4d9cb8>)</span><div data-v-7e4d9cb8></div></div><div data-v-7e4d9cb8><span class="brackets" data-v-7e4d9cb8>}</span></div></div><div data-v-7e4d9cb8><span class="brackets" data-v-7e4d9cb8>}</span></div><div data-v-7e4d9cb8><span class="word" data-v-7e4d9cb8>getData</span> <span class="brackets" data-v-7e4d9cb8>()</span></div></div><div id="threeajax005" class="articleCardTitle cor36 fz34" data-v-7e4d9cb8> 9.5 事件循環 EventLoop </div><p class="fz28" data-v-7e4d9cb8> JS 是單線呈 (逐行執行代碼) , 為了 耗時代碼 不阻塞其他代碼 , 設計了事件循環 </p><br data-v-7e4d9cb8><p class="fz28" data-v-7e4d9cb8> 事件循環負責執行代碼 、 收集 、 處理事件 、 執行隊列中子任務 </p><div class="dis" data-v-7e4d9cb8><div class="bgcVS w100" data-v-7e4d9cb8><div data-v-7e4d9cb8><span class="word" data-v-7e4d9cb8>console</span><span class="variable" data-v-7e4d9cb8>.log</span><span class="brackets" data-v-7e4d9cb8>(</span> <span class="number" data-v-7e4d9cb8>1</span><span class="brackets" data-v-7e4d9cb8>)</span></div><br data-v-7e4d9cb8><div data-v-7e4d9cb8><span class="variable" data-v-7e4d9cb8>setTimeout</span><span class="brackets" data-v-7e4d9cb8>(()</span><span class="function" data-v-7e4d9cb8>=&gt;</span> <span class="brackets" data-v-7e4d9cb8>{</span></div><div class="padTwo VSL" data-v-7e4d9cb8><span class="word" data-v-7e4d9cb8>console</span><span class="variable" data-v-7e4d9cb8>.log</span><span class="brackets" data-v-7e4d9cb8>(</span> <span class="number" data-v-7e4d9cb8>2</span><span class="brackets" data-v-7e4d9cb8>)</span><div data-v-7e4d9cb8></div></div><div data-v-7e4d9cb8><span class="brackets" data-v-7e4d9cb8>},</span> <span class="number" data-v-7e4d9cb8>0</span><span class="brackets" data-v-7e4d9cb8>)</span></div><br data-v-7e4d9cb8><div data-v-7e4d9cb8><span class="word" data-v-7e4d9cb8>console</span><span class="variable" data-v-7e4d9cb8>.log</span><span class="brackets" data-v-7e4d9cb8>(</span> <span class="number" data-v-7e4d9cb8>3</span><span class="brackets" data-v-7e4d9cb8>)</span></div><br data-v-7e4d9cb8><div data-v-7e4d9cb8><span class="variable" data-v-7e4d9cb8>setTimeout</span><span class="brackets" data-v-7e4d9cb8>(()</span><span class="function" data-v-7e4d9cb8>=&gt;</span> <span class="brackets" data-v-7e4d9cb8>{</span></div><div class="padTwo VSL" data-v-7e4d9cb8><span class="word" data-v-7e4d9cb8>console</span><span class="variable" data-v-7e4d9cb8>.log</span><span class="brackets" data-v-7e4d9cb8>(</span> <span class="number" data-v-7e4d9cb8>4</span><span class="brackets" data-v-7e4d9cb8>)</span><div data-v-7e4d9cb8></div></div><div data-v-7e4d9cb8><span class="brackets" data-v-7e4d9cb8>},</span><span class="number" data-v-7e4d9cb8>2000</span><span class="brackets" data-v-7e4d9cb8>)</span></div><br data-v-7e4d9cb8><div data-v-7e4d9cb8><span class="word" data-v-7e4d9cb8>console</span><span class="variable" data-v-7e4d9cb8>.log</span><span class="brackets" data-v-7e4d9cb8>(</span> <span class="number" data-v-7e4d9cb8>5</span><span class="brackets" data-v-7e4d9cb8>)</span></div><br data-v-7e4d9cb8><p data-v-7e4d9cb8>控制台打印: 1 3 5 2 4</p></div><span class="cor17" data-v-7e4d9cb8>____</span><div class="bgcVS cor36" data-v-7e4d9cb8><div data-v-7e4d9cb8>調用棧</div></div><span class="cor17" data-v-7e4d9cb8>____</span><div class="w100" data-v-7e4d9cb8><div class="bgcVS" data-v-7e4d9cb8><p class="cor36" data-v-7e4d9cb8>宿主環境(瀏覽器)</p><br data-v-7e4d9cb8><p data-v-7e4d9cb8>放耗時異步代碼</p><div data-v-7e4d9cb8><span class="variable" data-v-7e4d9cb8>setTimeout</span><span class="brackets" data-v-7e4d9cb8>(()</span><span class="function" data-v-7e4d9cb8>=&gt;</span><span class="brackets" data-v-7e4d9cb8>{</span></div><div class="padTwo VSL" data-v-7e4d9cb8><span class="word" data-v-7e4d9cb8>console</span><span class="variable" data-v-7e4d9cb8>.log</span><span class="brackets" data-v-7e4d9cb8>(</span><span class="number" data-v-7e4d9cb8>2</span><span class="brackets" data-v-7e4d9cb8>)</span><div data-v-7e4d9cb8></div></div><div data-v-7e4d9cb8><span class="brackets" data-v-7e4d9cb8>},</span><span class="number" data-v-7e4d9cb8>0</span><span class="brackets" data-v-7e4d9cb8>)</span></div><div data-v-7e4d9cb8><span class="variable" data-v-7e4d9cb8>setTimeout</span><span class="brackets" data-v-7e4d9cb8>(()</span><span class="function" data-v-7e4d9cb8>=&gt;</span><span class="brackets" data-v-7e4d9cb8>{</span></div><div class="padTwo VSL" data-v-7e4d9cb8><span class="word" data-v-7e4d9cb8>console</span><span class="variable" data-v-7e4d9cb8>.log</span><span class="brackets" data-v-7e4d9cb8>(</span><span class="number" data-v-7e4d9cb8>4</span><span class="brackets" data-v-7e4d9cb8>)</span><div data-v-7e4d9cb8></div></div><div data-v-7e4d9cb8><span class="brackets" data-v-7e4d9cb8>},</span><span class="number" data-v-7e4d9cb8>2000</span><span class="brackets" data-v-7e4d9cb8>)</span></div></div><div class="bgcVS" data-v-7e4d9cb8><p class="cor36" data-v-7e4d9cb8>任務隊列</p><br data-v-7e4d9cb8><p data-v-7e4d9cb8>回調放這邊排隊</p><br data-v-7e4d9cb8><p data-v-7e4d9cb8>調用棧空閒時,</p><p data-v-7e4d9cb8>循環查找隊列執行</p></div></div></div><p class="fz28" data-v-7e4d9cb8>1. 什麼是 事件循環?</p><p class="fz28" data-v-7e4d9cb8> 執行代碼 和 收集異步任務 , 在調用棧 空閒時 , 反覆調用 任務隊列裡 回調函數 執行機制 </p><br data-v-7e4d9cb8><p class="fz28" data-v-7e4d9cb8>2. 為什麼要事件循環?</p><p class="fz28" data-v-7e4d9cb8>JS 單線呈 , 為了 不阻塞 JS 引擎</p><br data-v-7e4d9cb8><p class="fz28" data-v-7e4d9cb8>3. JS 代碼怎麼執行?</p><p class="fz28" data-v-7e4d9cb8>執行 同步代碼 , 遇到異步 交給 宿主瀏覽器環境執行</p><p class="fz28" data-v-7e4d9cb8>異步有結果後 , 把回調函數 放入 任務隊列排隊</p><p class="fz28" data-v-7e4d9cb8>當 調用棧 空閒時 , 反覆調用 任務隊列裡 的回調函數</p><div id="threeajax006" class="articleCardTitle cor36 fz34" data-v-7e4d9cb8> 9.6 宏任務 微任務 </div><p class="fz28" data-v-7e4d9cb8>ES6 引入 Promise物件 , 讓 JS 引擎可發起異步任務</p><br data-v-7e4d9cb8><p class="fz28" data-v-7e4d9cb8>宏任務: 由 瀏覽器環境執行的 異步代碼</p><br data-v-7e4d9cb8><p class="fz28" data-v-7e4d9cb8>微任務: 由 JS 引擎環境執行的 異步代碼</p><br data-v-7e4d9cb8><br data-v-7e4d9cb8><br data-v-7e4d9cb8><table data-v-7e4d9cb8><tr data-v-7e4d9cb8><th data-v-7e4d9cb8><div class="pad20 fz36" data-v-7e4d9cb8>宏任務</div></th><th data-v-7e4d9cb8><div class="pad20 fz36" data-v-7e4d9cb8>執行環境</div></th><th data-v-7e4d9cb8><div class="pad20 fz36" data-v-7e4d9cb8>微任務</div></th><th data-v-7e4d9cb8><div class="pad20 fz36" data-v-7e4d9cb8>執行環境</div></th></tr><tr data-v-7e4d9cb8><td data-v-7e4d9cb8><div class="pad20 fz30" data-v-7e4d9cb8>JS腳本 (script)</div></td><td data-v-7e4d9cb8><div class="pad20 fz30" data-v-7e4d9cb8>瀏覽器</div></td><td data-v-7e4d9cb8><div class="pad20 fz30" data-v-7e4d9cb8> Promise物件<span class="cor36" data-v-7e4d9cb8>.then</span></div></td><td data-v-7e4d9cb8><div class="pad20 fz30" data-v-7e4d9cb8>JS引擎</div></td></tr><tr data-v-7e4d9cb8><td data-v-7e4d9cb8><div class="padL20 fz30" data-v-7e4d9cb8>setTimeout</div><div class="padL20 fz30" data-v-7e4d9cb8>setInterval</div></td><td data-v-7e4d9cb8><div class="pad20 fz30" data-v-7e4d9cb8>瀏覽器</div></td><td data-v-7e4d9cb8><div class="pad20" data-v-7e4d9cb8></div></td><td data-v-7e4d9cb8><div class="pad20" data-v-7e4d9cb8></div></td></tr><tr data-v-7e4d9cb8><td data-v-7e4d9cb8><div class="pad20 fz30" data-v-7e4d9cb8>AJAX請求完成事件</div></td><td data-v-7e4d9cb8><div class="pad20 fz30" data-v-7e4d9cb8>瀏覽器</div></td><td data-v-7e4d9cb8><div class="pad20" data-v-7e4d9cb8></div></td><td data-v-7e4d9cb8><div class="pad20" data-v-7e4d9cb8></div></td></tr><tr data-v-7e4d9cb8><td data-v-7e4d9cb8><div class="pad20 fz30" data-v-7e4d9cb8>用戶交互事件</div></td><td data-v-7e4d9cb8><div class="pad20 fz30" data-v-7e4d9cb8>瀏覽器</div></td><td data-v-7e4d9cb8><div class="pad20" data-v-7e4d9cb8></div></td><td data-v-7e4d9cb8><div class="pad20" data-v-7e4d9cb8></div></td></tr></table><div class="dis" data-v-7e4d9cb8><div class="bgcVS w100" data-v-7e4d9cb8><div data-v-7e4d9cb8><span class="then" data-v-7e4d9cb8>＜</span><span class="number" data-v-7e4d9cb8>script </span> <span class="then" data-v-7e4d9cb8>&gt;</span></div><div data-v-7e4d9cb8><span class="word" data-v-7e4d9cb8>console</span><span class="variable" data-v-7e4d9cb8>.log</span><span class="brackets" data-v-7e4d9cb8>(</span> <span class="number" data-v-7e4d9cb8>1</span><span class="brackets" data-v-7e4d9cb8>)</span></div><br data-v-7e4d9cb8><div data-v-7e4d9cb8><span class="variable" data-v-7e4d9cb8>setTimeout</span><span class="brackets" data-v-7e4d9cb8>(()</span><span class="function" data-v-7e4d9cb8>=&gt;</span> <span class="brackets" data-v-7e4d9cb8>{</span></div><div class="padTwo VSL" data-v-7e4d9cb8><span class="word" data-v-7e4d9cb8>console</span><span class="variable" data-v-7e4d9cb8>.log</span><span class="brackets" data-v-7e4d9cb8>(</span> <span class="number" data-v-7e4d9cb8>2</span><span class="brackets" data-v-7e4d9cb8>)</span><div data-v-7e4d9cb8></div></div><div data-v-7e4d9cb8><span class="brackets" data-v-7e4d9cb8>},</span> <span class="number" data-v-7e4d9cb8>0</span><span class="brackets" data-v-7e4d9cb8>)</span></div><br data-v-7e4d9cb8><div data-v-7e4d9cb8><span class="function" data-v-7e4d9cb8>const </span><span class="word" data-v-7e4d9cb8>p</span> <span class="then" data-v-7e4d9cb8>= new </span><span class="brackets" data-v-7e4d9cb8>Promise</span><span class="brackets" data-v-7e4d9cb8>((</span><span class="variable" data-v-7e4d9cb8>resolve,reject</span><span class="brackets" data-v-7e4d9cb8>)</span><span class="function" data-v-7e4d9cb8>=&gt;</span> <span class="brackets" data-v-7e4d9cb8>{</span></div><div class="padTwo VSL" data-v-7e4d9cb8><span class="word" data-v-7e4d9cb8>console</span><span class="variable" data-v-7e4d9cb8>.log</span><span class="brackets" data-v-7e4d9cb8>(</span> <span class="number" data-v-7e4d9cb8>2</span><span class="brackets" data-v-7e4d9cb8>)</span><div data-v-7e4d9cb8><span class="variable" data-v-7e4d9cb8>resolve</span><span class="brackets" data-v-7e4d9cb8>(</span> <span class="number" data-v-7e4d9cb8>4</span><span class="brackets" data-v-7e4d9cb8>)</span></div><div data-v-7e4d9cb8></div></div><div data-v-7e4d9cb8><span class="brackets" data-v-7e4d9cb8>})</span></div><br data-v-7e4d9cb8><div data-v-7e4d9cb8><span class="word" data-v-7e4d9cb8>p</span> <span class="variable" data-v-7e4d9cb8>.then</span><span class="brackets" data-v-7e4d9cb8>(</span><span class="word" data-v-7e4d9cb8>result</span><span class="function" data-v-7e4d9cb8>=&gt;</span> <span class="brackets" data-v-7e4d9cb8>{</span></div><div class="padTwo VSL" data-v-7e4d9cb8><span class="word" data-v-7e4d9cb8>console</span><span class="variable" data-v-7e4d9cb8>.log</span><span class="brackets" data-v-7e4d9cb8>(</span><span class="word" data-v-7e4d9cb8>result</span> <span class="brackets" data-v-7e4d9cb8>)</span><div data-v-7e4d9cb8></div></div><div data-v-7e4d9cb8><span class="brackets" data-v-7e4d9cb8>})</span></div><br data-v-7e4d9cb8><div data-v-7e4d9cb8><span class="word" data-v-7e4d9cb8>console</span><span class="variable" data-v-7e4d9cb8>.log</span><span class="brackets" data-v-7e4d9cb8>(</span> <span class="number" data-v-7e4d9cb8>5</span><span class="brackets" data-v-7e4d9cb8>)</span></div><div data-v-7e4d9cb8><span class="then" data-v-7e4d9cb8>＜/</span><span class="number" data-v-7e4d9cb8>script </span> <span class="then" data-v-7e4d9cb8>&gt;</span></div><br data-v-7e4d9cb8><p data-v-7e4d9cb8>控制台打印: 1 3 5</p><br data-v-7e4d9cb8><p data-v-7e4d9cb8>現在調用棧空閒</p><p data-v-7e4d9cb8>宏&amp;微 執行哪個?</p><p class="cor36" data-v-7e4d9cb8>優先 微</p><p data-v-7e4d9cb8>直到 微隊列 清空</p><p data-v-7e4d9cb8>再執行 宏</p></div><span class="cor29" data-v-7e4d9cb8>_</span><div class="bgcVS cor36" data-v-7e4d9cb8><div data-v-7e4d9cb8>調用棧</div></div><span class="cor29" data-v-7e4d9cb8>_</span><div class="w100" data-v-7e4d9cb8><div class="bgcVS" data-v-7e4d9cb8><div class="cor36" data-v-7e4d9cb8>宿主環境(瀏覽器)</div><div data-v-7e4d9cb8><span class="variable" data-v-7e4d9cb8>setTimeout</span><span class="brackets" data-v-7e4d9cb8>(()</span><span class="function" data-v-7e4d9cb8>=&gt;</span><span class="brackets" data-v-7e4d9cb8>{</span></div><div class="padTwo VSL" data-v-7e4d9cb8><span class="word" data-v-7e4d9cb8>console</span><span class="variable" data-v-7e4d9cb8>.log</span><span class="brackets" data-v-7e4d9cb8>(</span> <span class="number" data-v-7e4d9cb8>2</span><span class="brackets" data-v-7e4d9cb8>)</span><div data-v-7e4d9cb8></div></div><div data-v-7e4d9cb8><span class="brackets" data-v-7e4d9cb8>},</span> <span class="number" data-v-7e4d9cb8>0</span><span class="brackets" data-v-7e4d9cb8>)</span></div></div><div class="bgcVS" data-v-7e4d9cb8><div class="cor36" data-v-7e4d9cb8><span class="spoGra" data-v-7e4d9cb8> 宏任務隊列 </span></div><div data-v-7e4d9cb8><span class="brackets" data-v-7e4d9cb8>()</span><span class="function" data-v-7e4d9cb8>=&gt;</span><span class="brackets" data-v-7e4d9cb8>{</span></div><div class="padTwo VSL" data-v-7e4d9cb8><span class="word" data-v-7e4d9cb8>console</span><span class="variable" data-v-7e4d9cb8>.log</span><span class="brackets" data-v-7e4d9cb8>(</span> <span class="number" data-v-7e4d9cb8>2</span><span class="brackets" data-v-7e4d9cb8>)</span><div data-v-7e4d9cb8></div></div><div data-v-7e4d9cb8><span class="brackets" data-v-7e4d9cb8>}</span></div></div><div class="bgcVS" data-v-7e4d9cb8><div class="cor36" data-v-7e4d9cb8><span class="spoGra" data-v-7e4d9cb8> 微任務隊列 </span></div><div data-v-7e4d9cb8><span class="word" data-v-7e4d9cb8>result</span><span class="function" data-v-7e4d9cb8>=&gt;</span><span class="brackets" data-v-7e4d9cb8>{</span></div><div class="padTwo VSL" data-v-7e4d9cb8><span class="word" data-v-7e4d9cb8>console</span><span class="variable" data-v-7e4d9cb8>.log</span><span class="brackets" data-v-7e4d9cb8>(</span><span class="word" data-v-7e4d9cb8>result</span><span class="brackets" data-v-7e4d9cb8>)</span><div data-v-7e4d9cb8></div></div><div data-v-7e4d9cb8><span class="brackets" data-v-7e4d9cb8>}</span></div></div></div></div><p class="fz28" data-v-7e4d9cb8>1. 什麼是宏任務?</p><p class="fz28" data-v-7e4d9cb8>瀏覽器執行的 異步代碼</p><br data-v-7e4d9cb8><p class="fz28" data-v-7e4d9cb8>JS腳本 (script)</p><p class="fz28" data-v-7e4d9cb8>setTimeout</p><p class="fz28" data-v-7e4d9cb8>AJAX請求完成事件</p><p class="fz28" data-v-7e4d9cb8>用戶交互事件</p><br data-v-7e4d9cb8><p class="fz28" data-v-7e4d9cb8>2. 什麼是微任務?</p><p class="fz28" data-v-7e4d9cb8>JS 引擎執行的 異步代碼</p><br data-v-7e4d9cb8><p class="fz28" data-v-7e4d9cb8>Promise物件.then() 的回調</p><br data-v-7e4d9cb8><p class="fz28" data-v-7e4d9cb8>3. JS 代碼如何執行?</p><p class="fz28" data-v-7e4d9cb8>執行第一個 script 腳本事件 宏任務 , 裡面 同步代碼</p><br data-v-7e4d9cb8><p class="fz28" data-v-7e4d9cb8> 遇到 宏任務 / 微任務 交給 宿主環境 , 有 結果 回調函數 進入 對應 隊列 </p><br data-v-7e4d9cb8><p class="fz28" data-v-7e4d9cb8> 當執行棧 空閒時 , 清空 微任務隊列 , 再執行 下一個 宏任務 </p><div class="bgcVS" data-v-7e4d9cb8><div data-v-7e4d9cb8><span class="word" data-v-7e4d9cb8>console</span><span class="variable" data-v-7e4d9cb8>.log</span><span class="brackets" data-v-7e4d9cb8>(</span> <span class="number" data-v-7e4d9cb8>1</span><span class="brackets" data-v-7e4d9cb8>)</span></div><br data-v-7e4d9cb8><div data-v-7e4d9cb8><span class="variable" data-v-7e4d9cb8>setTimeout</span><span class="brackets" data-v-7e4d9cb8>(()</span><span class="function" data-v-7e4d9cb8>=&gt;</span> <span class="brackets" data-v-7e4d9cb8>{</span></div><div class="padTwo VSL" data-v-7e4d9cb8><span class="word" data-v-7e4d9cb8>console</span><span class="variable" data-v-7e4d9cb8>.log</span><span class="brackets" data-v-7e4d9cb8>(</span> <span class="number" data-v-7e4d9cb8>2</span><span class="brackets" data-v-7e4d9cb8>)</span><div data-v-7e4d9cb8><span class="function" data-v-7e4d9cb8>const </span><span class="number" data-v-7e4d9cb8>p </span> <span class="then" data-v-7e4d9cb8>= new </span><span class="brackets" data-v-7e4d9cb8>Promise</span><span class="brackets" data-v-7e4d9cb8>(</span><span class="variable" data-v-7e4d9cb8>resolve</span><span class="function" data-v-7e4d9cb8>=&gt;</span><span class="variable" data-v-7e4d9cb8>resolve</span><span class="brackets" data-v-7e4d9cb8>(</span> <span class="number" data-v-7e4d9cb8>3</span><span class="brackets" data-v-7e4d9cb8>))</span></div><div data-v-7e4d9cb8><span class="number" data-v-7e4d9cb8>p </span><span class="variable" data-v-7e4d9cb8>.then</span><span class="brackets" data-v-7e4d9cb8>(</span><span class="word" data-v-7e4d9cb8>result</span><span class="function" data-v-7e4d9cb8>=&gt;</span><span class="word" data-v-7e4d9cb8>console</span><span class="variable" data-v-7e4d9cb8>.log</span><span class="brackets" data-v-7e4d9cb8>(</span><span class="word" data-v-7e4d9cb8>result</span><span class="brackets" data-v-7e4d9cb8>))</span></div><div data-v-7e4d9cb8></div></div><div data-v-7e4d9cb8><span class="brackets" data-v-7e4d9cb8>},</span> <span class="number" data-v-7e4d9cb8>0</span><span class="brackets" data-v-7e4d9cb8>)</span></div><br data-v-7e4d9cb8><div data-v-7e4d9cb8><span class="function" data-v-7e4d9cb8>const </span><span class="number" data-v-7e4d9cb8>p </span> <span class="then" data-v-7e4d9cb8>= new </span><span class="brackets" data-v-7e4d9cb8>Promise</span><span class="brackets" data-v-7e4d9cb8>(</span><span class="variable" data-v-7e4d9cb8>resolve</span><span class="function" data-v-7e4d9cb8>=&gt;</span> <span class="brackets" data-v-7e4d9cb8>{</span></div><div class="padTwo VSL" data-v-7e4d9cb8><span class="variable" data-v-7e4d9cb8>setTimeout</span><span class="brackets" data-v-7e4d9cb8>(()</span><span class="function" data-v-7e4d9cb8>=&gt;</span> <span class="brackets" data-v-7e4d9cb8>{</span><div data-v-7e4d9cb8></div><div class="padTwo VSL" data-v-7e4d9cb8><span class="word" data-v-7e4d9cb8>console</span><span class="variable" data-v-7e4d9cb8>.log</span><span class="brackets" data-v-7e4d9cb8>(</span> <span class="number" data-v-7e4d9cb8>4</span><span class="brackets" data-v-7e4d9cb8>)</span><div data-v-7e4d9cb8></div></div><div data-v-7e4d9cb8><span class="brackets" data-v-7e4d9cb8>},</span> <span class="number" data-v-7e4d9cb8>0</span><span class="brackets" data-v-7e4d9cb8>)</span></div><div data-v-7e4d9cb8><span class="variable" data-v-7e4d9cb8>resolve</span><span class="brackets" data-v-7e4d9cb8>(</span> <span class="number" data-v-7e4d9cb8>5</span><span class="brackets" data-v-7e4d9cb8>)</span></div></div><div data-v-7e4d9cb8><span class="brackets" data-v-7e4d9cb8>})</span></div><br data-v-7e4d9cb8><div data-v-7e4d9cb8><span class="number" data-v-7e4d9cb8>p </span><span class="variable" data-v-7e4d9cb8>.then</span><span class="brackets" data-v-7e4d9cb8>(</span> <span class="word" data-v-7e4d9cb8>result</span><span class="function" data-v-7e4d9cb8>=&gt;</span><span class="word" data-v-7e4d9cb8>console</span><span class="variable" data-v-7e4d9cb8>.log</span><span class="brackets" data-v-7e4d9cb8>(</span> <span class="word" data-v-7e4d9cb8>result</span><span class="brackets" data-v-7e4d9cb8>))</span></div><br data-v-7e4d9cb8><div data-v-7e4d9cb8><span class="function" data-v-7e4d9cb8>const </span> <span class="word" data-v-7e4d9cb8>p2</span><span class="then" data-v-7e4d9cb8>= new </span><span class="brackets" data-v-7e4d9cb8>Promise</span><span class="brackets" data-v-7e4d9cb8>(</span><span class="variable" data-v-7e4d9cb8>resolve</span><span class="function" data-v-7e4d9cb8>=&gt;</span><span class="variable" data-v-7e4d9cb8>resolve</span><span class="brackets" data-v-7e4d9cb8>(</span> <span class="number" data-v-7e4d9cb8>6</span><span class="brackets" data-v-7e4d9cb8>))</span></div><br data-v-7e4d9cb8><div data-v-7e4d9cb8><span class="word" data-v-7e4d9cb8>p2</span> <span class="variable" data-v-7e4d9cb8>.then</span><span class="brackets" data-v-7e4d9cb8>(</span> <span class="word" data-v-7e4d9cb8>result</span><span class="function" data-v-7e4d9cb8>=&gt;</span><span class="word" data-v-7e4d9cb8>console</span><span class="variable" data-v-7e4d9cb8>.log</span><span class="brackets" data-v-7e4d9cb8>(</span> <span class="word" data-v-7e4d9cb8>result</span><span class="brackets" data-v-7e4d9cb8>))</span></div><br data-v-7e4d9cb8><div data-v-7e4d9cb8><span class="word" data-v-7e4d9cb8>console</span><span class="variable" data-v-7e4d9cb8>.log</span><span class="brackets" data-v-7e4d9cb8>(</span> <span class="number" data-v-7e4d9cb8>7</span><span class="brackets" data-v-7e4d9cb8>)</span></div></div><p class="fz28" data-v-7e4d9cb8> setTimeout ... 宏任務 ... 交給瀏覽器...... 發現 時間到 0...推入宏任務列隊 </p><br data-v-7e4d9cb8><p class="fz28" data-v-7e4d9cb8> new Promise ... 同步 ... 放調用棧 ... resolve立刻執行 ... setTimout放宿主環境 ... 發現倒數0,放進宏任務隊列 </p><br data-v-7e4d9cb8><p class="fz28" data-v-7e4d9cb8> p 調用的 then 方法 同步 ... then 裡面異步 ... 只有當 promise 狀態改變後 , 才把 then 裡面回調推入到 微任務隊列 </p><br data-v-7e4d9cb8><div data-v-7e4d9cb8><img class="w100" src="'+Jo+'" data-v-7e4d9cb8></div><br data-v-7e4d9cb8><p class="fz28" data-v-7e4d9cb8>然後 清空微任務隊列</p><p class="fz28" data-v-7e4d9cb8>再執行 宏任務 1.</p><p class="fz28" data-v-7e4d9cb8>resolve 改變 promise 狀態</p><p class="fz28" data-v-7e4d9cb8>.then(裡面的回調推入微任務)</p><br data-v-7e4d9cb8><p class="fz28" data-v-7e4d9cb8>!! 先執行微任務 !!</p><br data-v-7e4d9cb8><br data-v-7e4d9cb8><br data-v-7e4d9cb8><p class="fz36 cor36" data-v-7e4d9cb8>Promise.all</p><p class="fz28" data-v-7e4d9cb8> 合併多個 Promise 對象 , 等待所有 <span class="spo cor36" data-v-7e4d9cb8>同時成功完成</span> or 某一個失敗 , 後續處理 </p><br data-v-7e4d9cb8><div class="dis" data-v-7e4d9cb8><div class="bor pad20" data-v-7e4d9cb8><br data-v-7e4d9cb8><br data-v-7e4d9cb8><div data-v-7e4d9cb8><span class="bor pad20 fz28" data-v-7e4d9cb8>new Peomise()</span></div><br data-v-7e4d9cb8><br data-v-7e4d9cb8><div data-v-7e4d9cb8><span class="bor pad20 fz28" data-v-7e4d9cb8>new Peomise()</span></div><br data-v-7e4d9cb8><br data-v-7e4d9cb8><div data-v-7e4d9cb8><span class="bor pad20 fz28" data-v-7e4d9cb8>new Peomise()</span></div><br data-v-7e4d9cb8><br data-v-7e4d9cb8></div><div class="pad20" data-v-7e4d9cb8><div data-v-7e4d9cb8><br data-v-7e4d9cb8><br data-v-7e4d9cb8><span class="fz28" data-v-7e4d9cb8>..&gt;</span></div></div><div class="pad20" data-v-7e4d9cb8><div class="bor disInl pad20" data-v-7e4d9cb8><span class="fz28" data-v-7e4d9cb8>新的</span><br data-v-7e4d9cb8><span class="fz28" data-v-7e4d9cb8>Promise</span><br data-v-7e4d9cb8><span class="fz28" data-v-7e4d9cb8>對象</span></div></div><div class="pad20" data-v-7e4d9cb8><div data-v-7e4d9cb8><span class="fz28" data-v-7e4d9cb8>所有 ..&gt;</span></div><div data-v-7e4d9cb8><span class="fz28" data-v-7e4d9cb8>Promise</span></div><div data-v-7e4d9cb8><span class="fz28" data-v-7e4d9cb8>都成功</span></div><br data-v-7e4d9cb8><div data-v-7e4d9cb8><span class="fz28" data-v-7e4d9cb8>任一個 ..&gt;</span></div><div data-v-7e4d9cb8><span class="fz28" data-v-7e4d9cb8>Promise</span></div><div data-v-7e4d9cb8><span class="fz28" data-v-7e4d9cb8>失敗</span></div></div><div class="pad20" data-v-7e4d9cb8><div data-v-7e4d9cb8><span class="bor pad20 fz28" data-v-7e4d9cb8>.then(回調函數)</span></div><br data-v-7e4d9cb8><br data-v-7e4d9cb8><br data-v-7e4d9cb8><br data-v-7e4d9cb8><br data-v-7e4d9cb8><br data-v-7e4d9cb8><div data-v-7e4d9cb8><span class="bor pad20 fz28" data-v-7e4d9cb8>.catch(回調函數)</span></div><br data-v-7e4d9cb8></div></div><br data-v-7e4d9cb8><div class="bgcVS" data-v-7e4d9cb8><div data-v-7e4d9cb8><span class="function" data-v-7e4d9cb8>const </span><span class="number" data-v-7e4d9cb8>p </span> <span class="then" data-v-7e4d9cb8>=</span><span class="brackets" data-v-7e4d9cb8>Promise</span><span class="variable" data-v-7e4d9cb8>.all</span><span class="brackets" data-v-7e4d9cb8>([</span><span class="word" data-v-7e4d9cb8>Promise對象,Promise對象,...</span><span class="brackets" data-v-7e4d9cb8>])</span></div><div data-v-7e4d9cb8><span class="number" data-v-7e4d9cb8>p </span><span class="variable" data-v-7e4d9cb8>.then</span><span class="brackets" data-v-7e4d9cb8>(</span> <span class="word" data-v-7e4d9cb8>result</span><span class="function" data-v-7e4d9cb8>=&gt;</span> <span class="brackets" data-v-7e4d9cb8>{</span></div><div class="padTwo VSL" data-v-7e4d9cb8><span class="comment" data-v-7e4d9cb8>//result結果:[Promise對象成功結果,Promise對象成功結果,...]</span><div data-v-7e4d9cb8></div></div><div data-v-7e4d9cb8><span class="brackets" data-v-7e4d9cb8>})</span><span class="variable" data-v-7e4d9cb8>.catch</span><span class="brackets" data-v-7e4d9cb8>(</span><span class="variable" data-v-7e4d9cb8>error</span><span class="function" data-v-7e4d9cb8>=&gt;</span> <span class="brackets" data-v-7e4d9cb8>{</span></div><div class="padTwo VSL" data-v-7e4d9cb8><span class="comment" data-v-7e4d9cb8>//第一個失敗的Promise對象,拋出的異常</span><div data-v-7e4d9cb8></div></div><div data-v-7e4d9cb8><span class="brackets" data-v-7e4d9cb8>})</span></div></div><div class="bgcVS" data-v-7e4d9cb8><div data-v-7e4d9cb8><span class="then" data-v-7e4d9cb8>＜</span> <span class="number" data-v-7e4d9cb8>ul </span><span class="function" data-v-7e4d9cb8>class </span> <span class="then" data-v-7e4d9cb8>=</span><span class="src" data-v-7e4d9cb8>&quot;my-ul&quot;</span> <span class="word" data-v-7e4d9cb8>&gt;＜</span><span class="number" data-v-7e4d9cb8>ul</span> <span class="then" data-v-7e4d9cb8>&gt;</span></div><br data-v-7e4d9cb8><div data-v-7e4d9cb8><span class="function" data-v-7e4d9cb8>const </span><span class="brackets" data-v-7e4d9cb8>bjPromise</span><span class="then" data-v-7e4d9cb8>=</span><span class="variable" data-v-7e4d9cb8>axios</span><span class="brackets" data-v-7e4d9cb8>({</span> <span class="word" data-v-7e4d9cb8>url:</span><span class="src" data-v-7e4d9cb8>&quot;api/weather&quot;</span><span class="word" data-v-7e4d9cb8>,params:</span><span class="brackets" data-v-7e4d9cb8>{</span> <span class="word" data-v-7e4d9cb8>city:</span><span class="src" data-v-7e4d9cb8>&quot;110100&quot;</span><span class="brackets" data-v-7e4d9cb8>}})</span></div><div data-v-7e4d9cb8><span class="function" data-v-7e4d9cb8>const </span><span class="brackets" data-v-7e4d9cb8>shPromise</span><span class="then" data-v-7e4d9cb8>=</span><span class="variable" data-v-7e4d9cb8>axios</span><span class="brackets" data-v-7e4d9cb8>({</span> <span class="word" data-v-7e4d9cb8>url:</span><span class="src" data-v-7e4d9cb8>&quot;api/weather&quot;</span><span class="word" data-v-7e4d9cb8>,params:</span><span class="brackets" data-v-7e4d9cb8>{</span> <span class="word" data-v-7e4d9cb8>city:</span><span class="src" data-v-7e4d9cb8>&quot;310100&quot;</span><span class="brackets" data-v-7e4d9cb8>}})</span></div><div data-v-7e4d9cb8><span class="function" data-v-7e4d9cb8>const </span><span class="brackets" data-v-7e4d9cb8>gzPromise</span><span class="then" data-v-7e4d9cb8>=</span><span class="variable" data-v-7e4d9cb8>axios</span><span class="brackets" data-v-7e4d9cb8>({</span> <span class="word" data-v-7e4d9cb8>url:</span><span class="src" data-v-7e4d9cb8>&quot;api/weather&quot;</span><span class="word" data-v-7e4d9cb8>,params:</span><span class="brackets" data-v-7e4d9cb8>{</span> <span class="word" data-v-7e4d9cb8>city:</span><span class="src" data-v-7e4d9cb8>&quot;440100&quot;</span><span class="brackets" data-v-7e4d9cb8>}})</span></div><div data-v-7e4d9cb8><span class="function" data-v-7e4d9cb8>const </span><span class="brackets" data-v-7e4d9cb8>szPromise</span><span class="then" data-v-7e4d9cb8>=</span><span class="variable" data-v-7e4d9cb8>axios</span><span class="brackets" data-v-7e4d9cb8>({</span> <span class="word" data-v-7e4d9cb8>url:</span><span class="src" data-v-7e4d9cb8>&quot;api/weather&quot;</span><span class="word" data-v-7e4d9cb8>,params:</span><span class="brackets" data-v-7e4d9cb8>{</span> <span class="word" data-v-7e4d9cb8>city:</span><span class="src" data-v-7e4d9cb8>&quot;440300&quot;</span><span class="brackets" data-v-7e4d9cb8>}})</span></div><br data-v-7e4d9cb8><p data-v-7e4d9cb8> 思想: 把 city 編碼 放到數組裡 , 遍歷 數組裡 每個城市編碼 , 創建一個 axios 請求 </p><br data-v-7e4d9cb8><div data-v-7e4d9cb8><span class="comment" data-v-7e4d9cb8>//Peomise.all合併多個Promise對象</span></div><div data-v-7e4d9cb8><span class="function" data-v-7e4d9cb8>const </span><span class="number" data-v-7e4d9cb8>p </span> <span class="then" data-v-7e4d9cb8>=</span><span class="brackets" data-v-7e4d9cb8>Promise</span><span class="variable" data-v-7e4d9cb8>.all</span><span class="brackets" data-v-7e4d9cb8>([</span><span class="word" data-v-7e4d9cb8>bjPromise,shPromise,gzPromise,szPromise</span><span class="brackets" data-v-7e4d9cb8>])</span></div><div data-v-7e4d9cb8><span class="number" data-v-7e4d9cb8>p </span><span class="variable" data-v-7e4d9cb8>.then</span><span class="brackets" data-v-7e4d9cb8>(</span> <span class="word" data-v-7e4d9cb8>result</span><span class="function" data-v-7e4d9cb8>=&gt;</span> <span class="brackets" data-v-7e4d9cb8>{</span></div><div class="padTwo VSL" data-v-7e4d9cb8><span class="word" data-v-7e4d9cb8>console</span><span class="variable" data-v-7e4d9cb8>.log</span><span class="brackets" data-v-7e4d9cb8>(</span> <span class="word" data-v-7e4d9cb8>result</span><span class="brackets" data-v-7e4d9cb8>)</span><div data-v-7e4d9cb8></div><br data-v-7e4d9cb8><div data-v-7e4d9cb8><span class="function" data-v-7e4d9cb8>const </span><span class="word" data-v-7e4d9cb8>htmlStr</span> <span class="then" data-v-7e4d9cb8>=</span><span class="word" data-v-7e4d9cb8>result</span><span class="variable" data-v-7e4d9cb8>.map</span><span class="brackets" data-v-7e4d9cb8>(</span> <span class="word" data-v-7e4d9cb8>item</span><span class="function" data-v-7e4d9cb8>=&gt;</span> <span class="brackets" data-v-7e4d9cb8>{</span></div><div class="padTwo VSL" data-v-7e4d9cb8><span class="then" data-v-7e4d9cb8>return </span><span class="src" data-v-7e4d9cb8>`＜li&gt;</span> <span class="then" data-v-7e4d9cb8>${</span><span class="word" data-v-7e4d9cb8>item.data.data.area</span><span class="then" data-v-7e4d9cb8>}</span> <span class="word" data-v-7e4d9cb8>---</span><span class="then" data-v-7e4d9cb8>${</span><span class="word" data-v-7e4d9cb8>item.data.data.weather</span><span class="then" data-v-7e4d9cb8>}</span> <span class="src" data-v-7e4d9cb8>＜/li&gt;`</span><div data-v-7e4d9cb8></div></div><div data-v-7e4d9cb8><span class="brackets" data-v-7e4d9cb8>})</span><span class="variable" data-v-7e4d9cb8>.join</span><span class="brackets" data-v-7e4d9cb8>(</span> <span class="then" data-v-7e4d9cb8>&#39;&#39;</span><span class="brackets" data-v-7e4d9cb8>)</span></div><div data-v-7e4d9cb8><span class="word" data-v-7e4d9cb8>document</span><span class="variable" data-v-7e4d9cb8>.querySelector</span><span class="brackets" data-v-7e4d9cb8>(</span><span class="src" data-v-7e4d9cb8>&quot;.my-ul&quot;</span><span class="brackets" data-v-7e4d9cb8>)</span><span class="variable" data-v-7e4d9cb8>.innerHTML</span><span class="then" data-v-7e4d9cb8>=</span> <span class="word" data-v-7e4d9cb8>htmlStr</span></div><br data-v-7e4d9cb8></div><div data-v-7e4d9cb8><span class="brackets" data-v-7e4d9cb8>})</span><span class="variable" data-v-7e4d9cb8>.catch</span><span class="brackets" data-v-7e4d9cb8>(</span><span class="variable" data-v-7e4d9cb8>error</span><span class="function" data-v-7e4d9cb8>=&gt;</span> <span class="brackets" data-v-7e4d9cb8>{</span></div><div class="padTwo VSL" data-v-7e4d9cb8><span class="word" data-v-7e4d9cb8>console</span><span class="variable" data-v-7e4d9cb8>.dir</span><span class="brackets" data-v-7e4d9cb8>(</span><span class="variable" data-v-7e4d9cb8>error</span><span class="brackets" data-v-7e4d9cb8>)</span><div data-v-7e4d9cb8></div></div><div data-v-7e4d9cb8><span class="brackets" data-v-7e4d9cb8>})</span></div></div><p class="fz28" data-v-7e4d9cb8></p><p class="fz28" data-v-7e4d9cb8></p><p class="fz28" data-v-7e4d9cb8></p><p class="fz28" data-v-7e4d9cb8></p><p class="fz28" data-v-7e4d9cb8></p><p class="fz28" data-v-7e4d9cb8></p><p class="fz28" data-v-7e4d9cb8></p><p class="fz28" data-v-7e4d9cb8></p><p class="fz28" data-v-7e4d9cb8></p><p class="fz28" data-v-7e4d9cb8></p><p class="fz28" data-v-7e4d9cb8></p><p class="fz28" data-v-7e4d9cb8></p><p class="fz28" data-v-7e4d9cb8></p><p class="fz28" data-v-7e4d9cb8></p><p class="fz28" data-v-7e4d9cb8></p><p class="fz28" data-v-7e4d9cb8></p><p class="fz28" data-v-7e4d9cb8></p><p class="fz28" data-v-7e4d9cb8></p><p class="fz28" data-v-7e4d9cb8></p><p class="fz28" data-v-7e4d9cb8></p><p class="fz28" data-v-7e4d9cb8></p><p class="fz28" data-v-7e4d9cb8></p><p class="fz28" data-v-7e4d9cb8></p><p class="fz28" data-v-7e4d9cb8></p><p class="fz28" data-v-7e4d9cb8></p><p class="fz28" data-v-7e4d9cb8></p><p class="fz28" data-v-7e4d9cb8></p><p class="fz28" data-v-7e4d9cb8></p><p class="fz28" data-v-7e4d9cb8></p><p class="fz28" data-v-7e4d9cb8></p><p class="fz28" data-v-7e4d9cb8></p><p class="fz28" data-v-7e4d9cb8></p><p class="fz28" data-v-7e4d9cb8></p><p class="fz28" data-v-7e4d9cb8></p><p class="fz28" data-v-7e4d9cb8></p><p class="fz28" data-v-7e4d9cb8></p><p class="fz28" data-v-7e4d9cb8></p><p class="fz28" data-v-7e4d9cb8></p><p class="fz28" data-v-7e4d9cb8></p><p class="fz28" data-v-7e4d9cb8></p><p class="fz28" data-v-7e4d9cb8></p><p class="fz28" data-v-7e4d9cb8></p><p class="fz28" data-v-7e4d9cb8></p><p class="fz28" data-v-7e4d9cb8></p><p class="fz28" data-v-7e4d9cb8></p><p class="fz28" data-v-7e4d9cb8></p><p class="fz28" data-v-7e4d9cb8></p><p class="fz28" data-v-7e4d9cb8></p><p class="fz28" data-v-7e4d9cb8></p><p class="fz28" data-v-7e4d9cb8></p><p class="fz28" data-v-7e4d9cb8></p><p class="fz28" data-v-7e4d9cb8></p><p class="fz28" data-v-7e4d9cb8></p><p class="fz28" data-v-7e4d9cb8></p><p class="fz28" data-v-7e4d9cb8></p><p class="fz28" data-v-7e4d9cb8></p><p class="fz28" data-v-7e4d9cb8></p><p class="fz28" data-v-7e4d9cb8></p><p class="fz28" data-v-7e4d9cb8></p><p class="fz28" data-v-7e4d9cb8></p><p class="fz28" data-v-7e4d9cb8></p><p class="fz28" data-v-7e4d9cb8></p><p class="fz28" data-v-7e4d9cb8></p><p class="fz28" data-v-7e4d9cb8></p><p class="fz28" data-v-7e4d9cb8></p><p class="fz28" data-v-7e4d9cb8></p><p class="fz28" data-v-7e4d9cb8></p><p class="fz28" data-v-7e4d9cb8></p><p class="fz28" data-v-7e4d9cb8></p><p class="fz28" data-v-7e4d9cb8></p><p class="fz28" data-v-7e4d9cb8></p><p class="fz28" data-v-7e4d9cb8></p><p class="fz28" data-v-7e4d9cb8></p><p class="fz28" data-v-7e4d9cb8></p><p class="fz28" data-v-7e4d9cb8></p><p class="fz28" data-v-7e4d9cb8></p><p class="fz28" data-v-7e4d9cb8></p><p class="fz28" data-v-7e4d9cb8></p><p class="fz28" data-v-7e4d9cb8></p><p class="fz28" data-v-7e4d9cb8></p><p class="fz28" data-v-7e4d9cb8></p><p class="fz28" data-v-7e4d9cb8></p><p class="fz28" data-v-7e4d9cb8></p><p class="fz28" data-v-7e4d9cb8></p><p class="fz28" data-v-7e4d9cb8></p><p class="fz28" data-v-7e4d9cb8></p><p class="fz28" data-v-7e4d9cb8></p><p class="fz28" data-v-7e4d9cb8></p><p class="fz28" data-v-7e4d9cb8></p><p class="fz28" data-v-7e4d9cb8></p><p class="fz28" data-v-7e4d9cb8></p><p class="fz28" data-v-7e4d9cb8></p><p class="fz28" data-v-7e4d9cb8></p><p class="fz28" data-v-7e4d9cb8></p><p class="fz28" data-v-7e4d9cb8></p><p class="fz28" data-v-7e4d9cb8></p><p class="fz28" data-v-7e4d9cb8></p><p class="fz28" data-v-7e4d9cb8></p></div></div></div>',1),Xo=yv(()=>v("div",{class:"toTopButton"},[v("div",{class:"disCen"},"___"),v("div",{class:"disCen"},"▲")],-1)),Yo=[Xo],Go=yv(()=>v("div",{class:"toBotButton"},[v("div",{class:"disCen"},"▼"),v("div",{class:"disCen"},"￣")],-1)),Qo=[Go],Zo={__name:"JsPageThreeNine",setup(a){const s=ua(!1);window.addEventListener("scroll",function(){s.value=window.scrollY>0});function d(){window.scrollTo({top:0,left:0,behavior:"smooth"})}function t(){window.scrollTo({top:999999,left:0,behavior:"smooth"})}function c(e){window.scrollTo({top:document.getElementById(`${e}`).offsetTop,behavior:"smooth"})}return(e,n)=>(da(),ea(Q,null,[v("section",null,[v("div",Do,[v("div",Wo,[v("div",Uo,[v("div",{onClick:n[0]||(n[0]=l=>c("threeajax001")),class:"leftNavText"},"AJAX"),v("div",{onClick:n[1]||(n[1]=l=>c("threeajax002")),class:"leftNavText"},"axios"),v("div",{onClick:n[2]||(n[2]=l=>c("threeajax003")),class:"leftNavText"}," Promise狀態 "),v("div",{onClick:n[3]||(n[3]=l=>c("threeajax004")),class:"leftNavText"}," async await "),v("div",{onClick:n[4]||(n[4]=l=>c("threeajax005")),class:"leftNavText"}," 事件循環 "),v("div",{onClick:n[5]||(n[5]=l=>c("threeajax006")),class:"leftNavText"}," 宏任務微任務 ")])])]),Ko]),v("div",null,[X(T(W,{name:"fade",tag:"div"},{default:C(()=>[v("div",{onClick:d,class:"toTop"},Yo)]),_:1},512),[[Y,s.value]]),X(T(W,{name:"fade",tag:"div"},{default:C(()=>[v("div",{onClick:t,class:"toBot"},Qo)]),_:1},512),[[Y,s.value]])])],64))}},a4=ia(Zo,[["__scopeId","data-v-7e4d9cb8"]]),s4=vb({history:zl("/vue-learn-js/"),routes:[{path:"/",component:Ab,children:[{path:"",component:an},{path:"about",component:mi},{path:"http",component:Vi},{path:"html",component:Bi},{path:"css",component:Wi,children:[{path:"",component:l9},{path:"pagetwo",component:m9}]},{path:"js",component:k9,children:[{path:"jsnote",component:H9},{path:"jspractice",component:D9,children:[{path:"",component:cr},{path:"two",component:br},{path:"three",component:wr}]},{path:"",component:Cr,children:[{path:"",component:Ar},{path:"function",component:ff},{path:"destructuringassignment",component:zf},{path:"method",component:Bf},{path:"object",component:to},{path:"prototype",component:uo},{path:"tips",component:Vo},{path:"dom",component:Bo},{path:"ajax",component:a4}]}]}]},{path:"/:pathMatch(.*)*",component:an}],scrollBehavior(){return{top:0}}}),Gc=sl(pb);Gc.use(nl());Gc.use(s4);Gc.mount("#app");
