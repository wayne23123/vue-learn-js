import{e as u,o as w,c as z,a,h as n,v as p,b as l,w as r,T as o,F as m,f as k,p as T,d as h}from"./index-2e4f8d1f.js";import{_ as g}from"./_plugin-vue_export-helper-c27b6911.js";const i=t=>(T("data-v-dcea7c33"),t=t(),h(),t),C={class:"leftNav"},_={class:"leftNavContainer"},S={class:"leftNavLayout"},N=k('<div class="Main" data-v-dcea7c33><div class="mainContainer" data-v-dcea7c33><div class="mainLayout" data-v-dcea7c33><br data-v-dcea7c33><br data-v-dcea7c33><p class="fz28" data-v-dcea7c33>總分總</p><p class="fz28" data-v-dcea7c33>1.要講哪個知識點</p><p class="fz28" data-v-dcea7c33>2.細講</p><p class="fz28" data-v-dcea7c33>3.總結</p><br data-v-dcea7c33><br data-v-dcea7c33><div class="articleCardTitle cor36 fz34" data-v-dcea7c33>1. 作用域</div><p class="fz28" data-v-dcea7c33>作用域 scope 規定了變量能夠被訪問的&quot;範圍&quot; ,</p><br data-v-dcea7c33><br data-v-dcea7c33><p class="fz28" data-v-dcea7c33>離開這個&quot;範圍&quot;變量便不能被訪問。</p><br data-v-dcea7c33><br data-v-dcea7c33><div id="scope001" class="articleCardTitle cor36 fz34" data-v-dcea7c33> 1.1 局部作用域 </div><p class="fz28" data-v-dcea7c33> 在函數內部聲明的變量只能在函數內部被訪問，外部無法直接訪問。 </p><br data-v-dcea7c33><br data-v-dcea7c33><div class="bgcVS fz30" data-v-dcea7c33><br data-v-dcea7c33><br data-v-dcea7c33><div data-v-dcea7c33><span class="function" data-v-dcea7c33>function </span><span class="word" data-v-dcea7c33>getSun</span> <span class="brackets" data-v-dcea7c33>(){</span></div><div class="pTwo" data-v-dcea7c33><span class="function" data-v-dcea7c33>const </span><span class="word" data-v-dcea7c33>num</span> <span class="then" data-v-dcea7c33>=</span><span class="number" data-v-dcea7c33>10</span></div><div class="brackets" data-v-dcea7c33>}</div><div data-v-dcea7c33><span class="word" data-v-dcea7c33>console.</span><span class="variable" data-v-dcea7c33>log</span> <span class="brackets" data-v-dcea7c33>(</span><span class="word" data-v-dcea7c33>num</span> <span class="brackets" data-v-dcea7c33>) </span><span class="comment" data-v-dcea7c33>// 報錯函數外部不能使用局部作用域變量</span></div><br data-v-dcea7c33><br data-v-dcea7c33></div><br data-v-dcea7c33><br data-v-dcea7c33><p class="fz28" data-v-dcea7c33>結論</p><p class="fz28" data-v-dcea7c33>1.函數內部聲明變量, 外部無法訪問</p><p class="fz28" data-v-dcea7c33>2.函數的參數也是函數內部的局部變量</p><p class="fz28" data-v-dcea7c33>3.不同函數內部聲明的變量無法互相訪問</p><p class="fz28" data-v-dcea7c33>4.函數執行完, 函數內部的變量實際被清空了</p><br data-v-dcea7c33><br data-v-dcea7c33><br data-v-dcea7c33><br data-v-dcea7c33><div class="articleCardTitle cor36 fz34" data-v-dcea7c33>1.2 塊作用域</div><p class="fz28" data-v-dcea7c33> 在 JS 中用 {} 包裹為代碼塊, 代碼塊內部聲明變量外部 &quot;有可能&quot; 無法被訪問 </p><br data-v-dcea7c33><br data-v-dcea7c33><div class="bgcVS fz30" data-v-dcea7c33><br data-v-dcea7c33><br data-v-dcea7c33><div data-v-dcea7c33><span class="then" data-v-dcea7c33>for </span> <span class="brackets" data-v-dcea7c33>(</span><span class="function" data-v-dcea7c33>let </span> <span class="word" data-v-dcea7c33>i</span><span class="then" data-v-dcea7c33>=</span> <span class="number" data-v-dcea7c33>1</span><span class="then" data-v-dcea7c33>;</span> <span class="word" data-v-dcea7c33>i</span><span class="word" data-v-dcea7c33>＜=</span> <span class="number" data-v-dcea7c33>3</span><span class="then" data-v-dcea7c33>;</span> <span class="word" data-v-dcea7c33>i</span><span class="then" data-v-dcea7c33>++</span> <span class="brackets" data-v-dcea7c33>){</span></div><div class="pTwo" data-v-dcea7c33><span class="word" data-v-dcea7c33>console.</span><span class="variable" data-v-dcea7c33>log</span> <span class="brackets" data-v-dcea7c33>(</span><span class="word" data-v-dcea7c33>i</span> <span class="brackets" data-v-dcea7c33>)</span><span class="comment" data-v-dcea7c33>//塊作用域 // 依序打印 1 2 3</span></div><div class="brackets" data-v-dcea7c33>}</div><div data-v-dcea7c33><span class="word" data-v-dcea7c33>console.</span><span class="variable" data-v-dcea7c33>log</span> <span class="brackets" data-v-dcea7c33>(</span><span class="word" data-v-dcea7c33>i</span> <span class="brackets" data-v-dcea7c33>)</span><span class="comment" data-v-dcea7c33>// undefined</span></div><br data-v-dcea7c33><br data-v-dcea7c33><div class="comment" data-v-dcea7c33>var 沒塊級作用域</div><br data-v-dcea7c33><br data-v-dcea7c33><div data-v-dcea7c33><span class="then" data-v-dcea7c33>for </span> <span class="brackets" data-v-dcea7c33>(</span><span class="function" data-v-dcea7c33>var </span> <span class="word" data-v-dcea7c33>i</span><span class="then" data-v-dcea7c33>=</span> <span class="number" data-v-dcea7c33>1</span><span class="then" data-v-dcea7c33>;</span> <span class="word" data-v-dcea7c33>i</span><span class="word" data-v-dcea7c33>＜=</span> <span class="number" data-v-dcea7c33>3</span><span class="then" data-v-dcea7c33>;</span> <span class="word" data-v-dcea7c33>i</span><span class="then" data-v-dcea7c33>++</span> <span class="brackets" data-v-dcea7c33>){</span></div><div class="pTwo" data-v-dcea7c33><span class="word" data-v-dcea7c33>console.</span><span class="variable" data-v-dcea7c33>log</span> <span class="brackets" data-v-dcea7c33>(</span><span class="word" data-v-dcea7c33>i</span> <span class="brackets" data-v-dcea7c33>)</span><span class="comment" data-v-dcea7c33>//塊作用域 // 依序打印 1 2 3</span></div><div class="brackets" data-v-dcea7c33>}</div><div data-v-dcea7c33><span class="word" data-v-dcea7c33>console.</span><span class="variable" data-v-dcea7c33>log</span> <span class="brackets" data-v-dcea7c33>(</span><span class="word" data-v-dcea7c33>i</span> <span class="brackets" data-v-dcea7c33>)</span><span class="comment" data-v-dcea7c33>// 4</span></div><br data-v-dcea7c33><br data-v-dcea7c33><div class="comment" data-v-dcea7c33>if() while() 也有塊級作用域</div><br data-v-dcea7c33><br data-v-dcea7c33><div data-v-dcea7c33><span class="then" data-v-dcea7c33>if </span> <span class="brackets" data-v-dcea7c33>(</span><span class="word" data-v-dcea7c33>true</span><span class="brackets" data-v-dcea7c33>){</span></div><div class="pTwo" data-v-dcea7c33><span class="word" data-v-dcea7c33>let </span><span class="variable" data-v-dcea7c33>i</span> <span class="then" data-v-dcea7c33>=</span><span class="number" data-v-dcea7c33>10</span></div><div class="brackets" data-v-dcea7c33>}</div><div data-v-dcea7c33><span class="word" data-v-dcea7c33>console.</span><span class="variable" data-v-dcea7c33>log</span> <span class="brackets" data-v-dcea7c33>(</span><span class="word" data-v-dcea7c33>i</span> <span class="brackets" data-v-dcea7c33>)</span><span class="comment" data-v-dcea7c33>// undefined</span></div></div><br data-v-dcea7c33><br data-v-dcea7c33><p class="fz28" data-v-dcea7c33>結論</p><p class="fz28" data-v-dcea7c33>1.let const 聲明的變量產生塊級作用域, var沒有塊級</p><p class="fz28" data-v-dcea7c33>2.不同代碼塊之間的變量無法互相訪問</p><br data-v-dcea7c33><br data-v-dcea7c33><div id="scope002" class="articleCardTitle cor36 fz34" data-v-dcea7c33> 1.2 全局作用域 </div><p class="fz28" data-v-dcea7c33>script標籤的最外層 就是 全局作用域</p><p class="fz28" data-v-dcea7c33>全局作用域聲明變量, 任何其他作用域都可以被訪問</p><br data-v-dcea7c33><br data-v-dcea7c33><div id="scope003" class="articleCardTitle cor36 fz34" data-v-dcea7c33> 1.3 作用域鏈 </div><p class="fz28" data-v-dcea7c33>就近原則: 誰離我近找誰</p><br data-v-dcea7c33><br data-v-dcea7c33><p class="cor36 fz32" data-v-dcea7c33>作用域鏈 是 變量查找機制</p><br data-v-dcea7c33><br data-v-dcea7c33><p class="fz28" data-v-dcea7c33>函數執行, 優先找當前函數作用域中 找變量</p><p class="fz28" data-v-dcea7c33> 當前作用域找不到 . &gt; . 依次逐級找 父級作用域 直到全局作用域 </p><br data-v-dcea7c33><br data-v-dcea7c33><p class="fz28" data-v-dcea7c33>總結:</p><p class="fz28" data-v-dcea7c33>作用域鏈像鍊子一樣, 按照從小到大查找</p><br data-v-dcea7c33><br data-v-dcea7c33><div id="scope004" class="articleCardTitle cor36 fz34" data-v-dcea7c33> 1.4 垃圾回收機制 ( Garbage Collection ) </div><p class="fz28" data-v-dcea7c33> JS 內存的分配和回收自動完成, 內存在不使用時被垃圾回收機制回收 </p><br data-v-dcea7c33><br data-v-dcea7c33><p class="cor36 fz28" data-v-dcea7c33>內存生命週期</p><p class="fz28" data-v-dcea7c33> 1. 內存分配: 當聲明變量 、 函數 、 物件, 系統自動分配內存 </p><p class="fz28" data-v-dcea7c33>2. 內存使用: 讀寫內存, 使用變量、函數</p><p class="fz28" data-v-dcea7c33>3. 內存回收: 使用完, 垃圾回收器 回收不再使用的內存</p><br data-v-dcea7c33><br data-v-dcea7c33><p class="fz28" data-v-dcea7c33>全局變量不回收 ( 直到頁面關閉 )</p><p class="fz28" data-v-dcea7c33>局部變量的值, 不用了, 自動回收掉</p><br data-v-dcea7c33><br data-v-dcea7c33><p class="fz28 cor36" data-v-dcea7c33># 內存洩漏</p><p class="fz28" data-v-dcea7c33>程序中分配的內存 由於某種原因 未釋放 or 無法釋放</p><br data-v-dcea7c33><br data-v-dcea7c33><p class="fz28" data-v-dcea7c33>堆棧空間分配</p><p class="fz28" data-v-dcea7c33>1.棧 stack</p><p class="fz28" data-v-dcea7c33>基本數據類型, 系統自動分配 自動釋放</p><br data-v-dcea7c33><br data-v-dcea7c33><p class="fz28" data-v-dcea7c33>2.堆 heap</p><p class="fz28" data-v-dcea7c33> 複雜數據類型, 由程序員分配釋放, 若不釋放 則 由垃圾回收機制回收 </p><br data-v-dcea7c33><br data-v-dcea7c33><p class="fz28 cor36" data-v-dcea7c33># 引用計數法</p><p class="fz28" data-v-dcea7c33>看一個對象 是否有 指向它的引用, 沒有就回收對象</p><br data-v-dcea7c33><br data-v-dcea7c33><p class="fz28" data-v-dcea7c33>1. 跟蹤紀錄被引用的次數</p><p class="fz28" data-v-dcea7c33>2. 被引用 1 次就 ++</p><p class="fz28" data-v-dcea7c33>3. 減少 1 個引用就 --</p><p class="fz28" data-v-dcea7c33>4. 引用次數 0 則 釋放內存</p><br data-v-dcea7c33><br data-v-dcea7c33><p class="fz28" data-v-dcea7c33>const arr = [ 1, 2, 3, 4 ]</p><p class="fz28" data-v-dcea7c33> arr -&gt; (stack) 0x1111 --counter++-&gt; (heap) [ 1, 2, 3, 4 ] </p><br data-v-dcea7c33><br data-v-dcea7c33><p class="fz28" data-v-dcea7c33>arr = null</p><p class="fz28" data-v-dcea7c33>arr -&gt; (stack) null 不指向 heap</p><p class="fz28" data-v-dcea7c33>[ 1, 2, 3, 4 ] 的被引用次數變為 0 回收</p><br data-v-dcea7c33><br data-v-dcea7c33><p class="fz28 cor36" data-v-dcea7c33># 引用計數 缺點</p><p class="fz28 cor36" data-v-dcea7c33>嵌套引用 (循環引用)</p><p class="fz28" data-v-dcea7c33> 兩個物件 相互引用 . . . 儘管不再用, 不會回收, 而內存洩漏 </p><br data-v-dcea7c33><br data-v-dcea7c33><p class="fz20" data-v-dcea7c33>現代瀏覽器 不用 引用計數</p><br data-v-dcea7c33><br data-v-dcea7c33><div class="bgcVS fz30" data-v-dcea7c33><br data-v-dcea7c33><br data-v-dcea7c33><div data-v-dcea7c33><span class="function" data-v-dcea7c33>function </span><span class="word" data-v-dcea7c33>fn</span> <span class="brackets" data-v-dcea7c33>(){</span></div><div class="pTwo" data-v-dcea7c33><span class="function" data-v-dcea7c33>let </span> <span class="word" data-v-dcea7c33>obj1</span><span class="then" data-v-dcea7c33>=</span> <span class="brackets" data-v-dcea7c33>{}</span></div><div class="pTwo" data-v-dcea7c33><span class="function" data-v-dcea7c33>let </span> <span class="word" data-v-dcea7c33>obj2</span><span class="then" data-v-dcea7c33>=</span> <span class="brackets" data-v-dcea7c33>{}</span></div><div class="pTwo" data-v-dcea7c33><span class="word" data-v-dcea7c33>obj1.a</span> <span class="then" data-v-dcea7c33>=</span><span class="word" data-v-dcea7c33>obj2</span></div><div class="pTwo" data-v-dcea7c33><span class="word" data-v-dcea7c33>obj2.a</span> <span class="then" data-v-dcea7c33>=</span><span class="word" data-v-dcea7c33>obj1</span></div><div class="brackets" data-v-dcea7c33>}</div><br data-v-dcea7c33><br data-v-dcea7c33></div><br data-v-dcea7c33><br data-v-dcea7c33><p class="fz28 cor36" data-v-dcea7c33># 標記清除法</p><p class="fz28" data-v-dcea7c33> 將 &quot;不再使用的對象&quot; 定義為 &quot;無法到達的對象&quot; -&gt; (我找不到你) </p><br data-v-dcea7c33><br data-v-dcea7c33><p class="fz28" data-v-dcea7c33>1. 從根部 (全局對象) 出發定期掃描內存中對象</p><p class="fz28" data-v-dcea7c33>2. 從根部出發找不到的對象就標記為 不再使用 回收</p><br data-v-dcea7c33><br data-v-dcea7c33><div id="scope005" class="articleCardTitle cor36 fz34" data-v-dcea7c33> 1.5 閉包 ( closure ) </div><p class="fz28" data-v-dcea7c33> 一個函數對周圍狀態的引用綑綁在一起, 內層函數中訪問到其外層函數的作用域 </p><p class="fz28 cor36" data-v-dcea7c33>閉包 = 內層函數 + 外層函數的變量</p><br data-v-dcea7c33><br data-v-dcea7c33><div class="dis" data-v-dcea7c33><div class="bgcVS fz30" data-v-dcea7c33><br data-v-dcea7c33><br data-v-dcea7c33><div data-v-dcea7c33><span class="function" data-v-dcea7c33>function </span><span class="word" data-v-dcea7c33>outer</span><span class="brackets" data-v-dcea7c33>(){</span></div><div class="pTwo" data-v-dcea7c33><span class="function" data-v-dcea7c33>let </span> <span class="word" data-v-dcea7c33>a</span><span class="then" data-v-dcea7c33>=</span> <span class="number" data-v-dcea7c33>10;</span></div><div class="pTwo" data-v-dcea7c33><span class="function" data-v-dcea7c33>function </span><span class="word" data-v-dcea7c33>fn</span> <span class="brackets" data-v-dcea7c33>(){</span></div><div class="pFou" data-v-dcea7c33><span class="word" data-v-dcea7c33>console.</span><span class="variable" data-v-dcea7c33>log</span><span class="brackets" data-v-dcea7c33>(</span> <span class="word" data-v-dcea7c33>a</span><span class="brackets" data-v-dcea7c33>)</span></div><div class="brackets pTwo" data-v-dcea7c33>}</div><div class="pTwo" data-v-dcea7c33><span class="then" data-v-dcea7c33>return </span><span class="word" data-v-dcea7c33>fn</span></div><div class="brackets" data-v-dcea7c33>}</div><br data-v-dcea7c33><div data-v-dcea7c33><span class="word" data-v-dcea7c33>outer</span><span class="brackets" data-v-dcea7c33>()</span> <span class="then" data-v-dcea7c33>===</span><span class="word" data-v-dcea7c33>fn</span><span class="then" data-v-dcea7c33>===</span><span class="function" data-v-dcea7c33>function </span><span class="word" data-v-dcea7c33>fn</span> <span class="brackets" data-v-dcea7c33>(){}</span></div><br data-v-dcea7c33><div data-v-dcea7c33><span class="function" data-v-dcea7c33>const </span><span class="word" data-v-dcea7c33>fun</span> <span class="then" data-v-dcea7c33>=</span><span class="function" data-v-dcea7c33>function </span><span class="word" data-v-dcea7c33>fn</span> <span class="brackets" data-v-dcea7c33>(){}</span></div><br data-v-dcea7c33><div data-v-dcea7c33><span class="function" data-v-dcea7c33>const </span><span class="word" data-v-dcea7c33>fun</span> <span class="then" data-v-dcea7c33>=</span><span class="word" data-v-dcea7c33>outer</span> <span class="brackets" data-v-dcea7c33>()</span></div><div data-v-dcea7c33><span class="word" data-v-dcea7c33>fun</span> <span class="brackets" data-v-dcea7c33>() </span><span class="comment" data-v-dcea7c33>// 調用函數 </span><span class="comment" data-v-dcea7c33>// 10</span></div><div class="comment" data-v-dcea7c33> // 實現外部函數 使用 outer 函數 內部的變量 </div><br data-v-dcea7c33><br data-v-dcea7c33><p data-v-dcea7c33>另外 return 也可以這樣寫</p><div data-v-dcea7c33><span class="function" data-v-dcea7c33>function </span><span class="word" data-v-dcea7c33>fn</span> <span class="brackets" data-v-dcea7c33>(){</span></div><div class="padTwo VSL" data-v-dcea7c33><span class="function" data-v-dcea7c33>let </span> <span class="word" data-v-dcea7c33>a</span><span class="then" data-v-dcea7c33>=</span> <span class="number" data-v-dcea7c33>0</span><div data-v-dcea7c33><span class="then" data-v-dcea7c33>return </span><span class="function" data-v-dcea7c33>function </span><span class="brackets" data-v-dcea7c33>(){</span></div><div data-v-dcea7c33></div><div class="padTwo VSL" data-v-dcea7c33><span class="word" data-v-dcea7c33>a</span> <span class="then" data-v-dcea7c33>++</span><div data-v-dcea7c33><span class="word" data-v-dcea7c33>console</span><span class="variable" data-v-dcea7c33>.log</span><span class="brackets" data-v-dcea7c33>(</span> <span class="word" data-v-dcea7c33>a</span><span class="brackets" data-v-dcea7c33>)</span></div><div data-v-dcea7c33></div></div><div data-v-dcea7c33><span class="brackets" data-v-dcea7c33>}</span></div></div><div data-v-dcea7c33><span class="brackets" data-v-dcea7c33>}</span></div><div data-v-dcea7c33><span class="function" data-v-dcea7c33>let </span> <span class="word" data-v-dcea7c33>f</span><span class="then" data-v-dcea7c33>=</span> <span class="word" data-v-dcea7c33>fn</span><span class="brackets" data-v-dcea7c33>() </span><span class="comment" data-v-dcea7c33>//</span> <span class="word" data-v-dcea7c33>外部</span><span class="word" data-v-dcea7c33>fn</span><span class="word" data-v-dcea7c33>只是一開始創建閉包時</span><span class="then" data-v-dcea7c33>,</span> <span class="word" data-v-dcea7c33>執行一次</span></div><div data-v-dcea7c33><span class="word" data-v-dcea7c33>f</span> <span class="brackets" data-v-dcea7c33>() </span><span class="comment" data-v-dcea7c33>//</span><span class="word" data-v-dcea7c33>後面每次執行</span><span class="then" data-v-dcea7c33>return </span><span class="word" data-v-dcea7c33>後的</span><span class="function" data-v-dcea7c33>function </span></div><div data-v-dcea7c33><span class="word" data-v-dcea7c33>f</span> <span class="brackets" data-v-dcea7c33>() </span><span class="comment" data-v-dcea7c33>//</span><span class="word" data-v-dcea7c33>後面每次執行</span><span class="then" data-v-dcea7c33>return </span><span class="word" data-v-dcea7c33>後的</span><span class="function" data-v-dcea7c33>function </span></div></div><div class="bgcVSMid" data-v-dcea7c33>&gt;</div><div class="bgcVS fz30" data-v-dcea7c33><br data-v-dcea7c33><br data-v-dcea7c33><div data-v-dcea7c33><span class="function" data-v-dcea7c33>function </span><span class="word" data-v-dcea7c33>outer</span><span class="brackets" data-v-dcea7c33>(){</span></div><div class="pTwo" data-v-dcea7c33><span class="function" data-v-dcea7c33>let </span> <span class="word" data-v-dcea7c33>a</span><span class="then" data-v-dcea7c33>=</span> <span class="number" data-v-dcea7c33>10;</span></div><div class="pTwo" data-v-dcea7c33><span class="function" data-v-dcea7c33>return function </span><span class="word" data-v-dcea7c33>fn</span> <span class="brackets" data-v-dcea7c33>(){</span></div><div class="pFou" data-v-dcea7c33><span class="word" data-v-dcea7c33>console.</span><span class="variable" data-v-dcea7c33>log</span><span class="brackets" data-v-dcea7c33>(</span> <span class="word" data-v-dcea7c33>a</span><span class="brackets" data-v-dcea7c33>)</span></div><div class="brackets pTwo" data-v-dcea7c33>}</div><div class="brackets" data-v-dcea7c33>}</div><br data-v-dcea7c33><br data-v-dcea7c33><div data-v-dcea7c33><span class="function" data-v-dcea7c33>const </span><span class="word" data-v-dcea7c33>fun</span> <span class="then" data-v-dcea7c33>=</span><span class="word" data-v-dcea7c33>outer</span> <span class="brackets" data-v-dcea7c33>()</span></div><div data-v-dcea7c33><span class="word" data-v-dcea7c33>fun</span> <span class="brackets" data-v-dcea7c33>() </span><span class="comment" data-v-dcea7c33>// 調用函數 </span><span class="comment" data-v-dcea7c33>// 10</span></div><div class="comment" data-v-dcea7c33> // 實現外部函數 使用 outer 函數 內部的變量 </div><br data-v-dcea7c33><br data-v-dcea7c33></div></div><br data-v-dcea7c33><br data-v-dcea7c33><p class="fz28 cor36" data-v-dcea7c33># 作用</p><p class="fz28" data-v-dcea7c33>封閉數據, 提供操作, 外部也可以訪問函數內部的變量</p><br data-v-dcea7c33><br data-v-dcea7c33><p class="fz28" data-v-dcea7c33># 應用</p><p class="fz28" data-v-dcea7c33>實現數據私有</p><p class="fz28" data-v-dcea7c33>比如 統計函數調用次數</p><br data-v-dcea7c33><br data-v-dcea7c33><div class="bgcVS fz30" data-v-dcea7c33><br data-v-dcea7c33><br data-v-dcea7c33><div data-v-dcea7c33><span class="function" data-v-dcea7c33>function </span><span class="word" data-v-dcea7c33>count</span> <span class="brackets" data-v-dcea7c33>(){</span></div><div class="pTwo" data-v-dcea7c33><span class="function" data-v-dcea7c33>let </span> <span class="word" data-v-dcea7c33>i</span><span class="then" data-v-dcea7c33>=</span> <span class="number" data-v-dcea7c33>0</span></div><div class="pTwo" data-v-dcea7c33><span class="function" data-v-dcea7c33>function </span><span class="word" data-v-dcea7c33>fn</span> <span class="brackets" data-v-dcea7c33>(){</span></div><div class="pFou" data-v-dcea7c33>i++</div><div class="pFou" data-v-dcea7c33><span class="word" data-v-dcea7c33>console.</span><span class="variable" data-v-dcea7c33>log</span> <span class="brackets" data-v-dcea7c33>(</span><span class="word" data-v-dcea7c33>i</span> <span class="brackets" data-v-dcea7c33>)</span></div><div class="brackets pTwo" data-v-dcea7c33>}</div><div class="pTwo" data-v-dcea7c33><span class="then" data-v-dcea7c33>return </span><span class="word" data-v-dcea7c33>fn</span></div><div class="brackets" data-v-dcea7c33>}</div><div data-v-dcea7c33><span class="function" data-v-dcea7c33>const </span><span class="word" data-v-dcea7c33>fun</span> <span class="then" data-v-dcea7c33>=</span><span class="word" data-v-dcea7c33>count</span> <span class="brackets" data-v-dcea7c33>()</span></div><br data-v-dcea7c33><div class="number" data-v-dcea7c33>Q1: 裡面的 i 會被回收嗎?</div><br data-v-dcea7c33><div class="number" data-v-dcea7c33>global &gt; fun &gt; fn() &gt; i++ &gt; let i</div><div class="number" data-v-dcea7c33>i 不會被回收</div><div class="number" data-v-dcea7c33>內存洩漏</div><br data-v-dcea7c33><br data-v-dcea7c33></div><br data-v-dcea7c33><br data-v-dcea7c33><div id="scope006" class="articleCardTitle cor36 fz34" data-v-dcea7c33> 1.6 變量提升 ( Hoisting ) </div><p class="fz28" data-v-dcea7c33>變數提升是指變數在其宣告之前已經可以使用</p><p class="fz28" data-v-dcea7c33>只提升聲明 , 不賦值</p><br data-v-dcea7c33><p class="fz28" data-v-dcea7c33>把所有 var 聲明的變量提升到當前作用域的最前面</p><p class="fz28" data-v-dcea7c33>只提升聲明 , 不賦值</p><br data-v-dcea7c33><br data-v-dcea7c33><p class="fz28 comment" data-v-dcea7c33>var num</p><p class="fz28" data-v-dcea7c33>console.log( num ) . . . // undefined</p><p class="fz28" data-v-dcea7c33>var num = 10</p><p class="fz28" data-v-dcea7c33>console.log( num ) . . . // 10</p><br data-v-dcea7c33><br data-v-dcea7c33><p class="fz28" data-v-dcea7c33>function fn() {</p><p class="fz28 comment pTwo" data-v-dcea7c33>var num</p><p class="fz28 pTwo" data-v-dcea7c33>console.log( num ) . . . // undefined</p><p class="fz28 pTwo" data-v-dcea7c33>var num = 10</p><p class="fz28 pTwo" data-v-dcea7c33>console.log( num ) . . . // 10</p><p class="fz28" data-v-dcea7c33>}</p><br data-v-dcea7c33><br data-v-dcea7c33><p class="fz28" data-v-dcea7c33>用 let 或 const 宣告的變量和常量不會被提升</p><br data-v-dcea7c33><br data-v-dcea7c33><p class="fz28" data-v-dcea7c33>注意:</p><p class="fz28" data-v-dcea7c33>1.變量在未聲明即被訪問時會報錯</p><p class="fz28" data-v-dcea7c33>2.變量在var聲明之前被訪問, 值為 undefined</p><br data-v-dcea7c33><br data-v-dcea7c33></div></div></div>',1),V=i(()=>a("div",{class:"toTopButton"},[a("div",{class:"disCen"},"___"),a("div",{class:"disCen"},"▲")],-1)),x=[V],q=i(()=>a("div",{class:"toBotButton"},[a("div",{class:"disCen"},"▼"),a("div",{class:"disCen"},"￣")],-1)),B=[q],F={__name:"JsPageThreeOne",setup(t){const e=u(!1);window.addEventListener("scroll",function(){e.value=window.scrollY>0});function b(){window.scrollTo({top:0,left:0,behavior:"smooth"})}function f(){window.scrollTo({top:999999,left:0,behavior:"smooth"})}function s(v){window.scrollTo({top:document.getElementById(`${v}`).offsetTop,behavior:"smooth"})}return(v,c)=>(w(),z(m,null,[a("section",null,[a("div",C,[a("div",_,[a("div",S,[a("div",{onClick:c[0]||(c[0]=d=>s("scope001")),class:"leftNavText"},"局部作用域"),a("div",{onClick:c[1]||(c[1]=d=>s("scope002")),class:"leftNavText"},"全局作用域"),a("div",{onClick:c[2]||(c[2]=d=>s("scope003")),class:"leftNavText"},"作用域鏈"),a("div",{onClick:c[3]||(c[3]=d=>s("scope004")),class:"leftNavText"}," JS垃圾回收機制 "),a("div",{onClick:c[4]||(c[4]=d=>s("scope005")),class:"leftNavText"},"閉包"),a("div",{onClick:c[5]||(c[5]=d=>s("scope006")),class:"leftNavText"},"變量提升")])])]),N]),a("div",null,[n(l(o,{name:"fade",tag:"div"},{default:r(()=>[a("div",{onClick:b,class:"toTop"},x)]),_:1},512),[[p,e.value]]),n(l(o,{name:"fade",tag:"div"},{default:r(()=>[a("div",{onClick:f,class:"toBot"},B)]),_:1},512),[[p,e.value]])])],64))}},I=g(F,[["__scopeId","data-v-dcea7c33"]]);export{I as default};
