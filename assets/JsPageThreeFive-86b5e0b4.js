import{e as m,r as k,o as z,c as h,a,b as p,w as v,i as q,h as l,v as e,T as o,F as g,f as r,p as T,d as j}from"./index-2e4f8d1f.js";import{_ as y}from"./_plugin-vue_export-helper-c27b6911.js";const i=t=>(T("data-v-9c1d69b3"),t=t(),j(),t),S={class:"leftNav"},_={class:"leftNavContainer"},V={class:"leftNavLayout"},C={class:"Main"},L={class:"mainContainer"},x={class:"mainLayout"},O=r('<br data-v-9c1d69b3><br data-v-9c1d69b3><p class="fz28" data-v-9c1d69b3>總分總</p><p class="fz28" data-v-9c1d69b3>1.要講哪個知識點</p><p class="fz28" data-v-9c1d69b3>2.細講</p><p class="fz28" data-v-9c1d69b3>3.總結</p><br data-v-9c1d69b3><br data-v-9c1d69b3><div id="threeobject001" class="articleCardTitle cor36 fz34" data-v-9c1d69b3> 5.1 創建物件 </div><div class="bgcVS" data-v-9c1d69b3><p data-v-9c1d69b3>1. 利用對象字面量 創建</p><br data-v-9c1d69b3><div data-v-9c1d69b3><span class="function" data-v-9c1d69b3>const </span><span class="word" data-v-9c1d69b3>obj</span> <span class="then" data-v-9c1d69b3>=</span><span class="brackets" data-v-9c1d69b3>{</span></div><div class="pTwo" data-v-9c1d69b3><span class="word" data-v-9c1d69b3>uname:</span> <span class="src" data-v-9c1d69b3>&quot;wayne&quot;</span></div><div class="brackets" data-v-9c1d69b3>}</div><br data-v-9c1d69b3><br data-v-9c1d69b3><p data-v-9c1d69b3>2. 利用 new Object 創建</p><br data-v-9c1d69b3><div data-v-9c1d69b3><span class="function" data-v-9c1d69b3>const </span><span class="word" data-v-9c1d69b3>obj</span><span class="then" data-v-9c1d69b3>= new </span> <span class="word" data-v-9c1d69b3>Object</span><span class="brackets" data-v-9c1d69b3>()</span></div><div data-v-9c1d69b3><span class="word" data-v-9c1d69b3>obj.name</span> <span class="then" data-v-9c1d69b3>=</span><span class="src" data-v-9c1d69b3>&quot;wayne&quot;</span></div><br data-v-9c1d69b3><div data-v-9c1d69b3><span class="function" data-v-9c1d69b3>const </span><span class="word" data-v-9c1d69b3>obj</span><span class="then" data-v-9c1d69b3>= new </span> <span class="word" data-v-9c1d69b3>Object</span><span class="brackets" data-v-9c1d69b3>( {</span> <span class="word" data-v-9c1d69b3>name:</span><span class="src" data-v-9c1d69b3>&quot;wayne&quot;</span> <span class="brackets" data-v-9c1d69b3>} )</span></div></div><div id="threeobject002" class="articleCardTitle cor36 fz34" data-v-9c1d69b3> 5.2 利用 構造函數 創建 </div><p class="fz28" data-v-9c1d69b3>是一種特殊的 函數 , 用來 初始化 物件</p><br data-v-9c1d69b3><p class="fz28" data-v-9c1d69b3>1. 是什麼? _ 函數</p><p class="fz28" data-v-9c1d69b3>2. 做什麼? _ 創建物件</p><br data-v-9c1d69b3><br data-v-9c1d69b3><p class="fz28" data-v-9c1d69b3>約定 (非強制)</p><p class="fz28" data-v-9c1d69b3>1. 第 1 個字母大寫</p><p class="fz28" data-v-9c1d69b3>2. 只能由 new 操作符</p><div class="bgcVS" data-v-9c1d69b3><p data-v-9c1d69b3>創建 構造函數</p><br data-v-9c1d69b3><div data-v-9c1d69b3><span class="function" data-v-9c1d69b3>function </span><span class="word" data-v-9c1d69b3>Person</span> <span class="brackets" data-v-9c1d69b3>(</span><span class="word" data-v-9c1d69b3>uname,number</span><span class="brackets" data-v-9c1d69b3>){</span></div><div class="pTwo VSL" data-v-9c1d69b3><span class="comment" data-v-9c1d69b3>// this.name=uname</span></div><div class="pTwo VSL" data-v-9c1d69b3><span class="then" data-v-9c1d69b3>this</span><span class="word" data-v-9c1d69b3>.uname</span> <span class="then" data-v-9c1d69b3>=</span><span class="word" data-v-9c1d69b3>uname</span></div><div class="pTwo VSL" data-v-9c1d69b3><span class="comment" data-v-9c1d69b3>//物件的屬性 . . . 形參</span></div><div class="pTwo VSL" data-v-9c1d69b3><span class="then" data-v-9c1d69b3>this</span> <span class="word" data-v-9c1d69b3>.number</span><span class="then" data-v-9c1d69b3>=</span> <span class="word" data-v-9c1d69b3>number</span></div><div class="brackets" data-v-9c1d69b3>}</div><div data-v-9c1d69b3><span class="word" data-v-9c1d69b3>console.</span><span class="variable" data-v-9c1d69b3>log</span> <span class="brackets" data-v-9c1d69b3>(</span><span class="then" data-v-9c1d69b3>new </span> <span class="word" data-v-9c1d69b3>Person</span><span class="brackets" data-v-9c1d69b3>(</span><span class="src" data-v-9c1d69b3>&quot;wayne&quot;,</span> <span class="number" data-v-9c1d69b3>123</span><span class="brackets" data-v-9c1d69b3>))</span></div><br data-v-9c1d69b3><div data-v-9c1d69b3><span class="function" data-v-9c1d69b3>const </span><span class="word" data-v-9c1d69b3>p</span><span class="then" data-v-9c1d69b3>= new </span><span class="word" data-v-9c1d69b3>Person</span> <span class="brackets" data-v-9c1d69b3>(</span><span class="src" data-v-9c1d69b3>&quot;wayne&quot;,</span> <span class="number" data-v-9c1d69b3>6</span><span class="brackets" data-v-9c1d69b3>)</span></div></div><p class="fz28" data-v-9c1d69b3>說明</p><p class="fz28" data-v-9c1d69b3>1. 使用 new 調用函數 的行為 叫 實例化</p><p class="fz28" data-v-9c1d69b3> 2. 實例化 構造函數時 沒有參數 可以省略 ( ) <span class="comment" data-v-9c1d69b3>不建議省略</span></p><p class="fz28" data-v-9c1d69b3> 3. 構造函數內部 無需寫 return, 返回值為新創建的物件 </p><p class="fz28 comment" data-v-9c1d69b3>以前 調用函數 要加 return 才返回給我們</p><p class="fz28" data-v-9c1d69b3> 4. 構造函數內部的 return 返回的值無效 , 不要寫 return </p><p class="fz28" data-v-9c1d69b3>5. new Object() new Date() 也是 實例化構造函數</p><div id="threeobject003" class="articleCardTitle cor36 fz34" data-v-9c1d69b3> 5.3 new做了什麼? </div><p class="fz28" data-v-9c1d69b3> : new後面跟一個構造函數,先創造一個臨時對象,將這個臨時對象原型綁定構造函數的prototype,再把裡面的this指定為這個臨時對象,再執行構造函數,最後return這個臨時對象 </p><br data-v-9c1d69b3><p class="fz28 cor36" data-v-9c1d69b3># 當我 new 構造函數</p><p class="fz28" data-v-9c1d69b3>1. 創建 新物件 (空的)</p><p class="fz28" data-v-9c1d69b3>2. 構造函數的 this 指向 新物件</p><p class="fz28" data-v-9c1d69b3>3. 執行 構造函數 代碼</p><p class="fz28 pFou" data-v-9c1d69b3> this. 指向物件 <span class="comment" data-v-9c1d69b3>. . . obj.name=&quot;wayne&quot;</span></p><p class="fz28 pFou" data-v-9c1d69b3>name屬性 =賦值 &quot;wayne&quot;</p><p class="fz28" data-v-9c1d69b3>4. 返回 這個 新物件</p><div id="threeobject004" class="articleCardTitle cor36 fz34" data-v-9c1d69b3> 5.4 實例成員 &amp; 靜態成員 </div><p class="fz28" data-v-9c1d69b3>通過 構造函數創建的 對象 為 實例對象</p><p class="fz28" data-v-9c1d69b3>實例對象中的屬性方法 為 實例成員</p><br data-v-9c1d69b3><p class="fz28" data-v-9c1d69b3>說明</p><p class="fz28" data-v-9c1d69b3>1. 為構造函數傳入參數, 創建結構相同但值不同的對象</p><p class="fz28" data-v-9c1d69b3>2. 構造函數創建的實例對象彼此獨立互不影響</p><div class="bgcVS" data-v-9c1d69b3><div data-v-9c1d69b3><span class="function" data-v-9c1d69b3>function </span><span class="word" data-v-9c1d69b3>Person</span> <span class="brackets" data-v-9c1d69b3>(</span><span class="word" data-v-9c1d69b3>uname,number</span><span class="brackets" data-v-9c1d69b3>){</span></div><div class="pTwo VSL" data-v-9c1d69b3><span class="then" data-v-9c1d69b3>this</span><span class="word" data-v-9c1d69b3>.uname</span> <span class="then" data-v-9c1d69b3>=</span><span class="word" data-v-9c1d69b3>uname</span></div><div class="pTwo VSL" data-v-9c1d69b3><span class="then" data-v-9c1d69b3>this</span> <span class="word" data-v-9c1d69b3>.number</span><span class="then" data-v-9c1d69b3>=</span> <span class="word" data-v-9c1d69b3>number</span></div><div class="brackets" data-v-9c1d69b3>}</div><br data-v-9c1d69b3><div data-v-9c1d69b3><span class="function" data-v-9c1d69b3>const </span><span class="word" data-v-9c1d69b3>p</span><span class="then" data-v-9c1d69b3>= new </span><span class="word" data-v-9c1d69b3>Person</span> <span class="brackets" data-v-9c1d69b3>(</span><span class="src" data-v-9c1d69b3>&quot;wayne&quot;,</span> <span class="number" data-v-9c1d69b3>6</span><span class="brackets" data-v-9c1d69b3>)</span></div><div data-v-9c1d69b3><span class="function" data-v-9c1d69b3>const </span><span class="word" data-v-9c1d69b3>n</span><span class="then" data-v-9c1d69b3>= new </span><span class="word" data-v-9c1d69b3>Person</span> <span class="brackets" data-v-9c1d69b3>(</span><span class="src" data-v-9c1d69b3>&quot;neo&quot;,</span> <span class="number" data-v-9c1d69b3>3</span><span class="brackets" data-v-9c1d69b3>)</span></div><div data-v-9c1d69b3><span class="word" data-v-9c1d69b3>console.</span><span class="variable" data-v-9c1d69b3>log</span> <span class="brackets" data-v-9c1d69b3>(</span><span class="word" data-v-9c1d69b3>p</span><span class="then" data-v-9c1d69b3>=== </span> <span class="word" data-v-9c1d69b3>n</span><span class="brackets" data-v-9c1d69b3>) </span><span class="comment" data-v-9c1d69b3>// false</span></div><br data-v-9c1d69b3><p data-v-9c1d69b3>new p 時, 內存開闢了新空間 存放 p 這個新物件</p><p data-v-9c1d69b3>new n 時, 內存開闢了新空間 存放 n 這個新物件</p><p data-v-9c1d69b3>所以 2 個物件 在不同位置</p><br data-v-9c1d69b3><div data-v-9c1d69b3><span class="word" data-v-9c1d69b3>p.name</span> <span class="then" data-v-9c1d69b3>=</span><span class="src" data-v-9c1d69b3>&quot;jack&quot;</span><span class="comment" data-v-9c1d69b3> // 實例屬性</span></div><br data-v-9c1d69b3><p data-v-9c1d69b3>不影響 n 的 name</p><br data-v-9c1d69b3><div data-v-9c1d69b3><span class="word" data-v-9c1d69b3>p.sayHi</span> <span class="then" data-v-9c1d69b3>=</span><span class="brackets" data-v-9c1d69b3>()</span> <span class="function" data-v-9c1d69b3>=&gt;</span><span class="brackets" data-v-9c1d69b3>{ </span><span class="comment" data-v-9c1d69b3> // 實例方法</span></div><div class="pTwo" data-v-9c1d69b3><span class="word" data-v-9c1d69b3>console.</span><span class="variable" data-v-9c1d69b3>log</span> <span class="brackets" data-v-9c1d69b3>(</span><span class="src" data-v-9c1d69b3>&quot;hi&quot;</span> <span class="brackets" data-v-9c1d69b3>)</span></div><div class="brackets" data-v-9c1d69b3>}</div><br data-v-9c1d69b3><p class="fz28" data-v-9c1d69b3>p 增加 sayHi 方法 不影響 n</p></div><p class="fz28" data-v-9c1d69b3>靜態成員</p><p class="fz28" data-v-9c1d69b3>構造函數的屬性和方法 是 靜態成員</p><p class="fz28" data-v-9c1d69b3>靜態 屬性 &amp; 靜態 方法</p><br data-v-9c1d69b3><p class="fz28" data-v-9c1d69b3>說明</p><p class="fz28" data-v-9c1d69b3>1. 靜態成員 只能 構造函數來訪問</p><p class="fz28" data-v-9c1d69b3>2. 靜態方法 中的 this 指向 構造函數</p><div class="bgcVS" data-v-9c1d69b3><div data-v-9c1d69b3><span class="function" data-v-9c1d69b3>function </span><span class="word" data-v-9c1d69b3>Person</span> <span class="brackets" data-v-9c1d69b3>(</span><span class="word" data-v-9c1d69b3>uname,number</span><span class="brackets" data-v-9c1d69b3>){</span></div><div class="pTwo VSL" data-v-9c1d69b3><span class="then" data-v-9c1d69b3>this</span><span class="word" data-v-9c1d69b3>.uname</span> <span class="then" data-v-9c1d69b3>=</span><span class="word" data-v-9c1d69b3>uname</span></div><div class="pTwo VSL" data-v-9c1d69b3><span class="then" data-v-9c1d69b3>this</span> <span class="word" data-v-9c1d69b3>.number</span><span class="then" data-v-9c1d69b3>=</span> <span class="word" data-v-9c1d69b3>number</span></div><div class="brackets" data-v-9c1d69b3>}</div><br data-v-9c1d69b3><div data-v-9c1d69b3><span class="word" data-v-9c1d69b3>Person.eyes</span> <span class="then" data-v-9c1d69b3>=</span><span class="number" data-v-9c1d69b3>2 </span><span class="comment" data-v-9c1d69b3>// 靜態屬性</span></div><div data-v-9c1d69b3><span class="word" data-v-9c1d69b3>console.</span><span class="variable" data-v-9c1d69b3>log</span> <span class="brackets" data-v-9c1d69b3>(</span><span class="word" data-v-9c1d69b3>Person.eyes</span><span class="brackets" data-v-9c1d69b3>) </span> <span class="comment" data-v-9c1d69b3>// 2</span></div><br data-v-9c1d69b3><p class="fz28" data-v-9c1d69b3>Math.Pi 就是 Math 這個構造函數 加了 Pi 屬性</p><br data-v-9c1d69b3><div data-v-9c1d69b3><span class="word" data-v-9c1d69b3>Person.sayHi</span><span class="then" data-v-9c1d69b3>=</span><span class="function" data-v-9c1d69b3>function </span><span class="brackets" data-v-9c1d69b3>(){ </span><span class="comment" data-v-9c1d69b3>// 這邊不要用箭頭函數,因為沒this</span></div><div class="pTwo" data-v-9c1d69b3><span class="word" data-v-9c1d69b3>console.</span><span class="variable" data-v-9c1d69b3>log</span> <span class="brackets" data-v-9c1d69b3>(</span><span class="then" data-v-9c1d69b3>this</span> <span class="brackets" data-v-9c1d69b3>) </span><span class="comment" data-v-9c1d69b3>// Person // 指向構造函數</span></div><div class="brackets" data-v-9c1d69b3>}</div><div data-v-9c1d69b3><span class="word" data-v-9c1d69b3>Person.sayHi</span><span class="brackets" data-v-9c1d69b3>()</span></div></div><div id="threeobject005" class="articleCardTitle cor36 fz34" data-v-9c1d69b3> 5.5 內置構造函數 </div><p class="fz28 cor36" data-v-9c1d69b3> # 基本數據類型不是物件 為什麼 基本類型可以用方法? </p><p class="fz28 cor36" data-v-9c1d69b3># 為什麼字串可以使用.length?為什麼有方法?</p><p class="fz28" data-v-9c1d69b3> 在JS底層把基本數據類型包裝成了引用數據類型, 轉成物件, 物件有屬性和方法, 就可以使用方法了 </p><div class="bgcVS" data-v-9c1d69b3><div data-v-9c1d69b3><span class="function" data-v-9c1d69b3>const </span><span class="word" data-v-9c1d69b3>str</span> <span class="then" data-v-9c1d69b3>=</span><span class="word" data-v-9c1d69b3>&quot;wayne&quot;</span></div><div data-v-9c1d69b3><span class="word" data-v-9c1d69b3>console.</span><span class="variable" data-v-9c1d69b3>log</span> <span class="brackets" data-v-9c1d69b3>(</span><span class="word" data-v-9c1d69b3>str.length</span><span class="brackets" data-v-9c1d69b3>)</span></div><br data-v-9c1d69b3><div class="comment" data-v-9c1d69b3>// JS底層做包裝</div><div data-v-9c1d69b3><span class="function" data-v-9c1d69b3>const </span><span class="word" data-v-9c1d69b3>str</span> <span class="then" data-v-9c1d69b3>= new </span><span class="word" data-v-9c1d69b3>String</span> <span class="brackets" data-v-9c1d69b3>(</span><span class="src" data-v-9c1d69b3>&quot;wayne&quot;</span> <span class="brackets" data-v-9c1d69b3>)</span></div><div class="comment" data-v-9c1d69b3> // JS底層把簡單數據類型包裝成了引用數據類型 </div></div><p class="fz28 cor36" data-v-9c1d69b3>Object</p><p class="fz28" data-v-9c1d69b3> Object 是內置的 構造函數, 用於創建普通物件 (new Object) </p><br data-v-9c1d69b3><p class="fz28" data-v-9c1d69b3>3 個常用靜態方法</p><p class="fz28" data-v-9c1d69b3>( 靜態方法只有構造函數 Object 可以調用 )</p><br data-v-9c1d69b3><p class="fz28" data-v-9c1d69b3>Object.values 靜態方法獲取物件中所有屬性值</p><p class="fz28" data-v-9c1d69b3>注意: 返回的是一個數組</p><br data-v-9c1d69b3><div class="bgcVS" data-v-9c1d69b3><p data-v-9c1d69b3>想要獲得物件裡面的屬性和值?</p><br data-v-9c1d69b3><p data-v-9c1d69b3>之前</p><div data-v-9c1d69b3><span class="function" data-v-9c1d69b3>const </span> <span class="word" data-v-9c1d69b3>o</span><span class="then" data-v-9c1d69b3>=</span> <span class="brackets" data-v-9c1d69b3>{</span><span class="word" data-v-9c1d69b3>name:&quot;wayne&quot;,number:</span><span class="number" data-v-9c1d69b3>123</span> <span class="brackets" data-v-9c1d69b3>}</span></div><div data-v-9c1d69b3><span class="then" data-v-9c1d69b3>for </span> <span class="brackets" data-v-9c1d69b3>(</span><span class="function" data-v-9c1d69b3>let </span> <span class="word" data-v-9c1d69b3>k </span><span class="function" data-v-9c1d69b3>in </span> <span class="word" data-v-9c1d69b3>o</span><span class="brackets" data-v-9c1d69b3>){</span></div><div class="padTwo VSL" data-v-9c1d69b3><span class="word" data-v-9c1d69b3>console.</span><span class="variable" data-v-9c1d69b3>log</span> <span class="brackets" data-v-9c1d69b3>(</span><span class="word" data-v-9c1d69b3>k</span> <span class="brackets" data-v-9c1d69b3>) </span><span class="comment" data-v-9c1d69b3>// name number // 屬性</span></div><div class="padTwo VSL" data-v-9c1d69b3><span class="word" data-v-9c1d69b3>console.</span><span class="variable" data-v-9c1d69b3>log</span> <span class="brackets" data-v-9c1d69b3>(</span><span class="word" data-v-9c1d69b3>o</span> <span class="brackets" data-v-9c1d69b3>[</span><span class="word" data-v-9c1d69b3>k</span> <span class="brackets" data-v-9c1d69b3>]</span><span class="brackets" data-v-9c1d69b3>) </span><span class="comment" data-v-9c1d69b3>// wayne 123 // 值</span></div><div class="brackets" data-v-9c1d69b3>}</div><br data-v-9c1d69b3><br data-v-9c1d69b3><p data-v-9c1d69b3>用 Object.values</p><div data-v-9c1d69b3><span class="function" data-v-9c1d69b3>const </span> <span class="word" data-v-9c1d69b3>o</span><span class="then" data-v-9c1d69b3>=</span> <span class="brackets" data-v-9c1d69b3>{</span><span class="word" data-v-9c1d69b3>name:</span> <span class="src" data-v-9c1d69b3>&quot;wayne&quot;</span><span class="word" data-v-9c1d69b3>,number:</span><span class="number" data-v-9c1d69b3>123</span> <span class="brackets" data-v-9c1d69b3>}</span></div><div class="comment" data-v-9c1d69b3>// 獲得所有 屬性名</div><div data-v-9c1d69b3><span class="word" data-v-9c1d69b3>console</span><span class="variable" data-v-9c1d69b3>.log</span><span class="brackets" data-v-9c1d69b3>(</span><span class="brackets" data-v-9c1d69b3>Object</span><span class="variable" data-v-9c1d69b3>.keys</span><span class="brackets" data-v-9c1d69b3>(</span> <span class="word" data-v-9c1d69b3>o</span><span class="brackets" data-v-9c1d69b3>))</span><span class="comment" data-v-9c1d69b3>//返回數組[&quot;name&quot;,&quot;number&quot;]</span></div><div class="comment" data-v-9c1d69b3>// 獲得所有 屬性值</div><div data-v-9c1d69b3><span class="word" data-v-9c1d69b3>console</span><span class="variable" data-v-9c1d69b3>.log</span><span class="brackets" data-v-9c1d69b3>(</span><span class="brackets" data-v-9c1d69b3>Object</span><span class="variable" data-v-9c1d69b3>.values</span><span class="brackets" data-v-9c1d69b3>(</span> <span class="word" data-v-9c1d69b3>o</span><span class="brackets" data-v-9c1d69b3>))</span><span class="comment" data-v-9c1d69b3>//返回數組[&quot;wayne&quot;,&quot;123&quot;]</span></div></div><p class="fz28" data-v-9c1d69b3>Object.assign 靜態方法用於物件拷貝</p><div class="bgcVS" data-v-9c1d69b3><div data-v-9c1d69b3><span class="function" data-v-9c1d69b3>const </span> <span class="word" data-v-9c1d69b3>o</span><span class="then" data-v-9c1d69b3>=</span> <span class="brackets" data-v-9c1d69b3>{</span><span class="word" data-v-9c1d69b3>name:&quot;wayne&quot;,number:</span><span class="number" data-v-9c1d69b3>123</span> <span class="brackets" data-v-9c1d69b3>}</span></div><div data-v-9c1d69b3><span class="function" data-v-9c1d69b3>const </span><span class="word" data-v-9c1d69b3>obj</span> <span class="then" data-v-9c1d69b3>=</span><span class="brackets" data-v-9c1d69b3>{}</span></div><div data-v-9c1d69b3><span class="brackets" data-v-9c1d69b3>Object</span><span class="variable" data-v-9c1d69b3>.assign</span><span class="brackets" data-v-9c1d69b3>(</span> <span class="word" data-v-9c1d69b3>obj,o</span><span class="brackets" data-v-9c1d69b3>) </span><span class="comment" data-v-9c1d69b3>// (要拷貝的,被拷貝的)</span><span class="comment" data-v-9c1d69b3>// (右 賦值 給 左)</span></div><div data-v-9c1d69b3><span class="word" data-v-9c1d69b3>console.</span><span class="variable" data-v-9c1d69b3>log</span> <span class="brackets" data-v-9c1d69b3>(</span><span class="word" data-v-9c1d69b3>obj</span><span class="brackets" data-v-9c1d69b3>)</span></div><br data-v-9c1d69b3><p data-v-9c1d69b3>可用來新增屬性</p><br data-v-9c1d69b3><div data-v-9c1d69b3><span class="brackets" data-v-9c1d69b3>Object</span><span class="variable" data-v-9c1d69b3>.assign</span><span class="brackets" data-v-9c1d69b3>(</span> <span class="word" data-v-9c1d69b3>o,</span><span class="brackets" data-v-9c1d69b3>{</span><span class="word" data-v-9c1d69b3>gender:&quot;男&quot;</span><span class="brackets" data-v-9c1d69b3>})</span></div><div data-v-9c1d69b3><span class="word" data-v-9c1d69b3>console.</span><span class="variable" data-v-9c1d69b3>log</span> <span class="brackets" data-v-9c1d69b3>(</span><span class="word" data-v-9c1d69b3>o</span><span class="brackets" data-v-9c1d69b3>)</span></div><br data-v-9c1d69b3><p data-v-9c1d69b3>把一個物件 拷貝到裡面去</p></div>',71),P=r('<div id="" class="articleCardTitle cor36 fz34" data-v-9c1d69b3>String 方法</div><p class="fz28" data-v-9c1d69b3>1. 實例屬性 length 獲取字串長度</p><br data-v-9c1d69b3><p class="fz28" data-v-9c1d69b3>2. 實例方法 split(&quot;分隔符&quot;) 用來將字串拆分成數組</p><div class="bgcVS" data-v-9c1d69b3><div data-v-9c1d69b3><span class="function" data-v-9c1d69b3>const </span><span class="word" data-v-9c1d69b3>str</span> <span class="then" data-v-9c1d69b3>=</span><span class="src" data-v-9c1d69b3>&quot;wayne,jack&quot;</span></div><div data-v-9c1d69b3><span class="function" data-v-9c1d69b3>const </span><span class="word" data-v-9c1d69b3>arr</span> <span class="then" data-v-9c1d69b3>=</span><span class="word" data-v-9c1d69b3>str.</span><span class="variable" data-v-9c1d69b3>split</span><span class="brackets" data-v-9c1d69b3>(</span> <span class="then" data-v-9c1d69b3>&quot;,&quot;</span><span class="brackets" data-v-9c1d69b3>)</span></div><div data-v-9c1d69b3><span class="word" data-v-9c1d69b3>console.</span><span class="variable" data-v-9c1d69b3>log</span> <span class="brackets" data-v-9c1d69b3>(</span><span class="word" data-v-9c1d69b3>arr</span> <span class="brackets" data-v-9c1d69b3>)</span><span class="comment" data-v-9c1d69b3>//[&quot;wayne&quot;,&quot;jack&quot;]</span></div><div data-v-9c1d69b3><span class="function" data-v-9c1d69b3>const </span><span class="word" data-v-9c1d69b3>str1</span> <span class="then" data-v-9c1d69b3>=</span><span class="src" data-v-9c1d69b3>&quot;2077-1-1&quot;</span></div><div data-v-9c1d69b3><span class="function" data-v-9c1d69b3>const </span><span class="word" data-v-9c1d69b3>arr1</span> <span class="then" data-v-9c1d69b3>=</span><span class="word" data-v-9c1d69b3>str1.</span><span class="variable" data-v-9c1d69b3>split</span><span class="brackets" data-v-9c1d69b3>(</span> <span class="src" data-v-9c1d69b3>&quot;-&quot;</span><span class="brackets" data-v-9c1d69b3>)</span></div><div data-v-9c1d69b3><span class="word" data-v-9c1d69b3>console.</span><span class="variable" data-v-9c1d69b3>log</span> <span class="brackets" data-v-9c1d69b3>(</span><span class="word" data-v-9c1d69b3>arr</span> <span class="brackets" data-v-9c1d69b3>)</span><span class="comment" data-v-9c1d69b3>//[&quot;2077&quot;,&quot;1&quot;,&quot;1&quot;]</span></div></div><p class="fz28" data-v-9c1d69b3> 3. 實例方法 substring (需要擷取的第一個字符的索引[,結束的索引號]) 用於字串擷取 </p><br data-v-9c1d69b3><p class="fz28" data-v-9c1d69b3>3.1 省略 結束索引號 默認取到最後</p><p class="fz28" data-v-9c1d69b3>3.2 結束索引號 不包含 想要擷取的部分</p><div class="bgcVS" data-v-9c1d69b3><div data-v-9c1d69b3><span class="comment" data-v-9c1d69b3>1.裡面幾個參數 2. 返回值返回什麼 3. 使用方法</span></div><br data-v-9c1d69b3><div data-v-9c1d69b3><span class="word" data-v-9c1d69b3>str.</span><span class="variable" data-v-9c1d69b3>substring</span><span class="brackets" data-v-9c1d69b3>(</span><span class="word" data-v-9c1d69b3>要截的第一個字所引</span><span class="brackets" data-v-9c1d69b3>)</span></div><div data-v-9c1d69b3><span class="cor36" data-v-9c1d69b3>返回</span><span class="word" data-v-9c1d69b3>擷取的那部分的新字串</span></div><br data-v-9c1d69b3><div data-v-9c1d69b3><span class="function" data-v-9c1d69b3>const </span><span class="word" data-v-9c1d69b3>str</span> <span class="then" data-v-9c1d69b3>=</span><span class="src" data-v-9c1d69b3>&quot;waynetestneo&quot;</span></div><div data-v-9c1d69b3><span class="word" data-v-9c1d69b3>console.</span><span class="variable" data-v-9c1d69b3>log</span> <span class="brackets" data-v-9c1d69b3>(</span><span class="word" data-v-9c1d69b3>str.</span><span class="variable" data-v-9c1d69b3>substring</span><span class="brackets" data-v-9c1d69b3>(</span> <span class="number" data-v-9c1d69b3>9</span><span class="brackets" data-v-9c1d69b3>)) </span><span class="comment" data-v-9c1d69b3>// neo</span></div><div data-v-9c1d69b3><span class="word" data-v-9c1d69b3>console.</span><span class="variable" data-v-9c1d69b3>log</span> <span class="brackets" data-v-9c1d69b3>(</span><span class="word" data-v-9c1d69b3>str.</span><span class="variable" data-v-9c1d69b3>substring</span><span class="brackets" data-v-9c1d69b3>(</span> <span class="number" data-v-9c1d69b3>5 , 9</span><span class="brackets" data-v-9c1d69b3>)) </span><span class="comment" data-v-9c1d69b3>// test</span></div></div><p class="fz28" data-v-9c1d69b3> 4. 實例方法 startWith (檢測字串[,檢測位置索引號]) 判斷是否以某字符開頭 </p><p class="fz28" data-v-9c1d69b3>返回 true or false</p><div class="bgcVS" data-v-9c1d69b3><div data-v-9c1d69b3><span class="comment" data-v-9c1d69b3>1.裡面幾個參數 2. 返回值返回什麼 3. 使用方法</span></div><br data-v-9c1d69b3><div data-v-9c1d69b3><span class="word" data-v-9c1d69b3>str.</span><span class="variable" data-v-9c1d69b3>starstWith</span><span class="brackets" data-v-9c1d69b3>(</span><span class="word" data-v-9c1d69b3>要搜索的字串</span><span class="brackets" data-v-9c1d69b3>)</span></div><br data-v-9c1d69b3><div data-v-9c1d69b3><span class="word" data-v-9c1d69b3>一定要開頭 </span><span class="comment" data-v-9c1d69b3>＜=&gt; includes 就不用</span></div><p class="fz28" data-v-9c1d69b3>返回 true or false</p><br data-v-9c1d69b3><div data-v-9c1d69b3><span class="function" data-v-9c1d69b3>const </span><span class="word" data-v-9c1d69b3>str</span> <span class="then" data-v-9c1d69b3>=</span><span class="src" data-v-9c1d69b3>&quot;wayne學JS中&quot;</span></div><div data-v-9c1d69b3><span class="word" data-v-9c1d69b3>console.</span><span class="variable" data-v-9c1d69b3>log</span> <span class="brackets" data-v-9c1d69b3>(</span><span class="word" data-v-9c1d69b3>str.</span><span class="variable" data-v-9c1d69b3>startsWith</span><span class="brackets" data-v-9c1d69b3>(</span> <span class="word" data-v-9c1d69b3></span><span class="src" data-v-9c1d69b3>&quot;yne&quot;</span> <span class="brackets" data-v-9c1d69b3>))</span><span class="comment" data-v-9c1d69b3>//true</span></div></div><p class="fz28" data-v-9c1d69b3> 5. 實例方法 includes (搜索的字串[,檢測位置索引號]) 判斷一個字串是否包含在另一個字串中 </p><p class="fz28" data-v-9c1d69b3>返回 true or false</p><div class="bgcVS" data-v-9c1d69b3><div data-v-9c1d69b3><span class="comment" data-v-9c1d69b3>1.裡面幾個參數 2. 返回值返回什麼 3. 使用方法</span></div><br data-v-9c1d69b3><div data-v-9c1d69b3><span class="word" data-v-9c1d69b3>str.</span><span class="variable" data-v-9c1d69b3>includes</span><span class="brackets" data-v-9c1d69b3>(</span><span class="word" data-v-9c1d69b3>要搜索的字串</span><span class="brackets" data-v-9c1d69b3>)</span></div><br data-v-9c1d69b3><div data-v-9c1d69b3><span class="word" data-v-9c1d69b3>裡面有就 true </span><span class="comment" data-v-9c1d69b3>＜=&gt; starstWith 一定要開頭</span></div><p class="fz28" data-v-9c1d69b3>返回 true or false</p><p class="fz28" data-v-9c1d69b3>有區分大小寫 false</p><br data-v-9c1d69b3><div data-v-9c1d69b3><span class="function" data-v-9c1d69b3>const </span><span class="word" data-v-9c1d69b3>str</span> <span class="then" data-v-9c1d69b3>=</span><span class="src" data-v-9c1d69b3>&quot;我是wayne&quot;</span></div><div data-v-9c1d69b3><span class="word" data-v-9c1d69b3>console.</span><span class="variable" data-v-9c1d69b3>log</span> <span class="brackets" data-v-9c1d69b3>(</span><span class="word" data-v-9c1d69b3>str.</span><span class="variable" data-v-9c1d69b3>includes</span><span class="brackets" data-v-9c1d69b3>(</span> <span class="src" data-v-9c1d69b3>&quot;wayne&quot;</span><span class="brackets" data-v-9c1d69b3>) )</span><span class="comment" data-v-9c1d69b3>//true</span></div><div data-v-9c1d69b3><span class="word" data-v-9c1d69b3>console.</span><span class="variable" data-v-9c1d69b3>log</span> <span class="brackets" data-v-9c1d69b3>(</span><span class="word" data-v-9c1d69b3>str.</span><span class="variable" data-v-9c1d69b3>includes</span><span class="brackets" data-v-9c1d69b3>(</span> <span class="src" data-v-9c1d69b3>&quot;wayne&quot; </span><span class="number" data-v-9c1d69b3>, 3 </span><span class="brackets" data-v-9c1d69b3>) )</span><span class="comment" data-v-9c1d69b3>//false</span></div></div><p class="fz28" data-v-9c1d69b3>6. 實例方法 toUpperCase 用於將字母轉成大寫</p><br data-v-9c1d69b3><p class="fz28" data-v-9c1d69b3>7. 實例方法 toLowerCase 用於將字母轉成小寫</p><br data-v-9c1d69b3><p class="fz28" data-v-9c1d69b3>8. 實例方法 indexOf 檢測是否包含某字符</p><br data-v-9c1d69b3><p class="fz28" data-v-9c1d69b3>9. 實例方法 endsWith 檢測是否以某字符結尾</p><br data-v-9c1d69b3><p class="fz28" data-v-9c1d69b3>10. 實例方法 replace 用於替換字串, 支持正則匹配</p><br data-v-9c1d69b3><p class="fz28" data-v-9c1d69b3>11. 實例方法 match 用於查找字串, 支持正則匹配</p><br data-v-9c1d69b3><div class="bgcVS" data-v-9c1d69b3><div data-v-9c1d69b3><span class="function" data-v-9c1d69b3>const </span><span class="word" data-v-9c1d69b3>tea</span> <span class="then" data-v-9c1d69b3>=</span><span class="src" data-v-9c1d69b3>&quot;50g的飲料,100g茶葉&quot;</span></div><span class="comment" data-v-9c1d69b3>// 1.把字串轉成數組</span><div data-v-9c1d69b3><span class="word" data-v-9c1d69b3>console.</span><span class="variable" data-v-9c1d69b3>log</span> <span class="brackets" data-v-9c1d69b3>(</span><span class="word" data-v-9c1d69b3>tea.</span><span class="variable" data-v-9c1d69b3>split</span><span class="brackets" data-v-9c1d69b3>(</span> <span class="src" data-v-9c1d69b3>&quot;,&quot;</span><span class="brackets" data-v-9c1d69b3>)) </span><span class="comment" data-v-9c1d69b3>// [ &quot;50g的飲料&quot;, &quot;100g茶葉&quot; ]</span></div><span class="comment" data-v-9c1d69b3>// 2. 有幾條數據 我就生成幾個 ＜span&gt;</span><div data-v-9c1d69b3><span class="word" data-v-9c1d69b3>tea.</span><span class="variable" data-v-9c1d69b3>split</span><span class="brackets" data-v-9c1d69b3>(</span> <span class="src" data-v-9c1d69b3>&quot;,&quot;</span><span class="brackets" data-v-9c1d69b3>)</span><span class="variable" data-v-9c1d69b3>.map</span><span class="brackets" data-v-9c1d69b3>(</span><span class="function" data-v-9c1d69b3>function </span><span class="brackets" data-v-9c1d69b3>(</span> <span class="word" data-v-9c1d69b3>item</span><span class="brackets" data-v-9c1d69b3>){ </span><span class="comment" data-v-9c1d69b3>//item是裡面的每一個值</span></div><div class="pTwo" data-v-9c1d69b3><div class="dis" data-v-9c1d69b3><div data-v-9c1d69b3><span class="then" data-v-9c1d69b3>return </span><span class="src" data-v-9c1d69b3>`＜span&gt;贈品</span><span class="then" data-v-9c1d69b3>${</span> <span class="word" data-v-9c1d69b3>item</span><span class="then" data-v-9c1d69b3>}</span> <span class="src" data-v-9c1d69b3>＜/span&gt;`</span></div><div class="comment" data-v-9c1d69b3><span data-v-9c1d69b3>//贈品50g的飲料</span><br data-v-9c1d69b3><span data-v-9c1d69b3>//贈品100g茶葉</span></div></div></div><span class="brackets" data-v-9c1d69b3>})</span><div data-v-9c1d69b3><span class="function" data-v-9c1d69b3>const </span><span class="word" data-v-9c1d69b3>str</span> <span class="then" data-v-9c1d69b3>=</span><span class="word" data-v-9c1d69b3>tea.</span><span class="variable" data-v-9c1d69b3>split</span><span class="brackets" data-v-9c1d69b3>(</span> <span class="src" data-v-9c1d69b3>&quot;,&quot;</span><span class="brackets" data-v-9c1d69b3>)</span><span class="variable" data-v-9c1d69b3>.map</span><span class="brackets" data-v-9c1d69b3>(</span><span class="function" data-v-9c1d69b3>function </span><span class="brackets" data-v-9c1d69b3>(</span> <span class="word" data-v-9c1d69b3>item</span><span class="brackets" data-v-9c1d69b3>){ </span></div><div class="pTwo" data-v-9c1d69b3><div data-v-9c1d69b3><span class="then" data-v-9c1d69b3>return </span><span class="src" data-v-9c1d69b3>`＜span&gt;贈品</span><span class="then" data-v-9c1d69b3>${</span> <span class="word" data-v-9c1d69b3>item</span><span class="then" data-v-9c1d69b3>}</span> <span class="src" data-v-9c1d69b3>＜/span&gt;`</span></div></div><span class="brackets" data-v-9c1d69b3>})</span><div data-v-9c1d69b3><span class="word" data-v-9c1d69b3>console.</span><span class="variable" data-v-9c1d69b3>log</span> <span class="brackets" data-v-9c1d69b3>(</span><span class="word" data-v-9c1d69b3>arr</span> <span class="brackets" data-v-9c1d69b3>) </span><span class="comment" data-v-9c1d69b3>[&quot;＜span&gt;贈品50g的飲料＜/span&gt;&quot;,&quot;＜span&gt;贈品100g茶葉＜/span&gt;&quot;]</span></div><br data-v-9c1d69b3><div class="comment" data-v-9c1d69b3>數組不能直接往盒子加</div><div class="comment" data-v-9c1d69b3>想要改成字串</div><div data-v-9c1d69b3><span class="function" data-v-9c1d69b3>const </span><span class="word" data-v-9c1d69b3>str</span> <span class="then" data-v-9c1d69b3>=</span><span class="word" data-v-9c1d69b3>tea.</span><span class="variable" data-v-9c1d69b3>split</span><span class="brackets" data-v-9c1d69b3>(</span> <span class="src" data-v-9c1d69b3>&quot;,&quot;</span><span class="brackets" data-v-9c1d69b3>)</span><span class="variable" data-v-9c1d69b3>.map</span><span class="brackets" data-v-9c1d69b3>(</span><span class="function" data-v-9c1d69b3>function </span><span class="brackets" data-v-9c1d69b3>(</span> <span class="word" data-v-9c1d69b3>item</span><span class="brackets" data-v-9c1d69b3>){ </span></div><div class="pTwo" data-v-9c1d69b3><div data-v-9c1d69b3><span class="then" data-v-9c1d69b3>return </span><span class="src" data-v-9c1d69b3>`＜span&gt;贈品</span><span class="then" data-v-9c1d69b3>${</span> <span class="word" data-v-9c1d69b3>item</span><span class="then" data-v-9c1d69b3>}</span> <span class="src" data-v-9c1d69b3>＜/span&gt;`</span></div></div><div data-v-9c1d69b3><span class="brackets" data-v-9c1d69b3>})</span><span class="variable" data-v-9c1d69b3>.join</span><span class="brackets" data-v-9c1d69b3>(</span> <span class="src" data-v-9c1d69b3>&quot;&quot;</span><span class="brackets" data-v-9c1d69b3>)</span></div><div data-v-9c1d69b3><span class="word" data-v-9c1d69b3>console.</span><span class="variable" data-v-9c1d69b3>log</span> <span class="brackets" data-v-9c1d69b3>(</span><span class="word" data-v-9c1d69b3>str</span> <span class="brackets" data-v-9c1d69b3>)</span></div><span class="comment" data-v-9c1d69b3>＜span&gt;贈品50g的飲料＜/span&gt;＜span&gt;贈品100g茶葉＜/span&gt;</span><div data-v-9c1d69b3><span class="word" data-v-9c1d69b3>document.</span><span class="variable" data-v-9c1d69b3>querySelector</span><span class="brackets" data-v-9c1d69b3>(</span> <span class="src" data-v-9c1d69b3>&quot;div&quot;</span><span class="brackets" data-v-9c1d69b3>)</span><span class="variable" data-v-9c1d69b3>.innerHTML</span><span class="then" data-v-9c1d69b3>=</span> <span class="word" data-v-9c1d69b3>str</span></div><br data-v-9c1d69b3><br data-v-9c1d69b3><p data-v-9c1d69b3>轉成箭頭函數</p><br data-v-9c1d69b3><div data-v-9c1d69b3><span class="function" data-v-9c1d69b3>const </span><span class="word" data-v-9c1d69b3>tea</span> <span class="then" data-v-9c1d69b3>=</span><span class="src" data-v-9c1d69b3>&quot;50g的飲料,100g茶葉&quot;</span></div><br data-v-9c1d69b3><div data-v-9c1d69b3><span class="word" data-v-9c1d69b3>tea.</span><span class="variable" data-v-9c1d69b3>split</span><span class="brackets" data-v-9c1d69b3>(</span> <span class="then" data-v-9c1d69b3>&quot;,&quot;</span><span class="brackets" data-v-9c1d69b3>)</span><span class="variable" data-v-9c1d69b3>.map</span><span class="brackets" data-v-9c1d69b3>(</span> <span class="word" data-v-9c1d69b3>item</span><span class="function" data-v-9c1d69b3>=&gt;</span><span class="src" data-v-9c1d69b3>`＜span&gt;贈品</span><span class="then" data-v-9c1d69b3>${</span> <span class="word" data-v-9c1d69b3>item</span><span class="then" data-v-9c1d69b3>}</span><span class="src" data-v-9c1d69b3>＜/span&gt;＜br&gt;`</span><span class="brackets" data-v-9c1d69b3>)</span><span class="variable" data-v-9c1d69b3>.join</span><span class="brackets" data-v-9c1d69b3>(</span> <span class="src" data-v-9c1d69b3>&quot;&quot;</span><span class="brackets" data-v-9c1d69b3>)</span></div><br data-v-9c1d69b3><div data-v-9c1d69b3><span class="word" data-v-9c1d69b3>document.</span><span class="variable" data-v-9c1d69b3>querySelector</span><span class="brackets" data-v-9c1d69b3>(</span> <span class="word" data-v-9c1d69b3>&quot;div&quot;</span><span class="brackets" data-v-9c1d69b3>)</span><span class="variable" data-v-9c1d69b3>.innerHTML</span><span class="then" data-v-9c1d69b3>=</span><span class="word" data-v-9c1d69b3>tea.</span><span class="variable" data-v-9c1d69b3>split</span><span class="brackets" data-v-9c1d69b3>(</span> <span class="then" data-v-9c1d69b3>&quot;,&quot;</span><span class="brackets" data-v-9c1d69b3>)</span><span class="variable" data-v-9c1d69b3>.map</span><span class="brackets" data-v-9c1d69b3>(</span> <span class="word" data-v-9c1d69b3>item</span><span class="function" data-v-9c1d69b3>=&gt;</span><span class="src" data-v-9c1d69b3>`＜span&gt;贈品</span><span class="then" data-v-9c1d69b3>${</span> <span class="word" data-v-9c1d69b3>item</span><span class="then" data-v-9c1d69b3>}</span><span class="src" data-v-9c1d69b3>＜/span&gt;＜br&gt;`</span><span class="brackets" data-v-9c1d69b3>)</span><span class="variable" data-v-9c1d69b3>.join</span><span class="brackets" data-v-9c1d69b3>(</span> <span class="src" data-v-9c1d69b3>&quot;&quot;</span><span class="brackets" data-v-9c1d69b3>)</span></div></div><p class="fz28 cor36" data-v-9c1d69b3>Number</p><p class="fz28" data-v-9c1d69b3>1. toFixed() 設置保留小數位的長度</p><div class="bgcVS" data-v-9c1d69b3><div data-v-9c1d69b3><span class="function" data-v-9c1d69b3>const </span><span class="word" data-v-9c1d69b3>num</span> <span class="then" data-v-9c1d69b3>=</span><span class="number" data-v-9c1d69b3>10.123</span></div><div data-v-9c1d69b3><span class="word" data-v-9c1d69b3>console.</span><span class="variable" data-v-9c1d69b3>log</span> <span class="brackets" data-v-9c1d69b3>(</span><span class="word" data-v-9c1d69b3>num.toFixed</span><span class="brackets" data-v-9c1d69b3>()) </span><span class="comment" data-v-9c1d69b3>// 10 // 四捨五入到整數位</span></div><div data-v-9c1d69b3><span class="word" data-v-9c1d69b3>console.</span><span class="variable" data-v-9c1d69b3>log</span> <span class="brackets" data-v-9c1d69b3>(</span><span class="word" data-v-9c1d69b3>num.toFixed</span><span class="brackets" data-v-9c1d69b3>(</span> <span class="number" data-v-9c1d69b3>2</span><span class="brackets" data-v-9c1d69b3> )) </span><span class="comment" data-v-9c1d69b3>// 10.12</span></div><div data-v-9c1d69b3><span class="function" data-v-9c1d69b3>const </span><span class="word" data-v-9c1d69b3>integer</span> <span class="then" data-v-9c1d69b3>=</span><span class="number" data-v-9c1d69b3>10</span></div><div data-v-9c1d69b3><span class="word" data-v-9c1d69b3>console.</span><span class="variable" data-v-9c1d69b3>log</span> <span class="brackets" data-v-9c1d69b3>(</span><span class="word" data-v-9c1d69b3>num.toFixed</span><span class="brackets" data-v-9c1d69b3>(</span> <span class="number" data-v-9c1d69b3>2</span><span class="brackets" data-v-9c1d69b3> )) </span><span class="comment" data-v-9c1d69b3>// 10.00</span></div></div><p class="fz28" data-v-9c1d69b3> 2. Math.floor()：無條件捨去，回傳大於所給數字的最小整數 </p><br data-v-9c1d69b3><br data-v-9c1d69b3><p class="fz28" data-v-9c1d69b3></p><p class="fz28" data-v-9c1d69b3></p><p class="fz28" data-v-9c1d69b3></p><p class="fz28" data-v-9c1d69b3></p><p class="fz28" data-v-9c1d69b3></p><p class="fz28" data-v-9c1d69b3></p><p class="fz28" data-v-9c1d69b3></p><p class="fz28" data-v-9c1d69b3></p><p class="fz28" data-v-9c1d69b3></p><p class="fz28" data-v-9c1d69b3></p><p class="fz28" data-v-9c1d69b3></p><p class="fz28" data-v-9c1d69b3></p><p class="fz28" data-v-9c1d69b3></p><p class="fz28" data-v-9c1d69b3></p><p class="fz28" data-v-9c1d69b3></p><p class="fz28" data-v-9c1d69b3></p><p class="fz28" data-v-9c1d69b3></p><p class="fz28" data-v-9c1d69b3></p><p class="fz28" data-v-9c1d69b3></p><p class="fz28" data-v-9c1d69b3></p><p class="fz28" data-v-9c1d69b3></p><p class="fz28" data-v-9c1d69b3></p><p class="fz28" data-v-9c1d69b3></p><p class="fz28" data-v-9c1d69b3></p><p class="fz28" data-v-9c1d69b3></p><p class="fz28" data-v-9c1d69b3></p><p class="fz28" data-v-9c1d69b3></p><p class="fz28" data-v-9c1d69b3></p><p class="fz28" data-v-9c1d69b3></p><p class="fz28" data-v-9c1d69b3></p><p class="fz28" data-v-9c1d69b3></p><p class="fz28" data-v-9c1d69b3></p><p class="fz28" data-v-9c1d69b3></p><p class="fz28" data-v-9c1d69b3></p><p class="fz28" data-v-9c1d69b3></p><p class="fz28" data-v-9c1d69b3></p><p class="fz28" data-v-9c1d69b3></p><p class="fz28" data-v-9c1d69b3></p><p class="fz28" data-v-9c1d69b3></p><p class="fz28" data-v-9c1d69b3></p><p class="fz28" data-v-9c1d69b3></p><p class="fz28" data-v-9c1d69b3></p><p class="fz28" data-v-9c1d69b3></p><p class="fz28" data-v-9c1d69b3></p><p class="fz28" data-v-9c1d69b3></p>',80),N=i(()=>a("div",{class:"toTopButton"},[a("div",{class:"disCen"},"___"),a("div",{class:"disCen"},"▲")],-1)),F=[N],$=i(()=>a("div",{class:"toBotButton"},[a("div",{class:"disCen"},"▼"),a("div",{class:"disCen"},"￣")],-1)),B=[$],H={__name:"JsPageThreeFive",setup(t){const n=m(!1);window.addEventListener("scroll",function(){n.value=window.scrollY>0});function u(){window.scrollTo({top:0,left:0,behavior:"smooth"})}function w(){window.scrollTo({top:999999,left:0,behavior:"smooth"})}function d(b){window.scrollTo({top:document.getElementById(`${b}`).offsetTop,behavior:"smooth"})}return(b,s)=>{const f=k("RouterLink");return z(),h(g,null,[a("section",null,[a("div",S,[a("div",_,[a("div",V,[a("div",{onClick:s[0]||(s[0]=c=>d("threeobject001")),class:"leftNavText"}," 創建物件 "),a("div",{onClick:s[1]||(s[1]=c=>d("threeobject002")),class:"leftNavText"}," 構造函數 "),a("div",{onClick:s[2]||(s[2]=c=>d("threeobject003")),class:"leftNavText"}," new做了什麼 "),a("div",{onClick:s[3]||(s[3]=c=>d("threeobject004")),class:"leftNavText"}," 實例&靜態成員 "),a("div",{onClick:s[4]||(s[4]=c=>d("threeobject005")),class:"leftNavText"}," 內置構造函數 "),a("div",{onClick:s[5]||(s[5]=c=>d("")),class:"leftNavText"})])])]),a("div",C,[a("div",L,[a("div",x,[O,a("div",null,[p(f,{to:"/js/method",class:"fz34"},{default:v(()=>[q("Array 方法")]),_:1})]),P])])])]),a("div",null,[l(p(o,{name:"fade",tag:"div"},{default:v(()=>[a("div",{onClick:u,class:"toTop"},F)]),_:1},512),[[e,n.value]]),l(p(o,{name:"fade",tag:"div"},{default:v(()=>[a("div",{onClick:w,class:"toBot"},B)]),_:1},512),[[e,n.value]])])],64)}}},I=y(H,[["__scopeId","data-v-9c1d69b3"]]);export{I as default};
