import{e as c,o as b,c as u,a,h as v,v as i,b as t,w as o,T as r,F as g,f,p as m,d as h}from"./index-2e4f8d1f.js";import{_ as q}from"./_plugin-vue_export-helper-c27b6911.js";const n=e=>(m("data-v-e95ae228"),e=e(),h(),e),p=f('<section data-v-e95ae228><div class="leftNav" data-v-e95ae228><div class="leftNavContainer" data-v-e95ae228><div class="leftNavLayout" data-v-e95ae228><br data-v-e95ae228><br data-v-e95ae228><div class="leftNavText" data-v-e95ae228></div><div class="leftNavText" data-v-e95ae228></div><div class="leftNavText" data-v-e95ae228></div><div class="leftNavText" data-v-e95ae228></div></div></div></div><div class="Main" data-v-e95ae228><div class="mainContainer" data-v-e95ae228><div class="mainLayout" data-v-e95ae228><br data-v-e95ae228><br data-v-e95ae228><div class="cardTitle cor36" data-v-e95ae228>9.輸出結果:</div><div data-v-e95ae228>alert (true + 1); . . . // 2</div><div data-v-e95ae228>alert (&quot;name&quot; + true); . . . // nametrue</div><div data-v-e95ae228>alert (undefined + 1); . . . // NaN</div><div data-v-e95ae228>alert (typeof null); . . . // object</div><div data-v-e95ae228>alert (typeof NaN); . . . // number</div><div data-v-e95ae228>alert (typeof undefined); . . . // undefined</div><br data-v-e95ae228><div data-v-e95ae228>1.隱式轉換 true 是 1 false 是 0</div><div data-v-e95ae228>2.字符串和任何相加, 其他都變字符串, 變成連接</div><br data-v-e95ae228><br data-v-e95ae228><br data-v-e95ae228><div class="cor36" data-v-e95ae228>輸出多少?</div><div data-v-e95ae228>for ( var i=0 ; i＜3 ; i++ ) {</div><div data-v-e95ae228>. setTimeout(function(){</div><div data-v-e95ae228>. . console.log(i)</div><div data-v-e95ae228>. },1000*i)</div><div data-v-e95ae228>}</div><div data-v-e95ae228>console.log(222)</div><br data-v-e95ae228><div data-v-e95ae228>setTimeout 進入事件循環, 而for循環是同步的</div><div data-v-e95ae228>第一次 i=0 , 0＜3 , 1000*0 的 setTime 進入事件循環列隊</div><div data-v-e95ae228>第二次 i=1 , 1＜3 , 1000*1 的 setTime 進入事件循環列隊</div><div data-v-e95ae228>第三次 i=2 , 2＜3 , 1000*2 的 setTime 進入事件循環列隊</div><div data-v-e95ae228>等for執行完才執行 事件循環裡的 setTimeout</div><div data-v-e95ae228>i=3 跳出循環</div><div data-v-e95ae228>結果</div><div data-v-e95ae228>222</div><div data-v-e95ae228>3</div><div data-v-e95ae228>隔1秒再打印3</div><div data-v-e95ae228>隔1秒再打印3</div><br data-v-e95ae228><br data-v-e95ae228><br data-v-e95ae228><div class="cor36" data-v-e95ae228>輸出多少?</div><div data-v-e95ae228>setTimeout(function(){</div><div data-v-e95ae228>. console.log(&quot;1&quot;);</div><div data-v-e95ae228>})</div><div data-v-e95ae228>new Promise((resolve)=&gt;{</div><div data-v-e95ae228>. console.log( &quot;1 promise 1&quot;);</div><div data-v-e95ae228>. resolve();</div><div data-v-e95ae228>}).then(()=&gt;{</div><div data-v-e95ae228>. console.log(&quot;微1&quot;)</div><div data-v-e95ae228>}).then(()=&gt;{</div><div data-v-e95ae228>. console.log(&quot;微2&quot;)</div><div data-v-e95ae228>})</div><div data-v-e95ae228>console.log(2);</div><br data-v-e95ae228><div data-v-e95ae228>同步 &gt; 微(事件循環) &gt; 宏 &gt; 微 ...</div><div data-v-e95ae228>console 同步 , promise.them 才是微</div><div data-v-e95ae228>第一個打印: 1 promise 1</div><div data-v-e95ae228>第二個打印: 2</div><div data-v-e95ae228>微任務 .then</div><div data-v-e95ae228>第三個打印: 微1</div><div data-v-e95ae228>第四個打印: 微2</div><div data-v-e95ae228>宏任務 setTimeout</div><div data-v-e95ae228>第五個打印: 1</div><br data-v-e95ae228><br data-v-e95ae228><br data-v-e95ae228><div class="cor36" data-v-e95ae228>輸出多少?</div><div data-v-e95ae228>Promise.resolve(&quot;333&quot;).then(res=&gt;{</div><div data-v-e95ae228>. console.log( res );</div><div data-v-e95ae228>. setTimeout(()=&gt;{</div><div data-v-e95ae228>. . console.log(&quot;Promise setTimeout&quot;)</div><div data-v-e95ae228>. },0)</div><div data-v-e95ae228>})</div><div data-v-e95ae228>setTimeout(()=&gt;{</div><div data-v-e95ae228>. console.log(111);</div><div data-v-e95ae228>. Promise.resolve(&quot;setTimeout Promise&quot;).then(res=&gt;{</div><div data-v-e95ae228>. . console.log( res );</div><div data-v-e95ae228>. })</div><div data-v-e95ae228>},0)</div><div data-v-e95ae228>console.log( 222 );</div><br data-v-e95ae228><div data-v-e95ae228>同步 &gt; 微(事件循環) &gt; 宏 &gt; 微 &gt; 宏 ...</div><div data-v-e95ae228>1.分同步異步 &gt; 先執行同步 &gt; 打印222</div><div data-v-e95ae228>2.先推微再推宏 &gt; 執行棧順序 &gt; 微Promise.then 宏setTimeout</div><div data-v-e95ae228>3.執行微 打印333</div><div data-v-e95ae228> 4.遇到promise推了一個setTimeout &gt; 目前2個宏 &gt; 誰先 &gt; WEBapi先推先出 &gt; 111先 </div><div data-v-e95ae228>5.執行宏 打印111</div><div data-v-e95ae228> 6.這個宏任務推了一個微任務Promise.then.setTimeout &gt; 微任務插隊宏任務 </div><div data-v-e95ae228>7.打印setTimeoutPromise</div><div data-v-e95ae228>8.最後執行宏任務打印Promise setTimeout</div><br data-v-e95ae228><br data-v-e95ae228><br data-v-e95ae228><div class="cor36" data-v-e95ae228>輸出多少?</div><div data-v-e95ae228>(function(){</div><div data-v-e95ae228>. var a = b = 10;</div><div data-v-e95ae228>})()</div><div data-v-e95ae228>console.log(a) . . . // a is not defined</div><div data-v-e95ae228> console.log(b) . . . // 10 b=10 沒寫默認window.b=10, 相當於全局var b=10 </div><br data-v-e95ae228><br data-v-e95ae228><br data-v-e95ae228><div class="cor36" data-v-e95ae228>輸出多少?</div><div data-v-e95ae228>function c(){</div><div data-v-e95ae228>. var b = 1</div><div data-v-e95ae228>. function a(){</div><div data-v-e95ae228>. . console.log(b)</div><div data-v-e95ae228>. . var b = 2;</div><div data-v-e95ae228>. . console.log(b)</div><div data-v-e95ae228>. }</div><div data-v-e95ae228>. a()</div><div data-v-e95ae228>. console.log(b)</div><div data-v-e95ae228>}</div><div data-v-e95ae228>c()</div><br data-v-e95ae228><div data-v-e95ae228>先看本層作用域有沒有此變量 (注意變量提升)</div><div data-v-e95ae228>a()裡面有var b提升, 第一個console.log(b) . . . // undefined</div><div data-v-e95ae228>第二個console.log(b) . . . // 2 因為上面有</div><div data-v-e95ae228>第三個console.log(b)本層有是 1</div><br data-v-e95ae228><br data-v-e95ae228><br data-v-e95ae228><div class="cor36" data-v-e95ae228>輸出多少?</div><div data-v-e95ae228>var name = &quot;a&quot;;</div><div data-v-e95ae228>(function(){</div><div data-v-e95ae228>. if( typeof name == &quot;undefined&quot; ){</div><div data-v-e95ae228>. . var name = &quot;b&quot;;</div><div data-v-e95ae228>. . console.log(&quot;111&quot;+name);</div><div data-v-e95ae228>. } else {</div><div data-v-e95ae228>. . console.log(&quot;222&quot;+name);</div><div data-v-e95ae228>. }</div><div data-v-e95ae228>})()</div><br data-v-e95ae228><div data-v-e95ae228>先看本層作用域有沒有此變量 (注意變量提升)</div><div data-v-e95ae228>注意JS除了函數外, JS沒有塊級作用域</div><div data-v-e95ae228>var先變量提升到function, 就算if( false )也是提升</div><div data-v-e95ae228>所以 var name, 所以name == undefined, 所以打印 111b</div><br data-v-e95ae228><br data-v-e95ae228><br data-v-e95ae228><div class="cor36" data-v-e95ae228>輸出多少?</div><div data-v-e95ae228>var bar = 1;</div><div data-v-e95ae228>function test(){</div><div data-v-e95ae228>. console.log( bar )</div><div data-v-e95ae228>. var bar = 2;</div><div data-v-e95ae228>. console.log( bar )</div><div data-v-e95ae228>}</div><div data-v-e95ae228>test();</div><br data-v-e95ae228><div data-v-e95ae228>先看本層作用域有沒有此變量 (注意變量提升)</div><div data-v-e95ae228>第一個bar undefined</div><div data-v-e95ae228>第二個bar 2</div><br data-v-e95ae228><br data-v-e95ae228><br data-v-e95ae228><div class="cor36" data-v-e95ae228>輸出多少?</div><div data-v-e95ae228>function fun(){</div><div data-v-e95ae228>. a = 10;</div><div data-v-e95ae228>. console.log( a );</div><div data-v-e95ae228>. var a = 20;</div><div data-v-e95ae228>. console.log( a );</div><div data-v-e95ae228>}</div><div data-v-e95ae228>fun(); . . . // 第一個打印 10 , 第二個打印 20</div><br data-v-e95ae228><br data-v-e95ae228><br data-v-e95ae228><div class="cor36" data-v-e95ae228>輸出多少?</div><div data-v-e95ae228>var obj1 = {</div><div data-v-e95ae228>. a:&quot;hellow&quot;</div><div data-v-e95ae228>}</div><div data-v-e95ae228>var obj2 = obj1;</div><div data-v-e95ae228>obj2.a= &quot;world&quot;;</div><div data-v-e95ae228>console.log(obj1);</div><div data-v-e95ae228>(function(){</div><div data-v-e95ae228>. console.log( a );</div><div data-v-e95ae228>. var a = 1;</div><div data-v-e95ae228>})();</div><div data-v-e95ae228>第一個打印 {a:world}</div><div data-v-e95ae228>第二個打印 undefined</div><br data-v-e95ae228><br data-v-e95ae228><br data-v-e95ae228><div class="cor36" data-v-e95ae228>輸出多少?</div><div data-v-e95ae228>var a = {}</div><div data-v-e95ae228>var b = {</div><div data-v-e95ae228>. key: &quot;a&quot;</div><div data-v-e95ae228>}</div><div data-v-e95ae228>var c = {</div><div data-v-e95ae228>. key: &quot;c&quot;</div><div data-v-e95ae228>}</div><div data-v-e95ae228>a[b] = &quot;123&quot;;</div><div data-v-e95ae228>a[c] = &quot;456&quot;;</div><div data-v-e95ae228>console.log( a[b] )</div><br data-v-e95ae228><div data-v-e95ae228>這相當於 let m = {}</div><div data-v-e95ae228>m.a = 1;</div><div data-v-e95ae228>m.a = 2;</div><div data-v-e95ae228>往物件裡面加內容,物件的key為字串</div><div data-v-e95ae228>結果為 456</div><div data-v-e95ae228>for(var k in a){</div><div data-v-e95ae228>. console.log( typeof k )</div><div data-v-e95ae228>}</div><br data-v-e95ae228><br data-v-e95ae228><br data-v-e95ae228><div class="cor36" data-v-e95ae228>輸出多少?</div><div data-v-e95ae228>function Foo(){</div><div data-v-e95ae228>. getName = function(){console.log(1)}</div><div data-v-e95ae228>. return this;</div><div data-v-e95ae228>}</div><div data-v-e95ae228>Foo.getName = function(){console.log(2)}</div><div data-v-e95ae228>Foo.prototype.getName = function(){console.log(3)}</div><div data-v-e95ae228>var getName = function(){console.log(4)}</div><div data-v-e95ae228>function getName(){</div><div data-v-e95ae228>. console.log(5)</div><div data-v-e95ae228>}</div><br data-v-e95ae228><div data-v-e95ae228>Foo.getName(); . . . // 2</div><div data-v-e95ae228>getName(); . . . // 4</div><div data-v-e95ae228>Foo().getName();</div><div data-v-e95ae228>getName();</div><div data-v-e95ae228>new Foo().getName();</div><br data-v-e95ae228><div data-v-e95ae228>1.getName=function...是全局的window.getName=...</div><br data-v-e95ae228><div data-v-e95ae228>2.Foo.getName() 先找函數本身 打印出 2</div><br data-v-e95ae228><div data-v-e95ae228>3.Foo.getName() 的 Foo 沒有加括號代表他沒有執行</div><br data-v-e95ae228><div data-v-e95ae228> 4.getName() 找到變量 var getName =.. 和函數 function getName(){.. </div><div data-v-e95ae228>(因作用域) 普通變量 &gt; 函數 . . . 所以打印出 4</div><br data-v-e95ae228><div data-v-e95ae228>5.Foo().getName();</div><div data-v-e95ae228>Foo() 先執行 做 //getName = function(){console.log(1)}</div><div data-v-e95ae228>然後 return this . . . return 出 window</div><div data-v-e95ae228>所以是 window.getName() . . . 因上上行 所以打印出 1</div><br data-v-e95ae228><div data-v-e95ae228>6.getName(); . . . 因上上上行覆蓋, 所以打印出 1</div><br data-v-e95ae228><div data-v-e95ae228>7.new Foo().getName(); 物件找方法</div><div data-v-e95ae228> 先在物件本身找 &gt; 構造函數中找 &gt; 物件原型中找 &gt; 構造函數原型中找 &gt; 物件上一層原型查找 </div><div data-v-e95ae228>本身沒有</div><div data-v-e95ae228>構造函數 function Foo(){ 本身裡不是 this. getName是 window.</div><div data-v-e95ae228>物件原型中找 __proto__ 沒有</div><div data-v-e95ae228>物件原型和構造函數原型他們是一個原型</div><div data-v-e95ae228>所以看構造函數原型 , 打印出 3</div><div data-v-e95ae228>Foo.prototype.getName = function(){console.log(3)}</div><br data-v-e95ae228><br data-v-e95ae228><br data-v-e95ae228><div class="cor36" data-v-e95ae228>輸出多少?</div><div data-v-e95ae228>var o = {</div><div data-v-e95ae228>. a:10,</div><div data-v-e95ae228>. b:{</div><div data-v-e95ae228>. . fn:function(){</div><div data-v-e95ae228>. . . console.log( this.a );</div><div data-v-e95ae228>. . . console.log( this );</div><div data-v-e95ae228>. . }</div><div data-v-e95ae228>. }</div><div data-v-e95ae228>}</div><div data-v-e95ae228>o.b.fn()</div><br data-v-e95ae228><div data-v-e95ae228>重點看誰執行 fn, 所以 fn 裡面的 this 指向 b</div><div data-v-e95ae228>console.log( this.a ); . . . 打印 undefined</div><div data-v-e95ae228>console.log( this ); . . . 打印 fn</div><br data-v-e95ae228><br data-v-e95ae228><br data-v-e95ae228><div class="cor36" data-v-e95ae228>輸出多少?</div><div data-v-e95ae228>window.name = &quot;ByteDance&quot;;</div><div data-v-e95ae228>function A(){</div><div data-v-e95ae228>. this.name = 123;</div><div data-v-e95ae228>}</div><div data-v-e95ae228>A.prototype.getA = function(){</div><div data-v-e95ae228>. console.log( this );</div><div data-v-e95ae228>. return this.name + 1;</div><div data-v-e95ae228>}</div><div data-v-e95ae228>let a = new A();</div><div data-v-e95ae228>let funcA = a.getA;</div><div data-v-e95ae228>funcA();</div><div data-v-e95ae228>console.log( funcA() )</div><br data-v-e95ae228><div data-v-e95ae228>先注意 let funcA = a.getA 的 a.getA 有沒有括號,差很大</div><div data-v-e95ae228>a.getA 沒括號 裡面代碼不執行 返回函數體</div><div data-v-e95ae228> a.getA 沒執行, 相當於把這個 A.prototype.getA = function(){ 函數賦給了 funcA </div><div data-v-e95ae228> funcA() 執行了 A.prototype.getA = function(){ 裡面的 console.log(this) 打印 window </div><div data-v-e95ae228>console.log( funcA() ) 要打印 return this.name + 1;</div><div data-v-e95ae228>而 this 代表 window, this.name 找到 &quot;ByteDance&quot;</div><div data-v-e95ae228>console.log( funcA() ) 打印出 &quot;ByteDance1&quot;</div><br data-v-e95ae228><br data-v-e95ae228><br data-v-e95ae228><div class="cor36" data-v-e95ae228>輸出多少?</div><div data-v-e95ae228>window.name = &quot;ByteDance&quot;;</div><div data-v-e95ae228>function A(){</div><div data-v-e95ae228>. this.name = 123;</div><div data-v-e95ae228>}</div><div data-v-e95ae228>A.prototype.getA = function(){</div><div data-v-e95ae228>. console.log( this );</div><div data-v-e95ae228>. return this.name + 1;</div><div data-v-e95ae228>}</div><div data-v-e95ae228>let a = new A();</div><div data-v-e95ae228>let funcA = a.getA();</div><div data-v-e95ae228>funcA;</div><br data-v-e95ae228><div data-v-e95ae228>let funcA = a.getA() 調用直接執行</div><div data-v-e95ae228>執行 A.prototype.getA = function(){</div><div data-v-e95ae228>裡面的 console.log( this ) this 指 A</div><div data-v-e95ae228>打印出 A{name: 123}</div><div data-v-e95ae228>funcA沒加括號 裡面代碼不執行 有return則返回函數體</div><br data-v-e95ae228><br data-v-e95ae228><br data-v-e95ae228><div class="cor36" data-v-e95ae228>輸出多少?</div><div data-v-e95ae228>var length = 10;</div><div data-v-e95ae228>function fn(){</div><div data-v-e95ae228>. return this.length</div><div data-v-e95ae228>}</div><div data-v-e95ae228>var obj = {</div><div data-v-e95ae228>. length: 5,</div><div data-v-e95ae228>. test1: function(){</div><div data-v-e95ae228>. . return fn();</div><div data-v-e95ae228>. }</div><div data-v-e95ae228>}</div><div data-v-e95ae228>obj.test2 = fn;</div><div data-v-e95ae228>console.log( obj.test1() );</div><div data-v-e95ae228>console.log( fn()===obj.test2() );</div><div data-v-e95ae228>console.log( obj.test1() == obj.test2() );</div><br data-v-e95ae228><div data-v-e95ae228>注意 obj.test2 = fn 沒加掛號 相當於 把這個函數賦給了</div><div data-v-e95ae228>沒加掛號 裡面代碼不執行 有return則返回函數體</div><div data-v-e95ae228>相當於 把這個 function fn(){ 函數賦給了 obj.test2</div><div data-v-e95ae228>所以 obj 多了一個 test2: function</div><br data-v-e95ae228><div data-v-e95ae228>console.log( obj.test1() )</div><div data-v-e95ae228>test1 return fn() , fn帶括號要執行</div><div data-v-e95ae228>fn return this.length, 這個this 指向 window</div><div data-v-e95ae228>return 10, return 10+1</div><div data-v-e95ae228>console.log( obj.test1() ) 打印出 11</div><br data-v-e95ae228><div data-v-e95ae228>console.log( fn()===obj.test2() )</div><div data-v-e95ae228>obj.test2() 裡面 return this.length,</div><div data-v-e95ae228>this 指向 obj , this.length 是 5</div><div data-v-e95ae228>而 fn() 的 this 指向 window , window.length 是 10</div><div data-v-e95ae228>console.log( fn()===obj.test2() ) 是 false</div><br data-v-e95ae228><div data-v-e95ae228>console.log( obj.test1() == obj.test2() )</div><div data-v-e95ae228>obj.test2() 上面討論 5</div><div data-v-e95ae228>obj.test1() 上面討論 11</div><br data-v-e95ae228><br data-v-e95ae228><br data-v-e95ae228><br data-v-e95ae228><div class="cor36" data-v-e95ae228>如何用 indexOf 數組去重?</div><div data-v-e95ae228> indexOf() 方法會回傳給定元素於陣列中第一個被找到之索引，若不存在於陣列中則回傳 -1 </div><br data-v-e95ae228><div data-v-e95ae228>var arr2 = [ 1,2,3,2,4,1 ];</div><div data-v-e95ae228>function unique( arr ){</div><div data-v-e95ae228>. var brr = [];</div><div data-v-e95ae228>. for( var i = 0 ; i ＜ arr.length ; i++ ){</div><div data-v-e95ae228>. . if( brr.indexOf( arr[i] ) == -1 ){</div><div data-v-e95ae228>. . . brr.push( arr[i] );</div><div data-v-e95ae228>. . }</div><div data-v-e95ae228>. }</div><div data-v-e95ae228>. return brr;</div><div data-v-e95ae228>}</div><div data-v-e95ae228>console.log( unique( arr2 ) );</div><br data-v-e95ae228><div data-v-e95ae228>目標, 遍歷陣列, 看有沒有在 brr 陣列, 沒有就添加</div><div data-v-e95ae228>brr去找indexOf(arr[i])</div><div data-v-e95ae228>第一次去找brr肯定是空的(不存在)就回傳-1就把他推進brr裡面</div><div data-v-e95ae228>不是-1就不動作 完成。</div><br data-v-e95ae228><br data-v-e95ae228><br data-v-e95ae228><br data-v-e95ae228><div class="cor36" data-v-e95ae228>找出多维数组最大值?</div><div data-v-e95ae228> 大陣列中包含 4 個小陣列, 分別找到每個小陣列中的最大值, 然後串起來成新陣列 </div><div data-v-e95ae228>輸入:[</div><div data-v-e95ae228>. [ 4, 5, 1, 3, ],</div><div data-v-e95ae228>. [ 13, 27, 18, 26, ],</div><div data-v-e95ae228>. [ 32, 35, 37, 39, ],</div><div data-v-e95ae228>. [ 1000, 1001, 857, 1 ],</div><div data-v-e95ae228>]</div><div data-v-e95ae228>輸出: [ 5, 27, 39, 1001 ]</div><br data-v-e95ae228><br data-v-e95ae228><div data-v-e95ae228>function fnArr( arr ){</div><div data-v-e95ae228>. var newArr = [];</div><div data-v-e95ae228>. arr.forEach(( item, index )=&gt;{</div><div data-v-e95ae228>. . newArr.push( Math.max( ...item ) )</div><div data-v-e95ae228>. })</div><div data-v-e95ae228>. return newArr;</div><div data-v-e95ae228>}</div><div data-v-e95ae228>console.log( fnArr([</div><div data-v-e95ae228>. [ 4, 5, 1, 3, ],</div><div data-v-e95ae228>. [ 13, 27, 18, 26, ],</div><div data-v-e95ae228>. [ 32, 35, 37, 39, ],</div><div data-v-e95ae228>. [ 1000, 1001, 857, 1 ],</div><div data-v-e95ae228>]));</div><br data-v-e95ae228><div data-v-e95ae228>首先 遍歷 item 是每一項 [ 4, 5, 1, 3, ]</div><div data-v-e95ae228>取裡面最大值 Math.max(...item)</div><br data-v-e95ae228><br data-v-e95ae228><br data-v-e95ae228><div class="cor36" data-v-e95ae228> 給字串物件定義一個addPrefix函數, 當傳入一個字串時, 他會返回新的帶有指定前綴的字串, 例如: </div><div data-v-e95ae228>console.log( &quot;world&quot;.addPrefix(&quot;hello&quot;) )</div><div data-v-e95ae228>控制台輸出: &quot;helloworld&quot;</div><br data-v-e95ae228><div data-v-e95ae228>var str = &quot;你好&quot;;</div><div data-v-e95ae228>String.prototype.addTest = function(){</div><div data-v-e95ae228>. return 111;</div><div data-v-e95ae228>}</div><div data-v-e95ae228>console.log( str.addPrefix() ) . . . // 打印 111</div><br data-v-e95ae228><br data-v-e95ae228><div data-v-e95ae228>String.prototype.addTest = function(){</div><div data-v-e95ae228>. return this;</div><div data-v-e95ae228>}</div><div data-v-e95ae228>console.log( str.addPrefix() ) . . . // 打印 你好</div><br data-v-e95ae228><br data-v-e95ae228><div data-v-e95ae228>String.prototype.addTest = function(){</div><div data-v-e95ae228>. return str + this;</div><div data-v-e95ae228>}</div><div data-v-e95ae228> console.log( &quot;world&quot;.addPrefix(&quot;hello&quot;) ) . . . // 打印 worldhello </div><br data-v-e95ae228><br data-v-e95ae228><br data-v-e95ae228><br data-v-e95ae228><div class="cor36" data-v-e95ae228>判斷一個字串中出現次數最多的字符, 並統計次數</div><div data-v-e95ae228> charAt() 方法返回一个由给定索引处的单个 UTF-16 码元构成的新字符串。 </div><div data-v-e95ae228>var john = { . . . //forin複習</div><div data-v-e95ae228>. firstName: &#39;John&#39;,</div><div data-v-e95ae228>. lastName: &#39;Doe&#39;</div><div data-v-e95ae228>};</div><div data-v-e95ae228>for (var prop in john) {</div><div data-v-e95ae228>. console.log(prop + &#39;:&#39; + john[prop]);</div><div data-v-e95ae228>}</div><br data-v-e95ae228><div data-v-e95ae228>var str = &quot;aaabbbbbbbbbccccccc&quot;</div><div data-v-e95ae228>var obj = {};</div><div data-v-e95ae228>for( var i = 0 ; i ＜ str.length ; i++ ){</div><div data-v-e95ae228>. var char = str.charAt(i);</div><div data-v-e95ae228>. if( obj[ char ] ){</div><div data-v-e95ae228>. . obj[ char ]++</div><div data-v-e95ae228>. } else {</div><div data-v-e95ae228>. . obj[ char ] = 1;</div><div data-v-e95ae228>. }</div><div data-v-e95ae228>}</div><div data-v-e95ae228>console.log( obj ); . . . 每個字符和次數都統計出來了</div><br data-v-e95ae228><div data-v-e95ae228>目標 弄一個對象 把值放進去 { a:3, b:10, c:15 }</div><div data-v-e95ae228>遍歷字串, 如果 obj 沒有則 obj[ char ] = 1</div><div data-v-e95ae228>如果 obj 有則 value值++</div><br data-v-e95ae228><div data-v-e95ae228>var max = 0;</div><div data-v-e95ae228>for( var key in obj ){</div><div data-v-e95ae228>. if( max ＜ obj[ key ] ){</div><div data-v-e95ae228>. . max = obj[ key ];</div><div data-v-e95ae228>. }</div><div data-v-e95ae228>}</div><div data-v-e95ae228>console.log( max );</div><br data-v-e95ae228><div data-v-e95ae228>目標 到物件的值找最大值 { a:3, b:10, c:15 } 最大值 15</div><div data-v-e95ae228>遍歷物件 for in</div><div data-v-e95ae228>如果 max變數 小於 obj[key]</div><div data-v-e95ae228>key 是物件中每一項 a b c</div><div data-v-e95ae228>obj[key] 是統計值 3 10 15</div><div data-v-e95ae228>如果 max變數 小於 obj[key] 就賦值 就找到最大值 15</div><br data-v-e95ae228><div data-v-e95ae228>for( var key in obj ){</div><div data-v-e95ae228>. if( obj[key] == max ){</div><div data-v-e95ae228>. . console.log( &quot;最多字符是&quot; + key );</div><div data-v-e95ae228>. . console.log( &quot;出現次數&quot; + max );</div><div data-v-e95ae228>. }</div><div data-v-e95ae228>}</div><br data-v-e95ae228><div data-v-e95ae228>目標 找到最大值 15 對應的 key</div><div data-v-e95ae228>如果 obj[key] == max 就找到了</div><br data-v-e95ae228><br data-v-e95ae228><br data-v-e95ae228><br data-v-e95ae228><div class="cor36" data-v-e95ae228>輸出多少?</div><div data-v-e95ae228>function demo(){</div><div data-v-e95ae228>. var n = 2;</div><div data-v-e95ae228>. if( true ){</div><div data-v-e95ae228>. . var n = 1;</div><div data-v-e95ae228>. }</div><div data-v-e95ae228>. console.log( n );</div><div data-v-e95ae228>}</div><div data-v-e95ae228>demo(); . . . // 打印 1</div><br data-v-e95ae228><br data-v-e95ae228><br data-v-e95ae228><br data-v-e95ae228><div class="cor36" data-v-e95ae228>輸出多少?</div><div data-v-e95ae228>function demo(){</div><div data-v-e95ae228>. let n = 2;</div><div data-v-e95ae228>. if( true ){</div><div data-v-e95ae228>. . let n = 1;</div><div data-v-e95ae228>. }</div><div data-v-e95ae228>. console.log( n );</div><div data-v-e95ae228>}</div><div data-v-e95ae228>demo(); . . . // 打印 2</div><br data-v-e95ae228><br data-v-e95ae228><br data-v-e95ae228><br data-v-e95ae228><div class="cor36" data-v-e95ae228>合併</div><div data-v-e95ae228>const a = { a:1, b:4 }</div><div data-v-e95ae228>const b = { b:2, c:3 }</div><div data-v-e95ae228>let obj1 = Object.assign( a, b );</div><div data-v-e95ae228>console.log( obj1 ); . . . // { a:1, b:2, c:3 }</div><br data-v-e95ae228><br data-v-e95ae228><br data-v-e95ae228><br data-v-e95ae228><div class="cor36" data-v-e95ae228>合併</div><div data-v-e95ae228>const a = { a:1, b:4 }</div><div data-v-e95ae228>const b = { b:2, c:3 }</div><div data-v-e95ae228>let obj2 = {...a, ...b}</div><div data-v-e95ae228>console.log( obj1 ); . . . // { a:1, b:2, c:3 }</div><br data-v-e95ae228><br data-v-e95ae228></div></div></div></section>',1),w=n(()=>a("div",{class:"toTopButton"},[a("div",{class:"disCen"},"___"),a("div",{class:"disCen"},"▲")],-1)),j=[w],A=n(()=>a("div",{class:"toBotButton"},[a("div",{class:"disCen"},"▼"),a("div",{class:"disCen"},"￣")],-1)),N=[A],T={__name:"JsPageTwoTwo",setup(e){const d=c(!1);window.addEventListener("scroll",function(){d.value=window.scrollY>0});function s(){window.scrollTo({top:0,left:0,behavior:"smooth"})}function l(){window.scrollTo({top:999999,left:0,behavior:"smooth"})}return(y,_)=>(b(),u(g,null,[p,a("div",null,[v(t(r,{name:"fade",tag:"div"},{default:o(()=>[a("div",{onClick:s,class:"toTop"},j)]),_:1},512),[[i,d.value]]),v(t(r,{name:"fade",tag:"div"},{default:o(()=>[a("div",{onClick:l,class:"toBot"},N)]),_:1},512),[[i,d.value]])])],64))}},F=q(T,[["__scopeId","data-v-e95ae228"]]);export{F as default};
