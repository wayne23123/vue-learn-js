import{e as p,o as g,c as q,a,h as r,v as n,b as s,w as l,T as u,F as w,f as m,p as h,d as j}from"./index-2e4f8d1f.js";import{_ as y}from"./_plugin-vue_export-helper-c27b6911.js";const e=i=>(h("data-v-13f35e28"),i=i(),j(),i),A={class:"leftNav"},x={class:"leftNavContainer"},T={class:"leftNavLayout"},F=e(()=>a("br",null,null,-1)),N=e(()=>a("br",null,null,-1)),k=m('<div class="Main" data-v-13f35e28><div class="mainContainer" data-v-13f35e28><div class="mainLayout" data-v-13f35e28><div id="twohand001" class="cardTitle" data-v-13f35e28> 1. JS作用域考题? . . . . . . . . . . . . </div><div data-v-13f35e28>1.JS除了函數外, JS沒有塊級作用域</div><div data-v-13f35e28> 2.作用域鏈: 內部可以訪問外部的變量, 但是外部不能訪問內部的變量 </div><div data-v-13f35e28>3.注意聲明變量是用var還是沒寫 (window.)</div><div data-v-13f35e28>4.注意JS有變量提升(變量懸掛聲明)</div><div data-v-13f35e28>5.優先級: 聲明變量 &gt; 聲明普通函數 &gt; 參數 &gt; 變量提升</div><div data-v-13f35e28>面試時</div><div data-v-13f35e28>1.先看本層作用域有沒有此變量 (注意變量提升)</div><div data-v-13f35e28>2.注意JS除了函數外, JS沒有塊級作用域</div><div data-v-13f35e28>3.普通函數聲明是不看寫函數的時候順序</div><br data-v-13f35e28><div data-v-13f35e28>1.JS除了函數外, JS沒有塊級作用域</div><br data-v-13f35e28><div data-v-13f35e28>function fun(){</div><div data-v-13f35e28>. var a = 10; . . . // 這個 a 屬於函數內部的</div><div data-v-13f35e28>}</div><div data-v-13f35e28>console.log( a ) . . . // a is not defined</div><div data-v-13f35e28>fun();</div><div data-v-13f35e28>console.log( a ) . . . // a is not defined</div><br data-v-13f35e28><div data-v-13f35e28>for( var i = 0; i ＜ 10 ; i++ ){</div><div data-v-13f35e28>}</div><div data-v-13f35e28>console.log( i ); . . . // 10 在for裡面定義沒有作用域</div><br data-v-13f35e28><div data-v-13f35e28>if( true ){</div><div data-v-13f35e28>. var a = 10;</div><div data-v-13f35e28>}</div><div data-v-13f35e28>console.log( a ); . . . // 10 只有函數有作用域</div><br data-v-13f35e28><div data-v-13f35e28> 2.作用域鏈: 內部可以訪問外部的變量, 但是外部不能訪問內部的變量 </div><div data-v-13f35e28>注意: 如果內部有, 優先查找內部, 內部沒有向外層找</div><br data-v-13f35e28><div data-v-13f35e28>function fun(){</div><div data-v-13f35e28>. var a = 10;</div><div data-v-13f35e28>. function foo(){</div><div data-v-13f35e28>. . console.log( a )</div><div data-v-13f35e28>. }</div><div data-v-13f35e28>. foo();</div><div data-v-13f35e28>}</div><div data-v-13f35e28>fun(); . . . 打印10</div><br data-v-13f35e28><div data-v-13f35e28>var b = 29;</div><div data-v-13f35e28>function fun1(){</div><div data-v-13f35e28>. console.log( b );</div><div data-v-13f35e28>}</div><div data-v-13f35e28>fun1(); . . . 打印29, 內可以訪問外,但外不能訪問內</div><br data-v-13f35e28><div data-v-13f35e28>3.注意聲明變量是用var還是沒寫 (window.)</div><div data-v-13f35e28>(function(){</div><div data-v-13f35e28>. var a = b = 10;</div><div data-v-13f35e28>})()</div><div data-v-13f35e28>console.log(a) . . . // a is not defined</div><div data-v-13f35e28> console.log(b) . . . // 10 b=10 沒寫默認window.b=10, 相當於全局var b=10 </div><br data-v-13f35e28><div data-v-13f35e28>4.注意JS有變量提升(變量懸掛聲明)</div><div data-v-13f35e28>function c(){</div><div data-v-13f35e28>. var b = 1</div><div data-v-13f35e28>. function a(){</div><div data-v-13f35e28>. . console.log(b)</div><div data-v-13f35e28>. . var b = 2;</div><div data-v-13f35e28>. . console.log(b)</div><div data-v-13f35e28>. }</div><div data-v-13f35e28>. a()</div><div data-v-13f35e28>. console.log(b)</div><div data-v-13f35e28>}</div><div data-v-13f35e28>c()</div><br data-v-13f35e28><div data-v-13f35e28>先看本層作用域有沒有此變量 (注意變量提升)</div><div data-v-13f35e28>a()裡面有var b提升, 第一個console.log(b) . . . // undefined</div><div data-v-13f35e28>第二個console.log(b) . . . // 2 因為上面有</div><div data-v-13f35e28>第三個console.log(b)本層有是 1</div><br data-v-13f35e28><div class="cor36" data-v-13f35e28>輸出多少?</div><div data-v-13f35e28>var name = &quot;a&quot;;</div><div data-v-13f35e28>(function(){</div><div data-v-13f35e28>. if( typeof name == &quot;undefined&quot; ){</div><div data-v-13f35e28>. . var name = &quot;b&quot;;</div><div data-v-13f35e28>. . console.log(&quot;111&quot;+name);</div><div data-v-13f35e28>. } else {</div><div data-v-13f35e28>. . console.log(&quot;222&quot;+name);</div><div data-v-13f35e28>. }</div><div data-v-13f35e28>})()</div><br data-v-13f35e28><div data-v-13f35e28>先看本層作用域有沒有此變量 (注意變量提升)</div><div data-v-13f35e28>注意JS除了函數外, JS沒有塊級作用域</div><div data-v-13f35e28>var先變量提升到function, 就算if( false )也是提升</div><div data-v-13f35e28>所以 var name, 所以name == undefined, 所以打印 111b</div><div class="cor36" data-v-13f35e28>輸出多少?</div><div data-v-13f35e28>var bar = 1;</div><div data-v-13f35e28>function test(){</div><div data-v-13f35e28>. console.log( bar )</div><div data-v-13f35e28>. var bar = 2;</div><div data-v-13f35e28>. console.log( bar )</div><div data-v-13f35e28>}</div><div data-v-13f35e28>test();</div><br data-v-13f35e28><div data-v-13f35e28>先看本層作用域有沒有此變量 (注意變量提升)</div><div data-v-13f35e28>第一個bar undefined</div><div data-v-13f35e28>第二個bar 2</div><div class="cor36" data-v-13f35e28>輸出多少?</div><div data-v-13f35e28>function fun(){</div><div data-v-13f35e28>. var a = 10;</div><div data-v-13f35e28>. function a(){}</div><div data-v-13f35e28>. console.log( a );</div><div data-v-13f35e28>}</div><div data-v-13f35e28>fun(); . . . // 10</div><br data-v-13f35e28><div data-v-13f35e28>function fun(){</div><div data-v-13f35e28>. var a = 10;</div><div data-v-13f35e28>. var a = function(){}</div><div data-v-13f35e28>. console.log( a );</div><div data-v-13f35e28>}</div><div data-v-13f35e28>fun(); . . . // f(){}</div><br data-v-13f35e28><div data-v-13f35e28>5.優先級: 聲明變量 &gt; 聲明普通函數 &gt; 參數 &gt; 變量提升</div><div data-v-13f35e28>3.普通函數聲明是不看寫函數的時候順序</div><br data-v-13f35e28><div data-v-13f35e28>function fun(){</div><div data-v-13f35e28>. console.log( a ); . . . //f(){}</div><div data-v-13f35e28>. function a(){}</div><div data-v-13f35e28>}</div><div data-v-13f35e28>fun(); . . . 也可以先用在定義</div><br data-v-13f35e28><div data-v-13f35e28>function fun(){</div><div data-v-13f35e28>. console.log( a ); . . . //f(){}</div><div data-v-13f35e28>. var a = 10;</div><div data-v-13f35e28>. function a(){}</div><div data-v-13f35e28>}</div><div data-v-13f35e28>fun(); . . . 也可以先用在定義</div><br data-v-13f35e28><div data-v-13f35e28>function fun( a ){</div><div data-v-13f35e28>. console.log( a );</div><div data-v-13f35e28>. var a = 10;</div><div data-v-13f35e28>}</div><div data-v-13f35e28>fun( 100 ); . . . // 10</div><br data-v-13f35e28><div data-v-13f35e28>function fun( a ){</div><div data-v-13f35e28>. var a = 10;</div><div data-v-13f35e28>. function a(){}</div><div data-v-13f35e28>. console.log( a );</div><div data-v-13f35e28>}</div><div data-v-13f35e28> fun( 100 ); . . . // 10 聲明變量 &gt; 聲明普通函數 &gt; 參數 &gt; 變量提升 </div><br data-v-13f35e28><div data-v-13f35e28>function fun(){</div><div data-v-13f35e28>. a = 10;</div><div data-v-13f35e28>. console.log( a );</div><div data-v-13f35e28>}</div><div data-v-13f35e28> fun(); . . . // 打印 10 , 本層沒有向外找, 他是在外部拿到的,window.a </div><br data-v-13f35e28><div data-v-13f35e28>function fun(){</div><div data-v-13f35e28>. a = 10;</div><div data-v-13f35e28>. var a = 20;</div><div data-v-13f35e28>. console.log( a );</div><div data-v-13f35e28>}</div><div data-v-13f35e28>fun(); . . . // 打印 20 , 本層有</div><br data-v-13f35e28><div data-v-13f35e28>function fun(){</div><div data-v-13f35e28>. var a = 20;</div><div data-v-13f35e28>. a = 10;</div><div data-v-13f35e28>. console.log( a );</div><div data-v-13f35e28>}</div><div data-v-13f35e28>fun(); . . . // 打印 10 , 變量再次賦值</div><br data-v-13f35e28><div data-v-13f35e28>function fun(){</div><div data-v-13f35e28>. a = 10;</div><div data-v-13f35e28>. console.log( a );</div><div data-v-13f35e28>. var a = 20;</div><div data-v-13f35e28>. console.log( a );</div><div data-v-13f35e28>}</div><div data-v-13f35e28>fun(); . . . // 第一個打印 10 , 第二個打印 20</div><br data-v-13f35e28><br data-v-13f35e28><br data-v-13f35e28><div id="twohand002" class="cardTitle" data-v-13f35e28>2. JS物件考题</div><div data-v-13f35e28> 1.物件是通過 new 操作符構建出來, 所以物件之間不相等 (除了引用外) </div><div data-v-13f35e28>2.物件注意: 引用類型 (共同一個地址)</div><div data-v-13f35e28>3.物件的 key 都是字符串類型</div><div data-v-13f35e28>4.物件如何找屬性&amp;方法</div><div data-v-13f35e28> 先在物件本身找 &gt; 構造函數中找 &gt; 物件原型中找 &gt; 構造函數原型中找 &gt; 物件上一層原型查找 </div><br data-v-13f35e28><div data-v-13f35e28>console.log([1,2,3] === [1,2,3]) . . . // false</div><div data-v-13f35e28>new 創建新物件</div><div data-v-13f35e28>任何陣列透過 new 出來</div><br data-v-13f35e28><div data-v-13f35e28>var obj1 = {</div><div data-v-13f35e28>. a:1</div><div data-v-13f35e28>}</div><div data-v-13f35e28>var obj2 = obj1; . . . obj1 給 obj2 注意不是創建</div><div data-v-13f35e28>obj1.a = &quot;aaa&quot;; . . . 兩個都被改</div><div data-v-13f35e28>obj2.a = &quot;bbb&quot;&#39; . . . 兩個都被改</div><br data-v-13f35e28><div class="cor36" data-v-13f35e28>輸出多少?</div><div data-v-13f35e28>var obj1 = {</div><div data-v-13f35e28>. a:&quot;hellow&quot;</div><div data-v-13f35e28>}</div><div data-v-13f35e28>var obj2 = obj1;</div><div data-v-13f35e28>obj2.a= &quot;world&quot;;</div><div data-v-13f35e28>console.log(obj1);</div><div data-v-13f35e28>(function(){</div><div data-v-13f35e28>. console.log( a );</div><div data-v-13f35e28>. var a = 1;</div><div data-v-13f35e28>})();</div><div data-v-13f35e28>第一個打印 {a:world}</div><div data-v-13f35e28>第二個打印 undefined</div><br data-v-13f35e28><div class="cor36" data-v-13f35e28>物件的 key 都是字符串類型</div><div data-v-13f35e28>var a = {}</div><div data-v-13f35e28>var b = {</div><div data-v-13f35e28>. key: &quot;a&quot;</div><div data-v-13f35e28>}</div><div data-v-13f35e28>var c = {</div><div data-v-13f35e28>. key: &quot;c&quot;</div><div data-v-13f35e28>}</div><div data-v-13f35e28>a[b] = &quot;123&quot;;</div><div data-v-13f35e28>a[c] = &quot;456&quot;;</div><div data-v-13f35e28>console.log( a[b] )</div><br data-v-13f35e28><div data-v-13f35e28>這相當於 let m = {}</div><div data-v-13f35e28>m.a = 1;</div><div data-v-13f35e28>m.a = 2;</div><div data-v-13f35e28>往物件裡面加內容,物件的key為字串</div><div data-v-13f35e28>結果為 456</div><div data-v-13f35e28>for(var k in a){</div><div data-v-13f35e28>. console.log( typeof k )</div><div data-v-13f35e28>}</div><br data-v-13f35e28><div data-v-13f35e28>物件如何找屬性&amp;方法</div><div data-v-13f35e28>console.log( [1,2,3].constructor )</div><div data-v-13f35e28>得到array</div><div data-v-13f35e28>物件透過 構造函數 創造的</div><div data-v-13f35e28>new Array</div><br data-v-13f35e28><div data-v-13f35e28>可以想成</div><div data-v-13f35e28>function Fun(){</div><div data-v-13f35e28>}</div><div data-v-13f35e28>let obj = new Fun();</div><div data-v-13f35e28> console.log( obj.constructor ) . . . //得到Fun() 代表 obj.constructor 指向 Fun() </div><br data-v-13f35e28><div data-v-13f35e28>同理</div><br data-v-13f35e28><div data-v-13f35e28>function Array(){</div><div data-v-13f35e28>}</div><div data-v-13f35e28>new Array</div><div data-v-13f35e28> console.log( [1,2,3].constructor ) . . . //得到Array() 代表 [1,2,3].constructor 指向 Array() </div><div data-v-13f35e28>每一個物件透過構造函數構建出來, 給 new 把它變成物件</div><br data-v-13f35e28><div data-v-13f35e28>1.每一個函數都自帶一個 prototype 原型</div><div data-v-13f35e28>. 注意: 物件擁有 __proto__</div><div data-v-13f35e28>2.new Fun 該 Fun 構造函數的原型指向於對象(new Fun)的原型</div><br data-v-13f35e28><div data-v-13f35e28>物件如何找屬性&amp;方法</div><div data-v-13f35e28> 先在物件本身找 &gt; 構造函數中找 &gt; 物件原型中找 &gt; 構造函數原型中找 &gt; 物件上一層原型查找 </div><br data-v-13f35e28><div data-v-13f35e28>function Fun(){</div><div data-v-13f35e28>. this.a = &quot;在 fun 函數中添加的&quot;;</div><div data-v-13f35e28>}</div><div data-v-13f35e28>Fun.prototype.a = &quot;這是 fun 原型添加的&quot;</div><div data-v-13f35e28>let obj = new Fun();</div><div data-v-13f35e28>obj.a = &quot;物件本身&quot;</div><div data-v-13f35e28>obj.__proto__,a = &quot;這是物件原型添加的&quot;;</div><br data-v-13f35e28><div data-v-13f35e28>console.log(obj.a) . . . // 物件本身</div><br data-v-13f35e28><br data-v-13f35e28><div data-v-13f35e28>function Fun(){</div><div data-v-13f35e28>. this.a = &quot;在 fun 函數中添加的&quot;;</div><div data-v-13f35e28>}</div><div data-v-13f35e28>Fun.prototype.a = &quot;這是 fun 原型添加的&quot;</div><div data-v-13f35e28>let obj = new Fun();</div><div data-v-13f35e28>obj.__proto__,a = &quot;這是物件原型添加的&quot;;</div><br data-v-13f35e28><div data-v-13f35e28>console.log(obj.a) . . . // 在 fun 函數中添加的</div><br data-v-13f35e28><br data-v-13f35e28><div data-v-13f35e28>function Fun(){</div><div data-v-13f35e28>}</div><div data-v-13f35e28>Fun.prototype.a = &quot;這是 fun 原型添加的&quot;</div><div data-v-13f35e28>let obj = new Fun();</div><div data-v-13f35e28>obj.__proto__,a = &quot;這是物件原型添加的&quot;;</div><br data-v-13f35e28><div data-v-13f35e28>console.log(obj.a) . . . // 這是物件原型添加的</div><br data-v-13f35e28><br data-v-13f35e28><div data-v-13f35e28>function Fun(){</div><div data-v-13f35e28>}</div><div data-v-13f35e28>Fun.prototype.a = &quot;這是 fun 原型添加的&quot;</div><div data-v-13f35e28>let obj = new Fun();</div><br data-v-13f35e28><div data-v-13f35e28>console.log(obj.a) . . . // 這是 fun 原型添加的</div><br data-v-13f35e28><div data-v-13f35e28>function Fun(){</div><div data-v-13f35e28>}</div><div data-v-13f35e28>let obj = new Fun();</div><br data-v-13f35e28><div data-v-13f35e28>console.log(obj.a) . . . // undefined</div><br data-v-13f35e28><br data-v-13f35e28><div data-v-13f35e28>function Fun(){</div><div data-v-13f35e28>}</div><div data-v-13f35e28>let obj = new Fun();</div><div data-v-13f35e28>Object.prototype.a = &quot;這是Object添加的&quot;</div><br data-v-13f35e28><div data-v-13f35e28>console.log(obj.a) . . . // 這是Object添加的</div><br data-v-13f35e28><br data-v-13f35e28><div data-v-13f35e28>以上原型鏈</div><div data-v-13f35e28> 先在物件本身找 &gt; 構造函數中找 &gt; 物件原型中找 &gt; 構造函數原型中找 &gt; 物件上一層原型查找 </div><br data-v-13f35e28><br data-v-13f35e28><br data-v-13f35e28><div id="twohand003" class="cardTitle" data-v-13f35e28> 3. JS作用域+this指向+原型的考题 </div><div data-v-13f35e28>function fun(){</div><div data-v-13f35e28>. console.log( 111 );</div><div data-v-13f35e28>. return &quot;aaa&quot;</div><div data-v-13f35e28>}</div><br data-v-13f35e28><div data-v-13f35e28>console.log( fun ); . . . // 打印出 函數本體</div><div data-v-13f35e28>console.log( fun() ); . . . // 先打印 111 , 後打印 aaa</div><div data-v-13f35e28> console.log( new fun() ); . . . //fun{} 返回物件, 因為你new了創建新物件 </div><br data-v-13f35e28><div data-v-13f35e28>如果裡面有 this 則指向於 new fun</div><br data-v-13f35e28><div data-v-13f35e28>function fun(){</div><div data-v-13f35e28>. this.xxx = &quot;123&quot;</div><div data-v-13f35e28>. console.log( 111 );</div><div data-v-13f35e28>. return &quot;aaa&quot;</div><div data-v-13f35e28>}</div><br data-v-13f35e28><div data-v-13f35e28>console.log( new fun() ); . . . //fun{xxx: &quot;123&quot;}</div><br data-v-13f35e28><br data-v-13f35e28><div data-v-13f35e28>function fun(){</div><div data-v-13f35e28>. this.xxx = &quot;123&quot;</div><div data-v-13f35e28>. console.log( this );</div><div data-v-13f35e28>. console.log( 111 );</div><div data-v-13f35e28>. return &quot;aaa&quot;</div><div data-v-13f35e28>}</div><br data-v-13f35e28><div data-v-13f35e28>打印出 window</div><div data-v-13f35e28>普通函數的 this 代表 window</div><br data-v-13f35e28><div class="cor36" data-v-13f35e28>輸出多少?</div><div data-v-13f35e28>function Foo(){</div><div data-v-13f35e28>. getName = function(){console.log(1)}</div><div data-v-13f35e28>. return this;</div><div data-v-13f35e28>}</div><div data-v-13f35e28>Foo.getName = function(){console.log(2)}</div><div data-v-13f35e28>Foo.prototype.getName = function(){console.log(3)}</div><div data-v-13f35e28>var getName = function(){console.log(4)}</div><div data-v-13f35e28>function getName(){</div><div data-v-13f35e28>. console.log(5)</div><div data-v-13f35e28>}</div><br data-v-13f35e28><div data-v-13f35e28>Foo.getName(); . . . // 2</div><div data-v-13f35e28>getName(); . . . // 4</div><div data-v-13f35e28>Foo().getName();</div><div data-v-13f35e28>getName();</div><div data-v-13f35e28>new Foo().getName();</div><br data-v-13f35e28><div data-v-13f35e28>1.getName=function...是全局的window.getName=...</div><br data-v-13f35e28><div data-v-13f35e28>2.Foo.getName() 先找函數本身 打印出 2</div><br data-v-13f35e28><div data-v-13f35e28>3.Foo.getName() 的 Foo 沒有加括號代表他沒有執行</div><br data-v-13f35e28><div data-v-13f35e28> 4.getName() 找到變量 var getName =.. 和函數 function getName(){.. </div><div data-v-13f35e28>(因作用域) 普通變量 &gt; 函數 . . . 所以打印出 4</div><br data-v-13f35e28><div data-v-13f35e28>5.Foo().getName();</div><div data-v-13f35e28>Foo() 先執行 做 //getName = function(){console.log(1)}</div><div data-v-13f35e28>然後 return this . . . return 出 window</div><div data-v-13f35e28>所以是 window.getName() . . . 因上上行 所以打印出 1</div><br data-v-13f35e28><div data-v-13f35e28>6.getName(); . . . 因上上上行覆蓋, 所以打印出 1</div><br data-v-13f35e28><div data-v-13f35e28>7.new Foo().getName(); 物件找方法</div><div data-v-13f35e28> 先在物件本身找 &gt; 構造函數中找 &gt; 物件原型中找 &gt; 構造函數原型中找 &gt; 物件上一層原型查找 </div><div data-v-13f35e28>本身沒有</div><div data-v-13f35e28>構造函數 function Foo(){ 本身裡不是 this. getName是 window.</div><div data-v-13f35e28>物件原型中找 __proto__ 沒有</div><div data-v-13f35e28>物件原型和構造函數原型他們是一個原型</div><div data-v-13f35e28>所以看構造函數原型 , 打印出 3</div><div data-v-13f35e28>Foo.prototype.getName = function(){console.log(3)}</div><br data-v-13f35e28><br data-v-13f35e28><div class="cor36" data-v-13f35e28>輸出多少?</div><div data-v-13f35e28>var o = {</div><div data-v-13f35e28>. a:10,</div><div data-v-13f35e28>. b:{</div><div data-v-13f35e28>. . fn:function(){</div><div data-v-13f35e28>. . . console.log( this.a );</div><div data-v-13f35e28>. . . console.log( this );</div><div data-v-13f35e28>. . }</div><div data-v-13f35e28>. }</div><div data-v-13f35e28>}</div><div data-v-13f35e28>o.b.fn()</div><br data-v-13f35e28><div data-v-13f35e28>重點看誰執行 fn, 所以 fn 裡面的 this 指向 b</div><div data-v-13f35e28>console.log( this.a ); . . . 打印 undefined</div><div data-v-13f35e28>console.log( this ); . . . 打印 fn</div><br data-v-13f35e28><div class="cor36" data-v-13f35e28>輸出多少?</div><div data-v-13f35e28>window.name = &quot;ByteDance&quot;;</div><div data-v-13f35e28>function A(){</div><div data-v-13f35e28>. this.name = 123;</div><div data-v-13f35e28>}</div><div data-v-13f35e28>A.prototype.getA = function(){</div><div data-v-13f35e28>. console.log( this );</div><div data-v-13f35e28>. return this.name + 1;</div><div data-v-13f35e28>}</div><div data-v-13f35e28>let a = new A();</div><div data-v-13f35e28>let funcA = a.getA;</div><div data-v-13f35e28>funcA();</div><div data-v-13f35e28>console.log( funcA() )</div><br data-v-13f35e28><div data-v-13f35e28>先注意 let funcA = a.getA 的 a.getA 有沒有括號,差很大</div><div data-v-13f35e28>a.getA 沒括號 裡面代碼不執行 有return則返回函數體</div><div data-v-13f35e28> a.getA 沒執行, 相當於把這個 A.prototype.getA = function(){ 函數賦給了 funcA </div><div data-v-13f35e28> funcA() 執行了 A.prototype.getA = function(){ 裡面的 console.log(this) 打印 window </div><div data-v-13f35e28>console.log( funcA() ) 要打印 return this.name + 1;</div><div data-v-13f35e28>而 this 代表 window, this.name 找到 &quot;ByteDance&quot;</div><div data-v-13f35e28>console.log( funcA() ) 打印出 &quot;ByteDance1&quot;</div><br data-v-13f35e28><div class="cor36" data-v-13f35e28>輸出多少?</div><div data-v-13f35e28>window.name = &quot;ByteDance&quot;;</div><div data-v-13f35e28>function A(){</div><div data-v-13f35e28>. this.name = 123;</div><div data-v-13f35e28>}</div><div data-v-13f35e28>A.prototype.getA = function(){</div><div data-v-13f35e28>. console.log( this );</div><div data-v-13f35e28>. return this.name + 1;</div><div data-v-13f35e28>}</div><div data-v-13f35e28>let a = new A();</div><div data-v-13f35e28>let funcA = a.getA();</div><div data-v-13f35e28>funcA;</div><br data-v-13f35e28><div data-v-13f35e28>let funcA = a.getA() 調用直接執行</div><div data-v-13f35e28>執行 A.prototype.getA = function(){</div><div data-v-13f35e28>裡面的 console.log( this ) this 指 A</div><div data-v-13f35e28>打印出 A{name: 123}</div><div data-v-13f35e28>funcA沒加括號 裡面代碼不執行 有return則返回函數體</div><br data-v-13f35e28><div class="cor36" data-v-13f35e28>輸出多少?</div><div data-v-13f35e28>var length = 10;</div><div data-v-13f35e28>function fn(){</div><div data-v-13f35e28>. return this.length</div><div data-v-13f35e28>}</div><div data-v-13f35e28>var obj = {</div><div data-v-13f35e28>. length: 5,</div><div data-v-13f35e28>. test1: function(){</div><div data-v-13f35e28>. . return fn();</div><div data-v-13f35e28>. }</div><div data-v-13f35e28>}</div><div data-v-13f35e28>obj.test2 = fn;</div><div data-v-13f35e28>console.log( obj.test1() );</div><div data-v-13f35e28>console.log( fn()===obj.test2() );</div><div data-v-13f35e28>console.log( obj.test1() == obj.test2() );</div><br data-v-13f35e28><div data-v-13f35e28>注意 obj.test2 = fn 沒加掛號 相當於 把這個函數賦給了</div><div data-v-13f35e28>沒加掛號 裡面代碼不執行 有return則返回函數體</div><div data-v-13f35e28>相當於 把這個 function fn(){ 函數賦給了 obj.test2</div><div data-v-13f35e28>所以 obj 多了一個 test2: function</div><br data-v-13f35e28><div data-v-13f35e28>console.log( obj.test1() )</div><div data-v-13f35e28>test1 return fn() , fn帶括號要執行</div><div data-v-13f35e28>fn return this.length, 這個this 指向 window</div><div data-v-13f35e28>return 10, return 10+1</div><div data-v-13f35e28>console.log( obj.test1() ) 打印出 11</div><br data-v-13f35e28><div data-v-13f35e28>console.log( fn()===obj.test2() )</div><div data-v-13f35e28>obj.test2() 裡面 return this.length,</div><div data-v-13f35e28>this 指向 obj , this.length 是 5</div><div data-v-13f35e28>而 fn() 的 this 指向 window , window.length 是 10</div><div data-v-13f35e28>console.log( fn()===obj.test2() ) 是 false</div><br data-v-13f35e28><div data-v-13f35e28>console.log( obj.test1() == obj.test2() )</div><div data-v-13f35e28>obj.test2() 上面討論 5</div><div data-v-13f35e28>obj.test1() 上面討論 11</div><br data-v-13f35e28><br data-v-13f35e28><br data-v-13f35e28><div id="twohand004" class="cardTitle" data-v-13f35e28>4. JS判斷變量是不是數組？</div><div data-v-13f35e28>建議 別寫 typeOf</div><br data-v-13f35e28><div class="cor36" data-v-13f35e28>方法1: isArray</div><div data-v-13f35e28>var arr = [1,2,3];</div><div data-v-13f35e28>console.log( Array.isArray( arr ) ); . . . // true</div><div data-v-13f35e28>console.log( Array.isArray( {} ) ); . . . // false</div><div data-v-13f35e28>嚴謹的方法</div><br data-v-13f35e28><div class="cor36" data-v-13f35e28>方法2: instanceof</div><div data-v-13f35e28>console.log( arr instanceof Array ); . . . // true</div><div data-v-13f35e28>console.log( arr instanceof Object ); . . . // true</div><div data-v-13f35e28>console.log( arr instanceof {} ); . . . // true</div><div data-v-13f35e28>arr instanceof {} true 會往原型去找, 他不嚴謹</div><br data-v-13f35e28><div class="cor36" data-v-13f35e28>方法3: 原型 prototype</div><div data-v-13f35e28> console.log( Object.prototype.toString.call(arr) ); . . . [object Array] </div><div data-v-13f35e28> console.log( Object.prototype.toString.call(arr).indexOf(&quot;Array&quot;) ); </div><div data-v-13f35e28>不是 -1 就證明他 是陣列</div><div data-v-13f35e28> console.log( Object.prototype.toString.call(arr).indexOf(&quot;Array&quot;) &gt; -1 ); . . . // true </div><br data-v-13f35e28><div class="cor36" data-v-13f35e28>方法4: isPrototypeOf()</div><div data-v-13f35e28> console.log( Array.prototype.isPrototyprOf(arr) ) . . . // true </div><br data-v-13f35e28><div class="cor36" data-v-13f35e28>方法5: constructor</div><div data-v-13f35e28> console.log( arr.constructor.toString() ) . . . [object Array] </div><div data-v-13f35e28> console.log( arr.constructor.toString().indexOf(&quot;Array&quot;) ) . . . // true </div><br data-v-13f35e28><br data-v-13f35e28><br data-v-13f35e28><div id="twohand005" class="cardTitle" data-v-13f35e28> 5. slice是幹嘛的、splice是否會改變原數組? </div><div data-v-13f35e28>slice 用來擷取</div><div data-v-13f35e28> slice方法用来截取数组的元素，返回一个新的数组。slice方法有两个参数，第一个参数为截取的开始位置，为数组下标；第二个参数为截取的结束位置。但不包含结束位置的元素 </div><br data-v-13f35e28><div data-v-13f35e28>var arr1 = [ &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot; ];</div><br data-v-13f35e28><div data-v-13f35e28>var arr2 = arr1.slice( 1,3 );</div><div data-v-13f35e28> console.log( arr2 , arr1 ); . . . // [ &quot;b&quot;, &quot;c&quot; ] , [ &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot; ] </div><br data-v-13f35e28><div data-v-13f35e28>var arr3 = arr1.slice( -3 );</div><div data-v-13f35e28>console.log( arr3 ); . . . // [ &quot;c&quot;, &quot;d&quot;, &quot;e&quot; ]</div><br data-v-13f35e28><div data-v-13f35e28>var arr4 = arr1.slice( 2 );</div><div data-v-13f35e28>console.log( arr4 ); . . . // [ &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot; ]</div><br data-v-13f35e28><br data-v-13f35e28><br data-v-13f35e28><div data-v-13f35e28>splice 用來 插入 刪除 替換</div><div data-v-13f35e28> splice方法用来向数组添加元素或者删除数组某个元素，然后删除的元素。第一个参数为插入元素或者删除元素的位置，第二个参数为要删除的元素数量。后面的每个参数都会依次添加到数组中（从删除的位置开始）。 </div><br data-v-13f35e28><div data-v-13f35e28>var arr1 = [ &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot; ];</div><br data-v-13f35e28><div data-v-13f35e28>var arr2 = arr1.splice( 1,1 ); . . . // 從 1 開始刪 1 個</div><div data-v-13f35e28>console.log( arr2 ); . . . // [ &quot;b&quot; ]</div><div data-v-13f35e28>console.log( arr1 ); . . . // [ &quot;a&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot; ]</div><br data-v-13f35e28><div data-v-13f35e28>var arr3 = [ &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot; ];</div><div data-v-13f35e28>var arr4 = arr3.splice( 1,1,&quot;你好&quot; );</div><div data-v-13f35e28> console.log( arr4 ); . . . // [ &quot;a&quot;, &quot;你好&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot; ] </div><br data-v-13f35e28><br data-v-13f35e28><div data-v-13f35e28>區別:</div><div data-v-13f35e28> slice 不改變原數組 返回原數組中的部分元素 用來選擇數組中的元素 </div><br data-v-13f35e28><div data-v-13f35e28> splice 改變原數組 返回數組中被刪除的元素组成的新數組 用於在數組中插入或刪除元素 </div><br data-v-13f35e28><br data-v-13f35e28><br data-v-13f35e28><div id="twohand006" class="cardTitle" data-v-13f35e28>6. JS 數組去重的方式?</div><div class="cor36" data-v-13f35e28># 方法1: new set</div><div data-v-13f35e28>var arr = [ 1,2,3,2,4,1 ];</div><div data-v-13f35e28>console.log( new Set( arr ) );</div><div data-v-13f35e28>發現打印的是物件</div><div data-v-13f35e28>console.log( Array.from( new Set( arr ) ) );</div><div data-v-13f35e28>打印出陣列</div><div data-v-13f35e28>也可以</div><div data-v-13f35e28>console.log( [...new Set( arr ) ] );</div><br data-v-13f35e28><div data-v-13f35e28>封裝:</div><div data-v-13f35e28>function unique( arr ){</div><div class="pTwo" data-v-13f35e28>return [ Array.from( new Set(arr) ) ]</div><div data-v-13f35e28>}</div><div data-v-13f35e28>console.log( unique( arr ) );</div><br data-v-13f35e28><br data-v-13f35e28><div class="cor36" data-v-13f35e28>#</div><div data-v-13f35e28>function unique( arr ){</div><div class="pTwo" data-v-13f35e28>return [...new Set(arr)]</div><div data-v-13f35e28>}</div><div data-v-13f35e28>console.log( unique( arr ) );</div><br data-v-13f35e28><br data-v-13f35e28><div class="cor36" data-v-13f35e28>方法2: indexOf</div><div data-v-13f35e28> indexOf() 方法會回傳給定元素於陣列中第一個被找到之索引，若不存在於陣列中則回傳 -1 </div><br data-v-13f35e28><div data-v-13f35e28>var arr = [ 1,2,3,2,4,1 ];</div><div data-v-13f35e28>function unique( arr ){</div><div class="pTwo" data-v-13f35e28>var result = [];</div><div class="pTwo" data-v-13f35e28>for( var i = 0 ; i ＜ arr.length ; i++ ){</div><div class="pFou" data-v-13f35e28>if( result.indexOf( arr[i] ) == -1 ){</div><div class="pSix" data-v-13f35e28>result.push( arr[i] );</div><div class="pFou" data-v-13f35e28>}</div><div class="pTwo" data-v-13f35e28>}</div><div class="pTwo" data-v-13f35e28>return result;</div><div data-v-13f35e28>}</div><div data-v-13f35e28>console.log( unique( arr ) );</div><br data-v-13f35e28><div data-v-13f35e28>目標, 遍歷陣列, 看有沒有在 result 陣列, 沒有就添加</div><div data-v-13f35e28>去找 indexOf( arr [ i ] )</div><div data-v-13f35e28> 第一次去找 result 肯定是空的 ( 不存在 ) 就回傳 -1 就把他推進 result 裡面 </div><div data-v-13f35e28>不是 -1 就不動作 完成。</div><br data-v-13f35e28><br data-v-13f35e28><div class="cor36" data-v-13f35e28>方法3: reduce</div><div data-v-13f35e28>var arr = [ 1,2,3,2,4,1 ];</div><div data-v-13f35e28>function unique() {</div><div class="pTwo" data-v-13f35e28>var result = arr.reduce( ( pre , item ) =&gt; {</div><div class="pFou" data-v-13f35e28> return pre.includes ( item ) ? pre : [ ...pre , item ] </div><div class="pTwo" data-v-13f35e28>} , [] )</div><div class="pTwo" data-v-13f35e28>console.log ( result )</div><div data-v-13f35e28>}</div><div data-v-13f35e28>unique()</div><br data-v-13f35e28><div data-v-13f35e28>reduce 傳 2參數 1. 方法(A上一次值,B當前值) 2. 初始值</div><div data-v-13f35e28>循環方式: 每次都是上一次結果 pre</div><div data-v-13f35e28> 比如 第 1 次 1 , 把 1 放到 初始值 [ 1 ] , 第 2 次 [ 1, 2 ] , 每次循環都是上一次結果 </div><div data-v-13f35e28> return 判斷有無重複 , 上次結果 包不包含 當前項目 pre.includes(item) </div><div data-v-13f35e28>包含 ...&gt; 不要 , 直接返回當前數組 , 不包含 ...&gt; 加進 pre</div><div data-v-13f35e28>? pre : [ ...pre , item ]</div><br data-v-13f35e28><br data-v-13f35e28><div class="cor36" data-v-13f35e28>方法4: 兩層 for 循環比較</div><div data-v-13f35e28>var arr = [ 1,2,3,2,4,1 ];</div><div data-v-13f35e28>function unique() {</div><div class="pTwo" data-v-13f35e28>for ( let i = 0 ; i ＜ arr.length ; i++ ) {</div><div class="pFou" data-v-13f35e28>for ( let j = i +1 ; j ＜ arr.length ; j++ ) {</div><div class="pSix" data-v-13f35e28>if ( arr [ i ] === arr [ j ] ) {</div><div class="pEig" data-v-13f35e28>arr.splice ( j, 1 )</div><div class="pEig" data-v-13f35e28>j--</div><div class="pSix" data-v-13f35e28>}</div><div class="pFou" data-v-13f35e28>}</div><div class="pTwo" data-v-13f35e28>}</div><div class="pTwo" data-v-13f35e28>return arr</div><div data-v-13f35e28>}</div><br data-v-13f35e28><br data-v-13f35e28><div data-v-13f35e28>第 1 層循環選定 1 個值</div><div data-v-13f35e28>第 2 層循環 遍歷 其餘元素</div><div data-v-13f35e28>依次和 這個值 比較</div><div data-v-13f35e28>相同 ..&gt; splice 刪除</div><br data-v-13f35e28><br data-v-13f35e28><div class="cor36" data-v-13f35e28>方法5: sort</div><div data-v-13f35e28>var arr3 = [ 1,2,3,2,4,1 ];</div><div data-v-13f35e28>function unique( arr ){</div><div data-v-13f35e28>. arr = arr.sort();</div><div data-v-13f35e28>. var brr = [];</div><div data-v-13f35e28>. for( var i = 0 ; i ＜ arr.length ; i++ ){</div><div data-v-13f35e28>. . if( arr[i] !== arr[ i-1 ] ){</div><div data-v-13f35e28>. . . brr.push( arr[ i ] );</div><div data-v-13f35e28>. . }</div><div data-v-13f35e28>. }</div><div data-v-13f35e28>. return brr;</div><div data-v-13f35e28>}</div><div data-v-13f35e28>console.log( unique( arr3 ) );</div><br data-v-13f35e28><br data-v-13f35e28><br data-v-13f35e28><div class="cardTitle" id="twohand007" data-v-13f35e28>7. 找出多維數組最大值?</div><div data-v-13f35e28> 大陣列中包含 4 個小陣列, 分別找到每個小陣列中的最大值, 然後串起來成新陣列 </div><div data-v-13f35e28>輸入:[</div><div data-v-13f35e28>. [ 4, 5, 1, 3, ],</div><div data-v-13f35e28>. [ 13, 27, 18, 26, ],</div><div data-v-13f35e28>. [ 32, 35, 37, 39, ],</div><div data-v-13f35e28>. [ 1000, 1001, 857, 1 ],</div><div data-v-13f35e28>]</div><div data-v-13f35e28>輸出: [ 5, 27, 39, 1001 ]</div><br data-v-13f35e28><br data-v-13f35e28><div data-v-13f35e28>function fnArr( arr ){</div><div data-v-13f35e28>. var newArr = [];</div><div data-v-13f35e28>. arr.forEach(( item, index )=&gt;{</div><div data-v-13f35e28>. . newArr.push( Math.max( ...item ) )</div><div data-v-13f35e28>. })</div><div data-v-13f35e28>. return newArr;</div><div data-v-13f35e28>}</div><div data-v-13f35e28>console.log( fnArr([</div><div data-v-13f35e28>. [ 4, 5, 1, 3, ],</div><div data-v-13f35e28>. [ 13, 27, 18, 26, ],</div><div data-v-13f35e28>. [ 32, 35, 37, 39, ],</div><div data-v-13f35e28>. [ 1000, 1001, 857, 1 ],</div><div data-v-13f35e28>]));</div><br data-v-13f35e28><div data-v-13f35e28>首先 遍歷 item 是每一項 [ 4, 5, 1, 3, ]</div><div data-v-13f35e28>取裡面最大值 Math.max(...item)</div><br data-v-13f35e28><br data-v-13f35e28><br data-v-13f35e28><div id="twohand008" class="cardTitle" data-v-13f35e28>8. 給字串新增方法實現功能</div><div data-v-13f35e28> 給字串物件定義一個addPrefix函數, 當傳入一個字串時, 他會返回新的帶有指定前綴的字串, 例如: </div><div data-v-13f35e28>console.log( &quot;world&quot;.addPrefix(&quot;hello&quot;) )</div><div data-v-13f35e28>控制台輸出: &quot;helloworld&quot;</div><br data-v-13f35e28><div data-v-13f35e28>var str = &quot;你好&quot;;</div><div data-v-13f35e28>String.prototype.addTest = function(){</div><div data-v-13f35e28>. return 111;</div><div data-v-13f35e28>}</div><div data-v-13f35e28>console.log( str.addPrefix() ) . . . // 打印 111</div><br data-v-13f35e28><br data-v-13f35e28><div data-v-13f35e28>String.prototype.addTest = function(){</div><div data-v-13f35e28>. return this;</div><div data-v-13f35e28>}</div><div data-v-13f35e28>console.log( str.addPrefix() ) . . . // 打印 你好</div><br data-v-13f35e28><br data-v-13f35e28><div data-v-13f35e28>String.prototype.addTest = function(){</div><div data-v-13f35e28>. return str + this;</div><div data-v-13f35e28>}</div><div data-v-13f35e28> console.log( &quot;world&quot;.addPrefix(&quot;hello&quot;) ) . . . // 打印 worldhello </div><br data-v-13f35e28><br data-v-13f35e28><br data-v-13f35e28><div id="twohand009" class="cardTitle" data-v-13f35e28> 9. 找出字符串出現最多次數的字符以及次數 </div><div data-v-13f35e28>判斷一個字串中出現次數最多的字符, 並統計次數</div><div data-v-13f35e28> charAt() 方法返回一个由给定索引處的單個 UTF-16 碼元構成的新字串。 </div><div data-v-13f35e28>var john = { . . . //forin複習</div><div data-v-13f35e28>. firstName: &#39;John&#39;,</div><div data-v-13f35e28>. lastName: &#39;Doe&#39;</div><div data-v-13f35e28>};</div><div data-v-13f35e28>for (var prop in john) {</div><div data-v-13f35e28>. console.log(prop + &#39;:&#39; + john[prop]);</div><div data-v-13f35e28>}</div><br data-v-13f35e28><div data-v-13f35e28>var str = &quot;aaabbbbbbbbbccccccc&quot;</div><div data-v-13f35e28>var obj = {};</div><div data-v-13f35e28>for( var i = 0 ; i ＜ str.length ; i++ ){</div><div data-v-13f35e28>. var char = str.charAt(i);</div><div data-v-13f35e28>. if( obj[ char ] ){</div><div data-v-13f35e28>. . obj[ char ]++</div><div data-v-13f35e28>. } else {</div><div data-v-13f35e28>. . obj[ char ] = 1;</div><div data-v-13f35e28>. }</div><div data-v-13f35e28>}</div><div data-v-13f35e28>console.log( obj ); . . . 每個字符和次數都統計出來了</div><br data-v-13f35e28><div data-v-13f35e28>目標 弄一個對象 把值放進去 { a:3, b:10, c:15 }</div><div data-v-13f35e28>遍歷字串, 如果 obj 沒有則 obj[ char ] = 1</div><div data-v-13f35e28>如果 obj 有則 value值++</div><br data-v-13f35e28><div data-v-13f35e28>var max = 0;</div><div data-v-13f35e28>for( var key in obj ){</div><div data-v-13f35e28>. if( max ＜ obj[ key ] ){</div><div data-v-13f35e28>. . max = obj[ key ];</div><div data-v-13f35e28>. }</div><div data-v-13f35e28>}</div><div data-v-13f35e28>console.log( max );</div><br data-v-13f35e28><div data-v-13f35e28>目標 到物件的值找最大值 { a:3, b:10, c:15 } 最大值 15</div><div data-v-13f35e28>遍歷物件 for in</div><div data-v-13f35e28>如果 max變數 小於 obj[key]</div><div data-v-13f35e28>key 是物件中每一項 a b c</div><div data-v-13f35e28>obj[key] 是統計值 3 10 15</div><div data-v-13f35e28>如果 max變數 小於 obj[key] 就賦值 就找到最大值 15</div><br data-v-13f35e28><div data-v-13f35e28>for( var key in obj ){</div><div data-v-13f35e28>. if( obj[key] == max ){</div><div data-v-13f35e28>. . console.log( &quot;最多字符是&quot; + key );</div><div data-v-13f35e28>. . console.log( &quot;出現次數&quot; + max );</div><div data-v-13f35e28>. }</div><div data-v-13f35e28>}</div><br data-v-13f35e28><div data-v-13f35e28>目標 找到最大值 15 對應的 key</div><div data-v-13f35e28>如果 obj[key] == max 就找到了</div><br data-v-13f35e28><br data-v-13f35e28><br data-v-13f35e28><div id="twohand010" class="cardTitle" data-v-13f35e28>10. 作用域考题</div><div data-v-13f35e28>function demo(){</div><div data-v-13f35e28>. var n = 2;</div><div data-v-13f35e28>. if( true ){</div><div data-v-13f35e28>. . var n = 1;</div><div data-v-13f35e28>. }</div><div data-v-13f35e28>. console.log( n );</div><div data-v-13f35e28>}</div><div data-v-13f35e28>demo(); . . . // 打印 1</div><br data-v-13f35e28><div data-v-13f35e28>function demo(){</div><div data-v-13f35e28>. let n = 2;</div><div data-v-13f35e28>. if( true ){</div><div data-v-13f35e28>. . let n = 1;</div><div data-v-13f35e28>. }</div><div data-v-13f35e28>. console.log( n );</div><div data-v-13f35e28>}</div><div data-v-13f35e28>demo(); . . . // 打印 2</div><br data-v-13f35e28><br data-v-13f35e28><br data-v-13f35e28><div id="twohand011" class="cardTitle" data-v-13f35e28>11. 將下列物件進行合併</div><p data-v-13f35e28>const a = { name: &quot;wayne&quot;, age: 18 }</p><p data-v-13f35e28>const b = { sex: &quot;male&quot;, hobby: &quot;sleep&quot; }</p><br data-v-13f35e28><p class="cor36" data-v-13f35e28>方法1: Object.assign</p><p data-v-13f35e28>const a = { name: &quot;wayne&quot;, age: 18 }</p><p data-v-13f35e28>const b = { sex: &quot;male&quot;, hobby: &quot;sleep&quot; }</p><p class="comment" data-v-13f35e28> let obj = Object.assign( a, b ); //會改變 a 物件 </p><p data-v-13f35e28> let obj = Object.assign( {}, a, b ); <span class="comment" data-v-13f35e28>//用空物件,可以不改變a,b</span></p><p data-v-13f35e28>console.log( obj );</p><p class="comment" data-v-13f35e28> // { name:&quot;wayne&quot;,age:18,sex:&quot;male&quot;,hobby:&quot;sleep&quot; } </p><br data-v-13f35e28><p class="cor36" data-v-13f35e28>方法2: 解構賦值 + ...擴展運算符</p><p data-v-13f35e28>const a = { name: &quot;wayne&quot;, age: 18 }</p><p data-v-13f35e28>const b = { sex: &quot;male&quot;, hobby: &quot;sleep&quot; }</p><p data-v-13f35e28>let obj = { ...a, ...b }</p><p data-v-13f35e28>console.log( obj );</p><p class="comment" data-v-13f35e28> // { name:&quot;wayne&quot;,age:18,sex:&quot;male&quot;,hobby:&quot;sleep&quot; } </p><br data-v-13f35e28><p class="cor36" data-v-13f35e28>方法3: 遍歷 物件 a 物件 b</p><p data-v-13f35e28>const a = { name: &quot;wayne&quot;, age: 18 }</p><p data-v-13f35e28>const b = { sex: &quot;male&quot;, hobby: &quot;sleep&quot; }</p><p data-v-13f35e28>const obj = {}</p><p data-v-13f35e28>for ( let key in a ) {</p><p class="pTwo" data-v-13f35e28>obj[ key ] = a[ key ]</p><p data-v-13f35e28>}</p><p data-v-13f35e28>for ( let key in b)</p><p class="pTwo" data-v-13f35e28>obj[ key ] = b[ key ]</p><p data-v-13f35e28>}</p><p data-v-13f35e28>coneol.log ( obj )</p><p class="comment" data-v-13f35e28> // { name:&quot;wayne&quot;,age:18,sex:&quot;male&quot;,hobby:&quot;sleep&quot; } </p><br data-v-13f35e28><br data-v-13f35e28><div id="twohand012" class="cardTitle" data-v-13f35e28>12. 清空數組</div><p class="cor36" data-v-13f35e28>1.直接賦值 空數組</p><p data-v-13f35e28>let a = [ 1,2,3,4 ]</p><p data-v-13f35e28>a = []</p><br data-v-13f35e28><p class="cor36" data-v-13f35e28> 2. splice 方法 -&gt; 會修改原數組 -&gt; 返回值 是 你刪掉的元素 </p><p data-v-13f35e28>arr.splice(起始位置, 需要刪除元素的個數, 插入的值 )</p><br data-v-13f35e28><p data-v-13f35e28>let arr = [ 1,2,3,4 ]</p><p data-v-13f35e28>function fn( arr ) {</p><p class="pTwo" data-v-13f35e28>arr.splice( 0, arr.length )</p><p data-v-13f35e28>}</p><p data-v-13f35e28>fn( arr )</p><p data-v-13f35e28>console.log ( arr )</p><br data-v-13f35e28><p class="cor36" data-v-13f35e28>3.修改 length</p><p data-v-13f35e28>let arr = [ 1,2,3,4 ]</p><p data-v-13f35e28>arr.length = 0</p><p data-v-13f35e28>console.log ( arr )</p><p data-v-13f35e28></p><p data-v-13f35e28></p><p data-v-13f35e28></p><br data-v-13f35e28></div></div></div>',1),S=e(()=>a("div",{class:"toTopButton"},[a("div",{class:"disCen"},"___"),a("div",{class:"disCen"},"▲")],-1)),_=[S],O=e(()=>a("div",{class:"toBotButton"},[a("div",{class:"disCen"},"▼"),a("div",{class:"disCen"},"￣")],-1)),C=[O],J={__name:"JsPageTwoOne",setup(i){const o=p(!1);window.addEventListener("scroll",function(){o.value=window.scrollY>0});function c(){window.scrollTo({top:0,left:0,behavior:"smooth"})}function b(){window.scrollTo({top:999999,left:0,behavior:"smooth"})}function v(f){window.scrollTo({top:document.getElementById(`${f}`).offsetTop,behavior:"smooth"})}return(f,d)=>(g(),q(w,null,[a("section",null,[a("div",A,[a("div",x,[a("div",T,[F,N,a("div",{onClick:d[0]||(d[0]=t=>v("twohand001")),class:"leftNavText"}," 作用域考题 "),a("div",{onClick:d[1]||(d[1]=t=>v("twohand002")),class:"leftNavText"},"物件考题"),a("div",{onClick:d[2]||(d[2]=t=>v("twohand003")),class:"leftNavText"}," 作用域+this指向+原型 "),a("div",{onClick:d[3]||(d[3]=t=>v("twohand004")),class:"leftNavText"}," 判斷變量是不是數組 "),a("div",{onClick:d[4]||(d[4]=t=>v("twohand005")),class:"leftNavText"}," slice&splice "),a("div",{onClick:d[5]||(d[5]=t=>v("twohand006")),class:"leftNavText"}," 數組去重的方式 "),a("div",{onClick:d[6]||(d[6]=t=>v("twohand007")),class:"leftNavText"}," 找出多維數組最大值 "),a("div",{onClick:d[7]||(d[7]=t=>v("twohand008")),class:"leftNavText"}," 給字串新增方法實現功能 "),a("div",{onClick:d[8]||(d[8]=t=>v("twohand009")),class:"leftNavText"}," 找出字符串出現次數 "),a("div",{onClick:d[9]||(d[9]=t=>v("twohand010")),class:"leftNavText"}," 作用域考题 "),a("div",{onClick:d[10]||(d[10]=t=>v("twohand011")),class:"leftNavText"}," 將下列物件進行合併 "),a("div",{onClick:d[11]||(d[11]=t=>v("twohand012")),class:"leftNavText"})])])]),k]),a("div",null,[r(s(u,{name:"fade",tag:"div"},{default:l(()=>[a("div",{onClick:c,class:"toTop"},_)]),_:1},512),[[n,o.value]]),r(s(u,{name:"fade",tag:"div"},{default:l(()=>[a("div",{onClick:b,class:"toBot"},C)]),_:1},512),[[n,o.value]])])],64))}},P=y(J,[["__scopeId","data-v-13f35e28"]]);export{P as default};
