import{e as m,o as T,c as g,a,h as p,v as e,b as l,w as r,T as i,F as u,f,p as C,d as w}from"./index-2e4f8d1f.js";import{_ as H}from"./_plugin-vue_export-helper-c27b6911.js";const o=c=>(C("data-v-b842c602"),c=c(),w(),c),M={class:"leftNav"},_={class:"leftNavContainer"},L={class:"leftNavLayout"},S=f('<div class="Main" data-v-b842c602><div class="mainContainer" data-v-b842c602><h1 id="html001" class="articleCardTitle cor36" data-v-b842c602> [ Html ] ≫ 塊級元素和行內元素的差別? </h1><h3 data-v-b842c602>塊元素有哪些?</h3><p data-v-b842c602> ＜div&gt; . ＜p&gt; . ＜h1&gt; . ＜ul&gt; . ＜table&gt; 獨佔一行, 頁面中垂直排列, 可以設置寬高 和 內外邊距可控 </p><br data-v-b842c602><h3 data-v-b842c602>行內元素有哪些?</h3><p data-v-b842c602> ＜span&gt; . ＜a&gt; . ＜img&gt; . ＜input&gt; 默認同行排列, 寬高由內容決定, 不能設置寬高 </p><br data-v-b842c602><h3 data-v-b842c602>行內塊元素特點?</h3><p data-v-b842c602>display:inline-block 不獨佔一行, 可以設置寬高</p><br data-v-b842c602><p data-v-b842c602>空元素: 指沒有內容或結束標籤的HTML元素。</p><p data-v-b842c602>＜br&gt; . ＜hr&gt; . ＜img&gt; . ＜input&gt; . ＜link&gt; . ＜meta&gt;</p><br data-v-b842c602><br data-v-b842c602><p data-v-b842c602>行內元素如何轉塊元素?</p><p data-v-b842c602>css display inline block</p><br data-v-b842c602><br data-v-b842c602><h2 class="articleCardTitle cor36" data-v-b842c602> 頁面導入樣式,使用@import和link差異? </h2><p data-v-b842c602> link支持早於import, 兼容性link比import好, 先加載的是link標籤, 後加載@import </p><br data-v-b842c602><br data-v-b842c602><h2 class="articleCardTitle" data-v-b842c602>src 和 href 差別?</h2><p data-v-b842c602>相同點:</p><p class="pFou" data-v-b842c602>都可以加載外部文件</p><br data-v-b842c602><br data-v-b842c602><h3 data-v-b842c602>差別:</h3><p class="pFou" data-v-b842c602> herf 用在 link , a ; 而 src 用在 img , style , script </p><br data-v-b842c602><h3 class="pFou" data-v-b842c602> 瀏覽器遇到 href 會並行下載資源, 且不會停止對當前文檔的處理。 </h3><br data-v-b842c602><h3 class="pFou" data-v-b842c602> 瀏覽器遇到 src 會暫停其他資源的下載和處理, 直到該資源加載 或 執行完畢。 </h3><br data-v-b842c602><br data-v-b842c602><h1 class="articleCardTitle cor36" data-v-b842c602> ＜img&gt; 元素的 title 屬性和 alt 屬性有甚麼不同? </h1><p data-v-b842c602> alt 屬性是必需的，它提供了對於圖像的描述。當圖像無法加載時， alt 屬性的值會顯示在圖像的位置，也可供螢幕閱讀器讀取圖像內容。 </p><br data-v-b842c602><p data-v-b842c602> title 屬性提供了對圖像的附加說明。當滑鼠懸停在圖像上時，會顯示 title 屬性的值作為工具提示。 </p><br data-v-b842c602><br data-v-b842c602><h1 id="html002" class="articleCardTitle cor36" data-v-b842c602> [ Html ] ≫ html5有哪些新特性 </h1><p data-v-b842c602>1. 語意化標籤: header footer nav aside article section</p><p data-v-b842c602>2. 影片 和 音源 支持: audio video 標籤</p><p data-v-b842c602> 3. 畫布 canvas 元素允許通過JavaScript動態繪制圖形、動畫和圖像, 失量圖 svg </p><p data-v-b842c602>4. 本地儲存 localStorage , seesionStorage</p><p data-v-b842c602> 5. 語意化表單 ，如＜input type=&quot;email&quot;&gt;、＜input type=&quot;url&quot;&gt;、＜input type=&quot;date&quot;&gt;等，使表單的輸入和驗證更加簡化和語義化。 </p><p data-v-b842c602>6. web worker</p><br data-v-b842c602><br data-v-b842c602><h1 class="articleCardTitle cor36" data-v-b842c602>語義化的理解?</h1><p data-v-b842c602>語意化是根據內容的結構 , 選擇合適的標籤</p><br data-v-b842c602><p data-v-b842c602>用正確的標籤做正確的事</p><br data-v-b842c602><p data-v-b842c602>讓頁面結構更加清晰, 更容易去維護開發</p><br data-v-b842c602><p data-v-b842c602>更容易SEO搜尋引擎優化</p><br data-v-b842c602><br data-v-b842c602><h1 id="html003" class="articleCardTitle cor36" data-v-b842c602> [ Html ] ≫ 那些操作可以提升SEO? </h1><p data-v-b842c602>可以在header裡面的meta這一章節加上description網頁的描述</p><p data-v-b842c602>再來可以加上keyword網頁關鍵字</p><p data-v-b842c602>h1標籤要寫好</p><p data-v-b842c602> 每個頁面的標籤要寫的符合聯結的東西, 比如你跳轉到一個頁面叫A, 你跳轉的鏈結的文字必須符合那個頁面的內容, </p><br data-v-b842c602><br data-v-b842c602><h2 class="articleCardTitle cor36" data-v-b842c602>canvas能幹嘛?</h2><p data-v-b842c602>畫圖的 畫2D為主</p><br data-v-b842c602><br data-v-b842c602><h2 class="articleCardTitle cor36" data-v-b842c602>canvas它畫的是偽圖還是失量圖?</h2><p data-v-b842c602>位圖(有像素操作), SVG才是失量圖</p><br data-v-b842c602><br data-v-b842c602><h2 class="articleCardTitle cor36" data-v-b842c602>canvas支持鼠標事件嗎?</h2><p data-v-b842c602>不支持</p><br data-v-b842c602><br data-v-b842c602><h2 class="articleCardTitle cor36" data-v-b842c602>canvas和svg區別?</h2><p data-v-b842c602>1.一個是位圖一個是失量圖</p><p data-v-b842c602>2.一個是用畫筆一個用標籤,畫筆直接畫,標籤進行累加</p><p data-v-b842c602>3.SVG可以進行類似CSS樣式,canvas只能全靠自己畫不能用css</p><br data-v-b842c602><br data-v-b842c602><h2 class="articleCardTitle cor36" data-v-b842c602>canvas 要用的話怎麼獲取API?</h2><p data-v-b842c602>1.獲取canvas dom元素</p><p data-v-b842c602>2.用dom方法,一開始可以用getContext設2D或3D,</p><p data-v-b842c602>3.設好後可以用繪畫API, fillStyle之類的</p><br data-v-b842c602><br data-v-b842c602><h2 class="articleCardTitle cor36" data-v-b842c602>失量圖是什麼?</h2><p data-v-b842c602> 失量圖是不管放大多少倍, 都沒有鋸齒的一種圖形, 因為它保存的不是色彩值, 而是曲線的座標 </p><br data-v-b842c602><br data-v-b842c602><h2 class="articleCardTitle cor36" data-v-b842c602>位圖是什麼?</h2><p data-v-b842c602>每個像素用RGB來表示</p><br data-v-b842c602><br data-v-b842c602><h2 class="articleCardTitle cor36" data-v-b842c602>svg標籤可以任意嵌套嗎?</h2><p data-v-b842c602>不可以, 一個svg裡面有單獨的p,g,路徑之類的</p><p data-v-b842c602>g可以分組式嵌套</p><br data-v-b842c602><br data-v-b842c602><h2 class="articleCardTitle cor36" data-v-b842c602>svg標籤和DOM標籤的區別?</h2><p data-v-b842c602>svg不可以嵌套,除了g, DOM大部分可以任意嵌套</p><br data-v-b842c602><br data-v-b842c602><h2 class="articleCardTitle cor36" data-v-b842c602> 如果繪畫的量很大,一般用svg還是canvas? </h2><p data-v-b842c602> canvas, svg相當於是一種DOM元素, 操作有性能問題, 小量圖再用svg更方便一點 </p><br data-v-b842c602><br data-v-b842c602><h2 class="articleCardTitle" data-v-b842c602>3. canvas 的常用 api 有哪些</h2><div data-v-b842c602><a class="comment svgs" href="https://developer.mozilla.org/zh-TW/docs/Web/API/Canvas_API" data-v-b842c602>canvas @MDN</a></div><p data-v-b842c602>getContext: 返回一個指定 canvas 的繪畫環境對象</p><p data-v-b842c602>beginPath: 開始繪製</p><p data-v-b842c602>moveTo: 移動畫筆位置</p><p data-v-b842c602>lineTo: 用來繪畫線段</p><p data-v-b842c602>stroke: 用來實施繪製的操作</p><p data-v-b842c602>lineStyle: 設置線段的樣式</p><p data-v-b842c602>closePath: 結束繪製</p><br data-v-b842c602><br data-v-b842c602><h2 class="articleCardTitle cor36" data-v-b842c602>HTML5 和 H5的區別?</h2><p data-v-b842c602>H5是手機端顯示的頁面</p><p data-v-b842c602> HTML5是前端標準化技術的平台, 它提供很多強大功能, 比如再頁面上顯示視屏video標籤, 音屏audio標籤, 網頁中存儲數據 local sessionStorage, 畫2D.3D圖形canvas, 音屏解析, 操作文件, 所有新推出的網頁API都屬於HTML5範圍, 甚至CSS3都屬於HTML5的一部分 </p><br data-v-b842c602><br data-v-b842c602><h1 id="html004" class="articleCardTitle cor36" data-v-b842c602> [ Html ] ≫ Doctype作用?嚴格模式和混雜模式如何區分?他們有何意義? </h1><p data-v-b842c602> ＜!Doctype&gt;（文件類型聲明）位於文檔中最前面，在＜html&gt;標籤之前。它告訴瀏覽器的解析器用哪個HTML版本的規範來解析網頁。 </p><br data-v-b842c602><p data-v-b842c602>標準模式：</p><p data-v-b842c602> 瀏覽器 使用 W3C 的標準 解析渲染 網頁，瀏覽器 以 其 支持的最高標準 呈現頁面。 </p><br data-v-b842c602><p data-v-b842c602>怪異模式：</p><p data-v-b842c602> 瀏覽器 用自己的 怪異模式 解析和渲染 網頁，頁面 以 一種 較 寬鬆的 向後兼容的 方式 顯示。 </p><br data-v-b842c602><br data-v-b842c602><br data-v-b842c602><h1 class="articleCardTitle cor36" data-v-b842c602> [ Html ] ≫ HTML全局属性(global attribute)有哪些? </h1><p data-v-b842c602>1.class：為元素指定一個或多個類名，用於樣式和 JavaScript 操作。</p><p data-v-b842c602>2.id：為元素指定唯一的標識符。</p><p data-v-b842c602>3.style：用於內聯樣式，用於指定元素的樣式規則。</p><p data-v-b842c602>4.title：用於提供關於元素的額外信息。</p><p data-v-b842c602>5.lang：用於指定元素的語言。</p><p data-v-b842c602>6.data-*：用於自定義數據屬性，可以存儲與元素相關的自定義數據。</p><p data-v-b842c602>7.draggable：指定元素是否可拖動。</p><p data-v-b842c602>8.hidden：指定元素是否隱藏。</p><br data-v-b842c602><br data-v-b842c602><h1 class="articleCardTitle" data-v-b842c602> [ Html ] ≫ 如何在頁面上實現一個圓形的可點擊區域 </h1><div data-v-b842c602><a class="comment svgs" href="https://codepen.io/wayne23123/pen/jOQBdZr?editors=1010" data-v-b842c602>作品DEMO: 在頁面上實現一個圓形可點擊區域</a></div><br data-v-b842c602><br data-v-b842c602><h1 class="articleCardTitle" data-v-b842c602>怎樣處理 移動端 1px 被渲染成 2px?</h1><p data-v-b842c602> 2倍屏 =&gt; 移動設備螢幕尺寸沒有變化，但螢幕分辨率卻提高一倍 ( 同大小螢幕像素多一倍 ) </p><br data-v-b842c602><p data-v-b842c602>局部處理:</p><p data-v-b842c602>meta 標籤中的 viewport 屬性， initial-scale 設為 1</p><p data-v-b842c602>rem 照設計稿走 ， 利用 transform: scale(0.5) 縮小</p><br data-v-b842c602><p data-v-b842c602>全局處理:</p><p data-v-b842c602>meta 標籤中的 viewport 屬性， initial-scale 設為 0.5</p><p data-v-b842c602>rem 照設計稿走</p><br data-v-b842c602><br data-v-b842c602><h1 id="" class="articleCardTitle cor36" data-v-b842c602> [ Html ] ≫ div+css 布局 比 table 布局有甚麼優點? </h1><p data-v-b842c602>div+css:</p><p data-v-b842c602> 頁面加載速度更快，結構化清晰。(他一邊加載一邊呈現，至少基本網頁結構可以很快呈現) </p><p data-v-b842c602>div 布局符合 W3C 標準 =&gt; 做到了 結構 表現 行為 分離</p><p data-v-b842c602>有利 SEO</p><br data-v-b842c602><p data-v-b842c602>table:</p><p data-v-b842c602> 如果 table 嵌套層數太多，可能導致頁面一直出不來。(table 布局要等到全部 table 加載完，再呈現頁面) </p><br data-v-b842c602><br data-v-b842c602><h1 id="" class="articleCardTitle" data-v-b842c602> [ Html ] ≫ iframe（內嵌框架）有哪些缺點? </h1><p data-v-b842c602>1.iframe的載入確實會阻塞主頁面的onload事件。</p><p class="pTwo" data-v-b842c602> 當頁面中包含一個或多個iframe元素時，當iframe開始載入和渲染內容時，主頁面的onload事件將被延遲到所有的iframe載入完成後才觸發。 </p><br data-v-b842c602><p data-v-b842c602>2.搜索引擎無法解讀這種頁面，不利 SEO。</p><br data-v-b842c602><p data-v-b842c602> 3.iframe 和主頁面共享連接池，而瀏覽器對相同域的連接有限制，所以會影響頁面的併行加載 </p><br data-v-b842c602><br data-v-b842c602><p data-v-b842c602> 使用 JS 動態給 iframe 添加 src 屬性值可以避免 阻塞主頁面的onload事件 和 和主頁面共享連接池 </p><br data-v-b842c602><p data-v-b842c602>1.在主頁面的 onload 事件觸發後再用 JS 給 iframe 添加 src 屬性</p><p data-v-b842c602> 2.在主頁面加載完成後 用 JS 給 iframe 添加 src 屬性 可以減少對連接池的佔用，提高頁面並行加載能力。 </p><br data-v-b842c602><br data-v-b842c602><h1 id="" class="articleCardTitle" data-v-b842c602> [ Html ] ≫ XHTML（可擴展超文本標記語言）和HTML（超文本標記語言）區別? </h1><p data-v-b842c602>1.XHTML 元素必須正確嵌套</p><p data-v-b842c602>2.XHTML 標籤必須閉合</p><p data-v-b842c602>3.XHTML 元素必須</p><p data-v-b842c602>4.XHTML 標籤名小寫</p><p data-v-b842c602>5.XHTML 必須有根元素 -&gt; ＜html&gt;</p><br data-v-b842c602><p data-v-b842c602>語法要求：</p><p class="pTwo" data-v-b842c602> HTML語法相對寬鬆，不強制要求標籤閉合，標籤名可以使用大寫或小寫。 </p><p class="pTwo" data-v-b842c602> XHTML採用XML語法，要求所有標籤必須閉合，並且標籤名必須使用小寫。 </p><br data-v-b842c602><p data-v-b842c602>兼容性：</p><p class="pTwo" data-v-b842c602> HTML對於各大瀏覽器的兼容性相對較差，特別是對於IE瀏覽器而言。網頁開發者需要具備較高的HTML編寫技巧，否則容易出現兼容性問題。 </p><p class="pTwo" data-v-b842c602> XHTML則能夠有效處理各大瀏覽器的兼容性問題，因為XHTML的語法要求較為嚴謹。如果習慣於鬆散的HTML編寫方式，轉向XHTML可能需要一些適應的時間。XHTML結合了部分XML的強大功能和大部分HTML的簡單特性。 </p><br data-v-b842c602><br data-v-b842c602><h1 id="" class="articleCardTitle cor36" data-v-b842c602> [ Html ] ≫ ＜meta name=&quot;viewport&quot;&gt; </h1><div class="bgcVS" data-v-b842c602><div data-v-b842c602><span class="then" data-v-b842c602></span><span class="number" data-v-b842c602>meta </span><span class="function" data-v-b842c602>name</span><span class="then" data-v-b842c602>=&quot;</span><span class="src" data-v-b842c602>viewport</span><span class="then" data-v-b842c602>&quot;</span><span class="function" data-v-b842c602>content</span><span class="then" data-v-b842c602>=&quot;</span><span class="src" data-v-b842c602>width=device-width,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0,user-scalable=no</span><span class="then" data-v-b842c602>&quot; /&gt;</span></div><br data-v-b842c602><div class="comment" data-v-b842c602> // width 設置viewport寬度，可以是正整數或字符串&#39;device-width&#39; </div><br data-v-b842c602><div class="comment" data-v-b842c602>// device-width 設備寬度</div><br data-v-b842c602><div class="comment" data-v-b842c602> // height 設置viewport高度，一般設置寬度後，高度會自動解析，可以不設置 </div><br data-v-b842c602><div class="comment" data-v-b842c602> // initial-scale 默認縮放比例（初始縮放比例），為一個數字，可以帶小數 </div><br data-v-b842c602><div class="comment" data-v-b842c602> // minimum-scale 允許用戶最小縮放比例，為一個數字，可以帶小數 </div><br data-v-b842c602><div class="comment" data-v-b842c602> // maximum-scale 允許用戶最大縮放比例，為一個數字，可以帶小數 </div><br data-v-b842c602><div class="comment" data-v-b842c602>// user-scalable 是否允許手動縮放</div><br data-v-b842c602><br data-v-b842c602></div><br data-v-b842c602><br data-v-b842c602><h2 class="articleCardTitle" data-v-b842c602>4. web worker 有甚麼作用?應用場景?</h2><div data-v-b842c602><a class="comment svgs" href="https://developer.mozilla.org/zh-TW/docs/Web/API/Web_Workers_API/Using_web_workers" data-v-b842c602>web worker @MDN</a></div><p data-v-b842c602>新開一個子線程, 且子線程的操作不受線程影響</p><p data-v-b842c602>用於大數據處理 或 耗費時間長的操作</p><br data-v-b842c602><br data-v-b842c602><h1 id="" class="articleCardTitle cor36" data-v-b842c602> [ Html ] ≫ html5 的離線儲存 </h1><p data-v-b842c602> 當使用者沒有與網際網路連接時，可以正常訪問網站或應用程式；當使用者與網際網路連接時，則會更新使用者機器上的快取檔案。 </p><br data-v-b842c602><p data-v-b842c602> 工作原理：HTML5的離線儲存是建立在一個名為「.appcache」的快取機制上（並非儲存技術）。透過這個檔案中的解析清單，網站的資源可以被離線儲存。當網路處於離線狀態時，瀏覽器會使用這些已儲存的資源來顯示網頁。 </p><br data-v-b842c602><p data-v-b842c602>使用方法：</p><p class="pTwo" data-v-b842c602> 1.在網頁的標頭中加入「manifest」屬性，例如：＜html manifest=&quot;cache.manifest&quot;&gt;＜/html&gt; </p><p class="pTwo" data-v-b842c602> 2.創建一個「cache.manifest」檔案，並在其中編寫離線儲存的資源清單。 </p><p class="pTwo" data-v-b842c602> 3.在需要實現離線儲存的地方，可以使用「window.applicationCache」對離線儲存進行操作。例如，可以通過檢查「applicationCache.status」來確定快取的狀態，並根據需要更新或讀取快取的資源。 </p><br data-v-b842c602><br data-v-b842c602></div></div>',1),k=o(()=>a("div",{class:"toTopButton"},[a("div",{class:"disCen"},"___"),a("div",{class:"disCen"},"▲")],-1)),y=[k],D=o(()=>a("div",{class:"toBotButton"},[a("div",{class:"disCen"},"▼"),a("div",{class:"disCen"},"￣")],-1)),q=[D],x={__name:"HtmlPage",setup(c){const b=m(!1);window.addEventListener("scroll",function(){b.value=window.scrollY>0});function n(){window.scrollTo({top:0,left:0,behavior:"smooth"})}function h(){window.scrollTo({top:999999,left:0,behavior:"smooth"})}function d(s){window.scrollTo({top:document.getElementById(`${s}`).offsetTop,behavior:"smooth"})}return(s,t)=>(T(),g(u,null,[a("section",null,[a("div",M,[a("div",_,[a("div",L,[a("div",{onClick:t[0]||(t[0]=v=>d("html001")),class:"leftNavText"}," 塊級元素和行內元素的差別 "),a("div",{onClick:t[1]||(t[1]=v=>d("html002")),class:"leftNavText"},"html5新特性"),a("div",{onClick:t[2]||(t[2]=v=>d("html003")),class:"leftNavText"}," 那些操作可以提升SEO "),a("div",{onClick:t[3]||(t[3]=v=>d("html004")),class:"leftNavText"}," Doctype作用,嚴格模式和混雜模式 ")])])]),S]),a("div",null,[p(l(i,{name:"fade",tag:"div"},{default:r(()=>[a("div",{onClick:n,class:"toTop"},y)]),_:1},512),[[e,b.value]]),p(l(i,{name:"fade",tag:"div"},{default:r(()=>[a("div",{onClick:h,class:"toBot"},q)]),_:1},512),[[e,b.value]])])],64))}},N=H(x,[["__scopeId","data-v-b842c602"]]);export{N as default};
